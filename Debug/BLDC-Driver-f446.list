
BLDC-Driver-f446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .backup_flash 00004000  08004000  08004000  00014000  2**0
                  ALLOC
  2 .text         0000b014  08008000  08008000  00018000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00013c48  08013018  08013018  00023018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08026c60  08026c60  000400a4  2**0
                  CONTENTS
  5 .ARM          00000008  08026c60  08026c60  00036c60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08026c68  08026c68  000400a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08026c68  08026c68  00036c68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08026c6c  08026c6c  00036c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000000a4  20000000  08026c70  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000453c  200000a4  08026d14  000400a4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200045e0  08026d14  000445e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000400a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b1be  00000000  00000000  000400d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00003fd1  00000000  00000000  0005b292  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000014f8  00000000  00000000  0005f268  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000012f0  00000000  00000000  00060760  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000261fa  00000000  00000000  00061a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000138a7  00000000  00000000  00087c4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000da4fb  00000000  00000000  0009b4f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  001759ec  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006060  00000000  00000000  00175a68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008000 <__do_global_dtors_aux>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4c05      	ldr	r4, [pc, #20]	; (8008018 <__do_global_dtors_aux+0x18>)
 8008004:	7823      	ldrb	r3, [r4, #0]
 8008006:	b933      	cbnz	r3, 8008016 <__do_global_dtors_aux+0x16>
 8008008:	4b04      	ldr	r3, [pc, #16]	; (800801c <__do_global_dtors_aux+0x1c>)
 800800a:	b113      	cbz	r3, 8008012 <__do_global_dtors_aux+0x12>
 800800c:	4804      	ldr	r0, [pc, #16]	; (8008020 <__do_global_dtors_aux+0x20>)
 800800e:	f3af 8000 	nop.w
 8008012:	2301      	movs	r3, #1
 8008014:	7023      	strb	r3, [r4, #0]
 8008016:	bd10      	pop	{r4, pc}
 8008018:	200000a4 	.word	0x200000a4
 800801c:	00000000 	.word	0x00000000
 8008020:	08012ffc 	.word	0x08012ffc

08008024 <frame_dummy>:
 8008024:	b508      	push	{r3, lr}
 8008026:	4b03      	ldr	r3, [pc, #12]	; (8008034 <frame_dummy+0x10>)
 8008028:	b11b      	cbz	r3, 8008032 <frame_dummy+0xe>
 800802a:	4903      	ldr	r1, [pc, #12]	; (8008038 <frame_dummy+0x14>)
 800802c:	4803      	ldr	r0, [pc, #12]	; (800803c <frame_dummy+0x18>)
 800802e:	f3af 8000 	nop.w
 8008032:	bd08      	pop	{r3, pc}
 8008034:	00000000 	.word	0x00000000
 8008038:	200000a8 	.word	0x200000a8
 800803c:	08012ffc 	.word	0x08012ffc

08008040 <memchr>:
 8008040:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008044:	2a10      	cmp	r2, #16
 8008046:	db2b      	blt.n	80080a0 <memchr+0x60>
 8008048:	f010 0f07 	tst.w	r0, #7
 800804c:	d008      	beq.n	8008060 <memchr+0x20>
 800804e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008052:	3a01      	subs	r2, #1
 8008054:	428b      	cmp	r3, r1
 8008056:	d02d      	beq.n	80080b4 <memchr+0x74>
 8008058:	f010 0f07 	tst.w	r0, #7
 800805c:	b342      	cbz	r2, 80080b0 <memchr+0x70>
 800805e:	d1f6      	bne.n	800804e <memchr+0xe>
 8008060:	b4f0      	push	{r4, r5, r6, r7}
 8008062:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008066:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800806a:	f022 0407 	bic.w	r4, r2, #7
 800806e:	f07f 0700 	mvns.w	r7, #0
 8008072:	2300      	movs	r3, #0
 8008074:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008078:	3c08      	subs	r4, #8
 800807a:	ea85 0501 	eor.w	r5, r5, r1
 800807e:	ea86 0601 	eor.w	r6, r6, r1
 8008082:	fa85 f547 	uadd8	r5, r5, r7
 8008086:	faa3 f587 	sel	r5, r3, r7
 800808a:	fa86 f647 	uadd8	r6, r6, r7
 800808e:	faa5 f687 	sel	r6, r5, r7
 8008092:	b98e      	cbnz	r6, 80080b8 <memchr+0x78>
 8008094:	d1ee      	bne.n	8008074 <memchr+0x34>
 8008096:	bcf0      	pop	{r4, r5, r6, r7}
 8008098:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800809c:	f002 0207 	and.w	r2, r2, #7
 80080a0:	b132      	cbz	r2, 80080b0 <memchr+0x70>
 80080a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80080a6:	3a01      	subs	r2, #1
 80080a8:	ea83 0301 	eor.w	r3, r3, r1
 80080ac:	b113      	cbz	r3, 80080b4 <memchr+0x74>
 80080ae:	d1f8      	bne.n	80080a2 <memchr+0x62>
 80080b0:	2000      	movs	r0, #0
 80080b2:	4770      	bx	lr
 80080b4:	3801      	subs	r0, #1
 80080b6:	4770      	bx	lr
 80080b8:	2d00      	cmp	r5, #0
 80080ba:	bf06      	itte	eq
 80080bc:	4635      	moveq	r5, r6
 80080be:	3803      	subeq	r0, #3
 80080c0:	3807      	subne	r0, #7
 80080c2:	f015 0f01 	tst.w	r5, #1
 80080c6:	d107      	bne.n	80080d8 <memchr+0x98>
 80080c8:	3001      	adds	r0, #1
 80080ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80080ce:	bf02      	ittt	eq
 80080d0:	3001      	addeq	r0, #1
 80080d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80080d6:	3001      	addeq	r0, #1
 80080d8:	bcf0      	pop	{r4, r5, r6, r7}
 80080da:	3801      	subs	r0, #1
 80080dc:	4770      	bx	lr
 80080de:	bf00      	nop

080080e0 <__aeabi_drsub>:
 80080e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80080e4:	e002      	b.n	80080ec <__adddf3>
 80080e6:	bf00      	nop

080080e8 <__aeabi_dsub>:
 80080e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080080ec <__adddf3>:
 80080ec:	b530      	push	{r4, r5, lr}
 80080ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80080f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80080f6:	ea94 0f05 	teq	r4, r5
 80080fa:	bf08      	it	eq
 80080fc:	ea90 0f02 	teqeq	r0, r2
 8008100:	bf1f      	itttt	ne
 8008102:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008106:	ea55 0c02 	orrsne.w	ip, r5, r2
 800810a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800810e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008112:	f000 80e2 	beq.w	80082da <__adddf3+0x1ee>
 8008116:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800811a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800811e:	bfb8      	it	lt
 8008120:	426d      	neglt	r5, r5
 8008122:	dd0c      	ble.n	800813e <__adddf3+0x52>
 8008124:	442c      	add	r4, r5
 8008126:	ea80 0202 	eor.w	r2, r0, r2
 800812a:	ea81 0303 	eor.w	r3, r1, r3
 800812e:	ea82 0000 	eor.w	r0, r2, r0
 8008132:	ea83 0101 	eor.w	r1, r3, r1
 8008136:	ea80 0202 	eor.w	r2, r0, r2
 800813a:	ea81 0303 	eor.w	r3, r1, r3
 800813e:	2d36      	cmp	r5, #54	; 0x36
 8008140:	bf88      	it	hi
 8008142:	bd30      	pophi	{r4, r5, pc}
 8008144:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008148:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800814c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008150:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008154:	d002      	beq.n	800815c <__adddf3+0x70>
 8008156:	4240      	negs	r0, r0
 8008158:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800815c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008160:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008164:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008168:	d002      	beq.n	8008170 <__adddf3+0x84>
 800816a:	4252      	negs	r2, r2
 800816c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008170:	ea94 0f05 	teq	r4, r5
 8008174:	f000 80a7 	beq.w	80082c6 <__adddf3+0x1da>
 8008178:	f1a4 0401 	sub.w	r4, r4, #1
 800817c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008180:	db0d      	blt.n	800819e <__adddf3+0xb2>
 8008182:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008186:	fa22 f205 	lsr.w	r2, r2, r5
 800818a:	1880      	adds	r0, r0, r2
 800818c:	f141 0100 	adc.w	r1, r1, #0
 8008190:	fa03 f20e 	lsl.w	r2, r3, lr
 8008194:	1880      	adds	r0, r0, r2
 8008196:	fa43 f305 	asr.w	r3, r3, r5
 800819a:	4159      	adcs	r1, r3
 800819c:	e00e      	b.n	80081bc <__adddf3+0xd0>
 800819e:	f1a5 0520 	sub.w	r5, r5, #32
 80081a2:	f10e 0e20 	add.w	lr, lr, #32
 80081a6:	2a01      	cmp	r2, #1
 80081a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80081ac:	bf28      	it	cs
 80081ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80081b2:	fa43 f305 	asr.w	r3, r3, r5
 80081b6:	18c0      	adds	r0, r0, r3
 80081b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80081bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80081c0:	d507      	bpl.n	80081d2 <__adddf3+0xe6>
 80081c2:	f04f 0e00 	mov.w	lr, #0
 80081c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80081ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80081ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80081d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80081d6:	d31b      	bcc.n	8008210 <__adddf3+0x124>
 80081d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80081dc:	d30c      	bcc.n	80081f8 <__adddf3+0x10c>
 80081de:	0849      	lsrs	r1, r1, #1
 80081e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80081e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80081e8:	f104 0401 	add.w	r4, r4, #1
 80081ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80081f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80081f4:	f080 809a 	bcs.w	800832c <__adddf3+0x240>
 80081f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80081fc:	bf08      	it	eq
 80081fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008202:	f150 0000 	adcs.w	r0, r0, #0
 8008206:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800820a:	ea41 0105 	orr.w	r1, r1, r5
 800820e:	bd30      	pop	{r4, r5, pc}
 8008210:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008214:	4140      	adcs	r0, r0
 8008216:	eb41 0101 	adc.w	r1, r1, r1
 800821a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800821e:	f1a4 0401 	sub.w	r4, r4, #1
 8008222:	d1e9      	bne.n	80081f8 <__adddf3+0x10c>
 8008224:	f091 0f00 	teq	r1, #0
 8008228:	bf04      	itt	eq
 800822a:	4601      	moveq	r1, r0
 800822c:	2000      	moveq	r0, #0
 800822e:	fab1 f381 	clz	r3, r1
 8008232:	bf08      	it	eq
 8008234:	3320      	addeq	r3, #32
 8008236:	f1a3 030b 	sub.w	r3, r3, #11
 800823a:	f1b3 0220 	subs.w	r2, r3, #32
 800823e:	da0c      	bge.n	800825a <__adddf3+0x16e>
 8008240:	320c      	adds	r2, #12
 8008242:	dd08      	ble.n	8008256 <__adddf3+0x16a>
 8008244:	f102 0c14 	add.w	ip, r2, #20
 8008248:	f1c2 020c 	rsb	r2, r2, #12
 800824c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008250:	fa21 f102 	lsr.w	r1, r1, r2
 8008254:	e00c      	b.n	8008270 <__adddf3+0x184>
 8008256:	f102 0214 	add.w	r2, r2, #20
 800825a:	bfd8      	it	le
 800825c:	f1c2 0c20 	rsble	ip, r2, #32
 8008260:	fa01 f102 	lsl.w	r1, r1, r2
 8008264:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008268:	bfdc      	itt	le
 800826a:	ea41 010c 	orrle.w	r1, r1, ip
 800826e:	4090      	lslle	r0, r2
 8008270:	1ae4      	subs	r4, r4, r3
 8008272:	bfa2      	ittt	ge
 8008274:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008278:	4329      	orrge	r1, r5
 800827a:	bd30      	popge	{r4, r5, pc}
 800827c:	ea6f 0404 	mvn.w	r4, r4
 8008280:	3c1f      	subs	r4, #31
 8008282:	da1c      	bge.n	80082be <__adddf3+0x1d2>
 8008284:	340c      	adds	r4, #12
 8008286:	dc0e      	bgt.n	80082a6 <__adddf3+0x1ba>
 8008288:	f104 0414 	add.w	r4, r4, #20
 800828c:	f1c4 0220 	rsb	r2, r4, #32
 8008290:	fa20 f004 	lsr.w	r0, r0, r4
 8008294:	fa01 f302 	lsl.w	r3, r1, r2
 8008298:	ea40 0003 	orr.w	r0, r0, r3
 800829c:	fa21 f304 	lsr.w	r3, r1, r4
 80082a0:	ea45 0103 	orr.w	r1, r5, r3
 80082a4:	bd30      	pop	{r4, r5, pc}
 80082a6:	f1c4 040c 	rsb	r4, r4, #12
 80082aa:	f1c4 0220 	rsb	r2, r4, #32
 80082ae:	fa20 f002 	lsr.w	r0, r0, r2
 80082b2:	fa01 f304 	lsl.w	r3, r1, r4
 80082b6:	ea40 0003 	orr.w	r0, r0, r3
 80082ba:	4629      	mov	r1, r5
 80082bc:	bd30      	pop	{r4, r5, pc}
 80082be:	fa21 f004 	lsr.w	r0, r1, r4
 80082c2:	4629      	mov	r1, r5
 80082c4:	bd30      	pop	{r4, r5, pc}
 80082c6:	f094 0f00 	teq	r4, #0
 80082ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80082ce:	bf06      	itte	eq
 80082d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80082d4:	3401      	addeq	r4, #1
 80082d6:	3d01      	subne	r5, #1
 80082d8:	e74e      	b.n	8008178 <__adddf3+0x8c>
 80082da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80082de:	bf18      	it	ne
 80082e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80082e4:	d029      	beq.n	800833a <__adddf3+0x24e>
 80082e6:	ea94 0f05 	teq	r4, r5
 80082ea:	bf08      	it	eq
 80082ec:	ea90 0f02 	teqeq	r0, r2
 80082f0:	d005      	beq.n	80082fe <__adddf3+0x212>
 80082f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80082f6:	bf04      	itt	eq
 80082f8:	4619      	moveq	r1, r3
 80082fa:	4610      	moveq	r0, r2
 80082fc:	bd30      	pop	{r4, r5, pc}
 80082fe:	ea91 0f03 	teq	r1, r3
 8008302:	bf1e      	ittt	ne
 8008304:	2100      	movne	r1, #0
 8008306:	2000      	movne	r0, #0
 8008308:	bd30      	popne	{r4, r5, pc}
 800830a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800830e:	d105      	bne.n	800831c <__adddf3+0x230>
 8008310:	0040      	lsls	r0, r0, #1
 8008312:	4149      	adcs	r1, r1
 8008314:	bf28      	it	cs
 8008316:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800831a:	bd30      	pop	{r4, r5, pc}
 800831c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008320:	bf3c      	itt	cc
 8008322:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008326:	bd30      	popcc	{r4, r5, pc}
 8008328:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800832c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008330:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008334:	f04f 0000 	mov.w	r0, #0
 8008338:	bd30      	pop	{r4, r5, pc}
 800833a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800833e:	bf1a      	itte	ne
 8008340:	4619      	movne	r1, r3
 8008342:	4610      	movne	r0, r2
 8008344:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008348:	bf1c      	itt	ne
 800834a:	460b      	movne	r3, r1
 800834c:	4602      	movne	r2, r0
 800834e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008352:	bf06      	itte	eq
 8008354:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008358:	ea91 0f03 	teqeq	r1, r3
 800835c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008360:	bd30      	pop	{r4, r5, pc}
 8008362:	bf00      	nop

08008364 <__aeabi_ui2d>:
 8008364:	f090 0f00 	teq	r0, #0
 8008368:	bf04      	itt	eq
 800836a:	2100      	moveq	r1, #0
 800836c:	4770      	bxeq	lr
 800836e:	b530      	push	{r4, r5, lr}
 8008370:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008374:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008378:	f04f 0500 	mov.w	r5, #0
 800837c:	f04f 0100 	mov.w	r1, #0
 8008380:	e750      	b.n	8008224 <__adddf3+0x138>
 8008382:	bf00      	nop

08008384 <__aeabi_i2d>:
 8008384:	f090 0f00 	teq	r0, #0
 8008388:	bf04      	itt	eq
 800838a:	2100      	moveq	r1, #0
 800838c:	4770      	bxeq	lr
 800838e:	b530      	push	{r4, r5, lr}
 8008390:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008394:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008398:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800839c:	bf48      	it	mi
 800839e:	4240      	negmi	r0, r0
 80083a0:	f04f 0100 	mov.w	r1, #0
 80083a4:	e73e      	b.n	8008224 <__adddf3+0x138>
 80083a6:	bf00      	nop

080083a8 <__aeabi_f2d>:
 80083a8:	0042      	lsls	r2, r0, #1
 80083aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80083ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80083b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80083b6:	bf1f      	itttt	ne
 80083b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80083bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80083c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80083c4:	4770      	bxne	lr
 80083c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80083ca:	bf08      	it	eq
 80083cc:	4770      	bxeq	lr
 80083ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80083d2:	bf04      	itt	eq
 80083d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80083d8:	4770      	bxeq	lr
 80083da:	b530      	push	{r4, r5, lr}
 80083dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80083e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80083e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80083e8:	e71c      	b.n	8008224 <__adddf3+0x138>
 80083ea:	bf00      	nop

080083ec <__aeabi_ul2d>:
 80083ec:	ea50 0201 	orrs.w	r2, r0, r1
 80083f0:	bf08      	it	eq
 80083f2:	4770      	bxeq	lr
 80083f4:	b530      	push	{r4, r5, lr}
 80083f6:	f04f 0500 	mov.w	r5, #0
 80083fa:	e00a      	b.n	8008412 <__aeabi_l2d+0x16>

080083fc <__aeabi_l2d>:
 80083fc:	ea50 0201 	orrs.w	r2, r0, r1
 8008400:	bf08      	it	eq
 8008402:	4770      	bxeq	lr
 8008404:	b530      	push	{r4, r5, lr}
 8008406:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800840a:	d502      	bpl.n	8008412 <__aeabi_l2d+0x16>
 800840c:	4240      	negs	r0, r0
 800840e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008412:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008416:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800841a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800841e:	f43f aed8 	beq.w	80081d2 <__adddf3+0xe6>
 8008422:	f04f 0203 	mov.w	r2, #3
 8008426:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800842a:	bf18      	it	ne
 800842c:	3203      	addne	r2, #3
 800842e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008432:	bf18      	it	ne
 8008434:	3203      	addne	r2, #3
 8008436:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800843a:	f1c2 0320 	rsb	r3, r2, #32
 800843e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008442:	fa20 f002 	lsr.w	r0, r0, r2
 8008446:	fa01 fe03 	lsl.w	lr, r1, r3
 800844a:	ea40 000e 	orr.w	r0, r0, lr
 800844e:	fa21 f102 	lsr.w	r1, r1, r2
 8008452:	4414      	add	r4, r2
 8008454:	e6bd      	b.n	80081d2 <__adddf3+0xe6>
 8008456:	bf00      	nop

08008458 <__aeabi_dmul>:
 8008458:	b570      	push	{r4, r5, r6, lr}
 800845a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800845e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008462:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008466:	bf1d      	ittte	ne
 8008468:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800846c:	ea94 0f0c 	teqne	r4, ip
 8008470:	ea95 0f0c 	teqne	r5, ip
 8008474:	f000 f8de 	bleq	8008634 <__aeabi_dmul+0x1dc>
 8008478:	442c      	add	r4, r5
 800847a:	ea81 0603 	eor.w	r6, r1, r3
 800847e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008482:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008486:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800848a:	bf18      	it	ne
 800848c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8008490:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008494:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008498:	d038      	beq.n	800850c <__aeabi_dmul+0xb4>
 800849a:	fba0 ce02 	umull	ip, lr, r0, r2
 800849e:	f04f 0500 	mov.w	r5, #0
 80084a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80084a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80084aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80084ae:	f04f 0600 	mov.w	r6, #0
 80084b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80084b6:	f09c 0f00 	teq	ip, #0
 80084ba:	bf18      	it	ne
 80084bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80084c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80084c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80084c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80084cc:	d204      	bcs.n	80084d8 <__aeabi_dmul+0x80>
 80084ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80084d2:	416d      	adcs	r5, r5
 80084d4:	eb46 0606 	adc.w	r6, r6, r6
 80084d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80084dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80084e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80084e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80084e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80084ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80084f0:	bf88      	it	hi
 80084f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80084f6:	d81e      	bhi.n	8008536 <__aeabi_dmul+0xde>
 80084f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80084fc:	bf08      	it	eq
 80084fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008502:	f150 0000 	adcs.w	r0, r0, #0
 8008506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800850a:	bd70      	pop	{r4, r5, r6, pc}
 800850c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008510:	ea46 0101 	orr.w	r1, r6, r1
 8008514:	ea40 0002 	orr.w	r0, r0, r2
 8008518:	ea81 0103 	eor.w	r1, r1, r3
 800851c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008520:	bfc2      	ittt	gt
 8008522:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008526:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800852a:	bd70      	popgt	{r4, r5, r6, pc}
 800852c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008530:	f04f 0e00 	mov.w	lr, #0
 8008534:	3c01      	subs	r4, #1
 8008536:	f300 80ab 	bgt.w	8008690 <__aeabi_dmul+0x238>
 800853a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800853e:	bfde      	ittt	le
 8008540:	2000      	movle	r0, #0
 8008542:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008546:	bd70      	pople	{r4, r5, r6, pc}
 8008548:	f1c4 0400 	rsb	r4, r4, #0
 800854c:	3c20      	subs	r4, #32
 800854e:	da35      	bge.n	80085bc <__aeabi_dmul+0x164>
 8008550:	340c      	adds	r4, #12
 8008552:	dc1b      	bgt.n	800858c <__aeabi_dmul+0x134>
 8008554:	f104 0414 	add.w	r4, r4, #20
 8008558:	f1c4 0520 	rsb	r5, r4, #32
 800855c:	fa00 f305 	lsl.w	r3, r0, r5
 8008560:	fa20 f004 	lsr.w	r0, r0, r4
 8008564:	fa01 f205 	lsl.w	r2, r1, r5
 8008568:	ea40 0002 	orr.w	r0, r0, r2
 800856c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008570:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008574:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008578:	fa21 f604 	lsr.w	r6, r1, r4
 800857c:	eb42 0106 	adc.w	r1, r2, r6
 8008580:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008584:	bf08      	it	eq
 8008586:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800858a:	bd70      	pop	{r4, r5, r6, pc}
 800858c:	f1c4 040c 	rsb	r4, r4, #12
 8008590:	f1c4 0520 	rsb	r5, r4, #32
 8008594:	fa00 f304 	lsl.w	r3, r0, r4
 8008598:	fa20 f005 	lsr.w	r0, r0, r5
 800859c:	fa01 f204 	lsl.w	r2, r1, r4
 80085a0:	ea40 0002 	orr.w	r0, r0, r2
 80085a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80085ac:	f141 0100 	adc.w	r1, r1, #0
 80085b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085b4:	bf08      	it	eq
 80085b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085ba:	bd70      	pop	{r4, r5, r6, pc}
 80085bc:	f1c4 0520 	rsb	r5, r4, #32
 80085c0:	fa00 f205 	lsl.w	r2, r0, r5
 80085c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80085c8:	fa20 f304 	lsr.w	r3, r0, r4
 80085cc:	fa01 f205 	lsl.w	r2, r1, r5
 80085d0:	ea43 0302 	orr.w	r3, r3, r2
 80085d4:	fa21 f004 	lsr.w	r0, r1, r4
 80085d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085dc:	fa21 f204 	lsr.w	r2, r1, r4
 80085e0:	ea20 0002 	bic.w	r0, r0, r2
 80085e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80085e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085ec:	bf08      	it	eq
 80085ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085f2:	bd70      	pop	{r4, r5, r6, pc}
 80085f4:	f094 0f00 	teq	r4, #0
 80085f8:	d10f      	bne.n	800861a <__aeabi_dmul+0x1c2>
 80085fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80085fe:	0040      	lsls	r0, r0, #1
 8008600:	eb41 0101 	adc.w	r1, r1, r1
 8008604:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008608:	bf08      	it	eq
 800860a:	3c01      	subeq	r4, #1
 800860c:	d0f7      	beq.n	80085fe <__aeabi_dmul+0x1a6>
 800860e:	ea41 0106 	orr.w	r1, r1, r6
 8008612:	f095 0f00 	teq	r5, #0
 8008616:	bf18      	it	ne
 8008618:	4770      	bxne	lr
 800861a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800861e:	0052      	lsls	r2, r2, #1
 8008620:	eb43 0303 	adc.w	r3, r3, r3
 8008624:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008628:	bf08      	it	eq
 800862a:	3d01      	subeq	r5, #1
 800862c:	d0f7      	beq.n	800861e <__aeabi_dmul+0x1c6>
 800862e:	ea43 0306 	orr.w	r3, r3, r6
 8008632:	4770      	bx	lr
 8008634:	ea94 0f0c 	teq	r4, ip
 8008638:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800863c:	bf18      	it	ne
 800863e:	ea95 0f0c 	teqne	r5, ip
 8008642:	d00c      	beq.n	800865e <__aeabi_dmul+0x206>
 8008644:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008648:	bf18      	it	ne
 800864a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800864e:	d1d1      	bne.n	80085f4 <__aeabi_dmul+0x19c>
 8008650:	ea81 0103 	eor.w	r1, r1, r3
 8008654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008658:	f04f 0000 	mov.w	r0, #0
 800865c:	bd70      	pop	{r4, r5, r6, pc}
 800865e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008662:	bf06      	itte	eq
 8008664:	4610      	moveq	r0, r2
 8008666:	4619      	moveq	r1, r3
 8008668:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800866c:	d019      	beq.n	80086a2 <__aeabi_dmul+0x24a>
 800866e:	ea94 0f0c 	teq	r4, ip
 8008672:	d102      	bne.n	800867a <__aeabi_dmul+0x222>
 8008674:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008678:	d113      	bne.n	80086a2 <__aeabi_dmul+0x24a>
 800867a:	ea95 0f0c 	teq	r5, ip
 800867e:	d105      	bne.n	800868c <__aeabi_dmul+0x234>
 8008680:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008684:	bf1c      	itt	ne
 8008686:	4610      	movne	r0, r2
 8008688:	4619      	movne	r1, r3
 800868a:	d10a      	bne.n	80086a2 <__aeabi_dmul+0x24a>
 800868c:	ea81 0103 	eor.w	r1, r1, r3
 8008690:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008694:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008698:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800869c:	f04f 0000 	mov.w	r0, #0
 80086a0:	bd70      	pop	{r4, r5, r6, pc}
 80086a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80086aa:	bd70      	pop	{r4, r5, r6, pc}

080086ac <__aeabi_ddiv>:
 80086ac:	b570      	push	{r4, r5, r6, lr}
 80086ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80086b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80086b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80086ba:	bf1d      	ittte	ne
 80086bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80086c0:	ea94 0f0c 	teqne	r4, ip
 80086c4:	ea95 0f0c 	teqne	r5, ip
 80086c8:	f000 f8a7 	bleq	800881a <__aeabi_ddiv+0x16e>
 80086cc:	eba4 0405 	sub.w	r4, r4, r5
 80086d0:	ea81 0e03 	eor.w	lr, r1, r3
 80086d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80086d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80086dc:	f000 8088 	beq.w	80087f0 <__aeabi_ddiv+0x144>
 80086e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80086e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80086e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80086ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80086f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80086f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80086f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80086fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008700:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008704:	429d      	cmp	r5, r3
 8008706:	bf08      	it	eq
 8008708:	4296      	cmpeq	r6, r2
 800870a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800870e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008712:	d202      	bcs.n	800871a <__aeabi_ddiv+0x6e>
 8008714:	085b      	lsrs	r3, r3, #1
 8008716:	ea4f 0232 	mov.w	r2, r2, rrx
 800871a:	1ab6      	subs	r6, r6, r2
 800871c:	eb65 0503 	sbc.w	r5, r5, r3
 8008720:	085b      	lsrs	r3, r3, #1
 8008722:	ea4f 0232 	mov.w	r2, r2, rrx
 8008726:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800872a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800872e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008732:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008736:	bf22      	ittt	cs
 8008738:	1ab6      	subcs	r6, r6, r2
 800873a:	4675      	movcs	r5, lr
 800873c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008740:	085b      	lsrs	r3, r3, #1
 8008742:	ea4f 0232 	mov.w	r2, r2, rrx
 8008746:	ebb6 0e02 	subs.w	lr, r6, r2
 800874a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800874e:	bf22      	ittt	cs
 8008750:	1ab6      	subcs	r6, r6, r2
 8008752:	4675      	movcs	r5, lr
 8008754:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008758:	085b      	lsrs	r3, r3, #1
 800875a:	ea4f 0232 	mov.w	r2, r2, rrx
 800875e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008762:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008766:	bf22      	ittt	cs
 8008768:	1ab6      	subcs	r6, r6, r2
 800876a:	4675      	movcs	r5, lr
 800876c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008770:	085b      	lsrs	r3, r3, #1
 8008772:	ea4f 0232 	mov.w	r2, r2, rrx
 8008776:	ebb6 0e02 	subs.w	lr, r6, r2
 800877a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800877e:	bf22      	ittt	cs
 8008780:	1ab6      	subcs	r6, r6, r2
 8008782:	4675      	movcs	r5, lr
 8008784:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008788:	ea55 0e06 	orrs.w	lr, r5, r6
 800878c:	d018      	beq.n	80087c0 <__aeabi_ddiv+0x114>
 800878e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8008792:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8008796:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800879a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800879e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80087a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80087a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80087aa:	d1c0      	bne.n	800872e <__aeabi_ddiv+0x82>
 80087ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087b0:	d10b      	bne.n	80087ca <__aeabi_ddiv+0x11e>
 80087b2:	ea41 0100 	orr.w	r1, r1, r0
 80087b6:	f04f 0000 	mov.w	r0, #0
 80087ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80087be:	e7b6      	b.n	800872e <__aeabi_ddiv+0x82>
 80087c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087c4:	bf04      	itt	eq
 80087c6:	4301      	orreq	r1, r0
 80087c8:	2000      	moveq	r0, #0
 80087ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80087ce:	bf88      	it	hi
 80087d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80087d4:	f63f aeaf 	bhi.w	8008536 <__aeabi_dmul+0xde>
 80087d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80087dc:	bf04      	itt	eq
 80087de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80087e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80087e6:	f150 0000 	adcs.w	r0, r0, #0
 80087ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80087ee:	bd70      	pop	{r4, r5, r6, pc}
 80087f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80087f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80087f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80087fc:	bfc2      	ittt	gt
 80087fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008802:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008806:	bd70      	popgt	{r4, r5, r6, pc}
 8008808:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800880c:	f04f 0e00 	mov.w	lr, #0
 8008810:	3c01      	subs	r4, #1
 8008812:	e690      	b.n	8008536 <__aeabi_dmul+0xde>
 8008814:	ea45 0e06 	orr.w	lr, r5, r6
 8008818:	e68d      	b.n	8008536 <__aeabi_dmul+0xde>
 800881a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800881e:	ea94 0f0c 	teq	r4, ip
 8008822:	bf08      	it	eq
 8008824:	ea95 0f0c 	teqeq	r5, ip
 8008828:	f43f af3b 	beq.w	80086a2 <__aeabi_dmul+0x24a>
 800882c:	ea94 0f0c 	teq	r4, ip
 8008830:	d10a      	bne.n	8008848 <__aeabi_ddiv+0x19c>
 8008832:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008836:	f47f af34 	bne.w	80086a2 <__aeabi_dmul+0x24a>
 800883a:	ea95 0f0c 	teq	r5, ip
 800883e:	f47f af25 	bne.w	800868c <__aeabi_dmul+0x234>
 8008842:	4610      	mov	r0, r2
 8008844:	4619      	mov	r1, r3
 8008846:	e72c      	b.n	80086a2 <__aeabi_dmul+0x24a>
 8008848:	ea95 0f0c 	teq	r5, ip
 800884c:	d106      	bne.n	800885c <__aeabi_ddiv+0x1b0>
 800884e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008852:	f43f aefd 	beq.w	8008650 <__aeabi_dmul+0x1f8>
 8008856:	4610      	mov	r0, r2
 8008858:	4619      	mov	r1, r3
 800885a:	e722      	b.n	80086a2 <__aeabi_dmul+0x24a>
 800885c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008860:	bf18      	it	ne
 8008862:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008866:	f47f aec5 	bne.w	80085f4 <__aeabi_dmul+0x19c>
 800886a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800886e:	f47f af0d 	bne.w	800868c <__aeabi_dmul+0x234>
 8008872:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008876:	f47f aeeb 	bne.w	8008650 <__aeabi_dmul+0x1f8>
 800887a:	e712      	b.n	80086a2 <__aeabi_dmul+0x24a>

0800887c <__gedf2>:
 800887c:	f04f 3cff 	mov.w	ip, #4294967295
 8008880:	e006      	b.n	8008890 <__cmpdf2+0x4>
 8008882:	bf00      	nop

08008884 <__ledf2>:
 8008884:	f04f 0c01 	mov.w	ip, #1
 8008888:	e002      	b.n	8008890 <__cmpdf2+0x4>
 800888a:	bf00      	nop

0800888c <__cmpdf2>:
 800888c:	f04f 0c01 	mov.w	ip, #1
 8008890:	f84d cd04 	str.w	ip, [sp, #-4]!
 8008894:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008898:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800889c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80088a0:	bf18      	it	ne
 80088a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80088a6:	d01b      	beq.n	80088e0 <__cmpdf2+0x54>
 80088a8:	b001      	add	sp, #4
 80088aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80088ae:	bf0c      	ite	eq
 80088b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80088b4:	ea91 0f03 	teqne	r1, r3
 80088b8:	bf02      	ittt	eq
 80088ba:	ea90 0f02 	teqeq	r0, r2
 80088be:	2000      	moveq	r0, #0
 80088c0:	4770      	bxeq	lr
 80088c2:	f110 0f00 	cmn.w	r0, #0
 80088c6:	ea91 0f03 	teq	r1, r3
 80088ca:	bf58      	it	pl
 80088cc:	4299      	cmppl	r1, r3
 80088ce:	bf08      	it	eq
 80088d0:	4290      	cmpeq	r0, r2
 80088d2:	bf2c      	ite	cs
 80088d4:	17d8      	asrcs	r0, r3, #31
 80088d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80088da:	f040 0001 	orr.w	r0, r0, #1
 80088de:	4770      	bx	lr
 80088e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088e8:	d102      	bne.n	80088f0 <__cmpdf2+0x64>
 80088ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80088ee:	d107      	bne.n	8008900 <__cmpdf2+0x74>
 80088f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80088f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088f8:	d1d6      	bne.n	80088a8 <__cmpdf2+0x1c>
 80088fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80088fe:	d0d3      	beq.n	80088a8 <__cmpdf2+0x1c>
 8008900:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008904:	4770      	bx	lr
 8008906:	bf00      	nop

08008908 <__aeabi_cdrcmple>:
 8008908:	4684      	mov	ip, r0
 800890a:	4610      	mov	r0, r2
 800890c:	4662      	mov	r2, ip
 800890e:	468c      	mov	ip, r1
 8008910:	4619      	mov	r1, r3
 8008912:	4663      	mov	r3, ip
 8008914:	e000      	b.n	8008918 <__aeabi_cdcmpeq>
 8008916:	bf00      	nop

08008918 <__aeabi_cdcmpeq>:
 8008918:	b501      	push	{r0, lr}
 800891a:	f7ff ffb7 	bl	800888c <__cmpdf2>
 800891e:	2800      	cmp	r0, #0
 8008920:	bf48      	it	mi
 8008922:	f110 0f00 	cmnmi.w	r0, #0
 8008926:	bd01      	pop	{r0, pc}

08008928 <__aeabi_dcmpeq>:
 8008928:	f84d ed08 	str.w	lr, [sp, #-8]!
 800892c:	f7ff fff4 	bl	8008918 <__aeabi_cdcmpeq>
 8008930:	bf0c      	ite	eq
 8008932:	2001      	moveq	r0, #1
 8008934:	2000      	movne	r0, #0
 8008936:	f85d fb08 	ldr.w	pc, [sp], #8
 800893a:	bf00      	nop

0800893c <__aeabi_dcmplt>:
 800893c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008940:	f7ff ffea 	bl	8008918 <__aeabi_cdcmpeq>
 8008944:	bf34      	ite	cc
 8008946:	2001      	movcc	r0, #1
 8008948:	2000      	movcs	r0, #0
 800894a:	f85d fb08 	ldr.w	pc, [sp], #8
 800894e:	bf00      	nop

08008950 <__aeabi_dcmple>:
 8008950:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008954:	f7ff ffe0 	bl	8008918 <__aeabi_cdcmpeq>
 8008958:	bf94      	ite	ls
 800895a:	2001      	movls	r0, #1
 800895c:	2000      	movhi	r0, #0
 800895e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008962:	bf00      	nop

08008964 <__aeabi_dcmpge>:
 8008964:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008968:	f7ff ffce 	bl	8008908 <__aeabi_cdrcmple>
 800896c:	bf94      	ite	ls
 800896e:	2001      	movls	r0, #1
 8008970:	2000      	movhi	r0, #0
 8008972:	f85d fb08 	ldr.w	pc, [sp], #8
 8008976:	bf00      	nop

08008978 <__aeabi_dcmpgt>:
 8008978:	f84d ed08 	str.w	lr, [sp, #-8]!
 800897c:	f7ff ffc4 	bl	8008908 <__aeabi_cdrcmple>
 8008980:	bf34      	ite	cc
 8008982:	2001      	movcc	r0, #1
 8008984:	2000      	movcs	r0, #0
 8008986:	f85d fb08 	ldr.w	pc, [sp], #8
 800898a:	bf00      	nop

0800898c <__aeabi_d2iz>:
 800898c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008990:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8008994:	d215      	bcs.n	80089c2 <__aeabi_d2iz+0x36>
 8008996:	d511      	bpl.n	80089bc <__aeabi_d2iz+0x30>
 8008998:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800899c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80089a0:	d912      	bls.n	80089c8 <__aeabi_d2iz+0x3c>
 80089a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80089a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80089ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80089b2:	fa23 f002 	lsr.w	r0, r3, r2
 80089b6:	bf18      	it	ne
 80089b8:	4240      	negne	r0, r0
 80089ba:	4770      	bx	lr
 80089bc:	f04f 0000 	mov.w	r0, #0
 80089c0:	4770      	bx	lr
 80089c2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80089c6:	d105      	bne.n	80089d4 <__aeabi_d2iz+0x48>
 80089c8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80089cc:	bf08      	it	eq
 80089ce:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80089d2:	4770      	bx	lr
 80089d4:	f04f 0000 	mov.w	r0, #0
 80089d8:	4770      	bx	lr
 80089da:	bf00      	nop

080089dc <__aeabi_d2f>:
 80089dc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80089e0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80089e4:	bf24      	itt	cs
 80089e6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80089ea:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80089ee:	d90d      	bls.n	8008a0c <__aeabi_d2f+0x30>
 80089f0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80089f4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80089f8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80089fc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8008a00:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008a04:	bf08      	it	eq
 8008a06:	f020 0001 	biceq.w	r0, r0, #1
 8008a0a:	4770      	bx	lr
 8008a0c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8008a10:	d121      	bne.n	8008a56 <__aeabi_d2f+0x7a>
 8008a12:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8008a16:	bfbc      	itt	lt
 8008a18:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8008a1c:	4770      	bxlt	lr
 8008a1e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008a22:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008a26:	f1c2 0218 	rsb	r2, r2, #24
 8008a2a:	f1c2 0c20 	rsb	ip, r2, #32
 8008a2e:	fa10 f30c 	lsls.w	r3, r0, ip
 8008a32:	fa20 f002 	lsr.w	r0, r0, r2
 8008a36:	bf18      	it	ne
 8008a38:	f040 0001 	orrne.w	r0, r0, #1
 8008a3c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008a40:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008a44:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008a48:	ea40 000c 	orr.w	r0, r0, ip
 8008a4c:	fa23 f302 	lsr.w	r3, r3, r2
 8008a50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008a54:	e7cc      	b.n	80089f0 <__aeabi_d2f+0x14>
 8008a56:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008a5a:	d107      	bne.n	8008a6c <__aeabi_d2f+0x90>
 8008a5c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008a60:	bf1e      	ittt	ne
 8008a62:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8008a66:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8008a6a:	4770      	bxne	lr
 8008a6c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8008a70:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008a74:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008a78:	4770      	bx	lr
 8008a7a:	bf00      	nop

08008a7c <__aeabi_uldivmod>:
 8008a7c:	b953      	cbnz	r3, 8008a94 <__aeabi_uldivmod+0x18>
 8008a7e:	b94a      	cbnz	r2, 8008a94 <__aeabi_uldivmod+0x18>
 8008a80:	2900      	cmp	r1, #0
 8008a82:	bf08      	it	eq
 8008a84:	2800      	cmpeq	r0, #0
 8008a86:	bf1c      	itt	ne
 8008a88:	f04f 31ff 	movne.w	r1, #4294967295
 8008a8c:	f04f 30ff 	movne.w	r0, #4294967295
 8008a90:	f000 b972 	b.w	8008d78 <__aeabi_idiv0>
 8008a94:	f1ad 0c08 	sub.w	ip, sp, #8
 8008a98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008a9c:	f000 f806 	bl	8008aac <__udivmoddi4>
 8008aa0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008aa4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008aa8:	b004      	add	sp, #16
 8008aaa:	4770      	bx	lr

08008aac <__udivmoddi4>:
 8008aac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ab0:	9e08      	ldr	r6, [sp, #32]
 8008ab2:	4604      	mov	r4, r0
 8008ab4:	4688      	mov	r8, r1
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d14b      	bne.n	8008b52 <__udivmoddi4+0xa6>
 8008aba:	428a      	cmp	r2, r1
 8008abc:	4615      	mov	r5, r2
 8008abe:	d967      	bls.n	8008b90 <__udivmoddi4+0xe4>
 8008ac0:	fab2 f282 	clz	r2, r2
 8008ac4:	b14a      	cbz	r2, 8008ada <__udivmoddi4+0x2e>
 8008ac6:	f1c2 0720 	rsb	r7, r2, #32
 8008aca:	fa01 f302 	lsl.w	r3, r1, r2
 8008ace:	fa20 f707 	lsr.w	r7, r0, r7
 8008ad2:	4095      	lsls	r5, r2
 8008ad4:	ea47 0803 	orr.w	r8, r7, r3
 8008ad8:	4094      	lsls	r4, r2
 8008ada:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008ade:	0c23      	lsrs	r3, r4, #16
 8008ae0:	fbb8 f7fe 	udiv	r7, r8, lr
 8008ae4:	fa1f fc85 	uxth.w	ip, r5
 8008ae8:	fb0e 8817 	mls	r8, lr, r7, r8
 8008aec:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008af0:	fb07 f10c 	mul.w	r1, r7, ip
 8008af4:	4299      	cmp	r1, r3
 8008af6:	d909      	bls.n	8008b0c <__udivmoddi4+0x60>
 8008af8:	18eb      	adds	r3, r5, r3
 8008afa:	f107 30ff 	add.w	r0, r7, #4294967295
 8008afe:	f080 811b 	bcs.w	8008d38 <__udivmoddi4+0x28c>
 8008b02:	4299      	cmp	r1, r3
 8008b04:	f240 8118 	bls.w	8008d38 <__udivmoddi4+0x28c>
 8008b08:	3f02      	subs	r7, #2
 8008b0a:	442b      	add	r3, r5
 8008b0c:	1a5b      	subs	r3, r3, r1
 8008b0e:	b2a4      	uxth	r4, r4
 8008b10:	fbb3 f0fe 	udiv	r0, r3, lr
 8008b14:	fb0e 3310 	mls	r3, lr, r0, r3
 8008b18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008b1c:	fb00 fc0c 	mul.w	ip, r0, ip
 8008b20:	45a4      	cmp	ip, r4
 8008b22:	d909      	bls.n	8008b38 <__udivmoddi4+0x8c>
 8008b24:	192c      	adds	r4, r5, r4
 8008b26:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b2a:	f080 8107 	bcs.w	8008d3c <__udivmoddi4+0x290>
 8008b2e:	45a4      	cmp	ip, r4
 8008b30:	f240 8104 	bls.w	8008d3c <__udivmoddi4+0x290>
 8008b34:	3802      	subs	r0, #2
 8008b36:	442c      	add	r4, r5
 8008b38:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008b3c:	eba4 040c 	sub.w	r4, r4, ip
 8008b40:	2700      	movs	r7, #0
 8008b42:	b11e      	cbz	r6, 8008b4c <__udivmoddi4+0xa0>
 8008b44:	40d4      	lsrs	r4, r2
 8008b46:	2300      	movs	r3, #0
 8008b48:	e9c6 4300 	strd	r4, r3, [r6]
 8008b4c:	4639      	mov	r1, r7
 8008b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b52:	428b      	cmp	r3, r1
 8008b54:	d909      	bls.n	8008b6a <__udivmoddi4+0xbe>
 8008b56:	2e00      	cmp	r6, #0
 8008b58:	f000 80eb 	beq.w	8008d32 <__udivmoddi4+0x286>
 8008b5c:	2700      	movs	r7, #0
 8008b5e:	e9c6 0100 	strd	r0, r1, [r6]
 8008b62:	4638      	mov	r0, r7
 8008b64:	4639      	mov	r1, r7
 8008b66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b6a:	fab3 f783 	clz	r7, r3
 8008b6e:	2f00      	cmp	r7, #0
 8008b70:	d147      	bne.n	8008c02 <__udivmoddi4+0x156>
 8008b72:	428b      	cmp	r3, r1
 8008b74:	d302      	bcc.n	8008b7c <__udivmoddi4+0xd0>
 8008b76:	4282      	cmp	r2, r0
 8008b78:	f200 80fa 	bhi.w	8008d70 <__udivmoddi4+0x2c4>
 8008b7c:	1a84      	subs	r4, r0, r2
 8008b7e:	eb61 0303 	sbc.w	r3, r1, r3
 8008b82:	2001      	movs	r0, #1
 8008b84:	4698      	mov	r8, r3
 8008b86:	2e00      	cmp	r6, #0
 8008b88:	d0e0      	beq.n	8008b4c <__udivmoddi4+0xa0>
 8008b8a:	e9c6 4800 	strd	r4, r8, [r6]
 8008b8e:	e7dd      	b.n	8008b4c <__udivmoddi4+0xa0>
 8008b90:	b902      	cbnz	r2, 8008b94 <__udivmoddi4+0xe8>
 8008b92:	deff      	udf	#255	; 0xff
 8008b94:	fab2 f282 	clz	r2, r2
 8008b98:	2a00      	cmp	r2, #0
 8008b9a:	f040 808f 	bne.w	8008cbc <__udivmoddi4+0x210>
 8008b9e:	1b49      	subs	r1, r1, r5
 8008ba0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008ba4:	fa1f f885 	uxth.w	r8, r5
 8008ba8:	2701      	movs	r7, #1
 8008baa:	fbb1 fcfe 	udiv	ip, r1, lr
 8008bae:	0c23      	lsrs	r3, r4, #16
 8008bb0:	fb0e 111c 	mls	r1, lr, ip, r1
 8008bb4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008bb8:	fb08 f10c 	mul.w	r1, r8, ip
 8008bbc:	4299      	cmp	r1, r3
 8008bbe:	d907      	bls.n	8008bd0 <__udivmoddi4+0x124>
 8008bc0:	18eb      	adds	r3, r5, r3
 8008bc2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8008bc6:	d202      	bcs.n	8008bce <__udivmoddi4+0x122>
 8008bc8:	4299      	cmp	r1, r3
 8008bca:	f200 80cd 	bhi.w	8008d68 <__udivmoddi4+0x2bc>
 8008bce:	4684      	mov	ip, r0
 8008bd0:	1a59      	subs	r1, r3, r1
 8008bd2:	b2a3      	uxth	r3, r4
 8008bd4:	fbb1 f0fe 	udiv	r0, r1, lr
 8008bd8:	fb0e 1410 	mls	r4, lr, r0, r1
 8008bdc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008be0:	fb08 f800 	mul.w	r8, r8, r0
 8008be4:	45a0      	cmp	r8, r4
 8008be6:	d907      	bls.n	8008bf8 <__udivmoddi4+0x14c>
 8008be8:	192c      	adds	r4, r5, r4
 8008bea:	f100 33ff 	add.w	r3, r0, #4294967295
 8008bee:	d202      	bcs.n	8008bf6 <__udivmoddi4+0x14a>
 8008bf0:	45a0      	cmp	r8, r4
 8008bf2:	f200 80b6 	bhi.w	8008d62 <__udivmoddi4+0x2b6>
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	eba4 0408 	sub.w	r4, r4, r8
 8008bfc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008c00:	e79f      	b.n	8008b42 <__udivmoddi4+0x96>
 8008c02:	f1c7 0c20 	rsb	ip, r7, #32
 8008c06:	40bb      	lsls	r3, r7
 8008c08:	fa22 fe0c 	lsr.w	lr, r2, ip
 8008c0c:	ea4e 0e03 	orr.w	lr, lr, r3
 8008c10:	fa01 f407 	lsl.w	r4, r1, r7
 8008c14:	fa20 f50c 	lsr.w	r5, r0, ip
 8008c18:	fa21 f30c 	lsr.w	r3, r1, ip
 8008c1c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8008c20:	4325      	orrs	r5, r4
 8008c22:	fbb3 f9f8 	udiv	r9, r3, r8
 8008c26:	0c2c      	lsrs	r4, r5, #16
 8008c28:	fb08 3319 	mls	r3, r8, r9, r3
 8008c2c:	fa1f fa8e 	uxth.w	sl, lr
 8008c30:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8008c34:	fb09 f40a 	mul.w	r4, r9, sl
 8008c38:	429c      	cmp	r4, r3
 8008c3a:	fa02 f207 	lsl.w	r2, r2, r7
 8008c3e:	fa00 f107 	lsl.w	r1, r0, r7
 8008c42:	d90b      	bls.n	8008c5c <__udivmoddi4+0x1b0>
 8008c44:	eb1e 0303 	adds.w	r3, lr, r3
 8008c48:	f109 30ff 	add.w	r0, r9, #4294967295
 8008c4c:	f080 8087 	bcs.w	8008d5e <__udivmoddi4+0x2b2>
 8008c50:	429c      	cmp	r4, r3
 8008c52:	f240 8084 	bls.w	8008d5e <__udivmoddi4+0x2b2>
 8008c56:	f1a9 0902 	sub.w	r9, r9, #2
 8008c5a:	4473      	add	r3, lr
 8008c5c:	1b1b      	subs	r3, r3, r4
 8008c5e:	b2ad      	uxth	r5, r5
 8008c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8008c64:	fb08 3310 	mls	r3, r8, r0, r3
 8008c68:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8008c6c:	fb00 fa0a 	mul.w	sl, r0, sl
 8008c70:	45a2      	cmp	sl, r4
 8008c72:	d908      	bls.n	8008c86 <__udivmoddi4+0x1da>
 8008c74:	eb1e 0404 	adds.w	r4, lr, r4
 8008c78:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c7c:	d26b      	bcs.n	8008d56 <__udivmoddi4+0x2aa>
 8008c7e:	45a2      	cmp	sl, r4
 8008c80:	d969      	bls.n	8008d56 <__udivmoddi4+0x2aa>
 8008c82:	3802      	subs	r0, #2
 8008c84:	4474      	add	r4, lr
 8008c86:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8008c8a:	fba0 8902 	umull	r8, r9, r0, r2
 8008c8e:	eba4 040a 	sub.w	r4, r4, sl
 8008c92:	454c      	cmp	r4, r9
 8008c94:	46c2      	mov	sl, r8
 8008c96:	464b      	mov	r3, r9
 8008c98:	d354      	bcc.n	8008d44 <__udivmoddi4+0x298>
 8008c9a:	d051      	beq.n	8008d40 <__udivmoddi4+0x294>
 8008c9c:	2e00      	cmp	r6, #0
 8008c9e:	d069      	beq.n	8008d74 <__udivmoddi4+0x2c8>
 8008ca0:	ebb1 050a 	subs.w	r5, r1, sl
 8008ca4:	eb64 0403 	sbc.w	r4, r4, r3
 8008ca8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008cac:	40fd      	lsrs	r5, r7
 8008cae:	40fc      	lsrs	r4, r7
 8008cb0:	ea4c 0505 	orr.w	r5, ip, r5
 8008cb4:	e9c6 5400 	strd	r5, r4, [r6]
 8008cb8:	2700      	movs	r7, #0
 8008cba:	e747      	b.n	8008b4c <__udivmoddi4+0xa0>
 8008cbc:	f1c2 0320 	rsb	r3, r2, #32
 8008cc0:	fa20 f703 	lsr.w	r7, r0, r3
 8008cc4:	4095      	lsls	r5, r2
 8008cc6:	fa01 f002 	lsl.w	r0, r1, r2
 8008cca:	fa21 f303 	lsr.w	r3, r1, r3
 8008cce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008cd2:	4338      	orrs	r0, r7
 8008cd4:	0c01      	lsrs	r1, r0, #16
 8008cd6:	fbb3 f7fe 	udiv	r7, r3, lr
 8008cda:	fa1f f885 	uxth.w	r8, r5
 8008cde:	fb0e 3317 	mls	r3, lr, r7, r3
 8008ce2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008ce6:	fb07 f308 	mul.w	r3, r7, r8
 8008cea:	428b      	cmp	r3, r1
 8008cec:	fa04 f402 	lsl.w	r4, r4, r2
 8008cf0:	d907      	bls.n	8008d02 <__udivmoddi4+0x256>
 8008cf2:	1869      	adds	r1, r5, r1
 8008cf4:	f107 3cff 	add.w	ip, r7, #4294967295
 8008cf8:	d22f      	bcs.n	8008d5a <__udivmoddi4+0x2ae>
 8008cfa:	428b      	cmp	r3, r1
 8008cfc:	d92d      	bls.n	8008d5a <__udivmoddi4+0x2ae>
 8008cfe:	3f02      	subs	r7, #2
 8008d00:	4429      	add	r1, r5
 8008d02:	1acb      	subs	r3, r1, r3
 8008d04:	b281      	uxth	r1, r0
 8008d06:	fbb3 f0fe 	udiv	r0, r3, lr
 8008d0a:	fb0e 3310 	mls	r3, lr, r0, r3
 8008d0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d12:	fb00 f308 	mul.w	r3, r0, r8
 8008d16:	428b      	cmp	r3, r1
 8008d18:	d907      	bls.n	8008d2a <__udivmoddi4+0x27e>
 8008d1a:	1869      	adds	r1, r5, r1
 8008d1c:	f100 3cff 	add.w	ip, r0, #4294967295
 8008d20:	d217      	bcs.n	8008d52 <__udivmoddi4+0x2a6>
 8008d22:	428b      	cmp	r3, r1
 8008d24:	d915      	bls.n	8008d52 <__udivmoddi4+0x2a6>
 8008d26:	3802      	subs	r0, #2
 8008d28:	4429      	add	r1, r5
 8008d2a:	1ac9      	subs	r1, r1, r3
 8008d2c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8008d30:	e73b      	b.n	8008baa <__udivmoddi4+0xfe>
 8008d32:	4637      	mov	r7, r6
 8008d34:	4630      	mov	r0, r6
 8008d36:	e709      	b.n	8008b4c <__udivmoddi4+0xa0>
 8008d38:	4607      	mov	r7, r0
 8008d3a:	e6e7      	b.n	8008b0c <__udivmoddi4+0x60>
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	e6fb      	b.n	8008b38 <__udivmoddi4+0x8c>
 8008d40:	4541      	cmp	r1, r8
 8008d42:	d2ab      	bcs.n	8008c9c <__udivmoddi4+0x1f0>
 8008d44:	ebb8 0a02 	subs.w	sl, r8, r2
 8008d48:	eb69 020e 	sbc.w	r2, r9, lr
 8008d4c:	3801      	subs	r0, #1
 8008d4e:	4613      	mov	r3, r2
 8008d50:	e7a4      	b.n	8008c9c <__udivmoddi4+0x1f0>
 8008d52:	4660      	mov	r0, ip
 8008d54:	e7e9      	b.n	8008d2a <__udivmoddi4+0x27e>
 8008d56:	4618      	mov	r0, r3
 8008d58:	e795      	b.n	8008c86 <__udivmoddi4+0x1da>
 8008d5a:	4667      	mov	r7, ip
 8008d5c:	e7d1      	b.n	8008d02 <__udivmoddi4+0x256>
 8008d5e:	4681      	mov	r9, r0
 8008d60:	e77c      	b.n	8008c5c <__udivmoddi4+0x1b0>
 8008d62:	3802      	subs	r0, #2
 8008d64:	442c      	add	r4, r5
 8008d66:	e747      	b.n	8008bf8 <__udivmoddi4+0x14c>
 8008d68:	f1ac 0c02 	sub.w	ip, ip, #2
 8008d6c:	442b      	add	r3, r5
 8008d6e:	e72f      	b.n	8008bd0 <__udivmoddi4+0x124>
 8008d70:	4638      	mov	r0, r7
 8008d72:	e708      	b.n	8008b86 <__udivmoddi4+0xda>
 8008d74:	4637      	mov	r7, r6
 8008d76:	e6e9      	b.n	8008b4c <__udivmoddi4+0xa0>

08008d78 <__aeabi_idiv0>:
 8008d78:	4770      	bx	lr
 8008d7a:	bf00      	nop

08008d7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008d80:	4b0e      	ldr	r3, [pc, #56]	; (8008dbc <HAL_Init+0x40>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4a0d      	ldr	r2, [pc, #52]	; (8008dbc <HAL_Init+0x40>)
 8008d86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008d8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008d8c:	4b0b      	ldr	r3, [pc, #44]	; (8008dbc <HAL_Init+0x40>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a0a      	ldr	r2, [pc, #40]	; (8008dbc <HAL_Init+0x40>)
 8008d92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008d96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008d98:	4b08      	ldr	r3, [pc, #32]	; (8008dbc <HAL_Init+0x40>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a07      	ldr	r2, [pc, #28]	; (8008dbc <HAL_Init+0x40>)
 8008d9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008da2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008da4:	2003      	movs	r0, #3
 8008da6:	f001 f96b 	bl	800a080 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008daa:	2000      	movs	r0, #0
 8008dac:	f000 f808 	bl	8008dc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008db0:	f007 fce4 	bl	801077c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008db4:	2300      	movs	r3, #0
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	bd80      	pop	{r7, pc}
 8008dba:	bf00      	nop
 8008dbc:	40023c00 	.word	0x40023c00

08008dc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b082      	sub	sp, #8
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008dc8:	4b12      	ldr	r3, [pc, #72]	; (8008e14 <HAL_InitTick+0x54>)
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	4b12      	ldr	r3, [pc, #72]	; (8008e18 <HAL_InitTick+0x58>)
 8008dce:	781b      	ldrb	r3, [r3, #0]
 8008dd0:	4619      	mov	r1, r3
 8008dd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8008dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dde:	4618      	mov	r0, r3
 8008de0:	f001 f983 	bl	800a0ea <HAL_SYSTICK_Config>
 8008de4:	4603      	mov	r3, r0
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d001      	beq.n	8008dee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008dea:	2301      	movs	r3, #1
 8008dec:	e00e      	b.n	8008e0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	2b0f      	cmp	r3, #15
 8008df2:	d80a      	bhi.n	8008e0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008df4:	2200      	movs	r2, #0
 8008df6:	6879      	ldr	r1, [r7, #4]
 8008df8:	f04f 30ff 	mov.w	r0, #4294967295
 8008dfc:	f001 f94b 	bl	800a096 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008e00:	4a06      	ldr	r2, [pc, #24]	; (8008e1c <HAL_InitTick+0x5c>)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008e06:	2300      	movs	r3, #0
 8008e08:	e000      	b.n	8008e0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008e0a:	2301      	movs	r3, #1
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3708      	adds	r7, #8
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}
 8008e14:	20000038 	.word	0x20000038
 8008e18:	20000004 	.word	0x20000004
 8008e1c:	20000000 	.word	0x20000000

08008e20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008e20:	b480      	push	{r7}
 8008e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008e24:	4b06      	ldr	r3, [pc, #24]	; (8008e40 <HAL_IncTick+0x20>)
 8008e26:	781b      	ldrb	r3, [r3, #0]
 8008e28:	461a      	mov	r2, r3
 8008e2a:	4b06      	ldr	r3, [pc, #24]	; (8008e44 <HAL_IncTick+0x24>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4413      	add	r3, r2
 8008e30:	4a04      	ldr	r2, [pc, #16]	; (8008e44 <HAL_IncTick+0x24>)
 8008e32:	6013      	str	r3, [r2, #0]
}
 8008e34:	bf00      	nop
 8008e36:	46bd      	mov	sp, r7
 8008e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3c:	4770      	bx	lr
 8008e3e:	bf00      	nop
 8008e40:	20000004 	.word	0x20000004
 8008e44:	20004208 	.word	0x20004208

08008e48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8008e4c:	4b03      	ldr	r3, [pc, #12]	; (8008e5c <HAL_GetTick+0x14>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
}
 8008e50:	4618      	mov	r0, r3
 8008e52:	46bd      	mov	sp, r7
 8008e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e58:	4770      	bx	lr
 8008e5a:	bf00      	nop
 8008e5c:	20004208 	.word	0x20004208

08008e60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b084      	sub	sp, #16
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008e68:	f7ff ffee 	bl	8008e48 <HAL_GetTick>
 8008e6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e78:	d005      	beq.n	8008e86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008e7a:	4b09      	ldr	r3, [pc, #36]	; (8008ea0 <HAL_Delay+0x40>)
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	461a      	mov	r2, r3
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	4413      	add	r3, r2
 8008e84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008e86:	bf00      	nop
 8008e88:	f7ff ffde 	bl	8008e48 <HAL_GetTick>
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	1ad3      	subs	r3, r2, r3
 8008e92:	68fa      	ldr	r2, [r7, #12]
 8008e94:	429a      	cmp	r2, r3
 8008e96:	d8f7      	bhi.n	8008e88 <HAL_Delay+0x28>
  {
  }
}
 8008e98:	bf00      	nop
 8008e9a:	3710      	adds	r7, #16
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}
 8008ea0:	20000004 	.word	0x20000004

08008ea4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b084      	sub	sp, #16
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008eac:	2300      	movs	r3, #0
 8008eae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d101      	bne.n	8008eba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	e033      	b.n	8008f22 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d109      	bne.n	8008ed6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f005 fc6c 	bl	800e7a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eda:	f003 0310 	and.w	r3, r3, #16
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d118      	bne.n	8008f14 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ee6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008eea:	f023 0302 	bic.w	r3, r3, #2
 8008eee:	f043 0202 	orr.w	r2, r3, #2
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8008ef6:	6878      	ldr	r0, [r7, #4]
 8008ef8:	f000 fa5a 	bl	80093b0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2200      	movs	r2, #0
 8008f00:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f06:	f023 0303 	bic.w	r3, r3, #3
 8008f0a:	f043 0201 	orr.w	r2, r3, #1
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	641a      	str	r2, [r3, #64]	; 0x40
 8008f12:	e001      	b.n	8008f18 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8008f14:	2301      	movs	r3, #1
 8008f16:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8008f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3710      	adds	r7, #16
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
	...

08008f2c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b086      	sub	sp, #24
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	60f8      	str	r0, [r7, #12]
 8008f34:	60b9      	str	r1, [r7, #8]
 8008f36:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f42:	2b01      	cmp	r3, #1
 8008f44:	d101      	bne.n	8008f4a <HAL_ADC_Start_DMA+0x1e>
 8008f46:	2302      	movs	r3, #2
 8008f48:	e0cc      	b.n	80090e4 <HAL_ADC_Start_DMA+0x1b8>
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	2201      	movs	r2, #1
 8008f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	689b      	ldr	r3, [r3, #8]
 8008f58:	f003 0301 	and.w	r3, r3, #1
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d018      	beq.n	8008f92 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	689a      	ldr	r2, [r3, #8]
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f042 0201 	orr.w	r2, r2, #1
 8008f6e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8008f70:	4b5e      	ldr	r3, [pc, #376]	; (80090ec <HAL_ADC_Start_DMA+0x1c0>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a5e      	ldr	r2, [pc, #376]	; (80090f0 <HAL_ADC_Start_DMA+0x1c4>)
 8008f76:	fba2 2303 	umull	r2, r3, r2, r3
 8008f7a:	0c9a      	lsrs	r2, r3, #18
 8008f7c:	4613      	mov	r3, r2
 8008f7e:	005b      	lsls	r3, r3, #1
 8008f80:	4413      	add	r3, r2
 8008f82:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8008f84:	e002      	b.n	8008f8c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	3b01      	subs	r3, #1
 8008f8a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d1f9      	bne.n	8008f86 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	689b      	ldr	r3, [r3, #8]
 8008f98:	f003 0301 	and.w	r3, r3, #1
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	f040 80a0 	bne.w	80090e2 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fa6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008faa:	f023 0301 	bic.w	r3, r3, #1
 8008fae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d007      	beq.n	8008fd4 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fc8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008fcc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008fdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fe0:	d106      	bne.n	8008ff0 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fe6:	f023 0206 	bic.w	r2, r3, #6
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	645a      	str	r2, [r3, #68]	; 0x44
 8008fee:	e002      	b.n	8008ff6 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008ffe:	4b3d      	ldr	r3, [pc, #244]	; (80090f4 <HAL_ADC_Start_DMA+0x1c8>)
 8009000:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009006:	4a3c      	ldr	r2, [pc, #240]	; (80090f8 <HAL_ADC_Start_DMA+0x1cc>)
 8009008:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800900e:	4a3b      	ldr	r2, [pc, #236]	; (80090fc <HAL_ADC_Start_DMA+0x1d0>)
 8009010:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009016:	4a3a      	ldr	r2, [pc, #232]	; (8009100 <HAL_ADC_Start_DMA+0x1d4>)
 8009018:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8009022:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	685a      	ldr	r2, [r3, #4]
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009032:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	689a      	ldr	r2, [r3, #8]
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009042:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	334c      	adds	r3, #76	; 0x4c
 800904e:	4619      	mov	r1, r3
 8009050:	68ba      	ldr	r2, [r7, #8]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f001 f904 	bl	800a260 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	685b      	ldr	r3, [r3, #4]
 800905c:	f003 031f 	and.w	r3, r3, #31
 8009060:	2b00      	cmp	r3, #0
 8009062:	d12a      	bne.n	80090ba <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	4a26      	ldr	r2, [pc, #152]	; (8009104 <HAL_ADC_Start_DMA+0x1d8>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d015      	beq.n	800909a <HAL_ADC_Start_DMA+0x16e>
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	4a25      	ldr	r2, [pc, #148]	; (8009108 <HAL_ADC_Start_DMA+0x1dc>)
 8009074:	4293      	cmp	r3, r2
 8009076:	d105      	bne.n	8009084 <HAL_ADC_Start_DMA+0x158>
 8009078:	4b1e      	ldr	r3, [pc, #120]	; (80090f4 <HAL_ADC_Start_DMA+0x1c8>)
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	f003 031f 	and.w	r3, r3, #31
 8009080:	2b00      	cmp	r3, #0
 8009082:	d00a      	beq.n	800909a <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a20      	ldr	r2, [pc, #128]	; (800910c <HAL_ADC_Start_DMA+0x1e0>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d129      	bne.n	80090e2 <HAL_ADC_Start_DMA+0x1b6>
 800908e:	4b19      	ldr	r3, [pc, #100]	; (80090f4 <HAL_ADC_Start_DMA+0x1c8>)
 8009090:	685b      	ldr	r3, [r3, #4]
 8009092:	f003 031f 	and.w	r3, r3, #31
 8009096:	2b0f      	cmp	r3, #15
 8009098:	d823      	bhi.n	80090e2 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	689b      	ldr	r3, [r3, #8]
 80090a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d11c      	bne.n	80090e2 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	689a      	ldr	r2, [r3, #8]
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80090b6:	609a      	str	r2, [r3, #8]
 80090b8:	e013      	b.n	80090e2 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	4a11      	ldr	r2, [pc, #68]	; (8009104 <HAL_ADC_Start_DMA+0x1d8>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d10e      	bne.n	80090e2 <HAL_ADC_Start_DMA+0x1b6>
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	689b      	ldr	r3, [r3, #8]
 80090ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d107      	bne.n	80090e2 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	689a      	ldr	r2, [r3, #8]
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80090e0:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80090e2:	2300      	movs	r3, #0
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3718      	adds	r7, #24
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}
 80090ec:	20000038 	.word	0x20000038
 80090f0:	431bde83 	.word	0x431bde83
 80090f4:	40012300 	.word	0x40012300
 80090f8:	080095a9 	.word	0x080095a9
 80090fc:	08009663 	.word	0x08009663
 8009100:	0800967f 	.word	0x0800967f
 8009104:	40012000 	.word	0x40012000
 8009108:	40012100 	.word	0x40012100
 800910c:	40012200 	.word	0x40012200

08009110 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009110:	b480      	push	{r7}
 8009112:	b083      	sub	sp, #12
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8009118:	bf00      	nop
 800911a:	370c      	adds	r7, #12
 800911c:	46bd      	mov	sp, r7
 800911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009122:	4770      	bx	lr

08009124 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009124:	b480      	push	{r7}
 8009126:	b083      	sub	sp, #12
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800912c:	bf00      	nop
 800912e:	370c      	adds	r7, #12
 8009130:	46bd      	mov	sp, r7
 8009132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009136:	4770      	bx	lr

08009138 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009138:	b480      	push	{r7}
 800913a:	b083      	sub	sp, #12
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8009140:	bf00      	nop
 8009142:	370c      	adds	r7, #12
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr

0800914c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800914c:	b480      	push	{r7}
 800914e:	b085      	sub	sp, #20
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
 8009154:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8009156:	2300      	movs	r3, #0
 8009158:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009160:	2b01      	cmp	r3, #1
 8009162:	d101      	bne.n	8009168 <HAL_ADC_ConfigChannel+0x1c>
 8009164:	2302      	movs	r3, #2
 8009166:	e113      	b.n	8009390 <HAL_ADC_ConfigChannel+0x244>
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2201      	movs	r2, #1
 800916c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	2b09      	cmp	r3, #9
 8009176:	d925      	bls.n	80091c4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	68d9      	ldr	r1, [r3, #12]
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	b29b      	uxth	r3, r3
 8009184:	461a      	mov	r2, r3
 8009186:	4613      	mov	r3, r2
 8009188:	005b      	lsls	r3, r3, #1
 800918a:	4413      	add	r3, r2
 800918c:	3b1e      	subs	r3, #30
 800918e:	2207      	movs	r2, #7
 8009190:	fa02 f303 	lsl.w	r3, r2, r3
 8009194:	43da      	mvns	r2, r3
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	400a      	ands	r2, r1
 800919c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	68d9      	ldr	r1, [r3, #12]
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	689a      	ldr	r2, [r3, #8]
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	b29b      	uxth	r3, r3
 80091ae:	4618      	mov	r0, r3
 80091b0:	4603      	mov	r3, r0
 80091b2:	005b      	lsls	r3, r3, #1
 80091b4:	4403      	add	r3, r0
 80091b6:	3b1e      	subs	r3, #30
 80091b8:	409a      	lsls	r2, r3
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	430a      	orrs	r2, r1
 80091c0:	60da      	str	r2, [r3, #12]
 80091c2:	e022      	b.n	800920a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	6919      	ldr	r1, [r3, #16]
 80091ca:	683b      	ldr	r3, [r7, #0]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	b29b      	uxth	r3, r3
 80091d0:	461a      	mov	r2, r3
 80091d2:	4613      	mov	r3, r2
 80091d4:	005b      	lsls	r3, r3, #1
 80091d6:	4413      	add	r3, r2
 80091d8:	2207      	movs	r2, #7
 80091da:	fa02 f303 	lsl.w	r3, r2, r3
 80091de:	43da      	mvns	r2, r3
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	400a      	ands	r2, r1
 80091e6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	6919      	ldr	r1, [r3, #16]
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	689a      	ldr	r2, [r3, #8]
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	4618      	mov	r0, r3
 80091fa:	4603      	mov	r3, r0
 80091fc:	005b      	lsls	r3, r3, #1
 80091fe:	4403      	add	r3, r0
 8009200:	409a      	lsls	r2, r3
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	430a      	orrs	r2, r1
 8009208:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	2b06      	cmp	r3, #6
 8009210:	d824      	bhi.n	800925c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	685a      	ldr	r2, [r3, #4]
 800921c:	4613      	mov	r3, r2
 800921e:	009b      	lsls	r3, r3, #2
 8009220:	4413      	add	r3, r2
 8009222:	3b05      	subs	r3, #5
 8009224:	221f      	movs	r2, #31
 8009226:	fa02 f303 	lsl.w	r3, r2, r3
 800922a:	43da      	mvns	r2, r3
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	400a      	ands	r2, r1
 8009232:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	b29b      	uxth	r3, r3
 8009240:	4618      	mov	r0, r3
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	685a      	ldr	r2, [r3, #4]
 8009246:	4613      	mov	r3, r2
 8009248:	009b      	lsls	r3, r3, #2
 800924a:	4413      	add	r3, r2
 800924c:	3b05      	subs	r3, #5
 800924e:	fa00 f203 	lsl.w	r2, r0, r3
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	430a      	orrs	r2, r1
 8009258:	635a      	str	r2, [r3, #52]	; 0x34
 800925a:	e04c      	b.n	80092f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	2b0c      	cmp	r3, #12
 8009262:	d824      	bhi.n	80092ae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	685a      	ldr	r2, [r3, #4]
 800926e:	4613      	mov	r3, r2
 8009270:	009b      	lsls	r3, r3, #2
 8009272:	4413      	add	r3, r2
 8009274:	3b23      	subs	r3, #35	; 0x23
 8009276:	221f      	movs	r2, #31
 8009278:	fa02 f303 	lsl.w	r3, r2, r3
 800927c:	43da      	mvns	r2, r3
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	400a      	ands	r2, r1
 8009284:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	b29b      	uxth	r3, r3
 8009292:	4618      	mov	r0, r3
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	685a      	ldr	r2, [r3, #4]
 8009298:	4613      	mov	r3, r2
 800929a:	009b      	lsls	r3, r3, #2
 800929c:	4413      	add	r3, r2
 800929e:	3b23      	subs	r3, #35	; 0x23
 80092a0:	fa00 f203 	lsl.w	r2, r0, r3
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	430a      	orrs	r2, r1
 80092aa:	631a      	str	r2, [r3, #48]	; 0x30
 80092ac:	e023      	b.n	80092f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	685a      	ldr	r2, [r3, #4]
 80092b8:	4613      	mov	r3, r2
 80092ba:	009b      	lsls	r3, r3, #2
 80092bc:	4413      	add	r3, r2
 80092be:	3b41      	subs	r3, #65	; 0x41
 80092c0:	221f      	movs	r2, #31
 80092c2:	fa02 f303 	lsl.w	r3, r2, r3
 80092c6:	43da      	mvns	r2, r3
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	400a      	ands	r2, r1
 80092ce:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	b29b      	uxth	r3, r3
 80092dc:	4618      	mov	r0, r3
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	685a      	ldr	r2, [r3, #4]
 80092e2:	4613      	mov	r3, r2
 80092e4:	009b      	lsls	r3, r3, #2
 80092e6:	4413      	add	r3, r2
 80092e8:	3b41      	subs	r3, #65	; 0x41
 80092ea:	fa00 f203 	lsl.w	r2, r0, r3
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	430a      	orrs	r2, r1
 80092f4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80092f6:	4b29      	ldr	r3, [pc, #164]	; (800939c <HAL_ADC_ConfigChannel+0x250>)
 80092f8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	4a28      	ldr	r2, [pc, #160]	; (80093a0 <HAL_ADC_ConfigChannel+0x254>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d10f      	bne.n	8009324 <HAL_ADC_ConfigChannel+0x1d8>
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	2b12      	cmp	r3, #18
 800930a:	d10b      	bne.n	8009324 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	4a1d      	ldr	r2, [pc, #116]	; (80093a0 <HAL_ADC_ConfigChannel+0x254>)
 800932a:	4293      	cmp	r3, r2
 800932c:	d12b      	bne.n	8009386 <HAL_ADC_ConfigChannel+0x23a>
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	4a1c      	ldr	r2, [pc, #112]	; (80093a4 <HAL_ADC_ConfigChannel+0x258>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d003      	beq.n	8009340 <HAL_ADC_ConfigChannel+0x1f4>
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	2b11      	cmp	r3, #17
 800933e:	d122      	bne.n	8009386 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	685b      	ldr	r3, [r3, #4]
 8009344:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	4a11      	ldr	r2, [pc, #68]	; (80093a4 <HAL_ADC_ConfigChannel+0x258>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d111      	bne.n	8009386 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8009362:	4b11      	ldr	r3, [pc, #68]	; (80093a8 <HAL_ADC_ConfigChannel+0x25c>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	4a11      	ldr	r2, [pc, #68]	; (80093ac <HAL_ADC_ConfigChannel+0x260>)
 8009368:	fba2 2303 	umull	r2, r3, r2, r3
 800936c:	0c9a      	lsrs	r2, r3, #18
 800936e:	4613      	mov	r3, r2
 8009370:	009b      	lsls	r3, r3, #2
 8009372:	4413      	add	r3, r2
 8009374:	005b      	lsls	r3, r3, #1
 8009376:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009378:	e002      	b.n	8009380 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	3b01      	subs	r3, #1
 800937e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d1f9      	bne.n	800937a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2200      	movs	r2, #0
 800938a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800938e:	2300      	movs	r3, #0
}
 8009390:	4618      	mov	r0, r3
 8009392:	3714      	adds	r7, #20
 8009394:	46bd      	mov	sp, r7
 8009396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939a:	4770      	bx	lr
 800939c:	40012300 	.word	0x40012300
 80093a0:	40012000 	.word	0x40012000
 80093a4:	10000012 	.word	0x10000012
 80093a8:	20000038 	.word	0x20000038
 80093ac:	431bde83 	.word	0x431bde83

080093b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b085      	sub	sp, #20
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80093b8:	4b79      	ldr	r3, [pc, #484]	; (80095a0 <ADC_Init+0x1f0>)
 80093ba:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	685b      	ldr	r3, [r3, #4]
 80093c0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	685a      	ldr	r2, [r3, #4]
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	685b      	ldr	r3, [r3, #4]
 80093d0:	431a      	orrs	r2, r3
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	685a      	ldr	r2, [r3, #4]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80093e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	6859      	ldr	r1, [r3, #4]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	691b      	ldr	r3, [r3, #16]
 80093f0:	021a      	lsls	r2, r3, #8
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	430a      	orrs	r2, r1
 80093f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	685a      	ldr	r2, [r3, #4]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8009408:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	6859      	ldr	r1, [r3, #4]
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	689a      	ldr	r2, [r3, #8]
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	430a      	orrs	r2, r1
 800941a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	689a      	ldr	r2, [r3, #8]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800942a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	6899      	ldr	r1, [r3, #8]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	68da      	ldr	r2, [r3, #12]
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	430a      	orrs	r2, r1
 800943c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009442:	4a58      	ldr	r2, [pc, #352]	; (80095a4 <ADC_Init+0x1f4>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d022      	beq.n	800948e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	689a      	ldr	r2, [r3, #8]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009456:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	6899      	ldr	r1, [r3, #8]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	430a      	orrs	r2, r1
 8009468:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	689a      	ldr	r2, [r3, #8]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009478:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	6899      	ldr	r1, [r3, #8]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	430a      	orrs	r2, r1
 800948a:	609a      	str	r2, [r3, #8]
 800948c:	e00f      	b.n	80094ae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	689a      	ldr	r2, [r3, #8]
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800949c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	689a      	ldr	r2, [r3, #8]
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80094ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	689a      	ldr	r2, [r3, #8]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f022 0202 	bic.w	r2, r2, #2
 80094bc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	6899      	ldr	r1, [r3, #8]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	7e1b      	ldrb	r3, [r3, #24]
 80094c8:	005a      	lsls	r2, r3, #1
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	430a      	orrs	r2, r1
 80094d0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d01b      	beq.n	8009514 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	685a      	ldr	r2, [r3, #4]
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80094ea:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	685a      	ldr	r2, [r3, #4]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80094fa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	6859      	ldr	r1, [r3, #4]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009506:	3b01      	subs	r3, #1
 8009508:	035a      	lsls	r2, r3, #13
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	430a      	orrs	r2, r1
 8009510:	605a      	str	r2, [r3, #4]
 8009512:	e007      	b.n	8009524 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	685a      	ldr	r2, [r3, #4]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009522:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8009532:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	69db      	ldr	r3, [r3, #28]
 800953e:	3b01      	subs	r3, #1
 8009540:	051a      	lsls	r2, r3, #20
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	430a      	orrs	r2, r1
 8009548:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	689a      	ldr	r2, [r3, #8]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009558:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	6899      	ldr	r1, [r3, #8]
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009566:	025a      	lsls	r2, r3, #9
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	430a      	orrs	r2, r1
 800956e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	689a      	ldr	r2, [r3, #8]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800957e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	6899      	ldr	r1, [r3, #8]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	695b      	ldr	r3, [r3, #20]
 800958a:	029a      	lsls	r2, r3, #10
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	430a      	orrs	r2, r1
 8009592:	609a      	str	r2, [r3, #8]
}
 8009594:	bf00      	nop
 8009596:	3714      	adds	r7, #20
 8009598:	46bd      	mov	sp, r7
 800959a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959e:	4770      	bx	lr
 80095a0:	40012300 	.word	0x40012300
 80095a4:	0f000001 	.word	0x0f000001

080095a8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b084      	sub	sp, #16
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095b4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ba:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d13c      	bne.n	800963c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095c6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	689b      	ldr	r3, [r3, #8]
 80095d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d12b      	bne.n	8009634 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d127      	bne.n	8009634 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d006      	beq.n	8009600 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	689b      	ldr	r3, [r3, #8]
 80095f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d119      	bne.n	8009634 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	685a      	ldr	r2, [r3, #4]
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f022 0220 	bic.w	r2, r2, #32
 800960e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009614:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009620:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009624:	2b00      	cmp	r3, #0
 8009626:	d105      	bne.n	8009634 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800962c:	f043 0201 	orr.w	r2, r3, #1
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009634:	68f8      	ldr	r0, [r7, #12]
 8009636:	f7ff fd6b 	bl	8009110 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800963a:	e00e      	b.n	800965a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009640:	f003 0310 	and.w	r3, r3, #16
 8009644:	2b00      	cmp	r3, #0
 8009646:	d003      	beq.n	8009650 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8009648:	68f8      	ldr	r0, [r7, #12]
 800964a:	f7ff fd75 	bl	8009138 <HAL_ADC_ErrorCallback>
}
 800964e:	e004      	b.n	800965a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009656:	6878      	ldr	r0, [r7, #4]
 8009658:	4798      	blx	r3
}
 800965a:	bf00      	nop
 800965c:	3710      	adds	r7, #16
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}

08009662 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009662:	b580      	push	{r7, lr}
 8009664:	b084      	sub	sp, #16
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800966e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8009670:	68f8      	ldr	r0, [r7, #12]
 8009672:	f7ff fd57 	bl	8009124 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009676:	bf00      	nop
 8009678:	3710      	adds	r7, #16
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}

0800967e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800967e:	b580      	push	{r7, lr}
 8009680:	b084      	sub	sp, #16
 8009682:	af00      	add	r7, sp, #0
 8009684:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800968a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	2240      	movs	r2, #64	; 0x40
 8009690:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009696:	f043 0204 	orr.w	r2, r3, #4
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800969e:	68f8      	ldr	r0, [r7, #12]
 80096a0:	f7ff fd4a 	bl	8009138 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80096a4:	bf00      	nop
 80096a6:	3710      	adds	r7, #16
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}

080096ac <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b084      	sub	sp, #16
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d101      	bne.n	80096be <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80096ba:	2301      	movs	r3, #1
 80096bc:	e0ed      	b.n	800989a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80096c4:	b2db      	uxtb	r3, r3
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d102      	bne.n	80096d0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f005 fc1c 	bl	800ef08 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	681a      	ldr	r2, [r3, #0]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f022 0202 	bic.w	r2, r2, #2
 80096de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80096e0:	f7ff fbb2 	bl	8008e48 <HAL_GetTick>
 80096e4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80096e6:	e012      	b.n	800970e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80096e8:	f7ff fbae 	bl	8008e48 <HAL_GetTick>
 80096ec:	4602      	mov	r2, r0
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	1ad3      	subs	r3, r2, r3
 80096f2:	2b0a      	cmp	r3, #10
 80096f4:	d90b      	bls.n	800970e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096fa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2205      	movs	r2, #5
 8009706:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800970a:	2301      	movs	r3, #1
 800970c:	e0c5      	b.n	800989a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	685b      	ldr	r3, [r3, #4]
 8009714:	f003 0302 	and.w	r3, r3, #2
 8009718:	2b00      	cmp	r3, #0
 800971a:	d1e5      	bne.n	80096e8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	681a      	ldr	r2, [r3, #0]
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f042 0201 	orr.w	r2, r2, #1
 800972a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800972c:	f7ff fb8c 	bl	8008e48 <HAL_GetTick>
 8009730:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009732:	e012      	b.n	800975a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009734:	f7ff fb88 	bl	8008e48 <HAL_GetTick>
 8009738:	4602      	mov	r2, r0
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	1ad3      	subs	r3, r2, r3
 800973e:	2b0a      	cmp	r3, #10
 8009740:	d90b      	bls.n	800975a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009746:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	2205      	movs	r2, #5
 8009752:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009756:	2301      	movs	r3, #1
 8009758:	e09f      	b.n	800989a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	685b      	ldr	r3, [r3, #4]
 8009760:	f003 0301 	and.w	r3, r3, #1
 8009764:	2b00      	cmp	r3, #0
 8009766:	d0e5      	beq.n	8009734 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	7e1b      	ldrb	r3, [r3, #24]
 800976c:	2b01      	cmp	r3, #1
 800976e:	d108      	bne.n	8009782 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	681a      	ldr	r2, [r3, #0]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800977e:	601a      	str	r2, [r3, #0]
 8009780:	e007      	b.n	8009792 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	681a      	ldr	r2, [r3, #0]
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009790:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	7e5b      	ldrb	r3, [r3, #25]
 8009796:	2b01      	cmp	r3, #1
 8009798:	d108      	bne.n	80097ac <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	681a      	ldr	r2, [r3, #0]
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80097a8:	601a      	str	r2, [r3, #0]
 80097aa:	e007      	b.n	80097bc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	681a      	ldr	r2, [r3, #0]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80097ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	7e9b      	ldrb	r3, [r3, #26]
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	d108      	bne.n	80097d6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	681a      	ldr	r2, [r3, #0]
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f042 0220 	orr.w	r2, r2, #32
 80097d2:	601a      	str	r2, [r3, #0]
 80097d4:	e007      	b.n	80097e6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	681a      	ldr	r2, [r3, #0]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f022 0220 	bic.w	r2, r2, #32
 80097e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	7edb      	ldrb	r3, [r3, #27]
 80097ea:	2b01      	cmp	r3, #1
 80097ec:	d108      	bne.n	8009800 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	681a      	ldr	r2, [r3, #0]
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f022 0210 	bic.w	r2, r2, #16
 80097fc:	601a      	str	r2, [r3, #0]
 80097fe:	e007      	b.n	8009810 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	681a      	ldr	r2, [r3, #0]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f042 0210 	orr.w	r2, r2, #16
 800980e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	7f1b      	ldrb	r3, [r3, #28]
 8009814:	2b01      	cmp	r3, #1
 8009816:	d108      	bne.n	800982a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	681a      	ldr	r2, [r3, #0]
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	f042 0208 	orr.w	r2, r2, #8
 8009826:	601a      	str	r2, [r3, #0]
 8009828:	e007      	b.n	800983a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	681a      	ldr	r2, [r3, #0]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f022 0208 	bic.w	r2, r2, #8
 8009838:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	7f5b      	ldrb	r3, [r3, #29]
 800983e:	2b01      	cmp	r3, #1
 8009840:	d108      	bne.n	8009854 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	681a      	ldr	r2, [r3, #0]
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f042 0204 	orr.w	r2, r2, #4
 8009850:	601a      	str	r2, [r3, #0]
 8009852:	e007      	b.n	8009864 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	681a      	ldr	r2, [r3, #0]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f022 0204 	bic.w	r2, r2, #4
 8009862:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	689a      	ldr	r2, [r3, #8]
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	68db      	ldr	r3, [r3, #12]
 800986c:	431a      	orrs	r2, r3
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	691b      	ldr	r3, [r3, #16]
 8009872:	431a      	orrs	r2, r3
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	695b      	ldr	r3, [r3, #20]
 8009878:	ea42 0103 	orr.w	r1, r2, r3
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	685b      	ldr	r3, [r3, #4]
 8009880:	1e5a      	subs	r2, r3, #1
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	430a      	orrs	r2, r1
 8009888:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2200      	movs	r2, #0
 800988e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2201      	movs	r2, #1
 8009894:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8009898:	2300      	movs	r3, #0
}
 800989a:	4618      	mov	r0, r3
 800989c:	3710      	adds	r7, #16
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}

080098a2 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80098a2:	b480      	push	{r7}
 80098a4:	b087      	sub	sp, #28
 80098a6:	af00      	add	r7, sp, #0
 80098a8:	60f8      	str	r0, [r7, #12]
 80098aa:	60b9      	str	r1, [r7, #8]
 80098ac:	607a      	str	r2, [r7, #4]
 80098ae:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80098b6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80098b8:	7dfb      	ldrb	r3, [r7, #23]
 80098ba:	2b01      	cmp	r3, #1
 80098bc:	d003      	beq.n	80098c6 <HAL_CAN_GetRxMessage+0x24>
 80098be:	7dfb      	ldrb	r3, [r7, #23]
 80098c0:	2b02      	cmp	r3, #2
 80098c2:	f040 80f4 	bne.w	8009aae <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80098c6:	68bb      	ldr	r3, [r7, #8]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d10e      	bne.n	80098ea <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	68db      	ldr	r3, [r3, #12]
 80098d2:	f003 0303 	and.w	r3, r3, #3
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d116      	bne.n	8009908 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098de:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80098e6:	2301      	movs	r3, #1
 80098e8:	e0e8      	b.n	8009abc <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	691b      	ldr	r3, [r3, #16]
 80098f0:	f003 0303 	and.w	r3, r3, #3
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d107      	bne.n	8009908 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098fc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8009904:	2301      	movs	r3, #1
 8009906:	e0d9      	b.n	8009abc <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681a      	ldr	r2, [r3, #0]
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	331b      	adds	r3, #27
 8009910:	011b      	lsls	r3, r3, #4
 8009912:	4413      	add	r3, r2
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f003 0204 	and.w	r2, r3, #4
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	689b      	ldr	r3, [r3, #8]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d10c      	bne.n	8009940 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681a      	ldr	r2, [r3, #0]
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	331b      	adds	r3, #27
 800992e:	011b      	lsls	r3, r3, #4
 8009930:	4413      	add	r3, r2
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	0d5b      	lsrs	r3, r3, #21
 8009936:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	601a      	str	r2, [r3, #0]
 800993e:	e00b      	b.n	8009958 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681a      	ldr	r2, [r3, #0]
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	331b      	adds	r3, #27
 8009948:	011b      	lsls	r3, r3, #4
 800994a:	4413      	add	r3, r2
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	08db      	lsrs	r3, r3, #3
 8009950:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681a      	ldr	r2, [r3, #0]
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	331b      	adds	r3, #27
 8009960:	011b      	lsls	r3, r3, #4
 8009962:	4413      	add	r3, r2
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	085b      	lsrs	r3, r3, #1
 8009968:	f003 0201 	and.w	r2, r3, #1
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681a      	ldr	r2, [r3, #0]
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	331b      	adds	r3, #27
 8009978:	011b      	lsls	r3, r3, #4
 800997a:	4413      	add	r3, r2
 800997c:	3304      	adds	r3, #4
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f003 020f 	and.w	r2, r3, #15
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681a      	ldr	r2, [r3, #0]
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	331b      	adds	r3, #27
 8009990:	011b      	lsls	r3, r3, #4
 8009992:	4413      	add	r3, r2
 8009994:	3304      	adds	r3, #4
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	0a1b      	lsrs	r3, r3, #8
 800999a:	b2da      	uxtb	r2, r3
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681a      	ldr	r2, [r3, #0]
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	331b      	adds	r3, #27
 80099a8:	011b      	lsls	r3, r3, #4
 80099aa:	4413      	add	r3, r2
 80099ac:	3304      	adds	r3, #4
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	0c1b      	lsrs	r3, r3, #16
 80099b2:	b29a      	uxth	r2, r3
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681a      	ldr	r2, [r3, #0]
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	011b      	lsls	r3, r3, #4
 80099c0:	4413      	add	r3, r2
 80099c2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	b2da      	uxtb	r2, r3
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681a      	ldr	r2, [r3, #0]
 80099d2:	68bb      	ldr	r3, [r7, #8]
 80099d4:	011b      	lsls	r3, r3, #4
 80099d6:	4413      	add	r3, r2
 80099d8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	0a1a      	lsrs	r2, r3, #8
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	3301      	adds	r3, #1
 80099e4:	b2d2      	uxtb	r2, r2
 80099e6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681a      	ldr	r2, [r3, #0]
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	011b      	lsls	r3, r3, #4
 80099f0:	4413      	add	r3, r2
 80099f2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	0c1a      	lsrs	r2, r3, #16
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	3302      	adds	r3, #2
 80099fe:	b2d2      	uxtb	r2, r2
 8009a00:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681a      	ldr	r2, [r3, #0]
 8009a06:	68bb      	ldr	r3, [r7, #8]
 8009a08:	011b      	lsls	r3, r3, #4
 8009a0a:	4413      	add	r3, r2
 8009a0c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	0e1a      	lsrs	r2, r3, #24
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	3303      	adds	r3, #3
 8009a18:	b2d2      	uxtb	r2, r2
 8009a1a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681a      	ldr	r2, [r3, #0]
 8009a20:	68bb      	ldr	r3, [r7, #8]
 8009a22:	011b      	lsls	r3, r3, #4
 8009a24:	4413      	add	r3, r2
 8009a26:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009a2a:	681a      	ldr	r2, [r3, #0]
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	3304      	adds	r3, #4
 8009a30:	b2d2      	uxtb	r2, r2
 8009a32:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681a      	ldr	r2, [r3, #0]
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	011b      	lsls	r3, r3, #4
 8009a3c:	4413      	add	r3, r2
 8009a3e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	0a1a      	lsrs	r2, r3, #8
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	3305      	adds	r3, #5
 8009a4a:	b2d2      	uxtb	r2, r2
 8009a4c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681a      	ldr	r2, [r3, #0]
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	011b      	lsls	r3, r3, #4
 8009a56:	4413      	add	r3, r2
 8009a58:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	0c1a      	lsrs	r2, r3, #16
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	3306      	adds	r3, #6
 8009a64:	b2d2      	uxtb	r2, r2
 8009a66:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681a      	ldr	r2, [r3, #0]
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	011b      	lsls	r3, r3, #4
 8009a70:	4413      	add	r3, r2
 8009a72:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	0e1a      	lsrs	r2, r3, #24
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	3307      	adds	r3, #7
 8009a7e:	b2d2      	uxtb	r2, r2
 8009a80:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8009a82:	68bb      	ldr	r3, [r7, #8]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d108      	bne.n	8009a9a <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	68da      	ldr	r2, [r3, #12]
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f042 0220 	orr.w	r2, r2, #32
 8009a96:	60da      	str	r2, [r3, #12]
 8009a98:	e007      	b.n	8009aaa <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	691a      	ldr	r2, [r3, #16]
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f042 0220 	orr.w	r2, r2, #32
 8009aa8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	e006      	b.n	8009abc <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009aba:	2301      	movs	r3, #1
  }
}
 8009abc:	4618      	mov	r0, r3
 8009abe:	371c      	adds	r7, #28
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac6:	4770      	bx	lr

08009ac8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b08a      	sub	sp, #40	; 0x28
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	695b      	ldr	r3, [r3, #20]
 8009ada:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	685b      	ldr	r3, [r3, #4]
 8009ae2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	689b      	ldr	r3, [r3, #8]
 8009aea:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	68db      	ldr	r3, [r3, #12]
 8009af2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	691b      	ldr	r3, [r3, #16]
 8009afa:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	699b      	ldr	r3, [r3, #24]
 8009b02:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8009b04:	6a3b      	ldr	r3, [r7, #32]
 8009b06:	f003 0301 	and.w	r3, r3, #1
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d07c      	beq.n	8009c08 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8009b0e:	69bb      	ldr	r3, [r7, #24]
 8009b10:	f003 0301 	and.w	r3, r3, #1
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d023      	beq.n	8009b60 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	2201      	movs	r2, #1
 8009b1e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8009b20:	69bb      	ldr	r3, [r7, #24]
 8009b22:	f003 0302 	and.w	r3, r3, #2
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d003      	beq.n	8009b32 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f005 fa84 	bl	800f038 <HAL_CAN_TxMailbox0CompleteCallback>
 8009b30:	e016      	b.n	8009b60 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8009b32:	69bb      	ldr	r3, [r7, #24]
 8009b34:	f003 0304 	and.w	r3, r3, #4
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d004      	beq.n	8009b46 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8009b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b3e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009b42:	627b      	str	r3, [r7, #36]	; 0x24
 8009b44:	e00c      	b.n	8009b60 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8009b46:	69bb      	ldr	r3, [r7, #24]
 8009b48:	f003 0308 	and.w	r3, r3, #8
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d004      	beq.n	8009b5a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8009b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b52:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009b56:	627b      	str	r3, [r7, #36]	; 0x24
 8009b58:	e002      	b.n	8009b60 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f000 f965 	bl	8009e2a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8009b60:	69bb      	ldr	r3, [r7, #24]
 8009b62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d024      	beq.n	8009bb4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009b72:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8009b74:	69bb      	ldr	r3, [r7, #24]
 8009b76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d003      	beq.n	8009b86 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f005 fa6a 	bl	800f058 <HAL_CAN_TxMailbox1CompleteCallback>
 8009b84:	e016      	b.n	8009bb4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8009b86:	69bb      	ldr	r3, [r7, #24]
 8009b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d004      	beq.n	8009b9a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8009b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b92:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009b96:	627b      	str	r3, [r7, #36]	; 0x24
 8009b98:	e00c      	b.n	8009bb4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8009b9a:	69bb      	ldr	r3, [r7, #24]
 8009b9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d004      	beq.n	8009bae <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8009ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009baa:	627b      	str	r3, [r7, #36]	; 0x24
 8009bac:	e002      	b.n	8009bb4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f000 f945 	bl	8009e3e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8009bb4:	69bb      	ldr	r3, [r7, #24]
 8009bb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d024      	beq.n	8009c08 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009bc6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8009bc8:	69bb      	ldr	r3, [r7, #24]
 8009bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d003      	beq.n	8009bda <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f005 fa50 	bl	800f078 <HAL_CAN_TxMailbox2CompleteCallback>
 8009bd8:	e016      	b.n	8009c08 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8009bda:	69bb      	ldr	r3, [r7, #24]
 8009bdc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d004      	beq.n	8009bee <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8009be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bea:	627b      	str	r3, [r7, #36]	; 0x24
 8009bec:	e00c      	b.n	8009c08 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8009bee:	69bb      	ldr	r3, [r7, #24]
 8009bf0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d004      	beq.n	8009c02 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8009bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8009c00:	e002      	b.n	8009c08 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f000 f925 	bl	8009e52 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8009c08:	6a3b      	ldr	r3, [r7, #32]
 8009c0a:	f003 0308 	and.w	r3, r3, #8
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d00c      	beq.n	8009c2c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	f003 0310 	and.w	r3, r3, #16
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d007      	beq.n	8009c2c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8009c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009c22:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	2210      	movs	r2, #16
 8009c2a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8009c2c:	6a3b      	ldr	r3, [r7, #32]
 8009c2e:	f003 0304 	and.w	r3, r3, #4
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d00b      	beq.n	8009c4e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	f003 0308 	and.w	r3, r3, #8
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d006      	beq.n	8009c4e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	2208      	movs	r2, #8
 8009c46:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f000 f90c 	bl	8009e66 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8009c4e:	6a3b      	ldr	r3, [r7, #32]
 8009c50:	f003 0302 	and.w	r3, r3, #2
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d009      	beq.n	8009c6c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	68db      	ldr	r3, [r3, #12]
 8009c5e:	f003 0303 	and.w	r3, r3, #3
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d002      	beq.n	8009c6c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f005 fa16 	bl	800f098 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8009c6c:	6a3b      	ldr	r3, [r7, #32]
 8009c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d00c      	beq.n	8009c90 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	f003 0310 	and.w	r3, r3, #16
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d007      	beq.n	8009c90 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8009c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009c86:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	2210      	movs	r2, #16
 8009c8e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8009c90:	6a3b      	ldr	r3, [r7, #32]
 8009c92:	f003 0320 	and.w	r3, r3, #32
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d00b      	beq.n	8009cb2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8009c9a:	693b      	ldr	r3, [r7, #16]
 8009c9c:	f003 0308 	and.w	r3, r3, #8
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d006      	beq.n	8009cb2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	2208      	movs	r2, #8
 8009caa:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f000 f8ee 	bl	8009e8e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8009cb2:	6a3b      	ldr	r3, [r7, #32]
 8009cb4:	f003 0310 	and.w	r3, r3, #16
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d009      	beq.n	8009cd0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	691b      	ldr	r3, [r3, #16]
 8009cc2:	f003 0303 	and.w	r3, r3, #3
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d002      	beq.n	8009cd0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f000 f8d5 	bl	8009e7a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8009cd0:	6a3b      	ldr	r3, [r7, #32]
 8009cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d00b      	beq.n	8009cf2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8009cda:	69fb      	ldr	r3, [r7, #28]
 8009cdc:	f003 0310 	and.w	r3, r3, #16
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d006      	beq.n	8009cf2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	2210      	movs	r2, #16
 8009cea:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f000 f8d8 	bl	8009ea2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8009cf2:	6a3b      	ldr	r3, [r7, #32]
 8009cf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d00b      	beq.n	8009d14 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8009cfc:	69fb      	ldr	r3, [r7, #28]
 8009cfe:	f003 0308 	and.w	r3, r3, #8
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d006      	beq.n	8009d14 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	2208      	movs	r2, #8
 8009d0c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f000 f8d1 	bl	8009eb6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8009d14:	6a3b      	ldr	r3, [r7, #32]
 8009d16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d075      	beq.n	8009e0a <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8009d1e:	69fb      	ldr	r3, [r7, #28]
 8009d20:	f003 0304 	and.w	r3, r3, #4
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d06c      	beq.n	8009e02 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8009d28:	6a3b      	ldr	r3, [r7, #32]
 8009d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d008      	beq.n	8009d44 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d003      	beq.n	8009d44 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8009d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d3e:	f043 0301 	orr.w	r3, r3, #1
 8009d42:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8009d44:	6a3b      	ldr	r3, [r7, #32]
 8009d46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d008      	beq.n	8009d60 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d003      	beq.n	8009d60 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8009d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d5a:	f043 0302 	orr.w	r3, r3, #2
 8009d5e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8009d60:	6a3b      	ldr	r3, [r7, #32]
 8009d62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d008      	beq.n	8009d7c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d003      	beq.n	8009d7c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8009d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d76:	f043 0304 	orr.w	r3, r3, #4
 8009d7a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8009d7c:	6a3b      	ldr	r3, [r7, #32]
 8009d7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d03d      	beq.n	8009e02 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d038      	beq.n	8009e02 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009d96:	2b30      	cmp	r3, #48	; 0x30
 8009d98:	d017      	beq.n	8009dca <HAL_CAN_IRQHandler+0x302>
 8009d9a:	2b30      	cmp	r3, #48	; 0x30
 8009d9c:	d804      	bhi.n	8009da8 <HAL_CAN_IRQHandler+0x2e0>
 8009d9e:	2b10      	cmp	r3, #16
 8009da0:	d009      	beq.n	8009db6 <HAL_CAN_IRQHandler+0x2ee>
 8009da2:	2b20      	cmp	r3, #32
 8009da4:	d00c      	beq.n	8009dc0 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8009da6:	e024      	b.n	8009df2 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8009da8:	2b50      	cmp	r3, #80	; 0x50
 8009daa:	d018      	beq.n	8009dde <HAL_CAN_IRQHandler+0x316>
 8009dac:	2b60      	cmp	r3, #96	; 0x60
 8009dae:	d01b      	beq.n	8009de8 <HAL_CAN_IRQHandler+0x320>
 8009db0:	2b40      	cmp	r3, #64	; 0x40
 8009db2:	d00f      	beq.n	8009dd4 <HAL_CAN_IRQHandler+0x30c>
            break;
 8009db4:	e01d      	b.n	8009df2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8009db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db8:	f043 0308 	orr.w	r3, r3, #8
 8009dbc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009dbe:	e018      	b.n	8009df2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8009dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc2:	f043 0310 	orr.w	r3, r3, #16
 8009dc6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009dc8:	e013      	b.n	8009df2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8009dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dcc:	f043 0320 	orr.w	r3, r3, #32
 8009dd0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009dd2:	e00e      	b.n	8009df2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8009dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009dda:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009ddc:	e009      	b.n	8009df2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8009dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009de4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009de6:	e004      	b.n	8009df2 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8009de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009dee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8009df0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	699a      	ldr	r2, [r3, #24]
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8009e00:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	2204      	movs	r2, #4
 8009e08:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8009e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d008      	beq.n	8009e22 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e16:	431a      	orrs	r2, r3
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f000 f854 	bl	8009eca <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8009e22:	bf00      	nop
 8009e24:	3728      	adds	r7, #40	; 0x28
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}

08009e2a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009e2a:	b480      	push	{r7}
 8009e2c:	b083      	sub	sp, #12
 8009e2e:	af00      	add	r7, sp, #0
 8009e30:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8009e32:	bf00      	nop
 8009e34:	370c      	adds	r7, #12
 8009e36:	46bd      	mov	sp, r7
 8009e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3c:	4770      	bx	lr

08009e3e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009e3e:	b480      	push	{r7}
 8009e40:	b083      	sub	sp, #12
 8009e42:	af00      	add	r7, sp, #0
 8009e44:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8009e46:	bf00      	nop
 8009e48:	370c      	adds	r7, #12
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e50:	4770      	bx	lr

08009e52 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8009e52:	b480      	push	{r7}
 8009e54:	b083      	sub	sp, #12
 8009e56:	af00      	add	r7, sp, #0
 8009e58:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8009e5a:	bf00      	nop
 8009e5c:	370c      	adds	r7, #12
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e64:	4770      	bx	lr

08009e66 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8009e66:	b480      	push	{r7}
 8009e68:	b083      	sub	sp, #12
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8009e6e:	bf00      	nop
 8009e70:	370c      	adds	r7, #12
 8009e72:	46bd      	mov	sp, r7
 8009e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e78:	4770      	bx	lr

08009e7a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8009e7a:	b480      	push	{r7}
 8009e7c:	b083      	sub	sp, #12
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8009e82:	bf00      	nop
 8009e84:	370c      	adds	r7, #12
 8009e86:	46bd      	mov	sp, r7
 8009e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8c:	4770      	bx	lr

08009e8e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8009e8e:	b480      	push	{r7}
 8009e90:	b083      	sub	sp, #12
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8009e96:	bf00      	nop
 8009e98:	370c      	adds	r7, #12
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea0:	4770      	bx	lr

08009ea2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8009ea2:	b480      	push	{r7}
 8009ea4:	b083      	sub	sp, #12
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8009eaa:	bf00      	nop
 8009eac:	370c      	adds	r7, #12
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb4:	4770      	bx	lr

08009eb6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8009eb6:	b480      	push	{r7}
 8009eb8:	b083      	sub	sp, #12
 8009eba:	af00      	add	r7, sp, #0
 8009ebc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8009ebe:	bf00      	nop
 8009ec0:	370c      	adds	r7, #12
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec8:	4770      	bx	lr

08009eca <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8009eca:	b480      	push	{r7}
 8009ecc:	b083      	sub	sp, #12
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8009ed2:	bf00      	nop
 8009ed4:	370c      	adds	r7, #12
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009edc:	4770      	bx	lr
	...

08009ee0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b085      	sub	sp, #20
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f003 0307 	and.w	r3, r3, #7
 8009eee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009ef0:	4b0c      	ldr	r3, [pc, #48]	; (8009f24 <__NVIC_SetPriorityGrouping+0x44>)
 8009ef2:	68db      	ldr	r3, [r3, #12]
 8009ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009ef6:	68ba      	ldr	r2, [r7, #8]
 8009ef8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009efc:	4013      	ands	r3, r2
 8009efe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009f08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009f0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009f12:	4a04      	ldr	r2, [pc, #16]	; (8009f24 <__NVIC_SetPriorityGrouping+0x44>)
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	60d3      	str	r3, [r2, #12]
}
 8009f18:	bf00      	nop
 8009f1a:	3714      	adds	r7, #20
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f22:	4770      	bx	lr
 8009f24:	e000ed00 	.word	0xe000ed00

08009f28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009f2c:	4b04      	ldr	r3, [pc, #16]	; (8009f40 <__NVIC_GetPriorityGrouping+0x18>)
 8009f2e:	68db      	ldr	r3, [r3, #12]
 8009f30:	0a1b      	lsrs	r3, r3, #8
 8009f32:	f003 0307 	and.w	r3, r3, #7
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr
 8009f40:	e000ed00 	.word	0xe000ed00

08009f44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009f44:	b480      	push	{r7}
 8009f46:	b083      	sub	sp, #12
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	db0b      	blt.n	8009f6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009f56:	79fb      	ldrb	r3, [r7, #7]
 8009f58:	f003 021f 	and.w	r2, r3, #31
 8009f5c:	4907      	ldr	r1, [pc, #28]	; (8009f7c <__NVIC_EnableIRQ+0x38>)
 8009f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f62:	095b      	lsrs	r3, r3, #5
 8009f64:	2001      	movs	r0, #1
 8009f66:	fa00 f202 	lsl.w	r2, r0, r2
 8009f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009f6e:	bf00      	nop
 8009f70:	370c      	adds	r7, #12
 8009f72:	46bd      	mov	sp, r7
 8009f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f78:	4770      	bx	lr
 8009f7a:	bf00      	nop
 8009f7c:	e000e100 	.word	0xe000e100

08009f80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b083      	sub	sp, #12
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	4603      	mov	r3, r0
 8009f88:	6039      	str	r1, [r7, #0]
 8009f8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	db0a      	blt.n	8009faa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	b2da      	uxtb	r2, r3
 8009f98:	490c      	ldr	r1, [pc, #48]	; (8009fcc <__NVIC_SetPriority+0x4c>)
 8009f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f9e:	0112      	lsls	r2, r2, #4
 8009fa0:	b2d2      	uxtb	r2, r2
 8009fa2:	440b      	add	r3, r1
 8009fa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009fa8:	e00a      	b.n	8009fc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009faa:	683b      	ldr	r3, [r7, #0]
 8009fac:	b2da      	uxtb	r2, r3
 8009fae:	4908      	ldr	r1, [pc, #32]	; (8009fd0 <__NVIC_SetPriority+0x50>)
 8009fb0:	79fb      	ldrb	r3, [r7, #7]
 8009fb2:	f003 030f 	and.w	r3, r3, #15
 8009fb6:	3b04      	subs	r3, #4
 8009fb8:	0112      	lsls	r2, r2, #4
 8009fba:	b2d2      	uxtb	r2, r2
 8009fbc:	440b      	add	r3, r1
 8009fbe:	761a      	strb	r2, [r3, #24]
}
 8009fc0:	bf00      	nop
 8009fc2:	370c      	adds	r7, #12
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fca:	4770      	bx	lr
 8009fcc:	e000e100 	.word	0xe000e100
 8009fd0:	e000ed00 	.word	0xe000ed00

08009fd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b089      	sub	sp, #36	; 0x24
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	60f8      	str	r0, [r7, #12]
 8009fdc:	60b9      	str	r1, [r7, #8]
 8009fde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	f003 0307 	and.w	r3, r3, #7
 8009fe6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009fe8:	69fb      	ldr	r3, [r7, #28]
 8009fea:	f1c3 0307 	rsb	r3, r3, #7
 8009fee:	2b04      	cmp	r3, #4
 8009ff0:	bf28      	it	cs
 8009ff2:	2304      	movcs	r3, #4
 8009ff4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009ff6:	69fb      	ldr	r3, [r7, #28]
 8009ff8:	3304      	adds	r3, #4
 8009ffa:	2b06      	cmp	r3, #6
 8009ffc:	d902      	bls.n	800a004 <NVIC_EncodePriority+0x30>
 8009ffe:	69fb      	ldr	r3, [r7, #28]
 800a000:	3b03      	subs	r3, #3
 800a002:	e000      	b.n	800a006 <NVIC_EncodePriority+0x32>
 800a004:	2300      	movs	r3, #0
 800a006:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a008:	f04f 32ff 	mov.w	r2, #4294967295
 800a00c:	69bb      	ldr	r3, [r7, #24]
 800a00e:	fa02 f303 	lsl.w	r3, r2, r3
 800a012:	43da      	mvns	r2, r3
 800a014:	68bb      	ldr	r3, [r7, #8]
 800a016:	401a      	ands	r2, r3
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a01c:	f04f 31ff 	mov.w	r1, #4294967295
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	fa01 f303 	lsl.w	r3, r1, r3
 800a026:	43d9      	mvns	r1, r3
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a02c:	4313      	orrs	r3, r2
         );
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3724      	adds	r7, #36	; 0x24
 800a032:	46bd      	mov	sp, r7
 800a034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a038:	4770      	bx	lr
	...

0800a03c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b082      	sub	sp, #8
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	3b01      	subs	r3, #1
 800a048:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a04c:	d301      	bcc.n	800a052 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a04e:	2301      	movs	r3, #1
 800a050:	e00f      	b.n	800a072 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a052:	4a0a      	ldr	r2, [pc, #40]	; (800a07c <SysTick_Config+0x40>)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	3b01      	subs	r3, #1
 800a058:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a05a:	210f      	movs	r1, #15
 800a05c:	f04f 30ff 	mov.w	r0, #4294967295
 800a060:	f7ff ff8e 	bl	8009f80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a064:	4b05      	ldr	r3, [pc, #20]	; (800a07c <SysTick_Config+0x40>)
 800a066:	2200      	movs	r2, #0
 800a068:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a06a:	4b04      	ldr	r3, [pc, #16]	; (800a07c <SysTick_Config+0x40>)
 800a06c:	2207      	movs	r2, #7
 800a06e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a070:	2300      	movs	r3, #0
}
 800a072:	4618      	mov	r0, r3
 800a074:	3708      	adds	r7, #8
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}
 800a07a:	bf00      	nop
 800a07c:	e000e010 	.word	0xe000e010

0800a080 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b082      	sub	sp, #8
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a088:	6878      	ldr	r0, [r7, #4]
 800a08a:	f7ff ff29 	bl	8009ee0 <__NVIC_SetPriorityGrouping>
}
 800a08e:	bf00      	nop
 800a090:	3708      	adds	r7, #8
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}

0800a096 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a096:	b580      	push	{r7, lr}
 800a098:	b086      	sub	sp, #24
 800a09a:	af00      	add	r7, sp, #0
 800a09c:	4603      	mov	r3, r0
 800a09e:	60b9      	str	r1, [r7, #8]
 800a0a0:	607a      	str	r2, [r7, #4]
 800a0a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a0a8:	f7ff ff3e 	bl	8009f28 <__NVIC_GetPriorityGrouping>
 800a0ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a0ae:	687a      	ldr	r2, [r7, #4]
 800a0b0:	68b9      	ldr	r1, [r7, #8]
 800a0b2:	6978      	ldr	r0, [r7, #20]
 800a0b4:	f7ff ff8e 	bl	8009fd4 <NVIC_EncodePriority>
 800a0b8:	4602      	mov	r2, r0
 800a0ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a0be:	4611      	mov	r1, r2
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f7ff ff5d 	bl	8009f80 <__NVIC_SetPriority>
}
 800a0c6:	bf00      	nop
 800a0c8:	3718      	adds	r7, #24
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}

0800a0ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a0ce:	b580      	push	{r7, lr}
 800a0d0:	b082      	sub	sp, #8
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a0d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f7ff ff31 	bl	8009f44 <__NVIC_EnableIRQ>
}
 800a0e2:	bf00      	nop
 800a0e4:	3708      	adds	r7, #8
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}

0800a0ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a0ea:	b580      	push	{r7, lr}
 800a0ec:	b082      	sub	sp, #8
 800a0ee:	af00      	add	r7, sp, #0
 800a0f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a0f2:	6878      	ldr	r0, [r7, #4]
 800a0f4:	f7ff ffa2 	bl	800a03c <SysTick_Config>
 800a0f8:	4603      	mov	r3, r0
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3708      	adds	r7, #8
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}
	...

0800a104 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b086      	sub	sp, #24
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a10c:	2300      	movs	r3, #0
 800a10e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a110:	f7fe fe9a 	bl	8008e48 <HAL_GetTick>
 800a114:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d101      	bne.n	800a120 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a11c:	2301      	movs	r3, #1
 800a11e:	e099      	b.n	800a254 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2200      	movs	r2, #0
 800a124:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2202      	movs	r2, #2
 800a12c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	681a      	ldr	r2, [r3, #0]
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f022 0201 	bic.w	r2, r2, #1
 800a13e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a140:	e00f      	b.n	800a162 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a142:	f7fe fe81 	bl	8008e48 <HAL_GetTick>
 800a146:	4602      	mov	r2, r0
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	1ad3      	subs	r3, r2, r3
 800a14c:	2b05      	cmp	r3, #5
 800a14e:	d908      	bls.n	800a162 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2220      	movs	r2, #32
 800a154:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2203      	movs	r2, #3
 800a15a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a15e:	2303      	movs	r3, #3
 800a160:	e078      	b.n	800a254 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f003 0301 	and.w	r3, r3, #1
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d1e8      	bne.n	800a142 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a178:	697a      	ldr	r2, [r7, #20]
 800a17a:	4b38      	ldr	r3, [pc, #224]	; (800a25c <HAL_DMA_Init+0x158>)
 800a17c:	4013      	ands	r3, r2
 800a17e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	685a      	ldr	r2, [r3, #4]
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	689b      	ldr	r3, [r3, #8]
 800a188:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a18e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	691b      	ldr	r3, [r3, #16]
 800a194:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a19a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	699b      	ldr	r3, [r3, #24]
 800a1a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a1a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6a1b      	ldr	r3, [r3, #32]
 800a1ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a1ae:	697a      	ldr	r2, [r7, #20]
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b8:	2b04      	cmp	r3, #4
 800a1ba:	d107      	bne.n	800a1cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1c4:	4313      	orrs	r3, r2
 800a1c6:	697a      	ldr	r2, [r7, #20]
 800a1c8:	4313      	orrs	r3, r2
 800a1ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	697a      	ldr	r2, [r7, #20]
 800a1d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	695b      	ldr	r3, [r3, #20]
 800a1da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	f023 0307 	bic.w	r3, r3, #7
 800a1e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1e8:	697a      	ldr	r2, [r7, #20]
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1f2:	2b04      	cmp	r3, #4
 800a1f4:	d117      	bne.n	800a226 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1fa:	697a      	ldr	r2, [r7, #20]
 800a1fc:	4313      	orrs	r3, r2
 800a1fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a204:	2b00      	cmp	r3, #0
 800a206:	d00e      	beq.n	800a226 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	f000 fa99 	bl	800a740 <DMA_CheckFifoParam>
 800a20e:	4603      	mov	r3, r0
 800a210:	2b00      	cmp	r3, #0
 800a212:	d008      	beq.n	800a226 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2240      	movs	r2, #64	; 0x40
 800a218:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2201      	movs	r2, #1
 800a21e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a222:	2301      	movs	r3, #1
 800a224:	e016      	b.n	800a254 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	697a      	ldr	r2, [r7, #20]
 800a22c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f000 fa50 	bl	800a6d4 <DMA_CalcBaseAndBitshift>
 800a234:	4603      	mov	r3, r0
 800a236:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a23c:	223f      	movs	r2, #63	; 0x3f
 800a23e:	409a      	lsls	r2, r3
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2200      	movs	r2, #0
 800a248:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2201      	movs	r2, #1
 800a24e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a252:	2300      	movs	r3, #0
}
 800a254:	4618      	mov	r0, r3
 800a256:	3718      	adds	r7, #24
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}
 800a25c:	f010803f 	.word	0xf010803f

0800a260 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b086      	sub	sp, #24
 800a264:	af00      	add	r7, sp, #0
 800a266:	60f8      	str	r0, [r7, #12]
 800a268:	60b9      	str	r1, [r7, #8]
 800a26a:	607a      	str	r2, [r7, #4]
 800a26c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a26e:	2300      	movs	r3, #0
 800a270:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a276:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a27e:	2b01      	cmp	r3, #1
 800a280:	d101      	bne.n	800a286 <HAL_DMA_Start_IT+0x26>
 800a282:	2302      	movs	r3, #2
 800a284:	e048      	b.n	800a318 <HAL_DMA_Start_IT+0xb8>
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	2201      	movs	r2, #1
 800a28a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a294:	b2db      	uxtb	r3, r3
 800a296:	2b01      	cmp	r3, #1
 800a298:	d137      	bne.n	800a30a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	2202      	movs	r2, #2
 800a29e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	687a      	ldr	r2, [r7, #4]
 800a2ac:	68b9      	ldr	r1, [r7, #8]
 800a2ae:	68f8      	ldr	r0, [r7, #12]
 800a2b0:	f000 f9e2 	bl	800a678 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2b8:	223f      	movs	r2, #63	; 0x3f
 800a2ba:	409a      	lsls	r2, r3
 800a2bc:	693b      	ldr	r3, [r7, #16]
 800a2be:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	681a      	ldr	r2, [r3, #0]
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f042 0216 	orr.w	r2, r2, #22
 800a2ce:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	695a      	ldr	r2, [r3, #20]
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a2de:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d007      	beq.n	800a2f8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	681a      	ldr	r2, [r3, #0]
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f042 0208 	orr.w	r2, r2, #8
 800a2f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	681a      	ldr	r2, [r3, #0]
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f042 0201 	orr.w	r2, r2, #1
 800a306:	601a      	str	r2, [r3, #0]
 800a308:	e005      	b.n	800a316 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	2200      	movs	r2, #0
 800a30e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a312:	2302      	movs	r3, #2
 800a314:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a316:	7dfb      	ldrb	r3, [r7, #23]
}
 800a318:	4618      	mov	r0, r3
 800a31a:	3718      	adds	r7, #24
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}

0800a320 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a320:	b480      	push	{r7}
 800a322:	b083      	sub	sp, #12
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a32e:	b2db      	uxtb	r3, r3
 800a330:	2b02      	cmp	r3, #2
 800a332:	d004      	beq.n	800a33e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2280      	movs	r2, #128	; 0x80
 800a338:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a33a:	2301      	movs	r3, #1
 800a33c:	e00c      	b.n	800a358 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2205      	movs	r2, #5
 800a342:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	681a      	ldr	r2, [r3, #0]
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f022 0201 	bic.w	r2, r2, #1
 800a354:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a356:	2300      	movs	r3, #0
}
 800a358:	4618      	mov	r0, r3
 800a35a:	370c      	adds	r7, #12
 800a35c:	46bd      	mov	sp, r7
 800a35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a362:	4770      	bx	lr

0800a364 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b086      	sub	sp, #24
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a36c:	2300      	movs	r3, #0
 800a36e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a370:	4b92      	ldr	r3, [pc, #584]	; (800a5bc <HAL_DMA_IRQHandler+0x258>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	4a92      	ldr	r2, [pc, #584]	; (800a5c0 <HAL_DMA_IRQHandler+0x25c>)
 800a376:	fba2 2303 	umull	r2, r3, r2, r3
 800a37a:	0a9b      	lsrs	r3, r3, #10
 800a37c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a382:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a384:	693b      	ldr	r3, [r7, #16]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a38e:	2208      	movs	r2, #8
 800a390:	409a      	lsls	r2, r3
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	4013      	ands	r3, r2
 800a396:	2b00      	cmp	r3, #0
 800a398:	d01a      	beq.n	800a3d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f003 0304 	and.w	r3, r3, #4
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d013      	beq.n	800a3d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	681a      	ldr	r2, [r3, #0]
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f022 0204 	bic.w	r2, r2, #4
 800a3b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3bc:	2208      	movs	r2, #8
 800a3be:	409a      	lsls	r2, r3
 800a3c0:	693b      	ldr	r3, [r7, #16]
 800a3c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3c8:	f043 0201 	orr.w	r2, r3, #1
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3d4:	2201      	movs	r2, #1
 800a3d6:	409a      	lsls	r2, r3
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	4013      	ands	r3, r2
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d012      	beq.n	800a406 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	695b      	ldr	r3, [r3, #20]
 800a3e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d00b      	beq.n	800a406 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3f2:	2201      	movs	r2, #1
 800a3f4:	409a      	lsls	r2, r3
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3fe:	f043 0202 	orr.w	r2, r3, #2
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a40a:	2204      	movs	r2, #4
 800a40c:	409a      	lsls	r2, r3
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	4013      	ands	r3, r2
 800a412:	2b00      	cmp	r3, #0
 800a414:	d012      	beq.n	800a43c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f003 0302 	and.w	r3, r3, #2
 800a420:	2b00      	cmp	r3, #0
 800a422:	d00b      	beq.n	800a43c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a428:	2204      	movs	r2, #4
 800a42a:	409a      	lsls	r2, r3
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a434:	f043 0204 	orr.w	r2, r3, #4
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a440:	2210      	movs	r2, #16
 800a442:	409a      	lsls	r2, r3
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	4013      	ands	r3, r2
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d043      	beq.n	800a4d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f003 0308 	and.w	r3, r3, #8
 800a456:	2b00      	cmp	r3, #0
 800a458:	d03c      	beq.n	800a4d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a45e:	2210      	movs	r2, #16
 800a460:	409a      	lsls	r2, r3
 800a462:	693b      	ldr	r3, [r7, #16]
 800a464:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a470:	2b00      	cmp	r3, #0
 800a472:	d018      	beq.n	800a4a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d108      	bne.n	800a494 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a486:	2b00      	cmp	r3, #0
 800a488:	d024      	beq.n	800a4d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	4798      	blx	r3
 800a492:	e01f      	b.n	800a4d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d01b      	beq.n	800a4d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	4798      	blx	r3
 800a4a4:	e016      	b.n	800a4d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d107      	bne.n	800a4c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	681a      	ldr	r2, [r3, #0]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f022 0208 	bic.w	r2, r2, #8
 800a4c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d003      	beq.n	800a4d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4d8:	2220      	movs	r2, #32
 800a4da:	409a      	lsls	r2, r3
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	4013      	ands	r3, r2
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	f000 808e 	beq.w	800a602 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f003 0310 	and.w	r3, r3, #16
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	f000 8086 	beq.w	800a602 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4fa:	2220      	movs	r2, #32
 800a4fc:	409a      	lsls	r2, r3
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a508:	b2db      	uxtb	r3, r3
 800a50a:	2b05      	cmp	r3, #5
 800a50c:	d136      	bne.n	800a57c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	681a      	ldr	r2, [r3, #0]
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f022 0216 	bic.w	r2, r2, #22
 800a51c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	695a      	ldr	r2, [r3, #20]
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a52c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a532:	2b00      	cmp	r3, #0
 800a534:	d103      	bne.n	800a53e <HAL_DMA_IRQHandler+0x1da>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d007      	beq.n	800a54e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	681a      	ldr	r2, [r3, #0]
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f022 0208 	bic.w	r2, r2, #8
 800a54c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a552:	223f      	movs	r2, #63	; 0x3f
 800a554:	409a      	lsls	r2, r3
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	2200      	movs	r2, #0
 800a55e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2201      	movs	r2, #1
 800a566:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d07d      	beq.n	800a66e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a576:	6878      	ldr	r0, [r7, #4]
 800a578:	4798      	blx	r3
        }
        return;
 800a57a:	e078      	b.n	800a66e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a586:	2b00      	cmp	r3, #0
 800a588:	d01c      	beq.n	800a5c4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a594:	2b00      	cmp	r3, #0
 800a596:	d108      	bne.n	800a5aa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d030      	beq.n	800a602 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	4798      	blx	r3
 800a5a8:	e02b      	b.n	800a602 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d027      	beq.n	800a602 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	4798      	blx	r3
 800a5ba:	e022      	b.n	800a602 <HAL_DMA_IRQHandler+0x29e>
 800a5bc:	20000038 	.word	0x20000038
 800a5c0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d10f      	bne.n	800a5f2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	681a      	ldr	r2, [r3, #0]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f022 0210 	bic.w	r2, r2, #16
 800a5e0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2201      	movs	r2, #1
 800a5ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d003      	beq.n	800a602 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a606:	2b00      	cmp	r3, #0
 800a608:	d032      	beq.n	800a670 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a60e:	f003 0301 	and.w	r3, r3, #1
 800a612:	2b00      	cmp	r3, #0
 800a614:	d022      	beq.n	800a65c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2205      	movs	r2, #5
 800a61a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	681a      	ldr	r2, [r3, #0]
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	f022 0201 	bic.w	r2, r2, #1
 800a62c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	3301      	adds	r3, #1
 800a632:	60bb      	str	r3, [r7, #8]
 800a634:	697a      	ldr	r2, [r7, #20]
 800a636:	429a      	cmp	r2, r3
 800a638:	d307      	bcc.n	800a64a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f003 0301 	and.w	r3, r3, #1
 800a644:	2b00      	cmp	r3, #0
 800a646:	d1f2      	bne.n	800a62e <HAL_DMA_IRQHandler+0x2ca>
 800a648:	e000      	b.n	800a64c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800a64a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2200      	movs	r2, #0
 800a650:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2201      	movs	r2, #1
 800a658:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a660:	2b00      	cmp	r3, #0
 800a662:	d005      	beq.n	800a670 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	4798      	blx	r3
 800a66c:	e000      	b.n	800a670 <HAL_DMA_IRQHandler+0x30c>
        return;
 800a66e:	bf00      	nop
    }
  }
}
 800a670:	3718      	adds	r7, #24
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}
 800a676:	bf00      	nop

0800a678 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a678:	b480      	push	{r7}
 800a67a:	b085      	sub	sp, #20
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	60f8      	str	r0, [r7, #12]
 800a680:	60b9      	str	r1, [r7, #8]
 800a682:	607a      	str	r2, [r7, #4]
 800a684:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	681a      	ldr	r2, [r3, #0]
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a694:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	683a      	ldr	r2, [r7, #0]
 800a69c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	689b      	ldr	r3, [r3, #8]
 800a6a2:	2b40      	cmp	r3, #64	; 0x40
 800a6a4:	d108      	bne.n	800a6b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	687a      	ldr	r2, [r7, #4]
 800a6ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	68ba      	ldr	r2, [r7, #8]
 800a6b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a6b6:	e007      	b.n	800a6c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	68ba      	ldr	r2, [r7, #8]
 800a6be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	687a      	ldr	r2, [r7, #4]
 800a6c6:	60da      	str	r2, [r3, #12]
}
 800a6c8:	bf00      	nop
 800a6ca:	3714      	adds	r7, #20
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d2:	4770      	bx	lr

0800a6d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b085      	sub	sp, #20
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	b2db      	uxtb	r3, r3
 800a6e2:	3b10      	subs	r3, #16
 800a6e4:	4a14      	ldr	r2, [pc, #80]	; (800a738 <DMA_CalcBaseAndBitshift+0x64>)
 800a6e6:	fba2 2303 	umull	r2, r3, r2, r3
 800a6ea:	091b      	lsrs	r3, r3, #4
 800a6ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a6ee:	4a13      	ldr	r2, [pc, #76]	; (800a73c <DMA_CalcBaseAndBitshift+0x68>)
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	4413      	add	r3, r2
 800a6f4:	781b      	ldrb	r3, [r3, #0]
 800a6f6:	461a      	mov	r2, r3
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	2b03      	cmp	r3, #3
 800a700:	d909      	bls.n	800a716 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a70a:	f023 0303 	bic.w	r3, r3, #3
 800a70e:	1d1a      	adds	r2, r3, #4
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	659a      	str	r2, [r3, #88]	; 0x58
 800a714:	e007      	b.n	800a726 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a71e:	f023 0303 	bic.w	r3, r3, #3
 800a722:	687a      	ldr	r2, [r7, #4]
 800a724:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a72a:	4618      	mov	r0, r3
 800a72c:	3714      	adds	r7, #20
 800a72e:	46bd      	mov	sp, r7
 800a730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a734:	4770      	bx	lr
 800a736:	bf00      	nop
 800a738:	aaaaaaab 	.word	0xaaaaaaab
 800a73c:	08013108 	.word	0x08013108

0800a740 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a740:	b480      	push	{r7}
 800a742:	b085      	sub	sp, #20
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a748:	2300      	movs	r3, #0
 800a74a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a750:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	699b      	ldr	r3, [r3, #24]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d11f      	bne.n	800a79a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	2b03      	cmp	r3, #3
 800a75e:	d855      	bhi.n	800a80c <DMA_CheckFifoParam+0xcc>
 800a760:	a201      	add	r2, pc, #4	; (adr r2, 800a768 <DMA_CheckFifoParam+0x28>)
 800a762:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a766:	bf00      	nop
 800a768:	0800a779 	.word	0x0800a779
 800a76c:	0800a78b 	.word	0x0800a78b
 800a770:	0800a779 	.word	0x0800a779
 800a774:	0800a80d 	.word	0x0800a80d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a77c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a780:	2b00      	cmp	r3, #0
 800a782:	d045      	beq.n	800a810 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800a784:	2301      	movs	r3, #1
 800a786:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a788:	e042      	b.n	800a810 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a78e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a792:	d13f      	bne.n	800a814 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800a794:	2301      	movs	r3, #1
 800a796:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a798:	e03c      	b.n	800a814 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	699b      	ldr	r3, [r3, #24]
 800a79e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a7a2:	d121      	bne.n	800a7e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	2b03      	cmp	r3, #3
 800a7a8:	d836      	bhi.n	800a818 <DMA_CheckFifoParam+0xd8>
 800a7aa:	a201      	add	r2, pc, #4	; (adr r2, 800a7b0 <DMA_CheckFifoParam+0x70>)
 800a7ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7b0:	0800a7c1 	.word	0x0800a7c1
 800a7b4:	0800a7c7 	.word	0x0800a7c7
 800a7b8:	0800a7c1 	.word	0x0800a7c1
 800a7bc:	0800a7d9 	.word	0x0800a7d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	73fb      	strb	r3, [r7, #15]
      break;
 800a7c4:	e02f      	b.n	800a826 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d024      	beq.n	800a81c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a7d6:	e021      	b.n	800a81c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a7e0:	d11e      	bne.n	800a820 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800a7e2:	2301      	movs	r3, #1
 800a7e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800a7e6:	e01b      	b.n	800a820 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	2b02      	cmp	r3, #2
 800a7ec:	d902      	bls.n	800a7f4 <DMA_CheckFifoParam+0xb4>
 800a7ee:	2b03      	cmp	r3, #3
 800a7f0:	d003      	beq.n	800a7fa <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800a7f2:	e018      	b.n	800a826 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	73fb      	strb	r3, [r7, #15]
      break;
 800a7f8:	e015      	b.n	800a826 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a802:	2b00      	cmp	r3, #0
 800a804:	d00e      	beq.n	800a824 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800a806:	2301      	movs	r3, #1
 800a808:	73fb      	strb	r3, [r7, #15]
      break;
 800a80a:	e00b      	b.n	800a824 <DMA_CheckFifoParam+0xe4>
      break;
 800a80c:	bf00      	nop
 800a80e:	e00a      	b.n	800a826 <DMA_CheckFifoParam+0xe6>
      break;
 800a810:	bf00      	nop
 800a812:	e008      	b.n	800a826 <DMA_CheckFifoParam+0xe6>
      break;
 800a814:	bf00      	nop
 800a816:	e006      	b.n	800a826 <DMA_CheckFifoParam+0xe6>
      break;
 800a818:	bf00      	nop
 800a81a:	e004      	b.n	800a826 <DMA_CheckFifoParam+0xe6>
      break;
 800a81c:	bf00      	nop
 800a81e:	e002      	b.n	800a826 <DMA_CheckFifoParam+0xe6>
      break;   
 800a820:	bf00      	nop
 800a822:	e000      	b.n	800a826 <DMA_CheckFifoParam+0xe6>
      break;
 800a824:	bf00      	nop
    }
  } 
  
  return status; 
 800a826:	7bfb      	ldrb	r3, [r7, #15]
}
 800a828:	4618      	mov	r0, r3
 800a82a:	3714      	adds	r7, #20
 800a82c:	46bd      	mov	sp, r7
 800a82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a832:	4770      	bx	lr

0800a834 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b086      	sub	sp, #24
 800a838:	af00      	add	r7, sp, #0
 800a83a:	60f8      	str	r0, [r7, #12]
 800a83c:	60b9      	str	r1, [r7, #8]
 800a83e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a842:	2301      	movs	r3, #1
 800a844:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a846:	4b23      	ldr	r3, [pc, #140]	; (800a8d4 <HAL_FLASH_Program+0xa0>)
 800a848:	7e1b      	ldrb	r3, [r3, #24]
 800a84a:	2b01      	cmp	r3, #1
 800a84c:	d101      	bne.n	800a852 <HAL_FLASH_Program+0x1e>
 800a84e:	2302      	movs	r3, #2
 800a850:	e03b      	b.n	800a8ca <HAL_FLASH_Program+0x96>
 800a852:	4b20      	ldr	r3, [pc, #128]	; (800a8d4 <HAL_FLASH_Program+0xa0>)
 800a854:	2201      	movs	r2, #1
 800a856:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a858:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a85c:	f000 f870 	bl	800a940 <FLASH_WaitForLastOperation>
 800a860:	4603      	mov	r3, r0
 800a862:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800a864:	7dfb      	ldrb	r3, [r7, #23]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d12b      	bne.n	800a8c2 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d105      	bne.n	800a87c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800a870:	783b      	ldrb	r3, [r7, #0]
 800a872:	4619      	mov	r1, r3
 800a874:	68b8      	ldr	r0, [r7, #8]
 800a876:	f000 f917 	bl	800aaa8 <FLASH_Program_Byte>
 800a87a:	e016      	b.n	800a8aa <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	2b01      	cmp	r3, #1
 800a880:	d105      	bne.n	800a88e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800a882:	883b      	ldrh	r3, [r7, #0]
 800a884:	4619      	mov	r1, r3
 800a886:	68b8      	ldr	r0, [r7, #8]
 800a888:	f000 f8ea 	bl	800aa60 <FLASH_Program_HalfWord>
 800a88c:	e00d      	b.n	800a8aa <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	2b02      	cmp	r3, #2
 800a892:	d105      	bne.n	800a8a0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	4619      	mov	r1, r3
 800a898:	68b8      	ldr	r0, [r7, #8]
 800a89a:	f000 f8bf 	bl	800aa1c <FLASH_Program_Word>
 800a89e:	e004      	b.n	800a8aa <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800a8a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8a4:	68b8      	ldr	r0, [r7, #8]
 800a8a6:	f000 f88b 	bl	800a9c0 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a8aa:	f24c 3050 	movw	r0, #50000	; 0xc350
 800a8ae:	f000 f847 	bl	800a940 <FLASH_WaitForLastOperation>
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800a8b6:	4b08      	ldr	r3, [pc, #32]	; (800a8d8 <HAL_FLASH_Program+0xa4>)
 800a8b8:	691b      	ldr	r3, [r3, #16]
 800a8ba:	4a07      	ldr	r2, [pc, #28]	; (800a8d8 <HAL_FLASH_Program+0xa4>)
 800a8bc:	f023 0301 	bic.w	r3, r3, #1
 800a8c0:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a8c2:	4b04      	ldr	r3, [pc, #16]	; (800a8d4 <HAL_FLASH_Program+0xa0>)
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	761a      	strb	r2, [r3, #24]
  
  return status;
 800a8c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3718      	adds	r7, #24
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}
 800a8d2:	bf00      	nop
 800a8d4:	2000420c 	.word	0x2000420c
 800a8d8:	40023c00 	.word	0x40023c00

0800a8dc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b083      	sub	sp, #12
 800a8e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800a8e6:	4b0b      	ldr	r3, [pc, #44]	; (800a914 <HAL_FLASH_Unlock+0x38>)
 800a8e8:	691b      	ldr	r3, [r3, #16]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	da0b      	bge.n	800a906 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800a8ee:	4b09      	ldr	r3, [pc, #36]	; (800a914 <HAL_FLASH_Unlock+0x38>)
 800a8f0:	4a09      	ldr	r2, [pc, #36]	; (800a918 <HAL_FLASH_Unlock+0x3c>)
 800a8f2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800a8f4:	4b07      	ldr	r3, [pc, #28]	; (800a914 <HAL_FLASH_Unlock+0x38>)
 800a8f6:	4a09      	ldr	r2, [pc, #36]	; (800a91c <HAL_FLASH_Unlock+0x40>)
 800a8f8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800a8fa:	4b06      	ldr	r3, [pc, #24]	; (800a914 <HAL_FLASH_Unlock+0x38>)
 800a8fc:	691b      	ldr	r3, [r3, #16]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	da01      	bge.n	800a906 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800a902:	2301      	movs	r3, #1
 800a904:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800a906:	79fb      	ldrb	r3, [r7, #7]
}
 800a908:	4618      	mov	r0, r3
 800a90a:	370c      	adds	r7, #12
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr
 800a914:	40023c00 	.word	0x40023c00
 800a918:	45670123 	.word	0x45670123
 800a91c:	cdef89ab 	.word	0xcdef89ab

0800a920 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800a920:	b480      	push	{r7}
 800a922:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800a924:	4b05      	ldr	r3, [pc, #20]	; (800a93c <HAL_FLASH_Lock+0x1c>)
 800a926:	691b      	ldr	r3, [r3, #16]
 800a928:	4a04      	ldr	r2, [pc, #16]	; (800a93c <HAL_FLASH_Lock+0x1c>)
 800a92a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a92e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800a930:	2300      	movs	r3, #0
}
 800a932:	4618      	mov	r0, r3
 800a934:	46bd      	mov	sp, r7
 800a936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93a:	4770      	bx	lr
 800a93c:	40023c00 	.word	0x40023c00

0800a940 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800a940:	b580      	push	{r7, lr}
 800a942:	b084      	sub	sp, #16
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a948:	2300      	movs	r3, #0
 800a94a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a94c:	4b1a      	ldr	r3, [pc, #104]	; (800a9b8 <FLASH_WaitForLastOperation+0x78>)
 800a94e:	2200      	movs	r2, #0
 800a950:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800a952:	f7fe fa79 	bl	8008e48 <HAL_GetTick>
 800a956:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800a958:	e010      	b.n	800a97c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a960:	d00c      	beq.n	800a97c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2b00      	cmp	r3, #0
 800a966:	d007      	beq.n	800a978 <FLASH_WaitForLastOperation+0x38>
 800a968:	f7fe fa6e 	bl	8008e48 <HAL_GetTick>
 800a96c:	4602      	mov	r2, r0
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	1ad3      	subs	r3, r2, r3
 800a972:	687a      	ldr	r2, [r7, #4]
 800a974:	429a      	cmp	r2, r3
 800a976:	d201      	bcs.n	800a97c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800a978:	2303      	movs	r3, #3
 800a97a:	e019      	b.n	800a9b0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800a97c:	4b0f      	ldr	r3, [pc, #60]	; (800a9bc <FLASH_WaitForLastOperation+0x7c>)
 800a97e:	68db      	ldr	r3, [r3, #12]
 800a980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a984:	2b00      	cmp	r3, #0
 800a986:	d1e8      	bne.n	800a95a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800a988:	4b0c      	ldr	r3, [pc, #48]	; (800a9bc <FLASH_WaitForLastOperation+0x7c>)
 800a98a:	68db      	ldr	r3, [r3, #12]
 800a98c:	f003 0301 	and.w	r3, r3, #1
 800a990:	2b00      	cmp	r3, #0
 800a992:	d002      	beq.n	800a99a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800a994:	4b09      	ldr	r3, [pc, #36]	; (800a9bc <FLASH_WaitForLastOperation+0x7c>)
 800a996:	2201      	movs	r2, #1
 800a998:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800a99a:	4b08      	ldr	r3, [pc, #32]	; (800a9bc <FLASH_WaitForLastOperation+0x7c>)
 800a99c:	68db      	ldr	r3, [r3, #12]
 800a99e:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d003      	beq.n	800a9ae <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800a9a6:	f000 f8a1 	bl	800aaec <FLASH_SetErrorCode>
    return HAL_ERROR;
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	e000      	b.n	800a9b0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800a9ae:	2300      	movs	r3, #0
  
}  
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	3710      	adds	r7, #16
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}
 800a9b8:	2000420c 	.word	0x2000420c
 800a9bc:	40023c00 	.word	0x40023c00

0800a9c0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800a9c0:	b490      	push	{r4, r7}
 800a9c2:	b084      	sub	sp, #16
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	60f8      	str	r0, [r7, #12]
 800a9c8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a9cc:	4b12      	ldr	r3, [pc, #72]	; (800aa18 <FLASH_Program_DoubleWord+0x58>)
 800a9ce:	691b      	ldr	r3, [r3, #16]
 800a9d0:	4a11      	ldr	r2, [pc, #68]	; (800aa18 <FLASH_Program_DoubleWord+0x58>)
 800a9d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a9d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800a9d8:	4b0f      	ldr	r3, [pc, #60]	; (800aa18 <FLASH_Program_DoubleWord+0x58>)
 800a9da:	691b      	ldr	r3, [r3, #16]
 800a9dc:	4a0e      	ldr	r2, [pc, #56]	; (800aa18 <FLASH_Program_DoubleWord+0x58>)
 800a9de:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a9e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800a9e4:	4b0c      	ldr	r3, [pc, #48]	; (800aa18 <FLASH_Program_DoubleWord+0x58>)
 800a9e6:	691b      	ldr	r3, [r3, #16]
 800a9e8:	4a0b      	ldr	r2, [pc, #44]	; (800aa18 <FLASH_Program_DoubleWord+0x58>)
 800a9ea:	f043 0301 	orr.w	r3, r3, #1
 800a9ee:	6113      	str	r3, [r2, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	683a      	ldr	r2, [r7, #0]
 800a9f4:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800a9f6:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a9fa:	f04f 0300 	mov.w	r3, #0
 800a9fe:	f04f 0400 	mov.w	r4, #0
 800aa02:	0013      	movs	r3, r2
 800aa04:	2400      	movs	r4, #0
 800aa06:	68fa      	ldr	r2, [r7, #12]
 800aa08:	3204      	adds	r2, #4
 800aa0a:	6013      	str	r3, [r2, #0]
}
 800aa0c:	bf00      	nop
 800aa0e:	3710      	adds	r7, #16
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bc90      	pop	{r4, r7}
 800aa14:	4770      	bx	lr
 800aa16:	bf00      	nop
 800aa18:	40023c00 	.word	0x40023c00

0800aa1c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800aa1c:	b480      	push	{r7}
 800aa1e:	b083      	sub	sp, #12
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
 800aa24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800aa26:	4b0d      	ldr	r3, [pc, #52]	; (800aa5c <FLASH_Program_Word+0x40>)
 800aa28:	691b      	ldr	r3, [r3, #16]
 800aa2a:	4a0c      	ldr	r2, [pc, #48]	; (800aa5c <FLASH_Program_Word+0x40>)
 800aa2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa30:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800aa32:	4b0a      	ldr	r3, [pc, #40]	; (800aa5c <FLASH_Program_Word+0x40>)
 800aa34:	691b      	ldr	r3, [r3, #16]
 800aa36:	4a09      	ldr	r2, [pc, #36]	; (800aa5c <FLASH_Program_Word+0x40>)
 800aa38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800aa3c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800aa3e:	4b07      	ldr	r3, [pc, #28]	; (800aa5c <FLASH_Program_Word+0x40>)
 800aa40:	691b      	ldr	r3, [r3, #16]
 800aa42:	4a06      	ldr	r2, [pc, #24]	; (800aa5c <FLASH_Program_Word+0x40>)
 800aa44:	f043 0301 	orr.w	r3, r3, #1
 800aa48:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	683a      	ldr	r2, [r7, #0]
 800aa4e:	601a      	str	r2, [r3, #0]
}
 800aa50:	bf00      	nop
 800aa52:	370c      	adds	r7, #12
 800aa54:	46bd      	mov	sp, r7
 800aa56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5a:	4770      	bx	lr
 800aa5c:	40023c00 	.word	0x40023c00

0800aa60 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b083      	sub	sp, #12
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
 800aa68:	460b      	mov	r3, r1
 800aa6a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800aa6c:	4b0d      	ldr	r3, [pc, #52]	; (800aaa4 <FLASH_Program_HalfWord+0x44>)
 800aa6e:	691b      	ldr	r3, [r3, #16]
 800aa70:	4a0c      	ldr	r2, [pc, #48]	; (800aaa4 <FLASH_Program_HalfWord+0x44>)
 800aa72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa76:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800aa78:	4b0a      	ldr	r3, [pc, #40]	; (800aaa4 <FLASH_Program_HalfWord+0x44>)
 800aa7a:	691b      	ldr	r3, [r3, #16]
 800aa7c:	4a09      	ldr	r2, [pc, #36]	; (800aaa4 <FLASH_Program_HalfWord+0x44>)
 800aa7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800aa84:	4b07      	ldr	r3, [pc, #28]	; (800aaa4 <FLASH_Program_HalfWord+0x44>)
 800aa86:	691b      	ldr	r3, [r3, #16]
 800aa88:	4a06      	ldr	r2, [pc, #24]	; (800aaa4 <FLASH_Program_HalfWord+0x44>)
 800aa8a:	f043 0301 	orr.w	r3, r3, #1
 800aa8e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	887a      	ldrh	r2, [r7, #2]
 800aa94:	801a      	strh	r2, [r3, #0]
}
 800aa96:	bf00      	nop
 800aa98:	370c      	adds	r7, #12
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa0:	4770      	bx	lr
 800aaa2:	bf00      	nop
 800aaa4:	40023c00 	.word	0x40023c00

0800aaa8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b083      	sub	sp, #12
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
 800aab0:	460b      	mov	r3, r1
 800aab2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800aab4:	4b0c      	ldr	r3, [pc, #48]	; (800aae8 <FLASH_Program_Byte+0x40>)
 800aab6:	691b      	ldr	r3, [r3, #16]
 800aab8:	4a0b      	ldr	r2, [pc, #44]	; (800aae8 <FLASH_Program_Byte+0x40>)
 800aaba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aabe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800aac0:	4b09      	ldr	r3, [pc, #36]	; (800aae8 <FLASH_Program_Byte+0x40>)
 800aac2:	4a09      	ldr	r2, [pc, #36]	; (800aae8 <FLASH_Program_Byte+0x40>)
 800aac4:	691b      	ldr	r3, [r3, #16]
 800aac6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800aac8:	4b07      	ldr	r3, [pc, #28]	; (800aae8 <FLASH_Program_Byte+0x40>)
 800aaca:	691b      	ldr	r3, [r3, #16]
 800aacc:	4a06      	ldr	r2, [pc, #24]	; (800aae8 <FLASH_Program_Byte+0x40>)
 800aace:	f043 0301 	orr.w	r3, r3, #1
 800aad2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	78fa      	ldrb	r2, [r7, #3]
 800aad8:	701a      	strb	r2, [r3, #0]
}
 800aada:	bf00      	nop
 800aadc:	370c      	adds	r7, #12
 800aade:	46bd      	mov	sp, r7
 800aae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae4:	4770      	bx	lr
 800aae6:	bf00      	nop
 800aae8:	40023c00 	.word	0x40023c00

0800aaec <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800aaec:	b480      	push	{r7}
 800aaee:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800aaf0:	4b2f      	ldr	r3, [pc, #188]	; (800abb0 <FLASH_SetErrorCode+0xc4>)
 800aaf2:	68db      	ldr	r3, [r3, #12]
 800aaf4:	f003 0310 	and.w	r3, r3, #16
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d008      	beq.n	800ab0e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800aafc:	4b2d      	ldr	r3, [pc, #180]	; (800abb4 <FLASH_SetErrorCode+0xc8>)
 800aafe:	69db      	ldr	r3, [r3, #28]
 800ab00:	f043 0310 	orr.w	r3, r3, #16
 800ab04:	4a2b      	ldr	r2, [pc, #172]	; (800abb4 <FLASH_SetErrorCode+0xc8>)
 800ab06:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800ab08:	4b29      	ldr	r3, [pc, #164]	; (800abb0 <FLASH_SetErrorCode+0xc4>)
 800ab0a:	2210      	movs	r2, #16
 800ab0c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800ab0e:	4b28      	ldr	r3, [pc, #160]	; (800abb0 <FLASH_SetErrorCode+0xc4>)
 800ab10:	68db      	ldr	r3, [r3, #12]
 800ab12:	f003 0320 	and.w	r3, r3, #32
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d008      	beq.n	800ab2c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800ab1a:	4b26      	ldr	r3, [pc, #152]	; (800abb4 <FLASH_SetErrorCode+0xc8>)
 800ab1c:	69db      	ldr	r3, [r3, #28]
 800ab1e:	f043 0308 	orr.w	r3, r3, #8
 800ab22:	4a24      	ldr	r2, [pc, #144]	; (800abb4 <FLASH_SetErrorCode+0xc8>)
 800ab24:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800ab26:	4b22      	ldr	r3, [pc, #136]	; (800abb0 <FLASH_SetErrorCode+0xc4>)
 800ab28:	2220      	movs	r2, #32
 800ab2a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800ab2c:	4b20      	ldr	r3, [pc, #128]	; (800abb0 <FLASH_SetErrorCode+0xc4>)
 800ab2e:	68db      	ldr	r3, [r3, #12]
 800ab30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d008      	beq.n	800ab4a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800ab38:	4b1e      	ldr	r3, [pc, #120]	; (800abb4 <FLASH_SetErrorCode+0xc8>)
 800ab3a:	69db      	ldr	r3, [r3, #28]
 800ab3c:	f043 0304 	orr.w	r3, r3, #4
 800ab40:	4a1c      	ldr	r2, [pc, #112]	; (800abb4 <FLASH_SetErrorCode+0xc8>)
 800ab42:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800ab44:	4b1a      	ldr	r3, [pc, #104]	; (800abb0 <FLASH_SetErrorCode+0xc4>)
 800ab46:	2240      	movs	r2, #64	; 0x40
 800ab48:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800ab4a:	4b19      	ldr	r3, [pc, #100]	; (800abb0 <FLASH_SetErrorCode+0xc4>)
 800ab4c:	68db      	ldr	r3, [r3, #12]
 800ab4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d008      	beq.n	800ab68 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800ab56:	4b17      	ldr	r3, [pc, #92]	; (800abb4 <FLASH_SetErrorCode+0xc8>)
 800ab58:	69db      	ldr	r3, [r3, #28]
 800ab5a:	f043 0302 	orr.w	r3, r3, #2
 800ab5e:	4a15      	ldr	r2, [pc, #84]	; (800abb4 <FLASH_SetErrorCode+0xc8>)
 800ab60:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800ab62:	4b13      	ldr	r3, [pc, #76]	; (800abb0 <FLASH_SetErrorCode+0xc4>)
 800ab64:	2280      	movs	r2, #128	; 0x80
 800ab66:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800ab68:	4b11      	ldr	r3, [pc, #68]	; (800abb0 <FLASH_SetErrorCode+0xc4>)
 800ab6a:	68db      	ldr	r3, [r3, #12]
 800ab6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d009      	beq.n	800ab88 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800ab74:	4b0f      	ldr	r3, [pc, #60]	; (800abb4 <FLASH_SetErrorCode+0xc8>)
 800ab76:	69db      	ldr	r3, [r3, #28]
 800ab78:	f043 0301 	orr.w	r3, r3, #1
 800ab7c:	4a0d      	ldr	r2, [pc, #52]	; (800abb4 <FLASH_SetErrorCode+0xc8>)
 800ab7e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800ab80:	4b0b      	ldr	r3, [pc, #44]	; (800abb0 <FLASH_SetErrorCode+0xc4>)
 800ab82:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ab86:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800ab88:	4b09      	ldr	r3, [pc, #36]	; (800abb0 <FLASH_SetErrorCode+0xc4>)
 800ab8a:	68db      	ldr	r3, [r3, #12]
 800ab8c:	f003 0302 	and.w	r3, r3, #2
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d008      	beq.n	800aba6 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800ab94:	4b07      	ldr	r3, [pc, #28]	; (800abb4 <FLASH_SetErrorCode+0xc8>)
 800ab96:	69db      	ldr	r3, [r3, #28]
 800ab98:	f043 0320 	orr.w	r3, r3, #32
 800ab9c:	4a05      	ldr	r2, [pc, #20]	; (800abb4 <FLASH_SetErrorCode+0xc8>)
 800ab9e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800aba0:	4b03      	ldr	r3, [pc, #12]	; (800abb0 <FLASH_SetErrorCode+0xc4>)
 800aba2:	2202      	movs	r2, #2
 800aba4:	60da      	str	r2, [r3, #12]
  }
}
 800aba6:	bf00      	nop
 800aba8:	46bd      	mov	sp, r7
 800abaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abae:	4770      	bx	lr
 800abb0:	40023c00 	.word	0x40023c00
 800abb4:	2000420c 	.word	0x2000420c

0800abb8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b084      	sub	sp, #16
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800abc2:	2301      	movs	r3, #1
 800abc4:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800abc6:	2300      	movs	r3, #0
 800abc8:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800abca:	4b31      	ldr	r3, [pc, #196]	; (800ac90 <HAL_FLASHEx_Erase+0xd8>)
 800abcc:	7e1b      	ldrb	r3, [r3, #24]
 800abce:	2b01      	cmp	r3, #1
 800abd0:	d101      	bne.n	800abd6 <HAL_FLASHEx_Erase+0x1e>
 800abd2:	2302      	movs	r3, #2
 800abd4:	e058      	b.n	800ac88 <HAL_FLASHEx_Erase+0xd0>
 800abd6:	4b2e      	ldr	r3, [pc, #184]	; (800ac90 <HAL_FLASHEx_Erase+0xd8>)
 800abd8:	2201      	movs	r2, #1
 800abda:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800abdc:	f24c 3050 	movw	r0, #50000	; 0xc350
 800abe0:	f7ff feae 	bl	800a940 <FLASH_WaitForLastOperation>
 800abe4:	4603      	mov	r3, r0
 800abe6:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800abe8:	7bfb      	ldrb	r3, [r7, #15]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d148      	bne.n	800ac80 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	f04f 32ff 	mov.w	r2, #4294967295
 800abf4:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	2b01      	cmp	r3, #1
 800abfc:	d115      	bne.n	800ac2a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	691b      	ldr	r3, [r3, #16]
 800ac02:	b2da      	uxtb	r2, r3
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	685b      	ldr	r3, [r3, #4]
 800ac08:	4619      	mov	r1, r3
 800ac0a:	4610      	mov	r0, r2
 800ac0c:	f000 f844 	bl	800ac98 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ac10:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ac14:	f7ff fe94 	bl	800a940 <FLASH_WaitForLastOperation>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800ac1c:	4b1d      	ldr	r3, [pc, #116]	; (800ac94 <HAL_FLASHEx_Erase+0xdc>)
 800ac1e:	691b      	ldr	r3, [r3, #16]
 800ac20:	4a1c      	ldr	r2, [pc, #112]	; (800ac94 <HAL_FLASHEx_Erase+0xdc>)
 800ac22:	f023 0304 	bic.w	r3, r3, #4
 800ac26:	6113      	str	r3, [r2, #16]
 800ac28:	e028      	b.n	800ac7c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	689b      	ldr	r3, [r3, #8]
 800ac2e:	60bb      	str	r3, [r7, #8]
 800ac30:	e01c      	b.n	800ac6c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	691b      	ldr	r3, [r3, #16]
 800ac36:	b2db      	uxtb	r3, r3
 800ac38:	4619      	mov	r1, r3
 800ac3a:	68b8      	ldr	r0, [r7, #8]
 800ac3c:	f000 f850 	bl	800ace0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ac40:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ac44:	f7ff fe7c 	bl	800a940 <FLASH_WaitForLastOperation>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800ac4c:	4b11      	ldr	r3, [pc, #68]	; (800ac94 <HAL_FLASHEx_Erase+0xdc>)
 800ac4e:	691b      	ldr	r3, [r3, #16]
 800ac50:	4a10      	ldr	r2, [pc, #64]	; (800ac94 <HAL_FLASHEx_Erase+0xdc>)
 800ac52:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800ac56:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 800ac58:	7bfb      	ldrb	r3, [r7, #15]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d003      	beq.n	800ac66 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	68ba      	ldr	r2, [r7, #8]
 800ac62:	601a      	str	r2, [r3, #0]
          break;
 800ac64:	e00a      	b.n	800ac7c <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	3301      	adds	r3, #1
 800ac6a:	60bb      	str	r3, [r7, #8]
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	68da      	ldr	r2, [r3, #12]
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	689b      	ldr	r3, [r3, #8]
 800ac74:	4413      	add	r3, r2
 800ac76:	68ba      	ldr	r2, [r7, #8]
 800ac78:	429a      	cmp	r2, r3
 800ac7a:	d3da      	bcc.n	800ac32 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 800ac7c:	f000 f878 	bl	800ad70 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800ac80:	4b03      	ldr	r3, [pc, #12]	; (800ac90 <HAL_FLASHEx_Erase+0xd8>)
 800ac82:	2200      	movs	r2, #0
 800ac84:	761a      	strb	r2, [r3, #24]

  return status;
 800ac86:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	3710      	adds	r7, #16
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}
 800ac90:	2000420c 	.word	0x2000420c
 800ac94:	40023c00 	.word	0x40023c00

0800ac98 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800ac98:	b480      	push	{r7}
 800ac9a:	b083      	sub	sp, #12
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	4603      	mov	r3, r0
 800aca0:	6039      	str	r1, [r7, #0]
 800aca2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800aca4:	4b0d      	ldr	r3, [pc, #52]	; (800acdc <FLASH_MassErase+0x44>)
 800aca6:	691b      	ldr	r3, [r3, #16]
 800aca8:	4a0c      	ldr	r2, [pc, #48]	; (800acdc <FLASH_MassErase+0x44>)
 800acaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800acae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800acb0:	4b0a      	ldr	r3, [pc, #40]	; (800acdc <FLASH_MassErase+0x44>)
 800acb2:	691b      	ldr	r3, [r3, #16]
 800acb4:	4a09      	ldr	r2, [pc, #36]	; (800acdc <FLASH_MassErase+0x44>)
 800acb6:	f043 0304 	orr.w	r3, r3, #4
 800acba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 800acbc:	4b07      	ldr	r3, [pc, #28]	; (800acdc <FLASH_MassErase+0x44>)
 800acbe:	691a      	ldr	r2, [r3, #16]
 800acc0:	79fb      	ldrb	r3, [r7, #7]
 800acc2:	021b      	lsls	r3, r3, #8
 800acc4:	4313      	orrs	r3, r2
 800acc6:	4a05      	ldr	r2, [pc, #20]	; (800acdc <FLASH_MassErase+0x44>)
 800acc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800accc:	6113      	str	r3, [r2, #16]
}
 800acce:	bf00      	nop
 800acd0:	370c      	adds	r7, #12
 800acd2:	46bd      	mov	sp, r7
 800acd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd8:	4770      	bx	lr
 800acda:	bf00      	nop
 800acdc:	40023c00 	.word	0x40023c00

0800ace0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800ace0:	b480      	push	{r7}
 800ace2:	b085      	sub	sp, #20
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
 800ace8:	460b      	mov	r3, r1
 800acea:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800acec:	2300      	movs	r3, #0
 800acee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800acf0:	78fb      	ldrb	r3, [r7, #3]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d102      	bne.n	800acfc <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800acf6:	2300      	movs	r3, #0
 800acf8:	60fb      	str	r3, [r7, #12]
 800acfa:	e010      	b.n	800ad1e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800acfc:	78fb      	ldrb	r3, [r7, #3]
 800acfe:	2b01      	cmp	r3, #1
 800ad00:	d103      	bne.n	800ad0a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800ad02:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad06:	60fb      	str	r3, [r7, #12]
 800ad08:	e009      	b.n	800ad1e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800ad0a:	78fb      	ldrb	r3, [r7, #3]
 800ad0c:	2b02      	cmp	r3, #2
 800ad0e:	d103      	bne.n	800ad18 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800ad10:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad14:	60fb      	str	r3, [r7, #12]
 800ad16:	e002      	b.n	800ad1e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800ad18:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ad1c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800ad1e:	4b13      	ldr	r3, [pc, #76]	; (800ad6c <FLASH_Erase_Sector+0x8c>)
 800ad20:	691b      	ldr	r3, [r3, #16]
 800ad22:	4a12      	ldr	r2, [pc, #72]	; (800ad6c <FLASH_Erase_Sector+0x8c>)
 800ad24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad28:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800ad2a:	4b10      	ldr	r3, [pc, #64]	; (800ad6c <FLASH_Erase_Sector+0x8c>)
 800ad2c:	691a      	ldr	r2, [r3, #16]
 800ad2e:	490f      	ldr	r1, [pc, #60]	; (800ad6c <FLASH_Erase_Sector+0x8c>)
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	4313      	orrs	r3, r2
 800ad34:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800ad36:	4b0d      	ldr	r3, [pc, #52]	; (800ad6c <FLASH_Erase_Sector+0x8c>)
 800ad38:	691b      	ldr	r3, [r3, #16]
 800ad3a:	4a0c      	ldr	r2, [pc, #48]	; (800ad6c <FLASH_Erase_Sector+0x8c>)
 800ad3c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800ad40:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800ad42:	4b0a      	ldr	r3, [pc, #40]	; (800ad6c <FLASH_Erase_Sector+0x8c>)
 800ad44:	691a      	ldr	r2, [r3, #16]
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	00db      	lsls	r3, r3, #3
 800ad4a:	4313      	orrs	r3, r2
 800ad4c:	4a07      	ldr	r2, [pc, #28]	; (800ad6c <FLASH_Erase_Sector+0x8c>)
 800ad4e:	f043 0302 	orr.w	r3, r3, #2
 800ad52:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800ad54:	4b05      	ldr	r3, [pc, #20]	; (800ad6c <FLASH_Erase_Sector+0x8c>)
 800ad56:	691b      	ldr	r3, [r3, #16]
 800ad58:	4a04      	ldr	r2, [pc, #16]	; (800ad6c <FLASH_Erase_Sector+0x8c>)
 800ad5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ad5e:	6113      	str	r3, [r2, #16]
}
 800ad60:	bf00      	nop
 800ad62:	3714      	adds	r7, #20
 800ad64:	46bd      	mov	sp, r7
 800ad66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6a:	4770      	bx	lr
 800ad6c:	40023c00 	.word	0x40023c00

0800ad70 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800ad70:	b480      	push	{r7}
 800ad72:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 800ad74:	4b20      	ldr	r3, [pc, #128]	; (800adf8 <FLASH_FlushCaches+0x88>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d017      	beq.n	800adb0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800ad80:	4b1d      	ldr	r3, [pc, #116]	; (800adf8 <FLASH_FlushCaches+0x88>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	4a1c      	ldr	r2, [pc, #112]	; (800adf8 <FLASH_FlushCaches+0x88>)
 800ad86:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ad8a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800ad8c:	4b1a      	ldr	r3, [pc, #104]	; (800adf8 <FLASH_FlushCaches+0x88>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	4a19      	ldr	r2, [pc, #100]	; (800adf8 <FLASH_FlushCaches+0x88>)
 800ad92:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ad96:	6013      	str	r3, [r2, #0]
 800ad98:	4b17      	ldr	r3, [pc, #92]	; (800adf8 <FLASH_FlushCaches+0x88>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	4a16      	ldr	r2, [pc, #88]	; (800adf8 <FLASH_FlushCaches+0x88>)
 800ad9e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ada2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800ada4:	4b14      	ldr	r3, [pc, #80]	; (800adf8 <FLASH_FlushCaches+0x88>)
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	4a13      	ldr	r2, [pc, #76]	; (800adf8 <FLASH_FlushCaches+0x88>)
 800adaa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800adae:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800adb0:	4b11      	ldr	r3, [pc, #68]	; (800adf8 <FLASH_FlushCaches+0x88>)
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d017      	beq.n	800adec <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800adbc:	4b0e      	ldr	r3, [pc, #56]	; (800adf8 <FLASH_FlushCaches+0x88>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	4a0d      	ldr	r2, [pc, #52]	; (800adf8 <FLASH_FlushCaches+0x88>)
 800adc2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800adc6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800adc8:	4b0b      	ldr	r3, [pc, #44]	; (800adf8 <FLASH_FlushCaches+0x88>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	4a0a      	ldr	r2, [pc, #40]	; (800adf8 <FLASH_FlushCaches+0x88>)
 800adce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800add2:	6013      	str	r3, [r2, #0]
 800add4:	4b08      	ldr	r3, [pc, #32]	; (800adf8 <FLASH_FlushCaches+0x88>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	4a07      	ldr	r2, [pc, #28]	; (800adf8 <FLASH_FlushCaches+0x88>)
 800adda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800adde:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800ade0:	4b05      	ldr	r3, [pc, #20]	; (800adf8 <FLASH_FlushCaches+0x88>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	4a04      	ldr	r2, [pc, #16]	; (800adf8 <FLASH_FlushCaches+0x88>)
 800ade6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800adea:	6013      	str	r3, [r2, #0]
  }
}
 800adec:	bf00      	nop
 800adee:	46bd      	mov	sp, r7
 800adf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf4:	4770      	bx	lr
 800adf6:	bf00      	nop
 800adf8:	40023c00 	.word	0x40023c00

0800adfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800adfc:	b480      	push	{r7}
 800adfe:	b089      	sub	sp, #36	; 0x24
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800ae06:	2300      	movs	r3, #0
 800ae08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ae12:	2300      	movs	r3, #0
 800ae14:	61fb      	str	r3, [r7, #28]
 800ae16:	e165      	b.n	800b0e4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800ae18:	2201      	movs	r2, #1
 800ae1a:	69fb      	ldr	r3, [r7, #28]
 800ae1c:	fa02 f303 	lsl.w	r3, r2, r3
 800ae20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	697a      	ldr	r2, [r7, #20]
 800ae28:	4013      	ands	r3, r2
 800ae2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800ae2c:	693a      	ldr	r2, [r7, #16]
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	429a      	cmp	r2, r3
 800ae32:	f040 8154 	bne.w	800b0de <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	685b      	ldr	r3, [r3, #4]
 800ae3a:	2b02      	cmp	r3, #2
 800ae3c:	d003      	beq.n	800ae46 <HAL_GPIO_Init+0x4a>
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	685b      	ldr	r3, [r3, #4]
 800ae42:	2b12      	cmp	r3, #18
 800ae44:	d123      	bne.n	800ae8e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800ae46:	69fb      	ldr	r3, [r7, #28]
 800ae48:	08da      	lsrs	r2, r3, #3
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	3208      	adds	r2, #8
 800ae4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800ae54:	69fb      	ldr	r3, [r7, #28]
 800ae56:	f003 0307 	and.w	r3, r3, #7
 800ae5a:	009b      	lsls	r3, r3, #2
 800ae5c:	220f      	movs	r2, #15
 800ae5e:	fa02 f303 	lsl.w	r3, r2, r3
 800ae62:	43db      	mvns	r3, r3
 800ae64:	69ba      	ldr	r2, [r7, #24]
 800ae66:	4013      	ands	r3, r2
 800ae68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	691a      	ldr	r2, [r3, #16]
 800ae6e:	69fb      	ldr	r3, [r7, #28]
 800ae70:	f003 0307 	and.w	r3, r3, #7
 800ae74:	009b      	lsls	r3, r3, #2
 800ae76:	fa02 f303 	lsl.w	r3, r2, r3
 800ae7a:	69ba      	ldr	r2, [r7, #24]
 800ae7c:	4313      	orrs	r3, r2
 800ae7e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800ae80:	69fb      	ldr	r3, [r7, #28]
 800ae82:	08da      	lsrs	r2, r3, #3
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	3208      	adds	r2, #8
 800ae88:	69b9      	ldr	r1, [r7, #24]
 800ae8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800ae94:	69fb      	ldr	r3, [r7, #28]
 800ae96:	005b      	lsls	r3, r3, #1
 800ae98:	2203      	movs	r2, #3
 800ae9a:	fa02 f303 	lsl.w	r3, r2, r3
 800ae9e:	43db      	mvns	r3, r3
 800aea0:	69ba      	ldr	r2, [r7, #24]
 800aea2:	4013      	ands	r3, r2
 800aea4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	685b      	ldr	r3, [r3, #4]
 800aeaa:	f003 0203 	and.w	r2, r3, #3
 800aeae:	69fb      	ldr	r3, [r7, #28]
 800aeb0:	005b      	lsls	r3, r3, #1
 800aeb2:	fa02 f303 	lsl.w	r3, r2, r3
 800aeb6:	69ba      	ldr	r2, [r7, #24]
 800aeb8:	4313      	orrs	r3, r2
 800aeba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	69ba      	ldr	r2, [r7, #24]
 800aec0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	685b      	ldr	r3, [r3, #4]
 800aec6:	2b01      	cmp	r3, #1
 800aec8:	d00b      	beq.n	800aee2 <HAL_GPIO_Init+0xe6>
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	685b      	ldr	r3, [r3, #4]
 800aece:	2b02      	cmp	r3, #2
 800aed0:	d007      	beq.n	800aee2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800aed6:	2b11      	cmp	r3, #17
 800aed8:	d003      	beq.n	800aee2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	685b      	ldr	r3, [r3, #4]
 800aede:	2b12      	cmp	r3, #18
 800aee0:	d130      	bne.n	800af44 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	689b      	ldr	r3, [r3, #8]
 800aee6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800aee8:	69fb      	ldr	r3, [r7, #28]
 800aeea:	005b      	lsls	r3, r3, #1
 800aeec:	2203      	movs	r2, #3
 800aeee:	fa02 f303 	lsl.w	r3, r2, r3
 800aef2:	43db      	mvns	r3, r3
 800aef4:	69ba      	ldr	r2, [r7, #24]
 800aef6:	4013      	ands	r3, r2
 800aef8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	68da      	ldr	r2, [r3, #12]
 800aefe:	69fb      	ldr	r3, [r7, #28]
 800af00:	005b      	lsls	r3, r3, #1
 800af02:	fa02 f303 	lsl.w	r3, r2, r3
 800af06:	69ba      	ldr	r2, [r7, #24]
 800af08:	4313      	orrs	r3, r2
 800af0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	69ba      	ldr	r2, [r7, #24]
 800af10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	685b      	ldr	r3, [r3, #4]
 800af16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800af18:	2201      	movs	r2, #1
 800af1a:	69fb      	ldr	r3, [r7, #28]
 800af1c:	fa02 f303 	lsl.w	r3, r2, r3
 800af20:	43db      	mvns	r3, r3
 800af22:	69ba      	ldr	r2, [r7, #24]
 800af24:	4013      	ands	r3, r2
 800af26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	685b      	ldr	r3, [r3, #4]
 800af2c:	091b      	lsrs	r3, r3, #4
 800af2e:	f003 0201 	and.w	r2, r3, #1
 800af32:	69fb      	ldr	r3, [r7, #28]
 800af34:	fa02 f303 	lsl.w	r3, r2, r3
 800af38:	69ba      	ldr	r2, [r7, #24]
 800af3a:	4313      	orrs	r3, r2
 800af3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	69ba      	ldr	r2, [r7, #24]
 800af42:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	68db      	ldr	r3, [r3, #12]
 800af48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800af4a:	69fb      	ldr	r3, [r7, #28]
 800af4c:	005b      	lsls	r3, r3, #1
 800af4e:	2203      	movs	r2, #3
 800af50:	fa02 f303 	lsl.w	r3, r2, r3
 800af54:	43db      	mvns	r3, r3
 800af56:	69ba      	ldr	r2, [r7, #24]
 800af58:	4013      	ands	r3, r2
 800af5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800af5c:	683b      	ldr	r3, [r7, #0]
 800af5e:	689a      	ldr	r2, [r3, #8]
 800af60:	69fb      	ldr	r3, [r7, #28]
 800af62:	005b      	lsls	r3, r3, #1
 800af64:	fa02 f303 	lsl.w	r3, r2, r3
 800af68:	69ba      	ldr	r2, [r7, #24]
 800af6a:	4313      	orrs	r3, r2
 800af6c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	69ba      	ldr	r2, [r7, #24]
 800af72:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	685b      	ldr	r3, [r3, #4]
 800af78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	f000 80ae 	beq.w	800b0de <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800af82:	2300      	movs	r3, #0
 800af84:	60fb      	str	r3, [r7, #12]
 800af86:	4b5c      	ldr	r3, [pc, #368]	; (800b0f8 <HAL_GPIO_Init+0x2fc>)
 800af88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af8a:	4a5b      	ldr	r2, [pc, #364]	; (800b0f8 <HAL_GPIO_Init+0x2fc>)
 800af8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800af90:	6453      	str	r3, [r2, #68]	; 0x44
 800af92:	4b59      	ldr	r3, [pc, #356]	; (800b0f8 <HAL_GPIO_Init+0x2fc>)
 800af94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af9a:	60fb      	str	r3, [r7, #12]
 800af9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800af9e:	4a57      	ldr	r2, [pc, #348]	; (800b0fc <HAL_GPIO_Init+0x300>)
 800afa0:	69fb      	ldr	r3, [r7, #28]
 800afa2:	089b      	lsrs	r3, r3, #2
 800afa4:	3302      	adds	r3, #2
 800afa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800afaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800afac:	69fb      	ldr	r3, [r7, #28]
 800afae:	f003 0303 	and.w	r3, r3, #3
 800afb2:	009b      	lsls	r3, r3, #2
 800afb4:	220f      	movs	r2, #15
 800afb6:	fa02 f303 	lsl.w	r3, r2, r3
 800afba:	43db      	mvns	r3, r3
 800afbc:	69ba      	ldr	r2, [r7, #24]
 800afbe:	4013      	ands	r3, r2
 800afc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	4a4e      	ldr	r2, [pc, #312]	; (800b100 <HAL_GPIO_Init+0x304>)
 800afc6:	4293      	cmp	r3, r2
 800afc8:	d025      	beq.n	800b016 <HAL_GPIO_Init+0x21a>
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	4a4d      	ldr	r2, [pc, #308]	; (800b104 <HAL_GPIO_Init+0x308>)
 800afce:	4293      	cmp	r3, r2
 800afd0:	d01f      	beq.n	800b012 <HAL_GPIO_Init+0x216>
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	4a4c      	ldr	r2, [pc, #304]	; (800b108 <HAL_GPIO_Init+0x30c>)
 800afd6:	4293      	cmp	r3, r2
 800afd8:	d019      	beq.n	800b00e <HAL_GPIO_Init+0x212>
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	4a4b      	ldr	r2, [pc, #300]	; (800b10c <HAL_GPIO_Init+0x310>)
 800afde:	4293      	cmp	r3, r2
 800afe0:	d013      	beq.n	800b00a <HAL_GPIO_Init+0x20e>
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	4a4a      	ldr	r2, [pc, #296]	; (800b110 <HAL_GPIO_Init+0x314>)
 800afe6:	4293      	cmp	r3, r2
 800afe8:	d00d      	beq.n	800b006 <HAL_GPIO_Init+0x20a>
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	4a49      	ldr	r2, [pc, #292]	; (800b114 <HAL_GPIO_Init+0x318>)
 800afee:	4293      	cmp	r3, r2
 800aff0:	d007      	beq.n	800b002 <HAL_GPIO_Init+0x206>
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	4a48      	ldr	r2, [pc, #288]	; (800b118 <HAL_GPIO_Init+0x31c>)
 800aff6:	4293      	cmp	r3, r2
 800aff8:	d101      	bne.n	800affe <HAL_GPIO_Init+0x202>
 800affa:	2306      	movs	r3, #6
 800affc:	e00c      	b.n	800b018 <HAL_GPIO_Init+0x21c>
 800affe:	2307      	movs	r3, #7
 800b000:	e00a      	b.n	800b018 <HAL_GPIO_Init+0x21c>
 800b002:	2305      	movs	r3, #5
 800b004:	e008      	b.n	800b018 <HAL_GPIO_Init+0x21c>
 800b006:	2304      	movs	r3, #4
 800b008:	e006      	b.n	800b018 <HAL_GPIO_Init+0x21c>
 800b00a:	2303      	movs	r3, #3
 800b00c:	e004      	b.n	800b018 <HAL_GPIO_Init+0x21c>
 800b00e:	2302      	movs	r3, #2
 800b010:	e002      	b.n	800b018 <HAL_GPIO_Init+0x21c>
 800b012:	2301      	movs	r3, #1
 800b014:	e000      	b.n	800b018 <HAL_GPIO_Init+0x21c>
 800b016:	2300      	movs	r3, #0
 800b018:	69fa      	ldr	r2, [r7, #28]
 800b01a:	f002 0203 	and.w	r2, r2, #3
 800b01e:	0092      	lsls	r2, r2, #2
 800b020:	4093      	lsls	r3, r2
 800b022:	69ba      	ldr	r2, [r7, #24]
 800b024:	4313      	orrs	r3, r2
 800b026:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b028:	4934      	ldr	r1, [pc, #208]	; (800b0fc <HAL_GPIO_Init+0x300>)
 800b02a:	69fb      	ldr	r3, [r7, #28]
 800b02c:	089b      	lsrs	r3, r3, #2
 800b02e:	3302      	adds	r3, #2
 800b030:	69ba      	ldr	r2, [r7, #24]
 800b032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b036:	4b39      	ldr	r3, [pc, #228]	; (800b11c <HAL_GPIO_Init+0x320>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b03c:	693b      	ldr	r3, [r7, #16]
 800b03e:	43db      	mvns	r3, r3
 800b040:	69ba      	ldr	r2, [r7, #24]
 800b042:	4013      	ands	r3, r2
 800b044:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	685b      	ldr	r3, [r3, #4]
 800b04a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d003      	beq.n	800b05a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800b052:	69ba      	ldr	r2, [r7, #24]
 800b054:	693b      	ldr	r3, [r7, #16]
 800b056:	4313      	orrs	r3, r2
 800b058:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b05a:	4a30      	ldr	r2, [pc, #192]	; (800b11c <HAL_GPIO_Init+0x320>)
 800b05c:	69bb      	ldr	r3, [r7, #24]
 800b05e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800b060:	4b2e      	ldr	r3, [pc, #184]	; (800b11c <HAL_GPIO_Init+0x320>)
 800b062:	685b      	ldr	r3, [r3, #4]
 800b064:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b066:	693b      	ldr	r3, [r7, #16]
 800b068:	43db      	mvns	r3, r3
 800b06a:	69ba      	ldr	r2, [r7, #24]
 800b06c:	4013      	ands	r3, r2
 800b06e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	685b      	ldr	r3, [r3, #4]
 800b074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d003      	beq.n	800b084 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800b07c:	69ba      	ldr	r2, [r7, #24]
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	4313      	orrs	r3, r2
 800b082:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b084:	4a25      	ldr	r2, [pc, #148]	; (800b11c <HAL_GPIO_Init+0x320>)
 800b086:	69bb      	ldr	r3, [r7, #24]
 800b088:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b08a:	4b24      	ldr	r3, [pc, #144]	; (800b11c <HAL_GPIO_Init+0x320>)
 800b08c:	689b      	ldr	r3, [r3, #8]
 800b08e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b090:	693b      	ldr	r3, [r7, #16]
 800b092:	43db      	mvns	r3, r3
 800b094:	69ba      	ldr	r2, [r7, #24]
 800b096:	4013      	ands	r3, r2
 800b098:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	685b      	ldr	r3, [r3, #4]
 800b09e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d003      	beq.n	800b0ae <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800b0a6:	69ba      	ldr	r2, [r7, #24]
 800b0a8:	693b      	ldr	r3, [r7, #16]
 800b0aa:	4313      	orrs	r3, r2
 800b0ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b0ae:	4a1b      	ldr	r2, [pc, #108]	; (800b11c <HAL_GPIO_Init+0x320>)
 800b0b0:	69bb      	ldr	r3, [r7, #24]
 800b0b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b0b4:	4b19      	ldr	r3, [pc, #100]	; (800b11c <HAL_GPIO_Init+0x320>)
 800b0b6:	68db      	ldr	r3, [r3, #12]
 800b0b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b0ba:	693b      	ldr	r3, [r7, #16]
 800b0bc:	43db      	mvns	r3, r3
 800b0be:	69ba      	ldr	r2, [r7, #24]
 800b0c0:	4013      	ands	r3, r2
 800b0c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	685b      	ldr	r3, [r3, #4]
 800b0c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d003      	beq.n	800b0d8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800b0d0:	69ba      	ldr	r2, [r7, #24]
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	4313      	orrs	r3, r2
 800b0d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b0d8:	4a10      	ldr	r2, [pc, #64]	; (800b11c <HAL_GPIO_Init+0x320>)
 800b0da:	69bb      	ldr	r3, [r7, #24]
 800b0dc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b0de:	69fb      	ldr	r3, [r7, #28]
 800b0e0:	3301      	adds	r3, #1
 800b0e2:	61fb      	str	r3, [r7, #28]
 800b0e4:	69fb      	ldr	r3, [r7, #28]
 800b0e6:	2b0f      	cmp	r3, #15
 800b0e8:	f67f ae96 	bls.w	800ae18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b0ec:	bf00      	nop
 800b0ee:	3724      	adds	r7, #36	; 0x24
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f6:	4770      	bx	lr
 800b0f8:	40023800 	.word	0x40023800
 800b0fc:	40013800 	.word	0x40013800
 800b100:	40020000 	.word	0x40020000
 800b104:	40020400 	.word	0x40020400
 800b108:	40020800 	.word	0x40020800
 800b10c:	40020c00 	.word	0x40020c00
 800b110:	40021000 	.word	0x40021000
 800b114:	40021400 	.word	0x40021400
 800b118:	40021800 	.word	0x40021800
 800b11c:	40013c00 	.word	0x40013c00

0800b120 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b120:	b480      	push	{r7}
 800b122:	b085      	sub	sp, #20
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
 800b128:	460b      	mov	r3, r1
 800b12a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	691a      	ldr	r2, [r3, #16]
 800b130:	887b      	ldrh	r3, [r7, #2]
 800b132:	4013      	ands	r3, r2
 800b134:	2b00      	cmp	r3, #0
 800b136:	d002      	beq.n	800b13e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b138:	2301      	movs	r3, #1
 800b13a:	73fb      	strb	r3, [r7, #15]
 800b13c:	e001      	b.n	800b142 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b13e:	2300      	movs	r3, #0
 800b140:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b142:	7bfb      	ldrb	r3, [r7, #15]
}
 800b144:	4618      	mov	r0, r3
 800b146:	3714      	adds	r7, #20
 800b148:	46bd      	mov	sp, r7
 800b14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14e:	4770      	bx	lr

0800b150 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b150:	b480      	push	{r7}
 800b152:	b083      	sub	sp, #12
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
 800b158:	460b      	mov	r3, r1
 800b15a:	807b      	strh	r3, [r7, #2]
 800b15c:	4613      	mov	r3, r2
 800b15e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b160:	787b      	ldrb	r3, [r7, #1]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d003      	beq.n	800b16e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b166:	887a      	ldrh	r2, [r7, #2]
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b16c:	e003      	b.n	800b176 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b16e:	887b      	ldrh	r3, [r7, #2]
 800b170:	041a      	lsls	r2, r3, #16
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	619a      	str	r2, [r3, #24]
}
 800b176:	bf00      	nop
 800b178:	370c      	adds	r7, #12
 800b17a:	46bd      	mov	sp, r7
 800b17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b180:	4770      	bx	lr

0800b182 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b182:	b480      	push	{r7}
 800b184:	b083      	sub	sp, #12
 800b186:	af00      	add	r7, sp, #0
 800b188:	6078      	str	r0, [r7, #4]
 800b18a:	460b      	mov	r3, r1
 800b18c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	695a      	ldr	r2, [r3, #20]
 800b192:	887b      	ldrh	r3, [r7, #2]
 800b194:	401a      	ands	r2, r3
 800b196:	887b      	ldrh	r3, [r7, #2]
 800b198:	429a      	cmp	r2, r3
 800b19a:	d104      	bne.n	800b1a6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b19c:	887b      	ldrh	r3, [r7, #2]
 800b19e:	041a      	lsls	r2, r3, #16
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800b1a4:	e002      	b.n	800b1ac <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800b1a6:	887a      	ldrh	r2, [r7, #2]
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	619a      	str	r2, [r3, #24]
}
 800b1ac:	bf00      	nop
 800b1ae:	370c      	adds	r7, #12
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b6:	4770      	bx	lr

0800b1b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b084      	sub	sp, #16
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
 800b1c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d101      	bne.n	800b1cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	e0ca      	b.n	800b362 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b1cc:	4b67      	ldr	r3, [pc, #412]	; (800b36c <HAL_RCC_ClockConfig+0x1b4>)
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	f003 030f 	and.w	r3, r3, #15
 800b1d4:	683a      	ldr	r2, [r7, #0]
 800b1d6:	429a      	cmp	r2, r3
 800b1d8:	d90c      	bls.n	800b1f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b1da:	4b64      	ldr	r3, [pc, #400]	; (800b36c <HAL_RCC_ClockConfig+0x1b4>)
 800b1dc:	683a      	ldr	r2, [r7, #0]
 800b1de:	b2d2      	uxtb	r2, r2
 800b1e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b1e2:	4b62      	ldr	r3, [pc, #392]	; (800b36c <HAL_RCC_ClockConfig+0x1b4>)
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f003 030f 	and.w	r3, r3, #15
 800b1ea:	683a      	ldr	r2, [r7, #0]
 800b1ec:	429a      	cmp	r2, r3
 800b1ee:	d001      	beq.n	800b1f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b1f0:	2301      	movs	r3, #1
 800b1f2:	e0b6      	b.n	800b362 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	f003 0302 	and.w	r3, r3, #2
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d020      	beq.n	800b242 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f003 0304 	and.w	r3, r3, #4
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d005      	beq.n	800b218 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b20c:	4b58      	ldr	r3, [pc, #352]	; (800b370 <HAL_RCC_ClockConfig+0x1b8>)
 800b20e:	689b      	ldr	r3, [r3, #8]
 800b210:	4a57      	ldr	r2, [pc, #348]	; (800b370 <HAL_RCC_ClockConfig+0x1b8>)
 800b212:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b216:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	f003 0308 	and.w	r3, r3, #8
 800b220:	2b00      	cmp	r3, #0
 800b222:	d005      	beq.n	800b230 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b224:	4b52      	ldr	r3, [pc, #328]	; (800b370 <HAL_RCC_ClockConfig+0x1b8>)
 800b226:	689b      	ldr	r3, [r3, #8]
 800b228:	4a51      	ldr	r2, [pc, #324]	; (800b370 <HAL_RCC_ClockConfig+0x1b8>)
 800b22a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b22e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b230:	4b4f      	ldr	r3, [pc, #316]	; (800b370 <HAL_RCC_ClockConfig+0x1b8>)
 800b232:	689b      	ldr	r3, [r3, #8]
 800b234:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	689b      	ldr	r3, [r3, #8]
 800b23c:	494c      	ldr	r1, [pc, #304]	; (800b370 <HAL_RCC_ClockConfig+0x1b8>)
 800b23e:	4313      	orrs	r3, r2
 800b240:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	f003 0301 	and.w	r3, r3, #1
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d044      	beq.n	800b2d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	685b      	ldr	r3, [r3, #4]
 800b252:	2b01      	cmp	r3, #1
 800b254:	d107      	bne.n	800b266 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b256:	4b46      	ldr	r3, [pc, #280]	; (800b370 <HAL_RCC_ClockConfig+0x1b8>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d119      	bne.n	800b296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b262:	2301      	movs	r3, #1
 800b264:	e07d      	b.n	800b362 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	685b      	ldr	r3, [r3, #4]
 800b26a:	2b02      	cmp	r3, #2
 800b26c:	d003      	beq.n	800b276 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b272:	2b03      	cmp	r3, #3
 800b274:	d107      	bne.n	800b286 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b276:	4b3e      	ldr	r3, [pc, #248]	; (800b370 <HAL_RCC_ClockConfig+0x1b8>)
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d109      	bne.n	800b296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b282:	2301      	movs	r3, #1
 800b284:	e06d      	b.n	800b362 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b286:	4b3a      	ldr	r3, [pc, #232]	; (800b370 <HAL_RCC_ClockConfig+0x1b8>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f003 0302 	and.w	r3, r3, #2
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d101      	bne.n	800b296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b292:	2301      	movs	r3, #1
 800b294:	e065      	b.n	800b362 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b296:	4b36      	ldr	r3, [pc, #216]	; (800b370 <HAL_RCC_ClockConfig+0x1b8>)
 800b298:	689b      	ldr	r3, [r3, #8]
 800b29a:	f023 0203 	bic.w	r2, r3, #3
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	685b      	ldr	r3, [r3, #4]
 800b2a2:	4933      	ldr	r1, [pc, #204]	; (800b370 <HAL_RCC_ClockConfig+0x1b8>)
 800b2a4:	4313      	orrs	r3, r2
 800b2a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b2a8:	f7fd fdce 	bl	8008e48 <HAL_GetTick>
 800b2ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b2ae:	e00a      	b.n	800b2c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b2b0:	f7fd fdca 	bl	8008e48 <HAL_GetTick>
 800b2b4:	4602      	mov	r2, r0
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	1ad3      	subs	r3, r2, r3
 800b2ba:	f241 3288 	movw	r2, #5000	; 0x1388
 800b2be:	4293      	cmp	r3, r2
 800b2c0:	d901      	bls.n	800b2c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b2c2:	2303      	movs	r3, #3
 800b2c4:	e04d      	b.n	800b362 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b2c6:	4b2a      	ldr	r3, [pc, #168]	; (800b370 <HAL_RCC_ClockConfig+0x1b8>)
 800b2c8:	689b      	ldr	r3, [r3, #8]
 800b2ca:	f003 020c 	and.w	r2, r3, #12
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	685b      	ldr	r3, [r3, #4]
 800b2d2:	009b      	lsls	r3, r3, #2
 800b2d4:	429a      	cmp	r2, r3
 800b2d6:	d1eb      	bne.n	800b2b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b2d8:	4b24      	ldr	r3, [pc, #144]	; (800b36c <HAL_RCC_ClockConfig+0x1b4>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	f003 030f 	and.w	r3, r3, #15
 800b2e0:	683a      	ldr	r2, [r7, #0]
 800b2e2:	429a      	cmp	r2, r3
 800b2e4:	d20c      	bcs.n	800b300 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b2e6:	4b21      	ldr	r3, [pc, #132]	; (800b36c <HAL_RCC_ClockConfig+0x1b4>)
 800b2e8:	683a      	ldr	r2, [r7, #0]
 800b2ea:	b2d2      	uxtb	r2, r2
 800b2ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b2ee:	4b1f      	ldr	r3, [pc, #124]	; (800b36c <HAL_RCC_ClockConfig+0x1b4>)
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	f003 030f 	and.w	r3, r3, #15
 800b2f6:	683a      	ldr	r2, [r7, #0]
 800b2f8:	429a      	cmp	r2, r3
 800b2fa:	d001      	beq.n	800b300 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b2fc:	2301      	movs	r3, #1
 800b2fe:	e030      	b.n	800b362 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	f003 0304 	and.w	r3, r3, #4
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d008      	beq.n	800b31e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b30c:	4b18      	ldr	r3, [pc, #96]	; (800b370 <HAL_RCC_ClockConfig+0x1b8>)
 800b30e:	689b      	ldr	r3, [r3, #8]
 800b310:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	68db      	ldr	r3, [r3, #12]
 800b318:	4915      	ldr	r1, [pc, #84]	; (800b370 <HAL_RCC_ClockConfig+0x1b8>)
 800b31a:	4313      	orrs	r3, r2
 800b31c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	f003 0308 	and.w	r3, r3, #8
 800b326:	2b00      	cmp	r3, #0
 800b328:	d009      	beq.n	800b33e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b32a:	4b11      	ldr	r3, [pc, #68]	; (800b370 <HAL_RCC_ClockConfig+0x1b8>)
 800b32c:	689b      	ldr	r3, [r3, #8]
 800b32e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	691b      	ldr	r3, [r3, #16]
 800b336:	00db      	lsls	r3, r3, #3
 800b338:	490d      	ldr	r1, [pc, #52]	; (800b370 <HAL_RCC_ClockConfig+0x1b8>)
 800b33a:	4313      	orrs	r3, r2
 800b33c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b33e:	f000 f851 	bl	800b3e4 <HAL_RCC_GetSysClockFreq>
 800b342:	4601      	mov	r1, r0
 800b344:	4b0a      	ldr	r3, [pc, #40]	; (800b370 <HAL_RCC_ClockConfig+0x1b8>)
 800b346:	689b      	ldr	r3, [r3, #8]
 800b348:	091b      	lsrs	r3, r3, #4
 800b34a:	f003 030f 	and.w	r3, r3, #15
 800b34e:	4a09      	ldr	r2, [pc, #36]	; (800b374 <HAL_RCC_ClockConfig+0x1bc>)
 800b350:	5cd3      	ldrb	r3, [r2, r3]
 800b352:	fa21 f303 	lsr.w	r3, r1, r3
 800b356:	4a08      	ldr	r2, [pc, #32]	; (800b378 <HAL_RCC_ClockConfig+0x1c0>)
 800b358:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800b35a:	2000      	movs	r0, #0
 800b35c:	f7fd fd30 	bl	8008dc0 <HAL_InitTick>

  return HAL_OK;
 800b360:	2300      	movs	r3, #0
}
 800b362:	4618      	mov	r0, r3
 800b364:	3710      	adds	r7, #16
 800b366:	46bd      	mov	sp, r7
 800b368:	bd80      	pop	{r7, pc}
 800b36a:	bf00      	nop
 800b36c:	40023c00 	.word	0x40023c00
 800b370:	40023800 	.word	0x40023800
 800b374:	080269c8 	.word	0x080269c8
 800b378:	20000038 	.word	0x20000038

0800b37c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b37c:	b480      	push	{r7}
 800b37e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b380:	4b03      	ldr	r3, [pc, #12]	; (800b390 <HAL_RCC_GetHCLKFreq+0x14>)
 800b382:	681b      	ldr	r3, [r3, #0]
}
 800b384:	4618      	mov	r0, r3
 800b386:	46bd      	mov	sp, r7
 800b388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38c:	4770      	bx	lr
 800b38e:	bf00      	nop
 800b390:	20000038 	.word	0x20000038

0800b394 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b398:	f7ff fff0 	bl	800b37c <HAL_RCC_GetHCLKFreq>
 800b39c:	4601      	mov	r1, r0
 800b39e:	4b05      	ldr	r3, [pc, #20]	; (800b3b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b3a0:	689b      	ldr	r3, [r3, #8]
 800b3a2:	0a9b      	lsrs	r3, r3, #10
 800b3a4:	f003 0307 	and.w	r3, r3, #7
 800b3a8:	4a03      	ldr	r2, [pc, #12]	; (800b3b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b3aa:	5cd3      	ldrb	r3, [r2, r3]
 800b3ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	bd80      	pop	{r7, pc}
 800b3b4:	40023800 	.word	0x40023800
 800b3b8:	080269d8 	.word	0x080269d8

0800b3bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b3c0:	f7ff ffdc 	bl	800b37c <HAL_RCC_GetHCLKFreq>
 800b3c4:	4601      	mov	r1, r0
 800b3c6:	4b05      	ldr	r3, [pc, #20]	; (800b3dc <HAL_RCC_GetPCLK2Freq+0x20>)
 800b3c8:	689b      	ldr	r3, [r3, #8]
 800b3ca:	0b5b      	lsrs	r3, r3, #13
 800b3cc:	f003 0307 	and.w	r3, r3, #7
 800b3d0:	4a03      	ldr	r2, [pc, #12]	; (800b3e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b3d2:	5cd3      	ldrb	r3, [r2, r3]
 800b3d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	bd80      	pop	{r7, pc}
 800b3dc:	40023800 	.word	0x40023800
 800b3e0:	080269d8 	.word	0x080269d8

0800b3e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b3e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3e6:	b087      	sub	sp, #28
 800b3e8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b3fe:	4bc6      	ldr	r3, [pc, #792]	; (800b718 <HAL_RCC_GetSysClockFreq+0x334>)
 800b400:	689b      	ldr	r3, [r3, #8]
 800b402:	f003 030c 	and.w	r3, r3, #12
 800b406:	2b0c      	cmp	r3, #12
 800b408:	f200 817e 	bhi.w	800b708 <HAL_RCC_GetSysClockFreq+0x324>
 800b40c:	a201      	add	r2, pc, #4	; (adr r2, 800b414 <HAL_RCC_GetSysClockFreq+0x30>)
 800b40e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b412:	bf00      	nop
 800b414:	0800b449 	.word	0x0800b449
 800b418:	0800b709 	.word	0x0800b709
 800b41c:	0800b709 	.word	0x0800b709
 800b420:	0800b709 	.word	0x0800b709
 800b424:	0800b44f 	.word	0x0800b44f
 800b428:	0800b709 	.word	0x0800b709
 800b42c:	0800b709 	.word	0x0800b709
 800b430:	0800b709 	.word	0x0800b709
 800b434:	0800b455 	.word	0x0800b455
 800b438:	0800b709 	.word	0x0800b709
 800b43c:	0800b709 	.word	0x0800b709
 800b440:	0800b709 	.word	0x0800b709
 800b444:	0800b5b1 	.word	0x0800b5b1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b448:	4bb4      	ldr	r3, [pc, #720]	; (800b71c <HAL_RCC_GetSysClockFreq+0x338>)
 800b44a:	613b      	str	r3, [r7, #16]
       break;
 800b44c:	e15f      	b.n	800b70e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b44e:	4bb4      	ldr	r3, [pc, #720]	; (800b720 <HAL_RCC_GetSysClockFreq+0x33c>)
 800b450:	613b      	str	r3, [r7, #16]
      break;
 800b452:	e15c      	b.n	800b70e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b454:	4bb0      	ldr	r3, [pc, #704]	; (800b718 <HAL_RCC_GetSysClockFreq+0x334>)
 800b456:	685b      	ldr	r3, [r3, #4]
 800b458:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b45c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b45e:	4bae      	ldr	r3, [pc, #696]	; (800b718 <HAL_RCC_GetSysClockFreq+0x334>)
 800b460:	685b      	ldr	r3, [r3, #4]
 800b462:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b466:	2b00      	cmp	r3, #0
 800b468:	d04a      	beq.n	800b500 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b46a:	4bab      	ldr	r3, [pc, #684]	; (800b718 <HAL_RCC_GetSysClockFreq+0x334>)
 800b46c:	685b      	ldr	r3, [r3, #4]
 800b46e:	099b      	lsrs	r3, r3, #6
 800b470:	f04f 0400 	mov.w	r4, #0
 800b474:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b478:	f04f 0200 	mov.w	r2, #0
 800b47c:	ea03 0501 	and.w	r5, r3, r1
 800b480:	ea04 0602 	and.w	r6, r4, r2
 800b484:	4629      	mov	r1, r5
 800b486:	4632      	mov	r2, r6
 800b488:	f04f 0300 	mov.w	r3, #0
 800b48c:	f04f 0400 	mov.w	r4, #0
 800b490:	0154      	lsls	r4, r2, #5
 800b492:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b496:	014b      	lsls	r3, r1, #5
 800b498:	4619      	mov	r1, r3
 800b49a:	4622      	mov	r2, r4
 800b49c:	1b49      	subs	r1, r1, r5
 800b49e:	eb62 0206 	sbc.w	r2, r2, r6
 800b4a2:	f04f 0300 	mov.w	r3, #0
 800b4a6:	f04f 0400 	mov.w	r4, #0
 800b4aa:	0194      	lsls	r4, r2, #6
 800b4ac:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b4b0:	018b      	lsls	r3, r1, #6
 800b4b2:	1a5b      	subs	r3, r3, r1
 800b4b4:	eb64 0402 	sbc.w	r4, r4, r2
 800b4b8:	f04f 0100 	mov.w	r1, #0
 800b4bc:	f04f 0200 	mov.w	r2, #0
 800b4c0:	00e2      	lsls	r2, r4, #3
 800b4c2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b4c6:	00d9      	lsls	r1, r3, #3
 800b4c8:	460b      	mov	r3, r1
 800b4ca:	4614      	mov	r4, r2
 800b4cc:	195b      	adds	r3, r3, r5
 800b4ce:	eb44 0406 	adc.w	r4, r4, r6
 800b4d2:	f04f 0100 	mov.w	r1, #0
 800b4d6:	f04f 0200 	mov.w	r2, #0
 800b4da:	0262      	lsls	r2, r4, #9
 800b4dc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800b4e0:	0259      	lsls	r1, r3, #9
 800b4e2:	460b      	mov	r3, r1
 800b4e4:	4614      	mov	r4, r2
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	4621      	mov	r1, r4
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	f04f 0400 	mov.w	r4, #0
 800b4f0:	461a      	mov	r2, r3
 800b4f2:	4623      	mov	r3, r4
 800b4f4:	f7fd fac2 	bl	8008a7c <__aeabi_uldivmod>
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	460c      	mov	r4, r1
 800b4fc:	617b      	str	r3, [r7, #20]
 800b4fe:	e049      	b.n	800b594 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b500:	4b85      	ldr	r3, [pc, #532]	; (800b718 <HAL_RCC_GetSysClockFreq+0x334>)
 800b502:	685b      	ldr	r3, [r3, #4]
 800b504:	099b      	lsrs	r3, r3, #6
 800b506:	f04f 0400 	mov.w	r4, #0
 800b50a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b50e:	f04f 0200 	mov.w	r2, #0
 800b512:	ea03 0501 	and.w	r5, r3, r1
 800b516:	ea04 0602 	and.w	r6, r4, r2
 800b51a:	4629      	mov	r1, r5
 800b51c:	4632      	mov	r2, r6
 800b51e:	f04f 0300 	mov.w	r3, #0
 800b522:	f04f 0400 	mov.w	r4, #0
 800b526:	0154      	lsls	r4, r2, #5
 800b528:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b52c:	014b      	lsls	r3, r1, #5
 800b52e:	4619      	mov	r1, r3
 800b530:	4622      	mov	r2, r4
 800b532:	1b49      	subs	r1, r1, r5
 800b534:	eb62 0206 	sbc.w	r2, r2, r6
 800b538:	f04f 0300 	mov.w	r3, #0
 800b53c:	f04f 0400 	mov.w	r4, #0
 800b540:	0194      	lsls	r4, r2, #6
 800b542:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b546:	018b      	lsls	r3, r1, #6
 800b548:	1a5b      	subs	r3, r3, r1
 800b54a:	eb64 0402 	sbc.w	r4, r4, r2
 800b54e:	f04f 0100 	mov.w	r1, #0
 800b552:	f04f 0200 	mov.w	r2, #0
 800b556:	00e2      	lsls	r2, r4, #3
 800b558:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b55c:	00d9      	lsls	r1, r3, #3
 800b55e:	460b      	mov	r3, r1
 800b560:	4614      	mov	r4, r2
 800b562:	195b      	adds	r3, r3, r5
 800b564:	eb44 0406 	adc.w	r4, r4, r6
 800b568:	f04f 0100 	mov.w	r1, #0
 800b56c:	f04f 0200 	mov.w	r2, #0
 800b570:	02a2      	lsls	r2, r4, #10
 800b572:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800b576:	0299      	lsls	r1, r3, #10
 800b578:	460b      	mov	r3, r1
 800b57a:	4614      	mov	r4, r2
 800b57c:	4618      	mov	r0, r3
 800b57e:	4621      	mov	r1, r4
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	f04f 0400 	mov.w	r4, #0
 800b586:	461a      	mov	r2, r3
 800b588:	4623      	mov	r3, r4
 800b58a:	f7fd fa77 	bl	8008a7c <__aeabi_uldivmod>
 800b58e:	4603      	mov	r3, r0
 800b590:	460c      	mov	r4, r1
 800b592:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b594:	4b60      	ldr	r3, [pc, #384]	; (800b718 <HAL_RCC_GetSysClockFreq+0x334>)
 800b596:	685b      	ldr	r3, [r3, #4]
 800b598:	0c1b      	lsrs	r3, r3, #16
 800b59a:	f003 0303 	and.w	r3, r3, #3
 800b59e:	3301      	adds	r3, #1
 800b5a0:	005b      	lsls	r3, r3, #1
 800b5a2:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800b5a4:	697a      	ldr	r2, [r7, #20]
 800b5a6:	68bb      	ldr	r3, [r7, #8]
 800b5a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5ac:	613b      	str	r3, [r7, #16]
      break;
 800b5ae:	e0ae      	b.n	800b70e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b5b0:	4b59      	ldr	r3, [pc, #356]	; (800b718 <HAL_RCC_GetSysClockFreq+0x334>)
 800b5b2:	685b      	ldr	r3, [r3, #4]
 800b5b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b5b8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b5ba:	4b57      	ldr	r3, [pc, #348]	; (800b718 <HAL_RCC_GetSysClockFreq+0x334>)
 800b5bc:	685b      	ldr	r3, [r3, #4]
 800b5be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d04a      	beq.n	800b65c <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b5c6:	4b54      	ldr	r3, [pc, #336]	; (800b718 <HAL_RCC_GetSysClockFreq+0x334>)
 800b5c8:	685b      	ldr	r3, [r3, #4]
 800b5ca:	099b      	lsrs	r3, r3, #6
 800b5cc:	f04f 0400 	mov.w	r4, #0
 800b5d0:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b5d4:	f04f 0200 	mov.w	r2, #0
 800b5d8:	ea03 0501 	and.w	r5, r3, r1
 800b5dc:	ea04 0602 	and.w	r6, r4, r2
 800b5e0:	4629      	mov	r1, r5
 800b5e2:	4632      	mov	r2, r6
 800b5e4:	f04f 0300 	mov.w	r3, #0
 800b5e8:	f04f 0400 	mov.w	r4, #0
 800b5ec:	0154      	lsls	r4, r2, #5
 800b5ee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b5f2:	014b      	lsls	r3, r1, #5
 800b5f4:	4619      	mov	r1, r3
 800b5f6:	4622      	mov	r2, r4
 800b5f8:	1b49      	subs	r1, r1, r5
 800b5fa:	eb62 0206 	sbc.w	r2, r2, r6
 800b5fe:	f04f 0300 	mov.w	r3, #0
 800b602:	f04f 0400 	mov.w	r4, #0
 800b606:	0194      	lsls	r4, r2, #6
 800b608:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b60c:	018b      	lsls	r3, r1, #6
 800b60e:	1a5b      	subs	r3, r3, r1
 800b610:	eb64 0402 	sbc.w	r4, r4, r2
 800b614:	f04f 0100 	mov.w	r1, #0
 800b618:	f04f 0200 	mov.w	r2, #0
 800b61c:	00e2      	lsls	r2, r4, #3
 800b61e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b622:	00d9      	lsls	r1, r3, #3
 800b624:	460b      	mov	r3, r1
 800b626:	4614      	mov	r4, r2
 800b628:	195b      	adds	r3, r3, r5
 800b62a:	eb44 0406 	adc.w	r4, r4, r6
 800b62e:	f04f 0100 	mov.w	r1, #0
 800b632:	f04f 0200 	mov.w	r2, #0
 800b636:	0262      	lsls	r2, r4, #9
 800b638:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800b63c:	0259      	lsls	r1, r3, #9
 800b63e:	460b      	mov	r3, r1
 800b640:	4614      	mov	r4, r2
 800b642:	4618      	mov	r0, r3
 800b644:	4621      	mov	r1, r4
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	f04f 0400 	mov.w	r4, #0
 800b64c:	461a      	mov	r2, r3
 800b64e:	4623      	mov	r3, r4
 800b650:	f7fd fa14 	bl	8008a7c <__aeabi_uldivmod>
 800b654:	4603      	mov	r3, r0
 800b656:	460c      	mov	r4, r1
 800b658:	617b      	str	r3, [r7, #20]
 800b65a:	e049      	b.n	800b6f0 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b65c:	4b2e      	ldr	r3, [pc, #184]	; (800b718 <HAL_RCC_GetSysClockFreq+0x334>)
 800b65e:	685b      	ldr	r3, [r3, #4]
 800b660:	099b      	lsrs	r3, r3, #6
 800b662:	f04f 0400 	mov.w	r4, #0
 800b666:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b66a:	f04f 0200 	mov.w	r2, #0
 800b66e:	ea03 0501 	and.w	r5, r3, r1
 800b672:	ea04 0602 	and.w	r6, r4, r2
 800b676:	4629      	mov	r1, r5
 800b678:	4632      	mov	r2, r6
 800b67a:	f04f 0300 	mov.w	r3, #0
 800b67e:	f04f 0400 	mov.w	r4, #0
 800b682:	0154      	lsls	r4, r2, #5
 800b684:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b688:	014b      	lsls	r3, r1, #5
 800b68a:	4619      	mov	r1, r3
 800b68c:	4622      	mov	r2, r4
 800b68e:	1b49      	subs	r1, r1, r5
 800b690:	eb62 0206 	sbc.w	r2, r2, r6
 800b694:	f04f 0300 	mov.w	r3, #0
 800b698:	f04f 0400 	mov.w	r4, #0
 800b69c:	0194      	lsls	r4, r2, #6
 800b69e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b6a2:	018b      	lsls	r3, r1, #6
 800b6a4:	1a5b      	subs	r3, r3, r1
 800b6a6:	eb64 0402 	sbc.w	r4, r4, r2
 800b6aa:	f04f 0100 	mov.w	r1, #0
 800b6ae:	f04f 0200 	mov.w	r2, #0
 800b6b2:	00e2      	lsls	r2, r4, #3
 800b6b4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b6b8:	00d9      	lsls	r1, r3, #3
 800b6ba:	460b      	mov	r3, r1
 800b6bc:	4614      	mov	r4, r2
 800b6be:	195b      	adds	r3, r3, r5
 800b6c0:	eb44 0406 	adc.w	r4, r4, r6
 800b6c4:	f04f 0100 	mov.w	r1, #0
 800b6c8:	f04f 0200 	mov.w	r2, #0
 800b6cc:	02a2      	lsls	r2, r4, #10
 800b6ce:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800b6d2:	0299      	lsls	r1, r3, #10
 800b6d4:	460b      	mov	r3, r1
 800b6d6:	4614      	mov	r4, r2
 800b6d8:	4618      	mov	r0, r3
 800b6da:	4621      	mov	r1, r4
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	f04f 0400 	mov.w	r4, #0
 800b6e2:	461a      	mov	r2, r3
 800b6e4:	4623      	mov	r3, r4
 800b6e6:	f7fd f9c9 	bl	8008a7c <__aeabi_uldivmod>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	460c      	mov	r4, r1
 800b6ee:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800b6f0:	4b09      	ldr	r3, [pc, #36]	; (800b718 <HAL_RCC_GetSysClockFreq+0x334>)
 800b6f2:	685b      	ldr	r3, [r3, #4]
 800b6f4:	0f1b      	lsrs	r3, r3, #28
 800b6f6:	f003 0307 	and.w	r3, r3, #7
 800b6fa:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 800b6fc:	697a      	ldr	r2, [r7, #20]
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	fbb2 f3f3 	udiv	r3, r2, r3
 800b704:	613b      	str	r3, [r7, #16]
      break;
 800b706:	e002      	b.n	800b70e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b708:	4b04      	ldr	r3, [pc, #16]	; (800b71c <HAL_RCC_GetSysClockFreq+0x338>)
 800b70a:	613b      	str	r3, [r7, #16]
      break;
 800b70c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b70e:	693b      	ldr	r3, [r7, #16]
}
 800b710:	4618      	mov	r0, r3
 800b712:	371c      	adds	r7, #28
 800b714:	46bd      	mov	sp, r7
 800b716:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b718:	40023800 	.word	0x40023800
 800b71c:	00f42400 	.word	0x00f42400
 800b720:	007a1200 	.word	0x007a1200

0800b724 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b086      	sub	sp, #24
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b72c:	2300      	movs	r3, #0
 800b72e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	f003 0301 	and.w	r3, r3, #1
 800b738:	2b00      	cmp	r3, #0
 800b73a:	f000 8083 	beq.w	800b844 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b73e:	4b95      	ldr	r3, [pc, #596]	; (800b994 <HAL_RCC_OscConfig+0x270>)
 800b740:	689b      	ldr	r3, [r3, #8]
 800b742:	f003 030c 	and.w	r3, r3, #12
 800b746:	2b04      	cmp	r3, #4
 800b748:	d019      	beq.n	800b77e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b74a:	4b92      	ldr	r3, [pc, #584]	; (800b994 <HAL_RCC_OscConfig+0x270>)
 800b74c:	689b      	ldr	r3, [r3, #8]
 800b74e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b752:	2b08      	cmp	r3, #8
 800b754:	d106      	bne.n	800b764 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b756:	4b8f      	ldr	r3, [pc, #572]	; (800b994 <HAL_RCC_OscConfig+0x270>)
 800b758:	685b      	ldr	r3, [r3, #4]
 800b75a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b75e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b762:	d00c      	beq.n	800b77e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b764:	4b8b      	ldr	r3, [pc, #556]	; (800b994 <HAL_RCC_OscConfig+0x270>)
 800b766:	689b      	ldr	r3, [r3, #8]
 800b768:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b76c:	2b0c      	cmp	r3, #12
 800b76e:	d112      	bne.n	800b796 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b770:	4b88      	ldr	r3, [pc, #544]	; (800b994 <HAL_RCC_OscConfig+0x270>)
 800b772:	685b      	ldr	r3, [r3, #4]
 800b774:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b778:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b77c:	d10b      	bne.n	800b796 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b77e:	4b85      	ldr	r3, [pc, #532]	; (800b994 <HAL_RCC_OscConfig+0x270>)
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b786:	2b00      	cmp	r3, #0
 800b788:	d05b      	beq.n	800b842 <HAL_RCC_OscConfig+0x11e>
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	685b      	ldr	r3, [r3, #4]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d157      	bne.n	800b842 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800b792:	2301      	movs	r3, #1
 800b794:	e216      	b.n	800bbc4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	685b      	ldr	r3, [r3, #4]
 800b79a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b79e:	d106      	bne.n	800b7ae <HAL_RCC_OscConfig+0x8a>
 800b7a0:	4b7c      	ldr	r3, [pc, #496]	; (800b994 <HAL_RCC_OscConfig+0x270>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	4a7b      	ldr	r2, [pc, #492]	; (800b994 <HAL_RCC_OscConfig+0x270>)
 800b7a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b7aa:	6013      	str	r3, [r2, #0]
 800b7ac:	e01d      	b.n	800b7ea <HAL_RCC_OscConfig+0xc6>
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	685b      	ldr	r3, [r3, #4]
 800b7b2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b7b6:	d10c      	bne.n	800b7d2 <HAL_RCC_OscConfig+0xae>
 800b7b8:	4b76      	ldr	r3, [pc, #472]	; (800b994 <HAL_RCC_OscConfig+0x270>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	4a75      	ldr	r2, [pc, #468]	; (800b994 <HAL_RCC_OscConfig+0x270>)
 800b7be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b7c2:	6013      	str	r3, [r2, #0]
 800b7c4:	4b73      	ldr	r3, [pc, #460]	; (800b994 <HAL_RCC_OscConfig+0x270>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	4a72      	ldr	r2, [pc, #456]	; (800b994 <HAL_RCC_OscConfig+0x270>)
 800b7ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b7ce:	6013      	str	r3, [r2, #0]
 800b7d0:	e00b      	b.n	800b7ea <HAL_RCC_OscConfig+0xc6>
 800b7d2:	4b70      	ldr	r3, [pc, #448]	; (800b994 <HAL_RCC_OscConfig+0x270>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	4a6f      	ldr	r2, [pc, #444]	; (800b994 <HAL_RCC_OscConfig+0x270>)
 800b7d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b7dc:	6013      	str	r3, [r2, #0]
 800b7de:	4b6d      	ldr	r3, [pc, #436]	; (800b994 <HAL_RCC_OscConfig+0x270>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	4a6c      	ldr	r2, [pc, #432]	; (800b994 <HAL_RCC_OscConfig+0x270>)
 800b7e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b7e8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	685b      	ldr	r3, [r3, #4]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d013      	beq.n	800b81a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7f2:	f7fd fb29 	bl	8008e48 <HAL_GetTick>
 800b7f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b7f8:	e008      	b.n	800b80c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b7fa:	f7fd fb25 	bl	8008e48 <HAL_GetTick>
 800b7fe:	4602      	mov	r2, r0
 800b800:	693b      	ldr	r3, [r7, #16]
 800b802:	1ad3      	subs	r3, r2, r3
 800b804:	2b64      	cmp	r3, #100	; 0x64
 800b806:	d901      	bls.n	800b80c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800b808:	2303      	movs	r3, #3
 800b80a:	e1db      	b.n	800bbc4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b80c:	4b61      	ldr	r3, [pc, #388]	; (800b994 <HAL_RCC_OscConfig+0x270>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b814:	2b00      	cmp	r3, #0
 800b816:	d0f0      	beq.n	800b7fa <HAL_RCC_OscConfig+0xd6>
 800b818:	e014      	b.n	800b844 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b81a:	f7fd fb15 	bl	8008e48 <HAL_GetTick>
 800b81e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b820:	e008      	b.n	800b834 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b822:	f7fd fb11 	bl	8008e48 <HAL_GetTick>
 800b826:	4602      	mov	r2, r0
 800b828:	693b      	ldr	r3, [r7, #16]
 800b82a:	1ad3      	subs	r3, r2, r3
 800b82c:	2b64      	cmp	r3, #100	; 0x64
 800b82e:	d901      	bls.n	800b834 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 800b830:	2303      	movs	r3, #3
 800b832:	e1c7      	b.n	800bbc4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b834:	4b57      	ldr	r3, [pc, #348]	; (800b994 <HAL_RCC_OscConfig+0x270>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d1f0      	bne.n	800b822 <HAL_RCC_OscConfig+0xfe>
 800b840:	e000      	b.n	800b844 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b842:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	f003 0302 	and.w	r3, r3, #2
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d06f      	beq.n	800b930 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800b850:	4b50      	ldr	r3, [pc, #320]	; (800b994 <HAL_RCC_OscConfig+0x270>)
 800b852:	689b      	ldr	r3, [r3, #8]
 800b854:	f003 030c 	and.w	r3, r3, #12
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d017      	beq.n	800b88c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800b85c:	4b4d      	ldr	r3, [pc, #308]	; (800b994 <HAL_RCC_OscConfig+0x270>)
 800b85e:	689b      	ldr	r3, [r3, #8]
 800b860:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800b864:	2b08      	cmp	r3, #8
 800b866:	d105      	bne.n	800b874 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800b868:	4b4a      	ldr	r3, [pc, #296]	; (800b994 <HAL_RCC_OscConfig+0x270>)
 800b86a:	685b      	ldr	r3, [r3, #4]
 800b86c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b870:	2b00      	cmp	r3, #0
 800b872:	d00b      	beq.n	800b88c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b874:	4b47      	ldr	r3, [pc, #284]	; (800b994 <HAL_RCC_OscConfig+0x270>)
 800b876:	689b      	ldr	r3, [r3, #8]
 800b878:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800b87c:	2b0c      	cmp	r3, #12
 800b87e:	d11c      	bne.n	800b8ba <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b880:	4b44      	ldr	r3, [pc, #272]	; (800b994 <HAL_RCC_OscConfig+0x270>)
 800b882:	685b      	ldr	r3, [r3, #4]
 800b884:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d116      	bne.n	800b8ba <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b88c:	4b41      	ldr	r3, [pc, #260]	; (800b994 <HAL_RCC_OscConfig+0x270>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	f003 0302 	and.w	r3, r3, #2
 800b894:	2b00      	cmp	r3, #0
 800b896:	d005      	beq.n	800b8a4 <HAL_RCC_OscConfig+0x180>
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	68db      	ldr	r3, [r3, #12]
 800b89c:	2b01      	cmp	r3, #1
 800b89e:	d001      	beq.n	800b8a4 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 800b8a0:	2301      	movs	r3, #1
 800b8a2:	e18f      	b.n	800bbc4 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b8a4:	4b3b      	ldr	r3, [pc, #236]	; (800b994 <HAL_RCC_OscConfig+0x270>)
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	691b      	ldr	r3, [r3, #16]
 800b8b0:	00db      	lsls	r3, r3, #3
 800b8b2:	4938      	ldr	r1, [pc, #224]	; (800b994 <HAL_RCC_OscConfig+0x270>)
 800b8b4:	4313      	orrs	r3, r2
 800b8b6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b8b8:	e03a      	b.n	800b930 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	68db      	ldr	r3, [r3, #12]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d020      	beq.n	800b904 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b8c2:	4b35      	ldr	r3, [pc, #212]	; (800b998 <HAL_RCC_OscConfig+0x274>)
 800b8c4:	2201      	movs	r2, #1
 800b8c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8c8:	f7fd fabe 	bl	8008e48 <HAL_GetTick>
 800b8cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b8ce:	e008      	b.n	800b8e2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b8d0:	f7fd faba 	bl	8008e48 <HAL_GetTick>
 800b8d4:	4602      	mov	r2, r0
 800b8d6:	693b      	ldr	r3, [r7, #16]
 800b8d8:	1ad3      	subs	r3, r2, r3
 800b8da:	2b02      	cmp	r3, #2
 800b8dc:	d901      	bls.n	800b8e2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800b8de:	2303      	movs	r3, #3
 800b8e0:	e170      	b.n	800bbc4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b8e2:	4b2c      	ldr	r3, [pc, #176]	; (800b994 <HAL_RCC_OscConfig+0x270>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	f003 0302 	and.w	r3, r3, #2
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d0f0      	beq.n	800b8d0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b8ee:	4b29      	ldr	r3, [pc, #164]	; (800b994 <HAL_RCC_OscConfig+0x270>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	691b      	ldr	r3, [r3, #16]
 800b8fa:	00db      	lsls	r3, r3, #3
 800b8fc:	4925      	ldr	r1, [pc, #148]	; (800b994 <HAL_RCC_OscConfig+0x270>)
 800b8fe:	4313      	orrs	r3, r2
 800b900:	600b      	str	r3, [r1, #0]
 800b902:	e015      	b.n	800b930 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b904:	4b24      	ldr	r3, [pc, #144]	; (800b998 <HAL_RCC_OscConfig+0x274>)
 800b906:	2200      	movs	r2, #0
 800b908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b90a:	f7fd fa9d 	bl	8008e48 <HAL_GetTick>
 800b90e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b910:	e008      	b.n	800b924 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b912:	f7fd fa99 	bl	8008e48 <HAL_GetTick>
 800b916:	4602      	mov	r2, r0
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	1ad3      	subs	r3, r2, r3
 800b91c:	2b02      	cmp	r3, #2
 800b91e:	d901      	bls.n	800b924 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800b920:	2303      	movs	r3, #3
 800b922:	e14f      	b.n	800bbc4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b924:	4b1b      	ldr	r3, [pc, #108]	; (800b994 <HAL_RCC_OscConfig+0x270>)
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	f003 0302 	and.w	r3, r3, #2
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d1f0      	bne.n	800b912 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	f003 0308 	and.w	r3, r3, #8
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d037      	beq.n	800b9ac <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	695b      	ldr	r3, [r3, #20]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d016      	beq.n	800b972 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b944:	4b15      	ldr	r3, [pc, #84]	; (800b99c <HAL_RCC_OscConfig+0x278>)
 800b946:	2201      	movs	r2, #1
 800b948:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b94a:	f7fd fa7d 	bl	8008e48 <HAL_GetTick>
 800b94e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b950:	e008      	b.n	800b964 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b952:	f7fd fa79 	bl	8008e48 <HAL_GetTick>
 800b956:	4602      	mov	r2, r0
 800b958:	693b      	ldr	r3, [r7, #16]
 800b95a:	1ad3      	subs	r3, r2, r3
 800b95c:	2b02      	cmp	r3, #2
 800b95e:	d901      	bls.n	800b964 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b960:	2303      	movs	r3, #3
 800b962:	e12f      	b.n	800bbc4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b964:	4b0b      	ldr	r3, [pc, #44]	; (800b994 <HAL_RCC_OscConfig+0x270>)
 800b966:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b968:	f003 0302 	and.w	r3, r3, #2
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	d0f0      	beq.n	800b952 <HAL_RCC_OscConfig+0x22e>
 800b970:	e01c      	b.n	800b9ac <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b972:	4b0a      	ldr	r3, [pc, #40]	; (800b99c <HAL_RCC_OscConfig+0x278>)
 800b974:	2200      	movs	r2, #0
 800b976:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b978:	f7fd fa66 	bl	8008e48 <HAL_GetTick>
 800b97c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b97e:	e00f      	b.n	800b9a0 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b980:	f7fd fa62 	bl	8008e48 <HAL_GetTick>
 800b984:	4602      	mov	r2, r0
 800b986:	693b      	ldr	r3, [r7, #16]
 800b988:	1ad3      	subs	r3, r2, r3
 800b98a:	2b02      	cmp	r3, #2
 800b98c:	d908      	bls.n	800b9a0 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800b98e:	2303      	movs	r3, #3
 800b990:	e118      	b.n	800bbc4 <HAL_RCC_OscConfig+0x4a0>
 800b992:	bf00      	nop
 800b994:	40023800 	.word	0x40023800
 800b998:	42470000 	.word	0x42470000
 800b99c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b9a0:	4b8a      	ldr	r3, [pc, #552]	; (800bbcc <HAL_RCC_OscConfig+0x4a8>)
 800b9a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b9a4:	f003 0302 	and.w	r3, r3, #2
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d1e9      	bne.n	800b980 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	f003 0304 	and.w	r3, r3, #4
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	f000 8097 	beq.w	800bae8 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b9be:	4b83      	ldr	r3, [pc, #524]	; (800bbcc <HAL_RCC_OscConfig+0x4a8>)
 800b9c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d10f      	bne.n	800b9ea <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	60fb      	str	r3, [r7, #12]
 800b9ce:	4b7f      	ldr	r3, [pc, #508]	; (800bbcc <HAL_RCC_OscConfig+0x4a8>)
 800b9d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9d2:	4a7e      	ldr	r2, [pc, #504]	; (800bbcc <HAL_RCC_OscConfig+0x4a8>)
 800b9d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b9d8:	6413      	str	r3, [r2, #64]	; 0x40
 800b9da:	4b7c      	ldr	r3, [pc, #496]	; (800bbcc <HAL_RCC_OscConfig+0x4a8>)
 800b9dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b9e2:	60fb      	str	r3, [r7, #12]
 800b9e4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800b9e6:	2301      	movs	r3, #1
 800b9e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b9ea:	4b79      	ldr	r3, [pc, #484]	; (800bbd0 <HAL_RCC_OscConfig+0x4ac>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d118      	bne.n	800ba28 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b9f6:	4b76      	ldr	r3, [pc, #472]	; (800bbd0 <HAL_RCC_OscConfig+0x4ac>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	4a75      	ldr	r2, [pc, #468]	; (800bbd0 <HAL_RCC_OscConfig+0x4ac>)
 800b9fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ba02:	f7fd fa21 	bl	8008e48 <HAL_GetTick>
 800ba06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ba08:	e008      	b.n	800ba1c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ba0a:	f7fd fa1d 	bl	8008e48 <HAL_GetTick>
 800ba0e:	4602      	mov	r2, r0
 800ba10:	693b      	ldr	r3, [r7, #16]
 800ba12:	1ad3      	subs	r3, r2, r3
 800ba14:	2b02      	cmp	r3, #2
 800ba16:	d901      	bls.n	800ba1c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800ba18:	2303      	movs	r3, #3
 800ba1a:	e0d3      	b.n	800bbc4 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ba1c:	4b6c      	ldr	r3, [pc, #432]	; (800bbd0 <HAL_RCC_OscConfig+0x4ac>)
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d0f0      	beq.n	800ba0a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	689b      	ldr	r3, [r3, #8]
 800ba2c:	2b01      	cmp	r3, #1
 800ba2e:	d106      	bne.n	800ba3e <HAL_RCC_OscConfig+0x31a>
 800ba30:	4b66      	ldr	r3, [pc, #408]	; (800bbcc <HAL_RCC_OscConfig+0x4a8>)
 800ba32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba34:	4a65      	ldr	r2, [pc, #404]	; (800bbcc <HAL_RCC_OscConfig+0x4a8>)
 800ba36:	f043 0301 	orr.w	r3, r3, #1
 800ba3a:	6713      	str	r3, [r2, #112]	; 0x70
 800ba3c:	e01c      	b.n	800ba78 <HAL_RCC_OscConfig+0x354>
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	689b      	ldr	r3, [r3, #8]
 800ba42:	2b05      	cmp	r3, #5
 800ba44:	d10c      	bne.n	800ba60 <HAL_RCC_OscConfig+0x33c>
 800ba46:	4b61      	ldr	r3, [pc, #388]	; (800bbcc <HAL_RCC_OscConfig+0x4a8>)
 800ba48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba4a:	4a60      	ldr	r2, [pc, #384]	; (800bbcc <HAL_RCC_OscConfig+0x4a8>)
 800ba4c:	f043 0304 	orr.w	r3, r3, #4
 800ba50:	6713      	str	r3, [r2, #112]	; 0x70
 800ba52:	4b5e      	ldr	r3, [pc, #376]	; (800bbcc <HAL_RCC_OscConfig+0x4a8>)
 800ba54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba56:	4a5d      	ldr	r2, [pc, #372]	; (800bbcc <HAL_RCC_OscConfig+0x4a8>)
 800ba58:	f043 0301 	orr.w	r3, r3, #1
 800ba5c:	6713      	str	r3, [r2, #112]	; 0x70
 800ba5e:	e00b      	b.n	800ba78 <HAL_RCC_OscConfig+0x354>
 800ba60:	4b5a      	ldr	r3, [pc, #360]	; (800bbcc <HAL_RCC_OscConfig+0x4a8>)
 800ba62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba64:	4a59      	ldr	r2, [pc, #356]	; (800bbcc <HAL_RCC_OscConfig+0x4a8>)
 800ba66:	f023 0301 	bic.w	r3, r3, #1
 800ba6a:	6713      	str	r3, [r2, #112]	; 0x70
 800ba6c:	4b57      	ldr	r3, [pc, #348]	; (800bbcc <HAL_RCC_OscConfig+0x4a8>)
 800ba6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba70:	4a56      	ldr	r2, [pc, #344]	; (800bbcc <HAL_RCC_OscConfig+0x4a8>)
 800ba72:	f023 0304 	bic.w	r3, r3, #4
 800ba76:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	689b      	ldr	r3, [r3, #8]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d015      	beq.n	800baac <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ba80:	f7fd f9e2 	bl	8008e48 <HAL_GetTick>
 800ba84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ba86:	e00a      	b.n	800ba9e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ba88:	f7fd f9de 	bl	8008e48 <HAL_GetTick>
 800ba8c:	4602      	mov	r2, r0
 800ba8e:	693b      	ldr	r3, [r7, #16]
 800ba90:	1ad3      	subs	r3, r2, r3
 800ba92:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba96:	4293      	cmp	r3, r2
 800ba98:	d901      	bls.n	800ba9e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800ba9a:	2303      	movs	r3, #3
 800ba9c:	e092      	b.n	800bbc4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ba9e:	4b4b      	ldr	r3, [pc, #300]	; (800bbcc <HAL_RCC_OscConfig+0x4a8>)
 800baa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800baa2:	f003 0302 	and.w	r3, r3, #2
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d0ee      	beq.n	800ba88 <HAL_RCC_OscConfig+0x364>
 800baaa:	e014      	b.n	800bad6 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800baac:	f7fd f9cc 	bl	8008e48 <HAL_GetTick>
 800bab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bab2:	e00a      	b.n	800baca <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bab4:	f7fd f9c8 	bl	8008e48 <HAL_GetTick>
 800bab8:	4602      	mov	r2, r0
 800baba:	693b      	ldr	r3, [r7, #16]
 800babc:	1ad3      	subs	r3, r2, r3
 800babe:	f241 3288 	movw	r2, #5000	; 0x1388
 800bac2:	4293      	cmp	r3, r2
 800bac4:	d901      	bls.n	800baca <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800bac6:	2303      	movs	r3, #3
 800bac8:	e07c      	b.n	800bbc4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800baca:	4b40      	ldr	r3, [pc, #256]	; (800bbcc <HAL_RCC_OscConfig+0x4a8>)
 800bacc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bace:	f003 0302 	and.w	r3, r3, #2
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d1ee      	bne.n	800bab4 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bad6:	7dfb      	ldrb	r3, [r7, #23]
 800bad8:	2b01      	cmp	r3, #1
 800bada:	d105      	bne.n	800bae8 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800badc:	4b3b      	ldr	r3, [pc, #236]	; (800bbcc <HAL_RCC_OscConfig+0x4a8>)
 800bade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bae0:	4a3a      	ldr	r2, [pc, #232]	; (800bbcc <HAL_RCC_OscConfig+0x4a8>)
 800bae2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bae6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	699b      	ldr	r3, [r3, #24]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d068      	beq.n	800bbc2 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800baf0:	4b36      	ldr	r3, [pc, #216]	; (800bbcc <HAL_RCC_OscConfig+0x4a8>)
 800baf2:	689b      	ldr	r3, [r3, #8]
 800baf4:	f003 030c 	and.w	r3, r3, #12
 800baf8:	2b08      	cmp	r3, #8
 800bafa:	d060      	beq.n	800bbbe <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	699b      	ldr	r3, [r3, #24]
 800bb00:	2b02      	cmp	r3, #2
 800bb02:	d145      	bne.n	800bb90 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bb04:	4b33      	ldr	r3, [pc, #204]	; (800bbd4 <HAL_RCC_OscConfig+0x4b0>)
 800bb06:	2200      	movs	r2, #0
 800bb08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb0a:	f7fd f99d 	bl	8008e48 <HAL_GetTick>
 800bb0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bb10:	e008      	b.n	800bb24 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bb12:	f7fd f999 	bl	8008e48 <HAL_GetTick>
 800bb16:	4602      	mov	r2, r0
 800bb18:	693b      	ldr	r3, [r7, #16]
 800bb1a:	1ad3      	subs	r3, r2, r3
 800bb1c:	2b02      	cmp	r3, #2
 800bb1e:	d901      	bls.n	800bb24 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 800bb20:	2303      	movs	r3, #3
 800bb22:	e04f      	b.n	800bbc4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bb24:	4b29      	ldr	r3, [pc, #164]	; (800bbcc <HAL_RCC_OscConfig+0x4a8>)
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d1f0      	bne.n	800bb12 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	69da      	ldr	r2, [r3, #28]
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	6a1b      	ldr	r3, [r3, #32]
 800bb38:	431a      	orrs	r2, r3
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb3e:	019b      	lsls	r3, r3, #6
 800bb40:	431a      	orrs	r2, r3
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb46:	085b      	lsrs	r3, r3, #1
 800bb48:	3b01      	subs	r3, #1
 800bb4a:	041b      	lsls	r3, r3, #16
 800bb4c:	431a      	orrs	r2, r3
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb52:	061b      	lsls	r3, r3, #24
 800bb54:	431a      	orrs	r2, r3
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb5a:	071b      	lsls	r3, r3, #28
 800bb5c:	491b      	ldr	r1, [pc, #108]	; (800bbcc <HAL_RCC_OscConfig+0x4a8>)
 800bb5e:	4313      	orrs	r3, r2
 800bb60:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bb62:	4b1c      	ldr	r3, [pc, #112]	; (800bbd4 <HAL_RCC_OscConfig+0x4b0>)
 800bb64:	2201      	movs	r2, #1
 800bb66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb68:	f7fd f96e 	bl	8008e48 <HAL_GetTick>
 800bb6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bb6e:	e008      	b.n	800bb82 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bb70:	f7fd f96a 	bl	8008e48 <HAL_GetTick>
 800bb74:	4602      	mov	r2, r0
 800bb76:	693b      	ldr	r3, [r7, #16]
 800bb78:	1ad3      	subs	r3, r2, r3
 800bb7a:	2b02      	cmp	r3, #2
 800bb7c:	d901      	bls.n	800bb82 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800bb7e:	2303      	movs	r3, #3
 800bb80:	e020      	b.n	800bbc4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bb82:	4b12      	ldr	r3, [pc, #72]	; (800bbcc <HAL_RCC_OscConfig+0x4a8>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d0f0      	beq.n	800bb70 <HAL_RCC_OscConfig+0x44c>
 800bb8e:	e018      	b.n	800bbc2 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bb90:	4b10      	ldr	r3, [pc, #64]	; (800bbd4 <HAL_RCC_OscConfig+0x4b0>)
 800bb92:	2200      	movs	r2, #0
 800bb94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb96:	f7fd f957 	bl	8008e48 <HAL_GetTick>
 800bb9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bb9c:	e008      	b.n	800bbb0 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bb9e:	f7fd f953 	bl	8008e48 <HAL_GetTick>
 800bba2:	4602      	mov	r2, r0
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	1ad3      	subs	r3, r2, r3
 800bba8:	2b02      	cmp	r3, #2
 800bbaa:	d901      	bls.n	800bbb0 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800bbac:	2303      	movs	r3, #3
 800bbae:	e009      	b.n	800bbc4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bbb0:	4b06      	ldr	r3, [pc, #24]	; (800bbcc <HAL_RCC_OscConfig+0x4a8>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d1f0      	bne.n	800bb9e <HAL_RCC_OscConfig+0x47a>
 800bbbc:	e001      	b.n	800bbc2 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800bbbe:	2301      	movs	r3, #1
 800bbc0:	e000      	b.n	800bbc4 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800bbc2:	2300      	movs	r3, #0
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	3718      	adds	r7, #24
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd80      	pop	{r7, pc}
 800bbcc:	40023800 	.word	0x40023800
 800bbd0:	40007000 	.word	0x40007000
 800bbd4:	42470060 	.word	0x42470060

0800bbd8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b082      	sub	sp, #8
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d101      	bne.n	800bbea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bbe6:	2301      	movs	r3, #1
 800bbe8:	e056      	b.n	800bc98 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2200      	movs	r2, #0
 800bbee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bbf6:	b2db      	uxtb	r3, r3
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d106      	bne.n	800bc0a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2200      	movs	r2, #0
 800bc00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f004 f9cf 	bl	800ffa8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	2202      	movs	r2, #2
 800bc0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	681a      	ldr	r2, [r3, #0]
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bc20:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	685a      	ldr	r2, [r3, #4]
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	689b      	ldr	r3, [r3, #8]
 800bc2a:	431a      	orrs	r2, r3
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	68db      	ldr	r3, [r3, #12]
 800bc30:	431a      	orrs	r2, r3
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	691b      	ldr	r3, [r3, #16]
 800bc36:	431a      	orrs	r2, r3
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	695b      	ldr	r3, [r3, #20]
 800bc3c:	431a      	orrs	r2, r3
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	699b      	ldr	r3, [r3, #24]
 800bc42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bc46:	431a      	orrs	r2, r3
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	69db      	ldr	r3, [r3, #28]
 800bc4c:	431a      	orrs	r2, r3
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	6a1b      	ldr	r3, [r3, #32]
 800bc52:	ea42 0103 	orr.w	r1, r2, r3
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	430a      	orrs	r2, r1
 800bc60:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	699b      	ldr	r3, [r3, #24]
 800bc66:	0c1b      	lsrs	r3, r3, #16
 800bc68:	f003 0104 	and.w	r1, r3, #4
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	430a      	orrs	r2, r1
 800bc76:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	69da      	ldr	r2, [r3, #28]
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bc86:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	2201      	movs	r2, #1
 800bc92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800bc96:	2300      	movs	r3, #0
}
 800bc98:	4618      	mov	r0, r3
 800bc9a:	3708      	adds	r7, #8
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bd80      	pop	{r7, pc}

0800bca0 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800bca0:	b480      	push	{r7}
 800bca2:	b087      	sub	sp, #28
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	60f8      	str	r0, [r7, #12]
 800bca8:	60b9      	str	r1, [r7, #8]
 800bcaa:	607a      	str	r2, [r7, #4]
 800bcac:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800bcae:	2300      	movs	r3, #0
 800bcb0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bcb8:	2b01      	cmp	r3, #1
 800bcba:	d101      	bne.n	800bcc0 <HAL_SPI_TransmitReceive_IT+0x20>
 800bcbc:	2302      	movs	r3, #2
 800bcbe:	e075      	b.n	800bdac <HAL_SPI_TransmitReceive_IT+0x10c>
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	2201      	movs	r2, #1
 800bcc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bcce:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	685b      	ldr	r3, [r3, #4]
 800bcd4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bcd6:	7dbb      	ldrb	r3, [r7, #22]
 800bcd8:	2b01      	cmp	r3, #1
 800bcda:	d00d      	beq.n	800bcf8 <HAL_SPI_TransmitReceive_IT+0x58>
 800bcdc:	693b      	ldr	r3, [r7, #16]
 800bcde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bce2:	d106      	bne.n	800bcf2 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	689b      	ldr	r3, [r3, #8]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d102      	bne.n	800bcf2 <HAL_SPI_TransmitReceive_IT+0x52>
 800bcec:	7dbb      	ldrb	r3, [r7, #22]
 800bcee:	2b04      	cmp	r3, #4
 800bcf0:	d002      	beq.n	800bcf8 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800bcf2:	2302      	movs	r3, #2
 800bcf4:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bcf6:	e054      	b.n	800bda2 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800bcf8:	68bb      	ldr	r3, [r7, #8]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d005      	beq.n	800bd0a <HAL_SPI_TransmitReceive_IT+0x6a>
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d002      	beq.n	800bd0a <HAL_SPI_TransmitReceive_IT+0x6a>
 800bd04:	887b      	ldrh	r3, [r7, #2]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d102      	bne.n	800bd10 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800bd0a:	2301      	movs	r3, #1
 800bd0c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bd0e:	e048      	b.n	800bda2 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bd16:	b2db      	uxtb	r3, r3
 800bd18:	2b04      	cmp	r3, #4
 800bd1a:	d003      	beq.n	800bd24 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	2205      	movs	r2, #5
 800bd20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	2200      	movs	r2, #0
 800bd28:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	68ba      	ldr	r2, [r7, #8]
 800bd2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	887a      	ldrh	r2, [r7, #2]
 800bd34:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	887a      	ldrh	r2, [r7, #2]
 800bd3a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	687a      	ldr	r2, [r7, #4]
 800bd40:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	887a      	ldrh	r2, [r7, #2]
 800bd46:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	887a      	ldrh	r2, [r7, #2]
 800bd4c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	68db      	ldr	r3, [r3, #12]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d006      	beq.n	800bd64 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	4a17      	ldr	r2, [pc, #92]	; (800bdb8 <HAL_SPI_TransmitReceive_IT+0x118>)
 800bd5a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	4a17      	ldr	r2, [pc, #92]	; (800bdbc <HAL_SPI_TransmitReceive_IT+0x11c>)
 800bd60:	645a      	str	r2, [r3, #68]	; 0x44
 800bd62:	e005      	b.n	800bd70 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	4a16      	ldr	r2, [pc, #88]	; (800bdc0 <HAL_SPI_TransmitReceive_IT+0x120>)
 800bd68:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	4a15      	ldr	r2, [pc, #84]	; (800bdc4 <HAL_SPI_TransmitReceive_IT+0x124>)
 800bd6e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	685a      	ldr	r2, [r3, #4]
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800bd7e:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd8a:	2b40      	cmp	r3, #64	; 0x40
 800bd8c:	d008      	beq.n	800bda0 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	681a      	ldr	r2, [r3, #0]
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bd9c:	601a      	str	r2, [r3, #0]
 800bd9e:	e000      	b.n	800bda2 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 800bda0:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	2200      	movs	r2, #0
 800bda6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800bdaa:	7dfb      	ldrb	r3, [r7, #23]
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	371c      	adds	r7, #28
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb6:	4770      	bx	lr
 800bdb8:	0800c0f1 	.word	0x0800c0f1
 800bdbc:	0800c151 	.word	0x0800c151
 800bdc0:	0800c02d 	.word	0x0800c02d
 800bdc4:	0800c091 	.word	0x0800c091

0800bdc8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b088      	sub	sp, #32
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	685b      	ldr	r3, [r3, #4]
 800bdd6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	689b      	ldr	r3, [r3, #8]
 800bdde:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800bde0:	69bb      	ldr	r3, [r7, #24]
 800bde2:	099b      	lsrs	r3, r3, #6
 800bde4:	f003 0301 	and.w	r3, r3, #1
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d10f      	bne.n	800be0c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800bdec:	69bb      	ldr	r3, [r7, #24]
 800bdee:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d00a      	beq.n	800be0c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800bdf6:	69fb      	ldr	r3, [r7, #28]
 800bdf8:	099b      	lsrs	r3, r3, #6
 800bdfa:	f003 0301 	and.w	r3, r3, #1
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d004      	beq.n	800be0c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be06:	6878      	ldr	r0, [r7, #4]
 800be08:	4798      	blx	r3
    return;
 800be0a:	e0d8      	b.n	800bfbe <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800be0c:	69bb      	ldr	r3, [r7, #24]
 800be0e:	085b      	lsrs	r3, r3, #1
 800be10:	f003 0301 	and.w	r3, r3, #1
 800be14:	2b00      	cmp	r3, #0
 800be16:	d00a      	beq.n	800be2e <HAL_SPI_IRQHandler+0x66>
 800be18:	69fb      	ldr	r3, [r7, #28]
 800be1a:	09db      	lsrs	r3, r3, #7
 800be1c:	f003 0301 	and.w	r3, r3, #1
 800be20:	2b00      	cmp	r3, #0
 800be22:	d004      	beq.n	800be2e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	4798      	blx	r3
    return;
 800be2c:	e0c7      	b.n	800bfbe <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800be2e:	69bb      	ldr	r3, [r7, #24]
 800be30:	095b      	lsrs	r3, r3, #5
 800be32:	f003 0301 	and.w	r3, r3, #1
 800be36:	2b00      	cmp	r3, #0
 800be38:	d10c      	bne.n	800be54 <HAL_SPI_IRQHandler+0x8c>
 800be3a:	69bb      	ldr	r3, [r7, #24]
 800be3c:	099b      	lsrs	r3, r3, #6
 800be3e:	f003 0301 	and.w	r3, r3, #1
 800be42:	2b00      	cmp	r3, #0
 800be44:	d106      	bne.n	800be54 <HAL_SPI_IRQHandler+0x8c>
 800be46:	69bb      	ldr	r3, [r7, #24]
 800be48:	0a1b      	lsrs	r3, r3, #8
 800be4a:	f003 0301 	and.w	r3, r3, #1
 800be4e:	2b00      	cmp	r3, #0
 800be50:	f000 80b5 	beq.w	800bfbe <HAL_SPI_IRQHandler+0x1f6>
 800be54:	69fb      	ldr	r3, [r7, #28]
 800be56:	095b      	lsrs	r3, r3, #5
 800be58:	f003 0301 	and.w	r3, r3, #1
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	f000 80ae 	beq.w	800bfbe <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800be62:	69bb      	ldr	r3, [r7, #24]
 800be64:	099b      	lsrs	r3, r3, #6
 800be66:	f003 0301 	and.w	r3, r3, #1
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d023      	beq.n	800beb6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800be74:	b2db      	uxtb	r3, r3
 800be76:	2b03      	cmp	r3, #3
 800be78:	d011      	beq.n	800be9e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be7e:	f043 0204 	orr.w	r2, r3, #4
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800be86:	2300      	movs	r3, #0
 800be88:	617b      	str	r3, [r7, #20]
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	68db      	ldr	r3, [r3, #12]
 800be90:	617b      	str	r3, [r7, #20]
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	689b      	ldr	r3, [r3, #8]
 800be98:	617b      	str	r3, [r7, #20]
 800be9a:	697b      	ldr	r3, [r7, #20]
 800be9c:	e00b      	b.n	800beb6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800be9e:	2300      	movs	r3, #0
 800bea0:	613b      	str	r3, [r7, #16]
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	68db      	ldr	r3, [r3, #12]
 800bea8:	613b      	str	r3, [r7, #16]
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	689b      	ldr	r3, [r3, #8]
 800beb0:	613b      	str	r3, [r7, #16]
 800beb2:	693b      	ldr	r3, [r7, #16]
        return;
 800beb4:	e083      	b.n	800bfbe <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800beb6:	69bb      	ldr	r3, [r7, #24]
 800beb8:	095b      	lsrs	r3, r3, #5
 800beba:	f003 0301 	and.w	r3, r3, #1
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d014      	beq.n	800beec <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bec6:	f043 0201 	orr.w	r2, r3, #1
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800bece:	2300      	movs	r3, #0
 800bed0:	60fb      	str	r3, [r7, #12]
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	689b      	ldr	r3, [r3, #8]
 800bed8:	60fb      	str	r3, [r7, #12]
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	681a      	ldr	r2, [r3, #0]
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bee8:	601a      	str	r2, [r3, #0]
 800beea:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800beec:	69bb      	ldr	r3, [r7, #24]
 800beee:	0a1b      	lsrs	r3, r3, #8
 800bef0:	f003 0301 	and.w	r3, r3, #1
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d00c      	beq.n	800bf12 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800befc:	f043 0208 	orr.w	r2, r3, #8
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800bf04:	2300      	movs	r3, #0
 800bf06:	60bb      	str	r3, [r7, #8]
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	689b      	ldr	r3, [r3, #8]
 800bf0e:	60bb      	str	r3, [r7, #8]
 800bf10:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d050      	beq.n	800bfbc <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	685a      	ldr	r2, [r3, #4]
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bf28:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2201      	movs	r2, #1
 800bf2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800bf32:	69fb      	ldr	r3, [r7, #28]
 800bf34:	f003 0302 	and.w	r3, r3, #2
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d104      	bne.n	800bf46 <HAL_SPI_IRQHandler+0x17e>
 800bf3c:	69fb      	ldr	r3, [r7, #28]
 800bf3e:	f003 0301 	and.w	r3, r3, #1
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d034      	beq.n	800bfb0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	685a      	ldr	r2, [r3, #4]
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	f022 0203 	bic.w	r2, r2, #3
 800bf54:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d011      	beq.n	800bf82 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf62:	4a18      	ldr	r2, [pc, #96]	; (800bfc4 <HAL_SPI_IRQHandler+0x1fc>)
 800bf64:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f7fe f9d8 	bl	800a320 <HAL_DMA_Abort_IT>
 800bf70:	4603      	mov	r3, r0
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d005      	beq.n	800bf82 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf7a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d016      	beq.n	800bfb8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf8e:	4a0d      	ldr	r2, [pc, #52]	; (800bfc4 <HAL_SPI_IRQHandler+0x1fc>)
 800bf90:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf96:	4618      	mov	r0, r3
 800bf98:	f7fe f9c2 	bl	800a320 <HAL_DMA_Abort_IT>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d00a      	beq.n	800bfb8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfa6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800bfae:	e003      	b.n	800bfb8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800bfb0:	6878      	ldr	r0, [r7, #4]
 800bfb2:	f000 f81d 	bl	800bff0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800bfb6:	e000      	b.n	800bfba <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800bfb8:	bf00      	nop
    return;
 800bfba:	bf00      	nop
 800bfbc:	bf00      	nop
  }
}
 800bfbe:	3720      	adds	r7, #32
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}
 800bfc4:	0800c005 	.word	0x0800c005

0800bfc8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800bfc8:	b480      	push	{r7}
 800bfca:	b083      	sub	sp, #12
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800bfd0:	bf00      	nop
 800bfd2:	370c      	adds	r7, #12
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfda:	4770      	bx	lr

0800bfdc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800bfdc:	b480      	push	{r7}
 800bfde:	b083      	sub	sp, #12
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800bfe4:	bf00      	nop
 800bfe6:	370c      	adds	r7, #12
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfee:	4770      	bx	lr

0800bff0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800bff0:	b480      	push	{r7}
 800bff2:	b083      	sub	sp, #12
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800bff8:	bf00      	nop
 800bffa:	370c      	adds	r7, #12
 800bffc:	46bd      	mov	sp, r7
 800bffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c002:	4770      	bx	lr

0800c004 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b084      	sub	sp, #16
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c010:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	2200      	movs	r2, #0
 800c016:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	2200      	movs	r2, #0
 800c01c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800c01e:	68f8      	ldr	r0, [r7, #12]
 800c020:	f7ff ffe6 	bl	800bff0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c024:	bf00      	nop
 800c026:	3710      	adds	r7, #16
 800c028:	46bd      	mov	sp, r7
 800c02a:	bd80      	pop	{r7, pc}

0800c02c <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b082      	sub	sp, #8
 800c030:	af00      	add	r7, sp, #0
 800c032:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	f103 020c 	add.w	r2, r3, #12
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c040:	7812      	ldrb	r2, [r2, #0]
 800c042:	b2d2      	uxtb	r2, r2
 800c044:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c04a:	1c5a      	adds	r2, r3, #1
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c054:	b29b      	uxth	r3, r3
 800c056:	3b01      	subs	r3, #1
 800c058:	b29a      	uxth	r2, r3
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c062:	b29b      	uxth	r3, r3
 800c064:	2b00      	cmp	r3, #0
 800c066:	d10f      	bne.n	800c088 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	685a      	ldr	r2, [r3, #4]
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800c076:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c07c:	b29b      	uxth	r3, r3
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d102      	bne.n	800c088 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 800c082:	6878      	ldr	r0, [r7, #4]
 800c084:	f000 f940 	bl	800c308 <SPI_CloseRxTx_ISR>
    }
  }
}
 800c088:	bf00      	nop
 800c08a:	3708      	adds	r7, #8
 800c08c:	46bd      	mov	sp, r7
 800c08e:	bd80      	pop	{r7, pc}

0800c090 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b082      	sub	sp, #8
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	330c      	adds	r3, #12
 800c0a2:	7812      	ldrb	r2, [r2, #0]
 800c0a4:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0aa:	1c5a      	adds	r2, r3, #1
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c0b4:	b29b      	uxth	r3, r3
 800c0b6:	3b01      	subs	r3, #1
 800c0b8:	b29a      	uxth	r2, r3
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c0c2:	b29b      	uxth	r3, r3
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d10f      	bne.n	800c0e8 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	685a      	ldr	r2, [r3, #4]
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c0d6:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c0dc:	b29b      	uxth	r3, r3
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d102      	bne.n	800c0e8 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	f000 f910 	bl	800c308 <SPI_CloseRxTx_ISR>
    }
  }
}
 800c0e8:	bf00      	nop
 800c0ea:	3708      	adds	r7, #8
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}

0800c0f0 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b082      	sub	sp, #8
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	68da      	ldr	r2, [r3, #12]
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c102:	b292      	uxth	r2, r2
 800c104:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c10a:	1c9a      	adds	r2, r3, #2
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c114:	b29b      	uxth	r3, r3
 800c116:	3b01      	subs	r3, #1
 800c118:	b29a      	uxth	r2, r3
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c122:	b29b      	uxth	r3, r3
 800c124:	2b00      	cmp	r3, #0
 800c126:	d10f      	bne.n	800c148 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	685a      	ldr	r2, [r3, #4]
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c136:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c13c:	b29b      	uxth	r3, r3
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d102      	bne.n	800c148 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800c142:	6878      	ldr	r0, [r7, #4]
 800c144:	f000 f8e0 	bl	800c308 <SPI_CloseRxTx_ISR>
    }
  }
}
 800c148:	bf00      	nop
 800c14a:	3708      	adds	r7, #8
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bd80      	pop	{r7, pc}

0800c150 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b082      	sub	sp, #8
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c15c:	881a      	ldrh	r2, [r3, #0]
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c168:	1c9a      	adds	r2, r3, #2
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c172:	b29b      	uxth	r3, r3
 800c174:	3b01      	subs	r3, #1
 800c176:	b29a      	uxth	r2, r3
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c180:	b29b      	uxth	r3, r3
 800c182:	2b00      	cmp	r3, #0
 800c184:	d10f      	bne.n	800c1a6 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	685a      	ldr	r2, [r3, #4]
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c194:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c19a:	b29b      	uxth	r3, r3
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d102      	bne.n	800c1a6 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	f000 f8b1 	bl	800c308 <SPI_CloseRxTx_ISR>
    }
  }
}
 800c1a6:	bf00      	nop
 800c1a8:	3708      	adds	r7, #8
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}

0800c1ae <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c1ae:	b580      	push	{r7, lr}
 800c1b0:	b084      	sub	sp, #16
 800c1b2:	af00      	add	r7, sp, #0
 800c1b4:	60f8      	str	r0, [r7, #12]
 800c1b6:	60b9      	str	r1, [r7, #8]
 800c1b8:	603b      	str	r3, [r7, #0]
 800c1ba:	4613      	mov	r3, r2
 800c1bc:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c1be:	e04c      	b.n	800c25a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1c6:	d048      	beq.n	800c25a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800c1c8:	f7fc fe3e 	bl	8008e48 <HAL_GetTick>
 800c1cc:	4602      	mov	r2, r0
 800c1ce:	69bb      	ldr	r3, [r7, #24]
 800c1d0:	1ad3      	subs	r3, r2, r3
 800c1d2:	683a      	ldr	r2, [r7, #0]
 800c1d4:	429a      	cmp	r2, r3
 800c1d6:	d902      	bls.n	800c1de <SPI_WaitFlagStateUntilTimeout+0x30>
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d13d      	bne.n	800c25a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	685a      	ldr	r2, [r3, #4]
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c1ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	685b      	ldr	r3, [r3, #4]
 800c1f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c1f6:	d111      	bne.n	800c21c <SPI_WaitFlagStateUntilTimeout+0x6e>
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	689b      	ldr	r3, [r3, #8]
 800c1fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c200:	d004      	beq.n	800c20c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	689b      	ldr	r3, [r3, #8]
 800c206:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c20a:	d107      	bne.n	800c21c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	681a      	ldr	r2, [r3, #0]
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c21a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c220:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c224:	d10f      	bne.n	800c246 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	681a      	ldr	r2, [r3, #0]
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c234:	601a      	str	r2, [r3, #0]
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	681a      	ldr	r2, [r3, #0]
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c244:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	2201      	movs	r2, #1
 800c24a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	2200      	movs	r2, #0
 800c252:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800c256:	2303      	movs	r3, #3
 800c258:	e00f      	b.n	800c27a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	689a      	ldr	r2, [r3, #8]
 800c260:	68bb      	ldr	r3, [r7, #8]
 800c262:	4013      	ands	r3, r2
 800c264:	68ba      	ldr	r2, [r7, #8]
 800c266:	429a      	cmp	r2, r3
 800c268:	bf0c      	ite	eq
 800c26a:	2301      	moveq	r3, #1
 800c26c:	2300      	movne	r3, #0
 800c26e:	b2db      	uxtb	r3, r3
 800c270:	461a      	mov	r2, r3
 800c272:	79fb      	ldrb	r3, [r7, #7]
 800c274:	429a      	cmp	r2, r3
 800c276:	d1a3      	bne.n	800c1c0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800c278:	2300      	movs	r3, #0
}
 800c27a:	4618      	mov	r0, r3
 800c27c:	3710      	adds	r7, #16
 800c27e:	46bd      	mov	sp, r7
 800c280:	bd80      	pop	{r7, pc}
	...

0800c284 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b088      	sub	sp, #32
 800c288:	af02      	add	r7, sp, #8
 800c28a:	60f8      	str	r0, [r7, #12]
 800c28c:	60b9      	str	r1, [r7, #8]
 800c28e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c290:	4b1b      	ldr	r3, [pc, #108]	; (800c300 <SPI_EndRxTxTransaction+0x7c>)
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	4a1b      	ldr	r2, [pc, #108]	; (800c304 <SPI_EndRxTxTransaction+0x80>)
 800c296:	fba2 2303 	umull	r2, r3, r2, r3
 800c29a:	0d5b      	lsrs	r3, r3, #21
 800c29c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c2a0:	fb02 f303 	mul.w	r3, r2, r3
 800c2a4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	685b      	ldr	r3, [r3, #4]
 800c2aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c2ae:	d112      	bne.n	800c2d6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	9300      	str	r3, [sp, #0]
 800c2b4:	68bb      	ldr	r3, [r7, #8]
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	2180      	movs	r1, #128	; 0x80
 800c2ba:	68f8      	ldr	r0, [r7, #12]
 800c2bc:	f7ff ff77 	bl	800c1ae <SPI_WaitFlagStateUntilTimeout>
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d016      	beq.n	800c2f4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2ca:	f043 0220 	orr.w	r2, r3, #32
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c2d2:	2303      	movs	r3, #3
 800c2d4:	e00f      	b.n	800c2f6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c2d6:	697b      	ldr	r3, [r7, #20]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d00a      	beq.n	800c2f2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800c2dc:	697b      	ldr	r3, [r7, #20]
 800c2de:	3b01      	subs	r3, #1
 800c2e0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	689b      	ldr	r3, [r3, #8]
 800c2e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2ec:	2b80      	cmp	r3, #128	; 0x80
 800c2ee:	d0f2      	beq.n	800c2d6 <SPI_EndRxTxTransaction+0x52>
 800c2f0:	e000      	b.n	800c2f4 <SPI_EndRxTxTransaction+0x70>
        break;
 800c2f2:	bf00      	nop
  }

  return HAL_OK;
 800c2f4:	2300      	movs	r3, #0
}
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	3718      	adds	r7, #24
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	bd80      	pop	{r7, pc}
 800c2fe:	bf00      	nop
 800c300:	20000038 	.word	0x20000038
 800c304:	165e9f81 	.word	0x165e9f81

0800c308 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b086      	sub	sp, #24
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800c310:	4b35      	ldr	r3, [pc, #212]	; (800c3e8 <SPI_CloseRxTx_ISR+0xe0>)
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	4a35      	ldr	r2, [pc, #212]	; (800c3ec <SPI_CloseRxTx_ISR+0xe4>)
 800c316:	fba2 2303 	umull	r2, r3, r2, r3
 800c31a:	0a5b      	lsrs	r3, r3, #9
 800c31c:	2264      	movs	r2, #100	; 0x64
 800c31e:	fb02 f303 	mul.w	r3, r2, r3
 800c322:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800c324:	f7fc fd90 	bl	8008e48 <HAL_GetTick>
 800c328:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	685a      	ldr	r2, [r3, #4]
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	f022 0220 	bic.w	r2, r2, #32
 800c338:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800c33a:	693b      	ldr	r3, [r7, #16]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d106      	bne.n	800c34e <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c344:	f043 0220 	orr.w	r2, r3, #32
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c34c:	e009      	b.n	800c362 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 800c34e:	693b      	ldr	r3, [r7, #16]
 800c350:	3b01      	subs	r3, #1
 800c352:	613b      	str	r3, [r7, #16]
  }
  while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	689b      	ldr	r3, [r3, #8]
 800c35a:	f003 0302 	and.w	r3, r3, #2
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d0eb      	beq.n	800c33a <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800c362:	697a      	ldr	r2, [r7, #20]
 800c364:	2164      	movs	r1, #100	; 0x64
 800c366:	6878      	ldr	r0, [r7, #4]
 800c368:	f7ff ff8c 	bl	800c284 <SPI_EndRxTxTransaction>
 800c36c:	4603      	mov	r3, r0
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d005      	beq.n	800c37e <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c376:	f043 0220 	orr.w	r2, r3, #32
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	689b      	ldr	r3, [r3, #8]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d10a      	bne.n	800c39c <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c386:	2300      	movs	r3, #0
 800c388:	60fb      	str	r3, [r7, #12]
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	68db      	ldr	r3, [r3, #12]
 800c390:	60fb      	str	r3, [r7, #12]
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	689b      	ldr	r3, [r3, #8]
 800c398:	60fb      	str	r3, [r7, #12]
 800c39a:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d115      	bne.n	800c3d0 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c3aa:	b2db      	uxtb	r3, r3
 800c3ac:	2b04      	cmp	r3, #4
 800c3ae:	d107      	bne.n	800c3c0 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	2201      	movs	r2, #1
 800c3b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800c3b8:	6878      	ldr	r0, [r7, #4]
 800c3ba:	f7ff fe05 	bl	800bfc8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800c3be:	e00e      	b.n	800c3de <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2201      	movs	r2, #1
 800c3c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	f7ff fe07 	bl	800bfdc <HAL_SPI_TxRxCpltCallback>
}
 800c3ce:	e006      	b.n	800c3de <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2201      	movs	r2, #1
 800c3d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 800c3d8:	6878      	ldr	r0, [r7, #4]
 800c3da:	f7ff fe09 	bl	800bff0 <HAL_SPI_ErrorCallback>
}
 800c3de:	bf00      	nop
 800c3e0:	3718      	adds	r7, #24
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}
 800c3e6:	bf00      	nop
 800c3e8:	20000038 	.word	0x20000038
 800c3ec:	057619f1 	.word	0x057619f1

0800c3f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b082      	sub	sp, #8
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d101      	bne.n	800c402 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c3fe:	2301      	movs	r3, #1
 800c400:	e01d      	b.n	800c43e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c408:	b2db      	uxtb	r3, r3
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d106      	bne.n	800c41c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	2200      	movs	r2, #0
 800c412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c416:	6878      	ldr	r0, [r7, #4]
 800c418:	f004 fbc2 	bl	8010ba0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	2202      	movs	r2, #2
 800c420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681a      	ldr	r2, [r3, #0]
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	3304      	adds	r3, #4
 800c42c:	4619      	mov	r1, r3
 800c42e:	4610      	mov	r0, r2
 800c430:	f000 fb70 	bl	800cb14 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2201      	movs	r2, #1
 800c438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c43c:	2300      	movs	r3, #0
}
 800c43e:	4618      	mov	r0, r3
 800c440:	3708      	adds	r7, #8
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}

0800c446 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c446:	b580      	push	{r7, lr}
 800c448:	b082      	sub	sp, #8
 800c44a:	af00      	add	r7, sp, #0
 800c44c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d101      	bne.n	800c458 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c454:	2301      	movs	r3, #1
 800c456:	e01d      	b.n	800c494 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c45e:	b2db      	uxtb	r3, r3
 800c460:	2b00      	cmp	r3, #0
 800c462:	d106      	bne.n	800c472 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2200      	movs	r2, #0
 800c468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c46c:	6878      	ldr	r0, [r7, #4]
 800c46e:	f000 f815 	bl	800c49c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	2202      	movs	r2, #2
 800c476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	681a      	ldr	r2, [r3, #0]
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	3304      	adds	r3, #4
 800c482:	4619      	mov	r1, r3
 800c484:	4610      	mov	r0, r2
 800c486:	f000 fb45 	bl	800cb14 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	2201      	movs	r2, #1
 800c48e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c492:	2300      	movs	r3, #0
}
 800c494:	4618      	mov	r0, r3
 800c496:	3708      	adds	r7, #8
 800c498:	46bd      	mov	sp, r7
 800c49a:	bd80      	pop	{r7, pc}

0800c49c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c49c:	b480      	push	{r7}
 800c49e:	b083      	sub	sp, #12
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c4a4:	bf00      	nop
 800c4a6:	370c      	adds	r7, #12
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ae:	4770      	bx	lr

0800c4b0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b084      	sub	sp, #16
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
 800c4b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	2b0c      	cmp	r3, #12
 800c4be:	d841      	bhi.n	800c544 <HAL_TIM_PWM_Start_IT+0x94>
 800c4c0:	a201      	add	r2, pc, #4	; (adr r2, 800c4c8 <HAL_TIM_PWM_Start_IT+0x18>)
 800c4c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c4c6:	bf00      	nop
 800c4c8:	0800c4fd 	.word	0x0800c4fd
 800c4cc:	0800c545 	.word	0x0800c545
 800c4d0:	0800c545 	.word	0x0800c545
 800c4d4:	0800c545 	.word	0x0800c545
 800c4d8:	0800c50f 	.word	0x0800c50f
 800c4dc:	0800c545 	.word	0x0800c545
 800c4e0:	0800c545 	.word	0x0800c545
 800c4e4:	0800c545 	.word	0x0800c545
 800c4e8:	0800c521 	.word	0x0800c521
 800c4ec:	0800c545 	.word	0x0800c545
 800c4f0:	0800c545 	.word	0x0800c545
 800c4f4:	0800c545 	.word	0x0800c545
 800c4f8:	0800c533 	.word	0x0800c533
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	68da      	ldr	r2, [r3, #12]
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	f042 0202 	orr.w	r2, r2, #2
 800c50a:	60da      	str	r2, [r3, #12]
      break;
 800c50c:	e01b      	b.n	800c546 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	68da      	ldr	r2, [r3, #12]
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	f042 0204 	orr.w	r2, r2, #4
 800c51c:	60da      	str	r2, [r3, #12]
      break;
 800c51e:	e012      	b.n	800c546 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	68da      	ldr	r2, [r3, #12]
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	f042 0208 	orr.w	r2, r2, #8
 800c52e:	60da      	str	r2, [r3, #12]
      break;
 800c530:	e009      	b.n	800c546 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	68da      	ldr	r2, [r3, #12]
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	f042 0210 	orr.w	r2, r2, #16
 800c540:	60da      	str	r2, [r3, #12]
      break;
 800c542:	e000      	b.n	800c546 <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 800c544:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	2201      	movs	r2, #1
 800c54c:	6839      	ldr	r1, [r7, #0]
 800c54e:	4618      	mov	r0, r3
 800c550:	f000 fdca 	bl	800d0e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	4a15      	ldr	r2, [pc, #84]	; (800c5b0 <HAL_TIM_PWM_Start_IT+0x100>)
 800c55a:	4293      	cmp	r3, r2
 800c55c:	d004      	beq.n	800c568 <HAL_TIM_PWM_Start_IT+0xb8>
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	4a14      	ldr	r2, [pc, #80]	; (800c5b4 <HAL_TIM_PWM_Start_IT+0x104>)
 800c564:	4293      	cmp	r3, r2
 800c566:	d101      	bne.n	800c56c <HAL_TIM_PWM_Start_IT+0xbc>
 800c568:	2301      	movs	r3, #1
 800c56a:	e000      	b.n	800c56e <HAL_TIM_PWM_Start_IT+0xbe>
 800c56c:	2300      	movs	r3, #0
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d007      	beq.n	800c582 <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c580:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	689b      	ldr	r3, [r3, #8]
 800c588:	f003 0307 	and.w	r3, r3, #7
 800c58c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	2b06      	cmp	r3, #6
 800c592:	d007      	beq.n	800c5a4 <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	681a      	ldr	r2, [r3, #0]
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	f042 0201 	orr.w	r2, r2, #1
 800c5a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c5a4:	2300      	movs	r3, #0
}
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	3710      	adds	r7, #16
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd80      	pop	{r7, pc}
 800c5ae:	bf00      	nop
 800c5b0:	40010000 	.word	0x40010000
 800c5b4:	40010400 	.word	0x40010400

0800c5b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b082      	sub	sp, #8
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	691b      	ldr	r3, [r3, #16]
 800c5c6:	f003 0302 	and.w	r3, r3, #2
 800c5ca:	2b02      	cmp	r3, #2
 800c5cc:	d122      	bne.n	800c614 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	68db      	ldr	r3, [r3, #12]
 800c5d4:	f003 0302 	and.w	r3, r3, #2
 800c5d8:	2b02      	cmp	r3, #2
 800c5da:	d11b      	bne.n	800c614 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	f06f 0202 	mvn.w	r2, #2
 800c5e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	2201      	movs	r2, #1
 800c5ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	699b      	ldr	r3, [r3, #24]
 800c5f2:	f003 0303 	and.w	r3, r3, #3
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d003      	beq.n	800c602 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c5fa:	6878      	ldr	r0, [r7, #4]
 800c5fc:	f000 fa6b 	bl	800cad6 <HAL_TIM_IC_CaptureCallback>
 800c600:	e005      	b.n	800c60e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c602:	6878      	ldr	r0, [r7, #4]
 800c604:	f000 fa5d 	bl	800cac2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c608:	6878      	ldr	r0, [r7, #4]
 800c60a:	f000 fa6e 	bl	800caea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	2200      	movs	r2, #0
 800c612:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	691b      	ldr	r3, [r3, #16]
 800c61a:	f003 0304 	and.w	r3, r3, #4
 800c61e:	2b04      	cmp	r3, #4
 800c620:	d122      	bne.n	800c668 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	68db      	ldr	r3, [r3, #12]
 800c628:	f003 0304 	and.w	r3, r3, #4
 800c62c:	2b04      	cmp	r3, #4
 800c62e:	d11b      	bne.n	800c668 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	f06f 0204 	mvn.w	r2, #4
 800c638:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	2202      	movs	r2, #2
 800c63e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	699b      	ldr	r3, [r3, #24]
 800c646:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d003      	beq.n	800c656 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c64e:	6878      	ldr	r0, [r7, #4]
 800c650:	f000 fa41 	bl	800cad6 <HAL_TIM_IC_CaptureCallback>
 800c654:	e005      	b.n	800c662 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c656:	6878      	ldr	r0, [r7, #4]
 800c658:	f000 fa33 	bl	800cac2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c65c:	6878      	ldr	r0, [r7, #4]
 800c65e:	f000 fa44 	bl	800caea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	2200      	movs	r2, #0
 800c666:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	691b      	ldr	r3, [r3, #16]
 800c66e:	f003 0308 	and.w	r3, r3, #8
 800c672:	2b08      	cmp	r3, #8
 800c674:	d122      	bne.n	800c6bc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	68db      	ldr	r3, [r3, #12]
 800c67c:	f003 0308 	and.w	r3, r3, #8
 800c680:	2b08      	cmp	r3, #8
 800c682:	d11b      	bne.n	800c6bc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	f06f 0208 	mvn.w	r2, #8
 800c68c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	2204      	movs	r2, #4
 800c692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	69db      	ldr	r3, [r3, #28]
 800c69a:	f003 0303 	and.w	r3, r3, #3
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d003      	beq.n	800c6aa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c6a2:	6878      	ldr	r0, [r7, #4]
 800c6a4:	f000 fa17 	bl	800cad6 <HAL_TIM_IC_CaptureCallback>
 800c6a8:	e005      	b.n	800c6b6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c6aa:	6878      	ldr	r0, [r7, #4]
 800c6ac:	f000 fa09 	bl	800cac2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c6b0:	6878      	ldr	r0, [r7, #4]
 800c6b2:	f000 fa1a 	bl	800caea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	691b      	ldr	r3, [r3, #16]
 800c6c2:	f003 0310 	and.w	r3, r3, #16
 800c6c6:	2b10      	cmp	r3, #16
 800c6c8:	d122      	bne.n	800c710 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	68db      	ldr	r3, [r3, #12]
 800c6d0:	f003 0310 	and.w	r3, r3, #16
 800c6d4:	2b10      	cmp	r3, #16
 800c6d6:	d11b      	bne.n	800c710 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	f06f 0210 	mvn.w	r2, #16
 800c6e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	2208      	movs	r2, #8
 800c6e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	69db      	ldr	r3, [r3, #28]
 800c6ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d003      	beq.n	800c6fe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c6f6:	6878      	ldr	r0, [r7, #4]
 800c6f8:	f000 f9ed 	bl	800cad6 <HAL_TIM_IC_CaptureCallback>
 800c6fc:	e005      	b.n	800c70a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c6fe:	6878      	ldr	r0, [r7, #4]
 800c700:	f000 f9df 	bl	800cac2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c704:	6878      	ldr	r0, [r7, #4]
 800c706:	f000 f9f0 	bl	800caea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	2200      	movs	r2, #0
 800c70e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	691b      	ldr	r3, [r3, #16]
 800c716:	f003 0301 	and.w	r3, r3, #1
 800c71a:	2b01      	cmp	r3, #1
 800c71c:	d10e      	bne.n	800c73c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	68db      	ldr	r3, [r3, #12]
 800c724:	f003 0301 	and.w	r3, r3, #1
 800c728:	2b01      	cmp	r3, #1
 800c72a:	d107      	bne.n	800c73c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	f06f 0201 	mvn.w	r2, #1
 800c734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	f004 fb08 	bl	8010d4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	691b      	ldr	r3, [r3, #16]
 800c742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c746:	2b80      	cmp	r3, #128	; 0x80
 800c748:	d10e      	bne.n	800c768 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	68db      	ldr	r3, [r3, #12]
 800c750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c754:	2b80      	cmp	r3, #128	; 0x80
 800c756:	d107      	bne.n	800c768 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c762:	6878      	ldr	r0, [r7, #4]
 800c764:	f000 fddb 	bl	800d31e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	691b      	ldr	r3, [r3, #16]
 800c76e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c772:	2b40      	cmp	r3, #64	; 0x40
 800c774:	d10e      	bne.n	800c794 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	68db      	ldr	r3, [r3, #12]
 800c77c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c780:	2b40      	cmp	r3, #64	; 0x40
 800c782:	d107      	bne.n	800c794 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c78c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f000 f9b5 	bl	800cafe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	691b      	ldr	r3, [r3, #16]
 800c79a:	f003 0320 	and.w	r3, r3, #32
 800c79e:	2b20      	cmp	r3, #32
 800c7a0:	d10e      	bne.n	800c7c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	68db      	ldr	r3, [r3, #12]
 800c7a8:	f003 0320 	and.w	r3, r3, #32
 800c7ac:	2b20      	cmp	r3, #32
 800c7ae:	d107      	bne.n	800c7c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	f06f 0220 	mvn.w	r2, #32
 800c7b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c7ba:	6878      	ldr	r0, [r7, #4]
 800c7bc:	f000 fda5 	bl	800d30a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c7c0:	bf00      	nop
 800c7c2:	3708      	adds	r7, #8
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	bd80      	pop	{r7, pc}

0800c7c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b084      	sub	sp, #16
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	60f8      	str	r0, [r7, #12]
 800c7d0:	60b9      	str	r1, [r7, #8]
 800c7d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c7da:	2b01      	cmp	r3, #1
 800c7dc:	d101      	bne.n	800c7e2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800c7de:	2302      	movs	r3, #2
 800c7e0:	e0b4      	b.n	800c94c <HAL_TIM_PWM_ConfigChannel+0x184>
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	2201      	movs	r2, #1
 800c7e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	2202      	movs	r2, #2
 800c7ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	2b0c      	cmp	r3, #12
 800c7f6:	f200 809f 	bhi.w	800c938 <HAL_TIM_PWM_ConfigChannel+0x170>
 800c7fa:	a201      	add	r2, pc, #4	; (adr r2, 800c800 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800c7fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c800:	0800c835 	.word	0x0800c835
 800c804:	0800c939 	.word	0x0800c939
 800c808:	0800c939 	.word	0x0800c939
 800c80c:	0800c939 	.word	0x0800c939
 800c810:	0800c875 	.word	0x0800c875
 800c814:	0800c939 	.word	0x0800c939
 800c818:	0800c939 	.word	0x0800c939
 800c81c:	0800c939 	.word	0x0800c939
 800c820:	0800c8b7 	.word	0x0800c8b7
 800c824:	0800c939 	.word	0x0800c939
 800c828:	0800c939 	.word	0x0800c939
 800c82c:	0800c939 	.word	0x0800c939
 800c830:	0800c8f7 	.word	0x0800c8f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	68b9      	ldr	r1, [r7, #8]
 800c83a:	4618      	mov	r0, r3
 800c83c:	f000 fa0a 	bl	800cc54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	699a      	ldr	r2, [r3, #24]
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	f042 0208 	orr.w	r2, r2, #8
 800c84e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	699a      	ldr	r2, [r3, #24]
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	f022 0204 	bic.w	r2, r2, #4
 800c85e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	6999      	ldr	r1, [r3, #24]
 800c866:	68bb      	ldr	r3, [r7, #8]
 800c868:	691a      	ldr	r2, [r3, #16]
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	430a      	orrs	r2, r1
 800c870:	619a      	str	r2, [r3, #24]
      break;
 800c872:	e062      	b.n	800c93a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	68b9      	ldr	r1, [r7, #8]
 800c87a:	4618      	mov	r0, r3
 800c87c:	f000 fa5a 	bl	800cd34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	699a      	ldr	r2, [r3, #24]
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c88e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	699a      	ldr	r2, [r3, #24]
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c89e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	6999      	ldr	r1, [r3, #24]
 800c8a6:	68bb      	ldr	r3, [r7, #8]
 800c8a8:	691b      	ldr	r3, [r3, #16]
 800c8aa:	021a      	lsls	r2, r3, #8
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	430a      	orrs	r2, r1
 800c8b2:	619a      	str	r2, [r3, #24]
      break;
 800c8b4:	e041      	b.n	800c93a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	68b9      	ldr	r1, [r7, #8]
 800c8bc:	4618      	mov	r0, r3
 800c8be:	f000 faaf 	bl	800ce20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	69da      	ldr	r2, [r3, #28]
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	f042 0208 	orr.w	r2, r2, #8
 800c8d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	69da      	ldr	r2, [r3, #28]
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	f022 0204 	bic.w	r2, r2, #4
 800c8e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	69d9      	ldr	r1, [r3, #28]
 800c8e8:	68bb      	ldr	r3, [r7, #8]
 800c8ea:	691a      	ldr	r2, [r3, #16]
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	430a      	orrs	r2, r1
 800c8f2:	61da      	str	r2, [r3, #28]
      break;
 800c8f4:	e021      	b.n	800c93a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	68b9      	ldr	r1, [r7, #8]
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	f000 fb03 	bl	800cf08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	69da      	ldr	r2, [r3, #28]
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c910:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	69da      	ldr	r2, [r3, #28]
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800c920:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	69d9      	ldr	r1, [r3, #28]
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	691b      	ldr	r3, [r3, #16]
 800c92c:	021a      	lsls	r2, r3, #8
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	430a      	orrs	r2, r1
 800c934:	61da      	str	r2, [r3, #28]
      break;
 800c936:	e000      	b.n	800c93a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800c938:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	2201      	movs	r2, #1
 800c93e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	2200      	movs	r2, #0
 800c946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c94a:	2300      	movs	r3, #0
}
 800c94c:	4618      	mov	r0, r3
 800c94e:	3710      	adds	r7, #16
 800c950:	46bd      	mov	sp, r7
 800c952:	bd80      	pop	{r7, pc}

0800c954 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c954:	b580      	push	{r7, lr}
 800c956:	b084      	sub	sp, #16
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
 800c95c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c964:	2b01      	cmp	r3, #1
 800c966:	d101      	bne.n	800c96c <HAL_TIM_ConfigClockSource+0x18>
 800c968:	2302      	movs	r3, #2
 800c96a:	e0a6      	b.n	800caba <HAL_TIM_ConfigClockSource+0x166>
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	2201      	movs	r2, #1
 800c970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	2202      	movs	r2, #2
 800c978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	689b      	ldr	r3, [r3, #8]
 800c982:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c98a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c992:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	68fa      	ldr	r2, [r7, #12]
 800c99a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c99c:	683b      	ldr	r3, [r7, #0]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	2b40      	cmp	r3, #64	; 0x40
 800c9a2:	d067      	beq.n	800ca74 <HAL_TIM_ConfigClockSource+0x120>
 800c9a4:	2b40      	cmp	r3, #64	; 0x40
 800c9a6:	d80b      	bhi.n	800c9c0 <HAL_TIM_ConfigClockSource+0x6c>
 800c9a8:	2b10      	cmp	r3, #16
 800c9aa:	d073      	beq.n	800ca94 <HAL_TIM_ConfigClockSource+0x140>
 800c9ac:	2b10      	cmp	r3, #16
 800c9ae:	d802      	bhi.n	800c9b6 <HAL_TIM_ConfigClockSource+0x62>
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d06f      	beq.n	800ca94 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800c9b4:	e078      	b.n	800caa8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800c9b6:	2b20      	cmp	r3, #32
 800c9b8:	d06c      	beq.n	800ca94 <HAL_TIM_ConfigClockSource+0x140>
 800c9ba:	2b30      	cmp	r3, #48	; 0x30
 800c9bc:	d06a      	beq.n	800ca94 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800c9be:	e073      	b.n	800caa8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800c9c0:	2b70      	cmp	r3, #112	; 0x70
 800c9c2:	d00d      	beq.n	800c9e0 <HAL_TIM_ConfigClockSource+0x8c>
 800c9c4:	2b70      	cmp	r3, #112	; 0x70
 800c9c6:	d804      	bhi.n	800c9d2 <HAL_TIM_ConfigClockSource+0x7e>
 800c9c8:	2b50      	cmp	r3, #80	; 0x50
 800c9ca:	d033      	beq.n	800ca34 <HAL_TIM_ConfigClockSource+0xe0>
 800c9cc:	2b60      	cmp	r3, #96	; 0x60
 800c9ce:	d041      	beq.n	800ca54 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800c9d0:	e06a      	b.n	800caa8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800c9d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c9d6:	d066      	beq.n	800caa6 <HAL_TIM_ConfigClockSource+0x152>
 800c9d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c9dc:	d017      	beq.n	800ca0e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800c9de:	e063      	b.n	800caa8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	6818      	ldr	r0, [r3, #0]
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	6899      	ldr	r1, [r3, #8]
 800c9e8:	683b      	ldr	r3, [r7, #0]
 800c9ea:	685a      	ldr	r2, [r3, #4]
 800c9ec:	683b      	ldr	r3, [r7, #0]
 800c9ee:	68db      	ldr	r3, [r3, #12]
 800c9f0:	f000 fb5a 	bl	800d0a8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	689b      	ldr	r3, [r3, #8]
 800c9fa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ca02:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	68fa      	ldr	r2, [r7, #12]
 800ca0a:	609a      	str	r2, [r3, #8]
      break;
 800ca0c:	e04c      	b.n	800caa8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	6818      	ldr	r0, [r3, #0]
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	6899      	ldr	r1, [r3, #8]
 800ca16:	683b      	ldr	r3, [r7, #0]
 800ca18:	685a      	ldr	r2, [r3, #4]
 800ca1a:	683b      	ldr	r3, [r7, #0]
 800ca1c:	68db      	ldr	r3, [r3, #12]
 800ca1e:	f000 fb43 	bl	800d0a8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	689a      	ldr	r2, [r3, #8]
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ca30:	609a      	str	r2, [r3, #8]
      break;
 800ca32:	e039      	b.n	800caa8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	6818      	ldr	r0, [r3, #0]
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	6859      	ldr	r1, [r3, #4]
 800ca3c:	683b      	ldr	r3, [r7, #0]
 800ca3e:	68db      	ldr	r3, [r3, #12]
 800ca40:	461a      	mov	r2, r3
 800ca42:	f000 fab7 	bl	800cfb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	2150      	movs	r1, #80	; 0x50
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	f000 fb10 	bl	800d072 <TIM_ITRx_SetConfig>
      break;
 800ca52:	e029      	b.n	800caa8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	6818      	ldr	r0, [r3, #0]
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	6859      	ldr	r1, [r3, #4]
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	68db      	ldr	r3, [r3, #12]
 800ca60:	461a      	mov	r2, r3
 800ca62:	f000 fad6 	bl	800d012 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	2160      	movs	r1, #96	; 0x60
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	f000 fb00 	bl	800d072 <TIM_ITRx_SetConfig>
      break;
 800ca72:	e019      	b.n	800caa8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	6818      	ldr	r0, [r3, #0]
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	6859      	ldr	r1, [r3, #4]
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	68db      	ldr	r3, [r3, #12]
 800ca80:	461a      	mov	r2, r3
 800ca82:	f000 fa97 	bl	800cfb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	2140      	movs	r1, #64	; 0x40
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	f000 faf0 	bl	800d072 <TIM_ITRx_SetConfig>
      break;
 800ca92:	e009      	b.n	800caa8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681a      	ldr	r2, [r3, #0]
 800ca98:	683b      	ldr	r3, [r7, #0]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	4619      	mov	r1, r3
 800ca9e:	4610      	mov	r0, r2
 800caa0:	f000 fae7 	bl	800d072 <TIM_ITRx_SetConfig>
      break;
 800caa4:	e000      	b.n	800caa8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800caa6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	2201      	movs	r2, #1
 800caac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2200      	movs	r2, #0
 800cab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cab8:	2300      	movs	r3, #0
}
 800caba:	4618      	mov	r0, r3
 800cabc:	3710      	adds	r7, #16
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bd80      	pop	{r7, pc}

0800cac2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cac2:	b480      	push	{r7}
 800cac4:	b083      	sub	sp, #12
 800cac6:	af00      	add	r7, sp, #0
 800cac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800caca:	bf00      	nop
 800cacc:	370c      	adds	r7, #12
 800cace:	46bd      	mov	sp, r7
 800cad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad4:	4770      	bx	lr

0800cad6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cad6:	b480      	push	{r7}
 800cad8:	b083      	sub	sp, #12
 800cada:	af00      	add	r7, sp, #0
 800cadc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cade:	bf00      	nop
 800cae0:	370c      	adds	r7, #12
 800cae2:	46bd      	mov	sp, r7
 800cae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae8:	4770      	bx	lr

0800caea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800caea:	b480      	push	{r7}
 800caec:	b083      	sub	sp, #12
 800caee:	af00      	add	r7, sp, #0
 800caf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800caf2:	bf00      	nop
 800caf4:	370c      	adds	r7, #12
 800caf6:	46bd      	mov	sp, r7
 800caf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafc:	4770      	bx	lr

0800cafe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cafe:	b480      	push	{r7}
 800cb00:	b083      	sub	sp, #12
 800cb02:	af00      	add	r7, sp, #0
 800cb04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cb06:	bf00      	nop
 800cb08:	370c      	adds	r7, #12
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb10:	4770      	bx	lr
	...

0800cb14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cb14:	b480      	push	{r7}
 800cb16:	b085      	sub	sp, #20
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
 800cb1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	4a40      	ldr	r2, [pc, #256]	; (800cc28 <TIM_Base_SetConfig+0x114>)
 800cb28:	4293      	cmp	r3, r2
 800cb2a:	d013      	beq.n	800cb54 <TIM_Base_SetConfig+0x40>
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb32:	d00f      	beq.n	800cb54 <TIM_Base_SetConfig+0x40>
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	4a3d      	ldr	r2, [pc, #244]	; (800cc2c <TIM_Base_SetConfig+0x118>)
 800cb38:	4293      	cmp	r3, r2
 800cb3a:	d00b      	beq.n	800cb54 <TIM_Base_SetConfig+0x40>
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	4a3c      	ldr	r2, [pc, #240]	; (800cc30 <TIM_Base_SetConfig+0x11c>)
 800cb40:	4293      	cmp	r3, r2
 800cb42:	d007      	beq.n	800cb54 <TIM_Base_SetConfig+0x40>
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	4a3b      	ldr	r2, [pc, #236]	; (800cc34 <TIM_Base_SetConfig+0x120>)
 800cb48:	4293      	cmp	r3, r2
 800cb4a:	d003      	beq.n	800cb54 <TIM_Base_SetConfig+0x40>
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	4a3a      	ldr	r2, [pc, #232]	; (800cc38 <TIM_Base_SetConfig+0x124>)
 800cb50:	4293      	cmp	r3, r2
 800cb52:	d108      	bne.n	800cb66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	685b      	ldr	r3, [r3, #4]
 800cb60:	68fa      	ldr	r2, [r7, #12]
 800cb62:	4313      	orrs	r3, r2
 800cb64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	4a2f      	ldr	r2, [pc, #188]	; (800cc28 <TIM_Base_SetConfig+0x114>)
 800cb6a:	4293      	cmp	r3, r2
 800cb6c:	d02b      	beq.n	800cbc6 <TIM_Base_SetConfig+0xb2>
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb74:	d027      	beq.n	800cbc6 <TIM_Base_SetConfig+0xb2>
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	4a2c      	ldr	r2, [pc, #176]	; (800cc2c <TIM_Base_SetConfig+0x118>)
 800cb7a:	4293      	cmp	r3, r2
 800cb7c:	d023      	beq.n	800cbc6 <TIM_Base_SetConfig+0xb2>
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	4a2b      	ldr	r2, [pc, #172]	; (800cc30 <TIM_Base_SetConfig+0x11c>)
 800cb82:	4293      	cmp	r3, r2
 800cb84:	d01f      	beq.n	800cbc6 <TIM_Base_SetConfig+0xb2>
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	4a2a      	ldr	r2, [pc, #168]	; (800cc34 <TIM_Base_SetConfig+0x120>)
 800cb8a:	4293      	cmp	r3, r2
 800cb8c:	d01b      	beq.n	800cbc6 <TIM_Base_SetConfig+0xb2>
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	4a29      	ldr	r2, [pc, #164]	; (800cc38 <TIM_Base_SetConfig+0x124>)
 800cb92:	4293      	cmp	r3, r2
 800cb94:	d017      	beq.n	800cbc6 <TIM_Base_SetConfig+0xb2>
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	4a28      	ldr	r2, [pc, #160]	; (800cc3c <TIM_Base_SetConfig+0x128>)
 800cb9a:	4293      	cmp	r3, r2
 800cb9c:	d013      	beq.n	800cbc6 <TIM_Base_SetConfig+0xb2>
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	4a27      	ldr	r2, [pc, #156]	; (800cc40 <TIM_Base_SetConfig+0x12c>)
 800cba2:	4293      	cmp	r3, r2
 800cba4:	d00f      	beq.n	800cbc6 <TIM_Base_SetConfig+0xb2>
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	4a26      	ldr	r2, [pc, #152]	; (800cc44 <TIM_Base_SetConfig+0x130>)
 800cbaa:	4293      	cmp	r3, r2
 800cbac:	d00b      	beq.n	800cbc6 <TIM_Base_SetConfig+0xb2>
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	4a25      	ldr	r2, [pc, #148]	; (800cc48 <TIM_Base_SetConfig+0x134>)
 800cbb2:	4293      	cmp	r3, r2
 800cbb4:	d007      	beq.n	800cbc6 <TIM_Base_SetConfig+0xb2>
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	4a24      	ldr	r2, [pc, #144]	; (800cc4c <TIM_Base_SetConfig+0x138>)
 800cbba:	4293      	cmp	r3, r2
 800cbbc:	d003      	beq.n	800cbc6 <TIM_Base_SetConfig+0xb2>
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	4a23      	ldr	r2, [pc, #140]	; (800cc50 <TIM_Base_SetConfig+0x13c>)
 800cbc2:	4293      	cmp	r3, r2
 800cbc4:	d108      	bne.n	800cbd8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cbcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	68db      	ldr	r3, [r3, #12]
 800cbd2:	68fa      	ldr	r2, [r7, #12]
 800cbd4:	4313      	orrs	r3, r2
 800cbd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	695b      	ldr	r3, [r3, #20]
 800cbe2:	4313      	orrs	r3, r2
 800cbe4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	68fa      	ldr	r2, [r7, #12]
 800cbea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	689a      	ldr	r2, [r3, #8]
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	681a      	ldr	r2, [r3, #0]
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	4a0a      	ldr	r2, [pc, #40]	; (800cc28 <TIM_Base_SetConfig+0x114>)
 800cc00:	4293      	cmp	r3, r2
 800cc02:	d003      	beq.n	800cc0c <TIM_Base_SetConfig+0xf8>
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	4a0c      	ldr	r2, [pc, #48]	; (800cc38 <TIM_Base_SetConfig+0x124>)
 800cc08:	4293      	cmp	r3, r2
 800cc0a:	d103      	bne.n	800cc14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cc0c:	683b      	ldr	r3, [r7, #0]
 800cc0e:	691a      	ldr	r2, [r3, #16]
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2201      	movs	r2, #1
 800cc18:	615a      	str	r2, [r3, #20]
}
 800cc1a:	bf00      	nop
 800cc1c:	3714      	adds	r7, #20
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc24:	4770      	bx	lr
 800cc26:	bf00      	nop
 800cc28:	40010000 	.word	0x40010000
 800cc2c:	40000400 	.word	0x40000400
 800cc30:	40000800 	.word	0x40000800
 800cc34:	40000c00 	.word	0x40000c00
 800cc38:	40010400 	.word	0x40010400
 800cc3c:	40014000 	.word	0x40014000
 800cc40:	40014400 	.word	0x40014400
 800cc44:	40014800 	.word	0x40014800
 800cc48:	40001800 	.word	0x40001800
 800cc4c:	40001c00 	.word	0x40001c00
 800cc50:	40002000 	.word	0x40002000

0800cc54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cc54:	b480      	push	{r7}
 800cc56:	b087      	sub	sp, #28
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
 800cc5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	6a1b      	ldr	r3, [r3, #32]
 800cc62:	f023 0201 	bic.w	r2, r3, #1
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	6a1b      	ldr	r3, [r3, #32]
 800cc6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	685b      	ldr	r3, [r3, #4]
 800cc74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	699b      	ldr	r3, [r3, #24]
 800cc7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cc82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	f023 0303 	bic.w	r3, r3, #3
 800cc8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cc8c:	683b      	ldr	r3, [r7, #0]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	68fa      	ldr	r2, [r7, #12]
 800cc92:	4313      	orrs	r3, r2
 800cc94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cc96:	697b      	ldr	r3, [r7, #20]
 800cc98:	f023 0302 	bic.w	r3, r3, #2
 800cc9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cc9e:	683b      	ldr	r3, [r7, #0]
 800cca0:	689b      	ldr	r3, [r3, #8]
 800cca2:	697a      	ldr	r2, [r7, #20]
 800cca4:	4313      	orrs	r3, r2
 800cca6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	4a20      	ldr	r2, [pc, #128]	; (800cd2c <TIM_OC1_SetConfig+0xd8>)
 800ccac:	4293      	cmp	r3, r2
 800ccae:	d003      	beq.n	800ccb8 <TIM_OC1_SetConfig+0x64>
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	4a1f      	ldr	r2, [pc, #124]	; (800cd30 <TIM_OC1_SetConfig+0xdc>)
 800ccb4:	4293      	cmp	r3, r2
 800ccb6:	d10c      	bne.n	800ccd2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ccb8:	697b      	ldr	r3, [r7, #20]
 800ccba:	f023 0308 	bic.w	r3, r3, #8
 800ccbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ccc0:	683b      	ldr	r3, [r7, #0]
 800ccc2:	68db      	ldr	r3, [r3, #12]
 800ccc4:	697a      	ldr	r2, [r7, #20]
 800ccc6:	4313      	orrs	r3, r2
 800ccc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ccca:	697b      	ldr	r3, [r7, #20]
 800cccc:	f023 0304 	bic.w	r3, r3, #4
 800ccd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	4a15      	ldr	r2, [pc, #84]	; (800cd2c <TIM_OC1_SetConfig+0xd8>)
 800ccd6:	4293      	cmp	r3, r2
 800ccd8:	d003      	beq.n	800cce2 <TIM_OC1_SetConfig+0x8e>
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	4a14      	ldr	r2, [pc, #80]	; (800cd30 <TIM_OC1_SetConfig+0xdc>)
 800ccde:	4293      	cmp	r3, r2
 800cce0:	d111      	bne.n	800cd06 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800cce2:	693b      	ldr	r3, [r7, #16]
 800cce4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cce8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ccea:	693b      	ldr	r3, [r7, #16]
 800ccec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ccf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	695b      	ldr	r3, [r3, #20]
 800ccf6:	693a      	ldr	r2, [r7, #16]
 800ccf8:	4313      	orrs	r3, r2
 800ccfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ccfc:	683b      	ldr	r3, [r7, #0]
 800ccfe:	699b      	ldr	r3, [r3, #24]
 800cd00:	693a      	ldr	r2, [r7, #16]
 800cd02:	4313      	orrs	r3, r2
 800cd04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	693a      	ldr	r2, [r7, #16]
 800cd0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	68fa      	ldr	r2, [r7, #12]
 800cd10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cd12:	683b      	ldr	r3, [r7, #0]
 800cd14:	685a      	ldr	r2, [r3, #4]
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	697a      	ldr	r2, [r7, #20]
 800cd1e:	621a      	str	r2, [r3, #32]
}
 800cd20:	bf00      	nop
 800cd22:	371c      	adds	r7, #28
 800cd24:	46bd      	mov	sp, r7
 800cd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2a:	4770      	bx	lr
 800cd2c:	40010000 	.word	0x40010000
 800cd30:	40010400 	.word	0x40010400

0800cd34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cd34:	b480      	push	{r7}
 800cd36:	b087      	sub	sp, #28
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
 800cd3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	6a1b      	ldr	r3, [r3, #32]
 800cd42:	f023 0210 	bic.w	r2, r3, #16
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	6a1b      	ldr	r3, [r3, #32]
 800cd4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	685b      	ldr	r3, [r3, #4]
 800cd54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	699b      	ldr	r3, [r3, #24]
 800cd5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cd62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cd6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cd6c:	683b      	ldr	r3, [r7, #0]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	021b      	lsls	r3, r3, #8
 800cd72:	68fa      	ldr	r2, [r7, #12]
 800cd74:	4313      	orrs	r3, r2
 800cd76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cd78:	697b      	ldr	r3, [r7, #20]
 800cd7a:	f023 0320 	bic.w	r3, r3, #32
 800cd7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	689b      	ldr	r3, [r3, #8]
 800cd84:	011b      	lsls	r3, r3, #4
 800cd86:	697a      	ldr	r2, [r7, #20]
 800cd88:	4313      	orrs	r3, r2
 800cd8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	4a22      	ldr	r2, [pc, #136]	; (800ce18 <TIM_OC2_SetConfig+0xe4>)
 800cd90:	4293      	cmp	r3, r2
 800cd92:	d003      	beq.n	800cd9c <TIM_OC2_SetConfig+0x68>
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	4a21      	ldr	r2, [pc, #132]	; (800ce1c <TIM_OC2_SetConfig+0xe8>)
 800cd98:	4293      	cmp	r3, r2
 800cd9a:	d10d      	bne.n	800cdb8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cd9c:	697b      	ldr	r3, [r7, #20]
 800cd9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cda2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	68db      	ldr	r3, [r3, #12]
 800cda8:	011b      	lsls	r3, r3, #4
 800cdaa:	697a      	ldr	r2, [r7, #20]
 800cdac:	4313      	orrs	r3, r2
 800cdae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cdb0:	697b      	ldr	r3, [r7, #20]
 800cdb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cdb6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	4a17      	ldr	r2, [pc, #92]	; (800ce18 <TIM_OC2_SetConfig+0xe4>)
 800cdbc:	4293      	cmp	r3, r2
 800cdbe:	d003      	beq.n	800cdc8 <TIM_OC2_SetConfig+0x94>
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	4a16      	ldr	r2, [pc, #88]	; (800ce1c <TIM_OC2_SetConfig+0xe8>)
 800cdc4:	4293      	cmp	r3, r2
 800cdc6:	d113      	bne.n	800cdf0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cdc8:	693b      	ldr	r3, [r7, #16]
 800cdca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cdce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cdd0:	693b      	ldr	r3, [r7, #16]
 800cdd2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cdd6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cdd8:	683b      	ldr	r3, [r7, #0]
 800cdda:	695b      	ldr	r3, [r3, #20]
 800cddc:	009b      	lsls	r3, r3, #2
 800cdde:	693a      	ldr	r2, [r7, #16]
 800cde0:	4313      	orrs	r3, r2
 800cde2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cde4:	683b      	ldr	r3, [r7, #0]
 800cde6:	699b      	ldr	r3, [r3, #24]
 800cde8:	009b      	lsls	r3, r3, #2
 800cdea:	693a      	ldr	r2, [r7, #16]
 800cdec:	4313      	orrs	r3, r2
 800cdee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	693a      	ldr	r2, [r7, #16]
 800cdf4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	68fa      	ldr	r2, [r7, #12]
 800cdfa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cdfc:	683b      	ldr	r3, [r7, #0]
 800cdfe:	685a      	ldr	r2, [r3, #4]
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	697a      	ldr	r2, [r7, #20]
 800ce08:	621a      	str	r2, [r3, #32]
}
 800ce0a:	bf00      	nop
 800ce0c:	371c      	adds	r7, #28
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce14:	4770      	bx	lr
 800ce16:	bf00      	nop
 800ce18:	40010000 	.word	0x40010000
 800ce1c:	40010400 	.word	0x40010400

0800ce20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ce20:	b480      	push	{r7}
 800ce22:	b087      	sub	sp, #28
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
 800ce28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	6a1b      	ldr	r3, [r3, #32]
 800ce2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	6a1b      	ldr	r3, [r3, #32]
 800ce3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	685b      	ldr	r3, [r3, #4]
 800ce40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	69db      	ldr	r3, [r3, #28]
 800ce46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ce4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	f023 0303 	bic.w	r3, r3, #3
 800ce56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	68fa      	ldr	r2, [r7, #12]
 800ce5e:	4313      	orrs	r3, r2
 800ce60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ce62:	697b      	ldr	r3, [r7, #20]
 800ce64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ce68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ce6a:	683b      	ldr	r3, [r7, #0]
 800ce6c:	689b      	ldr	r3, [r3, #8]
 800ce6e:	021b      	lsls	r3, r3, #8
 800ce70:	697a      	ldr	r2, [r7, #20]
 800ce72:	4313      	orrs	r3, r2
 800ce74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	4a21      	ldr	r2, [pc, #132]	; (800cf00 <TIM_OC3_SetConfig+0xe0>)
 800ce7a:	4293      	cmp	r3, r2
 800ce7c:	d003      	beq.n	800ce86 <TIM_OC3_SetConfig+0x66>
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	4a20      	ldr	r2, [pc, #128]	; (800cf04 <TIM_OC3_SetConfig+0xe4>)
 800ce82:	4293      	cmp	r3, r2
 800ce84:	d10d      	bne.n	800cea2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ce86:	697b      	ldr	r3, [r7, #20]
 800ce88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ce8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ce8e:	683b      	ldr	r3, [r7, #0]
 800ce90:	68db      	ldr	r3, [r3, #12]
 800ce92:	021b      	lsls	r3, r3, #8
 800ce94:	697a      	ldr	r2, [r7, #20]
 800ce96:	4313      	orrs	r3, r2
 800ce98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ce9a:	697b      	ldr	r3, [r7, #20]
 800ce9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800cea0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	4a16      	ldr	r2, [pc, #88]	; (800cf00 <TIM_OC3_SetConfig+0xe0>)
 800cea6:	4293      	cmp	r3, r2
 800cea8:	d003      	beq.n	800ceb2 <TIM_OC3_SetConfig+0x92>
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	4a15      	ldr	r2, [pc, #84]	; (800cf04 <TIM_OC3_SetConfig+0xe4>)
 800ceae:	4293      	cmp	r3, r2
 800ceb0:	d113      	bne.n	800ceda <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ceb2:	693b      	ldr	r3, [r7, #16]
 800ceb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ceb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ceba:	693b      	ldr	r3, [r7, #16]
 800cebc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cec0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	695b      	ldr	r3, [r3, #20]
 800cec6:	011b      	lsls	r3, r3, #4
 800cec8:	693a      	ldr	r2, [r7, #16]
 800ceca:	4313      	orrs	r3, r2
 800cecc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cece:	683b      	ldr	r3, [r7, #0]
 800ced0:	699b      	ldr	r3, [r3, #24]
 800ced2:	011b      	lsls	r3, r3, #4
 800ced4:	693a      	ldr	r2, [r7, #16]
 800ced6:	4313      	orrs	r3, r2
 800ced8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	693a      	ldr	r2, [r7, #16]
 800cede:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	68fa      	ldr	r2, [r7, #12]
 800cee4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cee6:	683b      	ldr	r3, [r7, #0]
 800cee8:	685a      	ldr	r2, [r3, #4]
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	697a      	ldr	r2, [r7, #20]
 800cef2:	621a      	str	r2, [r3, #32]
}
 800cef4:	bf00      	nop
 800cef6:	371c      	adds	r7, #28
 800cef8:	46bd      	mov	sp, r7
 800cefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefe:	4770      	bx	lr
 800cf00:	40010000 	.word	0x40010000
 800cf04:	40010400 	.word	0x40010400

0800cf08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800cf08:	b480      	push	{r7}
 800cf0a:	b087      	sub	sp, #28
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
 800cf10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	6a1b      	ldr	r3, [r3, #32]
 800cf16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	6a1b      	ldr	r3, [r3, #32]
 800cf22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	685b      	ldr	r3, [r3, #4]
 800cf28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	69db      	ldr	r3, [r3, #28]
 800cf2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cf36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cf3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cf40:	683b      	ldr	r3, [r7, #0]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	021b      	lsls	r3, r3, #8
 800cf46:	68fa      	ldr	r2, [r7, #12]
 800cf48:	4313      	orrs	r3, r2
 800cf4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cf4c:	693b      	ldr	r3, [r7, #16]
 800cf4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800cf52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	689b      	ldr	r3, [r3, #8]
 800cf58:	031b      	lsls	r3, r3, #12
 800cf5a:	693a      	ldr	r2, [r7, #16]
 800cf5c:	4313      	orrs	r3, r2
 800cf5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	4a12      	ldr	r2, [pc, #72]	; (800cfac <TIM_OC4_SetConfig+0xa4>)
 800cf64:	4293      	cmp	r3, r2
 800cf66:	d003      	beq.n	800cf70 <TIM_OC4_SetConfig+0x68>
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	4a11      	ldr	r2, [pc, #68]	; (800cfb0 <TIM_OC4_SetConfig+0xa8>)
 800cf6c:	4293      	cmp	r3, r2
 800cf6e:	d109      	bne.n	800cf84 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cf70:	697b      	ldr	r3, [r7, #20]
 800cf72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cf76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cf78:	683b      	ldr	r3, [r7, #0]
 800cf7a:	695b      	ldr	r3, [r3, #20]
 800cf7c:	019b      	lsls	r3, r3, #6
 800cf7e:	697a      	ldr	r2, [r7, #20]
 800cf80:	4313      	orrs	r3, r2
 800cf82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	697a      	ldr	r2, [r7, #20]
 800cf88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	68fa      	ldr	r2, [r7, #12]
 800cf8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cf90:	683b      	ldr	r3, [r7, #0]
 800cf92:	685a      	ldr	r2, [r3, #4]
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	693a      	ldr	r2, [r7, #16]
 800cf9c:	621a      	str	r2, [r3, #32]
}
 800cf9e:	bf00      	nop
 800cfa0:	371c      	adds	r7, #28
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa8:	4770      	bx	lr
 800cfaa:	bf00      	nop
 800cfac:	40010000 	.word	0x40010000
 800cfb0:	40010400 	.word	0x40010400

0800cfb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cfb4:	b480      	push	{r7}
 800cfb6:	b087      	sub	sp, #28
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	60f8      	str	r0, [r7, #12]
 800cfbc:	60b9      	str	r1, [r7, #8]
 800cfbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	6a1b      	ldr	r3, [r3, #32]
 800cfc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	6a1b      	ldr	r3, [r3, #32]
 800cfca:	f023 0201 	bic.w	r2, r3, #1
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	699b      	ldr	r3, [r3, #24]
 800cfd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cfd8:	693b      	ldr	r3, [r7, #16]
 800cfda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cfde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	011b      	lsls	r3, r3, #4
 800cfe4:	693a      	ldr	r2, [r7, #16]
 800cfe6:	4313      	orrs	r3, r2
 800cfe8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cfea:	697b      	ldr	r3, [r7, #20]
 800cfec:	f023 030a 	bic.w	r3, r3, #10
 800cff0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cff2:	697a      	ldr	r2, [r7, #20]
 800cff4:	68bb      	ldr	r3, [r7, #8]
 800cff6:	4313      	orrs	r3, r2
 800cff8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	693a      	ldr	r2, [r7, #16]
 800cffe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	697a      	ldr	r2, [r7, #20]
 800d004:	621a      	str	r2, [r3, #32]
}
 800d006:	bf00      	nop
 800d008:	371c      	adds	r7, #28
 800d00a:	46bd      	mov	sp, r7
 800d00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d010:	4770      	bx	lr

0800d012 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d012:	b480      	push	{r7}
 800d014:	b087      	sub	sp, #28
 800d016:	af00      	add	r7, sp, #0
 800d018:	60f8      	str	r0, [r7, #12]
 800d01a:	60b9      	str	r1, [r7, #8]
 800d01c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	6a1b      	ldr	r3, [r3, #32]
 800d022:	f023 0210 	bic.w	r2, r3, #16
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	699b      	ldr	r3, [r3, #24]
 800d02e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	6a1b      	ldr	r3, [r3, #32]
 800d034:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d036:	697b      	ldr	r3, [r7, #20]
 800d038:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d03c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	031b      	lsls	r3, r3, #12
 800d042:	697a      	ldr	r2, [r7, #20]
 800d044:	4313      	orrs	r3, r2
 800d046:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d048:	693b      	ldr	r3, [r7, #16]
 800d04a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d04e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d050:	68bb      	ldr	r3, [r7, #8]
 800d052:	011b      	lsls	r3, r3, #4
 800d054:	693a      	ldr	r2, [r7, #16]
 800d056:	4313      	orrs	r3, r2
 800d058:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	697a      	ldr	r2, [r7, #20]
 800d05e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	693a      	ldr	r2, [r7, #16]
 800d064:	621a      	str	r2, [r3, #32]
}
 800d066:	bf00      	nop
 800d068:	371c      	adds	r7, #28
 800d06a:	46bd      	mov	sp, r7
 800d06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d070:	4770      	bx	lr

0800d072 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d072:	b480      	push	{r7}
 800d074:	b085      	sub	sp, #20
 800d076:	af00      	add	r7, sp, #0
 800d078:	6078      	str	r0, [r7, #4]
 800d07a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	689b      	ldr	r3, [r3, #8]
 800d080:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d088:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d08a:	683a      	ldr	r2, [r7, #0]
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	4313      	orrs	r3, r2
 800d090:	f043 0307 	orr.w	r3, r3, #7
 800d094:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	68fa      	ldr	r2, [r7, #12]
 800d09a:	609a      	str	r2, [r3, #8]
}
 800d09c:	bf00      	nop
 800d09e:	3714      	adds	r7, #20
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a6:	4770      	bx	lr

0800d0a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d0a8:	b480      	push	{r7}
 800d0aa:	b087      	sub	sp, #28
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	60f8      	str	r0, [r7, #12]
 800d0b0:	60b9      	str	r1, [r7, #8]
 800d0b2:	607a      	str	r2, [r7, #4]
 800d0b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	689b      	ldr	r3, [r3, #8]
 800d0ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d0bc:	697b      	ldr	r3, [r7, #20]
 800d0be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d0c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d0c4:	683b      	ldr	r3, [r7, #0]
 800d0c6:	021a      	lsls	r2, r3, #8
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	431a      	orrs	r2, r3
 800d0cc:	68bb      	ldr	r3, [r7, #8]
 800d0ce:	4313      	orrs	r3, r2
 800d0d0:	697a      	ldr	r2, [r7, #20]
 800d0d2:	4313      	orrs	r3, r2
 800d0d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	697a      	ldr	r2, [r7, #20]
 800d0da:	609a      	str	r2, [r3, #8]
}
 800d0dc:	bf00      	nop
 800d0de:	371c      	adds	r7, #28
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e6:	4770      	bx	lr

0800d0e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d0e8:	b480      	push	{r7}
 800d0ea:	b087      	sub	sp, #28
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	60f8      	str	r0, [r7, #12]
 800d0f0:	60b9      	str	r1, [r7, #8]
 800d0f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d0f4:	68bb      	ldr	r3, [r7, #8]
 800d0f6:	f003 031f 	and.w	r3, r3, #31
 800d0fa:	2201      	movs	r2, #1
 800d0fc:	fa02 f303 	lsl.w	r3, r2, r3
 800d100:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	6a1a      	ldr	r2, [r3, #32]
 800d106:	697b      	ldr	r3, [r7, #20]
 800d108:	43db      	mvns	r3, r3
 800d10a:	401a      	ands	r2, r3
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	6a1a      	ldr	r2, [r3, #32]
 800d114:	68bb      	ldr	r3, [r7, #8]
 800d116:	f003 031f 	and.w	r3, r3, #31
 800d11a:	6879      	ldr	r1, [r7, #4]
 800d11c:	fa01 f303 	lsl.w	r3, r1, r3
 800d120:	431a      	orrs	r2, r3
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	621a      	str	r2, [r3, #32]
}
 800d126:	bf00      	nop
 800d128:	371c      	adds	r7, #28
 800d12a:	46bd      	mov	sp, r7
 800d12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d130:	4770      	bx	lr

0800d132 <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d132:	b580      	push	{r7, lr}
 800d134:	b084      	sub	sp, #16
 800d136:	af00      	add	r7, sp, #0
 800d138:	6078      	str	r0, [r7, #4]
 800d13a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800d13c:	683b      	ldr	r3, [r7, #0]
 800d13e:	2b04      	cmp	r3, #4
 800d140:	d00d      	beq.n	800d15e <HAL_TIMEx_PWMN_Start_IT+0x2c>
 800d142:	2b08      	cmp	r3, #8
 800d144:	d014      	beq.n	800d170 <HAL_TIMEx_PWMN_Start_IT+0x3e>
 800d146:	2b00      	cmp	r3, #0
 800d148:	d000      	beq.n	800d14c <HAL_TIMEx_PWMN_Start_IT+0x1a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 800d14a:	e01a      	b.n	800d182 <HAL_TIMEx_PWMN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	68da      	ldr	r2, [r3, #12]
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	f042 0202 	orr.w	r2, r2, #2
 800d15a:	60da      	str	r2, [r3, #12]
      break;
 800d15c:	e011      	b.n	800d182 <HAL_TIMEx_PWMN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	68da      	ldr	r2, [r3, #12]
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	f042 0204 	orr.w	r2, r2, #4
 800d16c:	60da      	str	r2, [r3, #12]
      break;
 800d16e:	e008      	b.n	800d182 <HAL_TIMEx_PWMN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	681b      	ldr	r3, [r3, #0]
 800d174:	68da      	ldr	r2, [r3, #12]
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	f042 0208 	orr.w	r2, r2, #8
 800d17e:	60da      	str	r2, [r3, #12]
      break;
 800d180:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	68da      	ldr	r2, [r3, #12]
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d190:	60da      	str	r2, [r3, #12]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	2204      	movs	r2, #4
 800d198:	6839      	ldr	r1, [r7, #0]
 800d19a:	4618      	mov	r0, r3
 800d19c:	f000 f8c9 	bl	800d332 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d1ae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	689b      	ldr	r3, [r3, #8]
 800d1b6:	f003 0307 	and.w	r3, r3, #7
 800d1ba:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	2b06      	cmp	r3, #6
 800d1c0:	d007      	beq.n	800d1d2 <HAL_TIMEx_PWMN_Start_IT+0xa0>
  {
    __HAL_TIM_ENABLE(htim);
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	681a      	ldr	r2, [r3, #0]
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	f042 0201 	orr.w	r2, r2, #1
 800d1d0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d1d2:	2300      	movs	r3, #0
}
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	3710      	adds	r7, #16
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	bd80      	pop	{r7, pc}

0800d1dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d1dc:	b480      	push	{r7}
 800d1de:	b085      	sub	sp, #20
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
 800d1e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d1ec:	2b01      	cmp	r3, #1
 800d1ee:	d101      	bne.n	800d1f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d1f0:	2302      	movs	r3, #2
 800d1f2:	e032      	b.n	800d25a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	2201      	movs	r2, #1
 800d1f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	2202      	movs	r2, #2
 800d200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	685b      	ldr	r3, [r3, #4]
 800d20a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	689b      	ldr	r3, [r3, #8]
 800d212:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d21a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d21c:	683b      	ldr	r3, [r7, #0]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	68fa      	ldr	r2, [r7, #12]
 800d222:	4313      	orrs	r3, r2
 800d224:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800d226:	68bb      	ldr	r3, [r7, #8]
 800d228:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d22c:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d22e:	683b      	ldr	r3, [r7, #0]
 800d230:	685b      	ldr	r3, [r3, #4]
 800d232:	68ba      	ldr	r2, [r7, #8]
 800d234:	4313      	orrs	r3, r2
 800d236:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	68fa      	ldr	r2, [r7, #12]
 800d23e:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	68ba      	ldr	r2, [r7, #8]
 800d246:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	2201      	movs	r2, #1
 800d24c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	2200      	movs	r2, #0
 800d254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d258:	2300      	movs	r3, #0
}
 800d25a:	4618      	mov	r0, r3
 800d25c:	3714      	adds	r7, #20
 800d25e:	46bd      	mov	sp, r7
 800d260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d264:	4770      	bx	lr

0800d266 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d266:	b480      	push	{r7}
 800d268:	b085      	sub	sp, #20
 800d26a:	af00      	add	r7, sp, #0
 800d26c:	6078      	str	r0, [r7, #4]
 800d26e:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d270:	2300      	movs	r3, #0
 800d272:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d27a:	2b01      	cmp	r3, #1
 800d27c:	d101      	bne.n	800d282 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d27e:	2302      	movs	r3, #2
 800d280:	e03d      	b.n	800d2fe <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	2201      	movs	r2, #1
 800d286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	68db      	ldr	r3, [r3, #12]
 800d294:	4313      	orrs	r3, r2
 800d296:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	689b      	ldr	r3, [r3, #8]
 800d2a2:	4313      	orrs	r3, r2
 800d2a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d2ac:	683b      	ldr	r3, [r7, #0]
 800d2ae:	685b      	ldr	r3, [r3, #4]
 800d2b0:	4313      	orrs	r3, r2
 800d2b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d2ba:	683b      	ldr	r3, [r7, #0]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	4313      	orrs	r3, r2
 800d2c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d2c8:	683b      	ldr	r3, [r7, #0]
 800d2ca:	691b      	ldr	r3, [r3, #16]
 800d2cc:	4313      	orrs	r3, r2
 800d2ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d2d6:	683b      	ldr	r3, [r7, #0]
 800d2d8:	695b      	ldr	r3, [r3, #20]
 800d2da:	4313      	orrs	r3, r2
 800d2dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d2e4:	683b      	ldr	r3, [r7, #0]
 800d2e6:	69db      	ldr	r3, [r3, #28]
 800d2e8:	4313      	orrs	r3, r2
 800d2ea:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	68fa      	ldr	r2, [r7, #12]
 800d2f2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d2fc:	2300      	movs	r3, #0
}
 800d2fe:	4618      	mov	r0, r3
 800d300:	3714      	adds	r7, #20
 800d302:	46bd      	mov	sp, r7
 800d304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d308:	4770      	bx	lr

0800d30a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d30a:	b480      	push	{r7}
 800d30c:	b083      	sub	sp, #12
 800d30e:	af00      	add	r7, sp, #0
 800d310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d312:	bf00      	nop
 800d314:	370c      	adds	r7, #12
 800d316:	46bd      	mov	sp, r7
 800d318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d31c:	4770      	bx	lr

0800d31e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d31e:	b480      	push	{r7}
 800d320:	b083      	sub	sp, #12
 800d322:	af00      	add	r7, sp, #0
 800d324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d326:	bf00      	nop
 800d328:	370c      	adds	r7, #12
 800d32a:	46bd      	mov	sp, r7
 800d32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d330:	4770      	bx	lr

0800d332 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800d332:	b480      	push	{r7}
 800d334:	b087      	sub	sp, #28
 800d336:	af00      	add	r7, sp, #0
 800d338:	60f8      	str	r0, [r7, #12]
 800d33a:	60b9      	str	r1, [r7, #8]
 800d33c:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d33e:	68bb      	ldr	r3, [r7, #8]
 800d340:	f003 031f 	and.w	r3, r3, #31
 800d344:	2204      	movs	r2, #4
 800d346:	fa02 f303 	lsl.w	r3, r2, r3
 800d34a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	6a1a      	ldr	r2, [r3, #32]
 800d350:	697b      	ldr	r3, [r7, #20]
 800d352:	43db      	mvns	r3, r3
 800d354:	401a      	ands	r2, r3
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	6a1a      	ldr	r2, [r3, #32]
 800d35e:	68bb      	ldr	r3, [r7, #8]
 800d360:	f003 031f 	and.w	r3, r3, #31
 800d364:	6879      	ldr	r1, [r7, #4]
 800d366:	fa01 f303 	lsl.w	r3, r1, r3
 800d36a:	431a      	orrs	r2, r3
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	621a      	str	r2, [r3, #32]
}
 800d370:	bf00      	nop
 800d372:	371c      	adds	r7, #28
 800d374:	46bd      	mov	sp, r7
 800d376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37a:	4770      	bx	lr

0800d37c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b082      	sub	sp, #8
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d101      	bne.n	800d38e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d38a:	2301      	movs	r3, #1
 800d38c:	e03f      	b.n	800d40e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d394:	b2db      	uxtb	r3, r3
 800d396:	2b00      	cmp	r3, #0
 800d398:	d106      	bne.n	800d3a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	2200      	movs	r2, #0
 800d39e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d3a2:	6878      	ldr	r0, [r7, #4]
 800d3a4:	f003 fd2e 	bl	8010e04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	2224      	movs	r2, #36	; 0x24
 800d3ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	68da      	ldr	r2, [r3, #12]
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d3be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d3c0:	6878      	ldr	r0, [r7, #4]
 800d3c2:	f000 fa65 	bl	800d890 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	691a      	ldr	r2, [r3, #16]
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d3d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	695a      	ldr	r2, [r3, #20]
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d3e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	68da      	ldr	r2, [r3, #12]
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d3f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	2220      	movs	r2, #32
 800d400:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	2220      	movs	r2, #32
 800d408:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800d40c:	2300      	movs	r3, #0
}
 800d40e:	4618      	mov	r0, r3
 800d410:	3708      	adds	r7, #8
 800d412:	46bd      	mov	sp, r7
 800d414:	bd80      	pop	{r7, pc}
	...

0800d418 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b088      	sub	sp, #32
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	68db      	ldr	r3, [r3, #12]
 800d42e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	695b      	ldr	r3, [r3, #20]
 800d436:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800d438:	2300      	movs	r3, #0
 800d43a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800d43c:	2300      	movs	r3, #0
 800d43e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800d440:	69fb      	ldr	r3, [r7, #28]
 800d442:	f003 030f 	and.w	r3, r3, #15
 800d446:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800d448:	693b      	ldr	r3, [r7, #16]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d10d      	bne.n	800d46a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d44e:	69fb      	ldr	r3, [r7, #28]
 800d450:	f003 0320 	and.w	r3, r3, #32
 800d454:	2b00      	cmp	r3, #0
 800d456:	d008      	beq.n	800d46a <HAL_UART_IRQHandler+0x52>
 800d458:	69bb      	ldr	r3, [r7, #24]
 800d45a:	f003 0320 	and.w	r3, r3, #32
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d003      	beq.n	800d46a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800d462:	6878      	ldr	r0, [r7, #4]
 800d464:	f000 f992 	bl	800d78c <UART_Receive_IT>
      return;
 800d468:	e0cc      	b.n	800d604 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800d46a:	693b      	ldr	r3, [r7, #16]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	f000 80ab 	beq.w	800d5c8 <HAL_UART_IRQHandler+0x1b0>
 800d472:	697b      	ldr	r3, [r7, #20]
 800d474:	f003 0301 	and.w	r3, r3, #1
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d105      	bne.n	800d488 <HAL_UART_IRQHandler+0x70>
 800d47c:	69bb      	ldr	r3, [r7, #24]
 800d47e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800d482:	2b00      	cmp	r3, #0
 800d484:	f000 80a0 	beq.w	800d5c8 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800d488:	69fb      	ldr	r3, [r7, #28]
 800d48a:	f003 0301 	and.w	r3, r3, #1
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d00a      	beq.n	800d4a8 <HAL_UART_IRQHandler+0x90>
 800d492:	69bb      	ldr	r3, [r7, #24]
 800d494:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d005      	beq.n	800d4a8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4a0:	f043 0201 	orr.w	r2, r3, #1
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d4a8:	69fb      	ldr	r3, [r7, #28]
 800d4aa:	f003 0304 	and.w	r3, r3, #4
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d00a      	beq.n	800d4c8 <HAL_UART_IRQHandler+0xb0>
 800d4b2:	697b      	ldr	r3, [r7, #20]
 800d4b4:	f003 0301 	and.w	r3, r3, #1
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d005      	beq.n	800d4c8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4c0:	f043 0202 	orr.w	r2, r3, #2
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d4c8:	69fb      	ldr	r3, [r7, #28]
 800d4ca:	f003 0302 	and.w	r3, r3, #2
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d00a      	beq.n	800d4e8 <HAL_UART_IRQHandler+0xd0>
 800d4d2:	697b      	ldr	r3, [r7, #20]
 800d4d4:	f003 0301 	and.w	r3, r3, #1
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d005      	beq.n	800d4e8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4e0:	f043 0204 	orr.w	r2, r3, #4
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d4e8:	69fb      	ldr	r3, [r7, #28]
 800d4ea:	f003 0308 	and.w	r3, r3, #8
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d00a      	beq.n	800d508 <HAL_UART_IRQHandler+0xf0>
 800d4f2:	697b      	ldr	r3, [r7, #20]
 800d4f4:	f003 0301 	and.w	r3, r3, #1
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d005      	beq.n	800d508 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d500:	f043 0208 	orr.w	r2, r3, #8
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d078      	beq.n	800d602 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d510:	69fb      	ldr	r3, [r7, #28]
 800d512:	f003 0320 	and.w	r3, r3, #32
 800d516:	2b00      	cmp	r3, #0
 800d518:	d007      	beq.n	800d52a <HAL_UART_IRQHandler+0x112>
 800d51a:	69bb      	ldr	r3, [r7, #24]
 800d51c:	f003 0320 	and.w	r3, r3, #32
 800d520:	2b00      	cmp	r3, #0
 800d522:	d002      	beq.n	800d52a <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800d524:	6878      	ldr	r0, [r7, #4]
 800d526:	f000 f931 	bl	800d78c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	695b      	ldr	r3, [r3, #20]
 800d530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d534:	2b40      	cmp	r3, #64	; 0x40
 800d536:	bf0c      	ite	eq
 800d538:	2301      	moveq	r3, #1
 800d53a:	2300      	movne	r3, #0
 800d53c:	b2db      	uxtb	r3, r3
 800d53e:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d544:	f003 0308 	and.w	r3, r3, #8
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d102      	bne.n	800d552 <HAL_UART_IRQHandler+0x13a>
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d031      	beq.n	800d5b6 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d552:	6878      	ldr	r0, [r7, #4]
 800d554:	f000 f87a 	bl	800d64c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	695b      	ldr	r3, [r3, #20]
 800d55e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d562:	2b40      	cmp	r3, #64	; 0x40
 800d564:	d123      	bne.n	800d5ae <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	695a      	ldr	r2, [r3, #20]
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d574:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d013      	beq.n	800d5a6 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d582:	4a22      	ldr	r2, [pc, #136]	; (800d60c <HAL_UART_IRQHandler+0x1f4>)
 800d584:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d58a:	4618      	mov	r0, r3
 800d58c:	f7fc fec8 	bl	800a320 <HAL_DMA_Abort_IT>
 800d590:	4603      	mov	r3, r0
 800d592:	2b00      	cmp	r3, #0
 800d594:	d016      	beq.n	800d5c4 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d59a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d59c:	687a      	ldr	r2, [r7, #4]
 800d59e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800d5a0:	4610      	mov	r0, r2
 800d5a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d5a4:	e00e      	b.n	800d5c4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800d5a6:	6878      	ldr	r0, [r7, #4]
 800d5a8:	f000 f846 	bl	800d638 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d5ac:	e00a      	b.n	800d5c4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d5ae:	6878      	ldr	r0, [r7, #4]
 800d5b0:	f000 f842 	bl	800d638 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d5b4:	e006      	b.n	800d5c4 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d5b6:	6878      	ldr	r0, [r7, #4]
 800d5b8:	f000 f83e 	bl	800d638 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	2200      	movs	r2, #0
 800d5c0:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800d5c2:	e01e      	b.n	800d602 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d5c4:	bf00      	nop
    return;
 800d5c6:	e01c      	b.n	800d602 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800d5c8:	69fb      	ldr	r3, [r7, #28]
 800d5ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d008      	beq.n	800d5e4 <HAL_UART_IRQHandler+0x1cc>
 800d5d2:	69bb      	ldr	r3, [r7, #24]
 800d5d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d003      	beq.n	800d5e4 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 800d5dc:	6878      	ldr	r0, [r7, #4]
 800d5de:	f000 f867 	bl	800d6b0 <UART_Transmit_IT>
    return;
 800d5e2:	e00f      	b.n	800d604 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800d5e4:	69fb      	ldr	r3, [r7, #28]
 800d5e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d00a      	beq.n	800d604 <HAL_UART_IRQHandler+0x1ec>
 800d5ee:	69bb      	ldr	r3, [r7, #24]
 800d5f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d005      	beq.n	800d604 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800d5f8:	6878      	ldr	r0, [r7, #4]
 800d5fa:	f000 f8af 	bl	800d75c <UART_EndTransmit_IT>
    return;
 800d5fe:	bf00      	nop
 800d600:	e000      	b.n	800d604 <HAL_UART_IRQHandler+0x1ec>
    return;
 800d602:	bf00      	nop
  }
}
 800d604:	3720      	adds	r7, #32
 800d606:	46bd      	mov	sp, r7
 800d608:	bd80      	pop	{r7, pc}
 800d60a:	bf00      	nop
 800d60c:	0800d689 	.word	0x0800d689

0800d610 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d610:	b480      	push	{r7}
 800d612:	b083      	sub	sp, #12
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800d618:	bf00      	nop
 800d61a:	370c      	adds	r7, #12
 800d61c:	46bd      	mov	sp, r7
 800d61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d622:	4770      	bx	lr

0800d624 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800d624:	b480      	push	{r7}
 800d626:	b083      	sub	sp, #12
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800d62c:	bf00      	nop
 800d62e:	370c      	adds	r7, #12
 800d630:	46bd      	mov	sp, r7
 800d632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d636:	4770      	bx	lr

0800d638 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d638:	b480      	push	{r7}
 800d63a:	b083      	sub	sp, #12
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800d640:	bf00      	nop
 800d642:	370c      	adds	r7, #12
 800d644:	46bd      	mov	sp, r7
 800d646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64a:	4770      	bx	lr

0800d64c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d64c:	b480      	push	{r7}
 800d64e:	b083      	sub	sp, #12
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	68da      	ldr	r2, [r3, #12]
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d662:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	695a      	ldr	r2, [r3, #20]
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	f022 0201 	bic.w	r2, r2, #1
 800d672:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2220      	movs	r2, #32
 800d678:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800d67c:	bf00      	nop
 800d67e:	370c      	adds	r7, #12
 800d680:	46bd      	mov	sp, r7
 800d682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d686:	4770      	bx	lr

0800d688 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d688:	b580      	push	{r7, lr}
 800d68a:	b084      	sub	sp, #16
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d694:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	2200      	movs	r2, #0
 800d69a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	2200      	movs	r2, #0
 800d6a0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d6a2:	68f8      	ldr	r0, [r7, #12]
 800d6a4:	f7ff ffc8 	bl	800d638 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d6a8:	bf00      	nop
 800d6aa:	3710      	adds	r7, #16
 800d6ac:	46bd      	mov	sp, r7
 800d6ae:	bd80      	pop	{r7, pc}

0800d6b0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800d6b0:	b480      	push	{r7}
 800d6b2:	b085      	sub	sp, #20
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d6be:	b2db      	uxtb	r3, r3
 800d6c0:	2b21      	cmp	r3, #33	; 0x21
 800d6c2:	d144      	bne.n	800d74e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	689b      	ldr	r3, [r3, #8]
 800d6c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d6cc:	d11a      	bne.n	800d704 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	6a1b      	ldr	r3, [r3, #32]
 800d6d2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	881b      	ldrh	r3, [r3, #0]
 800d6d8:	461a      	mov	r2, r3
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d6e2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	691b      	ldr	r3, [r3, #16]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d105      	bne.n	800d6f8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	6a1b      	ldr	r3, [r3, #32]
 800d6f0:	1c9a      	adds	r2, r3, #2
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	621a      	str	r2, [r3, #32]
 800d6f6:	e00e      	b.n	800d716 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	6a1b      	ldr	r3, [r3, #32]
 800d6fc:	1c5a      	adds	r2, r3, #1
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	621a      	str	r2, [r3, #32]
 800d702:	e008      	b.n	800d716 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	6a1b      	ldr	r3, [r3, #32]
 800d708:	1c59      	adds	r1, r3, #1
 800d70a:	687a      	ldr	r2, [r7, #4]
 800d70c:	6211      	str	r1, [r2, #32]
 800d70e:	781a      	ldrb	r2, [r3, #0]
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800d71a:	b29b      	uxth	r3, r3
 800d71c:	3b01      	subs	r3, #1
 800d71e:	b29b      	uxth	r3, r3
 800d720:	687a      	ldr	r2, [r7, #4]
 800d722:	4619      	mov	r1, r3
 800d724:	84d1      	strh	r1, [r2, #38]	; 0x26
 800d726:	2b00      	cmp	r3, #0
 800d728:	d10f      	bne.n	800d74a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	68da      	ldr	r2, [r3, #12]
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d738:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	68da      	ldr	r2, [r3, #12]
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d748:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800d74a:	2300      	movs	r3, #0
 800d74c:	e000      	b.n	800d750 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800d74e:	2302      	movs	r3, #2
  }
}
 800d750:	4618      	mov	r0, r3
 800d752:	3714      	adds	r7, #20
 800d754:	46bd      	mov	sp, r7
 800d756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75a:	4770      	bx	lr

0800d75c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b082      	sub	sp, #8
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	68da      	ldr	r2, [r3, #12]
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d772:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	2220      	movs	r2, #32
 800d778:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d77c:	6878      	ldr	r0, [r7, #4]
 800d77e:	f7ff ff47 	bl	800d610 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800d782:	2300      	movs	r3, #0
}
 800d784:	4618      	mov	r0, r3
 800d786:	3708      	adds	r7, #8
 800d788:	46bd      	mov	sp, r7
 800d78a:	bd80      	pop	{r7, pc}

0800d78c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b084      	sub	sp, #16
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800d79a:	b2db      	uxtb	r3, r3
 800d79c:	2b22      	cmp	r3, #34	; 0x22
 800d79e:	d171      	bne.n	800d884 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	689b      	ldr	r3, [r3, #8]
 800d7a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d7a8:	d123      	bne.n	800d7f2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7ae:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	691b      	ldr	r3, [r3, #16]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d10e      	bne.n	800d7d6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	685b      	ldr	r3, [r3, #4]
 800d7be:	b29b      	uxth	r3, r3
 800d7c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7c4:	b29a      	uxth	r2, r3
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7ce:	1c9a      	adds	r2, r3, #2
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	629a      	str	r2, [r3, #40]	; 0x28
 800d7d4:	e029      	b.n	800d82a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	685b      	ldr	r3, [r3, #4]
 800d7dc:	b29b      	uxth	r3, r3
 800d7de:	b2db      	uxtb	r3, r3
 800d7e0:	b29a      	uxth	r2, r3
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7ea:	1c5a      	adds	r2, r3, #1
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	629a      	str	r2, [r3, #40]	; 0x28
 800d7f0:	e01b      	b.n	800d82a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	691b      	ldr	r3, [r3, #16]
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d10a      	bne.n	800d810 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	6858      	ldr	r0, [r3, #4]
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d804:	1c59      	adds	r1, r3, #1
 800d806:	687a      	ldr	r2, [r7, #4]
 800d808:	6291      	str	r1, [r2, #40]	; 0x28
 800d80a:	b2c2      	uxtb	r2, r0
 800d80c:	701a      	strb	r2, [r3, #0]
 800d80e:	e00c      	b.n	800d82a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	685b      	ldr	r3, [r3, #4]
 800d816:	b2da      	uxtb	r2, r3
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d81c:	1c58      	adds	r0, r3, #1
 800d81e:	6879      	ldr	r1, [r7, #4]
 800d820:	6288      	str	r0, [r1, #40]	; 0x28
 800d822:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d826:	b2d2      	uxtb	r2, r2
 800d828:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800d82e:	b29b      	uxth	r3, r3
 800d830:	3b01      	subs	r3, #1
 800d832:	b29b      	uxth	r3, r3
 800d834:	687a      	ldr	r2, [r7, #4]
 800d836:	4619      	mov	r1, r3
 800d838:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d120      	bne.n	800d880 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	68da      	ldr	r2, [r3, #12]
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	f022 0220 	bic.w	r2, r2, #32
 800d84c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	68da      	ldr	r2, [r3, #12]
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d85c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	695a      	ldr	r2, [r3, #20]
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	f022 0201 	bic.w	r2, r2, #1
 800d86c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	2220      	movs	r2, #32
 800d872:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800d876:	6878      	ldr	r0, [r7, #4]
 800d878:	f7ff fed4 	bl	800d624 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800d87c:	2300      	movs	r3, #0
 800d87e:	e002      	b.n	800d886 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800d880:	2300      	movs	r3, #0
 800d882:	e000      	b.n	800d886 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800d884:	2302      	movs	r3, #2
  }
}
 800d886:	4618      	mov	r0, r3
 800d888:	3710      	adds	r7, #16
 800d88a:	46bd      	mov	sp, r7
 800d88c:	bd80      	pop	{r7, pc}
	...

0800d890 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d890:	b5b0      	push	{r4, r5, r7, lr}
 800d892:	b084      	sub	sp, #16
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	691b      	ldr	r3, [r3, #16]
 800d89e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	68da      	ldr	r2, [r3, #12]
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	430a      	orrs	r2, r1
 800d8ac:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	689a      	ldr	r2, [r3, #8]
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	691b      	ldr	r3, [r3, #16]
 800d8b6:	431a      	orrs	r2, r3
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	695b      	ldr	r3, [r3, #20]
 800d8bc:	431a      	orrs	r2, r3
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	69db      	ldr	r3, [r3, #28]
 800d8c2:	4313      	orrs	r3, r2
 800d8c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	68db      	ldr	r3, [r3, #12]
 800d8cc:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800d8d0:	f023 030c 	bic.w	r3, r3, #12
 800d8d4:	687a      	ldr	r2, [r7, #4]
 800d8d6:	6812      	ldr	r2, [r2, #0]
 800d8d8:	68f9      	ldr	r1, [r7, #12]
 800d8da:	430b      	orrs	r3, r1
 800d8dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	695b      	ldr	r3, [r3, #20]
 800d8e4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	699a      	ldr	r2, [r3, #24]
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	430a      	orrs	r2, r1
 800d8f2:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	69db      	ldr	r3, [r3, #28]
 800d8f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d8fc:	f040 80e4 	bne.w	800dac8 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	4aab      	ldr	r2, [pc, #684]	; (800dbb4 <UART_SetConfig+0x324>)
 800d906:	4293      	cmp	r3, r2
 800d908:	d004      	beq.n	800d914 <UART_SetConfig+0x84>
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	4aaa      	ldr	r2, [pc, #680]	; (800dbb8 <UART_SetConfig+0x328>)
 800d910:	4293      	cmp	r3, r2
 800d912:	d16c      	bne.n	800d9ee <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800d914:	f7fd fd52 	bl	800b3bc <HAL_RCC_GetPCLK2Freq>
 800d918:	4602      	mov	r2, r0
 800d91a:	4613      	mov	r3, r2
 800d91c:	009b      	lsls	r3, r3, #2
 800d91e:	4413      	add	r3, r2
 800d920:	009a      	lsls	r2, r3, #2
 800d922:	441a      	add	r2, r3
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	685b      	ldr	r3, [r3, #4]
 800d928:	005b      	lsls	r3, r3, #1
 800d92a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d92e:	4aa3      	ldr	r2, [pc, #652]	; (800dbbc <UART_SetConfig+0x32c>)
 800d930:	fba2 2303 	umull	r2, r3, r2, r3
 800d934:	095b      	lsrs	r3, r3, #5
 800d936:	011c      	lsls	r4, r3, #4
 800d938:	f7fd fd40 	bl	800b3bc <HAL_RCC_GetPCLK2Freq>
 800d93c:	4602      	mov	r2, r0
 800d93e:	4613      	mov	r3, r2
 800d940:	009b      	lsls	r3, r3, #2
 800d942:	4413      	add	r3, r2
 800d944:	009a      	lsls	r2, r3, #2
 800d946:	441a      	add	r2, r3
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	685b      	ldr	r3, [r3, #4]
 800d94c:	005b      	lsls	r3, r3, #1
 800d94e:	fbb2 f5f3 	udiv	r5, r2, r3
 800d952:	f7fd fd33 	bl	800b3bc <HAL_RCC_GetPCLK2Freq>
 800d956:	4602      	mov	r2, r0
 800d958:	4613      	mov	r3, r2
 800d95a:	009b      	lsls	r3, r3, #2
 800d95c:	4413      	add	r3, r2
 800d95e:	009a      	lsls	r2, r3, #2
 800d960:	441a      	add	r2, r3
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	685b      	ldr	r3, [r3, #4]
 800d966:	005b      	lsls	r3, r3, #1
 800d968:	fbb2 f3f3 	udiv	r3, r2, r3
 800d96c:	4a93      	ldr	r2, [pc, #588]	; (800dbbc <UART_SetConfig+0x32c>)
 800d96e:	fba2 2303 	umull	r2, r3, r2, r3
 800d972:	095b      	lsrs	r3, r3, #5
 800d974:	2264      	movs	r2, #100	; 0x64
 800d976:	fb02 f303 	mul.w	r3, r2, r3
 800d97a:	1aeb      	subs	r3, r5, r3
 800d97c:	00db      	lsls	r3, r3, #3
 800d97e:	3332      	adds	r3, #50	; 0x32
 800d980:	4a8e      	ldr	r2, [pc, #568]	; (800dbbc <UART_SetConfig+0x32c>)
 800d982:	fba2 2303 	umull	r2, r3, r2, r3
 800d986:	095b      	lsrs	r3, r3, #5
 800d988:	005b      	lsls	r3, r3, #1
 800d98a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800d98e:	441c      	add	r4, r3
 800d990:	f7fd fd14 	bl	800b3bc <HAL_RCC_GetPCLK2Freq>
 800d994:	4602      	mov	r2, r0
 800d996:	4613      	mov	r3, r2
 800d998:	009b      	lsls	r3, r3, #2
 800d99a:	4413      	add	r3, r2
 800d99c:	009a      	lsls	r2, r3, #2
 800d99e:	441a      	add	r2, r3
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	685b      	ldr	r3, [r3, #4]
 800d9a4:	005b      	lsls	r3, r3, #1
 800d9a6:	fbb2 f5f3 	udiv	r5, r2, r3
 800d9aa:	f7fd fd07 	bl	800b3bc <HAL_RCC_GetPCLK2Freq>
 800d9ae:	4602      	mov	r2, r0
 800d9b0:	4613      	mov	r3, r2
 800d9b2:	009b      	lsls	r3, r3, #2
 800d9b4:	4413      	add	r3, r2
 800d9b6:	009a      	lsls	r2, r3, #2
 800d9b8:	441a      	add	r2, r3
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	685b      	ldr	r3, [r3, #4]
 800d9be:	005b      	lsls	r3, r3, #1
 800d9c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d9c4:	4a7d      	ldr	r2, [pc, #500]	; (800dbbc <UART_SetConfig+0x32c>)
 800d9c6:	fba2 2303 	umull	r2, r3, r2, r3
 800d9ca:	095b      	lsrs	r3, r3, #5
 800d9cc:	2264      	movs	r2, #100	; 0x64
 800d9ce:	fb02 f303 	mul.w	r3, r2, r3
 800d9d2:	1aeb      	subs	r3, r5, r3
 800d9d4:	00db      	lsls	r3, r3, #3
 800d9d6:	3332      	adds	r3, #50	; 0x32
 800d9d8:	4a78      	ldr	r2, [pc, #480]	; (800dbbc <UART_SetConfig+0x32c>)
 800d9da:	fba2 2303 	umull	r2, r3, r2, r3
 800d9de:	095b      	lsrs	r3, r3, #5
 800d9e0:	f003 0207 	and.w	r2, r3, #7
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	4422      	add	r2, r4
 800d9ea:	609a      	str	r2, [r3, #8]
 800d9ec:	e154      	b.n	800dc98 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800d9ee:	f7fd fcd1 	bl	800b394 <HAL_RCC_GetPCLK1Freq>
 800d9f2:	4602      	mov	r2, r0
 800d9f4:	4613      	mov	r3, r2
 800d9f6:	009b      	lsls	r3, r3, #2
 800d9f8:	4413      	add	r3, r2
 800d9fa:	009a      	lsls	r2, r3, #2
 800d9fc:	441a      	add	r2, r3
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	685b      	ldr	r3, [r3, #4]
 800da02:	005b      	lsls	r3, r3, #1
 800da04:	fbb2 f3f3 	udiv	r3, r2, r3
 800da08:	4a6c      	ldr	r2, [pc, #432]	; (800dbbc <UART_SetConfig+0x32c>)
 800da0a:	fba2 2303 	umull	r2, r3, r2, r3
 800da0e:	095b      	lsrs	r3, r3, #5
 800da10:	011c      	lsls	r4, r3, #4
 800da12:	f7fd fcbf 	bl	800b394 <HAL_RCC_GetPCLK1Freq>
 800da16:	4602      	mov	r2, r0
 800da18:	4613      	mov	r3, r2
 800da1a:	009b      	lsls	r3, r3, #2
 800da1c:	4413      	add	r3, r2
 800da1e:	009a      	lsls	r2, r3, #2
 800da20:	441a      	add	r2, r3
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	685b      	ldr	r3, [r3, #4]
 800da26:	005b      	lsls	r3, r3, #1
 800da28:	fbb2 f5f3 	udiv	r5, r2, r3
 800da2c:	f7fd fcb2 	bl	800b394 <HAL_RCC_GetPCLK1Freq>
 800da30:	4602      	mov	r2, r0
 800da32:	4613      	mov	r3, r2
 800da34:	009b      	lsls	r3, r3, #2
 800da36:	4413      	add	r3, r2
 800da38:	009a      	lsls	r2, r3, #2
 800da3a:	441a      	add	r2, r3
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	685b      	ldr	r3, [r3, #4]
 800da40:	005b      	lsls	r3, r3, #1
 800da42:	fbb2 f3f3 	udiv	r3, r2, r3
 800da46:	4a5d      	ldr	r2, [pc, #372]	; (800dbbc <UART_SetConfig+0x32c>)
 800da48:	fba2 2303 	umull	r2, r3, r2, r3
 800da4c:	095b      	lsrs	r3, r3, #5
 800da4e:	2264      	movs	r2, #100	; 0x64
 800da50:	fb02 f303 	mul.w	r3, r2, r3
 800da54:	1aeb      	subs	r3, r5, r3
 800da56:	00db      	lsls	r3, r3, #3
 800da58:	3332      	adds	r3, #50	; 0x32
 800da5a:	4a58      	ldr	r2, [pc, #352]	; (800dbbc <UART_SetConfig+0x32c>)
 800da5c:	fba2 2303 	umull	r2, r3, r2, r3
 800da60:	095b      	lsrs	r3, r3, #5
 800da62:	005b      	lsls	r3, r3, #1
 800da64:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800da68:	441c      	add	r4, r3
 800da6a:	f7fd fc93 	bl	800b394 <HAL_RCC_GetPCLK1Freq>
 800da6e:	4602      	mov	r2, r0
 800da70:	4613      	mov	r3, r2
 800da72:	009b      	lsls	r3, r3, #2
 800da74:	4413      	add	r3, r2
 800da76:	009a      	lsls	r2, r3, #2
 800da78:	441a      	add	r2, r3
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	685b      	ldr	r3, [r3, #4]
 800da7e:	005b      	lsls	r3, r3, #1
 800da80:	fbb2 f5f3 	udiv	r5, r2, r3
 800da84:	f7fd fc86 	bl	800b394 <HAL_RCC_GetPCLK1Freq>
 800da88:	4602      	mov	r2, r0
 800da8a:	4613      	mov	r3, r2
 800da8c:	009b      	lsls	r3, r3, #2
 800da8e:	4413      	add	r3, r2
 800da90:	009a      	lsls	r2, r3, #2
 800da92:	441a      	add	r2, r3
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	685b      	ldr	r3, [r3, #4]
 800da98:	005b      	lsls	r3, r3, #1
 800da9a:	fbb2 f3f3 	udiv	r3, r2, r3
 800da9e:	4a47      	ldr	r2, [pc, #284]	; (800dbbc <UART_SetConfig+0x32c>)
 800daa0:	fba2 2303 	umull	r2, r3, r2, r3
 800daa4:	095b      	lsrs	r3, r3, #5
 800daa6:	2264      	movs	r2, #100	; 0x64
 800daa8:	fb02 f303 	mul.w	r3, r2, r3
 800daac:	1aeb      	subs	r3, r5, r3
 800daae:	00db      	lsls	r3, r3, #3
 800dab0:	3332      	adds	r3, #50	; 0x32
 800dab2:	4a42      	ldr	r2, [pc, #264]	; (800dbbc <UART_SetConfig+0x32c>)
 800dab4:	fba2 2303 	umull	r2, r3, r2, r3
 800dab8:	095b      	lsrs	r3, r3, #5
 800daba:	f003 0207 	and.w	r2, r3, #7
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	4422      	add	r2, r4
 800dac4:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800dac6:	e0e7      	b.n	800dc98 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	4a39      	ldr	r2, [pc, #228]	; (800dbb4 <UART_SetConfig+0x324>)
 800dace:	4293      	cmp	r3, r2
 800dad0:	d004      	beq.n	800dadc <UART_SetConfig+0x24c>
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	681b      	ldr	r3, [r3, #0]
 800dad6:	4a38      	ldr	r2, [pc, #224]	; (800dbb8 <UART_SetConfig+0x328>)
 800dad8:	4293      	cmp	r3, r2
 800dada:	d171      	bne.n	800dbc0 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800dadc:	f7fd fc6e 	bl	800b3bc <HAL_RCC_GetPCLK2Freq>
 800dae0:	4602      	mov	r2, r0
 800dae2:	4613      	mov	r3, r2
 800dae4:	009b      	lsls	r3, r3, #2
 800dae6:	4413      	add	r3, r2
 800dae8:	009a      	lsls	r2, r3, #2
 800daea:	441a      	add	r2, r3
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	685b      	ldr	r3, [r3, #4]
 800daf0:	009b      	lsls	r3, r3, #2
 800daf2:	fbb2 f3f3 	udiv	r3, r2, r3
 800daf6:	4a31      	ldr	r2, [pc, #196]	; (800dbbc <UART_SetConfig+0x32c>)
 800daf8:	fba2 2303 	umull	r2, r3, r2, r3
 800dafc:	095b      	lsrs	r3, r3, #5
 800dafe:	011c      	lsls	r4, r3, #4
 800db00:	f7fd fc5c 	bl	800b3bc <HAL_RCC_GetPCLK2Freq>
 800db04:	4602      	mov	r2, r0
 800db06:	4613      	mov	r3, r2
 800db08:	009b      	lsls	r3, r3, #2
 800db0a:	4413      	add	r3, r2
 800db0c:	009a      	lsls	r2, r3, #2
 800db0e:	441a      	add	r2, r3
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	685b      	ldr	r3, [r3, #4]
 800db14:	009b      	lsls	r3, r3, #2
 800db16:	fbb2 f5f3 	udiv	r5, r2, r3
 800db1a:	f7fd fc4f 	bl	800b3bc <HAL_RCC_GetPCLK2Freq>
 800db1e:	4602      	mov	r2, r0
 800db20:	4613      	mov	r3, r2
 800db22:	009b      	lsls	r3, r3, #2
 800db24:	4413      	add	r3, r2
 800db26:	009a      	lsls	r2, r3, #2
 800db28:	441a      	add	r2, r3
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	685b      	ldr	r3, [r3, #4]
 800db2e:	009b      	lsls	r3, r3, #2
 800db30:	fbb2 f3f3 	udiv	r3, r2, r3
 800db34:	4a21      	ldr	r2, [pc, #132]	; (800dbbc <UART_SetConfig+0x32c>)
 800db36:	fba2 2303 	umull	r2, r3, r2, r3
 800db3a:	095b      	lsrs	r3, r3, #5
 800db3c:	2264      	movs	r2, #100	; 0x64
 800db3e:	fb02 f303 	mul.w	r3, r2, r3
 800db42:	1aeb      	subs	r3, r5, r3
 800db44:	011b      	lsls	r3, r3, #4
 800db46:	3332      	adds	r3, #50	; 0x32
 800db48:	4a1c      	ldr	r2, [pc, #112]	; (800dbbc <UART_SetConfig+0x32c>)
 800db4a:	fba2 2303 	umull	r2, r3, r2, r3
 800db4e:	095b      	lsrs	r3, r3, #5
 800db50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800db54:	441c      	add	r4, r3
 800db56:	f7fd fc31 	bl	800b3bc <HAL_RCC_GetPCLK2Freq>
 800db5a:	4602      	mov	r2, r0
 800db5c:	4613      	mov	r3, r2
 800db5e:	009b      	lsls	r3, r3, #2
 800db60:	4413      	add	r3, r2
 800db62:	009a      	lsls	r2, r3, #2
 800db64:	441a      	add	r2, r3
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	685b      	ldr	r3, [r3, #4]
 800db6a:	009b      	lsls	r3, r3, #2
 800db6c:	fbb2 f5f3 	udiv	r5, r2, r3
 800db70:	f7fd fc24 	bl	800b3bc <HAL_RCC_GetPCLK2Freq>
 800db74:	4602      	mov	r2, r0
 800db76:	4613      	mov	r3, r2
 800db78:	009b      	lsls	r3, r3, #2
 800db7a:	4413      	add	r3, r2
 800db7c:	009a      	lsls	r2, r3, #2
 800db7e:	441a      	add	r2, r3
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	685b      	ldr	r3, [r3, #4]
 800db84:	009b      	lsls	r3, r3, #2
 800db86:	fbb2 f3f3 	udiv	r3, r2, r3
 800db8a:	4a0c      	ldr	r2, [pc, #48]	; (800dbbc <UART_SetConfig+0x32c>)
 800db8c:	fba2 2303 	umull	r2, r3, r2, r3
 800db90:	095b      	lsrs	r3, r3, #5
 800db92:	2264      	movs	r2, #100	; 0x64
 800db94:	fb02 f303 	mul.w	r3, r2, r3
 800db98:	1aeb      	subs	r3, r5, r3
 800db9a:	011b      	lsls	r3, r3, #4
 800db9c:	3332      	adds	r3, #50	; 0x32
 800db9e:	4a07      	ldr	r2, [pc, #28]	; (800dbbc <UART_SetConfig+0x32c>)
 800dba0:	fba2 2303 	umull	r2, r3, r2, r3
 800dba4:	095b      	lsrs	r3, r3, #5
 800dba6:	f003 020f 	and.w	r2, r3, #15
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	4422      	add	r2, r4
 800dbb0:	609a      	str	r2, [r3, #8]
 800dbb2:	e071      	b.n	800dc98 <UART_SetConfig+0x408>
 800dbb4:	40011000 	.word	0x40011000
 800dbb8:	40011400 	.word	0x40011400
 800dbbc:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800dbc0:	f7fd fbe8 	bl	800b394 <HAL_RCC_GetPCLK1Freq>
 800dbc4:	4602      	mov	r2, r0
 800dbc6:	4613      	mov	r3, r2
 800dbc8:	009b      	lsls	r3, r3, #2
 800dbca:	4413      	add	r3, r2
 800dbcc:	009a      	lsls	r2, r3, #2
 800dbce:	441a      	add	r2, r3
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	685b      	ldr	r3, [r3, #4]
 800dbd4:	009b      	lsls	r3, r3, #2
 800dbd6:	fbb2 f3f3 	udiv	r3, r2, r3
 800dbda:	4a31      	ldr	r2, [pc, #196]	; (800dca0 <UART_SetConfig+0x410>)
 800dbdc:	fba2 2303 	umull	r2, r3, r2, r3
 800dbe0:	095b      	lsrs	r3, r3, #5
 800dbe2:	011c      	lsls	r4, r3, #4
 800dbe4:	f7fd fbd6 	bl	800b394 <HAL_RCC_GetPCLK1Freq>
 800dbe8:	4602      	mov	r2, r0
 800dbea:	4613      	mov	r3, r2
 800dbec:	009b      	lsls	r3, r3, #2
 800dbee:	4413      	add	r3, r2
 800dbf0:	009a      	lsls	r2, r3, #2
 800dbf2:	441a      	add	r2, r3
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	685b      	ldr	r3, [r3, #4]
 800dbf8:	009b      	lsls	r3, r3, #2
 800dbfa:	fbb2 f5f3 	udiv	r5, r2, r3
 800dbfe:	f7fd fbc9 	bl	800b394 <HAL_RCC_GetPCLK1Freq>
 800dc02:	4602      	mov	r2, r0
 800dc04:	4613      	mov	r3, r2
 800dc06:	009b      	lsls	r3, r3, #2
 800dc08:	4413      	add	r3, r2
 800dc0a:	009a      	lsls	r2, r3, #2
 800dc0c:	441a      	add	r2, r3
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	685b      	ldr	r3, [r3, #4]
 800dc12:	009b      	lsls	r3, r3, #2
 800dc14:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc18:	4a21      	ldr	r2, [pc, #132]	; (800dca0 <UART_SetConfig+0x410>)
 800dc1a:	fba2 2303 	umull	r2, r3, r2, r3
 800dc1e:	095b      	lsrs	r3, r3, #5
 800dc20:	2264      	movs	r2, #100	; 0x64
 800dc22:	fb02 f303 	mul.w	r3, r2, r3
 800dc26:	1aeb      	subs	r3, r5, r3
 800dc28:	011b      	lsls	r3, r3, #4
 800dc2a:	3332      	adds	r3, #50	; 0x32
 800dc2c:	4a1c      	ldr	r2, [pc, #112]	; (800dca0 <UART_SetConfig+0x410>)
 800dc2e:	fba2 2303 	umull	r2, r3, r2, r3
 800dc32:	095b      	lsrs	r3, r3, #5
 800dc34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800dc38:	441c      	add	r4, r3
 800dc3a:	f7fd fbab 	bl	800b394 <HAL_RCC_GetPCLK1Freq>
 800dc3e:	4602      	mov	r2, r0
 800dc40:	4613      	mov	r3, r2
 800dc42:	009b      	lsls	r3, r3, #2
 800dc44:	4413      	add	r3, r2
 800dc46:	009a      	lsls	r2, r3, #2
 800dc48:	441a      	add	r2, r3
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	685b      	ldr	r3, [r3, #4]
 800dc4e:	009b      	lsls	r3, r3, #2
 800dc50:	fbb2 f5f3 	udiv	r5, r2, r3
 800dc54:	f7fd fb9e 	bl	800b394 <HAL_RCC_GetPCLK1Freq>
 800dc58:	4602      	mov	r2, r0
 800dc5a:	4613      	mov	r3, r2
 800dc5c:	009b      	lsls	r3, r3, #2
 800dc5e:	4413      	add	r3, r2
 800dc60:	009a      	lsls	r2, r3, #2
 800dc62:	441a      	add	r2, r3
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	685b      	ldr	r3, [r3, #4]
 800dc68:	009b      	lsls	r3, r3, #2
 800dc6a:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc6e:	4a0c      	ldr	r2, [pc, #48]	; (800dca0 <UART_SetConfig+0x410>)
 800dc70:	fba2 2303 	umull	r2, r3, r2, r3
 800dc74:	095b      	lsrs	r3, r3, #5
 800dc76:	2264      	movs	r2, #100	; 0x64
 800dc78:	fb02 f303 	mul.w	r3, r2, r3
 800dc7c:	1aeb      	subs	r3, r5, r3
 800dc7e:	011b      	lsls	r3, r3, #4
 800dc80:	3332      	adds	r3, #50	; 0x32
 800dc82:	4a07      	ldr	r2, [pc, #28]	; (800dca0 <UART_SetConfig+0x410>)
 800dc84:	fba2 2303 	umull	r2, r3, r2, r3
 800dc88:	095b      	lsrs	r3, r3, #5
 800dc8a:	f003 020f 	and.w	r2, r3, #15
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	4422      	add	r2, r4
 800dc94:	609a      	str	r2, [r3, #8]
}
 800dc96:	e7ff      	b.n	800dc98 <UART_SetConfig+0x408>
 800dc98:	bf00      	nop
 800dc9a:	3710      	adds	r7, #16
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	bdb0      	pop	{r4, r5, r7, pc}
 800dca0:	51eb851f 	.word	0x51eb851f

0800dca4 <ACR_Start>:
volatile float forced_theta_re = 0.0f;



void ACR_Start()
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	af00      	add	r7, sp, #0

	ACR_enable = 1;
 800dca8:	4b03      	ldr	r3, [pc, #12]	; (800dcb8 <ACR_Start+0x14>)
 800dcaa:	2201      	movs	r2, #1
 800dcac:	701a      	strb	r2, [r3, #0]
	ACR_Reset();
 800dcae:	f000 fa61 	bl	800e174 <ACR_Reset>

}
 800dcb2:	bf00      	nop
 800dcb4:	bd80      	pop	{r7, pc}
 800dcb6:	bf00      	nop
 800dcb8:	200000c0 	.word	0x200000c0
 800dcbc:	00000000 	.word	0x00000000

0800dcc0 <currentControl>:
}



inline void currentControl(void)
{
 800dcc0:	b590      	push	{r4, r7, lr}
 800dcc2:	b083      	sub	sp, #12
 800dcc4:	af00      	add	r7, sp, #0



	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_SET);
 800dcc6:	2201      	movs	r2, #1
 800dcc8:	2140      	movs	r1, #64	; 0x40
 800dcca:	48bb      	ldr	r0, [pc, #748]	; (800dfb8 <currentControl+0x2f8>)
 800dccc:	f7fd fa40 	bl	800b150 <HAL_GPIO_WritePin>



	if(forced_commute_enable)
 800dcd0:	4bba      	ldr	r3, [pc, #744]	; (800dfbc <currentControl+0x2fc>)
 800dcd2:	781b      	ldrb	r3, [r3, #0]
 800dcd4:	b2db      	uxtb	r3, r3
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d076      	beq.n	800ddc8 <currentControl+0x108>
	{
		float _forced_theta_re = fmodf(forced_theta * POLES / 2, 2.0f * M_PI);
 800dcda:	4bb9      	ldr	r3, [pc, #740]	; (800dfc0 <currentControl+0x300>)
 800dcdc:	edd3 7a00 	vldr	s15, [r3]
 800dce0:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 800dce4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dce8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800dcec:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800dcf0:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800dfc4 <currentControl+0x304>
 800dcf4:	eeb0 0a66 	vmov.f32	s0, s13
 800dcf8:	f004 f8ce 	bl	8011e98 <fmodf>
 800dcfc:	ed87 0a01 	vstr	s0, [r7, #4]

		if(_forced_theta_re < 0.0f)				forced_theta_re = _forced_theta_re + 2 * M_PI;
 800dd00:	edd7 7a01 	vldr	s15, [r7, #4]
 800dd04:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800dd08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd0c:	d511      	bpl.n	800dd32 <currentControl+0x72>
 800dd0e:	6878      	ldr	r0, [r7, #4]
 800dd10:	f7fa fb4a 	bl	80083a8 <__aeabi_f2d>
 800dd14:	a3a4      	add	r3, pc, #656	; (adr r3, 800dfa8 <currentControl+0x2e8>)
 800dd16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd1a:	f7fa f9e7 	bl	80080ec <__adddf3>
 800dd1e:	4603      	mov	r3, r0
 800dd20:	460c      	mov	r4, r1
 800dd22:	4618      	mov	r0, r3
 800dd24:	4621      	mov	r1, r4
 800dd26:	f7fa fe59 	bl	80089dc <__aeabi_d2f>
 800dd2a:	4602      	mov	r2, r0
 800dd2c:	4ba6      	ldr	r3, [pc, #664]	; (800dfc8 <currentControl+0x308>)
 800dd2e:	601a      	str	r2, [r3, #0]
 800dd30:	e01f      	b.n	800dd72 <currentControl+0xb2>
		else if(_forced_theta_re >= 2 * M_PI)	forced_theta_re = _forced_theta_re - 2 * M_PI;
 800dd32:	6878      	ldr	r0, [r7, #4]
 800dd34:	f7fa fb38 	bl	80083a8 <__aeabi_f2d>
 800dd38:	a39b      	add	r3, pc, #620	; (adr r3, 800dfa8 <currentControl+0x2e8>)
 800dd3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd3e:	f7fa fe11 	bl	8008964 <__aeabi_dcmpge>
 800dd42:	4603      	mov	r3, r0
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d011      	beq.n	800dd6c <currentControl+0xac>
 800dd48:	6878      	ldr	r0, [r7, #4]
 800dd4a:	f7fa fb2d 	bl	80083a8 <__aeabi_f2d>
 800dd4e:	a396      	add	r3, pc, #600	; (adr r3, 800dfa8 <currentControl+0x2e8>)
 800dd50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd54:	f7fa f9c8 	bl	80080e8 <__aeabi_dsub>
 800dd58:	4603      	mov	r3, r0
 800dd5a:	460c      	mov	r4, r1
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	4621      	mov	r1, r4
 800dd60:	f7fa fe3c 	bl	80089dc <__aeabi_d2f>
 800dd64:	4602      	mov	r2, r0
 800dd66:	4b98      	ldr	r3, [pc, #608]	; (800dfc8 <currentControl+0x308>)
 800dd68:	601a      	str	r2, [r3, #0]
 800dd6a:	e002      	b.n	800dd72 <currentControl+0xb2>
		else									forced_theta_re = _forced_theta_re;
 800dd6c:	4a96      	ldr	r2, [pc, #600]	; (800dfc8 <currentControl+0x308>)
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	6013      	str	r3, [r2, #0]

		cos_theta_re = sin_table2[(int)((forced_theta_re * 0.3183f + 0.5f) * 5000.0f)];
 800dd72:	4b95      	ldr	r3, [pc, #596]	; (800dfc8 <currentControl+0x308>)
 800dd74:	edd3 7a00 	vldr	s15, [r3]
 800dd78:	ed9f 7a94 	vldr	s14, [pc, #592]	; 800dfcc <currentControl+0x30c>
 800dd7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dd80:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800dd84:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dd88:	ed9f 7a91 	vldr	s14, [pc, #580]	; 800dfd0 <currentControl+0x310>
 800dd8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800dd90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dd94:	ee17 3a90 	vmov	r3, s15
 800dd98:	4a8e      	ldr	r2, [pc, #568]	; (800dfd4 <currentControl+0x314>)
 800dd9a:	009b      	lsls	r3, r3, #2
 800dd9c:	4413      	add	r3, r2
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	4a8d      	ldr	r2, [pc, #564]	; (800dfd8 <currentControl+0x318>)
 800dda2:	6013      	str	r3, [r2, #0]
		sin_theta_re = sin_table2[(int)(forced_theta_re * 1591.54943f)];
 800dda4:	4b88      	ldr	r3, [pc, #544]	; (800dfc8 <currentControl+0x308>)
 800dda6:	edd3 7a00 	vldr	s15, [r3]
 800ddaa:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 800dfdc <currentControl+0x31c>
 800ddae:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ddb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ddb6:	ee17 3a90 	vmov	r3, s15
 800ddba:	4a86      	ldr	r2, [pc, #536]	; (800dfd4 <currentControl+0x314>)
 800ddbc:	009b      	lsls	r3, r3, #2
 800ddbe:	4413      	add	r3, r2
 800ddc0:	681b      	ldr	r3, [r3, #0]
 800ddc2:	4a87      	ldr	r2, [pc, #540]	; (800dfe0 <currentControl+0x320>)
 800ddc4:	6013      	str	r3, [r2, #0]
 800ddc6:	e001      	b.n	800ddcc <currentControl+0x10c>
	}
	else
	{
		refreshEncoder();
 800ddc8:	f002 fb8e 	bl	80104e8 <refreshEncoder>
	}

	get_current_dq(&Id, &Iq, sector_SVM, cos_theta_re, sin_theta_re);
 800ddcc:	4b85      	ldr	r3, [pc, #532]	; (800dfe4 <currentControl+0x324>)
 800ddce:	681a      	ldr	r2, [r3, #0]
 800ddd0:	4b81      	ldr	r3, [pc, #516]	; (800dfd8 <currentControl+0x318>)
 800ddd2:	edd3 7a00 	vldr	s15, [r3]
 800ddd6:	4b82      	ldr	r3, [pc, #520]	; (800dfe0 <currentControl+0x320>)
 800ddd8:	ed93 7a00 	vldr	s14, [r3]
 800dddc:	eef0 0a47 	vmov.f32	s1, s14
 800dde0:	eeb0 0a67 	vmov.f32	s0, s15
 800dde4:	4980      	ldr	r1, [pc, #512]	; (800dfe8 <currentControl+0x328>)
 800dde6:	4881      	ldr	r0, [pc, #516]	; (800dfec <currentControl+0x32c>)
 800dde8:	f000 fe58 	bl	800ea9c <get_current_dq>


	if(theta_re < M_PI)
 800ddec:	4b80      	ldr	r3, [pc, #512]	; (800dff0 <currentControl+0x330>)
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	f7fa fad9 	bl	80083a8 <__aeabi_f2d>
 800ddf6:	a36e      	add	r3, pc, #440	; (adr r3, 800dfb0 <currentControl+0x2f0>)
 800ddf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddfc:	f7fa fd9e 	bl	800893c <__aeabi_dcmplt>
 800de00:	4603      	mov	r3, r0
 800de02:	2b00      	cmp	r3, #0
 800de04:	d005      	beq.n	800de12 <currentControl+0x152>
		HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_RESET);
 800de06:	2200      	movs	r2, #0
 800de08:	2140      	movs	r1, #64	; 0x40
 800de0a:	487a      	ldr	r0, [pc, #488]	; (800dff4 <currentControl+0x334>)
 800de0c:	f7fd f9a0 	bl	800b150 <HAL_GPIO_WritePin>
 800de10:	e004      	b.n	800de1c <currentControl+0x15c>
	else
		HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_SET);
 800de12:	2201      	movs	r2, #1
 800de14:	2140      	movs	r1, #64	; 0x40
 800de16:	4877      	ldr	r0, [pc, #476]	; (800dff4 <currentControl+0x334>)
 800de18:	f7fd f99a 	bl	800b150 <HAL_GPIO_WritePin>


	/********** ACR (Auto Current Regulator) **********/

	if(ACR_enable)
 800de1c:	4b76      	ldr	r3, [pc, #472]	; (800dff8 <currentControl+0x338>)
 800de1e:	781b      	ldrb	r3, [r3, #0]
 800de20:	b2db      	uxtb	r3, r3
 800de22:	2b00      	cmp	r3, #0
 800de24:	f000 815c 	beq.w	800e0e0 <currentControl+0x420>
	{

		if(Id_ref < -Id_limit)		_Id_ref = -Id_limit;
 800de28:	4b74      	ldr	r3, [pc, #464]	; (800dffc <currentControl+0x33c>)
 800de2a:	edd3 7a00 	vldr	s15, [r3]
 800de2e:	eeb1 7a67 	vneg.f32	s14, s15
 800de32:	4b73      	ldr	r3, [pc, #460]	; (800e000 <currentControl+0x340>)
 800de34:	edd3 7a00 	vldr	s15, [r3]
 800de38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800de3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de40:	dd08      	ble.n	800de54 <currentControl+0x194>
 800de42:	4b6e      	ldr	r3, [pc, #440]	; (800dffc <currentControl+0x33c>)
 800de44:	edd3 7a00 	vldr	s15, [r3]
 800de48:	eef1 7a67 	vneg.f32	s15, s15
 800de4c:	4b6d      	ldr	r3, [pc, #436]	; (800e004 <currentControl+0x344>)
 800de4e:	edc3 7a00 	vstr	s15, [r3]
 800de52:	e013      	b.n	800de7c <currentControl+0x1bc>
		else if(Id_ref > Id_limit)	_Id_ref = Id_limit;
 800de54:	4b6a      	ldr	r3, [pc, #424]	; (800e000 <currentControl+0x340>)
 800de56:	ed93 7a00 	vldr	s14, [r3]
 800de5a:	4b68      	ldr	r3, [pc, #416]	; (800dffc <currentControl+0x33c>)
 800de5c:	edd3 7a00 	vldr	s15, [r3]
 800de60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800de64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de68:	dd04      	ble.n	800de74 <currentControl+0x1b4>
 800de6a:	4b64      	ldr	r3, [pc, #400]	; (800dffc <currentControl+0x33c>)
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	4a65      	ldr	r2, [pc, #404]	; (800e004 <currentControl+0x344>)
 800de70:	6013      	str	r3, [r2, #0]
 800de72:	e003      	b.n	800de7c <currentControl+0x1bc>
		else						_Id_ref = Id_ref;
 800de74:	4b62      	ldr	r3, [pc, #392]	; (800e000 <currentControl+0x340>)
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	4a62      	ldr	r2, [pc, #392]	; (800e004 <currentControl+0x344>)
 800de7a:	6013      	str	r3, [r2, #0]

		if(Iq_ref < -Iq_limit)		_Iq_ref = -Iq_limit;
 800de7c:	4b62      	ldr	r3, [pc, #392]	; (800e008 <currentControl+0x348>)
 800de7e:	edd3 7a00 	vldr	s15, [r3]
 800de82:	eeb1 7a67 	vneg.f32	s14, s15
 800de86:	4b61      	ldr	r3, [pc, #388]	; (800e00c <currentControl+0x34c>)
 800de88:	edd3 7a00 	vldr	s15, [r3]
 800de8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800de90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de94:	dd08      	ble.n	800dea8 <currentControl+0x1e8>
 800de96:	4b5c      	ldr	r3, [pc, #368]	; (800e008 <currentControl+0x348>)
 800de98:	edd3 7a00 	vldr	s15, [r3]
 800de9c:	eef1 7a67 	vneg.f32	s15, s15
 800dea0:	4b5b      	ldr	r3, [pc, #364]	; (800e010 <currentControl+0x350>)
 800dea2:	edc3 7a00 	vstr	s15, [r3]
 800dea6:	e013      	b.n	800ded0 <currentControl+0x210>
		else if(Iq_ref > Iq_limit)	_Iq_ref = Iq_limit;
 800dea8:	4b58      	ldr	r3, [pc, #352]	; (800e00c <currentControl+0x34c>)
 800deaa:	ed93 7a00 	vldr	s14, [r3]
 800deae:	4b56      	ldr	r3, [pc, #344]	; (800e008 <currentControl+0x348>)
 800deb0:	edd3 7a00 	vldr	s15, [r3]
 800deb4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800deb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800debc:	dd04      	ble.n	800dec8 <currentControl+0x208>
 800debe:	4b52      	ldr	r3, [pc, #328]	; (800e008 <currentControl+0x348>)
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	4a53      	ldr	r2, [pc, #332]	; (800e010 <currentControl+0x350>)
 800dec4:	6013      	str	r3, [r2, #0]
 800dec6:	e003      	b.n	800ded0 <currentControl+0x210>
		else						_Iq_ref = Iq_ref;
 800dec8:	4b50      	ldr	r3, [pc, #320]	; (800e00c <currentControl+0x34c>)
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	4a50      	ldr	r2, [pc, #320]	; (800e010 <currentControl+0x350>)
 800dece:	6013      	str	r3, [r2, #0]


		Id_error = _Id_ref - Id;
 800ded0:	4b4c      	ldr	r3, [pc, #304]	; (800e004 <currentControl+0x344>)
 800ded2:	ed93 7a00 	vldr	s14, [r3]
 800ded6:	4b45      	ldr	r3, [pc, #276]	; (800dfec <currentControl+0x32c>)
 800ded8:	edd3 7a00 	vldr	s15, [r3]
 800dedc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dee0:	4b4c      	ldr	r3, [pc, #304]	; (800e014 <currentControl+0x354>)
 800dee2:	edc3 7a00 	vstr	s15, [r3]
		Iq_error = _Iq_ref - Iq;
 800dee6:	4b4a      	ldr	r3, [pc, #296]	; (800e010 <currentControl+0x350>)
 800dee8:	ed93 7a00 	vldr	s14, [r3]
 800deec:	4b3e      	ldr	r3, [pc, #248]	; (800dfe8 <currentControl+0x328>)
 800deee:	edd3 7a00 	vldr	s15, [r3]
 800def2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800def6:	4b48      	ldr	r3, [pc, #288]	; (800e018 <currentControl+0x358>)
 800def8:	edc3 7a00 	vstr	s15, [r3]


		// integral
		Id_error_integ_temp1 = Id_error + Id_error_integ_temp2;
 800defc:	4b45      	ldr	r3, [pc, #276]	; (800e014 <currentControl+0x354>)
 800defe:	ed93 7a00 	vldr	s14, [r3]
 800df02:	4b46      	ldr	r3, [pc, #280]	; (800e01c <currentControl+0x35c>)
 800df04:	edd3 7a00 	vldr	s15, [r3]
 800df08:	ee77 7a27 	vadd.f32	s15, s14, s15
 800df0c:	4b44      	ldr	r3, [pc, #272]	; (800e020 <currentControl+0x360>)
 800df0e:	edc3 7a00 	vstr	s15, [r3]
		if(Id_error_integ_temp1 < -1000000.0) Id_error_integ_temp1 = -1000000.0;
 800df12:	4b43      	ldr	r3, [pc, #268]	; (800e020 <currentControl+0x360>)
 800df14:	edd3 7a00 	vldr	s15, [r3]
 800df18:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800e024 <currentControl+0x364>
 800df1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800df20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df24:	d503      	bpl.n	800df2e <currentControl+0x26e>
 800df26:	4b3e      	ldr	r3, [pc, #248]	; (800e020 <currentControl+0x360>)
 800df28:	4a3f      	ldr	r2, [pc, #252]	; (800e028 <currentControl+0x368>)
 800df2a:	601a      	str	r2, [r3, #0]
 800df2c:	e00c      	b.n	800df48 <currentControl+0x288>
		else if(Id_error_integ_temp1 > 1000000.0) Id_error_integ_temp1 = 1000000.0;
 800df2e:	4b3c      	ldr	r3, [pc, #240]	; (800e020 <currentControl+0x360>)
 800df30:	edd3 7a00 	vldr	s15, [r3]
 800df34:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800e02c <currentControl+0x36c>
 800df38:	eef4 7ac7 	vcmpe.f32	s15, s14
 800df3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df40:	dd02      	ble.n	800df48 <currentControl+0x288>
 800df42:	4b37      	ldr	r3, [pc, #220]	; (800e020 <currentControl+0x360>)
 800df44:	4a3a      	ldr	r2, [pc, #232]	; (800e030 <currentControl+0x370>)
 800df46:	601a      	str	r2, [r3, #0]
		Id_error_integ = ACR_cycleTime * 0.5f * (Id_error_integ_temp1 + Id_error_integ_temp2);
 800df48:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800e034 <currentControl+0x374>
 800df4c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800df50:	ee27 7a27 	vmul.f32	s14, s14, s15
 800df54:	4b32      	ldr	r3, [pc, #200]	; (800e020 <currentControl+0x360>)
 800df56:	edd3 6a00 	vldr	s13, [r3]
 800df5a:	4b30      	ldr	r3, [pc, #192]	; (800e01c <currentControl+0x35c>)
 800df5c:	edd3 7a00 	vldr	s15, [r3]
 800df60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800df64:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df68:	4b33      	ldr	r3, [pc, #204]	; (800e038 <currentControl+0x378>)
 800df6a:	edc3 7a00 	vstr	s15, [r3]
		Id_error_integ_temp2 = Id_error_integ_temp1;
 800df6e:	4b2c      	ldr	r3, [pc, #176]	; (800e020 <currentControl+0x360>)
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	4a2a      	ldr	r2, [pc, #168]	; (800e01c <currentControl+0x35c>)
 800df74:	6013      	str	r3, [r2, #0]

		Iq_error_integ_temp1 = Iq_error + Iq_error_integ_temp2;
 800df76:	4b28      	ldr	r3, [pc, #160]	; (800e018 <currentControl+0x358>)
 800df78:	ed93 7a00 	vldr	s14, [r3]
 800df7c:	4b2f      	ldr	r3, [pc, #188]	; (800e03c <currentControl+0x37c>)
 800df7e:	edd3 7a00 	vldr	s15, [r3]
 800df82:	ee77 7a27 	vadd.f32	s15, s14, s15
 800df86:	4b2e      	ldr	r3, [pc, #184]	; (800e040 <currentControl+0x380>)
 800df88:	edc3 7a00 	vstr	s15, [r3]
		if(Iq_error_integ_temp1 < -1000000.0) Iq_error_integ_temp1 = -1000000.0;
 800df8c:	4b2c      	ldr	r3, [pc, #176]	; (800e040 <currentControl+0x380>)
 800df8e:	edd3 7a00 	vldr	s15, [r3]
 800df92:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800e024 <currentControl+0x364>
 800df96:	eef4 7ac7 	vcmpe.f32	s15, s14
 800df9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df9e:	d551      	bpl.n	800e044 <currentControl+0x384>
 800dfa0:	4b27      	ldr	r3, [pc, #156]	; (800e040 <currentControl+0x380>)
 800dfa2:	4a21      	ldr	r2, [pc, #132]	; (800e028 <currentControl+0x368>)
 800dfa4:	601a      	str	r2, [r3, #0]
 800dfa6:	e05a      	b.n	800e05e <currentControl+0x39e>
 800dfa8:	54442d18 	.word	0x54442d18
 800dfac:	401921fb 	.word	0x401921fb
 800dfb0:	54442d18 	.word	0x54442d18
 800dfb4:	400921fb 	.word	0x400921fb
 800dfb8:	40020400 	.word	0x40020400
 800dfbc:	200041e4 	.word	0x200041e4
 800dfc0:	200000f4 	.word	0x200000f4
 800dfc4:	40c90fdb 	.word	0x40c90fdb
 800dfc8:	200000f8 	.word	0x200000f8
 800dfcc:	3ea2f838 	.word	0x3ea2f838
 800dfd0:	459c4000 	.word	0x459c4000
 800dfd4:	08013148 	.word	0x08013148
 800dfd8:	20000034 	.word	0x20000034
 800dfdc:	44c6f195 	.word	0x44c6f195
 800dfe0:	200041e0 	.word	0x200041e0
 800dfe4:	20004190 	.word	0x20004190
 800dfe8:	200000d0 	.word	0x200000d0
 800dfec:	200000cc 	.word	0x200000cc
 800dff0:	200041dc 	.word	0x200041dc
 800dff4:	40020000 	.word	0x40020000
 800dff8:	200000c0 	.word	0x200000c0
 800dffc:	20000010 	.word	0x20000010
 800e000:	200000c4 	.word	0x200000c4
 800e004:	2000422c 	.word	0x2000422c
 800e008:	20000014 	.word	0x20000014
 800e00c:	200000c8 	.word	0x200000c8
 800e010:	20004230 	.word	0x20004230
 800e014:	200000d4 	.word	0x200000d4
 800e018:	200000d8 	.word	0x200000d8
 800e01c:	200000e8 	.word	0x200000e8
 800e020:	200000e4 	.word	0x200000e4
 800e024:	c9742400 	.word	0xc9742400
 800e028:	c9742400 	.word	0xc9742400
 800e02c:	49742400 	.word	0x49742400
 800e030:	49742400 	.word	0x49742400
 800e034:	38d1b717 	.word	0x38d1b717
 800e038:	200000dc 	.word	0x200000dc
 800e03c:	200000f0 	.word	0x200000f0
 800e040:	200000ec 	.word	0x200000ec
		else if(Iq_error_integ_temp1 > 1000000.0) Iq_error_integ_temp1 = 1000000.0;
 800e044:	4b39      	ldr	r3, [pc, #228]	; (800e12c <currentControl+0x46c>)
 800e046:	edd3 7a00 	vldr	s15, [r3]
 800e04a:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800e130 <currentControl+0x470>
 800e04e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e056:	dd02      	ble.n	800e05e <currentControl+0x39e>
 800e058:	4b34      	ldr	r3, [pc, #208]	; (800e12c <currentControl+0x46c>)
 800e05a:	4a36      	ldr	r2, [pc, #216]	; (800e134 <currentControl+0x474>)
 800e05c:	601a      	str	r2, [r3, #0]
		Iq_error_integ = ACR_cycleTime * 0.5f * (Iq_error_integ_temp1 + Iq_error_integ_temp2);
 800e05e:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800e138 <currentControl+0x478>
 800e062:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e066:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e06a:	4b30      	ldr	r3, [pc, #192]	; (800e12c <currentControl+0x46c>)
 800e06c:	edd3 6a00 	vldr	s13, [r3]
 800e070:	4b32      	ldr	r3, [pc, #200]	; (800e13c <currentControl+0x47c>)
 800e072:	edd3 7a00 	vldr	s15, [r3]
 800e076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e07a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e07e:	4b30      	ldr	r3, [pc, #192]	; (800e140 <currentControl+0x480>)
 800e080:	edc3 7a00 	vstr	s15, [r3]
		Iq_error_integ_temp2 = Iq_error_integ_temp1;
 800e084:	4b29      	ldr	r3, [pc, #164]	; (800e12c <currentControl+0x46c>)
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	4a2c      	ldr	r2, [pc, #176]	; (800e13c <currentControl+0x47c>)
 800e08a:	6013      	str	r3, [r2, #0]


		Vd_ref = Kp_ACR * Id_error + Ki_ACR * Id_error_integ;
 800e08c:	4b2d      	ldr	r3, [pc, #180]	; (800e144 <currentControl+0x484>)
 800e08e:	ed93 7a00 	vldr	s14, [r3]
 800e092:	4b2d      	ldr	r3, [pc, #180]	; (800e148 <currentControl+0x488>)
 800e094:	edd3 7a00 	vldr	s15, [r3]
 800e098:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e09c:	4b2b      	ldr	r3, [pc, #172]	; (800e14c <currentControl+0x48c>)
 800e09e:	edd3 6a00 	vldr	s13, [r3]
 800e0a2:	4b2b      	ldr	r3, [pc, #172]	; (800e150 <currentControl+0x490>)
 800e0a4:	edd3 7a00 	vldr	s15, [r3]
 800e0a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e0ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e0b0:	4b28      	ldr	r3, [pc, #160]	; (800e154 <currentControl+0x494>)
 800e0b2:	edc3 7a00 	vstr	s15, [r3]
		Vq_ref = Kp_ACR * Iq_error + Ki_ACR * Iq_error_integ;
 800e0b6:	4b23      	ldr	r3, [pc, #140]	; (800e144 <currentControl+0x484>)
 800e0b8:	ed93 7a00 	vldr	s14, [r3]
 800e0bc:	4b26      	ldr	r3, [pc, #152]	; (800e158 <currentControl+0x498>)
 800e0be:	edd3 7a00 	vldr	s15, [r3]
 800e0c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e0c6:	4b21      	ldr	r3, [pc, #132]	; (800e14c <currentControl+0x48c>)
 800e0c8:	edd3 6a00 	vldr	s13, [r3]
 800e0cc:	4b1c      	ldr	r3, [pc, #112]	; (800e140 <currentControl+0x480>)
 800e0ce:	edd3 7a00 	vldr	s15, [r3]
 800e0d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e0d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e0da:	4b20      	ldr	r3, [pc, #128]	; (800e15c <currentControl+0x49c>)
 800e0dc:	edc3 7a00 	vstr	s15, [r3]
	}

	/********* end of ACR **********/


	if(HAL_GPIO_ReadPin(BR_FLT_GPIO_Port, BR_FLT_Pin) == GPIO_PIN_RESET)
 800e0e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e0e4:	481e      	ldr	r0, [pc, #120]	; (800e160 <currentControl+0x4a0>)
 800e0e6:	f7fd f81b 	bl	800b120 <HAL_GPIO_ReadPin>
	{
		//HAL_NVIC_SystemReset();
	}


	setSVM_dq();
 800e0ea:	f001 fb41 	bl	800f770 <setSVM_dq>

#endif



	if(!forced_commute_enable)
 800e0ee:	4b1d      	ldr	r3, [pc, #116]	; (800e164 <currentControl+0x4a4>)
 800e0f0:	781b      	ldrb	r3, [r3, #0]
 800e0f2:	b2db      	uxtb	r3, r3
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d101      	bne.n	800e0fc <currentControl+0x43c>
	{
		requestEncoder();
 800e0f8:	f002 f9d6 	bl	80104a8 <requestEncoder>
	}


	// Auto Speed Regulator launching
	ASR_prescalerCount += 1;
 800e0fc:	4b1a      	ldr	r3, [pc, #104]	; (800e168 <currentControl+0x4a8>)
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	3301      	adds	r3, #1
 800e102:	4a19      	ldr	r2, [pc, #100]	; (800e168 <currentControl+0x4a8>)
 800e104:	6013      	str	r3, [r2, #0]
	if(ASR_prescalerCount >= ASR_prescale)
 800e106:	4b18      	ldr	r3, [pc, #96]	; (800e168 <currentControl+0x4a8>)
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	2b09      	cmp	r3, #9
 800e10c:	dd05      	ble.n	800e11a <currentControl+0x45a>
	{
		ASR_flg = 1;
 800e10e:	4b17      	ldr	r3, [pc, #92]	; (800e16c <currentControl+0x4ac>)
 800e110:	2201      	movs	r2, #1
 800e112:	601a      	str	r2, [r3, #0]
		ASR_prescalerCount = 0;
 800e114:	4b14      	ldr	r3, [pc, #80]	; (800e168 <currentControl+0x4a8>)
 800e116:	2200      	movs	r2, #0
 800e118:	601a      	str	r2, [r3, #0]
	}



	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 800e11a:	2200      	movs	r2, #0
 800e11c:	2140      	movs	r1, #64	; 0x40
 800e11e:	4814      	ldr	r0, [pc, #80]	; (800e170 <currentControl+0x4b0>)
 800e120:	f7fd f816 	bl	800b150 <HAL_GPIO_WritePin>

	return;
 800e124:	bf00      	nop
}
 800e126:	370c      	adds	r7, #12
 800e128:	46bd      	mov	sp, r7
 800e12a:	bd90      	pop	{r4, r7, pc}
 800e12c:	200000ec 	.word	0x200000ec
 800e130:	49742400 	.word	0x49742400
 800e134:	49742400 	.word	0x49742400
 800e138:	38d1b717 	.word	0x38d1b717
 800e13c:	200000f0 	.word	0x200000f0
 800e140:	200000e0 	.word	0x200000e0
 800e144:	20000008 	.word	0x20000008
 800e148:	200000d4 	.word	0x200000d4
 800e14c:	2000000c 	.word	0x2000000c
 800e150:	200000dc 	.word	0x200000dc
 800e154:	20004188 	.word	0x20004188
 800e158:	200000d8 	.word	0x200000d8
 800e15c:	2000418c 	.word	0x2000418c
 800e160:	40020000 	.word	0x40020000
 800e164:	200041e4 	.word	0x200041e4
 800e168:	20000118 	.word	0x20000118
 800e16c:	20000114 	.word	0x20000114
 800e170:	40020400 	.word	0x40020400

0800e174 <ACR_Reset>:



inline void ACR_Reset()
{
 800e174:	b480      	push	{r7}
 800e176:	af00      	add	r7, sp, #0

	Id_error_integ_temp1 = 0.0f;
 800e178:	4b14      	ldr	r3, [pc, #80]	; (800e1cc <ACR_Reset+0x58>)
 800e17a:	f04f 0200 	mov.w	r2, #0
 800e17e:	601a      	str	r2, [r3, #0]
	Id_error_integ_temp2 = 0.0f;
 800e180:	4b13      	ldr	r3, [pc, #76]	; (800e1d0 <ACR_Reset+0x5c>)
 800e182:	f04f 0200 	mov.w	r2, #0
 800e186:	601a      	str	r2, [r3, #0]
	Iq_error_integ_temp1 = 0.0f;
 800e188:	4b12      	ldr	r3, [pc, #72]	; (800e1d4 <ACR_Reset+0x60>)
 800e18a:	f04f 0200 	mov.w	r2, #0
 800e18e:	601a      	str	r2, [r3, #0]
	Iq_error_integ_temp2 = 0.0f;
 800e190:	4b11      	ldr	r3, [pc, #68]	; (800e1d8 <ACR_Reset+0x64>)
 800e192:	f04f 0200 	mov.w	r2, #0
 800e196:	601a      	str	r2, [r3, #0]


	Id = Id_ref = 0.0f;
 800e198:	f04f 0300 	mov.w	r3, #0
 800e19c:	4a0f      	ldr	r2, [pc, #60]	; (800e1dc <ACR_Reset+0x68>)
 800e19e:	6013      	str	r3, [r2, #0]
 800e1a0:	4a0f      	ldr	r2, [pc, #60]	; (800e1e0 <ACR_Reset+0x6c>)
 800e1a2:	6013      	str	r3, [r2, #0]
	Iq = Iq_ref = 0.0f;
 800e1a4:	f04f 0300 	mov.w	r3, #0
 800e1a8:	4a0e      	ldr	r2, [pc, #56]	; (800e1e4 <ACR_Reset+0x70>)
 800e1aa:	6013      	str	r3, [r2, #0]
 800e1ac:	4a0e      	ldr	r2, [pc, #56]	; (800e1e8 <ACR_Reset+0x74>)
 800e1ae:	6013      	str	r3, [r2, #0]

	Vd_ref = 0.0f;
 800e1b0:	4b0e      	ldr	r3, [pc, #56]	; (800e1ec <ACR_Reset+0x78>)
 800e1b2:	f04f 0200 	mov.w	r2, #0
 800e1b6:	601a      	str	r2, [r3, #0]
	Vq_ref = 0.0f;
 800e1b8:	4b0d      	ldr	r3, [pc, #52]	; (800e1f0 <ACR_Reset+0x7c>)
 800e1ba:	f04f 0200 	mov.w	r2, #0
 800e1be:	601a      	str	r2, [r3, #0]

}
 800e1c0:	bf00      	nop
 800e1c2:	46bd      	mov	sp, r7
 800e1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c8:	4770      	bx	lr
 800e1ca:	bf00      	nop
 800e1cc:	200000e4 	.word	0x200000e4
 800e1d0:	200000e8 	.word	0x200000e8
 800e1d4:	200000ec 	.word	0x200000ec
 800e1d8:	200000f0 	.word	0x200000f0
 800e1dc:	200000c4 	.word	0x200000c4
 800e1e0:	200000cc 	.word	0x200000cc
 800e1e4:	200000c8 	.word	0x200000c8
 800e1e8:	200000d0 	.word	0x200000d0
 800e1ec:	20004188 	.word	0x20004188
 800e1f0:	2000418c 	.word	0x2000418c

0800e1f4 <ASR_Start>:
float omega_error_integ_temp2 = 0.0f;



void ASR_Start()
{
 800e1f4:	b580      	push	{r7, lr}
 800e1f6:	af00      	add	r7, sp, #0

	ASR_enable = 1;
 800e1f8:	4b03      	ldr	r3, [pc, #12]	; (800e208 <ASR_Start+0x14>)
 800e1fa:	2201      	movs	r2, #1
 800e1fc:	701a      	strb	r2, [r3, #0]
	ASR_Reset();
 800e1fe:	f000 f9b1 	bl	800e564 <ASR_Reset>

}
 800e202:	bf00      	nop
 800e204:	bd80      	pop	{r7, pc}
 800e206:	bf00      	nop
 800e208:	200000fc 	.word	0x200000fc
 800e20c:	00000000 	.word	0x00000000

0800e210 <speedControl>:
}



inline void speedControl()
{
 800e210:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800e214:	af00      	add	r7, sp, #0



	  if(ASR_steps <= 0)
 800e216:	4bbc      	ldr	r3, [pc, #752]	; (800e508 <speedControl+0x2f8>)
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	dc04      	bgt.n	800e228 <speedControl+0x18>
	  {
		  d_theta = 0.0f;
 800e21e:	4bbb      	ldr	r3, [pc, #748]	; (800e50c <speedControl+0x2fc>)
 800e220:	f04f 0200 	mov.w	r2, #0
 800e224:	601a      	str	r2, [r3, #0]
 800e226:	e00a      	b.n	800e23e <speedControl+0x2e>
	  }
	  else
	  {
		  d_theta = theta - p_theta;
 800e228:	4bb9      	ldr	r3, [pc, #740]	; (800e510 <speedControl+0x300>)
 800e22a:	ed93 7a00 	vldr	s14, [r3]
 800e22e:	4bb9      	ldr	r3, [pc, #740]	; (800e514 <speedControl+0x304>)
 800e230:	edd3 7a00 	vldr	s15, [r3]
 800e234:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e238:	4bb4      	ldr	r3, [pc, #720]	; (800e50c <speedControl+0x2fc>)
 800e23a:	edc3 7a00 	vstr	s15, [r3]
	  }
	  ASR_steps += 1;
 800e23e:	4bb2      	ldr	r3, [pc, #712]	; (800e508 <speedControl+0x2f8>)
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	3301      	adds	r3, #1
 800e244:	4ab0      	ldr	r2, [pc, #704]	; (800e508 <speedControl+0x2f8>)
 800e246:	6013      	str	r3, [r2, #0]

	  p_theta = theta;
 800e248:	4bb1      	ldr	r3, [pc, #708]	; (800e510 <speedControl+0x300>)
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	4ab1      	ldr	r2, [pc, #708]	; (800e514 <speedControl+0x304>)
 800e24e:	6013      	str	r3, [r2, #0]

	  if(d_theta < - M_PI)		d_theta += 2 * M_PI;
 800e250:	4bae      	ldr	r3, [pc, #696]	; (800e50c <speedControl+0x2fc>)
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	4618      	mov	r0, r3
 800e256:	f7fa f8a7 	bl	80083a8 <__aeabi_f2d>
 800e25a:	a3a3      	add	r3, pc, #652	; (adr r3, 800e4e8 <speedControl+0x2d8>)
 800e25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e260:	f7fa fb6c 	bl	800893c <__aeabi_dcmplt>
 800e264:	4603      	mov	r3, r0
 800e266:	2b00      	cmp	r3, #0
 800e268:	d013      	beq.n	800e292 <speedControl+0x82>
 800e26a:	4ba8      	ldr	r3, [pc, #672]	; (800e50c <speedControl+0x2fc>)
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	4618      	mov	r0, r3
 800e270:	f7fa f89a 	bl	80083a8 <__aeabi_f2d>
 800e274:	a39e      	add	r3, pc, #632	; (adr r3, 800e4f0 <speedControl+0x2e0>)
 800e276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e27a:	f7f9 ff37 	bl	80080ec <__adddf3>
 800e27e:	4603      	mov	r3, r0
 800e280:	460c      	mov	r4, r1
 800e282:	4618      	mov	r0, r3
 800e284:	4621      	mov	r1, r4
 800e286:	f7fa fba9 	bl	80089dc <__aeabi_d2f>
 800e28a:	4602      	mov	r2, r0
 800e28c:	4b9f      	ldr	r3, [pc, #636]	; (800e50c <speedControl+0x2fc>)
 800e28e:	601a      	str	r2, [r3, #0]
 800e290:	e01f      	b.n	800e2d2 <speedControl+0xc2>
	  else if(d_theta > M_PI)	d_theta -= 2 * M_PI;
 800e292:	4b9e      	ldr	r3, [pc, #632]	; (800e50c <speedControl+0x2fc>)
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	4618      	mov	r0, r3
 800e298:	f7fa f886 	bl	80083a8 <__aeabi_f2d>
 800e29c:	a396      	add	r3, pc, #600	; (adr r3, 800e4f8 <speedControl+0x2e8>)
 800e29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2a2:	f7fa fb69 	bl	8008978 <__aeabi_dcmpgt>
 800e2a6:	4603      	mov	r3, r0
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d012      	beq.n	800e2d2 <speedControl+0xc2>
 800e2ac:	4b97      	ldr	r3, [pc, #604]	; (800e50c <speedControl+0x2fc>)
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	f7fa f879 	bl	80083a8 <__aeabi_f2d>
 800e2b6:	a38e      	add	r3, pc, #568	; (adr r3, 800e4f0 <speedControl+0x2e0>)
 800e2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2bc:	f7f9 ff14 	bl	80080e8 <__aeabi_dsub>
 800e2c0:	4603      	mov	r3, r0
 800e2c2:	460c      	mov	r4, r1
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	4621      	mov	r1, r4
 800e2c8:	f7fa fb88 	bl	80089dc <__aeabi_d2f>
 800e2cc:	4602      	mov	r2, r0
 800e2ce:	4b8f      	ldr	r3, [pc, #572]	; (800e50c <speedControl+0x2fc>)
 800e2d0:	601a      	str	r2, [r3, #0]

	  omega = omega * 0.5 + 0.5 * d_theta / ASR_cycleTime;
 800e2d2:	4b91      	ldr	r3, [pc, #580]	; (800e518 <speedControl+0x308>)
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	f7fa f866 	bl	80083a8 <__aeabi_f2d>
 800e2dc:	f04f 0200 	mov.w	r2, #0
 800e2e0:	4b8e      	ldr	r3, [pc, #568]	; (800e51c <speedControl+0x30c>)
 800e2e2:	f7fa f8b9 	bl	8008458 <__aeabi_dmul>
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	460c      	mov	r4, r1
 800e2ea:	4625      	mov	r5, r4
 800e2ec:	461c      	mov	r4, r3
 800e2ee:	4b87      	ldr	r3, [pc, #540]	; (800e50c <speedControl+0x2fc>)
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	f7fa f858 	bl	80083a8 <__aeabi_f2d>
 800e2f8:	f04f 0200 	mov.w	r2, #0
 800e2fc:	4b87      	ldr	r3, [pc, #540]	; (800e51c <speedControl+0x30c>)
 800e2fe:	f7fa f8ab 	bl	8008458 <__aeabi_dmul>
 800e302:	4602      	mov	r2, r0
 800e304:	460b      	mov	r3, r1
 800e306:	4690      	mov	r8, r2
 800e308:	4699      	mov	r9, r3
 800e30a:	4b85      	ldr	r3, [pc, #532]	; (800e520 <speedControl+0x310>)
 800e30c:	4618      	mov	r0, r3
 800e30e:	f7fa f84b 	bl	80083a8 <__aeabi_f2d>
 800e312:	4602      	mov	r2, r0
 800e314:	460b      	mov	r3, r1
 800e316:	4640      	mov	r0, r8
 800e318:	4649      	mov	r1, r9
 800e31a:	f7fa f9c7 	bl	80086ac <__aeabi_ddiv>
 800e31e:	4602      	mov	r2, r0
 800e320:	460b      	mov	r3, r1
 800e322:	4620      	mov	r0, r4
 800e324:	4629      	mov	r1, r5
 800e326:	f7f9 fee1 	bl	80080ec <__adddf3>
 800e32a:	4603      	mov	r3, r0
 800e32c:	460c      	mov	r4, r1
 800e32e:	4618      	mov	r0, r3
 800e330:	4621      	mov	r1, r4
 800e332:	f7fa fb53 	bl	80089dc <__aeabi_d2f>
 800e336:	4602      	mov	r2, r0
 800e338:	4b77      	ldr	r3, [pc, #476]	; (800e518 <speedControl+0x308>)
 800e33a:	601a      	str	r2, [r3, #0]


	  if(ASR_enable)
 800e33c:	4b79      	ldr	r3, [pc, #484]	; (800e524 <speedControl+0x314>)
 800e33e:	781b      	ldrb	r3, [r3, #0]
 800e340:	b2db      	uxtb	r3, r3
 800e342:	2b00      	cmp	r3, #0
 800e344:	f000 80cd 	beq.w	800e4e2 <speedControl+0x2d2>
	  {

		  if(omega_ref < -omega_limit)		_omega_ref = -omega_limit;
 800e348:	4b77      	ldr	r3, [pc, #476]	; (800e528 <speedControl+0x318>)
 800e34a:	edd3 7a00 	vldr	s15, [r3]
 800e34e:	eeb1 7a67 	vneg.f32	s14, s15
 800e352:	4b76      	ldr	r3, [pc, #472]	; (800e52c <speedControl+0x31c>)
 800e354:	edd3 7a00 	vldr	s15, [r3]
 800e358:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e35c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e360:	dd08      	ble.n	800e374 <speedControl+0x164>
 800e362:	4b71      	ldr	r3, [pc, #452]	; (800e528 <speedControl+0x318>)
 800e364:	edd3 7a00 	vldr	s15, [r3]
 800e368:	eef1 7a67 	vneg.f32	s15, s15
 800e36c:	4b70      	ldr	r3, [pc, #448]	; (800e530 <speedControl+0x320>)
 800e36e:	edc3 7a00 	vstr	s15, [r3]
 800e372:	e013      	b.n	800e39c <speedControl+0x18c>
		  else if(omega_ref > omega_limit)	_omega_ref = omega_limit;
 800e374:	4b6d      	ldr	r3, [pc, #436]	; (800e52c <speedControl+0x31c>)
 800e376:	ed93 7a00 	vldr	s14, [r3]
 800e37a:	4b6b      	ldr	r3, [pc, #428]	; (800e528 <speedControl+0x318>)
 800e37c:	edd3 7a00 	vldr	s15, [r3]
 800e380:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e388:	dd04      	ble.n	800e394 <speedControl+0x184>
 800e38a:	4b67      	ldr	r3, [pc, #412]	; (800e528 <speedControl+0x318>)
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	4a68      	ldr	r2, [pc, #416]	; (800e530 <speedControl+0x320>)
 800e390:	6013      	str	r3, [r2, #0]
 800e392:	e003      	b.n	800e39c <speedControl+0x18c>
		  else								_omega_ref = omega_ref;
 800e394:	4b65      	ldr	r3, [pc, #404]	; (800e52c <speedControl+0x31c>)
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	4a65      	ldr	r2, [pc, #404]	; (800e530 <speedControl+0x320>)
 800e39a:	6013      	str	r3, [r2, #0]

		  omega_error = _omega_ref - omega;
 800e39c:	4b64      	ldr	r3, [pc, #400]	; (800e530 <speedControl+0x320>)
 800e39e:	ed93 7a00 	vldr	s14, [r3]
 800e3a2:	4b5d      	ldr	r3, [pc, #372]	; (800e518 <speedControl+0x308>)
 800e3a4:	edd3 7a00 	vldr	s15, [r3]
 800e3a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e3ac:	4b61      	ldr	r3, [pc, #388]	; (800e534 <speedControl+0x324>)
 800e3ae:	edc3 7a00 	vstr	s15, [r3]

		  // integral
		  omega_error_integ_temp1 = omega_error + omega_error_integ_temp2;
 800e3b2:	4b60      	ldr	r3, [pc, #384]	; (800e534 <speedControl+0x324>)
 800e3b4:	ed93 7a00 	vldr	s14, [r3]
 800e3b8:	4b5f      	ldr	r3, [pc, #380]	; (800e538 <speedControl+0x328>)
 800e3ba:	edd3 7a00 	vldr	s15, [r3]
 800e3be:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e3c2:	4b5e      	ldr	r3, [pc, #376]	; (800e53c <speedControl+0x32c>)
 800e3c4:	edc3 7a00 	vstr	s15, [r3]
		  if(omega_error_integ_temp1 < -6.0 / ASR_cycleTime)
 800e3c8:	4b5c      	ldr	r3, [pc, #368]	; (800e53c <speedControl+0x32c>)
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	f7f9 ffeb 	bl	80083a8 <__aeabi_f2d>
 800e3d2:	4604      	mov	r4, r0
 800e3d4:	460d      	mov	r5, r1
 800e3d6:	4b52      	ldr	r3, [pc, #328]	; (800e520 <speedControl+0x310>)
 800e3d8:	4618      	mov	r0, r3
 800e3da:	f7f9 ffe5 	bl	80083a8 <__aeabi_f2d>
 800e3de:	4602      	mov	r2, r0
 800e3e0:	460b      	mov	r3, r1
 800e3e2:	f04f 0000 	mov.w	r0, #0
 800e3e6:	4956      	ldr	r1, [pc, #344]	; (800e540 <speedControl+0x330>)
 800e3e8:	f7fa f960 	bl	80086ac <__aeabi_ddiv>
 800e3ec:	4602      	mov	r2, r0
 800e3ee:	460b      	mov	r3, r1
 800e3f0:	4620      	mov	r0, r4
 800e3f2:	4629      	mov	r1, r5
 800e3f4:	f7fa faa2 	bl	800893c <__aeabi_dcmplt>
 800e3f8:	4603      	mov	r3, r0
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d009      	beq.n	800e412 <speedControl+0x202>
		  {
			  omega_error_integ_temp1 = -6.0 / ASR_cycleTime;
 800e3fe:	ed9f 7a51 	vldr	s14, [pc, #324]	; 800e544 <speedControl+0x334>
 800e402:	eef9 6a08 	vmov.f32	s13, #152	; 0xc0c00000 -6.0
 800e406:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e40a:	4b4c      	ldr	r3, [pc, #304]	; (800e53c <speedControl+0x32c>)
 800e40c:	edc3 7a00 	vstr	s15, [r3]
 800e410:	e023      	b.n	800e45a <speedControl+0x24a>
		  }
		  else if(omega_error_integ_temp1 > 6.0 / ASR_cycleTime)
 800e412:	4b4a      	ldr	r3, [pc, #296]	; (800e53c <speedControl+0x32c>)
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	4618      	mov	r0, r3
 800e418:	f7f9 ffc6 	bl	80083a8 <__aeabi_f2d>
 800e41c:	4604      	mov	r4, r0
 800e41e:	460d      	mov	r5, r1
 800e420:	4b3f      	ldr	r3, [pc, #252]	; (800e520 <speedControl+0x310>)
 800e422:	4618      	mov	r0, r3
 800e424:	f7f9 ffc0 	bl	80083a8 <__aeabi_f2d>
 800e428:	4602      	mov	r2, r0
 800e42a:	460b      	mov	r3, r1
 800e42c:	f04f 0000 	mov.w	r0, #0
 800e430:	4945      	ldr	r1, [pc, #276]	; (800e548 <speedControl+0x338>)
 800e432:	f7fa f93b 	bl	80086ac <__aeabi_ddiv>
 800e436:	4602      	mov	r2, r0
 800e438:	460b      	mov	r3, r1
 800e43a:	4620      	mov	r0, r4
 800e43c:	4629      	mov	r1, r5
 800e43e:	f7fa fa9b 	bl	8008978 <__aeabi_dcmpgt>
 800e442:	4603      	mov	r3, r0
 800e444:	2b00      	cmp	r3, #0
 800e446:	d008      	beq.n	800e45a <speedControl+0x24a>
		  {
			  omega_error_integ_temp1 = 6.0 / ASR_cycleTime;
 800e448:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800e544 <speedControl+0x334>
 800e44c:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800e450:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800e454:	4b39      	ldr	r3, [pc, #228]	; (800e53c <speedControl+0x32c>)
 800e456:	edc3 7a00 	vstr	s15, [r3]
		  }
		  omega_error_integ = ASR_cycleTime * 0.5f * (omega_error_integ_temp1 + omega_error_integ_temp2);
 800e45a:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800e544 <speedControl+0x334>
 800e45e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e462:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e466:	4b35      	ldr	r3, [pc, #212]	; (800e53c <speedControl+0x32c>)
 800e468:	edd3 6a00 	vldr	s13, [r3]
 800e46c:	4b32      	ldr	r3, [pc, #200]	; (800e538 <speedControl+0x328>)
 800e46e:	edd3 7a00 	vldr	s15, [r3]
 800e472:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e47a:	4b34      	ldr	r3, [pc, #208]	; (800e54c <speedControl+0x33c>)
 800e47c:	edc3 7a00 	vstr	s15, [r3]
		  omega_error_integ_temp2 = omega_error_integ_temp1;
 800e480:	4b2e      	ldr	r3, [pc, #184]	; (800e53c <speedControl+0x32c>)
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	4a2c      	ldr	r2, [pc, #176]	; (800e538 <speedControl+0x328>)
 800e486:	6013      	str	r3, [r2, #0]


		  torque_ref = Kp_ASR * omega_error + Ki_ASR * omega_error_integ;
 800e488:	4b31      	ldr	r3, [pc, #196]	; (800e550 <speedControl+0x340>)
 800e48a:	ed93 7a00 	vldr	s14, [r3]
 800e48e:	4b29      	ldr	r3, [pc, #164]	; (800e534 <speedControl+0x324>)
 800e490:	edd3 7a00 	vldr	s15, [r3]
 800e494:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e498:	4b2e      	ldr	r3, [pc, #184]	; (800e554 <speedControl+0x344>)
 800e49a:	edd3 6a00 	vldr	s13, [r3]
 800e49e:	4b2b      	ldr	r3, [pc, #172]	; (800e54c <speedControl+0x33c>)
 800e4a0:	edd3 7a00 	vldr	s15, [r3]
 800e4a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e4a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e4ac:	4b2a      	ldr	r3, [pc, #168]	; (800e558 <speedControl+0x348>)
 800e4ae:	edc3 7a00 	vstr	s15, [r3]

		  Id_ref = 0.0f;
 800e4b2:	4b2a      	ldr	r3, [pc, #168]	; (800e55c <speedControl+0x34c>)
 800e4b4:	f04f 0200 	mov.w	r2, #0
 800e4b8:	601a      	str	r2, [r3, #0]
		  Iq_ref = KT * torque_ref;
 800e4ba:	4b27      	ldr	r3, [pc, #156]	; (800e558 <speedControl+0x348>)
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	4618      	mov	r0, r3
 800e4c0:	f7f9 ff72 	bl	80083a8 <__aeabi_f2d>
 800e4c4:	a30e      	add	r3, pc, #56	; (adr r3, 800e500 <speedControl+0x2f0>)
 800e4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ca:	f7f9 ffc5 	bl	8008458 <__aeabi_dmul>
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	460c      	mov	r4, r1
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	4621      	mov	r1, r4
 800e4d6:	f7fa fa81 	bl	80089dc <__aeabi_d2f>
 800e4da:	4602      	mov	r2, r0
 800e4dc:	4b20      	ldr	r3, [pc, #128]	; (800e560 <speedControl+0x350>)
 800e4de:	601a      	str	r2, [r3, #0]
	  }




	return;
 800e4e0:	bf00      	nop
 800e4e2:	bf00      	nop
}
 800e4e4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800e4e8:	54442d18 	.word	0x54442d18
 800e4ec:	c00921fb 	.word	0xc00921fb
 800e4f0:	54442d18 	.word	0x54442d18
 800e4f4:	401921fb 	.word	0x401921fb
 800e4f8:	54442d18 	.word	0x54442d18
 800e4fc:	400921fb 	.word	0x400921fb
 800e500:	8b6ec798 	.word	0x8b6ec798
 800e504:	3fd22b62 	.word	0x3fd22b62
 800e508:	20000110 	.word	0x20000110
 800e50c:	20004234 	.word	0x20004234
 800e510:	200041d8 	.word	0x200041d8
 800e514:	20000120 	.word	0x20000120
 800e518:	2000011c 	.word	0x2000011c
 800e51c:	3fe00000 	.word	0x3fe00000
 800e520:	3a83126f 	.word	0x3a83126f
 800e524:	200000fc 	.word	0x200000fc
 800e528:	20000020 	.word	0x20000020
 800e52c:	20000100 	.word	0x20000100
 800e530:	20004238 	.word	0x20004238
 800e534:	20000104 	.word	0x20000104
 800e538:	20000128 	.word	0x20000128
 800e53c:	20000124 	.word	0x20000124
 800e540:	c0180000 	.word	0xc0180000
 800e544:	3a83126f 	.word	0x3a83126f
 800e548:	40180000 	.word	0x40180000
 800e54c:	20000108 	.word	0x20000108
 800e550:	20000018 	.word	0x20000018
 800e554:	2000001c 	.word	0x2000001c
 800e558:	2000010c 	.word	0x2000010c
 800e55c:	200000c4 	.word	0x200000c4
 800e560:	200000c8 	.word	0x200000c8

0800e564 <ASR_Reset>:



inline void ASR_Reset()
{
 800e564:	b480      	push	{r7}
 800e566:	af00      	add	r7, sp, #0

	p_theta = 0.0f;
 800e568:	4b0c      	ldr	r3, [pc, #48]	; (800e59c <ASR_Reset+0x38>)
 800e56a:	f04f 0200 	mov.w	r2, #0
 800e56e:	601a      	str	r2, [r3, #0]

	omega_error_integ_temp1 = 0.0f;
 800e570:	4b0b      	ldr	r3, [pc, #44]	; (800e5a0 <ASR_Reset+0x3c>)
 800e572:	f04f 0200 	mov.w	r2, #0
 800e576:	601a      	str	r2, [r3, #0]
	omega_error_integ_temp2 = 0.0f;
 800e578:	4b0a      	ldr	r3, [pc, #40]	; (800e5a4 <ASR_Reset+0x40>)
 800e57a:	f04f 0200 	mov.w	r2, #0
 800e57e:	601a      	str	r2, [r3, #0]

	omega = omega_ref = 0.0f;
 800e580:	f04f 0300 	mov.w	r3, #0
 800e584:	4a08      	ldr	r2, [pc, #32]	; (800e5a8 <ASR_Reset+0x44>)
 800e586:	6013      	str	r3, [r2, #0]
 800e588:	4a08      	ldr	r2, [pc, #32]	; (800e5ac <ASR_Reset+0x48>)
 800e58a:	6013      	str	r3, [r2, #0]

	ASR_steps = 0;
 800e58c:	4b08      	ldr	r3, [pc, #32]	; (800e5b0 <ASR_Reset+0x4c>)
 800e58e:	2200      	movs	r2, #0
 800e590:	601a      	str	r2, [r3, #0]

}
 800e592:	bf00      	nop
 800e594:	46bd      	mov	sp, r7
 800e596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e59a:	4770      	bx	lr
 800e59c:	20000120 	.word	0x20000120
 800e5a0:	20000124 	.word	0x20000124
 800e5a4:	20000128 	.word	0x20000128
 800e5a8:	20000100 	.word	0x20000100
 800e5ac:	2000011c 	.word	0x2000011c
 800e5b0:	20000110 	.word	0x20000110

0800e5b4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc2;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b084      	sub	sp, #16
 800e5b8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800e5ba:	463b      	mov	r3, r7
 800e5bc:	2200      	movs	r2, #0
 800e5be:	601a      	str	r2, [r3, #0]
 800e5c0:	605a      	str	r2, [r3, #4]
 800e5c2:	609a      	str	r2, [r3, #8]
 800e5c4:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800e5c6:	4b22      	ldr	r3, [pc, #136]	; (800e650 <MX_ADC1_Init+0x9c>)
 800e5c8:	4a22      	ldr	r2, [pc, #136]	; (800e654 <MX_ADC1_Init+0xa0>)
 800e5ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800e5cc:	4b20      	ldr	r3, [pc, #128]	; (800e650 <MX_ADC1_Init+0x9c>)
 800e5ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800e5d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800e5d4:	4b1e      	ldr	r3, [pc, #120]	; (800e650 <MX_ADC1_Init+0x9c>)
 800e5d6:	2200      	movs	r2, #0
 800e5d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800e5da:	4b1d      	ldr	r3, [pc, #116]	; (800e650 <MX_ADC1_Init+0x9c>)
 800e5dc:	2201      	movs	r2, #1
 800e5de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800e5e0:	4b1b      	ldr	r3, [pc, #108]	; (800e650 <MX_ADC1_Init+0x9c>)
 800e5e2:	2201      	movs	r2, #1
 800e5e4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800e5e6:	4b1a      	ldr	r3, [pc, #104]	; (800e650 <MX_ADC1_Init+0x9c>)
 800e5e8:	2200      	movs	r2, #0
 800e5ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800e5ee:	4b18      	ldr	r3, [pc, #96]	; (800e650 <MX_ADC1_Init+0x9c>)
 800e5f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e5f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 800e5f6:	4b16      	ldr	r3, [pc, #88]	; (800e650 <MX_ADC1_Init+0x9c>)
 800e5f8:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800e5fc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800e5fe:	4b14      	ldr	r3, [pc, #80]	; (800e650 <MX_ADC1_Init+0x9c>)
 800e600:	2200      	movs	r2, #0
 800e602:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800e604:	4b12      	ldr	r3, [pc, #72]	; (800e650 <MX_ADC1_Init+0x9c>)
 800e606:	2201      	movs	r2, #1
 800e608:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800e60a:	4b11      	ldr	r3, [pc, #68]	; (800e650 <MX_ADC1_Init+0x9c>)
 800e60c:	2201      	movs	r2, #1
 800e60e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800e612:	4b0f      	ldr	r3, [pc, #60]	; (800e650 <MX_ADC1_Init+0x9c>)
 800e614:	2200      	movs	r2, #0
 800e616:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800e618:	480d      	ldr	r0, [pc, #52]	; (800e650 <MX_ADC1_Init+0x9c>)
 800e61a:	f7fa fc43 	bl	8008ea4 <HAL_ADC_Init>
 800e61e:	4603      	mov	r3, r0
 800e620:	2b00      	cmp	r3, #0
 800e622:	d001      	beq.n	800e628 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800e624:	f001 f89c 	bl	800f760 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800e628:	2300      	movs	r3, #0
 800e62a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800e62c:	2301      	movs	r3, #1
 800e62e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800e630:	2300      	movs	r3, #0
 800e632:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800e634:	463b      	mov	r3, r7
 800e636:	4619      	mov	r1, r3
 800e638:	4805      	ldr	r0, [pc, #20]	; (800e650 <MX_ADC1_Init+0x9c>)
 800e63a:	f7fa fd87 	bl	800914c <HAL_ADC_ConfigChannel>
 800e63e:	4603      	mov	r3, r0
 800e640:	2b00      	cmp	r3, #0
 800e642:	d001      	beq.n	800e648 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800e644:	f001 f88c 	bl	800f760 <Error_Handler>
  }

}
 800e648:	bf00      	nop
 800e64a:	3710      	adds	r7, #16
 800e64c:	46bd      	mov	sp, r7
 800e64e:	bd80      	pop	{r7, pc}
 800e650:	200042e4 	.word	0x200042e4
 800e654:	40012000 	.word	0x40012000

0800e658 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b084      	sub	sp, #16
 800e65c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800e65e:	463b      	mov	r3, r7
 800e660:	2200      	movs	r2, #0
 800e662:	601a      	str	r2, [r3, #0]
 800e664:	605a      	str	r2, [r3, #4]
 800e666:	609a      	str	r2, [r3, #8]
 800e668:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 800e66a:	4b22      	ldr	r3, [pc, #136]	; (800e6f4 <MX_ADC2_Init+0x9c>)
 800e66c:	4a22      	ldr	r2, [pc, #136]	; (800e6f8 <MX_ADC2_Init+0xa0>)
 800e66e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800e670:	4b20      	ldr	r3, [pc, #128]	; (800e6f4 <MX_ADC2_Init+0x9c>)
 800e672:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800e676:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800e678:	4b1e      	ldr	r3, [pc, #120]	; (800e6f4 <MX_ADC2_Init+0x9c>)
 800e67a:	2200      	movs	r2, #0
 800e67c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800e67e:	4b1d      	ldr	r3, [pc, #116]	; (800e6f4 <MX_ADC2_Init+0x9c>)
 800e680:	2200      	movs	r2, #0
 800e682:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800e684:	4b1b      	ldr	r3, [pc, #108]	; (800e6f4 <MX_ADC2_Init+0x9c>)
 800e686:	2200      	movs	r2, #0
 800e688:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800e68a:	4b1a      	ldr	r3, [pc, #104]	; (800e6f4 <MX_ADC2_Init+0x9c>)
 800e68c:	2200      	movs	r2, #0
 800e68e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800e692:	4b18      	ldr	r3, [pc, #96]	; (800e6f4 <MX_ADC2_Init+0x9c>)
 800e694:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e698:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 800e69a:	4b16      	ldr	r3, [pc, #88]	; (800e6f4 <MX_ADC2_Init+0x9c>)
 800e69c:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800e6a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800e6a2:	4b14      	ldr	r3, [pc, #80]	; (800e6f4 <MX_ADC2_Init+0x9c>)
 800e6a4:	2200      	movs	r2, #0
 800e6a6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800e6a8:	4b12      	ldr	r3, [pc, #72]	; (800e6f4 <MX_ADC2_Init+0x9c>)
 800e6aa:	2201      	movs	r2, #1
 800e6ac:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800e6ae:	4b11      	ldr	r3, [pc, #68]	; (800e6f4 <MX_ADC2_Init+0x9c>)
 800e6b0:	2201      	movs	r2, #1
 800e6b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800e6b6:	4b0f      	ldr	r3, [pc, #60]	; (800e6f4 <MX_ADC2_Init+0x9c>)
 800e6b8:	2201      	movs	r2, #1
 800e6ba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800e6bc:	480d      	ldr	r0, [pc, #52]	; (800e6f4 <MX_ADC2_Init+0x9c>)
 800e6be:	f7fa fbf1 	bl	8008ea4 <HAL_ADC_Init>
 800e6c2:	4603      	mov	r3, r0
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d001      	beq.n	800e6cc <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 800e6c8:	f001 f84a 	bl	800f760 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800e6cc:	2304      	movs	r3, #4
 800e6ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800e6d0:	2301      	movs	r3, #1
 800e6d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800e6d8:	463b      	mov	r3, r7
 800e6da:	4619      	mov	r1, r3
 800e6dc:	4805      	ldr	r0, [pc, #20]	; (800e6f4 <MX_ADC2_Init+0x9c>)
 800e6de:	f7fa fd35 	bl	800914c <HAL_ADC_ConfigChannel>
 800e6e2:	4603      	mov	r3, r0
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d001      	beq.n	800e6ec <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 800e6e8:	f001 f83a 	bl	800f760 <Error_Handler>
  }

}
 800e6ec:	bf00      	nop
 800e6ee:	3710      	adds	r7, #16
 800e6f0:	46bd      	mov	sp, r7
 800e6f2:	bd80      	pop	{r7, pc}
 800e6f4:	2000423c 	.word	0x2000423c
 800e6f8:	40012100 	.word	0x40012100

0800e6fc <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800e6fc:	b580      	push	{r7, lr}
 800e6fe:	b084      	sub	sp, #16
 800e700:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800e702:	463b      	mov	r3, r7
 800e704:	2200      	movs	r2, #0
 800e706:	601a      	str	r2, [r3, #0]
 800e708:	605a      	str	r2, [r3, #4]
 800e70a:	609a      	str	r2, [r3, #8]
 800e70c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 800e70e:	4b22      	ldr	r3, [pc, #136]	; (800e798 <MX_ADC3_Init+0x9c>)
 800e710:	4a22      	ldr	r2, [pc, #136]	; (800e79c <MX_ADC3_Init+0xa0>)
 800e712:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800e714:	4b20      	ldr	r3, [pc, #128]	; (800e798 <MX_ADC3_Init+0x9c>)
 800e716:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800e71a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800e71c:	4b1e      	ldr	r3, [pc, #120]	; (800e798 <MX_ADC3_Init+0x9c>)
 800e71e:	2200      	movs	r2, #0
 800e720:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 800e722:	4b1d      	ldr	r3, [pc, #116]	; (800e798 <MX_ADC3_Init+0x9c>)
 800e724:	2200      	movs	r2, #0
 800e726:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800e728:	4b1b      	ldr	r3, [pc, #108]	; (800e798 <MX_ADC3_Init+0x9c>)
 800e72a:	2200      	movs	r2, #0
 800e72c:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800e72e:	4b1a      	ldr	r3, [pc, #104]	; (800e798 <MX_ADC3_Init+0x9c>)
 800e730:	2200      	movs	r2, #0
 800e732:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800e736:	4b18      	ldr	r3, [pc, #96]	; (800e798 <MX_ADC3_Init+0x9c>)
 800e738:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e73c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 800e73e:	4b16      	ldr	r3, [pc, #88]	; (800e798 <MX_ADC3_Init+0x9c>)
 800e740:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800e744:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800e746:	4b14      	ldr	r3, [pc, #80]	; (800e798 <MX_ADC3_Init+0x9c>)
 800e748:	2200      	movs	r2, #0
 800e74a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800e74c:	4b12      	ldr	r3, [pc, #72]	; (800e798 <MX_ADC3_Init+0x9c>)
 800e74e:	2201      	movs	r2, #1
 800e750:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800e752:	4b11      	ldr	r3, [pc, #68]	; (800e798 <MX_ADC3_Init+0x9c>)
 800e754:	2201      	movs	r2, #1
 800e756:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800e75a:	4b0f      	ldr	r3, [pc, #60]	; (800e798 <MX_ADC3_Init+0x9c>)
 800e75c:	2201      	movs	r2, #1
 800e75e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800e760:	480d      	ldr	r0, [pc, #52]	; (800e798 <MX_ADC3_Init+0x9c>)
 800e762:	f7fa fb9f 	bl	8008ea4 <HAL_ADC_Init>
 800e766:	4603      	mov	r3, r0
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d001      	beq.n	800e770 <MX_ADC3_Init+0x74>
  {
    Error_Handler();
 800e76c:	f000 fff8 	bl	800f760 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800e770:	2301      	movs	r3, #1
 800e772:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800e774:	2301      	movs	r3, #1
 800e776:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800e778:	2300      	movs	r3, #0
 800e77a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800e77c:	463b      	mov	r3, r7
 800e77e:	4619      	mov	r1, r3
 800e780:	4805      	ldr	r0, [pc, #20]	; (800e798 <MX_ADC3_Init+0x9c>)
 800e782:	f7fa fce3 	bl	800914c <HAL_ADC_ConfigChannel>
 800e786:	4603      	mov	r3, r0
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d001      	beq.n	800e790 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 800e78c:	f000 ffe8 	bl	800f760 <Error_Handler>
  }

}
 800e790:	bf00      	nop
 800e792:	3710      	adds	r7, #16
 800e794:	46bd      	mov	sp, r7
 800e796:	bd80      	pop	{r7, pc}
 800e798:	2000432c 	.word	0x2000432c
 800e79c:	40012200 	.word	0x40012200

0800e7a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b08e      	sub	sp, #56	; 0x38
 800e7a4:	af00      	add	r7, sp, #0
 800e7a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e7a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e7ac:	2200      	movs	r2, #0
 800e7ae:	601a      	str	r2, [r3, #0]
 800e7b0:	605a      	str	r2, [r3, #4]
 800e7b2:	609a      	str	r2, [r3, #8]
 800e7b4:	60da      	str	r2, [r3, #12]
 800e7b6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	4a9b      	ldr	r2, [pc, #620]	; (800ea2c <HAL_ADC_MspInit+0x28c>)
 800e7be:	4293      	cmp	r3, r2
 800e7c0:	d172      	bne.n	800e8a8 <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	623b      	str	r3, [r7, #32]
 800e7c6:	4b9a      	ldr	r3, [pc, #616]	; (800ea30 <HAL_ADC_MspInit+0x290>)
 800e7c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7ca:	4a99      	ldr	r2, [pc, #612]	; (800ea30 <HAL_ADC_MspInit+0x290>)
 800e7cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e7d0:	6453      	str	r3, [r2, #68]	; 0x44
 800e7d2:	4b97      	ldr	r3, [pc, #604]	; (800ea30 <HAL_ADC_MspInit+0x290>)
 800e7d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e7d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e7da:	623b      	str	r3, [r7, #32]
 800e7dc:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e7de:	2300      	movs	r3, #0
 800e7e0:	61fb      	str	r3, [r7, #28]
 800e7e2:	4b93      	ldr	r3, [pc, #588]	; (800ea30 <HAL_ADC_MspInit+0x290>)
 800e7e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7e6:	4a92      	ldr	r2, [pc, #584]	; (800ea30 <HAL_ADC_MspInit+0x290>)
 800e7e8:	f043 0304 	orr.w	r3, r3, #4
 800e7ec:	6313      	str	r3, [r2, #48]	; 0x30
 800e7ee:	4b90      	ldr	r3, [pc, #576]	; (800ea30 <HAL_ADC_MspInit+0x290>)
 800e7f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7f2:	f003 0304 	and.w	r3, r3, #4
 800e7f6:	61fb      	str	r3, [r7, #28]
 800e7f8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e7fa:	2300      	movs	r3, #0
 800e7fc:	61bb      	str	r3, [r7, #24]
 800e7fe:	4b8c      	ldr	r3, [pc, #560]	; (800ea30 <HAL_ADC_MspInit+0x290>)
 800e800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e802:	4a8b      	ldr	r2, [pc, #556]	; (800ea30 <HAL_ADC_MspInit+0x290>)
 800e804:	f043 0301 	orr.w	r3, r3, #1
 800e808:	6313      	str	r3, [r2, #48]	; 0x30
 800e80a:	4b89      	ldr	r3, [pc, #548]	; (800ea30 <HAL_ADC_MspInit+0x290>)
 800e80c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e80e:	f003 0301 	and.w	r3, r3, #1
 800e812:	61bb      	str	r3, [r7, #24]
 800e814:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN10
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800e816:	2301      	movs	r3, #1
 800e818:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e81a:	2303      	movs	r3, #3
 800e81c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e81e:	2300      	movs	r3, #0
 800e820:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e826:	4619      	mov	r1, r3
 800e828:	4882      	ldr	r0, [pc, #520]	; (800ea34 <HAL_ADC_MspInit+0x294>)
 800e82a:	f7fc fae7 	bl	800adfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800e82e:	2301      	movs	r3, #1
 800e830:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e832:	2303      	movs	r3, #3
 800e834:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e836:	2300      	movs	r3, #0
 800e838:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e83a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e83e:	4619      	mov	r1, r3
 800e840:	487d      	ldr	r0, [pc, #500]	; (800ea38 <HAL_ADC_MspInit+0x298>)
 800e842:	f7fc fadb 	bl	800adfc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800e846:	4b7d      	ldr	r3, [pc, #500]	; (800ea3c <HAL_ADC_MspInit+0x29c>)
 800e848:	4a7d      	ldr	r2, [pc, #500]	; (800ea40 <HAL_ADC_MspInit+0x2a0>)
 800e84a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800e84c:	4b7b      	ldr	r3, [pc, #492]	; (800ea3c <HAL_ADC_MspInit+0x29c>)
 800e84e:	2200      	movs	r2, #0
 800e850:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e852:	4b7a      	ldr	r3, [pc, #488]	; (800ea3c <HAL_ADC_MspInit+0x29c>)
 800e854:	2200      	movs	r2, #0
 800e856:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800e858:	4b78      	ldr	r3, [pc, #480]	; (800ea3c <HAL_ADC_MspInit+0x29c>)
 800e85a:	2200      	movs	r2, #0
 800e85c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800e85e:	4b77      	ldr	r3, [pc, #476]	; (800ea3c <HAL_ADC_MspInit+0x29c>)
 800e860:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e864:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800e866:	4b75      	ldr	r3, [pc, #468]	; (800ea3c <HAL_ADC_MspInit+0x29c>)
 800e868:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e86c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800e86e:	4b73      	ldr	r3, [pc, #460]	; (800ea3c <HAL_ADC_MspInit+0x29c>)
 800e870:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800e874:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800e876:	4b71      	ldr	r3, [pc, #452]	; (800ea3c <HAL_ADC_MspInit+0x29c>)
 800e878:	2200      	movs	r2, #0
 800e87a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800e87c:	4b6f      	ldr	r3, [pc, #444]	; (800ea3c <HAL_ADC_MspInit+0x29c>)
 800e87e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800e882:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800e884:	4b6d      	ldr	r3, [pc, #436]	; (800ea3c <HAL_ADC_MspInit+0x29c>)
 800e886:	2200      	movs	r2, #0
 800e888:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800e88a:	486c      	ldr	r0, [pc, #432]	; (800ea3c <HAL_ADC_MspInit+0x29c>)
 800e88c:	f7fb fc3a 	bl	800a104 <HAL_DMA_Init>
 800e890:	4603      	mov	r3, r0
 800e892:	2b00      	cmp	r3, #0
 800e894:	d001      	beq.n	800e89a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800e896:	f000 ff63 	bl	800f760 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	4a67      	ldr	r2, [pc, #412]	; (800ea3c <HAL_ADC_MspInit+0x29c>)
 800e89e:	639a      	str	r2, [r3, #56]	; 0x38
 800e8a0:	4a66      	ldr	r2, [pc, #408]	; (800ea3c <HAL_ADC_MspInit+0x29c>)
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800e8a6:	e0bc      	b.n	800ea22 <HAL_ADC_MspInit+0x282>
  else if(adcHandle->Instance==ADC2)
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	4a65      	ldr	r2, [pc, #404]	; (800ea44 <HAL_ADC_MspInit+0x2a4>)
 800e8ae:	4293      	cmp	r3, r2
 800e8b0:	d159      	bne.n	800e966 <HAL_ADC_MspInit+0x1c6>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800e8b2:	2300      	movs	r3, #0
 800e8b4:	617b      	str	r3, [r7, #20]
 800e8b6:	4b5e      	ldr	r3, [pc, #376]	; (800ea30 <HAL_ADC_MspInit+0x290>)
 800e8b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8ba:	4a5d      	ldr	r2, [pc, #372]	; (800ea30 <HAL_ADC_MspInit+0x290>)
 800e8bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e8c0:	6453      	str	r3, [r2, #68]	; 0x44
 800e8c2:	4b5b      	ldr	r3, [pc, #364]	; (800ea30 <HAL_ADC_MspInit+0x290>)
 800e8c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e8ca:	617b      	str	r3, [r7, #20]
 800e8cc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	613b      	str	r3, [r7, #16]
 800e8d2:	4b57      	ldr	r3, [pc, #348]	; (800ea30 <HAL_ADC_MspInit+0x290>)
 800e8d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8d6:	4a56      	ldr	r2, [pc, #344]	; (800ea30 <HAL_ADC_MspInit+0x290>)
 800e8d8:	f043 0301 	orr.w	r3, r3, #1
 800e8dc:	6313      	str	r3, [r2, #48]	; 0x30
 800e8de:	4b54      	ldr	r3, [pc, #336]	; (800ea30 <HAL_ADC_MspInit+0x290>)
 800e8e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e8e2:	f003 0301 	and.w	r3, r3, #1
 800e8e6:	613b      	str	r3, [r7, #16]
 800e8e8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800e8ea:	2310      	movs	r3, #16
 800e8ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e8ee:	2303      	movs	r3, #3
 800e8f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e8f2:	2300      	movs	r3, #0
 800e8f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e8f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e8fa:	4619      	mov	r1, r3
 800e8fc:	484e      	ldr	r0, [pc, #312]	; (800ea38 <HAL_ADC_MspInit+0x298>)
 800e8fe:	f7fc fa7d 	bl	800adfc <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800e902:	4b51      	ldr	r3, [pc, #324]	; (800ea48 <HAL_ADC_MspInit+0x2a8>)
 800e904:	4a51      	ldr	r2, [pc, #324]	; (800ea4c <HAL_ADC_MspInit+0x2ac>)
 800e906:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800e908:	4b4f      	ldr	r3, [pc, #316]	; (800ea48 <HAL_ADC_MspInit+0x2a8>)
 800e90a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800e90e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e910:	4b4d      	ldr	r3, [pc, #308]	; (800ea48 <HAL_ADC_MspInit+0x2a8>)
 800e912:	2200      	movs	r2, #0
 800e914:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800e916:	4b4c      	ldr	r3, [pc, #304]	; (800ea48 <HAL_ADC_MspInit+0x2a8>)
 800e918:	2200      	movs	r2, #0
 800e91a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800e91c:	4b4a      	ldr	r3, [pc, #296]	; (800ea48 <HAL_ADC_MspInit+0x2a8>)
 800e91e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e922:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800e924:	4b48      	ldr	r3, [pc, #288]	; (800ea48 <HAL_ADC_MspInit+0x2a8>)
 800e926:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e92a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800e92c:	4b46      	ldr	r3, [pc, #280]	; (800ea48 <HAL_ADC_MspInit+0x2a8>)
 800e92e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800e932:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 800e934:	4b44      	ldr	r3, [pc, #272]	; (800ea48 <HAL_ADC_MspInit+0x2a8>)
 800e936:	2200      	movs	r2, #0
 800e938:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 800e93a:	4b43      	ldr	r3, [pc, #268]	; (800ea48 <HAL_ADC_MspInit+0x2a8>)
 800e93c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800e940:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800e942:	4b41      	ldr	r3, [pc, #260]	; (800ea48 <HAL_ADC_MspInit+0x2a8>)
 800e944:	2200      	movs	r2, #0
 800e946:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800e948:	483f      	ldr	r0, [pc, #252]	; (800ea48 <HAL_ADC_MspInit+0x2a8>)
 800e94a:	f7fb fbdb 	bl	800a104 <HAL_DMA_Init>
 800e94e:	4603      	mov	r3, r0
 800e950:	2b00      	cmp	r3, #0
 800e952:	d001      	beq.n	800e958 <HAL_ADC_MspInit+0x1b8>
      Error_Handler();
 800e954:	f000 ff04 	bl	800f760 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	4a3b      	ldr	r2, [pc, #236]	; (800ea48 <HAL_ADC_MspInit+0x2a8>)
 800e95c:	639a      	str	r2, [r3, #56]	; 0x38
 800e95e:	4a3a      	ldr	r2, [pc, #232]	; (800ea48 <HAL_ADC_MspInit+0x2a8>)
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	6393      	str	r3, [r2, #56]	; 0x38
}
 800e964:	e05d      	b.n	800ea22 <HAL_ADC_MspInit+0x282>
  else if(adcHandle->Instance==ADC3)
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	4a39      	ldr	r2, [pc, #228]	; (800ea50 <HAL_ADC_MspInit+0x2b0>)
 800e96c:	4293      	cmp	r3, r2
 800e96e:	d158      	bne.n	800ea22 <HAL_ADC_MspInit+0x282>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800e970:	2300      	movs	r3, #0
 800e972:	60fb      	str	r3, [r7, #12]
 800e974:	4b2e      	ldr	r3, [pc, #184]	; (800ea30 <HAL_ADC_MspInit+0x290>)
 800e976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e978:	4a2d      	ldr	r2, [pc, #180]	; (800ea30 <HAL_ADC_MspInit+0x290>)
 800e97a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e97e:	6453      	str	r3, [r2, #68]	; 0x44
 800e980:	4b2b      	ldr	r3, [pc, #172]	; (800ea30 <HAL_ADC_MspInit+0x290>)
 800e982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e988:	60fb      	str	r3, [r7, #12]
 800e98a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e98c:	2300      	movs	r3, #0
 800e98e:	60bb      	str	r3, [r7, #8]
 800e990:	4b27      	ldr	r3, [pc, #156]	; (800ea30 <HAL_ADC_MspInit+0x290>)
 800e992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e994:	4a26      	ldr	r2, [pc, #152]	; (800ea30 <HAL_ADC_MspInit+0x290>)
 800e996:	f043 0301 	orr.w	r3, r3, #1
 800e99a:	6313      	str	r3, [r2, #48]	; 0x30
 800e99c:	4b24      	ldr	r3, [pc, #144]	; (800ea30 <HAL_ADC_MspInit+0x290>)
 800e99e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e9a0:	f003 0301 	and.w	r3, r3, #1
 800e9a4:	60bb      	str	r3, [r7, #8]
 800e9a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800e9a8:	2302      	movs	r3, #2
 800e9aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800e9ac:	2303      	movs	r3, #3
 800e9ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e9b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e9b8:	4619      	mov	r1, r3
 800e9ba:	481f      	ldr	r0, [pc, #124]	; (800ea38 <HAL_ADC_MspInit+0x298>)
 800e9bc:	f7fc fa1e 	bl	800adfc <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 800e9c0:	4b24      	ldr	r3, [pc, #144]	; (800ea54 <HAL_ADC_MspInit+0x2b4>)
 800e9c2:	4a25      	ldr	r2, [pc, #148]	; (800ea58 <HAL_ADC_MspInit+0x2b8>)
 800e9c4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 800e9c6:	4b23      	ldr	r3, [pc, #140]	; (800ea54 <HAL_ADC_MspInit+0x2b4>)
 800e9c8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800e9cc:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800e9ce:	4b21      	ldr	r3, [pc, #132]	; (800ea54 <HAL_ADC_MspInit+0x2b4>)
 800e9d0:	2200      	movs	r2, #0
 800e9d2:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800e9d4:	4b1f      	ldr	r3, [pc, #124]	; (800ea54 <HAL_ADC_MspInit+0x2b4>)
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800e9da:	4b1e      	ldr	r3, [pc, #120]	; (800ea54 <HAL_ADC_MspInit+0x2b4>)
 800e9dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e9e0:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800e9e2:	4b1c      	ldr	r3, [pc, #112]	; (800ea54 <HAL_ADC_MspInit+0x2b4>)
 800e9e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e9e8:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800e9ea:	4b1a      	ldr	r3, [pc, #104]	; (800ea54 <HAL_ADC_MspInit+0x2b4>)
 800e9ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800e9f0:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 800e9f2:	4b18      	ldr	r3, [pc, #96]	; (800ea54 <HAL_ADC_MspInit+0x2b4>)
 800e9f4:	2200      	movs	r2, #0
 800e9f6:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 800e9f8:	4b16      	ldr	r3, [pc, #88]	; (800ea54 <HAL_ADC_MspInit+0x2b4>)
 800e9fa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800e9fe:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ea00:	4b14      	ldr	r3, [pc, #80]	; (800ea54 <HAL_ADC_MspInit+0x2b4>)
 800ea02:	2200      	movs	r2, #0
 800ea04:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800ea06:	4813      	ldr	r0, [pc, #76]	; (800ea54 <HAL_ADC_MspInit+0x2b4>)
 800ea08:	f7fb fb7c 	bl	800a104 <HAL_DMA_Init>
 800ea0c:	4603      	mov	r3, r0
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d001      	beq.n	800ea16 <HAL_ADC_MspInit+0x276>
      Error_Handler();
 800ea12:	f000 fea5 	bl	800f760 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	4a0e      	ldr	r2, [pc, #56]	; (800ea54 <HAL_ADC_MspInit+0x2b4>)
 800ea1a:	639a      	str	r2, [r3, #56]	; 0x38
 800ea1c:	4a0d      	ldr	r2, [pc, #52]	; (800ea54 <HAL_ADC_MspInit+0x2b4>)
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	6393      	str	r3, [r2, #56]	; 0x38
}
 800ea22:	bf00      	nop
 800ea24:	3738      	adds	r7, #56	; 0x38
 800ea26:	46bd      	mov	sp, r7
 800ea28:	bd80      	pop	{r7, pc}
 800ea2a:	bf00      	nop
 800ea2c:	40012000 	.word	0x40012000
 800ea30:	40023800 	.word	0x40023800
 800ea34:	40020800 	.word	0x40020800
 800ea38:	40020000 	.word	0x40020000
 800ea3c:	20004374 	.word	0x20004374
 800ea40:	40026410 	.word	0x40026410
 800ea44:	40012100 	.word	0x40012100
 800ea48:	200043d4 	.word	0x200043d4
 800ea4c:	40026440 	.word	0x40026440
 800ea50:	40012200 	.word	0x40012200
 800ea54:	20004284 	.word	0x20004284
 800ea58:	40026428 	.word	0x40026428

0800ea5c <ADC_Init>:

/* USER CODE BEGIN 1 */


void ADC_Init(void)
{
 800ea5c:	b580      	push	{r7, lr}
 800ea5e:	af00      	add	r7, sp, #0

	  // ADC Starting
	  HAL_ADC_Start_DMA(&hadc1, AD_Iu, 2);
 800ea60:	2202      	movs	r2, #2
 800ea62:	4908      	ldr	r1, [pc, #32]	; (800ea84 <ADC_Init+0x28>)
 800ea64:	4808      	ldr	r0, [pc, #32]	; (800ea88 <ADC_Init+0x2c>)
 800ea66:	f7fa fa61 	bl	8008f2c <HAL_ADC_Start_DMA>
	  HAL_ADC_Start_DMA(&hadc2, AD_Iv, 1);
 800ea6a:	2201      	movs	r2, #1
 800ea6c:	4907      	ldr	r1, [pc, #28]	; (800ea8c <ADC_Init+0x30>)
 800ea6e:	4808      	ldr	r0, [pc, #32]	; (800ea90 <ADC_Init+0x34>)
 800ea70:	f7fa fa5c 	bl	8008f2c <HAL_ADC_Start_DMA>
	  HAL_ADC_Start_DMA(&hadc3, AD_Iw, 1);
 800ea74:	2201      	movs	r2, #1
 800ea76:	4907      	ldr	r1, [pc, #28]	; (800ea94 <ADC_Init+0x38>)
 800ea78:	4807      	ldr	r0, [pc, #28]	; (800ea98 <ADC_Init+0x3c>)
 800ea7a:	f7fa fa57 	bl	8008f2c <HAL_ADC_Start_DMA>

}
 800ea7e:	bf00      	nop
 800ea80:	bd80      	pop	{r7, pc}
 800ea82:	bf00      	nop
 800ea84:	2000012c 	.word	0x2000012c
 800ea88:	200042e4 	.word	0x200042e4
 800ea8c:	20000130 	.word	0x20000130
 800ea90:	2000423c 	.word	0x2000423c
 800ea94:	20000134 	.word	0x20000134
 800ea98:	2000432c 	.word	0x2000432c

0800ea9c <get_current_dq>:


void get_current_dq(float *Id, float *Iq, int SVM_sector, float cos_theta_re, float sin_theta_re)
{
 800ea9c:	b580      	push	{r7, lr}
 800ea9e:	b086      	sub	sp, #24
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	6178      	str	r0, [r7, #20]
 800eaa4:	6139      	str	r1, [r7, #16]
 800eaa6:	60fa      	str	r2, [r7, #12]
 800eaa8:	ed87 0a02 	vstr	s0, [r7, #8]
 800eaac:	edc7 0a01 	vstr	s1, [r7, #4]
	AD_Iu = HAL_ADC_GetValue(&hadc1);
	AD_Iv = HAL_ADC_GetValue(&hadc2);
	AD_Iw = HAL_ADC_GetValue(&hadc3);
	*/

	HAL_ADC_Start_DMA(&hadc1, AD_Iu, 2);
 800eab0:	2202      	movs	r2, #2
 800eab2:	49be      	ldr	r1, [pc, #760]	; (800edac <get_current_dq+0x310>)
 800eab4:	48be      	ldr	r0, [pc, #760]	; (800edb0 <get_current_dq+0x314>)
 800eab6:	f7fa fa39 	bl	8008f2c <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, AD_Iv, 1);
 800eaba:	2201      	movs	r2, #1
 800eabc:	49bd      	ldr	r1, [pc, #756]	; (800edb4 <get_current_dq+0x318>)
 800eabe:	48be      	ldr	r0, [pc, #760]	; (800edb8 <get_current_dq+0x31c>)
 800eac0:	f7fa fa34 	bl	8008f2c <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc3, AD_Iw, 1);
 800eac4:	2201      	movs	r2, #1
 800eac6:	49bd      	ldr	r1, [pc, #756]	; (800edbc <get_current_dq+0x320>)
 800eac8:	48bd      	ldr	r0, [pc, #756]	; (800edc0 <get_current_dq+0x324>)
 800eaca:	f7fa fa2f 	bl	8008f2c <HAL_ADC_Start_DMA>

#endif

#if _MEDF_ENABLE_

	AD_Iu_buf[pos_MEDF_I] = (int32_t)AD_Iu[0];
 800eace:	4bb7      	ldr	r3, [pc, #732]	; (800edac <get_current_dq+0x310>)
 800ead0:	881b      	ldrh	r3, [r3, #0]
 800ead2:	b29a      	uxth	r2, r3
 800ead4:	4bbb      	ldr	r3, [pc, #748]	; (800edc4 <get_current_dq+0x328>)
 800ead6:	681b      	ldr	r3, [r3, #0]
 800ead8:	4611      	mov	r1, r2
 800eada:	4abb      	ldr	r2, [pc, #748]	; (800edc8 <get_current_dq+0x32c>)
 800eadc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	AD_Iv_buf[pos_MEDF_I] = (int32_t)AD_Iv[0];
 800eae0:	4bb4      	ldr	r3, [pc, #720]	; (800edb4 <get_current_dq+0x318>)
 800eae2:	881b      	ldrh	r3, [r3, #0]
 800eae4:	b29a      	uxth	r2, r3
 800eae6:	4bb7      	ldr	r3, [pc, #732]	; (800edc4 <get_current_dq+0x328>)
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	4611      	mov	r1, r2
 800eaec:	4ab7      	ldr	r2, [pc, #732]	; (800edcc <get_current_dq+0x330>)
 800eaee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	AD_Iw_buf[pos_MEDF_I] = (int32_t)AD_Iw[0];
 800eaf2:	4bb2      	ldr	r3, [pc, #712]	; (800edbc <get_current_dq+0x320>)
 800eaf4:	881b      	ldrh	r3, [r3, #0]
 800eaf6:	b29a      	uxth	r2, r3
 800eaf8:	4bb2      	ldr	r3, [pc, #712]	; (800edc4 <get_current_dq+0x328>)
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	4611      	mov	r1, r2
 800eafe:	4ab4      	ldr	r2, [pc, #720]	; (800edd0 <get_current_dq+0x334>)
 800eb00:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	pos_MEDF_I += 1;
 800eb04:	4baf      	ldr	r3, [pc, #700]	; (800edc4 <get_current_dq+0x328>)
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	3301      	adds	r3, #1
 800eb0a:	4aae      	ldr	r2, [pc, #696]	; (800edc4 <get_current_dq+0x328>)
 800eb0c:	6013      	str	r3, [r2, #0]
	if(pos_MEDF_I >= N_MEDF_I)
 800eb0e:	4bad      	ldr	r3, [pc, #692]	; (800edc4 <get_current_dq+0x328>)
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	2b02      	cmp	r3, #2
 800eb14:	dd02      	ble.n	800eb1c <get_current_dq+0x80>
	{
		pos_MEDF_I = 0;
 800eb16:	4bab      	ldr	r3, [pc, #684]	; (800edc4 <get_current_dq+0x328>)
 800eb18:	2200      	movs	r2, #0
 800eb1a:	601a      	str	r2, [r3, #0]
	}

	AD_Iu_MEDF = median3(AD_Iu_buf);
 800eb1c:	48aa      	ldr	r0, [pc, #680]	; (800edc8 <get_current_dq+0x32c>)
 800eb1e:	f000 f979 	bl	800ee14 <median3>
 800eb22:	4602      	mov	r2, r0
 800eb24:	4bab      	ldr	r3, [pc, #684]	; (800edd4 <get_current_dq+0x338>)
 800eb26:	601a      	str	r2, [r3, #0]
	AD_Iv_MEDF = median3(AD_Iv_buf);
 800eb28:	48a8      	ldr	r0, [pc, #672]	; (800edcc <get_current_dq+0x330>)
 800eb2a:	f000 f973 	bl	800ee14 <median3>
 800eb2e:	4602      	mov	r2, r0
 800eb30:	4ba9      	ldr	r3, [pc, #676]	; (800edd8 <get_current_dq+0x33c>)
 800eb32:	601a      	str	r2, [r3, #0]
	AD_Iw_MEDF = median3(AD_Iw_buf);
 800eb34:	48a6      	ldr	r0, [pc, #664]	; (800edd0 <get_current_dq+0x334>)
 800eb36:	f000 f96d 	bl	800ee14 <median3>
 800eb3a:	4602      	mov	r2, r0
 800eb3c:	4ba7      	ldr	r3, [pc, #668]	; (800eddc <get_current_dq+0x340>)
 800eb3e:	601a      	str	r2, [r3, #0]

	V_Iu = (float)AD_Iu_MEDF / AD_Range * Vref_AD - V_Iu_offset;
 800eb40:	4ba4      	ldr	r3, [pc, #656]	; (800edd4 <get_current_dq+0x338>)
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	ee07 3a90 	vmov	s15, r3
 800eb48:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800eb4c:	eddf 7aa4 	vldr	s15, [pc, #656]	; 800ede0 <get_current_dq+0x344>
 800eb50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800eb54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eb58:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 800ede4 <get_current_dq+0x348>
 800eb5c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800eb60:	4ba1      	ldr	r3, [pc, #644]	; (800ede8 <get_current_dq+0x34c>)
 800eb62:	edd3 7a00 	vldr	s15, [r3]
 800eb66:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eb6a:	4ba0      	ldr	r3, [pc, #640]	; (800edec <get_current_dq+0x350>)
 800eb6c:	edc3 7a00 	vstr	s15, [r3]
	V_Iv = (float)AD_Iv_MEDF / AD_Range * Vref_AD - V_Iv_offset;
 800eb70:	4b99      	ldr	r3, [pc, #612]	; (800edd8 <get_current_dq+0x33c>)
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	ee07 3a90 	vmov	s15, r3
 800eb78:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800eb7c:	eddf 7a98 	vldr	s15, [pc, #608]	; 800ede0 <get_current_dq+0x344>
 800eb80:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800eb84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eb88:	ed9f 7a96 	vldr	s14, [pc, #600]	; 800ede4 <get_current_dq+0x348>
 800eb8c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800eb90:	4b97      	ldr	r3, [pc, #604]	; (800edf0 <get_current_dq+0x354>)
 800eb92:	edd3 7a00 	vldr	s15, [r3]
 800eb96:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eb9a:	4b96      	ldr	r3, [pc, #600]	; (800edf4 <get_current_dq+0x358>)
 800eb9c:	edc3 7a00 	vstr	s15, [r3]
	V_Iw = (float)AD_Iw_MEDF / AD_Range * Vref_AD - V_Iw_offset;
 800eba0:	4b8e      	ldr	r3, [pc, #568]	; (800eddc <get_current_dq+0x340>)
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	ee07 3a90 	vmov	s15, r3
 800eba8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800ebac:	eddf 7a8c 	vldr	s15, [pc, #560]	; 800ede0 <get_current_dq+0x344>
 800ebb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ebb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ebb8:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800ede4 <get_current_dq+0x348>
 800ebbc:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ebc0:	4b8d      	ldr	r3, [pc, #564]	; (800edf8 <get_current_dq+0x35c>)
 800ebc2:	edd3 7a00 	vldr	s15, [r3]
 800ebc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ebca:	4b8c      	ldr	r3, [pc, #560]	; (800edfc <get_current_dq+0x360>)
 800ebcc:	edc3 7a00 	vstr	s15, [r3]

#endif

	//Vdc = Vdc * 0.9 + 0.1 * (float)AD_Iu[1] / AD_Range * Vref_AD * Gain_Vdc_sense;

	switch(SVM_sector)
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	2b05      	cmp	r3, #5
 800ebd4:	d874      	bhi.n	800ecc0 <get_current_dq+0x224>
 800ebd6:	a201      	add	r2, pc, #4	; (adr r2, 800ebdc <get_current_dq+0x140>)
 800ebd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebdc:	0800ebf5 	.word	0x0800ebf5
 800ebe0:	0800ec39 	.word	0x0800ec39
 800ebe4:	0800ec39 	.word	0x0800ec39
 800ebe8:	0800ec7d 	.word	0x0800ec7d
 800ebec:	0800ec7d 	.word	0x0800ec7d
 800ebf0:	0800ebf5 	.word	0x0800ebf5
	{
	case 0: case 5:
		Iv = V_Iv * Gain_currentSense;
 800ebf4:	4b7f      	ldr	r3, [pc, #508]	; (800edf4 <get_current_dq+0x358>)
 800ebf6:	edd3 7a00 	vldr	s15, [r3]
 800ebfa:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 800ebfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ec02:	4b7f      	ldr	r3, [pc, #508]	; (800ee00 <get_current_dq+0x364>)
 800ec04:	edc3 7a00 	vstr	s15, [r3]
		Iw = V_Iw * Gain_currentSense;
 800ec08:	4b7c      	ldr	r3, [pc, #496]	; (800edfc <get_current_dq+0x360>)
 800ec0a:	edd3 7a00 	vldr	s15, [r3]
 800ec0e:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 800ec12:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ec16:	4b7b      	ldr	r3, [pc, #492]	; (800ee04 <get_current_dq+0x368>)
 800ec18:	edc3 7a00 	vstr	s15, [r3]
		Iu = - Iv - Iw;
 800ec1c:	4b78      	ldr	r3, [pc, #480]	; (800ee00 <get_current_dq+0x364>)
 800ec1e:	edd3 7a00 	vldr	s15, [r3]
 800ec22:	eeb1 7a67 	vneg.f32	s14, s15
 800ec26:	4b77      	ldr	r3, [pc, #476]	; (800ee04 <get_current_dq+0x368>)
 800ec28:	edd3 7a00 	vldr	s15, [r3]
 800ec2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ec30:	4b75      	ldr	r3, [pc, #468]	; (800ee08 <get_current_dq+0x36c>)
 800ec32:	edc3 7a00 	vstr	s15, [r3]
		break;
 800ec36:	e043      	b.n	800ecc0 <get_current_dq+0x224>

	case 1: case 2:
		Iw = V_Iw * Gain_currentSense;
 800ec38:	4b70      	ldr	r3, [pc, #448]	; (800edfc <get_current_dq+0x360>)
 800ec3a:	edd3 7a00 	vldr	s15, [r3]
 800ec3e:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 800ec42:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ec46:	4b6f      	ldr	r3, [pc, #444]	; (800ee04 <get_current_dq+0x368>)
 800ec48:	edc3 7a00 	vstr	s15, [r3]
		Iu = V_Iu * Gain_currentSense;
 800ec4c:	4b67      	ldr	r3, [pc, #412]	; (800edec <get_current_dq+0x350>)
 800ec4e:	edd3 7a00 	vldr	s15, [r3]
 800ec52:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 800ec56:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ec5a:	4b6b      	ldr	r3, [pc, #428]	; (800ee08 <get_current_dq+0x36c>)
 800ec5c:	edc3 7a00 	vstr	s15, [r3]
		Iv = - Iw - Iu;
 800ec60:	4b68      	ldr	r3, [pc, #416]	; (800ee04 <get_current_dq+0x368>)
 800ec62:	edd3 7a00 	vldr	s15, [r3]
 800ec66:	eeb1 7a67 	vneg.f32	s14, s15
 800ec6a:	4b67      	ldr	r3, [pc, #412]	; (800ee08 <get_current_dq+0x36c>)
 800ec6c:	edd3 7a00 	vldr	s15, [r3]
 800ec70:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ec74:	4b62      	ldr	r3, [pc, #392]	; (800ee00 <get_current_dq+0x364>)
 800ec76:	edc3 7a00 	vstr	s15, [r3]
		break;
 800ec7a:	e021      	b.n	800ecc0 <get_current_dq+0x224>

	case 3: case 4:
		Iu = V_Iu * Gain_currentSense;
 800ec7c:	4b5b      	ldr	r3, [pc, #364]	; (800edec <get_current_dq+0x350>)
 800ec7e:	edd3 7a00 	vldr	s15, [r3]
 800ec82:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 800ec86:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ec8a:	4b5f      	ldr	r3, [pc, #380]	; (800ee08 <get_current_dq+0x36c>)
 800ec8c:	edc3 7a00 	vstr	s15, [r3]
		Iv = V_Iv * Gain_currentSense;
 800ec90:	4b58      	ldr	r3, [pc, #352]	; (800edf4 <get_current_dq+0x358>)
 800ec92:	edd3 7a00 	vldr	s15, [r3]
 800ec96:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 800ec9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ec9e:	4b58      	ldr	r3, [pc, #352]	; (800ee00 <get_current_dq+0x364>)
 800eca0:	edc3 7a00 	vstr	s15, [r3]
		Iw = - Iu - Iv;
 800eca4:	4b58      	ldr	r3, [pc, #352]	; (800ee08 <get_current_dq+0x36c>)
 800eca6:	edd3 7a00 	vldr	s15, [r3]
 800ecaa:	eeb1 7a67 	vneg.f32	s14, s15
 800ecae:	4b54      	ldr	r3, [pc, #336]	; (800ee00 <get_current_dq+0x364>)
 800ecb0:	edd3 7a00 	vldr	s15, [r3]
 800ecb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ecb8:	4b52      	ldr	r3, [pc, #328]	; (800ee04 <get_current_dq+0x368>)
 800ecba:	edc3 7a00 	vstr	s15, [r3]
		break;
 800ecbe:	bf00      	nop
	}

	*Id = 0.8165f * (Iu * cos_theta_re + Iv * (-0.5f * cos_theta_re + 0.855f * sin_theta_re) + Iw * (-0.5f * cos_theta_re - 0.855f * sin_theta_re));
 800ecc0:	4b51      	ldr	r3, [pc, #324]	; (800ee08 <get_current_dq+0x36c>)
 800ecc2:	ed93 7a00 	vldr	s14, [r3]
 800ecc6:	edd7 7a02 	vldr	s15, [r7, #8]
 800ecca:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ecce:	edd7 7a02 	vldr	s15, [r7, #8]
 800ecd2:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 800ecd6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800ecda:	edd7 7a01 	vldr	s15, [r7, #4]
 800ecde:	ed9f 6a4b 	vldr	s12, [pc, #300]	; 800ee0c <get_current_dq+0x370>
 800ece2:	ee67 7a86 	vmul.f32	s15, s15, s12
 800ece6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800ecea:	4b45      	ldr	r3, [pc, #276]	; (800ee00 <get_current_dq+0x364>)
 800ecec:	edd3 7a00 	vldr	s15, [r3]
 800ecf0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ecf4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ecf8:	edd7 7a02 	vldr	s15, [r7, #8]
 800ecfc:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 800ed00:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800ed04:	edd7 7a01 	vldr	s15, [r7, #4]
 800ed08:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800ee0c <get_current_dq+0x370>
 800ed0c:	ee67 7a86 	vmul.f32	s15, s15, s12
 800ed10:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800ed14:	4b3b      	ldr	r3, [pc, #236]	; (800ee04 <get_current_dq+0x368>)
 800ed16:	edd3 7a00 	vldr	s15, [r3]
 800ed1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ed1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ed22:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800ee10 <get_current_dq+0x374>
 800ed26:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ed2a:	697b      	ldr	r3, [r7, #20]
 800ed2c:	edc3 7a00 	vstr	s15, [r3]
	*Iq = 0.8165f * (-Iu * sin_theta_re + Iv * (0.5f * sin_theta_re + 0.855f * cos_theta_re) + Iw * (0.5f * sin_theta_re - 0.855f * cos_theta_re));
 800ed30:	4b35      	ldr	r3, [pc, #212]	; (800ee08 <get_current_dq+0x36c>)
 800ed32:	edd3 7a00 	vldr	s15, [r3]
 800ed36:	eeb1 7a67 	vneg.f32	s14, s15
 800ed3a:	edd7 7a01 	vldr	s15, [r7, #4]
 800ed3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ed42:	edd7 7a01 	vldr	s15, [r7, #4]
 800ed46:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800ed4a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800ed4e:	edd7 7a02 	vldr	s15, [r7, #8]
 800ed52:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 800ee0c <get_current_dq+0x370>
 800ed56:	ee67 7a86 	vmul.f32	s15, s15, s12
 800ed5a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800ed5e:	4b28      	ldr	r3, [pc, #160]	; (800ee00 <get_current_dq+0x364>)
 800ed60:	edd3 7a00 	vldr	s15, [r3]
 800ed64:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ed68:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ed6c:	edd7 7a01 	vldr	s15, [r7, #4]
 800ed70:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800ed74:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800ed78:	edd7 7a02 	vldr	s15, [r7, #8]
 800ed7c:	ed9f 6a23 	vldr	s12, [pc, #140]	; 800ee0c <get_current_dq+0x370>
 800ed80:	ee67 7a86 	vmul.f32	s15, s15, s12
 800ed84:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800ed88:	4b1e      	ldr	r3, [pc, #120]	; (800ee04 <get_current_dq+0x368>)
 800ed8a:	edd3 7a00 	vldr	s15, [r3]
 800ed8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ed92:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ed96:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800ee10 <get_current_dq+0x374>
 800ed9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ed9e:	693b      	ldr	r3, [r7, #16]
 800eda0:	edc3 7a00 	vstr	s15, [r3]


	return;
 800eda4:	bf00      	nop

}
 800eda6:	3718      	adds	r7, #24
 800eda8:	46bd      	mov	sp, r7
 800edaa:	bd80      	pop	{r7, pc}
 800edac:	2000012c 	.word	0x2000012c
 800edb0:	200042e4 	.word	0x200042e4
 800edb4:	20000130 	.word	0x20000130
 800edb8:	2000423c 	.word	0x2000423c
 800edbc:	20000134 	.word	0x20000134
 800edc0:	2000432c 	.word	0x2000432c
 800edc4:	20000150 	.word	0x20000150
 800edc8:	20000154 	.word	0x20000154
 800edcc:	20000160 	.word	0x20000160
 800edd0:	2000016c 	.word	0x2000016c
 800edd4:	20000178 	.word	0x20000178
 800edd8:	2000017c 	.word	0x2000017c
 800eddc:	20000180 	.word	0x20000180
 800ede0:	00001000 	.word	0x00001000
 800ede4:	40533333 	.word	0x40533333
 800ede8:	20000024 	.word	0x20000024
 800edec:	20000138 	.word	0x20000138
 800edf0:	20000028 	.word	0x20000028
 800edf4:	2000013c 	.word	0x2000013c
 800edf8:	2000002c 	.word	0x2000002c
 800edfc:	20000140 	.word	0x20000140
 800ee00:	20000148 	.word	0x20000148
 800ee04:	2000014c 	.word	0x2000014c
 800ee08:	20000144 	.word	0x20000144
 800ee0c:	3f5ae148 	.word	0x3f5ae148
 800ee10:	3f510625 	.word	0x3f510625

0800ee14 <median3>:



extern int32_t median3(int32_t *buf)
{
 800ee14:	b480      	push	{r7}
 800ee16:	b083      	sub	sp, #12
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	6078      	str	r0, [r7, #4]

	if(buf[0] < buf[1])
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	681a      	ldr	r2, [r3, #0]
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	3304      	adds	r3, #4
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	429a      	cmp	r2, r3
 800ee28:	da17      	bge.n	800ee5a <median3+0x46>
	{
		if(buf[2] < buf[0])			return buf[0];
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	3308      	adds	r3, #8
 800ee2e:	681a      	ldr	r2, [r3, #0]
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	681b      	ldr	r3, [r3, #0]
 800ee34:	429a      	cmp	r2, r3
 800ee36:	da02      	bge.n	800ee3e <median3+0x2a>
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	e025      	b.n	800ee8a <median3+0x76>
		else if(buf[2] < buf[1])	return buf[2];
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	3308      	adds	r3, #8
 800ee42:	681a      	ldr	r2, [r3, #0]
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	3304      	adds	r3, #4
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	429a      	cmp	r2, r3
 800ee4c:	da02      	bge.n	800ee54 <median3+0x40>
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	689b      	ldr	r3, [r3, #8]
 800ee52:	e01a      	b.n	800ee8a <median3+0x76>
		else						return buf[1];
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	685b      	ldr	r3, [r3, #4]
 800ee58:	e017      	b.n	800ee8a <median3+0x76>
	}
	else
	{
		if(buf[2] < buf[1])			return buf[1];
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	3308      	adds	r3, #8
 800ee5e:	681a      	ldr	r2, [r3, #0]
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	3304      	adds	r3, #4
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	429a      	cmp	r2, r3
 800ee68:	da02      	bge.n	800ee70 <median3+0x5c>
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	685b      	ldr	r3, [r3, #4]
 800ee6e:	e00c      	b.n	800ee8a <median3+0x76>
		else if(buf[2] < buf[1])	return buf[2];
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	3308      	adds	r3, #8
 800ee74:	681a      	ldr	r2, [r3, #0]
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	3304      	adds	r3, #4
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	429a      	cmp	r2, r3
 800ee7e:	da02      	bge.n	800ee86 <median3+0x72>
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	689b      	ldr	r3, [r3, #8]
 800ee84:	e001      	b.n	800ee8a <median3+0x76>
		else						return buf[0];
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	681b      	ldr	r3, [r3, #0]
	}

	return 0;
}
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	370c      	adds	r7, #12
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee94:	4770      	bx	lr
	...

0800ee98 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 800ee9c:	4b18      	ldr	r3, [pc, #96]	; (800ef00 <MX_CAN1_Init+0x68>)
 800ee9e:	4a19      	ldr	r2, [pc, #100]	; (800ef04 <MX_CAN1_Init+0x6c>)
 800eea0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 800eea2:	4b17      	ldr	r3, [pc, #92]	; (800ef00 <MX_CAN1_Init+0x68>)
 800eea4:	2204      	movs	r2, #4
 800eea6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800eea8:	4b15      	ldr	r3, [pc, #84]	; (800ef00 <MX_CAN1_Init+0x68>)
 800eeaa:	2200      	movs	r2, #0
 800eeac:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 800eeae:	4b14      	ldr	r3, [pc, #80]	; (800ef00 <MX_CAN1_Init+0x68>)
 800eeb0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800eeb4:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 800eeb6:	4b12      	ldr	r3, [pc, #72]	; (800ef00 <MX_CAN1_Init+0x68>)
 800eeb8:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800eebc:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 800eebe:	4b10      	ldr	r3, [pc, #64]	; (800ef00 <MX_CAN1_Init+0x68>)
 800eec0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800eec4:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800eec6:	4b0e      	ldr	r3, [pc, #56]	; (800ef00 <MX_CAN1_Init+0x68>)
 800eec8:	2200      	movs	r2, #0
 800eeca:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800eecc:	4b0c      	ldr	r3, [pc, #48]	; (800ef00 <MX_CAN1_Init+0x68>)
 800eece:	2200      	movs	r2, #0
 800eed0:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800eed2:	4b0b      	ldr	r3, [pc, #44]	; (800ef00 <MX_CAN1_Init+0x68>)
 800eed4:	2200      	movs	r2, #0
 800eed6:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800eed8:	4b09      	ldr	r3, [pc, #36]	; (800ef00 <MX_CAN1_Init+0x68>)
 800eeda:	2200      	movs	r2, #0
 800eedc:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800eede:	4b08      	ldr	r3, [pc, #32]	; (800ef00 <MX_CAN1_Init+0x68>)
 800eee0:	2200      	movs	r2, #0
 800eee2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800eee4:	4b06      	ldr	r3, [pc, #24]	; (800ef00 <MX_CAN1_Init+0x68>)
 800eee6:	2200      	movs	r2, #0
 800eee8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800eeea:	4805      	ldr	r0, [pc, #20]	; (800ef00 <MX_CAN1_Init+0x68>)
 800eeec:	f7fa fbde 	bl	80096ac <HAL_CAN_Init>
 800eef0:	4603      	mov	r3, r0
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d001      	beq.n	800eefa <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800eef6:	f000 fc33 	bl	800f760 <Error_Handler>
  }

}
 800eefa:	bf00      	nop
 800eefc:	bd80      	pop	{r7, pc}
 800eefe:	bf00      	nop
 800ef00:	20004480 	.word	0x20004480
 800ef04:	40006400 	.word	0x40006400

0800ef08 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b08a      	sub	sp, #40	; 0x28
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ef10:	f107 0314 	add.w	r3, r7, #20
 800ef14:	2200      	movs	r2, #0
 800ef16:	601a      	str	r2, [r3, #0]
 800ef18:	605a      	str	r2, [r3, #4]
 800ef1a:	609a      	str	r2, [r3, #8]
 800ef1c:	60da      	str	r2, [r3, #12]
 800ef1e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	4a21      	ldr	r2, [pc, #132]	; (800efac <HAL_CAN_MspInit+0xa4>)
 800ef26:	4293      	cmp	r3, r2
 800ef28:	d13c      	bne.n	800efa4 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	613b      	str	r3, [r7, #16]
 800ef2e:	4b20      	ldr	r3, [pc, #128]	; (800efb0 <HAL_CAN_MspInit+0xa8>)
 800ef30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef32:	4a1f      	ldr	r2, [pc, #124]	; (800efb0 <HAL_CAN_MspInit+0xa8>)
 800ef34:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800ef38:	6413      	str	r3, [r2, #64]	; 0x40
 800ef3a:	4b1d      	ldr	r3, [pc, #116]	; (800efb0 <HAL_CAN_MspInit+0xa8>)
 800ef3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ef42:	613b      	str	r3, [r7, #16]
 800ef44:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ef46:	2300      	movs	r3, #0
 800ef48:	60fb      	str	r3, [r7, #12]
 800ef4a:	4b19      	ldr	r3, [pc, #100]	; (800efb0 <HAL_CAN_MspInit+0xa8>)
 800ef4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef4e:	4a18      	ldr	r2, [pc, #96]	; (800efb0 <HAL_CAN_MspInit+0xa8>)
 800ef50:	f043 0301 	orr.w	r3, r3, #1
 800ef54:	6313      	str	r3, [r2, #48]	; 0x30
 800ef56:	4b16      	ldr	r3, [pc, #88]	; (800efb0 <HAL_CAN_MspInit+0xa8>)
 800ef58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ef5a:	f003 0301 	and.w	r3, r3, #1
 800ef5e:	60fb      	str	r3, [r7, #12]
 800ef60:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ef62:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ef66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ef68:	2302      	movs	r3, #2
 800ef6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ef70:	2303      	movs	r3, #3
 800ef72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800ef74:	2309      	movs	r3, #9
 800ef76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ef78:	f107 0314 	add.w	r3, r7, #20
 800ef7c:	4619      	mov	r1, r3
 800ef7e:	480d      	ldr	r0, [pc, #52]	; (800efb4 <HAL_CAN_MspInit+0xac>)
 800ef80:	f7fb ff3c 	bl	800adfc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 800ef84:	2200      	movs	r2, #0
 800ef86:	2100      	movs	r1, #0
 800ef88:	2013      	movs	r0, #19
 800ef8a:	f7fb f884 	bl	800a096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800ef8e:	2013      	movs	r0, #19
 800ef90:	f7fb f89d 	bl	800a0ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800ef94:	2200      	movs	r2, #0
 800ef96:	2100      	movs	r1, #0
 800ef98:	2014      	movs	r0, #20
 800ef9a:	f7fb f87c 	bl	800a096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800ef9e:	2014      	movs	r0, #20
 800efa0:	f7fb f895 	bl	800a0ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800efa4:	bf00      	nop
 800efa6:	3728      	adds	r7, #40	; 0x28
 800efa8:	46bd      	mov	sp, r7
 800efaa:	bd80      	pop	{r7, pc}
 800efac:	40006400 	.word	0x40006400
 800efb0:	40023800 	.word	0x40023800
 800efb4:	40020000 	.word	0x40020000

0800efb8 <getChannel>:

}


uint8_t getChannel()
{
 800efb8:	b580      	push	{r7, lr}
 800efba:	b082      	sub	sp, #8
 800efbc:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 800efbe:	2300      	movs	r3, #0
 800efc0:	71fb      	strb	r3, [r7, #7]

	ch |= !HAL_GPIO_ReadPin(CH_b0_GPIO_Port, CH_b0_Pin) << 0;
 800efc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800efc6:	481b      	ldr	r0, [pc, #108]	; (800f034 <getChannel+0x7c>)
 800efc8:	f7fc f8aa 	bl	800b120 <HAL_GPIO_ReadPin>
 800efcc:	4603      	mov	r3, r0
 800efce:	2b00      	cmp	r3, #0
 800efd0:	bf0c      	ite	eq
 800efd2:	2301      	moveq	r3, #1
 800efd4:	2300      	movne	r3, #0
 800efd6:	b2db      	uxtb	r3, r3
 800efd8:	b25a      	sxtb	r2, r3
 800efda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800efde:	4313      	orrs	r3, r2
 800efe0:	b25b      	sxtb	r3, r3
 800efe2:	71fb      	strb	r3, [r7, #7]
	ch |= !HAL_GPIO_ReadPin(CH_b1_GPIO_Port, CH_b1_Pin) << 1;
 800efe4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800efe8:	4812      	ldr	r0, [pc, #72]	; (800f034 <getChannel+0x7c>)
 800efea:	f7fc f899 	bl	800b120 <HAL_GPIO_ReadPin>
 800efee:	4603      	mov	r3, r0
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d101      	bne.n	800eff8 <getChannel+0x40>
 800eff4:	2302      	movs	r3, #2
 800eff6:	e000      	b.n	800effa <getChannel+0x42>
 800eff8:	2300      	movs	r3, #0
 800effa:	b25a      	sxtb	r2, r3
 800effc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f000:	4313      	orrs	r3, r2
 800f002:	b25b      	sxtb	r3, r3
 800f004:	71fb      	strb	r3, [r7, #7]
	ch |= !HAL_GPIO_ReadPin(CH_b2_GPIO_Port, CH_b2_Pin) << 2;
 800f006:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800f00a:	480a      	ldr	r0, [pc, #40]	; (800f034 <getChannel+0x7c>)
 800f00c:	f7fc f888 	bl	800b120 <HAL_GPIO_ReadPin>
 800f010:	4603      	mov	r3, r0
 800f012:	2b00      	cmp	r3, #0
 800f014:	d101      	bne.n	800f01a <getChannel+0x62>
 800f016:	2304      	movs	r3, #4
 800f018:	e000      	b.n	800f01c <getChannel+0x64>
 800f01a:	2300      	movs	r3, #0
 800f01c:	b25a      	sxtb	r2, r3
 800f01e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f022:	4313      	orrs	r3, r2
 800f024:	b25b      	sxtb	r3, r3
 800f026:	71fb      	strb	r3, [r7, #7]

	return ch;
 800f028:	79fb      	ldrb	r3, [r7, #7]
}
 800f02a:	4618      	mov	r0, r3
 800f02c:	3708      	adds	r7, #8
 800f02e:	46bd      	mov	sp, r7
 800f030:	bd80      	pop	{r7, pc}
 800f032:	bf00      	nop
 800f034:	40020400 	.word	0x40020400

0800f038 <HAL_CAN_TxMailbox0CompleteCallback>:




void HAL_CAN_TxMailbox0CompleteCallback (CAN_HandleTypeDef * hcan)
{
 800f038:	b580      	push	{r7, lr}
 800f03a:	b082      	sub	sp, #8
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
	{
	}
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 800f040:	2200      	movs	r2, #0
 800f042:	2140      	movs	r1, #64	; 0x40
 800f044:	4803      	ldr	r0, [pc, #12]	; (800f054 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 800f046:	f7fc f883 	bl	800b150 <HAL_GPIO_WritePin>

}
 800f04a:	bf00      	nop
 800f04c:	3708      	adds	r7, #8
 800f04e:	46bd      	mov	sp, r7
 800f050:	bd80      	pop	{r7, pc}
 800f052:	bf00      	nop
 800f054:	40020400 	.word	0x40020400

0800f058 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback (CAN_HandleTypeDef * hcan)
{
 800f058:	b580      	push	{r7, lr}
 800f05a:	b082      	sub	sp, #8
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
	{
	}
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 800f060:	2200      	movs	r2, #0
 800f062:	2140      	movs	r1, #64	; 0x40
 800f064:	4803      	ldr	r0, [pc, #12]	; (800f074 <HAL_CAN_TxMailbox1CompleteCallback+0x1c>)
 800f066:	f7fc f873 	bl	800b150 <HAL_GPIO_WritePin>

}
 800f06a:	bf00      	nop
 800f06c:	3708      	adds	r7, #8
 800f06e:	46bd      	mov	sp, r7
 800f070:	bd80      	pop	{r7, pc}
 800f072:	bf00      	nop
 800f074:	40020400 	.word	0x40020400

0800f078 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback (CAN_HandleTypeDef * hcan)
{
 800f078:	b580      	push	{r7, lr}
 800f07a:	b082      	sub	sp, #8
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
	{
	}
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 800f080:	2200      	movs	r2, #0
 800f082:	2140      	movs	r1, #64	; 0x40
 800f084:	4803      	ldr	r0, [pc, #12]	; (800f094 <HAL_CAN_TxMailbox2CompleteCallback+0x1c>)
 800f086:	f7fc f863 	bl	800b150 <HAL_GPIO_WritePin>

}
 800f08a:	bf00      	nop
 800f08c:	3708      	adds	r7, #8
 800f08e:	46bd      	mov	sp, r7
 800f090:	bd80      	pop	{r7, pc}
 800f092:	bf00      	nop
 800f094:	40020400 	.word	0x40020400

0800f098 <HAL_CAN_RxFifo0MsgPendingCallback>:



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800f098:	b580      	push	{r7, lr}
 800f09a:	b084      	sub	sp, #16
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	6078      	str	r0, [r7, #4]
			uint8_t byte[4];
		};
	}controlRef;


	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can1RxHeader, can1RxData);
 800f0a0:	4b16      	ldr	r3, [pc, #88]	; (800f0fc <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 800f0a2:	4a17      	ldr	r2, [pc, #92]	; (800f100 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 800f0a4:	2100      	movs	r1, #0
 800f0a6:	6878      	ldr	r0, [r7, #4]
 800f0a8:	f7fa fbfb 	bl	80098a2 <HAL_CAN_GetRxMessage>

	can1RxFlg = 1;
 800f0ac:	4b15      	ldr	r3, [pc, #84]	; (800f104 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 800f0ae:	2201      	movs	r2, #1
 800f0b0:	701a      	strb	r2, [r3, #0]

	if(((can1RxHeader.StdId & 0x1c) >> 2) == 0x01 && can1RxHeader.DLC == 0x4)
 800f0b2:	4b13      	ldr	r3, [pc, #76]	; (800f100 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	089b      	lsrs	r3, r3, #2
 800f0b8:	f003 0307 	and.w	r3, r3, #7
 800f0bc:	2b01      	cmp	r3, #1
 800f0be:	d114      	bne.n	800f0ea <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
 800f0c0:	4b0f      	ldr	r3, [pc, #60]	; (800f100 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 800f0c2:	691b      	ldr	r3, [r3, #16]
 800f0c4:	2b04      	cmp	r3, #4
 800f0c6:	d110      	bne.n	800f0ea <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
	{
		controlRef.byte[0] = can1RxData[0];
 800f0c8:	4b0c      	ldr	r3, [pc, #48]	; (800f0fc <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 800f0ca:	781b      	ldrb	r3, [r3, #0]
 800f0cc:	733b      	strb	r3, [r7, #12]
		controlRef.byte[1] = can1RxData[1];
 800f0ce:	4b0b      	ldr	r3, [pc, #44]	; (800f0fc <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 800f0d0:	785b      	ldrb	r3, [r3, #1]
 800f0d2:	737b      	strb	r3, [r7, #13]
		controlRef.byte[2] = can1RxData[2];
 800f0d4:	4b09      	ldr	r3, [pc, #36]	; (800f0fc <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 800f0d6:	789b      	ldrb	r3, [r3, #2]
 800f0d8:	73bb      	strb	r3, [r7, #14]
		controlRef.byte[3] = can1RxData[3];
 800f0da:	4b08      	ldr	r3, [pc, #32]	; (800f0fc <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 800f0dc:	78db      	ldrb	r3, [r3, #3]
 800f0de:	73fb      	strb	r3, [r7, #15]

		omega_ref = controlRef.fval;
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	4a09      	ldr	r2, [pc, #36]	; (800f108 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 800f0e4:	6013      	str	r3, [r2, #0]

		timeoutReset();
 800f0e6:	f001 fe49 	bl	8010d7c <timeoutReset>
		theta_ref = controlRef.fval;
	}
#endif


	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_SET);
 800f0ea:	2201      	movs	r2, #1
 800f0ec:	2140      	movs	r1, #64	; 0x40
 800f0ee:	4807      	ldr	r0, [pc, #28]	; (800f10c <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 800f0f0:	f7fc f82e 	bl	800b150 <HAL_GPIO_WritePin>

}
 800f0f4:	bf00      	nop
 800f0f6:	3710      	adds	r7, #16
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	bd80      	pop	{r7, pc}
 800f0fc:	20004478 	.word	0x20004478
 800f100:	2000445c 	.word	0x2000445c
 800f104:	20000184 	.word	0x20000184
 800f108:	20000100 	.word	0x20000100
 800f10c:	40020000 	.word	0x40020000

0800f110 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800f110:	b580      	push	{r7, lr}
 800f112:	b082      	sub	sp, #8
 800f114:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800f116:	2300      	movs	r3, #0
 800f118:	607b      	str	r3, [r7, #4]
 800f11a:	4b14      	ldr	r3, [pc, #80]	; (800f16c <MX_DMA_Init+0x5c>)
 800f11c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f11e:	4a13      	ldr	r2, [pc, #76]	; (800f16c <MX_DMA_Init+0x5c>)
 800f120:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800f124:	6313      	str	r3, [r2, #48]	; 0x30
 800f126:	4b11      	ldr	r3, [pc, #68]	; (800f16c <MX_DMA_Init+0x5c>)
 800f128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f12a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f12e:	607b      	str	r3, [r7, #4]
 800f130:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800f132:	2200      	movs	r2, #0
 800f134:	2100      	movs	r1, #0
 800f136:	2038      	movs	r0, #56	; 0x38
 800f138:	f7fa ffad 	bl	800a096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800f13c:	2038      	movs	r0, #56	; 0x38
 800f13e:	f7fa ffc6 	bl	800a0ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800f142:	2200      	movs	r2, #0
 800f144:	2100      	movs	r1, #0
 800f146:	2039      	movs	r0, #57	; 0x39
 800f148:	f7fa ffa5 	bl	800a096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800f14c:	2039      	movs	r0, #57	; 0x39
 800f14e:	f7fa ffbe 	bl	800a0ce <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800f152:	2200      	movs	r2, #0
 800f154:	2100      	movs	r1, #0
 800f156:	203a      	movs	r0, #58	; 0x3a
 800f158:	f7fa ff9d 	bl	800a096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800f15c:	203a      	movs	r0, #58	; 0x3a
 800f15e:	f7fa ffb6 	bl	800a0ce <HAL_NVIC_EnableIRQ>

}
 800f162:	bf00      	nop
 800f164:	3708      	adds	r7, #8
 800f166:	46bd      	mov	sp, r7
 800f168:	bd80      	pop	{r7, pc}
 800f16a:	bf00      	nop
 800f16c:	40023800 	.word	0x40023800

0800f170 <Flash_clear>:
extern char _backup_flash_start;


// Flashのsectoe1を消去
HAL_StatusTypeDef Flash_clear()
{
 800f170:	b580      	push	{r7, lr}
 800f172:	b088      	sub	sp, #32
 800f174:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 800f176:	f7fb fbb1 	bl	800a8dc <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800f17a:	2300      	movs	r3, #0
 800f17c:	60bb      	str	r3, [r7, #8]
    EraseInitStruct.Sector = BACKUP_FLASH_SECTOR_NUM;
 800f17e:	2301      	movs	r3, #1
 800f180:	613b      	str	r3, [r7, #16]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800f182:	2302      	movs	r3, #2
 800f184:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.NbSectors = 1;
 800f186:	2301      	movs	r3, #1
 800f188:	617b      	str	r3, [r7, #20]

    // Eraseに失敗したsector番号がerror_sectorに入る
    // 正常にEraseができたときは0xFFFFFFFFが入る
    uint32_t error_sector;
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 800f18a:	1d3a      	adds	r2, r7, #4
 800f18c:	f107 0308 	add.w	r3, r7, #8
 800f190:	4611      	mov	r1, r2
 800f192:	4618      	mov	r0, r3
 800f194:	f7fb fd10 	bl	800abb8 <HAL_FLASHEx_Erase>
 800f198:	4603      	mov	r3, r0
 800f19a:	77fb      	strb	r3, [r7, #31]

    HAL_FLASH_Lock();
 800f19c:	f7fb fbc0 	bl	800a920 <HAL_FLASH_Lock>

    return result == HAL_OK && error_sector == 0xFFFFFFFF;
 800f1a0:	7ffb      	ldrb	r3, [r7, #31]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d105      	bne.n	800f1b2 <Flash_clear+0x42>
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1ac:	d101      	bne.n	800f1b2 <Flash_clear+0x42>
 800f1ae:	2301      	movs	r3, #1
 800f1b0:	e000      	b.n	800f1b4 <Flash_clear+0x44>
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	b2db      	uxtb	r3, r3
}
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	3720      	adds	r7, #32
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	bd80      	pop	{r7, pc}
	...

0800f1c0 <Flash_load>:

// Flashのsector1の内容を全てwork_ramに読み出す
// work_ramの先頭アドレスを返す
uint8_t* Flash_load()
{
 800f1c0:	b580      	push	{r7, lr}
 800f1c2:	af00      	add	r7, sp, #0
    memcpy(work_ram, &_backup_flash_start, BACKUP_FLASH_SECTOR_SIZE);
 800f1c4:	4a05      	ldr	r2, [pc, #20]	; (800f1dc <Flash_load+0x1c>)
 800f1c6:	4b06      	ldr	r3, [pc, #24]	; (800f1e0 <Flash_load+0x20>)
 800f1c8:	4610      	mov	r0, r2
 800f1ca:	4619      	mov	r1, r3
 800f1cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f1d0:	461a      	mov	r2, r3
 800f1d2:	f001 febb 	bl	8010f4c <memcpy>
    return work_ram;
 800f1d6:	4b01      	ldr	r3, [pc, #4]	; (800f1dc <Flash_load+0x1c>)
}
 800f1d8:	4618      	mov	r0, r3
 800f1da:	bd80      	pop	{r7, pc}
 800f1dc:	20000188 	.word	0x20000188
 800f1e0:	08004000 	.word	0x08004000

0800f1e4 <Flash_store>:

// Flashのsector1を消去後、work_ramにあるデータを書き込む
HAL_StatusTypeDef Flash_store()
{
 800f1e4:	b590      	push	{r4, r7, lr}
 800f1e6:	b085      	sub	sp, #20
 800f1e8:	af00      	add	r7, sp, #0
    // Flashをclear
    if (!Flash_clear()) return HAL_ERROR;
 800f1ea:	f7ff ffc1 	bl	800f170 <Flash_clear>
 800f1ee:	4603      	mov	r3, r0
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d101      	bne.n	800f1f8 <Flash_store+0x14>
 800f1f4:	2301      	movs	r3, #1
 800f1f6:	e02f      	b.n	800f258 <Flash_store+0x74>

    uint32_t *p_work_ram = (uint32_t*)work_ram;
 800f1f8:	4b19      	ldr	r3, [pc, #100]	; (800f260 <Flash_store+0x7c>)
 800f1fa:	607b      	str	r3, [r7, #4]

    HAL_FLASH_Unlock();
 800f1fc:	f7fb fb6e 	bl	800a8dc <HAL_FLASH_Unlock>

    // work_ramにあるデータを4バイトごとまとめて書き込む
    HAL_StatusTypeDef result;
    const size_t write_cnt = BACKUP_FLASH_SECTOR_SIZE / sizeof(uint32_t);
 800f200:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f204:	603b      	str	r3, [r7, #0]

    for (size_t i=0; i<write_cnt; i++)
 800f206:	2300      	movs	r3, #0
 800f208:	60bb      	str	r3, [r7, #8]
 800f20a:	e017      	b.n	800f23c <Flash_store+0x58>
    {
        result = HAL_FLASH_Program(
                    FLASH_TYPEPROGRAM_WORD,
                    (uint32_t)(&_backup_flash_start) + sizeof(uint32_t) * i,
 800f20c:	68bb      	ldr	r3, [r7, #8]
 800f20e:	009b      	lsls	r3, r3, #2
 800f210:	4a14      	ldr	r2, [pc, #80]	; (800f264 <Flash_store+0x80>)
        result = HAL_FLASH_Program(
 800f212:	1899      	adds	r1, r3, r2
                    p_work_ram[i]
 800f214:	68bb      	ldr	r3, [r7, #8]
 800f216:	009b      	lsls	r3, r3, #2
 800f218:	687a      	ldr	r2, [r7, #4]
 800f21a:	4413      	add	r3, r2
 800f21c:	681b      	ldr	r3, [r3, #0]
        result = HAL_FLASH_Program(
 800f21e:	f04f 0400 	mov.w	r4, #0
 800f222:	461a      	mov	r2, r3
 800f224:	4623      	mov	r3, r4
 800f226:	2002      	movs	r0, #2
 800f228:	f7fb fb04 	bl	800a834 <HAL_FLASH_Program>
 800f22c:	4603      	mov	r3, r0
 800f22e:	73fb      	strb	r3, [r7, #15]
                );
        if (result != HAL_OK) break;
 800f230:	7bfb      	ldrb	r3, [r7, #15]
 800f232:	2b00      	cmp	r3, #0
 800f234:	d107      	bne.n	800f246 <Flash_store+0x62>
    for (size_t i=0; i<write_cnt; i++)
 800f236:	68bb      	ldr	r3, [r7, #8]
 800f238:	3301      	adds	r3, #1
 800f23a:	60bb      	str	r3, [r7, #8]
 800f23c:	68ba      	ldr	r2, [r7, #8]
 800f23e:	683b      	ldr	r3, [r7, #0]
 800f240:	429a      	cmp	r2, r3
 800f242:	d3e3      	bcc.n	800f20c <Flash_store+0x28>
 800f244:	e000      	b.n	800f248 <Flash_store+0x64>
        if (result != HAL_OK) break;
 800f246:	bf00      	nop
    }

    HAL_FLASH_Lock();
 800f248:	f7fb fb6a 	bl	800a920 <HAL_FLASH_Lock>

    return result == HAL_OK;
 800f24c:	7bfb      	ldrb	r3, [r7, #15]
 800f24e:	2b00      	cmp	r3, #0
 800f250:	bf0c      	ite	eq
 800f252:	2301      	moveq	r3, #1
 800f254:	2300      	movne	r3, #0
 800f256:	b2db      	uxtb	r3, r3
}
 800f258:	4618      	mov	r0, r3
 800f25a:	3714      	adds	r7, #20
 800f25c:	46bd      	mov	sp, r7
 800f25e:	bd90      	pop	{r4, r7, pc}
 800f260:	20000188 	.word	0x20000188
 800f264:	08004000 	.word	0x08004000

0800f268 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800f268:	b580      	push	{r7, lr}
 800f26a:	b08a      	sub	sp, #40	; 0x28
 800f26c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f26e:	f107 0314 	add.w	r3, r7, #20
 800f272:	2200      	movs	r2, #0
 800f274:	601a      	str	r2, [r3, #0]
 800f276:	605a      	str	r2, [r3, #4]
 800f278:	609a      	str	r2, [r3, #8]
 800f27a:	60da      	str	r2, [r3, #12]
 800f27c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800f27e:	2300      	movs	r3, #0
 800f280:	613b      	str	r3, [r7, #16]
 800f282:	4b45      	ldr	r3, [pc, #276]	; (800f398 <MX_GPIO_Init+0x130>)
 800f284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f286:	4a44      	ldr	r2, [pc, #272]	; (800f398 <MX_GPIO_Init+0x130>)
 800f288:	f043 0304 	orr.w	r3, r3, #4
 800f28c:	6313      	str	r3, [r2, #48]	; 0x30
 800f28e:	4b42      	ldr	r3, [pc, #264]	; (800f398 <MX_GPIO_Init+0x130>)
 800f290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f292:	f003 0304 	and.w	r3, r3, #4
 800f296:	613b      	str	r3, [r7, #16]
 800f298:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800f29a:	2300      	movs	r3, #0
 800f29c:	60fb      	str	r3, [r7, #12]
 800f29e:	4b3e      	ldr	r3, [pc, #248]	; (800f398 <MX_GPIO_Init+0x130>)
 800f2a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2a2:	4a3d      	ldr	r2, [pc, #244]	; (800f398 <MX_GPIO_Init+0x130>)
 800f2a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f2a8:	6313      	str	r3, [r2, #48]	; 0x30
 800f2aa:	4b3b      	ldr	r3, [pc, #236]	; (800f398 <MX_GPIO_Init+0x130>)
 800f2ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f2b2:	60fb      	str	r3, [r7, #12]
 800f2b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800f2b6:	2300      	movs	r3, #0
 800f2b8:	60bb      	str	r3, [r7, #8]
 800f2ba:	4b37      	ldr	r3, [pc, #220]	; (800f398 <MX_GPIO_Init+0x130>)
 800f2bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2be:	4a36      	ldr	r2, [pc, #216]	; (800f398 <MX_GPIO_Init+0x130>)
 800f2c0:	f043 0301 	orr.w	r3, r3, #1
 800f2c4:	6313      	str	r3, [r2, #48]	; 0x30
 800f2c6:	4b34      	ldr	r3, [pc, #208]	; (800f398 <MX_GPIO_Init+0x130>)
 800f2c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2ca:	f003 0301 	and.w	r3, r3, #1
 800f2ce:	60bb      	str	r3, [r7, #8]
 800f2d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800f2d2:	2300      	movs	r3, #0
 800f2d4:	607b      	str	r3, [r7, #4]
 800f2d6:	4b30      	ldr	r3, [pc, #192]	; (800f398 <MX_GPIO_Init+0x130>)
 800f2d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2da:	4a2f      	ldr	r2, [pc, #188]	; (800f398 <MX_GPIO_Init+0x130>)
 800f2dc:	f043 0302 	orr.w	r3, r3, #2
 800f2e0:	6313      	str	r3, [r2, #48]	; 0x30
 800f2e2:	4b2d      	ldr	r3, [pc, #180]	; (800f398 <MX_GPIO_Init+0x130>)
 800f2e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f2e6:	f003 0302 	and.w	r3, r3, #2
 800f2ea:	607b      	str	r3, [r7, #4]
 800f2ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DB1_Pin|OP_CAL_Pin|GATE_EN_Pin, GPIO_PIN_RESET);
 800f2ee:	2200      	movs	r2, #0
 800f2f0:	f44f 61cc 	mov.w	r1, #1632	; 0x660
 800f2f4:	4829      	ldr	r0, [pc, #164]	; (800f39c <MX_GPIO_Init+0x134>)
 800f2f6:	f7fb ff2b 	bl	800b150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_NSS_Pin|DB2_Pin|DB0_Pin, GPIO_PIN_RESET);
 800f2fa:	2200      	movs	r2, #0
 800f2fc:	f241 0150 	movw	r1, #4176	; 0x1050
 800f300:	4827      	ldr	r0, [pc, #156]	; (800f3a0 <MX_GPIO_Init+0x138>)
 800f302:	f7fb ff25 	bl	800b150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800f306:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f30a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800f30c:	4b25      	ldr	r3, [pc, #148]	; (800f3a4 <MX_GPIO_Init+0x13c>)
 800f30e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f310:	2300      	movs	r3, #0
 800f312:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800f314:	f107 0314 	add.w	r3, r7, #20
 800f318:	4619      	mov	r1, r3
 800f31a:	4823      	ldr	r0, [pc, #140]	; (800f3a8 <MX_GPIO_Init+0x140>)
 800f31c:	f7fb fd6e 	bl	800adfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|DB1_Pin|OP_CAL_Pin|GATE_EN_Pin;
 800f320:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 800f324:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f326:	2301      	movs	r3, #1
 800f328:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f32a:	2300      	movs	r3, #0
 800f32c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f32e:	2300      	movs	r3, #0
 800f330:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f332:	f107 0314 	add.w	r3, r7, #20
 800f336:	4619      	mov	r1, r3
 800f338:	4818      	ldr	r0, [pc, #96]	; (800f39c <MX_GPIO_Init+0x134>)
 800f33a:	f7fb fd5f 	bl	800adfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|DB2_Pin|DB0_Pin;
 800f33e:	f241 0350 	movw	r3, #4176	; 0x1050
 800f342:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800f344:	2301      	movs	r3, #1
 800f346:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f348:	2300      	movs	r3, #0
 800f34a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f34c:	2300      	movs	r3, #0
 800f34e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f350:	f107 0314 	add.w	r3, r7, #20
 800f354:	4619      	mov	r1, r3
 800f356:	4812      	ldr	r0, [pc, #72]	; (800f3a0 <MX_GPIO_Init+0x138>)
 800f358:	f7fb fd50 	bl	800adfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CH_b0_Pin|CH_b1_Pin|CH_b2_Pin;
 800f35c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800f360:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f362:	2300      	movs	r3, #0
 800f364:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800f366:	2301      	movs	r3, #1
 800f368:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f36a:	f107 0314 	add.w	r3, r7, #20
 800f36e:	4619      	mov	r1, r3
 800f370:	480b      	ldr	r0, [pc, #44]	; (800f3a0 <MX_GPIO_Init+0x138>)
 800f372:	f7fb fd43 	bl	800adfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BR_FLT_Pin;
 800f376:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f37a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f37c:	2300      	movs	r3, #0
 800f37e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f380:	2300      	movs	r3, #0
 800f382:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BR_FLT_GPIO_Port, &GPIO_InitStruct);
 800f384:	f107 0314 	add.w	r3, r7, #20
 800f388:	4619      	mov	r1, r3
 800f38a:	4804      	ldr	r0, [pc, #16]	; (800f39c <MX_GPIO_Init+0x134>)
 800f38c:	f7fb fd36 	bl	800adfc <HAL_GPIO_Init>

}
 800f390:	bf00      	nop
 800f392:	3728      	adds	r7, #40	; 0x28
 800f394:	46bd      	mov	sp, r7
 800f396:	bd80      	pop	{r7, pc}
 800f398:	40023800 	.word	0x40023800
 800f39c:	40020000 	.word	0x40020000
 800f3a0:	40020400 	.word	0x40020400
 800f3a4:	10210000 	.word	0x10210000
 800f3a8:	40020800 	.word	0x40020800

0800f3ac <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800f3ac:	b480      	push	{r7}
 800f3ae:	b083      	sub	sp, #12
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800f3b4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800f3b8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800f3bc:	f003 0301 	and.w	r3, r3, #1
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d013      	beq.n	800f3ec <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800f3c4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800f3c8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800f3cc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d00b      	beq.n	800f3ec <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800f3d4:	e000      	b.n	800f3d8 <ITM_SendChar+0x2c>
    {
      __NOP();
 800f3d6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800f3d8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800f3dc:	681b      	ldr	r3, [r3, #0]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d0f9      	beq.n	800f3d6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800f3e2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800f3e6:	687a      	ldr	r2, [r7, #4]
 800f3e8:	b2d2      	uxtb	r2, r2
 800f3ea:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800f3ec:	687b      	ldr	r3, [r7, #4]
}
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	370c      	adds	r7, #12
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3f8:	4770      	bx	lr

0800f3fa <_write>:
#endif



int _write(int file, char *ptr, int len)
{
 800f3fa:	b580      	push	{r7, lr}
 800f3fc:	b086      	sub	sp, #24
 800f3fe:	af00      	add	r7, sp, #0
 800f400:	60f8      	str	r0, [r7, #12]
 800f402:	60b9      	str	r1, [r7, #8]
 800f404:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 800f406:	2300      	movs	r3, #0
 800f408:	617b      	str	r3, [r7, #20]
 800f40a:	e009      	b.n	800f420 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 800f40c:	68bb      	ldr	r3, [r7, #8]
 800f40e:	1c5a      	adds	r2, r3, #1
 800f410:	60ba      	str	r2, [r7, #8]
 800f412:	781b      	ldrb	r3, [r3, #0]
 800f414:	4618      	mov	r0, r3
 800f416:	f7ff ffc9 	bl	800f3ac <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 800f41a:	697b      	ldr	r3, [r7, #20]
 800f41c:	3301      	adds	r3, #1
 800f41e:	617b      	str	r3, [r7, #20]
 800f420:	697a      	ldr	r2, [r7, #20]
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	429a      	cmp	r2, r3
 800f426:	dbf1      	blt.n	800f40c <_write+0x12>
  }
  return len;
 800f428:	687b      	ldr	r3, [r7, #4]
}
 800f42a:	4618      	mov	r0, r3
 800f42c:	3718      	adds	r7, #24
 800f42e:	46bd      	mov	sp, r7
 800f430:	bd80      	pop	{r7, pc}
 800f432:	0000      	movs	r0, r0
 800f434:	0000      	movs	r0, r0
	...

0800f438 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800f438:	b590      	push	{r4, r7, lr}
 800f43a:	b085      	sub	sp, #20
 800f43c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	float phase = 0.0f;
 800f43e:	f04f 0300 	mov.w	r3, #0
 800f442:	60fb      	str	r3, [r7, #12]


	int count = 0;
 800f444:	2300      	movs	r3, #0
 800f446:	60bb      	str	r3, [r7, #8]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800f448:	f7f9 fc98 	bl	8008d7c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800f44c:	f000 f91c 	bl	800f688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800f450:	f7ff ff0a 	bl	800f268 <MX_GPIO_Init>
  MX_DMA_Init();
 800f454:	f7ff fe5c 	bl	800f110 <MX_DMA_Init>
  MX_ADC1_Init();
 800f458:	f7ff f8ac 	bl	800e5b4 <MX_ADC1_Init>
  MX_ADC2_Init();
 800f45c:	f7ff f8fc 	bl	800e658 <MX_ADC2_Init>
  MX_ADC3_Init();
 800f460:	f7ff f94c 	bl	800e6fc <MX_ADC3_Init>
  MX_CAN1_Init();
 800f464:	f7ff fd18 	bl	800ee98 <MX_CAN1_Init>
  MX_SPI2_Init();
 800f468:	f000 fd30 	bl	800fecc <MX_SPI2_Init>
  MX_SPI3_Init();
 800f46c:	f000 fd66 	bl	800ff3c <MX_SPI3_Init>
  MX_TIM8_Init();
 800f470:	f001 fade 	bl	8010a30 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 800f474:	f001 fc9c 	bl	8010db0 <MX_USART2_UART_Init>



  //UartPrintf(&huart2, "Hello world\n");

  printf("Hello\n");
 800f478:	487d      	ldr	r0, [pc, #500]	; (800f670 <main+0x238>)
 800f47a:	f001 fdef 	bl	801105c <puts>


  // Gate Enable
  HAL_GPIO_WritePin(GATE_EN_GPIO_Port, GATE_EN_Pin, GPIO_PIN_SET);
 800f47e:	2201      	movs	r2, #1
 800f480:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f484:	487b      	ldr	r0, [pc, #492]	; (800f674 <main+0x23c>)
 800f486:	f7fb fe63 	bl	800b150 <HAL_GPIO_WritePin>


  // Current Sensing Auto Offset Calibration
  HAL_GPIO_WritePin(OP_CAL_GPIO_Port, OP_CAL_Pin, GPIO_PIN_SET);
 800f48a:	2201      	movs	r2, #1
 800f48c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f490:	4878      	ldr	r0, [pc, #480]	; (800f674 <main+0x23c>)
 800f492:	f7fb fe5d 	bl	800b150 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800f496:	200a      	movs	r0, #10
 800f498:	f7f9 fce2 	bl	8008e60 <HAL_Delay>
  HAL_GPIO_WritePin(OP_CAL_GPIO_Port, OP_CAL_Pin, GPIO_PIN_RESET);
 800f49c:	2200      	movs	r2, #0
 800f49e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800f4a2:	4874      	ldr	r0, [pc, #464]	; (800f674 <main+0x23c>)
 800f4a4:	f7fb fe54 	bl	800b150 <HAL_GPIO_WritePin>


  /******** DEBUG ********/

  HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_RESET);
 800f4a8:	2200      	movs	r2, #0
 800f4aa:	2140      	movs	r1, #64	; 0x40
 800f4ac:	4871      	ldr	r0, [pc, #452]	; (800f674 <main+0x23c>)
 800f4ae:	f7fb fe4f 	bl	800b150 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, GPIO_PIN_RESET);
 800f4b2:	2200      	movs	r2, #0
 800f4b4:	2110      	movs	r1, #16
 800f4b6:	4870      	ldr	r0, [pc, #448]	; (800f678 <main+0x240>)
 800f4b8:	f7fb fe4a 	bl	800b150 <HAL_GPIO_WritePin>


  p_ch = getChannel();
 800f4bc:	f7ff fd7c 	bl	800efb8 <getChannel>
 800f4c0:	4603      	mov	r3, r0
 800f4c2:	71fb      	strb	r3, [r7, #7]


  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 800f4c4:	2201      	movs	r2, #1
 800f4c6:	2120      	movs	r1, #32
 800f4c8:	486a      	ldr	r0, [pc, #424]	; (800f674 <main+0x23c>)
 800f4ca:	f7fb fe41 	bl	800b150 <HAL_GPIO_WritePin>
 800f4ce:	2064      	movs	r0, #100	; 0x64
 800f4d0:	f7f9 fcc6 	bl	8008e60 <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 800f4d4:	2200      	movs	r2, #0
 800f4d6:	2120      	movs	r1, #32
 800f4d8:	4866      	ldr	r0, [pc, #408]	; (800f674 <main+0x23c>)
 800f4da:	f7fb fe39 	bl	800b150 <HAL_GPIO_WritePin>
 800f4de:	2064      	movs	r0, #100	; 0x64
 800f4e0:	f7f9 fcbe 	bl	8008e60 <HAL_Delay>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 800f4e4:	2201      	movs	r2, #1
 800f4e6:	2120      	movs	r1, #32
 800f4e8:	4862      	ldr	r0, [pc, #392]	; (800f674 <main+0x23c>)
 800f4ea:	f7fb fe31 	bl	800b150 <HAL_GPIO_WritePin>
 800f4ee:	2064      	movs	r0, #100	; 0x64
 800f4f0:	f7f9 fcb6 	bl	8008e60 <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 800f4f4:	2200      	movs	r2, #0
 800f4f6:	2120      	movs	r1, #32
 800f4f8:	485e      	ldr	r0, [pc, #376]	; (800f674 <main+0x23c>)
 800f4fa:	f7fb fe29 	bl	800b150 <HAL_GPIO_WritePin>
 800f4fe:	2064      	movs	r0, #100	; 0x64
 800f500:	f7f9 fcae 	bl	8008e60 <HAL_Delay>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 800f504:	2201      	movs	r2, #1
 800f506:	2120      	movs	r1, #32
 800f508:	485a      	ldr	r0, [pc, #360]	; (800f674 <main+0x23c>)
 800f50a:	f7fb fe21 	bl	800b150 <HAL_GPIO_WritePin>
 800f50e:	2064      	movs	r0, #100	; 0x64
 800f510:	f7f9 fca6 	bl	8008e60 <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 800f514:	2200      	movs	r2, #0
 800f516:	2120      	movs	r1, #32
 800f518:	4856      	ldr	r0, [pc, #344]	; (800f674 <main+0x23c>)
 800f51a:	f7fb fe19 	bl	800b150 <HAL_GPIO_WritePin>
 800f51e:	2064      	movs	r0, #100	; 0x64
 800f520:	f7f9 fc9e 	bl	8008e60 <HAL_Delay>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 800f524:	2201      	movs	r2, #1
 800f526:	2120      	movs	r1, #32
 800f528:	4852      	ldr	r0, [pc, #328]	; (800f674 <main+0x23c>)
 800f52a:	f7fb fe11 	bl	800b150 <HAL_GPIO_WritePin>
 800f52e:	2064      	movs	r0, #100	; 0x64
 800f530:	f7f9 fc96 	bl	8008e60 <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 800f534:	2200      	movs	r2, #0
 800f536:	2120      	movs	r1, #32
 800f538:	484e      	ldr	r0, [pc, #312]	; (800f674 <main+0x23c>)
 800f53a:	f7fb fe09 	bl	800b150 <HAL_GPIO_WritePin>
 800f53e:	2064      	movs	r0, #100	; 0x64
 800f540:	f7f9 fc8e 	bl	8008e60 <HAL_Delay>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 800f544:	2201      	movs	r2, #1
 800f546:	2120      	movs	r1, #32
 800f548:	484a      	ldr	r0, [pc, #296]	; (800f674 <main+0x23c>)
 800f54a:	f7fb fe01 	bl	800b150 <HAL_GPIO_WritePin>
 800f54e:	2064      	movs	r0, #100	; 0x64
 800f550:	f7f9 fc86 	bl	8008e60 <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 800f554:	2200      	movs	r2, #0
 800f556:	2120      	movs	r1, #32
 800f558:	4846      	ldr	r0, [pc, #280]	; (800f674 <main+0x23c>)
 800f55a:	f7fb fdf9 	bl	800b150 <HAL_GPIO_WritePin>
 800f55e:	2064      	movs	r0, #100	; 0x64
 800f560:	f7f9 fc7e 	bl	8008e60 <HAL_Delay>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 800f564:	2201      	movs	r2, #1
 800f566:	2120      	movs	r1, #32
 800f568:	4842      	ldr	r0, [pc, #264]	; (800f674 <main+0x23c>)
 800f56a:	f7fb fdf1 	bl	800b150 <HAL_GPIO_WritePin>
 800f56e:	2064      	movs	r0, #100	; 0x64
 800f570:	f7f9 fc76 	bl	8008e60 <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 800f574:	2200      	movs	r2, #0
 800f576:	2120      	movs	r1, #32
 800f578:	483e      	ldr	r0, [pc, #248]	; (800f674 <main+0x23c>)
 800f57a:	f7fb fde9 	bl	800b150 <HAL_GPIO_WritePin>
 800f57e:	2064      	movs	r0, #100	; 0x64
 800f580:	f7f9 fc6e 	bl	8008e60 <HAL_Delay>


  ch = getChannel();
 800f584:	f7ff fd18 	bl	800efb8 <getChannel>
 800f588:	4603      	mov	r3, r0
 800f58a:	71bb      	strb	r3, [r7, #6]



  ADC_Init();
 800f58c:	f7ff fa66 	bl	800ea5c <ADC_Init>

  //CAN_Init();


  HAL_Delay(100);
 800f590:	2064      	movs	r0, #100	; 0x64
 800f592:	f7f9 fc65 	bl	8008e60 <HAL_Delay>


  TIM_Init();
 800f596:	f001 fba5 	bl	8010ce4 <TIM_Init>

  SPI_Init();
 800f59a:	f000 fdf9 	bl	8010190 <SPI_Init>


  ACR_Start();
 800f59e:	f7fe fb81 	bl	800dca4 <ACR_Start>

  setZeroEncoder((p_ch != ch)? 1: 0);
 800f5a2:	79fa      	ldrb	r2, [r7, #7]
 800f5a4:	79bb      	ldrb	r3, [r7, #6]
 800f5a6:	429a      	cmp	r2, r3
 800f5a8:	bf14      	ite	ne
 800f5aa:	2301      	movne	r3, #1
 800f5ac:	2300      	moveq	r3, #0
 800f5ae:	b2db      	uxtb	r3, r3
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	f000 fe01 	bl	80101b8 <setZeroEncoder>



  //while(1);

  ASR_Start();
 800f5b6:	f7fe fe1d 	bl	800e1f4 <ASR_Start>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  if(ASR_flg == 1)
 800f5ba:	4b30      	ldr	r3, [pc, #192]	; (800f67c <main+0x244>)
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	2b01      	cmp	r3, #1
 800f5c0:	d1fb      	bne.n	800f5ba <main+0x182>
	  {
		  HAL_GPIO_TogglePin(DB2_GPIO_Port, DB2_Pin);
 800f5c2:	2110      	movs	r1, #16
 800f5c4:	482c      	ldr	r0, [pc, #176]	; (800f678 <main+0x240>)
 800f5c6:	f7fb fddc 	bl	800b182 <HAL_GPIO_TogglePin>


		  omega_ref = 50.0 * sin(phase);
 800f5ca:	68f8      	ldr	r0, [r7, #12]
 800f5cc:	f7f8 feec 	bl	80083a8 <__aeabi_f2d>
 800f5d0:	4603      	mov	r3, r0
 800f5d2:	460c      	mov	r4, r1
 800f5d4:	ec44 3b10 	vmov	d0, r3, r4
 800f5d8:	f002 fc16 	bl	8011e08 <sin>
 800f5dc:	ec51 0b10 	vmov	r0, r1, d0
 800f5e0:	f04f 0200 	mov.w	r2, #0
 800f5e4:	4b26      	ldr	r3, [pc, #152]	; (800f680 <main+0x248>)
 800f5e6:	f7f8 ff37 	bl	8008458 <__aeabi_dmul>
 800f5ea:	4603      	mov	r3, r0
 800f5ec:	460c      	mov	r4, r1
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	4621      	mov	r1, r4
 800f5f2:	f7f9 f9f3 	bl	80089dc <__aeabi_d2f>
 800f5f6:	4602      	mov	r2, r0
 800f5f8:	4b22      	ldr	r3, [pc, #136]	; (800f684 <main+0x24c>)
 800f5fa:	601a      	str	r2, [r3, #0]

		  phase += 1E-3 * 2 * M_PI * 0.2;
 800f5fc:	68f8      	ldr	r0, [r7, #12]
 800f5fe:	f7f8 fed3 	bl	80083a8 <__aeabi_f2d>
 800f602:	a317      	add	r3, pc, #92	; (adr r3, 800f660 <main+0x228>)
 800f604:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f608:	f7f8 fd70 	bl	80080ec <__adddf3>
 800f60c:	4603      	mov	r3, r0
 800f60e:	460c      	mov	r4, r1
 800f610:	4618      	mov	r0, r3
 800f612:	4621      	mov	r1, r4
 800f614:	f7f9 f9e2 	bl	80089dc <__aeabi_d2f>
 800f618:	4603      	mov	r3, r0
 800f61a:	60fb      	str	r3, [r7, #12]

		  if(phase > 2 * M_PI)
 800f61c:	68f8      	ldr	r0, [r7, #12]
 800f61e:	f7f8 fec3 	bl	80083a8 <__aeabi_f2d>
 800f622:	a311      	add	r3, pc, #68	; (adr r3, 800f668 <main+0x230>)
 800f624:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f628:	f7f9 f9a6 	bl	8008978 <__aeabi_dcmpgt>
 800f62c:	4603      	mov	r3, r0
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d00f      	beq.n	800f652 <main+0x21a>
		  {
			  phase -= 2 * M_PI;
 800f632:	68f8      	ldr	r0, [r7, #12]
 800f634:	f7f8 feb8 	bl	80083a8 <__aeabi_f2d>
 800f638:	a30b      	add	r3, pc, #44	; (adr r3, 800f668 <main+0x230>)
 800f63a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f63e:	f7f8 fd53 	bl	80080e8 <__aeabi_dsub>
 800f642:	4603      	mov	r3, r0
 800f644:	460c      	mov	r4, r1
 800f646:	4618      	mov	r0, r3
 800f648:	4621      	mov	r1, r4
 800f64a:	f7f9 f9c7 	bl	80089dc <__aeabi_d2f>
 800f64e:	4603      	mov	r3, r0
 800f650:	60fb      	str	r3, [r7, #12]
#endif

		  /********** ASR (Auto Speed Regulator) **********/


		  speedControl();
 800f652:	f7fe fddd 	bl	800e210 <speedControl>


		  /********** end of ASR **********/


		  ASR_flg = 0;
 800f656:	4b09      	ldr	r3, [pc, #36]	; (800f67c <main+0x244>)
 800f658:	2200      	movs	r2, #0
 800f65a:	601a      	str	r2, [r3, #0]
	  if(ASR_flg == 1)
 800f65c:	e7ad      	b.n	800f5ba <main+0x182>
 800f65e:	bf00      	nop
 800f660:	c53c5b03 	.word	0xc53c5b03
 800f664:	3f5496b7 	.word	0x3f5496b7
 800f668:	54442d18 	.word	0x54442d18
 800f66c:	401921fb 	.word	0x401921fb
 800f670:	08013018 	.word	0x08013018
 800f674:	40020000 	.word	0x40020000
 800f678:	40020400 	.word	0x40020400
 800f67c:	20000114 	.word	0x20000114
 800f680:	40490000 	.word	0x40490000
 800f684:	20000100 	.word	0x20000100

0800f688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b094      	sub	sp, #80	; 0x50
 800f68c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800f68e:	f107 031c 	add.w	r3, r7, #28
 800f692:	2234      	movs	r2, #52	; 0x34
 800f694:	2100      	movs	r1, #0
 800f696:	4618      	mov	r0, r3
 800f698:	f001 fc63 	bl	8010f62 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800f69c:	f107 0308 	add.w	r3, r7, #8
 800f6a0:	2200      	movs	r2, #0
 800f6a2:	601a      	str	r2, [r3, #0]
 800f6a4:	605a      	str	r2, [r3, #4]
 800f6a6:	609a      	str	r2, [r3, #8]
 800f6a8:	60da      	str	r2, [r3, #12]
 800f6aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800f6ac:	2300      	movs	r3, #0
 800f6ae:	607b      	str	r3, [r7, #4]
 800f6b0:	4b29      	ldr	r3, [pc, #164]	; (800f758 <SystemClock_Config+0xd0>)
 800f6b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6b4:	4a28      	ldr	r2, [pc, #160]	; (800f758 <SystemClock_Config+0xd0>)
 800f6b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800f6ba:	6413      	str	r3, [r2, #64]	; 0x40
 800f6bc:	4b26      	ldr	r3, [pc, #152]	; (800f758 <SystemClock_Config+0xd0>)
 800f6be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f6c4:	607b      	str	r3, [r7, #4]
 800f6c6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	603b      	str	r3, [r7, #0]
 800f6cc:	4b23      	ldr	r3, [pc, #140]	; (800f75c <SystemClock_Config+0xd4>)
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	4a22      	ldr	r2, [pc, #136]	; (800f75c <SystemClock_Config+0xd4>)
 800f6d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800f6d6:	6013      	str	r3, [r2, #0]
 800f6d8:	4b20      	ldr	r3, [pc, #128]	; (800f75c <SystemClock_Config+0xd4>)
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800f6e0:	603b      	str	r3, [r7, #0]
 800f6e2:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800f6e4:	2302      	movs	r3, #2
 800f6e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800f6e8:	2301      	movs	r3, #1
 800f6ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800f6ec:	2310      	movs	r3, #16
 800f6ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800f6f0:	2302      	movs	r3, #2
 800f6f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800f6f4:	2300      	movs	r3, #0
 800f6f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800f6f8:	2310      	movs	r3, #16
 800f6fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 320;
 800f6fc:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800f700:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800f702:	2302      	movs	r3, #2
 800f704:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800f706:	2302      	movs	r3, #2
 800f708:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800f70a:	2302      	movs	r3, #2
 800f70c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800f70e:	f107 031c 	add.w	r3, r7, #28
 800f712:	4618      	mov	r0, r3
 800f714:	f7fc f806 	bl	800b724 <HAL_RCC_OscConfig>
 800f718:	4603      	mov	r3, r0
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d001      	beq.n	800f722 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800f71e:	f000 f81f 	bl	800f760 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800f722:	230f      	movs	r3, #15
 800f724:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800f726:	2302      	movs	r3, #2
 800f728:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800f72a:	2300      	movs	r3, #0
 800f72c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800f72e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800f732:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800f734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f738:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800f73a:	f107 0308 	add.w	r3, r7, #8
 800f73e:	2105      	movs	r1, #5
 800f740:	4618      	mov	r0, r3
 800f742:	f7fb fd39 	bl	800b1b8 <HAL_RCC_ClockConfig>
 800f746:	4603      	mov	r3, r0
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d001      	beq.n	800f750 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800f74c:	f000 f808 	bl	800f760 <Error_Handler>
  }
}
 800f750:	bf00      	nop
 800f752:	3750      	adds	r7, #80	; 0x50
 800f754:	46bd      	mov	sp, r7
 800f756:	bd80      	pop	{r7, pc}
 800f758:	40023800 	.word	0x40023800
 800f75c:	40007000 	.word	0x40007000

0800f760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800f760:	b480      	push	{r7}
 800f762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800f764:	bf00      	nop
 800f766:	46bd      	mov	sp, r7
 800f768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f76c:	4770      	bx	lr
	...

0800f770 <setSVM_dq>:
volatile int sector_SVM = 0;



inline void setSVM_dq()
{
 800f770:	b5b0      	push	{r4, r5, r7, lr}
 800f772:	af00      	add	r7, sp, #0
	static float vect1, vect2;




	x = Vd_ref * cos_theta_re - Vq_ref * sin_theta_re;
 800f774:	4bb8      	ldr	r3, [pc, #736]	; (800fa58 <setSVM_dq+0x2e8>)
 800f776:	ed93 7a00 	vldr	s14, [r3]
 800f77a:	4bb8      	ldr	r3, [pc, #736]	; (800fa5c <setSVM_dq+0x2ec>)
 800f77c:	edd3 7a00 	vldr	s15, [r3]
 800f780:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f784:	4bb6      	ldr	r3, [pc, #728]	; (800fa60 <setSVM_dq+0x2f0>)
 800f786:	edd3 6a00 	vldr	s13, [r3]
 800f78a:	4bb6      	ldr	r3, [pc, #728]	; (800fa64 <setSVM_dq+0x2f4>)
 800f78c:	edd3 7a00 	vldr	s15, [r3]
 800f790:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f794:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f798:	4bb3      	ldr	r3, [pc, #716]	; (800fa68 <setSVM_dq+0x2f8>)
 800f79a:	edc3 7a00 	vstr	s15, [r3]
	y = Vd_ref * sin_theta_re + Vq_ref * cos_theta_re;
 800f79e:	4bae      	ldr	r3, [pc, #696]	; (800fa58 <setSVM_dq+0x2e8>)
 800f7a0:	ed93 7a00 	vldr	s14, [r3]
 800f7a4:	4baf      	ldr	r3, [pc, #700]	; (800fa64 <setSVM_dq+0x2f4>)
 800f7a6:	edd3 7a00 	vldr	s15, [r3]
 800f7aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f7ae:	4bac      	ldr	r3, [pc, #688]	; (800fa60 <setSVM_dq+0x2f0>)
 800f7b0:	edd3 6a00 	vldr	s13, [r3]
 800f7b4:	4ba9      	ldr	r3, [pc, #676]	; (800fa5c <setSVM_dq+0x2ec>)
 800f7b6:	edd3 7a00 	vldr	s15, [r3]
 800f7ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f7be:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f7c2:	4baa      	ldr	r3, [pc, #680]	; (800fa6c <setSVM_dq+0x2fc>)
 800f7c4:	edc3 7a00 	vstr	s15, [r3]

	cross0 = refVector[0][0] * y - refVector[0][1] * x;
 800f7c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800f7cc:	4ba7      	ldr	r3, [pc, #668]	; (800fa6c <setSVM_dq+0x2fc>)
 800f7ce:	edd3 7a00 	vldr	s15, [r3]
 800f7d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f7d6:	eddf 6aa6 	vldr	s13, [pc, #664]	; 800fa70 <setSVM_dq+0x300>
 800f7da:	4ba3      	ldr	r3, [pc, #652]	; (800fa68 <setSVM_dq+0x2f8>)
 800f7dc:	edd3 7a00 	vldr	s15, [r3]
 800f7e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f7e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f7e8:	4ba2      	ldr	r3, [pc, #648]	; (800fa74 <setSVM_dq+0x304>)
 800f7ea:	edc3 7a00 	vstr	s15, [r3]
	cross1 = refVector[1][0] * y - refVector[1][1] * x;
 800f7ee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800f7f2:	4b9e      	ldr	r3, [pc, #632]	; (800fa6c <setSVM_dq+0x2fc>)
 800f7f4:	edd3 7a00 	vldr	s15, [r3]
 800f7f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f7fc:	eddf 6a9e 	vldr	s13, [pc, #632]	; 800fa78 <setSVM_dq+0x308>
 800f800:	4b99      	ldr	r3, [pc, #612]	; (800fa68 <setSVM_dq+0x2f8>)
 800f802:	edd3 7a00 	vldr	s15, [r3]
 800f806:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f80a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f80e:	4b9b      	ldr	r3, [pc, #620]	; (800fa7c <setSVM_dq+0x30c>)
 800f810:	edc3 7a00 	vstr	s15, [r3]

	if(cross0 >= 0)
 800f814:	4b97      	ldr	r3, [pc, #604]	; (800fa74 <setSVM_dq+0x304>)
 800f816:	edd3 7a00 	vldr	s15, [r3]
 800f81a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f81e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f822:	db1e      	blt.n	800f862 <setSVM_dq+0xf2>
	{
		if(cross1 <= 0)				sector_SVM = 0;
 800f824:	4b95      	ldr	r3, [pc, #596]	; (800fa7c <setSVM_dq+0x30c>)
 800f826:	edd3 7a00 	vldr	s15, [r3]
 800f82a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f82e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f832:	d803      	bhi.n	800f83c <setSVM_dq+0xcc>
 800f834:	4b92      	ldr	r3, [pc, #584]	; (800fa80 <setSVM_dq+0x310>)
 800f836:	2200      	movs	r2, #0
 800f838:	601a      	str	r2, [r3, #0]
 800f83a:	e030      	b.n	800f89e <setSVM_dq+0x12e>
		else if(cross0 >= cross1)	sector_SVM = 1;
 800f83c:	4b8d      	ldr	r3, [pc, #564]	; (800fa74 <setSVM_dq+0x304>)
 800f83e:	ed93 7a00 	vldr	s14, [r3]
 800f842:	4b8e      	ldr	r3, [pc, #568]	; (800fa7c <setSVM_dq+0x30c>)
 800f844:	edd3 7a00 	vldr	s15, [r3]
 800f848:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f84c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f850:	db03      	blt.n	800f85a <setSVM_dq+0xea>
 800f852:	4b8b      	ldr	r3, [pc, #556]	; (800fa80 <setSVM_dq+0x310>)
 800f854:	2201      	movs	r2, #1
 800f856:	601a      	str	r2, [r3, #0]
 800f858:	e021      	b.n	800f89e <setSVM_dq+0x12e>
		else						sector_SVM = 2;
 800f85a:	4b89      	ldr	r3, [pc, #548]	; (800fa80 <setSVM_dq+0x310>)
 800f85c:	2202      	movs	r2, #2
 800f85e:	601a      	str	r2, [r3, #0]
 800f860:	e01d      	b.n	800f89e <setSVM_dq+0x12e>
	}
	else
	{
		if(cross1 >= 0)				sector_SVM = 3;
 800f862:	4b86      	ldr	r3, [pc, #536]	; (800fa7c <setSVM_dq+0x30c>)
 800f864:	edd3 7a00 	vldr	s15, [r3]
 800f868:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f86c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f870:	db03      	blt.n	800f87a <setSVM_dq+0x10a>
 800f872:	4b83      	ldr	r3, [pc, #524]	; (800fa80 <setSVM_dq+0x310>)
 800f874:	2203      	movs	r2, #3
 800f876:	601a      	str	r2, [r3, #0]
 800f878:	e011      	b.n	800f89e <setSVM_dq+0x12e>
		else if(cross0 <= cross1)	sector_SVM = 4;
 800f87a:	4b7e      	ldr	r3, [pc, #504]	; (800fa74 <setSVM_dq+0x304>)
 800f87c:	ed93 7a00 	vldr	s14, [r3]
 800f880:	4b7e      	ldr	r3, [pc, #504]	; (800fa7c <setSVM_dq+0x30c>)
 800f882:	edd3 7a00 	vldr	s15, [r3]
 800f886:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f88a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f88e:	d803      	bhi.n	800f898 <setSVM_dq+0x128>
 800f890:	4b7b      	ldr	r3, [pc, #492]	; (800fa80 <setSVM_dq+0x310>)
 800f892:	2204      	movs	r2, #4
 800f894:	601a      	str	r2, [r3, #0]
 800f896:	e002      	b.n	800f89e <setSVM_dq+0x12e>
		else						sector_SVM = 5;
 800f898:	4b79      	ldr	r3, [pc, #484]	; (800fa80 <setSVM_dq+0x310>)
 800f89a:	2205      	movs	r2, #5
 800f89c:	601a      	str	r2, [r3, #0]
	}

	x1 = refVector[sector_SVM][0];
 800f89e:	4b78      	ldr	r3, [pc, #480]	; (800fa80 <setSVM_dq+0x310>)
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	4a78      	ldr	r2, [pc, #480]	; (800fa84 <setSVM_dq+0x314>)
 800f8a4:	00db      	lsls	r3, r3, #3
 800f8a6:	4413      	add	r3, r2
 800f8a8:	681b      	ldr	r3, [r3, #0]
 800f8aa:	4a77      	ldr	r2, [pc, #476]	; (800fa88 <setSVM_dq+0x318>)
 800f8ac:	6013      	str	r3, [r2, #0]
	y1 = refVector[sector_SVM][1];
 800f8ae:	4b74      	ldr	r3, [pc, #464]	; (800fa80 <setSVM_dq+0x310>)
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	4a74      	ldr	r2, [pc, #464]	; (800fa84 <setSVM_dq+0x314>)
 800f8b4:	00db      	lsls	r3, r3, #3
 800f8b6:	4413      	add	r3, r2
 800f8b8:	3304      	adds	r3, #4
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	4a73      	ldr	r2, [pc, #460]	; (800fa8c <setSVM_dq+0x31c>)
 800f8be:	6013      	str	r3, [r2, #0]
	x2 = refVector[sector_SVM + 1][0];
 800f8c0:	4b6f      	ldr	r3, [pc, #444]	; (800fa80 <setSVM_dq+0x310>)
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	3301      	adds	r3, #1
 800f8c6:	4a6f      	ldr	r2, [pc, #444]	; (800fa84 <setSVM_dq+0x314>)
 800f8c8:	00db      	lsls	r3, r3, #3
 800f8ca:	4413      	add	r3, r2
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	4a70      	ldr	r2, [pc, #448]	; (800fa90 <setSVM_dq+0x320>)
 800f8d0:	6013      	str	r3, [r2, #0]
	y2 = refVector[sector_SVM + 1][1];
 800f8d2:	4b6b      	ldr	r3, [pc, #428]	; (800fa80 <setSVM_dq+0x310>)
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	3301      	adds	r3, #1
 800f8d8:	4a6a      	ldr	r2, [pc, #424]	; (800fa84 <setSVM_dq+0x314>)
 800f8da:	00db      	lsls	r3, r3, #3
 800f8dc:	4413      	add	r3, r2
 800f8de:	3304      	adds	r3, #4
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	4a6c      	ldr	r2, [pc, #432]	; (800fa94 <setSVM_dq+0x324>)
 800f8e4:	6013      	str	r3, [r2, #0]

	vect1 = (y2 * x - x2 * y) / ((x1 * y2 - y1 * x2) * Vdc);
 800f8e6:	4b6b      	ldr	r3, [pc, #428]	; (800fa94 <setSVM_dq+0x324>)
 800f8e8:	ed93 7a00 	vldr	s14, [r3]
 800f8ec:	4b5e      	ldr	r3, [pc, #376]	; (800fa68 <setSVM_dq+0x2f8>)
 800f8ee:	edd3 7a00 	vldr	s15, [r3]
 800f8f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f8f6:	4b66      	ldr	r3, [pc, #408]	; (800fa90 <setSVM_dq+0x320>)
 800f8f8:	edd3 6a00 	vldr	s13, [r3]
 800f8fc:	4b5b      	ldr	r3, [pc, #364]	; (800fa6c <setSVM_dq+0x2fc>)
 800f8fe:	edd3 7a00 	vldr	s15, [r3]
 800f902:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f906:	ee77 6a67 	vsub.f32	s13, s14, s15
 800f90a:	4b5f      	ldr	r3, [pc, #380]	; (800fa88 <setSVM_dq+0x318>)
 800f90c:	ed93 7a00 	vldr	s14, [r3]
 800f910:	4b60      	ldr	r3, [pc, #384]	; (800fa94 <setSVM_dq+0x324>)
 800f912:	edd3 7a00 	vldr	s15, [r3]
 800f916:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f91a:	4b5c      	ldr	r3, [pc, #368]	; (800fa8c <setSVM_dq+0x31c>)
 800f91c:	ed93 6a00 	vldr	s12, [r3]
 800f920:	4b5b      	ldr	r3, [pc, #364]	; (800fa90 <setSVM_dq+0x320>)
 800f922:	edd3 7a00 	vldr	s15, [r3]
 800f926:	ee66 7a27 	vmul.f32	s15, s12, s15
 800f92a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f92e:	4b5a      	ldr	r3, [pc, #360]	; (800fa98 <setSVM_dq+0x328>)
 800f930:	edd3 7a00 	vldr	s15, [r3]
 800f934:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f938:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f93c:	4b57      	ldr	r3, [pc, #348]	; (800fa9c <setSVM_dq+0x32c>)
 800f93e:	edc3 7a00 	vstr	s15, [r3]
	vect2 = (-y1 * x + x1 * y) / ((x1 * y2 - y1 * x2) * Vdc);
 800f942:	4b52      	ldr	r3, [pc, #328]	; (800fa8c <setSVM_dq+0x31c>)
 800f944:	edd3 7a00 	vldr	s15, [r3]
 800f948:	eeb1 7a67 	vneg.f32	s14, s15
 800f94c:	4b46      	ldr	r3, [pc, #280]	; (800fa68 <setSVM_dq+0x2f8>)
 800f94e:	edd3 7a00 	vldr	s15, [r3]
 800f952:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f956:	4b4c      	ldr	r3, [pc, #304]	; (800fa88 <setSVM_dq+0x318>)
 800f958:	edd3 6a00 	vldr	s13, [r3]
 800f95c:	4b43      	ldr	r3, [pc, #268]	; (800fa6c <setSVM_dq+0x2fc>)
 800f95e:	edd3 7a00 	vldr	s15, [r3]
 800f962:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f966:	ee77 6a27 	vadd.f32	s13, s14, s15
 800f96a:	4b47      	ldr	r3, [pc, #284]	; (800fa88 <setSVM_dq+0x318>)
 800f96c:	ed93 7a00 	vldr	s14, [r3]
 800f970:	4b48      	ldr	r3, [pc, #288]	; (800fa94 <setSVM_dq+0x324>)
 800f972:	edd3 7a00 	vldr	s15, [r3]
 800f976:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f97a:	4b44      	ldr	r3, [pc, #272]	; (800fa8c <setSVM_dq+0x31c>)
 800f97c:	ed93 6a00 	vldr	s12, [r3]
 800f980:	4b43      	ldr	r3, [pc, #268]	; (800fa90 <setSVM_dq+0x320>)
 800f982:	edd3 7a00 	vldr	s15, [r3]
 800f986:	ee66 7a27 	vmul.f32	s15, s12, s15
 800f98a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f98e:	4b42      	ldr	r3, [pc, #264]	; (800fa98 <setSVM_dq+0x328>)
 800f990:	edd3 7a00 	vldr	s15, [r3]
 800f994:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f998:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f99c:	4b40      	ldr	r3, [pc, #256]	; (800faa0 <setSVM_dq+0x330>)
 800f99e:	edc3 7a00 	vstr	s15, [r3]

	switch(sector_SVM)
 800f9a2:	4b37      	ldr	r3, [pc, #220]	; (800fa80 <setSVM_dq+0x310>)
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	2b05      	cmp	r3, #5
 800f9a8:	f200 81e0 	bhi.w	800fd6c <setSVM_dq+0x5fc>
 800f9ac:	a201      	add	r2, pc, #4	; (adr r2, 800f9b4 <setSVM_dq+0x244>)
 800f9ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9b2:	bf00      	nop
 800f9b4:	0800f9cd 	.word	0x0800f9cd
 800f9b8:	0800fab1 	.word	0x0800fab1
 800f9bc:	0800fb3d 	.word	0x0800fb3d
 800f9c0:	0800fbc9 	.word	0x0800fbc9
 800f9c4:	0800fc55 	.word	0x0800fc55
 800f9c8:	0800fce1 	.word	0x0800fce1
	{
	case 0: duty[2] = (1.0 - vect1 - vect2) * 0.5f; 	duty[1] = duty[2] + vect2; 	duty[0] = duty[1] + vect1;  break;
 800f9cc:	4b33      	ldr	r3, [pc, #204]	; (800fa9c <setSVM_dq+0x32c>)
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	f7f8 fce9 	bl	80083a8 <__aeabi_f2d>
 800f9d6:	4603      	mov	r3, r0
 800f9d8:	460c      	mov	r4, r1
 800f9da:	461a      	mov	r2, r3
 800f9dc:	4623      	mov	r3, r4
 800f9de:	f04f 0000 	mov.w	r0, #0
 800f9e2:	4930      	ldr	r1, [pc, #192]	; (800faa4 <setSVM_dq+0x334>)
 800f9e4:	f7f8 fb80 	bl	80080e8 <__aeabi_dsub>
 800f9e8:	4603      	mov	r3, r0
 800f9ea:	460c      	mov	r4, r1
 800f9ec:	4625      	mov	r5, r4
 800f9ee:	461c      	mov	r4, r3
 800f9f0:	4b2b      	ldr	r3, [pc, #172]	; (800faa0 <setSVM_dq+0x330>)
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	f7f8 fcd7 	bl	80083a8 <__aeabi_f2d>
 800f9fa:	4602      	mov	r2, r0
 800f9fc:	460b      	mov	r3, r1
 800f9fe:	4620      	mov	r0, r4
 800fa00:	4629      	mov	r1, r5
 800fa02:	f7f8 fb71 	bl	80080e8 <__aeabi_dsub>
 800fa06:	4603      	mov	r3, r0
 800fa08:	460c      	mov	r4, r1
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	4621      	mov	r1, r4
 800fa0e:	f04f 0200 	mov.w	r2, #0
 800fa12:	4b25      	ldr	r3, [pc, #148]	; (800faa8 <setSVM_dq+0x338>)
 800fa14:	f7f8 fd20 	bl	8008458 <__aeabi_dmul>
 800fa18:	4603      	mov	r3, r0
 800fa1a:	460c      	mov	r4, r1
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	4621      	mov	r1, r4
 800fa20:	f7f8 ffdc 	bl	80089dc <__aeabi_d2f>
 800fa24:	4602      	mov	r2, r0
 800fa26:	4b21      	ldr	r3, [pc, #132]	; (800faac <setSVM_dq+0x33c>)
 800fa28:	609a      	str	r2, [r3, #8]
 800fa2a:	4b20      	ldr	r3, [pc, #128]	; (800faac <setSVM_dq+0x33c>)
 800fa2c:	ed93 7a02 	vldr	s14, [r3, #8]
 800fa30:	4b1b      	ldr	r3, [pc, #108]	; (800faa0 <setSVM_dq+0x330>)
 800fa32:	edd3 7a00 	vldr	s15, [r3]
 800fa36:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fa3a:	4b1c      	ldr	r3, [pc, #112]	; (800faac <setSVM_dq+0x33c>)
 800fa3c:	edc3 7a01 	vstr	s15, [r3, #4]
 800fa40:	4b1a      	ldr	r3, [pc, #104]	; (800faac <setSVM_dq+0x33c>)
 800fa42:	ed93 7a01 	vldr	s14, [r3, #4]
 800fa46:	4b15      	ldr	r3, [pc, #84]	; (800fa9c <setSVM_dq+0x32c>)
 800fa48:	edd3 7a00 	vldr	s15, [r3]
 800fa4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fa50:	4b16      	ldr	r3, [pc, #88]	; (800faac <setSVM_dq+0x33c>)
 800fa52:	edc3 7a00 	vstr	s15, [r3]
 800fa56:	e189      	b.n	800fd6c <setSVM_dq+0x5fc>
 800fa58:	20004188 	.word	0x20004188
 800fa5c:	20000034 	.word	0x20000034
 800fa60:	2000418c 	.word	0x2000418c
 800fa64:	200041e0 	.word	0x200041e0
 800fa68:	20004194 	.word	0x20004194
 800fa6c:	20004198 	.word	0x20004198
 800fa70:	00000000 	.word	0x00000000
 800fa74:	2000419c 	.word	0x2000419c
 800fa78:	3f5db22d 	.word	0x3f5db22d
 800fa7c:	200041a0 	.word	0x200041a0
 800fa80:	20004190 	.word	0x20004190
 800fa84:	08013110 	.word	0x08013110
 800fa88:	200041a4 	.word	0x200041a4
 800fa8c:	200041a8 	.word	0x200041a8
 800fa90:	200041ac 	.word	0x200041ac
 800fa94:	200041b0 	.word	0x200041b0
 800fa98:	20000030 	.word	0x20000030
 800fa9c:	200041b4 	.word	0x200041b4
 800faa0:	200041b8 	.word	0x200041b8
 800faa4:	3ff00000 	.word	0x3ff00000
 800faa8:	3fe00000 	.word	0x3fe00000
 800faac:	200041bc 	.word	0x200041bc
	case 1: duty[2] = (1.0 - vect1 - vect2) * 0.5f; 	duty[0] = duty[2] + vect1; 	duty[1] = duty[0] + vect2; 	break;
 800fab0:	4bc3      	ldr	r3, [pc, #780]	; (800fdc0 <setSVM_dq+0x650>)
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	4618      	mov	r0, r3
 800fab6:	f7f8 fc77 	bl	80083a8 <__aeabi_f2d>
 800faba:	4603      	mov	r3, r0
 800fabc:	460c      	mov	r4, r1
 800fabe:	461a      	mov	r2, r3
 800fac0:	4623      	mov	r3, r4
 800fac2:	f04f 0000 	mov.w	r0, #0
 800fac6:	49bf      	ldr	r1, [pc, #764]	; (800fdc4 <setSVM_dq+0x654>)
 800fac8:	f7f8 fb0e 	bl	80080e8 <__aeabi_dsub>
 800facc:	4603      	mov	r3, r0
 800face:	460c      	mov	r4, r1
 800fad0:	4625      	mov	r5, r4
 800fad2:	461c      	mov	r4, r3
 800fad4:	4bbc      	ldr	r3, [pc, #752]	; (800fdc8 <setSVM_dq+0x658>)
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	4618      	mov	r0, r3
 800fada:	f7f8 fc65 	bl	80083a8 <__aeabi_f2d>
 800fade:	4602      	mov	r2, r0
 800fae0:	460b      	mov	r3, r1
 800fae2:	4620      	mov	r0, r4
 800fae4:	4629      	mov	r1, r5
 800fae6:	f7f8 faff 	bl	80080e8 <__aeabi_dsub>
 800faea:	4603      	mov	r3, r0
 800faec:	460c      	mov	r4, r1
 800faee:	4618      	mov	r0, r3
 800faf0:	4621      	mov	r1, r4
 800faf2:	f04f 0200 	mov.w	r2, #0
 800faf6:	4bb5      	ldr	r3, [pc, #724]	; (800fdcc <setSVM_dq+0x65c>)
 800faf8:	f7f8 fcae 	bl	8008458 <__aeabi_dmul>
 800fafc:	4603      	mov	r3, r0
 800fafe:	460c      	mov	r4, r1
 800fb00:	4618      	mov	r0, r3
 800fb02:	4621      	mov	r1, r4
 800fb04:	f7f8 ff6a 	bl	80089dc <__aeabi_d2f>
 800fb08:	4602      	mov	r2, r0
 800fb0a:	4bb1      	ldr	r3, [pc, #708]	; (800fdd0 <setSVM_dq+0x660>)
 800fb0c:	609a      	str	r2, [r3, #8]
 800fb0e:	4bb0      	ldr	r3, [pc, #704]	; (800fdd0 <setSVM_dq+0x660>)
 800fb10:	ed93 7a02 	vldr	s14, [r3, #8]
 800fb14:	4baa      	ldr	r3, [pc, #680]	; (800fdc0 <setSVM_dq+0x650>)
 800fb16:	edd3 7a00 	vldr	s15, [r3]
 800fb1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fb1e:	4bac      	ldr	r3, [pc, #688]	; (800fdd0 <setSVM_dq+0x660>)
 800fb20:	edc3 7a00 	vstr	s15, [r3]
 800fb24:	4baa      	ldr	r3, [pc, #680]	; (800fdd0 <setSVM_dq+0x660>)
 800fb26:	ed93 7a00 	vldr	s14, [r3]
 800fb2a:	4ba7      	ldr	r3, [pc, #668]	; (800fdc8 <setSVM_dq+0x658>)
 800fb2c:	edd3 7a00 	vldr	s15, [r3]
 800fb30:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fb34:	4ba6      	ldr	r3, [pc, #664]	; (800fdd0 <setSVM_dq+0x660>)
 800fb36:	edc3 7a01 	vstr	s15, [r3, #4]
 800fb3a:	e117      	b.n	800fd6c <setSVM_dq+0x5fc>
	case 2: duty[0] = (1.0 - vect1 - vect2) * 0.5f; 	duty[2] = duty[0] + vect2; 	duty[1] = duty[2] + vect1; 	break;
 800fb3c:	4ba0      	ldr	r3, [pc, #640]	; (800fdc0 <setSVM_dq+0x650>)
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	4618      	mov	r0, r3
 800fb42:	f7f8 fc31 	bl	80083a8 <__aeabi_f2d>
 800fb46:	4603      	mov	r3, r0
 800fb48:	460c      	mov	r4, r1
 800fb4a:	461a      	mov	r2, r3
 800fb4c:	4623      	mov	r3, r4
 800fb4e:	f04f 0000 	mov.w	r0, #0
 800fb52:	499c      	ldr	r1, [pc, #624]	; (800fdc4 <setSVM_dq+0x654>)
 800fb54:	f7f8 fac8 	bl	80080e8 <__aeabi_dsub>
 800fb58:	4603      	mov	r3, r0
 800fb5a:	460c      	mov	r4, r1
 800fb5c:	4625      	mov	r5, r4
 800fb5e:	461c      	mov	r4, r3
 800fb60:	4b99      	ldr	r3, [pc, #612]	; (800fdc8 <setSVM_dq+0x658>)
 800fb62:	681b      	ldr	r3, [r3, #0]
 800fb64:	4618      	mov	r0, r3
 800fb66:	f7f8 fc1f 	bl	80083a8 <__aeabi_f2d>
 800fb6a:	4602      	mov	r2, r0
 800fb6c:	460b      	mov	r3, r1
 800fb6e:	4620      	mov	r0, r4
 800fb70:	4629      	mov	r1, r5
 800fb72:	f7f8 fab9 	bl	80080e8 <__aeabi_dsub>
 800fb76:	4603      	mov	r3, r0
 800fb78:	460c      	mov	r4, r1
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	4621      	mov	r1, r4
 800fb7e:	f04f 0200 	mov.w	r2, #0
 800fb82:	4b92      	ldr	r3, [pc, #584]	; (800fdcc <setSVM_dq+0x65c>)
 800fb84:	f7f8 fc68 	bl	8008458 <__aeabi_dmul>
 800fb88:	4603      	mov	r3, r0
 800fb8a:	460c      	mov	r4, r1
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	4621      	mov	r1, r4
 800fb90:	f7f8 ff24 	bl	80089dc <__aeabi_d2f>
 800fb94:	4602      	mov	r2, r0
 800fb96:	4b8e      	ldr	r3, [pc, #568]	; (800fdd0 <setSVM_dq+0x660>)
 800fb98:	601a      	str	r2, [r3, #0]
 800fb9a:	4b8d      	ldr	r3, [pc, #564]	; (800fdd0 <setSVM_dq+0x660>)
 800fb9c:	ed93 7a00 	vldr	s14, [r3]
 800fba0:	4b89      	ldr	r3, [pc, #548]	; (800fdc8 <setSVM_dq+0x658>)
 800fba2:	edd3 7a00 	vldr	s15, [r3]
 800fba6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fbaa:	4b89      	ldr	r3, [pc, #548]	; (800fdd0 <setSVM_dq+0x660>)
 800fbac:	edc3 7a02 	vstr	s15, [r3, #8]
 800fbb0:	4b87      	ldr	r3, [pc, #540]	; (800fdd0 <setSVM_dq+0x660>)
 800fbb2:	ed93 7a02 	vldr	s14, [r3, #8]
 800fbb6:	4b82      	ldr	r3, [pc, #520]	; (800fdc0 <setSVM_dq+0x650>)
 800fbb8:	edd3 7a00 	vldr	s15, [r3]
 800fbbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fbc0:	4b83      	ldr	r3, [pc, #524]	; (800fdd0 <setSVM_dq+0x660>)
 800fbc2:	edc3 7a01 	vstr	s15, [r3, #4]
 800fbc6:	e0d1      	b.n	800fd6c <setSVM_dq+0x5fc>
	case 3: duty[0] = (1.0 - vect1 - vect2) * 0.5f; 	duty[1] = duty[0] + vect1; 	duty[2] = duty[1] + vect2; 	break;
 800fbc8:	4b7d      	ldr	r3, [pc, #500]	; (800fdc0 <setSVM_dq+0x650>)
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	4618      	mov	r0, r3
 800fbce:	f7f8 fbeb 	bl	80083a8 <__aeabi_f2d>
 800fbd2:	4603      	mov	r3, r0
 800fbd4:	460c      	mov	r4, r1
 800fbd6:	461a      	mov	r2, r3
 800fbd8:	4623      	mov	r3, r4
 800fbda:	f04f 0000 	mov.w	r0, #0
 800fbde:	4979      	ldr	r1, [pc, #484]	; (800fdc4 <setSVM_dq+0x654>)
 800fbe0:	f7f8 fa82 	bl	80080e8 <__aeabi_dsub>
 800fbe4:	4603      	mov	r3, r0
 800fbe6:	460c      	mov	r4, r1
 800fbe8:	4625      	mov	r5, r4
 800fbea:	461c      	mov	r4, r3
 800fbec:	4b76      	ldr	r3, [pc, #472]	; (800fdc8 <setSVM_dq+0x658>)
 800fbee:	681b      	ldr	r3, [r3, #0]
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	f7f8 fbd9 	bl	80083a8 <__aeabi_f2d>
 800fbf6:	4602      	mov	r2, r0
 800fbf8:	460b      	mov	r3, r1
 800fbfa:	4620      	mov	r0, r4
 800fbfc:	4629      	mov	r1, r5
 800fbfe:	f7f8 fa73 	bl	80080e8 <__aeabi_dsub>
 800fc02:	4603      	mov	r3, r0
 800fc04:	460c      	mov	r4, r1
 800fc06:	4618      	mov	r0, r3
 800fc08:	4621      	mov	r1, r4
 800fc0a:	f04f 0200 	mov.w	r2, #0
 800fc0e:	4b6f      	ldr	r3, [pc, #444]	; (800fdcc <setSVM_dq+0x65c>)
 800fc10:	f7f8 fc22 	bl	8008458 <__aeabi_dmul>
 800fc14:	4603      	mov	r3, r0
 800fc16:	460c      	mov	r4, r1
 800fc18:	4618      	mov	r0, r3
 800fc1a:	4621      	mov	r1, r4
 800fc1c:	f7f8 fede 	bl	80089dc <__aeabi_d2f>
 800fc20:	4602      	mov	r2, r0
 800fc22:	4b6b      	ldr	r3, [pc, #428]	; (800fdd0 <setSVM_dq+0x660>)
 800fc24:	601a      	str	r2, [r3, #0]
 800fc26:	4b6a      	ldr	r3, [pc, #424]	; (800fdd0 <setSVM_dq+0x660>)
 800fc28:	ed93 7a00 	vldr	s14, [r3]
 800fc2c:	4b64      	ldr	r3, [pc, #400]	; (800fdc0 <setSVM_dq+0x650>)
 800fc2e:	edd3 7a00 	vldr	s15, [r3]
 800fc32:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fc36:	4b66      	ldr	r3, [pc, #408]	; (800fdd0 <setSVM_dq+0x660>)
 800fc38:	edc3 7a01 	vstr	s15, [r3, #4]
 800fc3c:	4b64      	ldr	r3, [pc, #400]	; (800fdd0 <setSVM_dq+0x660>)
 800fc3e:	ed93 7a01 	vldr	s14, [r3, #4]
 800fc42:	4b61      	ldr	r3, [pc, #388]	; (800fdc8 <setSVM_dq+0x658>)
 800fc44:	edd3 7a00 	vldr	s15, [r3]
 800fc48:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fc4c:	4b60      	ldr	r3, [pc, #384]	; (800fdd0 <setSVM_dq+0x660>)
 800fc4e:	edc3 7a02 	vstr	s15, [r3, #8]
 800fc52:	e08b      	b.n	800fd6c <setSVM_dq+0x5fc>
	case 4: duty[1] = (1.0 - vect1 - vect2) * 0.5f; 	duty[0] = duty[1] + vect2; 	duty[2] = duty[0] + vect1; 	break;
 800fc54:	4b5a      	ldr	r3, [pc, #360]	; (800fdc0 <setSVM_dq+0x650>)
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	4618      	mov	r0, r3
 800fc5a:	f7f8 fba5 	bl	80083a8 <__aeabi_f2d>
 800fc5e:	4603      	mov	r3, r0
 800fc60:	460c      	mov	r4, r1
 800fc62:	461a      	mov	r2, r3
 800fc64:	4623      	mov	r3, r4
 800fc66:	f04f 0000 	mov.w	r0, #0
 800fc6a:	4956      	ldr	r1, [pc, #344]	; (800fdc4 <setSVM_dq+0x654>)
 800fc6c:	f7f8 fa3c 	bl	80080e8 <__aeabi_dsub>
 800fc70:	4603      	mov	r3, r0
 800fc72:	460c      	mov	r4, r1
 800fc74:	4625      	mov	r5, r4
 800fc76:	461c      	mov	r4, r3
 800fc78:	4b53      	ldr	r3, [pc, #332]	; (800fdc8 <setSVM_dq+0x658>)
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	4618      	mov	r0, r3
 800fc7e:	f7f8 fb93 	bl	80083a8 <__aeabi_f2d>
 800fc82:	4602      	mov	r2, r0
 800fc84:	460b      	mov	r3, r1
 800fc86:	4620      	mov	r0, r4
 800fc88:	4629      	mov	r1, r5
 800fc8a:	f7f8 fa2d 	bl	80080e8 <__aeabi_dsub>
 800fc8e:	4603      	mov	r3, r0
 800fc90:	460c      	mov	r4, r1
 800fc92:	4618      	mov	r0, r3
 800fc94:	4621      	mov	r1, r4
 800fc96:	f04f 0200 	mov.w	r2, #0
 800fc9a:	4b4c      	ldr	r3, [pc, #304]	; (800fdcc <setSVM_dq+0x65c>)
 800fc9c:	f7f8 fbdc 	bl	8008458 <__aeabi_dmul>
 800fca0:	4603      	mov	r3, r0
 800fca2:	460c      	mov	r4, r1
 800fca4:	4618      	mov	r0, r3
 800fca6:	4621      	mov	r1, r4
 800fca8:	f7f8 fe98 	bl	80089dc <__aeabi_d2f>
 800fcac:	4602      	mov	r2, r0
 800fcae:	4b48      	ldr	r3, [pc, #288]	; (800fdd0 <setSVM_dq+0x660>)
 800fcb0:	605a      	str	r2, [r3, #4]
 800fcb2:	4b47      	ldr	r3, [pc, #284]	; (800fdd0 <setSVM_dq+0x660>)
 800fcb4:	ed93 7a01 	vldr	s14, [r3, #4]
 800fcb8:	4b43      	ldr	r3, [pc, #268]	; (800fdc8 <setSVM_dq+0x658>)
 800fcba:	edd3 7a00 	vldr	s15, [r3]
 800fcbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fcc2:	4b43      	ldr	r3, [pc, #268]	; (800fdd0 <setSVM_dq+0x660>)
 800fcc4:	edc3 7a00 	vstr	s15, [r3]
 800fcc8:	4b41      	ldr	r3, [pc, #260]	; (800fdd0 <setSVM_dq+0x660>)
 800fcca:	ed93 7a00 	vldr	s14, [r3]
 800fcce:	4b3c      	ldr	r3, [pc, #240]	; (800fdc0 <setSVM_dq+0x650>)
 800fcd0:	edd3 7a00 	vldr	s15, [r3]
 800fcd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fcd8:	4b3d      	ldr	r3, [pc, #244]	; (800fdd0 <setSVM_dq+0x660>)
 800fcda:	edc3 7a02 	vstr	s15, [r3, #8]
 800fcde:	e045      	b.n	800fd6c <setSVM_dq+0x5fc>
	case 5: duty[1] = (1.0 - vect1 - vect2) * 0.5f; 	duty[2] = duty[1] + vect1; 	duty[0] = duty[2] + vect2; 	break;
 800fce0:	4b37      	ldr	r3, [pc, #220]	; (800fdc0 <setSVM_dq+0x650>)
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	4618      	mov	r0, r3
 800fce6:	f7f8 fb5f 	bl	80083a8 <__aeabi_f2d>
 800fcea:	4603      	mov	r3, r0
 800fcec:	460c      	mov	r4, r1
 800fcee:	461a      	mov	r2, r3
 800fcf0:	4623      	mov	r3, r4
 800fcf2:	f04f 0000 	mov.w	r0, #0
 800fcf6:	4933      	ldr	r1, [pc, #204]	; (800fdc4 <setSVM_dq+0x654>)
 800fcf8:	f7f8 f9f6 	bl	80080e8 <__aeabi_dsub>
 800fcfc:	4603      	mov	r3, r0
 800fcfe:	460c      	mov	r4, r1
 800fd00:	4625      	mov	r5, r4
 800fd02:	461c      	mov	r4, r3
 800fd04:	4b30      	ldr	r3, [pc, #192]	; (800fdc8 <setSVM_dq+0x658>)
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	4618      	mov	r0, r3
 800fd0a:	f7f8 fb4d 	bl	80083a8 <__aeabi_f2d>
 800fd0e:	4602      	mov	r2, r0
 800fd10:	460b      	mov	r3, r1
 800fd12:	4620      	mov	r0, r4
 800fd14:	4629      	mov	r1, r5
 800fd16:	f7f8 f9e7 	bl	80080e8 <__aeabi_dsub>
 800fd1a:	4603      	mov	r3, r0
 800fd1c:	460c      	mov	r4, r1
 800fd1e:	4618      	mov	r0, r3
 800fd20:	4621      	mov	r1, r4
 800fd22:	f04f 0200 	mov.w	r2, #0
 800fd26:	4b29      	ldr	r3, [pc, #164]	; (800fdcc <setSVM_dq+0x65c>)
 800fd28:	f7f8 fb96 	bl	8008458 <__aeabi_dmul>
 800fd2c:	4603      	mov	r3, r0
 800fd2e:	460c      	mov	r4, r1
 800fd30:	4618      	mov	r0, r3
 800fd32:	4621      	mov	r1, r4
 800fd34:	f7f8 fe52 	bl	80089dc <__aeabi_d2f>
 800fd38:	4602      	mov	r2, r0
 800fd3a:	4b25      	ldr	r3, [pc, #148]	; (800fdd0 <setSVM_dq+0x660>)
 800fd3c:	605a      	str	r2, [r3, #4]
 800fd3e:	4b24      	ldr	r3, [pc, #144]	; (800fdd0 <setSVM_dq+0x660>)
 800fd40:	ed93 7a01 	vldr	s14, [r3, #4]
 800fd44:	4b1e      	ldr	r3, [pc, #120]	; (800fdc0 <setSVM_dq+0x650>)
 800fd46:	edd3 7a00 	vldr	s15, [r3]
 800fd4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fd4e:	4b20      	ldr	r3, [pc, #128]	; (800fdd0 <setSVM_dq+0x660>)
 800fd50:	edc3 7a02 	vstr	s15, [r3, #8]
 800fd54:	4b1e      	ldr	r3, [pc, #120]	; (800fdd0 <setSVM_dq+0x660>)
 800fd56:	ed93 7a02 	vldr	s14, [r3, #8]
 800fd5a:	4b1b      	ldr	r3, [pc, #108]	; (800fdc8 <setSVM_dq+0x658>)
 800fd5c:	edd3 7a00 	vldr	s15, [r3]
 800fd60:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fd64:	4b1a      	ldr	r3, [pc, #104]	; (800fdd0 <setSVM_dq+0x660>)
 800fd66:	edc3 7a00 	vstr	s15, [r3]
 800fd6a:	bf00      	nop
	}


	if(duty[0] < -1.0f) duty[0] = -1.0f; else if (duty[0] > 1.0f) duty[0] = 1.0f;
 800fd6c:	4b18      	ldr	r3, [pc, #96]	; (800fdd0 <setSVM_dq+0x660>)
 800fd6e:	edd3 7a00 	vldr	s15, [r3]
 800fd72:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800fd76:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fd7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd7e:	d503      	bpl.n	800fd88 <setSVM_dq+0x618>
 800fd80:	4b13      	ldr	r3, [pc, #76]	; (800fdd0 <setSVM_dq+0x660>)
 800fd82:	4a14      	ldr	r2, [pc, #80]	; (800fdd4 <setSVM_dq+0x664>)
 800fd84:	601a      	str	r2, [r3, #0]
 800fd86:	e00d      	b.n	800fda4 <setSVM_dq+0x634>
 800fd88:	4b11      	ldr	r3, [pc, #68]	; (800fdd0 <setSVM_dq+0x660>)
 800fd8a:	edd3 7a00 	vldr	s15, [r3]
 800fd8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fd92:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fd96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd9a:	dd03      	ble.n	800fda4 <setSVM_dq+0x634>
 800fd9c:	4b0c      	ldr	r3, [pc, #48]	; (800fdd0 <setSVM_dq+0x660>)
 800fd9e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800fda2:	601a      	str	r2, [r3, #0]
	if(duty[1] < -1.0f) duty[1] = -1.0f; else if (duty[1] > 1.0f) duty[1] = 1.0f;
 800fda4:	4b0a      	ldr	r3, [pc, #40]	; (800fdd0 <setSVM_dq+0x660>)
 800fda6:	edd3 7a01 	vldr	s15, [r3, #4]
 800fdaa:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800fdae:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fdb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdb6:	d50f      	bpl.n	800fdd8 <setSVM_dq+0x668>
 800fdb8:	4b05      	ldr	r3, [pc, #20]	; (800fdd0 <setSVM_dq+0x660>)
 800fdba:	4a06      	ldr	r2, [pc, #24]	; (800fdd4 <setSVM_dq+0x664>)
 800fdbc:	605a      	str	r2, [r3, #4]
 800fdbe:	e019      	b.n	800fdf4 <setSVM_dq+0x684>
 800fdc0:	200041b4 	.word	0x200041b4
 800fdc4:	3ff00000 	.word	0x3ff00000
 800fdc8:	200041b8 	.word	0x200041b8
 800fdcc:	3fe00000 	.word	0x3fe00000
 800fdd0:	200041bc 	.word	0x200041bc
 800fdd4:	bf800000 	.word	0xbf800000
 800fdd8:	4b35      	ldr	r3, [pc, #212]	; (800feb0 <setSVM_dq+0x740>)
 800fdda:	edd3 7a01 	vldr	s15, [r3, #4]
 800fdde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fde2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fde6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdea:	dd03      	ble.n	800fdf4 <setSVM_dq+0x684>
 800fdec:	4b30      	ldr	r3, [pc, #192]	; (800feb0 <setSVM_dq+0x740>)
 800fdee:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800fdf2:	605a      	str	r2, [r3, #4]
	if(duty[2] < -1.0f) duty[2] = -1.0f; else if (duty[2] > 1.0f) duty[2] = 1.0f;
 800fdf4:	4b2e      	ldr	r3, [pc, #184]	; (800feb0 <setSVM_dq+0x740>)
 800fdf6:	edd3 7a02 	vldr	s15, [r3, #8]
 800fdfa:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800fdfe:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fe02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe06:	d503      	bpl.n	800fe10 <setSVM_dq+0x6a0>
 800fe08:	4b29      	ldr	r3, [pc, #164]	; (800feb0 <setSVM_dq+0x740>)
 800fe0a:	4a2a      	ldr	r2, [pc, #168]	; (800feb4 <setSVM_dq+0x744>)
 800fe0c:	609a      	str	r2, [r3, #8]
 800fe0e:	e00d      	b.n	800fe2c <setSVM_dq+0x6bc>
 800fe10:	4b27      	ldr	r3, [pc, #156]	; (800feb0 <setSVM_dq+0x740>)
 800fe12:	edd3 7a02 	vldr	s15, [r3, #8]
 800fe16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fe1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fe1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe22:	dd03      	ble.n	800fe2c <setSVM_dq+0x6bc>
 800fe24:	4b22      	ldr	r3, [pc, #136]	; (800feb0 <setSVM_dq+0x740>)
 800fe26:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800fe2a:	609a      	str	r2, [r3, #8]

	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, PWM_RESOL * (1.0f - (amp_u = duty[0])));
 800fe2c:	4b20      	ldr	r3, [pc, #128]	; (800feb0 <setSVM_dq+0x740>)
 800fe2e:	edd3 7a00 	vldr	s15, [r3]
 800fe32:	4b21      	ldr	r3, [pc, #132]	; (800feb8 <setSVM_dq+0x748>)
 800fe34:	edc3 7a00 	vstr	s15, [r3]
 800fe38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fe3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fe40:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800febc <setSVM_dq+0x74c>
 800fe44:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fe48:	4b1d      	ldr	r3, [pc, #116]	; (800fec0 <setSVM_dq+0x750>)
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fe50:	ee17 2a90 	vmov	r2, s15
 800fe54:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, PWM_RESOL * (1.0f - (amp_v = duty[1])));
 800fe56:	4b16      	ldr	r3, [pc, #88]	; (800feb0 <setSVM_dq+0x740>)
 800fe58:	edd3 7a01 	vldr	s15, [r3, #4]
 800fe5c:	4b19      	ldr	r3, [pc, #100]	; (800fec4 <setSVM_dq+0x754>)
 800fe5e:	edc3 7a00 	vstr	s15, [r3]
 800fe62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fe66:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fe6a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800febc <setSVM_dq+0x74c>
 800fe6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fe72:	4b13      	ldr	r3, [pc, #76]	; (800fec0 <setSVM_dq+0x750>)
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fe7a:	ee17 2a90 	vmov	r2, s15
 800fe7e:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, PWM_RESOL * (1.0f - (amp_w = duty[2])));
 800fe80:	4b0b      	ldr	r3, [pc, #44]	; (800feb0 <setSVM_dq+0x740>)
 800fe82:	edd3 7a02 	vldr	s15, [r3, #8]
 800fe86:	4b10      	ldr	r3, [pc, #64]	; (800fec8 <setSVM_dq+0x758>)
 800fe88:	edc3 7a00 	vstr	s15, [r3]
 800fe8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fe90:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fe94:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800febc <setSVM_dq+0x74c>
 800fe98:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fe9c:	4b08      	ldr	r3, [pc, #32]	; (800fec0 <setSVM_dq+0x750>)
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800fea4:	ee17 2a90 	vmov	r2, s15
 800fea8:	63da      	str	r2, [r3, #60]	; 0x3c


	return;
 800feaa:	bf00      	nop
}
 800feac:	bdb0      	pop	{r4, r5, r7, pc}
 800feae:	bf00      	nop
 800feb0:	200041bc 	.word	0x200041bc
 800feb4:	bf800000 	.word	0xbf800000
 800feb8:	200041ec 	.word	0x200041ec
 800febc:	45fa0000 	.word	0x45fa0000
 800fec0:	2000455c 	.word	0x2000455c
 800fec4:	200041f0 	.word	0x200041f0
 800fec8:	200041f4 	.word	0x200041f4

0800fecc <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800fecc:	b580      	push	{r7, lr}
 800fece:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 800fed0:	4b18      	ldr	r3, [pc, #96]	; (800ff34 <MX_SPI2_Init+0x68>)
 800fed2:	4a19      	ldr	r2, [pc, #100]	; (800ff38 <MX_SPI2_Init+0x6c>)
 800fed4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800fed6:	4b17      	ldr	r3, [pc, #92]	; (800ff34 <MX_SPI2_Init+0x68>)
 800fed8:	f44f 7282 	mov.w	r2, #260	; 0x104
 800fedc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800fede:	4b15      	ldr	r3, [pc, #84]	; (800ff34 <MX_SPI2_Init+0x68>)
 800fee0:	2200      	movs	r2, #0
 800fee2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800fee4:	4b13      	ldr	r3, [pc, #76]	; (800ff34 <MX_SPI2_Init+0x68>)
 800fee6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800feea:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800feec:	4b11      	ldr	r3, [pc, #68]	; (800ff34 <MX_SPI2_Init+0x68>)
 800feee:	2200      	movs	r2, #0
 800fef0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800fef2:	4b10      	ldr	r3, [pc, #64]	; (800ff34 <MX_SPI2_Init+0x68>)
 800fef4:	2201      	movs	r2, #1
 800fef6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800fef8:	4b0e      	ldr	r3, [pc, #56]	; (800ff34 <MX_SPI2_Init+0x68>)
 800fefa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fefe:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800ff00:	4b0c      	ldr	r3, [pc, #48]	; (800ff34 <MX_SPI2_Init+0x68>)
 800ff02:	2218      	movs	r2, #24
 800ff04:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800ff06:	4b0b      	ldr	r3, [pc, #44]	; (800ff34 <MX_SPI2_Init+0x68>)
 800ff08:	2200      	movs	r2, #0
 800ff0a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800ff0c:	4b09      	ldr	r3, [pc, #36]	; (800ff34 <MX_SPI2_Init+0x68>)
 800ff0e:	2200      	movs	r2, #0
 800ff10:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ff12:	4b08      	ldr	r3, [pc, #32]	; (800ff34 <MX_SPI2_Init+0x68>)
 800ff14:	2200      	movs	r2, #0
 800ff16:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800ff18:	4b06      	ldr	r3, [pc, #24]	; (800ff34 <MX_SPI2_Init+0x68>)
 800ff1a:	220a      	movs	r2, #10
 800ff1c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800ff1e:	4805      	ldr	r0, [pc, #20]	; (800ff34 <MX_SPI2_Init+0x68>)
 800ff20:	f7fb fe5a 	bl	800bbd8 <HAL_SPI_Init>
 800ff24:	4603      	mov	r3, r0
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d001      	beq.n	800ff2e <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 800ff2a:	f7ff fc19 	bl	800f760 <Error_Handler>
  }

}
 800ff2e:	bf00      	nop
 800ff30:	bd80      	pop	{r7, pc}
 800ff32:	bf00      	nop
 800ff34:	200044a8 	.word	0x200044a8
 800ff38:	40003800 	.word	0x40003800

0800ff3c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 800ff40:	4b17      	ldr	r3, [pc, #92]	; (800ffa0 <MX_SPI3_Init+0x64>)
 800ff42:	4a18      	ldr	r2, [pc, #96]	; (800ffa4 <MX_SPI3_Init+0x68>)
 800ff44:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800ff46:	4b16      	ldr	r3, [pc, #88]	; (800ffa0 <MX_SPI3_Init+0x64>)
 800ff48:	f44f 7282 	mov.w	r2, #260	; 0x104
 800ff4c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800ff4e:	4b14      	ldr	r3, [pc, #80]	; (800ffa0 <MX_SPI3_Init+0x64>)
 800ff50:	2200      	movs	r2, #0
 800ff52:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800ff54:	4b12      	ldr	r3, [pc, #72]	; (800ffa0 <MX_SPI3_Init+0x64>)
 800ff56:	2200      	movs	r2, #0
 800ff58:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800ff5a:	4b11      	ldr	r3, [pc, #68]	; (800ffa0 <MX_SPI3_Init+0x64>)
 800ff5c:	2200      	movs	r2, #0
 800ff5e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800ff60:	4b0f      	ldr	r3, [pc, #60]	; (800ffa0 <MX_SPI3_Init+0x64>)
 800ff62:	2200      	movs	r2, #0
 800ff64:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800ff66:	4b0e      	ldr	r3, [pc, #56]	; (800ffa0 <MX_SPI3_Init+0x64>)
 800ff68:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800ff6c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ff6e:	4b0c      	ldr	r3, [pc, #48]	; (800ffa0 <MX_SPI3_Init+0x64>)
 800ff70:	2200      	movs	r2, #0
 800ff72:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800ff74:	4b0a      	ldr	r3, [pc, #40]	; (800ffa0 <MX_SPI3_Init+0x64>)
 800ff76:	2200      	movs	r2, #0
 800ff78:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800ff7a:	4b09      	ldr	r3, [pc, #36]	; (800ffa0 <MX_SPI3_Init+0x64>)
 800ff7c:	2200      	movs	r2, #0
 800ff7e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ff80:	4b07      	ldr	r3, [pc, #28]	; (800ffa0 <MX_SPI3_Init+0x64>)
 800ff82:	2200      	movs	r2, #0
 800ff84:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800ff86:	4b06      	ldr	r3, [pc, #24]	; (800ffa0 <MX_SPI3_Init+0x64>)
 800ff88:	220a      	movs	r2, #10
 800ff8a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800ff8c:	4804      	ldr	r0, [pc, #16]	; (800ffa0 <MX_SPI3_Init+0x64>)
 800ff8e:	f7fb fe23 	bl	800bbd8 <HAL_SPI_Init>
 800ff92:	4603      	mov	r3, r0
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d001      	beq.n	800ff9c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800ff98:	f7ff fbe2 	bl	800f760 <Error_Handler>
  }

}
 800ff9c:	bf00      	nop
 800ff9e:	bd80      	pop	{r7, pc}
 800ffa0:	20004500 	.word	0x20004500
 800ffa4:	40003c00 	.word	0x40003c00

0800ffa8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800ffa8:	b580      	push	{r7, lr}
 800ffaa:	b08e      	sub	sp, #56	; 0x38
 800ffac:	af00      	add	r7, sp, #0
 800ffae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ffb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ffb4:	2200      	movs	r2, #0
 800ffb6:	601a      	str	r2, [r3, #0]
 800ffb8:	605a      	str	r2, [r3, #4]
 800ffba:	609a      	str	r2, [r3, #8]
 800ffbc:	60da      	str	r2, [r3, #12]
 800ffbe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	4a6c      	ldr	r2, [pc, #432]	; (8010178 <HAL_SPI_MspInit+0x1d0>)
 800ffc6:	4293      	cmp	r3, r2
 800ffc8:	d163      	bne.n	8010092 <HAL_SPI_MspInit+0xea>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800ffca:	2300      	movs	r3, #0
 800ffcc:	623b      	str	r3, [r7, #32]
 800ffce:	4b6b      	ldr	r3, [pc, #428]	; (801017c <HAL_SPI_MspInit+0x1d4>)
 800ffd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffd2:	4a6a      	ldr	r2, [pc, #424]	; (801017c <HAL_SPI_MspInit+0x1d4>)
 800ffd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ffd8:	6413      	str	r3, [r2, #64]	; 0x40
 800ffda:	4b68      	ldr	r3, [pc, #416]	; (801017c <HAL_SPI_MspInit+0x1d4>)
 800ffdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ffde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ffe2:	623b      	str	r3, [r7, #32]
 800ffe4:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ffe6:	2300      	movs	r3, #0
 800ffe8:	61fb      	str	r3, [r7, #28]
 800ffea:	4b64      	ldr	r3, [pc, #400]	; (801017c <HAL_SPI_MspInit+0x1d4>)
 800ffec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffee:	4a63      	ldr	r2, [pc, #396]	; (801017c <HAL_SPI_MspInit+0x1d4>)
 800fff0:	f043 0304 	orr.w	r3, r3, #4
 800fff4:	6313      	str	r3, [r2, #48]	; 0x30
 800fff6:	4b61      	ldr	r3, [pc, #388]	; (801017c <HAL_SPI_MspInit+0x1d4>)
 800fff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fffa:	f003 0304 	and.w	r3, r3, #4
 800fffe:	61fb      	str	r3, [r7, #28]
 8010000:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010002:	2300      	movs	r3, #0
 8010004:	61bb      	str	r3, [r7, #24]
 8010006:	4b5d      	ldr	r3, [pc, #372]	; (801017c <HAL_SPI_MspInit+0x1d4>)
 8010008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801000a:	4a5c      	ldr	r2, [pc, #368]	; (801017c <HAL_SPI_MspInit+0x1d4>)
 801000c:	f043 0302 	orr.w	r3, r3, #2
 8010010:	6313      	str	r3, [r2, #48]	; 0x30
 8010012:	4b5a      	ldr	r3, [pc, #360]	; (801017c <HAL_SPI_MspInit+0x1d4>)
 8010014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010016:	f003 0302 	and.w	r3, r3, #2
 801001a:	61bb      	str	r3, [r7, #24]
 801001c:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration    
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 801001e:	2302      	movs	r3, #2
 8010020:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010022:	2302      	movs	r3, #2
 8010024:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010026:	2300      	movs	r3, #0
 8010028:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801002a:	2303      	movs	r3, #3
 801002c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 801002e:	2307      	movs	r3, #7
 8010030:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010032:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010036:	4619      	mov	r1, r3
 8010038:	4851      	ldr	r0, [pc, #324]	; (8010180 <HAL_SPI_MspInit+0x1d8>)
 801003a:	f7fa fedf 	bl	800adfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 801003e:	2304      	movs	r3, #4
 8010040:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010042:	2302      	movs	r3, #2
 8010044:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010046:	2300      	movs	r3, #0
 8010048:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801004a:	2303      	movs	r3, #3
 801004c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 801004e:	2305      	movs	r3, #5
 8010050:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010052:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010056:	4619      	mov	r1, r3
 8010058:	4849      	ldr	r0, [pc, #292]	; (8010180 <HAL_SPI_MspInit+0x1d8>)
 801005a:	f7fa fecf 	bl	800adfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 801005e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010062:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010064:	2302      	movs	r3, #2
 8010066:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010068:	2300      	movs	r3, #0
 801006a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801006c:	2303      	movs	r3, #3
 801006e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8010070:	2305      	movs	r3, #5
 8010072:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010074:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010078:	4619      	mov	r1, r3
 801007a:	4842      	ldr	r0, [pc, #264]	; (8010184 <HAL_SPI_MspInit+0x1dc>)
 801007c:	f7fa febe 	bl	800adfc <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8010080:	2200      	movs	r2, #0
 8010082:	2100      	movs	r1, #0
 8010084:	2024      	movs	r0, #36	; 0x24
 8010086:	f7fa f806 	bl	800a096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 801008a:	2024      	movs	r0, #36	; 0x24
 801008c:	f7fa f81f 	bl	800a0ce <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8010090:	e06e      	b.n	8010170 <HAL_SPI_MspInit+0x1c8>
  else if(spiHandle->Instance==SPI3)
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	4a3c      	ldr	r2, [pc, #240]	; (8010188 <HAL_SPI_MspInit+0x1e0>)
 8010098:	4293      	cmp	r3, r2
 801009a:	d169      	bne.n	8010170 <HAL_SPI_MspInit+0x1c8>
    __HAL_RCC_SPI3_CLK_ENABLE();
 801009c:	2300      	movs	r3, #0
 801009e:	617b      	str	r3, [r7, #20]
 80100a0:	4b36      	ldr	r3, [pc, #216]	; (801017c <HAL_SPI_MspInit+0x1d4>)
 80100a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80100a4:	4a35      	ldr	r2, [pc, #212]	; (801017c <HAL_SPI_MspInit+0x1d4>)
 80100a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80100aa:	6413      	str	r3, [r2, #64]	; 0x40
 80100ac:	4b33      	ldr	r3, [pc, #204]	; (801017c <HAL_SPI_MspInit+0x1d4>)
 80100ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80100b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80100b4:	617b      	str	r3, [r7, #20]
 80100b6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80100b8:	2300      	movs	r3, #0
 80100ba:	613b      	str	r3, [r7, #16]
 80100bc:	4b2f      	ldr	r3, [pc, #188]	; (801017c <HAL_SPI_MspInit+0x1d4>)
 80100be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100c0:	4a2e      	ldr	r2, [pc, #184]	; (801017c <HAL_SPI_MspInit+0x1d4>)
 80100c2:	f043 0302 	orr.w	r3, r3, #2
 80100c6:	6313      	str	r3, [r2, #48]	; 0x30
 80100c8:	4b2c      	ldr	r3, [pc, #176]	; (801017c <HAL_SPI_MspInit+0x1d4>)
 80100ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100cc:	f003 0302 	and.w	r3, r3, #2
 80100d0:	613b      	str	r3, [r7, #16]
 80100d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80100d4:	2300      	movs	r3, #0
 80100d6:	60fb      	str	r3, [r7, #12]
 80100d8:	4b28      	ldr	r3, [pc, #160]	; (801017c <HAL_SPI_MspInit+0x1d4>)
 80100da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100dc:	4a27      	ldr	r2, [pc, #156]	; (801017c <HAL_SPI_MspInit+0x1d4>)
 80100de:	f043 0301 	orr.w	r3, r3, #1
 80100e2:	6313      	str	r3, [r2, #48]	; 0x30
 80100e4:	4b25      	ldr	r3, [pc, #148]	; (801017c <HAL_SPI_MspInit+0x1d4>)
 80100e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100e8:	f003 0301 	and.w	r3, r3, #1
 80100ec:	60fb      	str	r3, [r7, #12]
 80100ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80100f0:	2300      	movs	r3, #0
 80100f2:	60bb      	str	r3, [r7, #8]
 80100f4:	4b21      	ldr	r3, [pc, #132]	; (801017c <HAL_SPI_MspInit+0x1d4>)
 80100f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100f8:	4a20      	ldr	r2, [pc, #128]	; (801017c <HAL_SPI_MspInit+0x1d4>)
 80100fa:	f043 0304 	orr.w	r3, r3, #4
 80100fe:	6313      	str	r3, [r2, #48]	; 0x30
 8010100:	4b1e      	ldr	r3, [pc, #120]	; (801017c <HAL_SPI_MspInit+0x1d4>)
 8010102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010104:	f003 0304 	and.w	r3, r3, #4
 8010108:	60bb      	str	r3, [r7, #8]
 801010a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 801010c:	2304      	movs	r3, #4
 801010e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010110:	2302      	movs	r3, #2
 8010112:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010114:	2300      	movs	r3, #0
 8010116:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010118:	2303      	movs	r3, #3
 801011a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 801011c:	2307      	movs	r3, #7
 801011e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010120:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010124:	4619      	mov	r1, r3
 8010126:	4817      	ldr	r0, [pc, #92]	; (8010184 <HAL_SPI_MspInit+0x1dc>)
 8010128:	f7fa fe68 	bl	800adfc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 801012c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010130:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010132:	2302      	movs	r3, #2
 8010134:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010136:	2300      	movs	r3, #0
 8010138:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801013a:	2303      	movs	r3, #3
 801013c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 801013e:	2306      	movs	r3, #6
 8010140:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010142:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010146:	4619      	mov	r1, r3
 8010148:	4810      	ldr	r0, [pc, #64]	; (801018c <HAL_SPI_MspInit+0x1e4>)
 801014a:	f7fa fe57 	bl	800adfc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 801014e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8010152:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010154:	2302      	movs	r3, #2
 8010156:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010158:	2300      	movs	r3, #0
 801015a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801015c:	2303      	movs	r3, #3
 801015e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8010160:	2306      	movs	r3, #6
 8010162:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010164:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010168:	4619      	mov	r1, r3
 801016a:	4805      	ldr	r0, [pc, #20]	; (8010180 <HAL_SPI_MspInit+0x1d8>)
 801016c:	f7fa fe46 	bl	800adfc <HAL_GPIO_Init>
}
 8010170:	bf00      	nop
 8010172:	3738      	adds	r7, #56	; 0x38
 8010174:	46bd      	mov	sp, r7
 8010176:	bd80      	pop	{r7, pc}
 8010178:	40003800 	.word	0x40003800
 801017c:	40023800 	.word	0x40023800
 8010180:	40020800 	.word	0x40020800
 8010184:	40020400 	.word	0x40020400
 8010188:	40003c00 	.word	0x40003c00
 801018c:	40020000 	.word	0x40020000

08010190 <SPI_Init>:
} 

/* USER CODE BEGIN 1 */

void SPI_Init()
{
 8010190:	b480      	push	{r7}
 8010192:	af00      	add	r7, sp, #0


	  // SPI Interrupt Setting
	  __HAL_SPI_ENABLE_IT(&hspi2, SPI_IT_TXE | SPI_IT_RXNE);
 8010194:	4b06      	ldr	r3, [pc, #24]	; (80101b0 <SPI_Init+0x20>)
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	685a      	ldr	r2, [r3, #4]
 801019a:	4b05      	ldr	r3, [pc, #20]	; (80101b0 <SPI_Init+0x20>)
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80101a2:	605a      	str	r2, [r3, #4]

}
 80101a4:	bf00      	nop
 80101a6:	46bd      	mov	sp, r7
 80101a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ac:	4770      	bx	lr
 80101ae:	bf00      	nop
 80101b0:	200044a8 	.word	0x200044a8
 80101b4:	00000000 	.word	0x00000000

080101b8 <setZeroEncoder>:



void setZeroEncoder(uint8_t exe)
{
 80101b8:	b590      	push	{r4, r7, lr}
 80101ba:	b08b      	sub	sp, #44	; 0x2c
 80101bc:	af00      	add	r7, sp, #0
 80101be:	4603      	mov	r3, r0
 80101c0:	71fb      	strb	r3, [r7, #7]

	const int32_t forced_commute_steps = 2000;
 80101c2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80101c6:	627b      	str	r3, [r7, #36]	; 0x24



	volatile uint32_t forced_commute_count = 0;
 80101c8:	2300      	movs	r3, #0
 80101ca:	61bb      	str	r3, [r7, #24]

	const float forced_I_gamma_ref = 8.0f;
 80101cc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80101d0:	623b      	str	r3, [r7, #32]
	const float forced_I_delta_ref = 0.0f;
 80101d2:	f04f 0300 	mov.w	r3, #0
 80101d6:	61fb      	str	r3, [r7, #28]

	volatile float sensed_theta_re_error;

	volatile float sensed_theta_error;
	volatile float sensed_theta_error_sum = 0.0f;
 80101d8:	f04f 0300 	mov.w	r3, #0
 80101dc:	60fb      	str	r3, [r7, #12]
	volatile float sensed_theta_error_ave = 0.0f;
 80101de:	f04f 0300 	mov.w	r3, #0
 80101e2:	60bb      	str	r3, [r7, #8]


	flash_data = (uint32_t*)Flash_load();
 80101e4:	f7fe ffec 	bl	800f1c0 <Flash_load>
 80101e8:	4602      	mov	r2, r0
 80101ea:	4b9d      	ldr	r3, [pc, #628]	; (8010460 <setZeroEncoder+0x2a8>)
 80101ec:	601a      	str	r2, [r3, #0]

	if(exe == 0)
 80101ee:	79fb      	ldrb	r3, [r7, #7]
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d126      	bne.n	8010242 <setZeroEncoder+0x8a>
	{

		memcpy(&theta_re_offset, flash_data, 4);
 80101f4:	4b9a      	ldr	r3, [pc, #616]	; (8010460 <setZeroEncoder+0x2a8>)
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	461a      	mov	r2, r3
 80101fc:	4b99      	ldr	r3, [pc, #612]	; (8010464 <setZeroEncoder+0x2ac>)
 80101fe:	601a      	str	r2, [r3, #0]

		printf("flash_data:%d\n", theta_re_offset * 100000);
 8010200:	4b98      	ldr	r3, [pc, #608]	; (8010464 <setZeroEncoder+0x2ac>)
 8010202:	edd3 7a00 	vldr	s15, [r3]
 8010206:	ed9f 7a98 	vldr	s14, [pc, #608]	; 8010468 <setZeroEncoder+0x2b0>
 801020a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801020e:	ee17 0a90 	vmov	r0, s15
 8010212:	f7f8 f8c9 	bl	80083a8 <__aeabi_f2d>
 8010216:	4603      	mov	r3, r0
 8010218:	460c      	mov	r4, r1
 801021a:	461a      	mov	r2, r3
 801021c:	4623      	mov	r3, r4
 801021e:	4893      	ldr	r0, [pc, #588]	; (801046c <setZeroEncoder+0x2b4>)
 8010220:	f000 fea8 	bl	8010f74 <iprintf>
		printf(" theta_re_offset = %d\n", (int)(theta_re_offset * 100000));
 8010224:	4b8f      	ldr	r3, [pc, #572]	; (8010464 <setZeroEncoder+0x2ac>)
 8010226:	edd3 7a00 	vldr	s15, [r3]
 801022a:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8010468 <setZeroEncoder+0x2b0>
 801022e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010232:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010236:	ee17 1a90 	vmov	r1, s15
 801023a:	488d      	ldr	r0, [pc, #564]	; (8010470 <setZeroEncoder+0x2b8>)
 801023c:	f000 fe9a 	bl	8010f74 <iprintf>
		return;
 8010240:	e0fd      	b.n	801043e <setZeroEncoder+0x286>
	}


	Id_ref = forced_I_gamma_ref;
 8010242:	4a8c      	ldr	r2, [pc, #560]	; (8010474 <setZeroEncoder+0x2bc>)
 8010244:	6a3b      	ldr	r3, [r7, #32]
 8010246:	6013      	str	r3, [r2, #0]
	Iq_ref = forced_I_delta_ref;
 8010248:	4a8b      	ldr	r2, [pc, #556]	; (8010478 <setZeroEncoder+0x2c0>)
 801024a:	69fb      	ldr	r3, [r7, #28]
 801024c:	6013      	str	r3, [r2, #0]

	forced_commute_enable = 1;
 801024e:	4b8b      	ldr	r3, [pc, #556]	; (801047c <setZeroEncoder+0x2c4>)
 8010250:	2201      	movs	r2, #1
 8010252:	701a      	strb	r2, [r3, #0]


	timeoutReset();	HAL_Delay(100);
 8010254:	f000 fd92 	bl	8010d7c <timeoutReset>
 8010258:	2064      	movs	r0, #100	; 0x64
 801025a:	f7f8 fe01 	bl	8008e60 <HAL_Delay>
	timeoutReset();	HAL_Delay(100);
 801025e:	f000 fd8d 	bl	8010d7c <timeoutReset>
 8010262:	2064      	movs	r0, #100	; 0x64
 8010264:	f7f8 fdfc 	bl	8008e60 <HAL_Delay>
	timeoutReset();	HAL_Delay(100);
 8010268:	f000 fd88 	bl	8010d7c <timeoutReset>
 801026c:	2064      	movs	r0, #100	; 0x64
 801026e:	f7f8 fdf7 	bl	8008e60 <HAL_Delay>
	timeoutReset();	HAL_Delay(100);
 8010272:	f000 fd83 	bl	8010d7c <timeoutReset>
 8010276:	2064      	movs	r0, #100	; 0x64
 8010278:	f7f8 fdf2 	bl	8008e60 <HAL_Delay>
	timeoutReset();	HAL_Delay(100);
 801027c:	f000 fd7e 	bl	8010d7c <timeoutReset>
 8010280:	2064      	movs	r0, #100	; 0x64
 8010282:	f7f8 fded 	bl	8008e60 <HAL_Delay>

	requestEncoder();
 8010286:	f000 f90f 	bl	80104a8 <requestEncoder>
	HAL_Delay(5);
 801028a:	2005      	movs	r0, #5
 801028c:	f7f8 fde8 	bl	8008e60 <HAL_Delay>
	refreshEncoder();
 8010290:	f000 f92a 	bl	80104e8 <refreshEncoder>
	HAL_Delay(5);
 8010294:	2005      	movs	r0, #5
 8010296:	f7f8 fde3 	bl	8008e60 <HAL_Delay>
	requestEncoder();
 801029a:	f000 f905 	bl	80104a8 <requestEncoder>
	HAL_Delay(5);
 801029e:	2005      	movs	r0, #5
 80102a0:	f7f8 fdde 	bl	8008e60 <HAL_Delay>
	refreshEncoder();
 80102a4:	f000 f920 	bl	80104e8 <refreshEncoder>

	theta_re_offset = 0.0f - theta_re;
 80102a8:	4b75      	ldr	r3, [pc, #468]	; (8010480 <setZeroEncoder+0x2c8>)
 80102aa:	edd3 7a00 	vldr	s15, [r3]
 80102ae:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8010484 <setZeroEncoder+0x2cc>
 80102b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80102b6:	4b6b      	ldr	r3, [pc, #428]	; (8010464 <setZeroEncoder+0x2ac>)
 80102b8:	edc3 7a00 	vstr	s15, [r3]

	while(theta_re_offset < -M_PI)	theta_re_offset += 2.0f * M_PI;
 80102bc:	e012      	b.n	80102e4 <setZeroEncoder+0x12c>
 80102be:	4b69      	ldr	r3, [pc, #420]	; (8010464 <setZeroEncoder+0x2ac>)
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	4618      	mov	r0, r3
 80102c4:	f7f8 f870 	bl	80083a8 <__aeabi_f2d>
 80102c8:	a35f      	add	r3, pc, #380	; (adr r3, 8010448 <setZeroEncoder+0x290>)
 80102ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102ce:	f7f7 ff0d 	bl	80080ec <__adddf3>
 80102d2:	4603      	mov	r3, r0
 80102d4:	460c      	mov	r4, r1
 80102d6:	4618      	mov	r0, r3
 80102d8:	4621      	mov	r1, r4
 80102da:	f7f8 fb7f 	bl	80089dc <__aeabi_d2f>
 80102de:	4602      	mov	r2, r0
 80102e0:	4b60      	ldr	r3, [pc, #384]	; (8010464 <setZeroEncoder+0x2ac>)
 80102e2:	601a      	str	r2, [r3, #0]
 80102e4:	4b5f      	ldr	r3, [pc, #380]	; (8010464 <setZeroEncoder+0x2ac>)
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	4618      	mov	r0, r3
 80102ea:	f7f8 f85d 	bl	80083a8 <__aeabi_f2d>
 80102ee:	a358      	add	r3, pc, #352	; (adr r3, 8010450 <setZeroEncoder+0x298>)
 80102f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102f4:	f7f8 fb22 	bl	800893c <__aeabi_dcmplt>
 80102f8:	4603      	mov	r3, r0
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	d1df      	bne.n	80102be <setZeroEncoder+0x106>
	while(theta_re_offset > M_PI)	theta_re_offset -= 2.0f * M_PI;
 80102fe:	e012      	b.n	8010326 <setZeroEncoder+0x16e>
 8010300:	4b58      	ldr	r3, [pc, #352]	; (8010464 <setZeroEncoder+0x2ac>)
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	4618      	mov	r0, r3
 8010306:	f7f8 f84f 	bl	80083a8 <__aeabi_f2d>
 801030a:	a34f      	add	r3, pc, #316	; (adr r3, 8010448 <setZeroEncoder+0x290>)
 801030c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010310:	f7f7 feea 	bl	80080e8 <__aeabi_dsub>
 8010314:	4603      	mov	r3, r0
 8010316:	460c      	mov	r4, r1
 8010318:	4618      	mov	r0, r3
 801031a:	4621      	mov	r1, r4
 801031c:	f7f8 fb5e 	bl	80089dc <__aeabi_d2f>
 8010320:	4602      	mov	r2, r0
 8010322:	4b50      	ldr	r3, [pc, #320]	; (8010464 <setZeroEncoder+0x2ac>)
 8010324:	601a      	str	r2, [r3, #0]
 8010326:	4b4f      	ldr	r3, [pc, #316]	; (8010464 <setZeroEncoder+0x2ac>)
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	4618      	mov	r0, r3
 801032c:	f7f8 f83c 	bl	80083a8 <__aeabi_f2d>
 8010330:	a349      	add	r3, pc, #292	; (adr r3, 8010458 <setZeroEncoder+0x2a0>)
 8010332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010336:	f7f8 fb1f 	bl	8008978 <__aeabi_dcmpgt>
 801033a:	4603      	mov	r3, r0
 801033c:	2b00      	cmp	r3, #0
 801033e:	d1df      	bne.n	8010300 <setZeroEncoder+0x148>


	printf(" theta_re_offset = %d -- ", (int)(theta_re_offset * 100000));
 8010340:	4b48      	ldr	r3, [pc, #288]	; (8010464 <setZeroEncoder+0x2ac>)
 8010342:	edd3 7a00 	vldr	s15, [r3]
 8010346:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8010468 <setZeroEncoder+0x2b0>
 801034a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801034e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010352:	ee17 1a90 	vmov	r1, s15
 8010356:	484c      	ldr	r0, [pc, #304]	; (8010488 <setZeroEncoder+0x2d0>)
 8010358:	f000 fe0c 	bl	8010f74 <iprintf>
	HAL_Delay(1);
 801035c:	2001      	movs	r0, #1
 801035e:	f7f8 fd7f 	bl	8008e60 <HAL_Delay>
	printf(" theta_re_offset = %d\n", (int)(theta_re_offset * 100000));
 8010362:	4b40      	ldr	r3, [pc, #256]	; (8010464 <setZeroEncoder+0x2ac>)
 8010364:	edd3 7a00 	vldr	s15, [r3]
 8010368:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8010468 <setZeroEncoder+0x2b0>
 801036c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010370:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010374:	ee17 1a90 	vmov	r1, s15
 8010378:	483d      	ldr	r0, [pc, #244]	; (8010470 <setZeroEncoder+0x2b8>)
 801037a:	f000 fdfb 	bl	8010f74 <iprintf>
	HAL_Delay(1);
 801037e:	2001      	movs	r0, #1
 8010380:	f7f8 fd6e 	bl	8008e60 <HAL_Delay>
	printf(" theta_re_offset(4) = %d -- ", (int)(theta_re_offset * 10000));
 8010384:	4b37      	ldr	r3, [pc, #220]	; (8010464 <setZeroEncoder+0x2ac>)
 8010386:	edd3 7a00 	vldr	s15, [r3]
 801038a:	ed9f 7a40 	vldr	s14, [pc, #256]	; 801048c <setZeroEncoder+0x2d4>
 801038e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010392:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010396:	ee17 1a90 	vmov	r1, s15
 801039a:	483d      	ldr	r0, [pc, #244]	; (8010490 <setZeroEncoder+0x2d8>)
 801039c:	f000 fdea 	bl	8010f74 <iprintf>
	HAL_Delay(1);
 80103a0:	2001      	movs	r0, #1
 80103a2:	f7f8 fd5d 	bl	8008e60 <HAL_Delay>
	printf(" theta_re_offset(4) = %d\n", (int)(theta_re_offset * 10000));
 80103a6:	4b2f      	ldr	r3, [pc, #188]	; (8010464 <setZeroEncoder+0x2ac>)
 80103a8:	edd3 7a00 	vldr	s15, [r3]
 80103ac:	ed9f 7a37 	vldr	s14, [pc, #220]	; 801048c <setZeroEncoder+0x2d4>
 80103b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80103b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80103b8:	ee17 1a90 	vmov	r1, s15
 80103bc:	4835      	ldr	r0, [pc, #212]	; (8010494 <setZeroEncoder+0x2dc>)
 80103be:	f000 fdd9 	bl	8010f74 <iprintf>
	HAL_Delay(1);
 80103c2:	2001      	movs	r0, #1
 80103c4:	f7f8 fd4c 	bl	8008e60 <HAL_Delay>

	printf("(theta_re_offset < 1.0f) = %d\n", (int)(theta_re_offset < 1.0f));
 80103c8:	4b26      	ldr	r3, [pc, #152]	; (8010464 <setZeroEncoder+0x2ac>)
 80103ca:	edd3 7a00 	vldr	s15, [r3]
 80103ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80103d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80103d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103da:	bf4c      	ite	mi
 80103dc:	2301      	movmi	r3, #1
 80103de:	2300      	movpl	r3, #0
 80103e0:	b2db      	uxtb	r3, r3
 80103e2:	4619      	mov	r1, r3
 80103e4:	482c      	ldr	r0, [pc, #176]	; (8010498 <setZeroEncoder+0x2e0>)
 80103e6:	f000 fdc5 	bl	8010f74 <iprintf>

	printf("(theta_re_offset > -1.0f) = %d\n", (int)(theta_re_offset > -1.0f));
 80103ea:	4b1e      	ldr	r3, [pc, #120]	; (8010464 <setZeroEncoder+0x2ac>)
 80103ec:	edd3 7a00 	vldr	s15, [r3]
 80103f0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80103f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80103f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103fc:	bfcc      	ite	gt
 80103fe:	2301      	movgt	r3, #1
 8010400:	2300      	movle	r3, #0
 8010402:	b2db      	uxtb	r3, r3
 8010404:	4619      	mov	r1, r3
 8010406:	4825      	ldr	r0, [pc, #148]	; (801049c <setZeroEncoder+0x2e4>)
 8010408:	f000 fdb4 	bl	8010f74 <iprintf>


	memcpy(flash_data, &theta_re_offset, 4);
 801040c:	4b14      	ldr	r3, [pc, #80]	; (8010460 <setZeroEncoder+0x2a8>)
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	4a14      	ldr	r2, [pc, #80]	; (8010464 <setZeroEncoder+0x2ac>)
 8010412:	6812      	ldr	r2, [r2, #0]
 8010414:	601a      	str	r2, [r3, #0]

	if (!Flash_store())
 8010416:	f7fe fee5 	bl	800f1e4 <Flash_store>
 801041a:	4603      	mov	r3, r0
 801041c:	2b00      	cmp	r3, #0
 801041e:	d102      	bne.n	8010426 <setZeroEncoder+0x26e>
	{
		printf("Failed to write flash\n");
 8010420:	481f      	ldr	r0, [pc, #124]	; (80104a0 <setZeroEncoder+0x2e8>)
 8010422:	f000 fe1b 	bl	801105c <puts>
	}

	printf("flash_data:%lu\n", *flash_data);
 8010426:	4b0e      	ldr	r3, [pc, #56]	; (8010460 <setZeroEncoder+0x2a8>)
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	4619      	mov	r1, r3
 801042e:	481d      	ldr	r0, [pc, #116]	; (80104a4 <setZeroEncoder+0x2ec>)
 8010430:	f000 fda0 	bl	8010f74 <iprintf>



	ACR_Reset();
 8010434:	f7fd fe9e 	bl	800e174 <ACR_Reset>

	forced_commute_enable = 0;
 8010438:	4b10      	ldr	r3, [pc, #64]	; (801047c <setZeroEncoder+0x2c4>)
 801043a:	2200      	movs	r2, #0
 801043c:	701a      	strb	r2, [r3, #0]


#endif


}
 801043e:	372c      	adds	r7, #44	; 0x2c
 8010440:	46bd      	mov	sp, r7
 8010442:	bd90      	pop	{r4, r7, pc}
 8010444:	f3af 8000 	nop.w
 8010448:	54442d18 	.word	0x54442d18
 801044c:	401921fb 	.word	0x401921fb
 8010450:	54442d18 	.word	0x54442d18
 8010454:	c00921fb 	.word	0xc00921fb
 8010458:	54442d18 	.word	0x54442d18
 801045c:	400921fb 	.word	0x400921fb
 8010460:	20004558 	.word	0x20004558
 8010464:	200041d4 	.word	0x200041d4
 8010468:	47c35000 	.word	0x47c35000
 801046c:	08013020 	.word	0x08013020
 8010470:	08013030 	.word	0x08013030
 8010474:	200000c4 	.word	0x200000c4
 8010478:	200000c8 	.word	0x200000c8
 801047c:	200041e4 	.word	0x200041e4
 8010480:	200041dc 	.word	0x200041dc
 8010484:	00000000 	.word	0x00000000
 8010488:	08013048 	.word	0x08013048
 801048c:	461c4000 	.word	0x461c4000
 8010490:	08013064 	.word	0x08013064
 8010494:	08013084 	.word	0x08013084
 8010498:	080130a0 	.word	0x080130a0
 801049c:	080130c0 	.word	0x080130c0
 80104a0:	080130e0 	.word	0x080130e0
 80104a4:	080130f8 	.word	0x080130f8

080104a8 <requestEncoder>:




inline void requestEncoder()
{
 80104a8:	b580      	push	{r7, lr}
 80104aa:	af00      	add	r7, sp, #0


	// Reading Encoder for next sampling
	spi2txBuf[0] = 0xff;
 80104ac:	4b09      	ldr	r3, [pc, #36]	; (80104d4 <requestEncoder+0x2c>)
 80104ae:	22ff      	movs	r2, #255	; 0xff
 80104b0:	701a      	strb	r2, [r3, #0]
	spi2txBuf[1] = 0xff;
 80104b2:	4b08      	ldr	r3, [pc, #32]	; (80104d4 <requestEncoder+0x2c>)
 80104b4:	22ff      	movs	r2, #255	; 0xff
 80104b6:	705a      	strb	r2, [r3, #1]
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 80104b8:	2200      	movs	r2, #0
 80104ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80104be:	4806      	ldr	r0, [pc, #24]	; (80104d8 <requestEncoder+0x30>)
 80104c0:	f7fa fe46 	bl	800b150 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_IT(&hspi2, spi2txBuf, spi2rxBuf, 1);
 80104c4:	2301      	movs	r3, #1
 80104c6:	4a05      	ldr	r2, [pc, #20]	; (80104dc <requestEncoder+0x34>)
 80104c8:	4902      	ldr	r1, [pc, #8]	; (80104d4 <requestEncoder+0x2c>)
 80104ca:	4805      	ldr	r0, [pc, #20]	; (80104e0 <requestEncoder+0x38>)
 80104cc:	f7fb fbe8 	bl	800bca0 <HAL_SPI_TransmitReceive_IT>


}
 80104d0:	bf00      	nop
 80104d2:	bd80      	pop	{r7, pc}
 80104d4:	200041c8 	.word	0x200041c8
 80104d8:	40020400 	.word	0x40020400
 80104dc:	200041cc 	.word	0x200041cc
 80104e0:	200044a8 	.word	0x200044a8
 80104e4:	00000000 	.word	0x00000000

080104e8 <refreshEncoder>:


inline int refreshEncoder()
{
 80104e8:	b5b0      	push	{r4, r5, r7, lr}
 80104ea:	b084      	sub	sp, #16
 80104ec:	af00      	add	r7, sp, #0

	uint16_t angle_raw = 0;
 80104ee:	2300      	movs	r3, #0
 80104f0:	81fb      	strh	r3, [r7, #14]
	float _theta;
	float _theta_re;

	// Reading RX Data from SPI Encoder
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 80104f2:	2201      	movs	r2, #1
 80104f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80104f8:	4891      	ldr	r0, [pc, #580]	; (8010740 <refreshEncoder+0x258>)
 80104fa:	f7fa fe29 	bl	800b150 <HAL_GPIO_WritePin>
	angle_raw = (spi2rxBuf[1] & 0x3f) << 8 | spi2rxBuf[0];
 80104fe:	4b91      	ldr	r3, [pc, #580]	; (8010744 <refreshEncoder+0x25c>)
 8010500:	785b      	ldrb	r3, [r3, #1]
 8010502:	b2db      	uxtb	r3, r3
 8010504:	021b      	lsls	r3, r3, #8
 8010506:	b21b      	sxth	r3, r3
 8010508:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 801050c:	b21a      	sxth	r2, r3
 801050e:	4b8d      	ldr	r3, [pc, #564]	; (8010744 <refreshEncoder+0x25c>)
 8010510:	781b      	ldrb	r3, [r3, #0]
 8010512:	b2db      	uxtb	r3, r3
 8010514:	b21b      	sxth	r3, r3
 8010516:	4313      	orrs	r3, r2
 8010518:	b21b      	sxth	r3, r3
 801051a:	81fb      	strh	r3, [r7, #14]

	_theta = (float)angle_raw / (float)ENCODER_RESOL * 2.0f * M_PI + theta_offset;
 801051c:	89fb      	ldrh	r3, [r7, #14]
 801051e:	ee07 3a90 	vmov	s15, r3
 8010522:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8010526:	eddf 6a88 	vldr	s13, [pc, #544]	; 8010748 <refreshEncoder+0x260>
 801052a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801052e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8010532:	ee17 0a90 	vmov	r0, s15
 8010536:	f7f7 ff37 	bl	80083a8 <__aeabi_f2d>
 801053a:	a37d      	add	r3, pc, #500	; (adr r3, 8010730 <refreshEncoder+0x248>)
 801053c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010540:	f7f7 ff8a 	bl	8008458 <__aeabi_dmul>
 8010544:	4603      	mov	r3, r0
 8010546:	460c      	mov	r4, r1
 8010548:	4625      	mov	r5, r4
 801054a:	461c      	mov	r4, r3
 801054c:	4b7f      	ldr	r3, [pc, #508]	; (801074c <refreshEncoder+0x264>)
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	4618      	mov	r0, r3
 8010552:	f7f7 ff29 	bl	80083a8 <__aeabi_f2d>
 8010556:	4602      	mov	r2, r0
 8010558:	460b      	mov	r3, r1
 801055a:	4620      	mov	r0, r4
 801055c:	4629      	mov	r1, r5
 801055e:	f7f7 fdc5 	bl	80080ec <__adddf3>
 8010562:	4603      	mov	r3, r0
 8010564:	460c      	mov	r4, r1
 8010566:	4618      	mov	r0, r3
 8010568:	4621      	mov	r1, r4
 801056a:	f7f8 fa37 	bl	80089dc <__aeabi_d2f>
 801056e:	4603      	mov	r3, r0
 8010570:	60bb      	str	r3, [r7, #8]

	if(_theta < 0.0f)			theta = _theta + 2 * M_PI;
 8010572:	edd7 7a02 	vldr	s15, [r7, #8]
 8010576:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801057a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801057e:	d511      	bpl.n	80105a4 <refreshEncoder+0xbc>
 8010580:	68b8      	ldr	r0, [r7, #8]
 8010582:	f7f7 ff11 	bl	80083a8 <__aeabi_f2d>
 8010586:	a36c      	add	r3, pc, #432	; (adr r3, 8010738 <refreshEncoder+0x250>)
 8010588:	e9d3 2300 	ldrd	r2, r3, [r3]
 801058c:	f7f7 fdae 	bl	80080ec <__adddf3>
 8010590:	4603      	mov	r3, r0
 8010592:	460c      	mov	r4, r1
 8010594:	4618      	mov	r0, r3
 8010596:	4621      	mov	r1, r4
 8010598:	f7f8 fa20 	bl	80089dc <__aeabi_d2f>
 801059c:	4602      	mov	r2, r0
 801059e:	4b6c      	ldr	r3, [pc, #432]	; (8010750 <refreshEncoder+0x268>)
 80105a0:	601a      	str	r2, [r3, #0]
 80105a2:	e01f      	b.n	80105e4 <refreshEncoder+0xfc>
	else if(_theta >= 2 * M_PI)	theta = _theta - 2 * M_PI;
 80105a4:	68b8      	ldr	r0, [r7, #8]
 80105a6:	f7f7 feff 	bl	80083a8 <__aeabi_f2d>
 80105aa:	a363      	add	r3, pc, #396	; (adr r3, 8010738 <refreshEncoder+0x250>)
 80105ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105b0:	f7f8 f9d8 	bl	8008964 <__aeabi_dcmpge>
 80105b4:	4603      	mov	r3, r0
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d011      	beq.n	80105de <refreshEncoder+0xf6>
 80105ba:	68b8      	ldr	r0, [r7, #8]
 80105bc:	f7f7 fef4 	bl	80083a8 <__aeabi_f2d>
 80105c0:	a35d      	add	r3, pc, #372	; (adr r3, 8010738 <refreshEncoder+0x250>)
 80105c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105c6:	f7f7 fd8f 	bl	80080e8 <__aeabi_dsub>
 80105ca:	4603      	mov	r3, r0
 80105cc:	460c      	mov	r4, r1
 80105ce:	4618      	mov	r0, r3
 80105d0:	4621      	mov	r1, r4
 80105d2:	f7f8 fa03 	bl	80089dc <__aeabi_d2f>
 80105d6:	4602      	mov	r2, r0
 80105d8:	4b5d      	ldr	r3, [pc, #372]	; (8010750 <refreshEncoder+0x268>)
 80105da:	601a      	str	r2, [r3, #0]
 80105dc:	e002      	b.n	80105e4 <refreshEncoder+0xfc>
	else						theta = _theta;
 80105de:	4a5c      	ldr	r2, [pc, #368]	; (8010750 <refreshEncoder+0x268>)
 80105e0:	68bb      	ldr	r3, [r7, #8]
 80105e2:	6013      	str	r3, [r2, #0]

	_theta_re = fmodf((float)angle_raw / (float)ENCODER_RESOL * 2.0f * M_PI * POLES / 2, 2.0f * M_PI) + theta_re_offset;
 80105e4:	89fb      	ldrh	r3, [r7, #14]
 80105e6:	ee07 3a90 	vmov	s15, r3
 80105ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80105ee:	eddf 6a56 	vldr	s13, [pc, #344]	; 8010748 <refreshEncoder+0x260>
 80105f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80105f6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80105fa:	ee17 0a90 	vmov	r0, s15
 80105fe:	f7f7 fed3 	bl	80083a8 <__aeabi_f2d>
 8010602:	a34b      	add	r3, pc, #300	; (adr r3, 8010730 <refreshEncoder+0x248>)
 8010604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010608:	f7f7 ff26 	bl	8008458 <__aeabi_dmul>
 801060c:	4603      	mov	r3, r0
 801060e:	460c      	mov	r4, r1
 8010610:	4618      	mov	r0, r3
 8010612:	4621      	mov	r1, r4
 8010614:	f04f 0200 	mov.w	r2, #0
 8010618:	4b4e      	ldr	r3, [pc, #312]	; (8010754 <refreshEncoder+0x26c>)
 801061a:	f7f7 ff1d 	bl	8008458 <__aeabi_dmul>
 801061e:	4603      	mov	r3, r0
 8010620:	460c      	mov	r4, r1
 8010622:	4618      	mov	r0, r3
 8010624:	4621      	mov	r1, r4
 8010626:	f04f 0200 	mov.w	r2, #0
 801062a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801062e:	f7f8 f83d 	bl	80086ac <__aeabi_ddiv>
 8010632:	4603      	mov	r3, r0
 8010634:	460c      	mov	r4, r1
 8010636:	4618      	mov	r0, r3
 8010638:	4621      	mov	r1, r4
 801063a:	f7f8 f9cf 	bl	80089dc <__aeabi_d2f>
 801063e:	4603      	mov	r3, r0
 8010640:	eddf 0a45 	vldr	s1, [pc, #276]	; 8010758 <refreshEncoder+0x270>
 8010644:	ee00 3a10 	vmov	s0, r3
 8010648:	f001 fc26 	bl	8011e98 <fmodf>
 801064c:	eeb0 7a40 	vmov.f32	s14, s0
 8010650:	4b42      	ldr	r3, [pc, #264]	; (801075c <refreshEncoder+0x274>)
 8010652:	edd3 7a00 	vldr	s15, [r3]
 8010656:	ee77 7a27 	vadd.f32	s15, s14, s15
 801065a:	edc7 7a01 	vstr	s15, [r7, #4]

	if(_theta_re < 0.0f)			theta_re = _theta_re + 2 * M_PI;
 801065e:	edd7 7a01 	vldr	s15, [r7, #4]
 8010662:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801066a:	d511      	bpl.n	8010690 <refreshEncoder+0x1a8>
 801066c:	6878      	ldr	r0, [r7, #4]
 801066e:	f7f7 fe9b 	bl	80083a8 <__aeabi_f2d>
 8010672:	a331      	add	r3, pc, #196	; (adr r3, 8010738 <refreshEncoder+0x250>)
 8010674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010678:	f7f7 fd38 	bl	80080ec <__adddf3>
 801067c:	4603      	mov	r3, r0
 801067e:	460c      	mov	r4, r1
 8010680:	4618      	mov	r0, r3
 8010682:	4621      	mov	r1, r4
 8010684:	f7f8 f9aa 	bl	80089dc <__aeabi_d2f>
 8010688:	4602      	mov	r2, r0
 801068a:	4b35      	ldr	r3, [pc, #212]	; (8010760 <refreshEncoder+0x278>)
 801068c:	601a      	str	r2, [r3, #0]
 801068e:	e01f      	b.n	80106d0 <refreshEncoder+0x1e8>
	else if(_theta_re >= 2 * M_PI)	theta_re = _theta_re - 2 * M_PI;
 8010690:	6878      	ldr	r0, [r7, #4]
 8010692:	f7f7 fe89 	bl	80083a8 <__aeabi_f2d>
 8010696:	a328      	add	r3, pc, #160	; (adr r3, 8010738 <refreshEncoder+0x250>)
 8010698:	e9d3 2300 	ldrd	r2, r3, [r3]
 801069c:	f7f8 f962 	bl	8008964 <__aeabi_dcmpge>
 80106a0:	4603      	mov	r3, r0
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d011      	beq.n	80106ca <refreshEncoder+0x1e2>
 80106a6:	6878      	ldr	r0, [r7, #4]
 80106a8:	f7f7 fe7e 	bl	80083a8 <__aeabi_f2d>
 80106ac:	a322      	add	r3, pc, #136	; (adr r3, 8010738 <refreshEncoder+0x250>)
 80106ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106b2:	f7f7 fd19 	bl	80080e8 <__aeabi_dsub>
 80106b6:	4603      	mov	r3, r0
 80106b8:	460c      	mov	r4, r1
 80106ba:	4618      	mov	r0, r3
 80106bc:	4621      	mov	r1, r4
 80106be:	f7f8 f98d 	bl	80089dc <__aeabi_d2f>
 80106c2:	4602      	mov	r2, r0
 80106c4:	4b26      	ldr	r3, [pc, #152]	; (8010760 <refreshEncoder+0x278>)
 80106c6:	601a      	str	r2, [r3, #0]
 80106c8:	e002      	b.n	80106d0 <refreshEncoder+0x1e8>
	else							theta_re = _theta_re;
 80106ca:	4a25      	ldr	r2, [pc, #148]	; (8010760 <refreshEncoder+0x278>)
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	6013      	str	r3, [r2, #0]

	cos_theta_re = sin_table2[(int)((theta_re * 0.3183f + 0.5f) * 5000.0f)];
 80106d0:	4b23      	ldr	r3, [pc, #140]	; (8010760 <refreshEncoder+0x278>)
 80106d2:	edd3 7a00 	vldr	s15, [r3]
 80106d6:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8010764 <refreshEncoder+0x27c>
 80106da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80106de:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80106e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80106e6:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8010768 <refreshEncoder+0x280>
 80106ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80106ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80106f2:	ee17 3a90 	vmov	r3, s15
 80106f6:	4a1d      	ldr	r2, [pc, #116]	; (801076c <refreshEncoder+0x284>)
 80106f8:	009b      	lsls	r3, r3, #2
 80106fa:	4413      	add	r3, r2
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	4a1c      	ldr	r2, [pc, #112]	; (8010770 <refreshEncoder+0x288>)
 8010700:	6013      	str	r3, [r2, #0]
	sin_theta_re = sin_table2[(int)(theta_re * 1591.54943f)];
 8010702:	4b17      	ldr	r3, [pc, #92]	; (8010760 <refreshEncoder+0x278>)
 8010704:	edd3 7a00 	vldr	s15, [r3]
 8010708:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8010774 <refreshEncoder+0x28c>
 801070c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010710:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010714:	ee17 3a90 	vmov	r3, s15
 8010718:	4a14      	ldr	r2, [pc, #80]	; (801076c <refreshEncoder+0x284>)
 801071a:	009b      	lsls	r3, r3, #2
 801071c:	4413      	add	r3, r2
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	4a15      	ldr	r2, [pc, #84]	; (8010778 <refreshEncoder+0x290>)
 8010722:	6013      	str	r3, [r2, #0]


	return 0;
 8010724:	2300      	movs	r3, #0

}
 8010726:	4618      	mov	r0, r3
 8010728:	3710      	adds	r7, #16
 801072a:	46bd      	mov	sp, r7
 801072c:	bdb0      	pop	{r4, r5, r7, pc}
 801072e:	bf00      	nop
 8010730:	54442d18 	.word	0x54442d18
 8010734:	400921fb 	.word	0x400921fb
 8010738:	54442d18 	.word	0x54442d18
 801073c:	401921fb 	.word	0x401921fb
 8010740:	40020400 	.word	0x40020400
 8010744:	200041cc 	.word	0x200041cc
 8010748:	46800000 	.word	0x46800000
 801074c:	200041d0 	.word	0x200041d0
 8010750:	200041d8 	.word	0x200041d8
 8010754:	40360000 	.word	0x40360000
 8010758:	40c90fdb 	.word	0x40c90fdb
 801075c:	200041d4 	.word	0x200041d4
 8010760:	200041dc 	.word	0x200041dc
 8010764:	3ea2f838 	.word	0x3ea2f838
 8010768:	459c4000 	.word	0x459c4000
 801076c:	08013148 	.word	0x08013148
 8010770:	20000034 	.word	0x20000034
 8010774:	44c6f195 	.word	0x44c6f195
 8010778:	200041e0 	.word	0x200041e0

0801077c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 801077c:	b580      	push	{r7, lr}
 801077e:	b082      	sub	sp, #8
 8010780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010782:	2300      	movs	r3, #0
 8010784:	607b      	str	r3, [r7, #4]
 8010786:	4b10      	ldr	r3, [pc, #64]	; (80107c8 <HAL_MspInit+0x4c>)
 8010788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801078a:	4a0f      	ldr	r2, [pc, #60]	; (80107c8 <HAL_MspInit+0x4c>)
 801078c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010790:	6453      	str	r3, [r2, #68]	; 0x44
 8010792:	4b0d      	ldr	r3, [pc, #52]	; (80107c8 <HAL_MspInit+0x4c>)
 8010794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010796:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801079a:	607b      	str	r3, [r7, #4]
 801079c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 801079e:	2300      	movs	r3, #0
 80107a0:	603b      	str	r3, [r7, #0]
 80107a2:	4b09      	ldr	r3, [pc, #36]	; (80107c8 <HAL_MspInit+0x4c>)
 80107a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107a6:	4a08      	ldr	r2, [pc, #32]	; (80107c8 <HAL_MspInit+0x4c>)
 80107a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80107ac:	6413      	str	r3, [r2, #64]	; 0x40
 80107ae:	4b06      	ldr	r3, [pc, #24]	; (80107c8 <HAL_MspInit+0x4c>)
 80107b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80107b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80107b6:	603b      	str	r3, [r7, #0]
 80107b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80107ba:	2007      	movs	r0, #7
 80107bc:	f7f9 fc60 	bl	800a080 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80107c0:	bf00      	nop
 80107c2:	3708      	adds	r7, #8
 80107c4:	46bd      	mov	sp, r7
 80107c6:	bd80      	pop	{r7, pc}
 80107c8:	40023800 	.word	0x40023800

080107cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80107cc:	b480      	push	{r7}
 80107ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80107d0:	bf00      	nop
 80107d2:	46bd      	mov	sp, r7
 80107d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d8:	4770      	bx	lr

080107da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80107da:	b480      	push	{r7}
 80107dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80107de:	e7fe      	b.n	80107de <HardFault_Handler+0x4>

080107e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80107e0:	b480      	push	{r7}
 80107e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80107e4:	e7fe      	b.n	80107e4 <MemManage_Handler+0x4>

080107e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80107e6:	b480      	push	{r7}
 80107e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80107ea:	e7fe      	b.n	80107ea <BusFault_Handler+0x4>

080107ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80107ec:	b480      	push	{r7}
 80107ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80107f0:	e7fe      	b.n	80107f0 <UsageFault_Handler+0x4>

080107f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80107f2:	b480      	push	{r7}
 80107f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80107f6:	bf00      	nop
 80107f8:	46bd      	mov	sp, r7
 80107fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107fe:	4770      	bx	lr

08010800 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8010800:	b480      	push	{r7}
 8010802:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8010804:	bf00      	nop
 8010806:	46bd      	mov	sp, r7
 8010808:	f85d 7b04 	ldr.w	r7, [sp], #4
 801080c:	4770      	bx	lr

0801080e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 801080e:	b480      	push	{r7}
 8010810:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8010812:	bf00      	nop
 8010814:	46bd      	mov	sp, r7
 8010816:	f85d 7b04 	ldr.w	r7, [sp], #4
 801081a:	4770      	bx	lr

0801081c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 801081c:	b580      	push	{r7, lr}
 801081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8010820:	f7f8 fafe 	bl	8008e20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8010824:	bf00      	nop
 8010826:	bd80      	pop	{r7, pc}

08010828 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8010828:	b580      	push	{r7, lr}
 801082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 801082c:	4802      	ldr	r0, [pc, #8]	; (8010838 <CAN1_TX_IRQHandler+0x10>)
 801082e:	f7f9 f94b 	bl	8009ac8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8010832:	bf00      	nop
 8010834:	bd80      	pop	{r7, pc}
 8010836:	bf00      	nop
 8010838:	20004480 	.word	0x20004480

0801083c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 801083c:	b580      	push	{r7, lr}
 801083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8010840:	4802      	ldr	r0, [pc, #8]	; (801084c <CAN1_RX0_IRQHandler+0x10>)
 8010842:	f7f9 f941 	bl	8009ac8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8010846:	bf00      	nop
 8010848:	bd80      	pop	{r7, pc}
 801084a:	bf00      	nop
 801084c:	20004480 	.word	0x20004480

08010850 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8010850:	b580      	push	{r7, lr}
 8010852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8010854:	4802      	ldr	r0, [pc, #8]	; (8010860 <SPI2_IRQHandler+0x10>)
 8010856:	f7fb fab7 	bl	800bdc8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 801085a:	bf00      	nop
 801085c:	bd80      	pop	{r7, pc}
 801085e:	bf00      	nop
 8010860:	200044a8 	.word	0x200044a8

08010864 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8010864:	b580      	push	{r7, lr}
 8010866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8010868:	4802      	ldr	r0, [pc, #8]	; (8010874 <USART2_IRQHandler+0x10>)
 801086a:	f7fc fdd5 	bl	800d418 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 801086e:	bf00      	nop
 8010870:	bd80      	pop	{r7, pc}
 8010872:	bf00      	nop
 8010874:	2000459c 	.word	0x2000459c

08010878 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8010878:	b580      	push	{r7, lr}
 801087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 801087c:	4802      	ldr	r0, [pc, #8]	; (8010888 <TIM8_UP_TIM13_IRQHandler+0x10>)
 801087e:	f7fb fe9b 	bl	800c5b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8010882:	bf00      	nop
 8010884:	bd80      	pop	{r7, pc}
 8010886:	bf00      	nop
 8010888:	2000455c 	.word	0x2000455c

0801088c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 801088c:	b580      	push	{r7, lr}
 801088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8010890:	4802      	ldr	r0, [pc, #8]	; (801089c <DMA2_Stream0_IRQHandler+0x10>)
 8010892:	f7f9 fd67 	bl	800a364 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8010896:	bf00      	nop
 8010898:	bd80      	pop	{r7, pc}
 801089a:	bf00      	nop
 801089c:	20004374 	.word	0x20004374

080108a0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80108a0:	b580      	push	{r7, lr}
 80108a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80108a4:	4802      	ldr	r0, [pc, #8]	; (80108b0 <DMA2_Stream1_IRQHandler+0x10>)
 80108a6:	f7f9 fd5d 	bl	800a364 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80108aa:	bf00      	nop
 80108ac:	bd80      	pop	{r7, pc}
 80108ae:	bf00      	nop
 80108b0:	20004284 	.word	0x20004284

080108b4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80108b4:	b580      	push	{r7, lr}
 80108b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80108b8:	4802      	ldr	r0, [pc, #8]	; (80108c4 <DMA2_Stream2_IRQHandler+0x10>)
 80108ba:	f7f9 fd53 	bl	800a364 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80108be:	bf00      	nop
 80108c0:	bd80      	pop	{r7, pc}
 80108c2:	bf00      	nop
 80108c4:	200043d4 	.word	0x200043d4

080108c8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80108c8:	b580      	push	{r7, lr}
 80108ca:	b086      	sub	sp, #24
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	60f8      	str	r0, [r7, #12]
 80108d0:	60b9      	str	r1, [r7, #8]
 80108d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80108d4:	2300      	movs	r3, #0
 80108d6:	617b      	str	r3, [r7, #20]
 80108d8:	e00a      	b.n	80108f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80108da:	f3af 8000 	nop.w
 80108de:	4601      	mov	r1, r0
 80108e0:	68bb      	ldr	r3, [r7, #8]
 80108e2:	1c5a      	adds	r2, r3, #1
 80108e4:	60ba      	str	r2, [r7, #8]
 80108e6:	b2ca      	uxtb	r2, r1
 80108e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80108ea:	697b      	ldr	r3, [r7, #20]
 80108ec:	3301      	adds	r3, #1
 80108ee:	617b      	str	r3, [r7, #20]
 80108f0:	697a      	ldr	r2, [r7, #20]
 80108f2:	687b      	ldr	r3, [r7, #4]
 80108f4:	429a      	cmp	r2, r3
 80108f6:	dbf0      	blt.n	80108da <_read+0x12>
	}

return len;
 80108f8:	687b      	ldr	r3, [r7, #4]
}
 80108fa:	4618      	mov	r0, r3
 80108fc:	3718      	adds	r7, #24
 80108fe:	46bd      	mov	sp, r7
 8010900:	bd80      	pop	{r7, pc}

08010902 <_close>:
	}
	return len;
}

int _close(int file)
{
 8010902:	b480      	push	{r7}
 8010904:	b083      	sub	sp, #12
 8010906:	af00      	add	r7, sp, #0
 8010908:	6078      	str	r0, [r7, #4]
	return -1;
 801090a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801090e:	4618      	mov	r0, r3
 8010910:	370c      	adds	r7, #12
 8010912:	46bd      	mov	sp, r7
 8010914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010918:	4770      	bx	lr

0801091a <_fstat>:


int _fstat(int file, struct stat *st)
{
 801091a:	b480      	push	{r7}
 801091c:	b083      	sub	sp, #12
 801091e:	af00      	add	r7, sp, #0
 8010920:	6078      	str	r0, [r7, #4]
 8010922:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8010924:	683b      	ldr	r3, [r7, #0]
 8010926:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801092a:	605a      	str	r2, [r3, #4]
	return 0;
 801092c:	2300      	movs	r3, #0
}
 801092e:	4618      	mov	r0, r3
 8010930:	370c      	adds	r7, #12
 8010932:	46bd      	mov	sp, r7
 8010934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010938:	4770      	bx	lr

0801093a <_isatty>:

int _isatty(int file)
{
 801093a:	b480      	push	{r7}
 801093c:	b083      	sub	sp, #12
 801093e:	af00      	add	r7, sp, #0
 8010940:	6078      	str	r0, [r7, #4]
	return 1;
 8010942:	2301      	movs	r3, #1
}
 8010944:	4618      	mov	r0, r3
 8010946:	370c      	adds	r7, #12
 8010948:	46bd      	mov	sp, r7
 801094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801094e:	4770      	bx	lr

08010950 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8010950:	b480      	push	{r7}
 8010952:	b085      	sub	sp, #20
 8010954:	af00      	add	r7, sp, #0
 8010956:	60f8      	str	r0, [r7, #12]
 8010958:	60b9      	str	r1, [r7, #8]
 801095a:	607a      	str	r2, [r7, #4]
	return 0;
 801095c:	2300      	movs	r3, #0
}
 801095e:	4618      	mov	r0, r3
 8010960:	3714      	adds	r7, #20
 8010962:	46bd      	mov	sp, r7
 8010964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010968:	4770      	bx	lr
	...

0801096c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 801096c:	b580      	push	{r7, lr}
 801096e:	b084      	sub	sp, #16
 8010970:	af00      	add	r7, sp, #0
 8010972:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8010974:	4b11      	ldr	r3, [pc, #68]	; (80109bc <_sbrk+0x50>)
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	2b00      	cmp	r3, #0
 801097a:	d102      	bne.n	8010982 <_sbrk+0x16>
		heap_end = &end;
 801097c:	4b0f      	ldr	r3, [pc, #60]	; (80109bc <_sbrk+0x50>)
 801097e:	4a10      	ldr	r2, [pc, #64]	; (80109c0 <_sbrk+0x54>)
 8010980:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8010982:	4b0e      	ldr	r3, [pc, #56]	; (80109bc <_sbrk+0x50>)
 8010984:	681b      	ldr	r3, [r3, #0]
 8010986:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8010988:	4b0c      	ldr	r3, [pc, #48]	; (80109bc <_sbrk+0x50>)
 801098a:	681a      	ldr	r2, [r3, #0]
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	4413      	add	r3, r2
 8010990:	466a      	mov	r2, sp
 8010992:	4293      	cmp	r3, r2
 8010994:	d907      	bls.n	80109a6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8010996:	f000 faaf 	bl	8010ef8 <__errno>
 801099a:	4602      	mov	r2, r0
 801099c:	230c      	movs	r3, #12
 801099e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80109a0:	f04f 33ff 	mov.w	r3, #4294967295
 80109a4:	e006      	b.n	80109b4 <_sbrk+0x48>
	}

	heap_end += incr;
 80109a6:	4b05      	ldr	r3, [pc, #20]	; (80109bc <_sbrk+0x50>)
 80109a8:	681a      	ldr	r2, [r3, #0]
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	4413      	add	r3, r2
 80109ae:	4a03      	ldr	r2, [pc, #12]	; (80109bc <_sbrk+0x50>)
 80109b0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80109b2:	68fb      	ldr	r3, [r7, #12]
}
 80109b4:	4618      	mov	r0, r3
 80109b6:	3710      	adds	r7, #16
 80109b8:	46bd      	mov	sp, r7
 80109ba:	bd80      	pop	{r7, pc}
 80109bc:	200041e8 	.word	0x200041e8
 80109c0:	200045e0 	.word	0x200045e0

080109c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80109c4:	b480      	push	{r7}
 80109c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80109c8:	4b16      	ldr	r3, [pc, #88]	; (8010a24 <SystemInit+0x60>)
 80109ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80109ce:	4a15      	ldr	r2, [pc, #84]	; (8010a24 <SystemInit+0x60>)
 80109d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80109d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80109d8:	4b13      	ldr	r3, [pc, #76]	; (8010a28 <SystemInit+0x64>)
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	4a12      	ldr	r2, [pc, #72]	; (8010a28 <SystemInit+0x64>)
 80109de:	f043 0301 	orr.w	r3, r3, #1
 80109e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80109e4:	4b10      	ldr	r3, [pc, #64]	; (8010a28 <SystemInit+0x64>)
 80109e6:	2200      	movs	r2, #0
 80109e8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80109ea:	4b0f      	ldr	r3, [pc, #60]	; (8010a28 <SystemInit+0x64>)
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	4a0e      	ldr	r2, [pc, #56]	; (8010a28 <SystemInit+0x64>)
 80109f0:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80109f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80109f8:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80109fa:	4b0b      	ldr	r3, [pc, #44]	; (8010a28 <SystemInit+0x64>)
 80109fc:	4a0b      	ldr	r2, [pc, #44]	; (8010a2c <SystemInit+0x68>)
 80109fe:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8010a00:	4b09      	ldr	r3, [pc, #36]	; (8010a28 <SystemInit+0x64>)
 8010a02:	681b      	ldr	r3, [r3, #0]
 8010a04:	4a08      	ldr	r2, [pc, #32]	; (8010a28 <SystemInit+0x64>)
 8010a06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8010a0a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8010a0c:	4b06      	ldr	r3, [pc, #24]	; (8010a28 <SystemInit+0x64>)
 8010a0e:	2200      	movs	r2, #0
 8010a10:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8010a12:	4b04      	ldr	r3, [pc, #16]	; (8010a24 <SystemInit+0x60>)
 8010a14:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8010a18:	609a      	str	r2, [r3, #8]
#endif
}
 8010a1a:	bf00      	nop
 8010a1c:	46bd      	mov	sp, r7
 8010a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a22:	4770      	bx	lr
 8010a24:	e000ed00 	.word	0xe000ed00
 8010a28:	40023800 	.word	0x40023800
 8010a2c:	24003010 	.word	0x24003010

08010a30 <MX_TIM8_Init>:

TIM_HandleTypeDef htim8;

/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8010a30:	b580      	push	{r7, lr}
 8010a32:	b096      	sub	sp, #88	; 0x58
 8010a34:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8010a36:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010a3a:	2200      	movs	r2, #0
 8010a3c:	601a      	str	r2, [r3, #0]
 8010a3e:	605a      	str	r2, [r3, #4]
 8010a40:	609a      	str	r2, [r3, #8]
 8010a42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8010a44:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010a48:	2200      	movs	r2, #0
 8010a4a:	601a      	str	r2, [r3, #0]
 8010a4c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8010a4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010a52:	2200      	movs	r2, #0
 8010a54:	601a      	str	r2, [r3, #0]
 8010a56:	605a      	str	r2, [r3, #4]
 8010a58:	609a      	str	r2, [r3, #8]
 8010a5a:	60da      	str	r2, [r3, #12]
 8010a5c:	611a      	str	r2, [r3, #16]
 8010a5e:	615a      	str	r2, [r3, #20]
 8010a60:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8010a62:	1d3b      	adds	r3, r7, #4
 8010a64:	2220      	movs	r2, #32
 8010a66:	2100      	movs	r1, #0
 8010a68:	4618      	mov	r0, r3
 8010a6a:	f000 fa7a 	bl	8010f62 <memset>

  htim8.Instance = TIM8;
 8010a6e:	4b4a      	ldr	r3, [pc, #296]	; (8010b98 <MX_TIM8_Init+0x168>)
 8010a70:	4a4a      	ldr	r2, [pc, #296]	; (8010b9c <MX_TIM8_Init+0x16c>)
 8010a72:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8010a74:	4b48      	ldr	r3, [pc, #288]	; (8010b98 <MX_TIM8_Init+0x168>)
 8010a76:	2200      	movs	r2, #0
 8010a78:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8010a7a:	4b47      	ldr	r3, [pc, #284]	; (8010b98 <MX_TIM8_Init+0x168>)
 8010a7c:	2220      	movs	r2, #32
 8010a7e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 8000;
 8010a80:	4b45      	ldr	r3, [pc, #276]	; (8010b98 <MX_TIM8_Init+0x168>)
 8010a82:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8010a86:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8010a88:	4b43      	ldr	r3, [pc, #268]	; (8010b98 <MX_TIM8_Init+0x168>)
 8010a8a:	2200      	movs	r2, #0
 8010a8c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8010a8e:	4b42      	ldr	r3, [pc, #264]	; (8010b98 <MX_TIM8_Init+0x168>)
 8010a90:	2200      	movs	r2, #0
 8010a92:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8010a94:	4b40      	ldr	r3, [pc, #256]	; (8010b98 <MX_TIM8_Init+0x168>)
 8010a96:	2280      	movs	r2, #128	; 0x80
 8010a98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8010a9a:	483f      	ldr	r0, [pc, #252]	; (8010b98 <MX_TIM8_Init+0x168>)
 8010a9c:	f7fb fca8 	bl	800c3f0 <HAL_TIM_Base_Init>
 8010aa0:	4603      	mov	r3, r0
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d001      	beq.n	8010aaa <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8010aa6:	f7fe fe5b 	bl	800f760 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8010aaa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010aae:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8010ab0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010ab4:	4619      	mov	r1, r3
 8010ab6:	4838      	ldr	r0, [pc, #224]	; (8010b98 <MX_TIM8_Init+0x168>)
 8010ab8:	f7fb ff4c 	bl	800c954 <HAL_TIM_ConfigClockSource>
 8010abc:	4603      	mov	r3, r0
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d001      	beq.n	8010ac6 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8010ac2:	f7fe fe4d 	bl	800f760 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8010ac6:	4834      	ldr	r0, [pc, #208]	; (8010b98 <MX_TIM8_Init+0x168>)
 8010ac8:	f7fb fcbd 	bl	800c446 <HAL_TIM_PWM_Init>
 8010acc:	4603      	mov	r3, r0
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d001      	beq.n	8010ad6 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8010ad2:	f7fe fe45 	bl	800f760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8010ad6:	2320      	movs	r3, #32
 8010ad8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8010ada:	2300      	movs	r3, #0
 8010adc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8010ade:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010ae2:	4619      	mov	r1, r3
 8010ae4:	482c      	ldr	r0, [pc, #176]	; (8010b98 <MX_TIM8_Init+0x168>)
 8010ae6:	f7fc fb79 	bl	800d1dc <HAL_TIMEx_MasterConfigSynchronization>
 8010aea:	4603      	mov	r3, r0
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d001      	beq.n	8010af4 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8010af0:	f7fe fe36 	bl	800f760 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8010af4:	2360      	movs	r3, #96	; 0x60
 8010af6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 4000;
 8010af8:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8010afc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8010afe:	2300      	movs	r3, #0
 8010b00:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8010b02:	2300      	movs	r3, #0
 8010b04:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8010b06:	2300      	movs	r3, #0
 8010b08:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8010b0a:	2300      	movs	r3, #0
 8010b0c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8010b0e:	2300      	movs	r3, #0
 8010b10:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8010b12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010b16:	2200      	movs	r2, #0
 8010b18:	4619      	mov	r1, r3
 8010b1a:	481f      	ldr	r0, [pc, #124]	; (8010b98 <MX_TIM8_Init+0x168>)
 8010b1c:	f7fb fe54 	bl	800c7c8 <HAL_TIM_PWM_ConfigChannel>
 8010b20:	4603      	mov	r3, r0
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d001      	beq.n	8010b2a <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 8010b26:	f7fe fe1b 	bl	800f760 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8010b2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010b2e:	2204      	movs	r2, #4
 8010b30:	4619      	mov	r1, r3
 8010b32:	4819      	ldr	r0, [pc, #100]	; (8010b98 <MX_TIM8_Init+0x168>)
 8010b34:	f7fb fe48 	bl	800c7c8 <HAL_TIM_PWM_ConfigChannel>
 8010b38:	4603      	mov	r3, r0
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d001      	beq.n	8010b42 <MX_TIM8_Init+0x112>
  {
    Error_Handler();
 8010b3e:	f7fe fe0f 	bl	800f760 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8010b42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010b46:	2208      	movs	r2, #8
 8010b48:	4619      	mov	r1, r3
 8010b4a:	4813      	ldr	r0, [pc, #76]	; (8010b98 <MX_TIM8_Init+0x168>)
 8010b4c:	f7fb fe3c 	bl	800c7c8 <HAL_TIM_PWM_ConfigChannel>
 8010b50:	4603      	mov	r3, r0
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d001      	beq.n	8010b5a <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 8010b56:	f7fe fe03 	bl	800f760 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8010b5a:	2300      	movs	r3, #0
 8010b5c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8010b5e:	2300      	movs	r3, #0
 8010b60:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8010b62:	2300      	movs	r3, #0
 8010b64:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 40;
 8010b66:	2328      	movs	r3, #40	; 0x28
 8010b68:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8010b6a:	2300      	movs	r3, #0
 8010b6c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 8010b6e:	2300      	movs	r3, #0
 8010b70:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8010b72:	2300      	movs	r3, #0
 8010b74:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8010b76:	1d3b      	adds	r3, r7, #4
 8010b78:	4619      	mov	r1, r3
 8010b7a:	4807      	ldr	r0, [pc, #28]	; (8010b98 <MX_TIM8_Init+0x168>)
 8010b7c:	f7fc fb73 	bl	800d266 <HAL_TIMEx_ConfigBreakDeadTime>
 8010b80:	4603      	mov	r3, r0
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d001      	beq.n	8010b8a <MX_TIM8_Init+0x15a>
  {
    Error_Handler();
 8010b86:	f7fe fdeb 	bl	800f760 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8010b8a:	4803      	ldr	r0, [pc, #12]	; (8010b98 <MX_TIM8_Init+0x168>)
 8010b8c:	f000 f830 	bl	8010bf0 <HAL_TIM_MspPostInit>

}
 8010b90:	bf00      	nop
 8010b92:	3758      	adds	r7, #88	; 0x58
 8010b94:	46bd      	mov	sp, r7
 8010b96:	bd80      	pop	{r7, pc}
 8010b98:	2000455c 	.word	0x2000455c
 8010b9c:	40010400 	.word	0x40010400

08010ba0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8010ba0:	b580      	push	{r7, lr}
 8010ba2:	b084      	sub	sp, #16
 8010ba4:	af00      	add	r7, sp, #0
 8010ba6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	4a0e      	ldr	r2, [pc, #56]	; (8010be8 <HAL_TIM_Base_MspInit+0x48>)
 8010bae:	4293      	cmp	r3, r2
 8010bb0:	d115      	bne.n	8010bde <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	60fb      	str	r3, [r7, #12]
 8010bb6:	4b0d      	ldr	r3, [pc, #52]	; (8010bec <HAL_TIM_Base_MspInit+0x4c>)
 8010bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010bba:	4a0c      	ldr	r2, [pc, #48]	; (8010bec <HAL_TIM_Base_MspInit+0x4c>)
 8010bbc:	f043 0302 	orr.w	r3, r3, #2
 8010bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8010bc2:	4b0a      	ldr	r3, [pc, #40]	; (8010bec <HAL_TIM_Base_MspInit+0x4c>)
 8010bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010bc6:	f003 0302 	and.w	r3, r3, #2
 8010bca:	60fb      	str	r3, [r7, #12]
 8010bcc:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8010bce:	2200      	movs	r2, #0
 8010bd0:	2100      	movs	r1, #0
 8010bd2:	202c      	movs	r0, #44	; 0x2c
 8010bd4:	f7f9 fa5f 	bl	800a096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8010bd8:	202c      	movs	r0, #44	; 0x2c
 8010bda:	f7f9 fa78 	bl	800a0ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8010bde:	bf00      	nop
 8010be0:	3710      	adds	r7, #16
 8010be2:	46bd      	mov	sp, r7
 8010be4:	bd80      	pop	{r7, pc}
 8010be6:	bf00      	nop
 8010be8:	40010400 	.word	0x40010400
 8010bec:	40023800 	.word	0x40023800

08010bf0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8010bf0:	b580      	push	{r7, lr}
 8010bf2:	b08a      	sub	sp, #40	; 0x28
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010bf8:	f107 0314 	add.w	r3, r7, #20
 8010bfc:	2200      	movs	r2, #0
 8010bfe:	601a      	str	r2, [r3, #0]
 8010c00:	605a      	str	r2, [r3, #4]
 8010c02:	609a      	str	r2, [r3, #8]
 8010c04:	60da      	str	r2, [r3, #12]
 8010c06:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	681b      	ldr	r3, [r3, #0]
 8010c0c:	4a30      	ldr	r2, [pc, #192]	; (8010cd0 <HAL_TIM_MspPostInit+0xe0>)
 8010c0e:	4293      	cmp	r3, r2
 8010c10:	d15a      	bne.n	8010cc8 <HAL_TIM_MspPostInit+0xd8>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010c12:	2300      	movs	r3, #0
 8010c14:	613b      	str	r3, [r7, #16]
 8010c16:	4b2f      	ldr	r3, [pc, #188]	; (8010cd4 <HAL_TIM_MspPostInit+0xe4>)
 8010c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c1a:	4a2e      	ldr	r2, [pc, #184]	; (8010cd4 <HAL_TIM_MspPostInit+0xe4>)
 8010c1c:	f043 0301 	orr.w	r3, r3, #1
 8010c20:	6313      	str	r3, [r2, #48]	; 0x30
 8010c22:	4b2c      	ldr	r3, [pc, #176]	; (8010cd4 <HAL_TIM_MspPostInit+0xe4>)
 8010c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c26:	f003 0301 	and.w	r3, r3, #1
 8010c2a:	613b      	str	r3, [r7, #16]
 8010c2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010c2e:	2300      	movs	r3, #0
 8010c30:	60fb      	str	r3, [r7, #12]
 8010c32:	4b28      	ldr	r3, [pc, #160]	; (8010cd4 <HAL_TIM_MspPostInit+0xe4>)
 8010c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c36:	4a27      	ldr	r2, [pc, #156]	; (8010cd4 <HAL_TIM_MspPostInit+0xe4>)
 8010c38:	f043 0302 	orr.w	r3, r3, #2
 8010c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8010c3e:	4b25      	ldr	r3, [pc, #148]	; (8010cd4 <HAL_TIM_MspPostInit+0xe4>)
 8010c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c42:	f003 0302 	and.w	r3, r3, #2
 8010c46:	60fb      	str	r3, [r7, #12]
 8010c48:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	60bb      	str	r3, [r7, #8]
 8010c4e:	4b21      	ldr	r3, [pc, #132]	; (8010cd4 <HAL_TIM_MspPostInit+0xe4>)
 8010c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c52:	4a20      	ldr	r2, [pc, #128]	; (8010cd4 <HAL_TIM_MspPostInit+0xe4>)
 8010c54:	f043 0304 	orr.w	r3, r3, #4
 8010c58:	6313      	str	r3, [r2, #48]	; 0x30
 8010c5a:	4b1e      	ldr	r3, [pc, #120]	; (8010cd4 <HAL_TIM_MspPostInit+0xe4>)
 8010c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c5e:	f003 0304 	and.w	r3, r3, #4
 8010c62:	60bb      	str	r3, [r7, #8]
 8010c64:	68bb      	ldr	r3, [r7, #8]
    PB1     ------> TIM8_CH3N
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8010c66:	2380      	movs	r3, #128	; 0x80
 8010c68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010c6a:	2302      	movs	r3, #2
 8010c6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010c6e:	2300      	movs	r3, #0
 8010c70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010c72:	2300      	movs	r3, #0
 8010c74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8010c76:	2303      	movs	r3, #3
 8010c78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010c7a:	f107 0314 	add.w	r3, r7, #20
 8010c7e:	4619      	mov	r1, r3
 8010c80:	4815      	ldr	r0, [pc, #84]	; (8010cd8 <HAL_TIM_MspPostInit+0xe8>)
 8010c82:	f7fa f8bb 	bl	800adfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8010c86:	2303      	movs	r3, #3
 8010c88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010c8a:	2302      	movs	r3, #2
 8010c8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010c8e:	2300      	movs	r3, #0
 8010c90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010c92:	2300      	movs	r3, #0
 8010c94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8010c96:	2303      	movs	r3, #3
 8010c98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010c9a:	f107 0314 	add.w	r3, r7, #20
 8010c9e:	4619      	mov	r1, r3
 8010ca0:	480e      	ldr	r0, [pc, #56]	; (8010cdc <HAL_TIM_MspPostInit+0xec>)
 8010ca2:	f7fa f8ab 	bl	800adfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8010ca6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8010caa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010cac:	2302      	movs	r3, #2
 8010cae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010cb0:	2300      	movs	r3, #0
 8010cb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010cb4:	2300      	movs	r3, #0
 8010cb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8010cb8:	2303      	movs	r3, #3
 8010cba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010cbc:	f107 0314 	add.w	r3, r7, #20
 8010cc0:	4619      	mov	r1, r3
 8010cc2:	4807      	ldr	r0, [pc, #28]	; (8010ce0 <HAL_TIM_MspPostInit+0xf0>)
 8010cc4:	f7fa f89a 	bl	800adfc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8010cc8:	bf00      	nop
 8010cca:	3728      	adds	r7, #40	; 0x28
 8010ccc:	46bd      	mov	sp, r7
 8010cce:	bd80      	pop	{r7, pc}
 8010cd0:	40010400 	.word	0x40010400
 8010cd4:	40023800 	.word	0x40023800
 8010cd8:	40020000 	.word	0x40020000
 8010cdc:	40020400 	.word	0x40020400
 8010ce0:	40020800 	.word	0x40020800

08010ce4 <TIM_Init>:
/* USER CODE BEGIN 1 */



void TIM_Init()
{
 8010ce4:	b580      	push	{r7, lr}
 8010ce6:	af00      	add	r7, sp, #0
	  __HAL_TIM_DISABLE_IT(&htim8, TIM_IT_CC2);
	  __HAL_TIM_DISABLE_IT(&htim8, TIM_IT_CC3);
	  __HAL_TIM_DISABLE_IT(&htim8, TIM_IT_CC4);
	  __HAL_TIM_DISABLE_IT(&htim8, TIM_IT_COM);
	  __HAL_TIM_DISABLE_IT(&htim8, TIM_IT_BREAK);*/
	  __HAL_TIM_CLEAR_FLAG(&htim8, TIM_FLAG_UPDATE);
 8010ce8:	4b08      	ldr	r3, [pc, #32]	; (8010d0c <TIM_Init+0x28>)
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	f06f 0201 	mvn.w	r2, #1
 8010cf0:	611a      	str	r2, [r3, #16]
	  __HAL_TIM_ENABLE_IT(&htim8, TIM_IT_UPDATE);
 8010cf2:	4b06      	ldr	r3, [pc, #24]	; (8010d0c <TIM_Init+0x28>)
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	68da      	ldr	r2, [r3, #12]
 8010cf8:	4b04      	ldr	r3, [pc, #16]	; (8010d0c <TIM_Init+0x28>)
 8010cfa:	681b      	ldr	r3, [r3, #0]
 8010cfc:	f042 0201 	orr.w	r2, r2, #1
 8010d00:	60da      	str	r2, [r3, #12]


	  startPWM();
 8010d02:	f000 f805 	bl	8010d10 <startPWM>


}
 8010d06:	bf00      	nop
 8010d08:	bd80      	pop	{r7, pc}
 8010d0a:	bf00      	nop
 8010d0c:	2000455c 	.word	0x2000455c

08010d10 <startPWM>:



inline void startPWM()
{
 8010d10:	b580      	push	{r7, lr}
 8010d12:	af00      	add	r7, sp, #0


	// 3phase PWM Starting
	HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_1);
 8010d14:	2100      	movs	r1, #0
 8010d16:	480c      	ldr	r0, [pc, #48]	; (8010d48 <startPWM+0x38>)
 8010d18:	f7fb fbca 	bl	800c4b0 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_2);
 8010d1c:	2104      	movs	r1, #4
 8010d1e:	480a      	ldr	r0, [pc, #40]	; (8010d48 <startPWM+0x38>)
 8010d20:	f7fb fbc6 	bl	800c4b0 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_3);
 8010d24:	2108      	movs	r1, #8
 8010d26:	4808      	ldr	r0, [pc, #32]	; (8010d48 <startPWM+0x38>)
 8010d28:	f7fb fbc2 	bl	800c4b0 <HAL_TIM_PWM_Start_IT>

	HAL_TIMEx_PWMN_Start_IT(&htim8, TIM_CHANNEL_1);
 8010d2c:	2100      	movs	r1, #0
 8010d2e:	4806      	ldr	r0, [pc, #24]	; (8010d48 <startPWM+0x38>)
 8010d30:	f7fc f9ff 	bl	800d132 <HAL_TIMEx_PWMN_Start_IT>
	HAL_TIMEx_PWMN_Start_IT(&htim8, TIM_CHANNEL_2);
 8010d34:	2104      	movs	r1, #4
 8010d36:	4804      	ldr	r0, [pc, #16]	; (8010d48 <startPWM+0x38>)
 8010d38:	f7fc f9fb 	bl	800d132 <HAL_TIMEx_PWMN_Start_IT>
	HAL_TIMEx_PWMN_Start_IT(&htim8, TIM_CHANNEL_3);
 8010d3c:	2108      	movs	r1, #8
 8010d3e:	4802      	ldr	r0, [pc, #8]	; (8010d48 <startPWM+0x38>)
 8010d40:	f7fc f9f7 	bl	800d132 <HAL_TIMEx_PWMN_Start_IT>

}
 8010d44:	bf00      	nop
 8010d46:	bd80      	pop	{r7, pc}
 8010d48:	2000455c 	.word	0x2000455c

08010d4c <HAL_TIM_PeriodElapsedCallback>:
}



void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim)
{
 8010d4c:	b580      	push	{r7, lr}
 8010d4e:	b082      	sub	sp, #8
 8010d50:	af00      	add	r7, sp, #0
 8010d52:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM8)
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	4a07      	ldr	r2, [pc, #28]	; (8010d78 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8010d5a:	4293      	cmp	r3, r2
 8010d5c:	d108      	bne.n	8010d70 <HAL_TIM_PeriodElapsedCallback+0x24>
	{

		if(!__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	f003 0310 	and.w	r3, r3, #16
 8010d68:	2b10      	cmp	r3, #16
 8010d6a:	d001      	beq.n	8010d70 <HAL_TIM_PeriodElapsedCallback+0x24>
		{

			currentControl();
 8010d6c:	f7fc ffa8 	bl	800dcc0 <currentControl>
		}


	}

}
 8010d70:	bf00      	nop
 8010d72:	3708      	adds	r7, #8
 8010d74:	46bd      	mov	sp, r7
 8010d76:	bd80      	pop	{r7, pc}
 8010d78:	40010400 	.word	0x40010400

08010d7c <timeoutReset>:


inline void timeoutReset()
{
 8010d7c:	b580      	push	{r7, lr}
 8010d7e:	af00      	add	r7, sp, #0
	timeoutCount = 0;
 8010d80:	4b09      	ldr	r3, [pc, #36]	; (8010da8 <timeoutReset+0x2c>)
 8010d82:	2200      	movs	r2, #0
 8010d84:	601a      	str	r2, [r3, #0]
	if(timeoutState == 1)
 8010d86:	4b09      	ldr	r3, [pc, #36]	; (8010dac <timeoutReset+0x30>)
 8010d88:	781b      	ldrb	r3, [r3, #0]
 8010d8a:	b2db      	uxtb	r3, r3
 8010d8c:	2b01      	cmp	r3, #1
 8010d8e:	d108      	bne.n	8010da2 <timeoutReset+0x26>
	{
		timeoutState = 0;
 8010d90:	4b06      	ldr	r3, [pc, #24]	; (8010dac <timeoutReset+0x30>)
 8010d92:	2200      	movs	r2, #0
 8010d94:	701a      	strb	r2, [r3, #0]
		ASR_Reset();
 8010d96:	f7fd fbe5 	bl	800e564 <ASR_Reset>
		ACR_Reset();
 8010d9a:	f7fd f9eb 	bl	800e174 <ACR_Reset>
		startPWM();
 8010d9e:	f7ff ffb7 	bl	8010d10 <startPWM>
	}
}
 8010da2:	bf00      	nop
 8010da4:	bd80      	pop	{r7, pc}
 8010da6:	bf00      	nop
 8010da8:	200041f8 	.word	0x200041f8
 8010dac:	200041fc 	.word	0x200041fc

08010db0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8010db0:	b580      	push	{r7, lr}
 8010db2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8010db4:	4b11      	ldr	r3, [pc, #68]	; (8010dfc <MX_USART2_UART_Init+0x4c>)
 8010db6:	4a12      	ldr	r2, [pc, #72]	; (8010e00 <MX_USART2_UART_Init+0x50>)
 8010db8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8010dba:	4b10      	ldr	r3, [pc, #64]	; (8010dfc <MX_USART2_UART_Init+0x4c>)
 8010dbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8010dc0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8010dc2:	4b0e      	ldr	r3, [pc, #56]	; (8010dfc <MX_USART2_UART_Init+0x4c>)
 8010dc4:	2200      	movs	r2, #0
 8010dc6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8010dc8:	4b0c      	ldr	r3, [pc, #48]	; (8010dfc <MX_USART2_UART_Init+0x4c>)
 8010dca:	2200      	movs	r2, #0
 8010dcc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8010dce:	4b0b      	ldr	r3, [pc, #44]	; (8010dfc <MX_USART2_UART_Init+0x4c>)
 8010dd0:	2200      	movs	r2, #0
 8010dd2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8010dd4:	4b09      	ldr	r3, [pc, #36]	; (8010dfc <MX_USART2_UART_Init+0x4c>)
 8010dd6:	220c      	movs	r2, #12
 8010dd8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8010dda:	4b08      	ldr	r3, [pc, #32]	; (8010dfc <MX_USART2_UART_Init+0x4c>)
 8010ddc:	2200      	movs	r2, #0
 8010dde:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8010de0:	4b06      	ldr	r3, [pc, #24]	; (8010dfc <MX_USART2_UART_Init+0x4c>)
 8010de2:	2200      	movs	r2, #0
 8010de4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8010de6:	4805      	ldr	r0, [pc, #20]	; (8010dfc <MX_USART2_UART_Init+0x4c>)
 8010de8:	f7fc fac8 	bl	800d37c <HAL_UART_Init>
 8010dec:	4603      	mov	r3, r0
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d001      	beq.n	8010df6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8010df2:	f7fe fcb5 	bl	800f760 <Error_Handler>
  }

}
 8010df6:	bf00      	nop
 8010df8:	bd80      	pop	{r7, pc}
 8010dfa:	bf00      	nop
 8010dfc:	2000459c 	.word	0x2000459c
 8010e00:	40004400 	.word	0x40004400

08010e04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8010e04:	b580      	push	{r7, lr}
 8010e06:	b08a      	sub	sp, #40	; 0x28
 8010e08:	af00      	add	r7, sp, #0
 8010e0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010e0c:	f107 0314 	add.w	r3, r7, #20
 8010e10:	2200      	movs	r2, #0
 8010e12:	601a      	str	r2, [r3, #0]
 8010e14:	605a      	str	r2, [r3, #4]
 8010e16:	609a      	str	r2, [r3, #8]
 8010e18:	60da      	str	r2, [r3, #12]
 8010e1a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	4a1d      	ldr	r2, [pc, #116]	; (8010e98 <HAL_UART_MspInit+0x94>)
 8010e22:	4293      	cmp	r3, r2
 8010e24:	d133      	bne.n	8010e8e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8010e26:	2300      	movs	r3, #0
 8010e28:	613b      	str	r3, [r7, #16]
 8010e2a:	4b1c      	ldr	r3, [pc, #112]	; (8010e9c <HAL_UART_MspInit+0x98>)
 8010e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e2e:	4a1b      	ldr	r2, [pc, #108]	; (8010e9c <HAL_UART_MspInit+0x98>)
 8010e30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010e34:	6413      	str	r3, [r2, #64]	; 0x40
 8010e36:	4b19      	ldr	r3, [pc, #100]	; (8010e9c <HAL_UART_MspInit+0x98>)
 8010e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010e3e:	613b      	str	r3, [r7, #16]
 8010e40:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010e42:	2300      	movs	r3, #0
 8010e44:	60fb      	str	r3, [r7, #12]
 8010e46:	4b15      	ldr	r3, [pc, #84]	; (8010e9c <HAL_UART_MspInit+0x98>)
 8010e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e4a:	4a14      	ldr	r2, [pc, #80]	; (8010e9c <HAL_UART_MspInit+0x98>)
 8010e4c:	f043 0301 	orr.w	r3, r3, #1
 8010e50:	6313      	str	r3, [r2, #48]	; 0x30
 8010e52:	4b12      	ldr	r3, [pc, #72]	; (8010e9c <HAL_UART_MspInit+0x98>)
 8010e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e56:	f003 0301 	and.w	r3, r3, #1
 8010e5a:	60fb      	str	r3, [r7, #12]
 8010e5c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8010e5e:	230c      	movs	r3, #12
 8010e60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010e62:	2302      	movs	r3, #2
 8010e64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8010e66:	2301      	movs	r3, #1
 8010e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010e6a:	2303      	movs	r3, #3
 8010e6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8010e6e:	2307      	movs	r3, #7
 8010e70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010e72:	f107 0314 	add.w	r3, r7, #20
 8010e76:	4619      	mov	r1, r3
 8010e78:	4809      	ldr	r0, [pc, #36]	; (8010ea0 <HAL_UART_MspInit+0x9c>)
 8010e7a:	f7f9 ffbf 	bl	800adfc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8010e7e:	2200      	movs	r2, #0
 8010e80:	2100      	movs	r1, #0
 8010e82:	2026      	movs	r0, #38	; 0x26
 8010e84:	f7f9 f907 	bl	800a096 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8010e88:	2026      	movs	r0, #38	; 0x26
 8010e8a:	f7f9 f920 	bl	800a0ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8010e8e:	bf00      	nop
 8010e90:	3728      	adds	r7, #40	; 0x28
 8010e92:	46bd      	mov	sp, r7
 8010e94:	bd80      	pop	{r7, pc}
 8010e96:	bf00      	nop
 8010e98:	40004400 	.word	0x40004400
 8010e9c:	40023800 	.word	0x40023800
 8010ea0:	40020000 	.word	0x40020000

08010ea4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8010ea4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8010edc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8010ea8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8010eaa:	e003      	b.n	8010eb4 <LoopCopyDataInit>

08010eac <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8010eac:	4b0c      	ldr	r3, [pc, #48]	; (8010ee0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8010eae:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8010eb0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8010eb2:	3104      	adds	r1, #4

08010eb4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8010eb4:	480b      	ldr	r0, [pc, #44]	; (8010ee4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8010eb6:	4b0c      	ldr	r3, [pc, #48]	; (8010ee8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8010eb8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8010eba:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8010ebc:	d3f6      	bcc.n	8010eac <CopyDataInit>
  ldr  r2, =_sbss
 8010ebe:	4a0b      	ldr	r2, [pc, #44]	; (8010eec <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8010ec0:	e002      	b.n	8010ec8 <LoopFillZerobss>

08010ec2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8010ec2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8010ec4:	f842 3b04 	str.w	r3, [r2], #4

08010ec8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8010ec8:	4b09      	ldr	r3, [pc, #36]	; (8010ef0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8010eca:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8010ecc:	d3f9      	bcc.n	8010ec2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8010ece:	f7ff fd79 	bl	80109c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8010ed2:	f000 f817 	bl	8010f04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8010ed6:	f7fe faaf 	bl	800f438 <main>
  bx  lr    
 8010eda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8010edc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8010ee0:	08026c70 	.word	0x08026c70
  ldr  r0, =_sdata
 8010ee4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8010ee8:	200000a4 	.word	0x200000a4
  ldr  r2, =_sbss
 8010eec:	200000a4 	.word	0x200000a4
  ldr  r3, = _ebss
 8010ef0:	200045e0 	.word	0x200045e0

08010ef4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8010ef4:	e7fe      	b.n	8010ef4 <ADC_IRQHandler>
	...

08010ef8 <__errno>:
 8010ef8:	4b01      	ldr	r3, [pc, #4]	; (8010f00 <__errno+0x8>)
 8010efa:	6818      	ldr	r0, [r3, #0]
 8010efc:	4770      	bx	lr
 8010efe:	bf00      	nop
 8010f00:	2000003c 	.word	0x2000003c

08010f04 <__libc_init_array>:
 8010f04:	b570      	push	{r4, r5, r6, lr}
 8010f06:	4e0d      	ldr	r6, [pc, #52]	; (8010f3c <__libc_init_array+0x38>)
 8010f08:	4c0d      	ldr	r4, [pc, #52]	; (8010f40 <__libc_init_array+0x3c>)
 8010f0a:	1ba4      	subs	r4, r4, r6
 8010f0c:	10a4      	asrs	r4, r4, #2
 8010f0e:	2500      	movs	r5, #0
 8010f10:	42a5      	cmp	r5, r4
 8010f12:	d109      	bne.n	8010f28 <__libc_init_array+0x24>
 8010f14:	4e0b      	ldr	r6, [pc, #44]	; (8010f44 <__libc_init_array+0x40>)
 8010f16:	4c0c      	ldr	r4, [pc, #48]	; (8010f48 <__libc_init_array+0x44>)
 8010f18:	f002 f870 	bl	8012ffc <_init>
 8010f1c:	1ba4      	subs	r4, r4, r6
 8010f1e:	10a4      	asrs	r4, r4, #2
 8010f20:	2500      	movs	r5, #0
 8010f22:	42a5      	cmp	r5, r4
 8010f24:	d105      	bne.n	8010f32 <__libc_init_array+0x2e>
 8010f26:	bd70      	pop	{r4, r5, r6, pc}
 8010f28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010f2c:	4798      	blx	r3
 8010f2e:	3501      	adds	r5, #1
 8010f30:	e7ee      	b.n	8010f10 <__libc_init_array+0xc>
 8010f32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010f36:	4798      	blx	r3
 8010f38:	3501      	adds	r5, #1
 8010f3a:	e7f2      	b.n	8010f22 <__libc_init_array+0x1e>
 8010f3c:	08026c68 	.word	0x08026c68
 8010f40:	08026c68 	.word	0x08026c68
 8010f44:	08026c68 	.word	0x08026c68
 8010f48:	08026c6c 	.word	0x08026c6c

08010f4c <memcpy>:
 8010f4c:	b510      	push	{r4, lr}
 8010f4e:	1e43      	subs	r3, r0, #1
 8010f50:	440a      	add	r2, r1
 8010f52:	4291      	cmp	r1, r2
 8010f54:	d100      	bne.n	8010f58 <memcpy+0xc>
 8010f56:	bd10      	pop	{r4, pc}
 8010f58:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010f5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010f60:	e7f7      	b.n	8010f52 <memcpy+0x6>

08010f62 <memset>:
 8010f62:	4402      	add	r2, r0
 8010f64:	4603      	mov	r3, r0
 8010f66:	4293      	cmp	r3, r2
 8010f68:	d100      	bne.n	8010f6c <memset+0xa>
 8010f6a:	4770      	bx	lr
 8010f6c:	f803 1b01 	strb.w	r1, [r3], #1
 8010f70:	e7f9      	b.n	8010f66 <memset+0x4>
	...

08010f74 <iprintf>:
 8010f74:	b40f      	push	{r0, r1, r2, r3}
 8010f76:	4b0a      	ldr	r3, [pc, #40]	; (8010fa0 <iprintf+0x2c>)
 8010f78:	b513      	push	{r0, r1, r4, lr}
 8010f7a:	681c      	ldr	r4, [r3, #0]
 8010f7c:	b124      	cbz	r4, 8010f88 <iprintf+0x14>
 8010f7e:	69a3      	ldr	r3, [r4, #24]
 8010f80:	b913      	cbnz	r3, 8010f88 <iprintf+0x14>
 8010f82:	4620      	mov	r0, r4
 8010f84:	f000 fa22 	bl	80113cc <__sinit>
 8010f88:	ab05      	add	r3, sp, #20
 8010f8a:	9a04      	ldr	r2, [sp, #16]
 8010f8c:	68a1      	ldr	r1, [r4, #8]
 8010f8e:	9301      	str	r3, [sp, #4]
 8010f90:	4620      	mov	r0, r4
 8010f92:	f000 fbdb 	bl	801174c <_vfiprintf_r>
 8010f96:	b002      	add	sp, #8
 8010f98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010f9c:	b004      	add	sp, #16
 8010f9e:	4770      	bx	lr
 8010fa0:	2000003c 	.word	0x2000003c

08010fa4 <_puts_r>:
 8010fa4:	b570      	push	{r4, r5, r6, lr}
 8010fa6:	460e      	mov	r6, r1
 8010fa8:	4605      	mov	r5, r0
 8010faa:	b118      	cbz	r0, 8010fb4 <_puts_r+0x10>
 8010fac:	6983      	ldr	r3, [r0, #24]
 8010fae:	b90b      	cbnz	r3, 8010fb4 <_puts_r+0x10>
 8010fb0:	f000 fa0c 	bl	80113cc <__sinit>
 8010fb4:	69ab      	ldr	r3, [r5, #24]
 8010fb6:	68ac      	ldr	r4, [r5, #8]
 8010fb8:	b913      	cbnz	r3, 8010fc0 <_puts_r+0x1c>
 8010fba:	4628      	mov	r0, r5
 8010fbc:	f000 fa06 	bl	80113cc <__sinit>
 8010fc0:	4b23      	ldr	r3, [pc, #140]	; (8011050 <_puts_r+0xac>)
 8010fc2:	429c      	cmp	r4, r3
 8010fc4:	d117      	bne.n	8010ff6 <_puts_r+0x52>
 8010fc6:	686c      	ldr	r4, [r5, #4]
 8010fc8:	89a3      	ldrh	r3, [r4, #12]
 8010fca:	071b      	lsls	r3, r3, #28
 8010fcc:	d51d      	bpl.n	801100a <_puts_r+0x66>
 8010fce:	6923      	ldr	r3, [r4, #16]
 8010fd0:	b1db      	cbz	r3, 801100a <_puts_r+0x66>
 8010fd2:	3e01      	subs	r6, #1
 8010fd4:	68a3      	ldr	r3, [r4, #8]
 8010fd6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010fda:	3b01      	subs	r3, #1
 8010fdc:	60a3      	str	r3, [r4, #8]
 8010fde:	b9e9      	cbnz	r1, 801101c <_puts_r+0x78>
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	da2e      	bge.n	8011042 <_puts_r+0x9e>
 8010fe4:	4622      	mov	r2, r4
 8010fe6:	210a      	movs	r1, #10
 8010fe8:	4628      	mov	r0, r5
 8010fea:	f000 f83f 	bl	801106c <__swbuf_r>
 8010fee:	3001      	adds	r0, #1
 8010ff0:	d011      	beq.n	8011016 <_puts_r+0x72>
 8010ff2:	200a      	movs	r0, #10
 8010ff4:	e011      	b.n	801101a <_puts_r+0x76>
 8010ff6:	4b17      	ldr	r3, [pc, #92]	; (8011054 <_puts_r+0xb0>)
 8010ff8:	429c      	cmp	r4, r3
 8010ffa:	d101      	bne.n	8011000 <_puts_r+0x5c>
 8010ffc:	68ac      	ldr	r4, [r5, #8]
 8010ffe:	e7e3      	b.n	8010fc8 <_puts_r+0x24>
 8011000:	4b15      	ldr	r3, [pc, #84]	; (8011058 <_puts_r+0xb4>)
 8011002:	429c      	cmp	r4, r3
 8011004:	bf08      	it	eq
 8011006:	68ec      	ldreq	r4, [r5, #12]
 8011008:	e7de      	b.n	8010fc8 <_puts_r+0x24>
 801100a:	4621      	mov	r1, r4
 801100c:	4628      	mov	r0, r5
 801100e:	f000 f87f 	bl	8011110 <__swsetup_r>
 8011012:	2800      	cmp	r0, #0
 8011014:	d0dd      	beq.n	8010fd2 <_puts_r+0x2e>
 8011016:	f04f 30ff 	mov.w	r0, #4294967295
 801101a:	bd70      	pop	{r4, r5, r6, pc}
 801101c:	2b00      	cmp	r3, #0
 801101e:	da04      	bge.n	801102a <_puts_r+0x86>
 8011020:	69a2      	ldr	r2, [r4, #24]
 8011022:	429a      	cmp	r2, r3
 8011024:	dc06      	bgt.n	8011034 <_puts_r+0x90>
 8011026:	290a      	cmp	r1, #10
 8011028:	d004      	beq.n	8011034 <_puts_r+0x90>
 801102a:	6823      	ldr	r3, [r4, #0]
 801102c:	1c5a      	adds	r2, r3, #1
 801102e:	6022      	str	r2, [r4, #0]
 8011030:	7019      	strb	r1, [r3, #0]
 8011032:	e7cf      	b.n	8010fd4 <_puts_r+0x30>
 8011034:	4622      	mov	r2, r4
 8011036:	4628      	mov	r0, r5
 8011038:	f000 f818 	bl	801106c <__swbuf_r>
 801103c:	3001      	adds	r0, #1
 801103e:	d1c9      	bne.n	8010fd4 <_puts_r+0x30>
 8011040:	e7e9      	b.n	8011016 <_puts_r+0x72>
 8011042:	6823      	ldr	r3, [r4, #0]
 8011044:	200a      	movs	r0, #10
 8011046:	1c5a      	adds	r2, r3, #1
 8011048:	6022      	str	r2, [r4, #0]
 801104a:	7018      	strb	r0, [r3, #0]
 801104c:	e7e5      	b.n	801101a <_puts_r+0x76>
 801104e:	bf00      	nop
 8011050:	08026a04 	.word	0x08026a04
 8011054:	08026a24 	.word	0x08026a24
 8011058:	080269e4 	.word	0x080269e4

0801105c <puts>:
 801105c:	4b02      	ldr	r3, [pc, #8]	; (8011068 <puts+0xc>)
 801105e:	4601      	mov	r1, r0
 8011060:	6818      	ldr	r0, [r3, #0]
 8011062:	f7ff bf9f 	b.w	8010fa4 <_puts_r>
 8011066:	bf00      	nop
 8011068:	2000003c 	.word	0x2000003c

0801106c <__swbuf_r>:
 801106c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801106e:	460e      	mov	r6, r1
 8011070:	4614      	mov	r4, r2
 8011072:	4605      	mov	r5, r0
 8011074:	b118      	cbz	r0, 801107e <__swbuf_r+0x12>
 8011076:	6983      	ldr	r3, [r0, #24]
 8011078:	b90b      	cbnz	r3, 801107e <__swbuf_r+0x12>
 801107a:	f000 f9a7 	bl	80113cc <__sinit>
 801107e:	4b21      	ldr	r3, [pc, #132]	; (8011104 <__swbuf_r+0x98>)
 8011080:	429c      	cmp	r4, r3
 8011082:	d12a      	bne.n	80110da <__swbuf_r+0x6e>
 8011084:	686c      	ldr	r4, [r5, #4]
 8011086:	69a3      	ldr	r3, [r4, #24]
 8011088:	60a3      	str	r3, [r4, #8]
 801108a:	89a3      	ldrh	r3, [r4, #12]
 801108c:	071a      	lsls	r2, r3, #28
 801108e:	d52e      	bpl.n	80110ee <__swbuf_r+0x82>
 8011090:	6923      	ldr	r3, [r4, #16]
 8011092:	b363      	cbz	r3, 80110ee <__swbuf_r+0x82>
 8011094:	6923      	ldr	r3, [r4, #16]
 8011096:	6820      	ldr	r0, [r4, #0]
 8011098:	1ac0      	subs	r0, r0, r3
 801109a:	6963      	ldr	r3, [r4, #20]
 801109c:	b2f6      	uxtb	r6, r6
 801109e:	4283      	cmp	r3, r0
 80110a0:	4637      	mov	r7, r6
 80110a2:	dc04      	bgt.n	80110ae <__swbuf_r+0x42>
 80110a4:	4621      	mov	r1, r4
 80110a6:	4628      	mov	r0, r5
 80110a8:	f000 f926 	bl	80112f8 <_fflush_r>
 80110ac:	bb28      	cbnz	r0, 80110fa <__swbuf_r+0x8e>
 80110ae:	68a3      	ldr	r3, [r4, #8]
 80110b0:	3b01      	subs	r3, #1
 80110b2:	60a3      	str	r3, [r4, #8]
 80110b4:	6823      	ldr	r3, [r4, #0]
 80110b6:	1c5a      	adds	r2, r3, #1
 80110b8:	6022      	str	r2, [r4, #0]
 80110ba:	701e      	strb	r6, [r3, #0]
 80110bc:	6963      	ldr	r3, [r4, #20]
 80110be:	3001      	adds	r0, #1
 80110c0:	4283      	cmp	r3, r0
 80110c2:	d004      	beq.n	80110ce <__swbuf_r+0x62>
 80110c4:	89a3      	ldrh	r3, [r4, #12]
 80110c6:	07db      	lsls	r3, r3, #31
 80110c8:	d519      	bpl.n	80110fe <__swbuf_r+0x92>
 80110ca:	2e0a      	cmp	r6, #10
 80110cc:	d117      	bne.n	80110fe <__swbuf_r+0x92>
 80110ce:	4621      	mov	r1, r4
 80110d0:	4628      	mov	r0, r5
 80110d2:	f000 f911 	bl	80112f8 <_fflush_r>
 80110d6:	b190      	cbz	r0, 80110fe <__swbuf_r+0x92>
 80110d8:	e00f      	b.n	80110fa <__swbuf_r+0x8e>
 80110da:	4b0b      	ldr	r3, [pc, #44]	; (8011108 <__swbuf_r+0x9c>)
 80110dc:	429c      	cmp	r4, r3
 80110de:	d101      	bne.n	80110e4 <__swbuf_r+0x78>
 80110e0:	68ac      	ldr	r4, [r5, #8]
 80110e2:	e7d0      	b.n	8011086 <__swbuf_r+0x1a>
 80110e4:	4b09      	ldr	r3, [pc, #36]	; (801110c <__swbuf_r+0xa0>)
 80110e6:	429c      	cmp	r4, r3
 80110e8:	bf08      	it	eq
 80110ea:	68ec      	ldreq	r4, [r5, #12]
 80110ec:	e7cb      	b.n	8011086 <__swbuf_r+0x1a>
 80110ee:	4621      	mov	r1, r4
 80110f0:	4628      	mov	r0, r5
 80110f2:	f000 f80d 	bl	8011110 <__swsetup_r>
 80110f6:	2800      	cmp	r0, #0
 80110f8:	d0cc      	beq.n	8011094 <__swbuf_r+0x28>
 80110fa:	f04f 37ff 	mov.w	r7, #4294967295
 80110fe:	4638      	mov	r0, r7
 8011100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011102:	bf00      	nop
 8011104:	08026a04 	.word	0x08026a04
 8011108:	08026a24 	.word	0x08026a24
 801110c:	080269e4 	.word	0x080269e4

08011110 <__swsetup_r>:
 8011110:	4b32      	ldr	r3, [pc, #200]	; (80111dc <__swsetup_r+0xcc>)
 8011112:	b570      	push	{r4, r5, r6, lr}
 8011114:	681d      	ldr	r5, [r3, #0]
 8011116:	4606      	mov	r6, r0
 8011118:	460c      	mov	r4, r1
 801111a:	b125      	cbz	r5, 8011126 <__swsetup_r+0x16>
 801111c:	69ab      	ldr	r3, [r5, #24]
 801111e:	b913      	cbnz	r3, 8011126 <__swsetup_r+0x16>
 8011120:	4628      	mov	r0, r5
 8011122:	f000 f953 	bl	80113cc <__sinit>
 8011126:	4b2e      	ldr	r3, [pc, #184]	; (80111e0 <__swsetup_r+0xd0>)
 8011128:	429c      	cmp	r4, r3
 801112a:	d10f      	bne.n	801114c <__swsetup_r+0x3c>
 801112c:	686c      	ldr	r4, [r5, #4]
 801112e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011132:	b29a      	uxth	r2, r3
 8011134:	0715      	lsls	r5, r2, #28
 8011136:	d42c      	bmi.n	8011192 <__swsetup_r+0x82>
 8011138:	06d0      	lsls	r0, r2, #27
 801113a:	d411      	bmi.n	8011160 <__swsetup_r+0x50>
 801113c:	2209      	movs	r2, #9
 801113e:	6032      	str	r2, [r6, #0]
 8011140:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011144:	81a3      	strh	r3, [r4, #12]
 8011146:	f04f 30ff 	mov.w	r0, #4294967295
 801114a:	e03e      	b.n	80111ca <__swsetup_r+0xba>
 801114c:	4b25      	ldr	r3, [pc, #148]	; (80111e4 <__swsetup_r+0xd4>)
 801114e:	429c      	cmp	r4, r3
 8011150:	d101      	bne.n	8011156 <__swsetup_r+0x46>
 8011152:	68ac      	ldr	r4, [r5, #8]
 8011154:	e7eb      	b.n	801112e <__swsetup_r+0x1e>
 8011156:	4b24      	ldr	r3, [pc, #144]	; (80111e8 <__swsetup_r+0xd8>)
 8011158:	429c      	cmp	r4, r3
 801115a:	bf08      	it	eq
 801115c:	68ec      	ldreq	r4, [r5, #12]
 801115e:	e7e6      	b.n	801112e <__swsetup_r+0x1e>
 8011160:	0751      	lsls	r1, r2, #29
 8011162:	d512      	bpl.n	801118a <__swsetup_r+0x7a>
 8011164:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011166:	b141      	cbz	r1, 801117a <__swsetup_r+0x6a>
 8011168:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801116c:	4299      	cmp	r1, r3
 801116e:	d002      	beq.n	8011176 <__swsetup_r+0x66>
 8011170:	4630      	mov	r0, r6
 8011172:	f000 fa19 	bl	80115a8 <_free_r>
 8011176:	2300      	movs	r3, #0
 8011178:	6363      	str	r3, [r4, #52]	; 0x34
 801117a:	89a3      	ldrh	r3, [r4, #12]
 801117c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011180:	81a3      	strh	r3, [r4, #12]
 8011182:	2300      	movs	r3, #0
 8011184:	6063      	str	r3, [r4, #4]
 8011186:	6923      	ldr	r3, [r4, #16]
 8011188:	6023      	str	r3, [r4, #0]
 801118a:	89a3      	ldrh	r3, [r4, #12]
 801118c:	f043 0308 	orr.w	r3, r3, #8
 8011190:	81a3      	strh	r3, [r4, #12]
 8011192:	6923      	ldr	r3, [r4, #16]
 8011194:	b94b      	cbnz	r3, 80111aa <__swsetup_r+0x9a>
 8011196:	89a3      	ldrh	r3, [r4, #12]
 8011198:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801119c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80111a0:	d003      	beq.n	80111aa <__swsetup_r+0x9a>
 80111a2:	4621      	mov	r1, r4
 80111a4:	4630      	mov	r0, r6
 80111a6:	f000 f9bf 	bl	8011528 <__smakebuf_r>
 80111aa:	89a2      	ldrh	r2, [r4, #12]
 80111ac:	f012 0301 	ands.w	r3, r2, #1
 80111b0:	d00c      	beq.n	80111cc <__swsetup_r+0xbc>
 80111b2:	2300      	movs	r3, #0
 80111b4:	60a3      	str	r3, [r4, #8]
 80111b6:	6963      	ldr	r3, [r4, #20]
 80111b8:	425b      	negs	r3, r3
 80111ba:	61a3      	str	r3, [r4, #24]
 80111bc:	6923      	ldr	r3, [r4, #16]
 80111be:	b953      	cbnz	r3, 80111d6 <__swsetup_r+0xc6>
 80111c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80111c4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80111c8:	d1ba      	bne.n	8011140 <__swsetup_r+0x30>
 80111ca:	bd70      	pop	{r4, r5, r6, pc}
 80111cc:	0792      	lsls	r2, r2, #30
 80111ce:	bf58      	it	pl
 80111d0:	6963      	ldrpl	r3, [r4, #20]
 80111d2:	60a3      	str	r3, [r4, #8]
 80111d4:	e7f2      	b.n	80111bc <__swsetup_r+0xac>
 80111d6:	2000      	movs	r0, #0
 80111d8:	e7f7      	b.n	80111ca <__swsetup_r+0xba>
 80111da:	bf00      	nop
 80111dc:	2000003c 	.word	0x2000003c
 80111e0:	08026a04 	.word	0x08026a04
 80111e4:	08026a24 	.word	0x08026a24
 80111e8:	080269e4 	.word	0x080269e4

080111ec <__sflush_r>:
 80111ec:	898a      	ldrh	r2, [r1, #12]
 80111ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111f2:	4605      	mov	r5, r0
 80111f4:	0710      	lsls	r0, r2, #28
 80111f6:	460c      	mov	r4, r1
 80111f8:	d458      	bmi.n	80112ac <__sflush_r+0xc0>
 80111fa:	684b      	ldr	r3, [r1, #4]
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	dc05      	bgt.n	801120c <__sflush_r+0x20>
 8011200:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011202:	2b00      	cmp	r3, #0
 8011204:	dc02      	bgt.n	801120c <__sflush_r+0x20>
 8011206:	2000      	movs	r0, #0
 8011208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801120c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801120e:	2e00      	cmp	r6, #0
 8011210:	d0f9      	beq.n	8011206 <__sflush_r+0x1a>
 8011212:	2300      	movs	r3, #0
 8011214:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011218:	682f      	ldr	r7, [r5, #0]
 801121a:	6a21      	ldr	r1, [r4, #32]
 801121c:	602b      	str	r3, [r5, #0]
 801121e:	d032      	beq.n	8011286 <__sflush_r+0x9a>
 8011220:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011222:	89a3      	ldrh	r3, [r4, #12]
 8011224:	075a      	lsls	r2, r3, #29
 8011226:	d505      	bpl.n	8011234 <__sflush_r+0x48>
 8011228:	6863      	ldr	r3, [r4, #4]
 801122a:	1ac0      	subs	r0, r0, r3
 801122c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801122e:	b10b      	cbz	r3, 8011234 <__sflush_r+0x48>
 8011230:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011232:	1ac0      	subs	r0, r0, r3
 8011234:	2300      	movs	r3, #0
 8011236:	4602      	mov	r2, r0
 8011238:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801123a:	6a21      	ldr	r1, [r4, #32]
 801123c:	4628      	mov	r0, r5
 801123e:	47b0      	blx	r6
 8011240:	1c43      	adds	r3, r0, #1
 8011242:	89a3      	ldrh	r3, [r4, #12]
 8011244:	d106      	bne.n	8011254 <__sflush_r+0x68>
 8011246:	6829      	ldr	r1, [r5, #0]
 8011248:	291d      	cmp	r1, #29
 801124a:	d848      	bhi.n	80112de <__sflush_r+0xf2>
 801124c:	4a29      	ldr	r2, [pc, #164]	; (80112f4 <__sflush_r+0x108>)
 801124e:	40ca      	lsrs	r2, r1
 8011250:	07d6      	lsls	r6, r2, #31
 8011252:	d544      	bpl.n	80112de <__sflush_r+0xf2>
 8011254:	2200      	movs	r2, #0
 8011256:	6062      	str	r2, [r4, #4]
 8011258:	04d9      	lsls	r1, r3, #19
 801125a:	6922      	ldr	r2, [r4, #16]
 801125c:	6022      	str	r2, [r4, #0]
 801125e:	d504      	bpl.n	801126a <__sflush_r+0x7e>
 8011260:	1c42      	adds	r2, r0, #1
 8011262:	d101      	bne.n	8011268 <__sflush_r+0x7c>
 8011264:	682b      	ldr	r3, [r5, #0]
 8011266:	b903      	cbnz	r3, 801126a <__sflush_r+0x7e>
 8011268:	6560      	str	r0, [r4, #84]	; 0x54
 801126a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801126c:	602f      	str	r7, [r5, #0]
 801126e:	2900      	cmp	r1, #0
 8011270:	d0c9      	beq.n	8011206 <__sflush_r+0x1a>
 8011272:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011276:	4299      	cmp	r1, r3
 8011278:	d002      	beq.n	8011280 <__sflush_r+0x94>
 801127a:	4628      	mov	r0, r5
 801127c:	f000 f994 	bl	80115a8 <_free_r>
 8011280:	2000      	movs	r0, #0
 8011282:	6360      	str	r0, [r4, #52]	; 0x34
 8011284:	e7c0      	b.n	8011208 <__sflush_r+0x1c>
 8011286:	2301      	movs	r3, #1
 8011288:	4628      	mov	r0, r5
 801128a:	47b0      	blx	r6
 801128c:	1c41      	adds	r1, r0, #1
 801128e:	d1c8      	bne.n	8011222 <__sflush_r+0x36>
 8011290:	682b      	ldr	r3, [r5, #0]
 8011292:	2b00      	cmp	r3, #0
 8011294:	d0c5      	beq.n	8011222 <__sflush_r+0x36>
 8011296:	2b1d      	cmp	r3, #29
 8011298:	d001      	beq.n	801129e <__sflush_r+0xb2>
 801129a:	2b16      	cmp	r3, #22
 801129c:	d101      	bne.n	80112a2 <__sflush_r+0xb6>
 801129e:	602f      	str	r7, [r5, #0]
 80112a0:	e7b1      	b.n	8011206 <__sflush_r+0x1a>
 80112a2:	89a3      	ldrh	r3, [r4, #12]
 80112a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80112a8:	81a3      	strh	r3, [r4, #12]
 80112aa:	e7ad      	b.n	8011208 <__sflush_r+0x1c>
 80112ac:	690f      	ldr	r7, [r1, #16]
 80112ae:	2f00      	cmp	r7, #0
 80112b0:	d0a9      	beq.n	8011206 <__sflush_r+0x1a>
 80112b2:	0793      	lsls	r3, r2, #30
 80112b4:	680e      	ldr	r6, [r1, #0]
 80112b6:	bf08      	it	eq
 80112b8:	694b      	ldreq	r3, [r1, #20]
 80112ba:	600f      	str	r7, [r1, #0]
 80112bc:	bf18      	it	ne
 80112be:	2300      	movne	r3, #0
 80112c0:	eba6 0807 	sub.w	r8, r6, r7
 80112c4:	608b      	str	r3, [r1, #8]
 80112c6:	f1b8 0f00 	cmp.w	r8, #0
 80112ca:	dd9c      	ble.n	8011206 <__sflush_r+0x1a>
 80112cc:	4643      	mov	r3, r8
 80112ce:	463a      	mov	r2, r7
 80112d0:	6a21      	ldr	r1, [r4, #32]
 80112d2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80112d4:	4628      	mov	r0, r5
 80112d6:	47b0      	blx	r6
 80112d8:	2800      	cmp	r0, #0
 80112da:	dc06      	bgt.n	80112ea <__sflush_r+0xfe>
 80112dc:	89a3      	ldrh	r3, [r4, #12]
 80112de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80112e2:	81a3      	strh	r3, [r4, #12]
 80112e4:	f04f 30ff 	mov.w	r0, #4294967295
 80112e8:	e78e      	b.n	8011208 <__sflush_r+0x1c>
 80112ea:	4407      	add	r7, r0
 80112ec:	eba8 0800 	sub.w	r8, r8, r0
 80112f0:	e7e9      	b.n	80112c6 <__sflush_r+0xda>
 80112f2:	bf00      	nop
 80112f4:	20400001 	.word	0x20400001

080112f8 <_fflush_r>:
 80112f8:	b538      	push	{r3, r4, r5, lr}
 80112fa:	690b      	ldr	r3, [r1, #16]
 80112fc:	4605      	mov	r5, r0
 80112fe:	460c      	mov	r4, r1
 8011300:	b1db      	cbz	r3, 801133a <_fflush_r+0x42>
 8011302:	b118      	cbz	r0, 801130c <_fflush_r+0x14>
 8011304:	6983      	ldr	r3, [r0, #24]
 8011306:	b90b      	cbnz	r3, 801130c <_fflush_r+0x14>
 8011308:	f000 f860 	bl	80113cc <__sinit>
 801130c:	4b0c      	ldr	r3, [pc, #48]	; (8011340 <_fflush_r+0x48>)
 801130e:	429c      	cmp	r4, r3
 8011310:	d109      	bne.n	8011326 <_fflush_r+0x2e>
 8011312:	686c      	ldr	r4, [r5, #4]
 8011314:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011318:	b17b      	cbz	r3, 801133a <_fflush_r+0x42>
 801131a:	4621      	mov	r1, r4
 801131c:	4628      	mov	r0, r5
 801131e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011322:	f7ff bf63 	b.w	80111ec <__sflush_r>
 8011326:	4b07      	ldr	r3, [pc, #28]	; (8011344 <_fflush_r+0x4c>)
 8011328:	429c      	cmp	r4, r3
 801132a:	d101      	bne.n	8011330 <_fflush_r+0x38>
 801132c:	68ac      	ldr	r4, [r5, #8]
 801132e:	e7f1      	b.n	8011314 <_fflush_r+0x1c>
 8011330:	4b05      	ldr	r3, [pc, #20]	; (8011348 <_fflush_r+0x50>)
 8011332:	429c      	cmp	r4, r3
 8011334:	bf08      	it	eq
 8011336:	68ec      	ldreq	r4, [r5, #12]
 8011338:	e7ec      	b.n	8011314 <_fflush_r+0x1c>
 801133a:	2000      	movs	r0, #0
 801133c:	bd38      	pop	{r3, r4, r5, pc}
 801133e:	bf00      	nop
 8011340:	08026a04 	.word	0x08026a04
 8011344:	08026a24 	.word	0x08026a24
 8011348:	080269e4 	.word	0x080269e4

0801134c <std>:
 801134c:	2300      	movs	r3, #0
 801134e:	b510      	push	{r4, lr}
 8011350:	4604      	mov	r4, r0
 8011352:	e9c0 3300 	strd	r3, r3, [r0]
 8011356:	6083      	str	r3, [r0, #8]
 8011358:	8181      	strh	r1, [r0, #12]
 801135a:	6643      	str	r3, [r0, #100]	; 0x64
 801135c:	81c2      	strh	r2, [r0, #14]
 801135e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011362:	6183      	str	r3, [r0, #24]
 8011364:	4619      	mov	r1, r3
 8011366:	2208      	movs	r2, #8
 8011368:	305c      	adds	r0, #92	; 0x5c
 801136a:	f7ff fdfa 	bl	8010f62 <memset>
 801136e:	4b05      	ldr	r3, [pc, #20]	; (8011384 <std+0x38>)
 8011370:	6263      	str	r3, [r4, #36]	; 0x24
 8011372:	4b05      	ldr	r3, [pc, #20]	; (8011388 <std+0x3c>)
 8011374:	62a3      	str	r3, [r4, #40]	; 0x28
 8011376:	4b05      	ldr	r3, [pc, #20]	; (801138c <std+0x40>)
 8011378:	62e3      	str	r3, [r4, #44]	; 0x2c
 801137a:	4b05      	ldr	r3, [pc, #20]	; (8011390 <std+0x44>)
 801137c:	6224      	str	r4, [r4, #32]
 801137e:	6323      	str	r3, [r4, #48]	; 0x30
 8011380:	bd10      	pop	{r4, pc}
 8011382:	bf00      	nop
 8011384:	08011ca9 	.word	0x08011ca9
 8011388:	08011ccb 	.word	0x08011ccb
 801138c:	08011d03 	.word	0x08011d03
 8011390:	08011d27 	.word	0x08011d27

08011394 <_cleanup_r>:
 8011394:	4901      	ldr	r1, [pc, #4]	; (801139c <_cleanup_r+0x8>)
 8011396:	f000 b885 	b.w	80114a4 <_fwalk_reent>
 801139a:	bf00      	nop
 801139c:	080112f9 	.word	0x080112f9

080113a0 <__sfmoreglue>:
 80113a0:	b570      	push	{r4, r5, r6, lr}
 80113a2:	1e4a      	subs	r2, r1, #1
 80113a4:	2568      	movs	r5, #104	; 0x68
 80113a6:	4355      	muls	r5, r2
 80113a8:	460e      	mov	r6, r1
 80113aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80113ae:	f000 f949 	bl	8011644 <_malloc_r>
 80113b2:	4604      	mov	r4, r0
 80113b4:	b140      	cbz	r0, 80113c8 <__sfmoreglue+0x28>
 80113b6:	2100      	movs	r1, #0
 80113b8:	e9c0 1600 	strd	r1, r6, [r0]
 80113bc:	300c      	adds	r0, #12
 80113be:	60a0      	str	r0, [r4, #8]
 80113c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80113c4:	f7ff fdcd 	bl	8010f62 <memset>
 80113c8:	4620      	mov	r0, r4
 80113ca:	bd70      	pop	{r4, r5, r6, pc}

080113cc <__sinit>:
 80113cc:	6983      	ldr	r3, [r0, #24]
 80113ce:	b510      	push	{r4, lr}
 80113d0:	4604      	mov	r4, r0
 80113d2:	bb33      	cbnz	r3, 8011422 <__sinit+0x56>
 80113d4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80113d8:	6503      	str	r3, [r0, #80]	; 0x50
 80113da:	4b12      	ldr	r3, [pc, #72]	; (8011424 <__sinit+0x58>)
 80113dc:	4a12      	ldr	r2, [pc, #72]	; (8011428 <__sinit+0x5c>)
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	6282      	str	r2, [r0, #40]	; 0x28
 80113e2:	4298      	cmp	r0, r3
 80113e4:	bf04      	itt	eq
 80113e6:	2301      	moveq	r3, #1
 80113e8:	6183      	streq	r3, [r0, #24]
 80113ea:	f000 f81f 	bl	801142c <__sfp>
 80113ee:	6060      	str	r0, [r4, #4]
 80113f0:	4620      	mov	r0, r4
 80113f2:	f000 f81b 	bl	801142c <__sfp>
 80113f6:	60a0      	str	r0, [r4, #8]
 80113f8:	4620      	mov	r0, r4
 80113fa:	f000 f817 	bl	801142c <__sfp>
 80113fe:	2200      	movs	r2, #0
 8011400:	60e0      	str	r0, [r4, #12]
 8011402:	2104      	movs	r1, #4
 8011404:	6860      	ldr	r0, [r4, #4]
 8011406:	f7ff ffa1 	bl	801134c <std>
 801140a:	2201      	movs	r2, #1
 801140c:	2109      	movs	r1, #9
 801140e:	68a0      	ldr	r0, [r4, #8]
 8011410:	f7ff ff9c 	bl	801134c <std>
 8011414:	2202      	movs	r2, #2
 8011416:	2112      	movs	r1, #18
 8011418:	68e0      	ldr	r0, [r4, #12]
 801141a:	f7ff ff97 	bl	801134c <std>
 801141e:	2301      	movs	r3, #1
 8011420:	61a3      	str	r3, [r4, #24]
 8011422:	bd10      	pop	{r4, pc}
 8011424:	080269e0 	.word	0x080269e0
 8011428:	08011395 	.word	0x08011395

0801142c <__sfp>:
 801142c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801142e:	4b1b      	ldr	r3, [pc, #108]	; (801149c <__sfp+0x70>)
 8011430:	681e      	ldr	r6, [r3, #0]
 8011432:	69b3      	ldr	r3, [r6, #24]
 8011434:	4607      	mov	r7, r0
 8011436:	b913      	cbnz	r3, 801143e <__sfp+0x12>
 8011438:	4630      	mov	r0, r6
 801143a:	f7ff ffc7 	bl	80113cc <__sinit>
 801143e:	3648      	adds	r6, #72	; 0x48
 8011440:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011444:	3b01      	subs	r3, #1
 8011446:	d503      	bpl.n	8011450 <__sfp+0x24>
 8011448:	6833      	ldr	r3, [r6, #0]
 801144a:	b133      	cbz	r3, 801145a <__sfp+0x2e>
 801144c:	6836      	ldr	r6, [r6, #0]
 801144e:	e7f7      	b.n	8011440 <__sfp+0x14>
 8011450:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011454:	b16d      	cbz	r5, 8011472 <__sfp+0x46>
 8011456:	3468      	adds	r4, #104	; 0x68
 8011458:	e7f4      	b.n	8011444 <__sfp+0x18>
 801145a:	2104      	movs	r1, #4
 801145c:	4638      	mov	r0, r7
 801145e:	f7ff ff9f 	bl	80113a0 <__sfmoreglue>
 8011462:	6030      	str	r0, [r6, #0]
 8011464:	2800      	cmp	r0, #0
 8011466:	d1f1      	bne.n	801144c <__sfp+0x20>
 8011468:	230c      	movs	r3, #12
 801146a:	603b      	str	r3, [r7, #0]
 801146c:	4604      	mov	r4, r0
 801146e:	4620      	mov	r0, r4
 8011470:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011472:	4b0b      	ldr	r3, [pc, #44]	; (80114a0 <__sfp+0x74>)
 8011474:	6665      	str	r5, [r4, #100]	; 0x64
 8011476:	e9c4 5500 	strd	r5, r5, [r4]
 801147a:	60a5      	str	r5, [r4, #8]
 801147c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8011480:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8011484:	2208      	movs	r2, #8
 8011486:	4629      	mov	r1, r5
 8011488:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801148c:	f7ff fd69 	bl	8010f62 <memset>
 8011490:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011494:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011498:	e7e9      	b.n	801146e <__sfp+0x42>
 801149a:	bf00      	nop
 801149c:	080269e0 	.word	0x080269e0
 80114a0:	ffff0001 	.word	0xffff0001

080114a4 <_fwalk_reent>:
 80114a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80114a8:	4680      	mov	r8, r0
 80114aa:	4689      	mov	r9, r1
 80114ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80114b0:	2600      	movs	r6, #0
 80114b2:	b914      	cbnz	r4, 80114ba <_fwalk_reent+0x16>
 80114b4:	4630      	mov	r0, r6
 80114b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80114ba:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80114be:	3f01      	subs	r7, #1
 80114c0:	d501      	bpl.n	80114c6 <_fwalk_reent+0x22>
 80114c2:	6824      	ldr	r4, [r4, #0]
 80114c4:	e7f5      	b.n	80114b2 <_fwalk_reent+0xe>
 80114c6:	89ab      	ldrh	r3, [r5, #12]
 80114c8:	2b01      	cmp	r3, #1
 80114ca:	d907      	bls.n	80114dc <_fwalk_reent+0x38>
 80114cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80114d0:	3301      	adds	r3, #1
 80114d2:	d003      	beq.n	80114dc <_fwalk_reent+0x38>
 80114d4:	4629      	mov	r1, r5
 80114d6:	4640      	mov	r0, r8
 80114d8:	47c8      	blx	r9
 80114da:	4306      	orrs	r6, r0
 80114dc:	3568      	adds	r5, #104	; 0x68
 80114de:	e7ee      	b.n	80114be <_fwalk_reent+0x1a>

080114e0 <__swhatbuf_r>:
 80114e0:	b570      	push	{r4, r5, r6, lr}
 80114e2:	460e      	mov	r6, r1
 80114e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80114e8:	2900      	cmp	r1, #0
 80114ea:	b096      	sub	sp, #88	; 0x58
 80114ec:	4614      	mov	r4, r2
 80114ee:	461d      	mov	r5, r3
 80114f0:	da07      	bge.n	8011502 <__swhatbuf_r+0x22>
 80114f2:	2300      	movs	r3, #0
 80114f4:	602b      	str	r3, [r5, #0]
 80114f6:	89b3      	ldrh	r3, [r6, #12]
 80114f8:	061a      	lsls	r2, r3, #24
 80114fa:	d410      	bmi.n	801151e <__swhatbuf_r+0x3e>
 80114fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011500:	e00e      	b.n	8011520 <__swhatbuf_r+0x40>
 8011502:	466a      	mov	r2, sp
 8011504:	f000 fc36 	bl	8011d74 <_fstat_r>
 8011508:	2800      	cmp	r0, #0
 801150a:	dbf2      	blt.n	80114f2 <__swhatbuf_r+0x12>
 801150c:	9a01      	ldr	r2, [sp, #4]
 801150e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011512:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011516:	425a      	negs	r2, r3
 8011518:	415a      	adcs	r2, r3
 801151a:	602a      	str	r2, [r5, #0]
 801151c:	e7ee      	b.n	80114fc <__swhatbuf_r+0x1c>
 801151e:	2340      	movs	r3, #64	; 0x40
 8011520:	2000      	movs	r0, #0
 8011522:	6023      	str	r3, [r4, #0]
 8011524:	b016      	add	sp, #88	; 0x58
 8011526:	bd70      	pop	{r4, r5, r6, pc}

08011528 <__smakebuf_r>:
 8011528:	898b      	ldrh	r3, [r1, #12]
 801152a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801152c:	079d      	lsls	r5, r3, #30
 801152e:	4606      	mov	r6, r0
 8011530:	460c      	mov	r4, r1
 8011532:	d507      	bpl.n	8011544 <__smakebuf_r+0x1c>
 8011534:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011538:	6023      	str	r3, [r4, #0]
 801153a:	6123      	str	r3, [r4, #16]
 801153c:	2301      	movs	r3, #1
 801153e:	6163      	str	r3, [r4, #20]
 8011540:	b002      	add	sp, #8
 8011542:	bd70      	pop	{r4, r5, r6, pc}
 8011544:	ab01      	add	r3, sp, #4
 8011546:	466a      	mov	r2, sp
 8011548:	f7ff ffca 	bl	80114e0 <__swhatbuf_r>
 801154c:	9900      	ldr	r1, [sp, #0]
 801154e:	4605      	mov	r5, r0
 8011550:	4630      	mov	r0, r6
 8011552:	f000 f877 	bl	8011644 <_malloc_r>
 8011556:	b948      	cbnz	r0, 801156c <__smakebuf_r+0x44>
 8011558:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801155c:	059a      	lsls	r2, r3, #22
 801155e:	d4ef      	bmi.n	8011540 <__smakebuf_r+0x18>
 8011560:	f023 0303 	bic.w	r3, r3, #3
 8011564:	f043 0302 	orr.w	r3, r3, #2
 8011568:	81a3      	strh	r3, [r4, #12]
 801156a:	e7e3      	b.n	8011534 <__smakebuf_r+0xc>
 801156c:	4b0d      	ldr	r3, [pc, #52]	; (80115a4 <__smakebuf_r+0x7c>)
 801156e:	62b3      	str	r3, [r6, #40]	; 0x28
 8011570:	89a3      	ldrh	r3, [r4, #12]
 8011572:	6020      	str	r0, [r4, #0]
 8011574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011578:	81a3      	strh	r3, [r4, #12]
 801157a:	9b00      	ldr	r3, [sp, #0]
 801157c:	6163      	str	r3, [r4, #20]
 801157e:	9b01      	ldr	r3, [sp, #4]
 8011580:	6120      	str	r0, [r4, #16]
 8011582:	b15b      	cbz	r3, 801159c <__smakebuf_r+0x74>
 8011584:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011588:	4630      	mov	r0, r6
 801158a:	f000 fc05 	bl	8011d98 <_isatty_r>
 801158e:	b128      	cbz	r0, 801159c <__smakebuf_r+0x74>
 8011590:	89a3      	ldrh	r3, [r4, #12]
 8011592:	f023 0303 	bic.w	r3, r3, #3
 8011596:	f043 0301 	orr.w	r3, r3, #1
 801159a:	81a3      	strh	r3, [r4, #12]
 801159c:	89a3      	ldrh	r3, [r4, #12]
 801159e:	431d      	orrs	r5, r3
 80115a0:	81a5      	strh	r5, [r4, #12]
 80115a2:	e7cd      	b.n	8011540 <__smakebuf_r+0x18>
 80115a4:	08011395 	.word	0x08011395

080115a8 <_free_r>:
 80115a8:	b538      	push	{r3, r4, r5, lr}
 80115aa:	4605      	mov	r5, r0
 80115ac:	2900      	cmp	r1, #0
 80115ae:	d045      	beq.n	801163c <_free_r+0x94>
 80115b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80115b4:	1f0c      	subs	r4, r1, #4
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	bfb8      	it	lt
 80115ba:	18e4      	addlt	r4, r4, r3
 80115bc:	f000 fc0e 	bl	8011ddc <__malloc_lock>
 80115c0:	4a1f      	ldr	r2, [pc, #124]	; (8011640 <_free_r+0x98>)
 80115c2:	6813      	ldr	r3, [r2, #0]
 80115c4:	4610      	mov	r0, r2
 80115c6:	b933      	cbnz	r3, 80115d6 <_free_r+0x2e>
 80115c8:	6063      	str	r3, [r4, #4]
 80115ca:	6014      	str	r4, [r2, #0]
 80115cc:	4628      	mov	r0, r5
 80115ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80115d2:	f000 bc04 	b.w	8011dde <__malloc_unlock>
 80115d6:	42a3      	cmp	r3, r4
 80115d8:	d90c      	bls.n	80115f4 <_free_r+0x4c>
 80115da:	6821      	ldr	r1, [r4, #0]
 80115dc:	1862      	adds	r2, r4, r1
 80115de:	4293      	cmp	r3, r2
 80115e0:	bf04      	itt	eq
 80115e2:	681a      	ldreq	r2, [r3, #0]
 80115e4:	685b      	ldreq	r3, [r3, #4]
 80115e6:	6063      	str	r3, [r4, #4]
 80115e8:	bf04      	itt	eq
 80115ea:	1852      	addeq	r2, r2, r1
 80115ec:	6022      	streq	r2, [r4, #0]
 80115ee:	6004      	str	r4, [r0, #0]
 80115f0:	e7ec      	b.n	80115cc <_free_r+0x24>
 80115f2:	4613      	mov	r3, r2
 80115f4:	685a      	ldr	r2, [r3, #4]
 80115f6:	b10a      	cbz	r2, 80115fc <_free_r+0x54>
 80115f8:	42a2      	cmp	r2, r4
 80115fa:	d9fa      	bls.n	80115f2 <_free_r+0x4a>
 80115fc:	6819      	ldr	r1, [r3, #0]
 80115fe:	1858      	adds	r0, r3, r1
 8011600:	42a0      	cmp	r0, r4
 8011602:	d10b      	bne.n	801161c <_free_r+0x74>
 8011604:	6820      	ldr	r0, [r4, #0]
 8011606:	4401      	add	r1, r0
 8011608:	1858      	adds	r0, r3, r1
 801160a:	4282      	cmp	r2, r0
 801160c:	6019      	str	r1, [r3, #0]
 801160e:	d1dd      	bne.n	80115cc <_free_r+0x24>
 8011610:	6810      	ldr	r0, [r2, #0]
 8011612:	6852      	ldr	r2, [r2, #4]
 8011614:	605a      	str	r2, [r3, #4]
 8011616:	4401      	add	r1, r0
 8011618:	6019      	str	r1, [r3, #0]
 801161a:	e7d7      	b.n	80115cc <_free_r+0x24>
 801161c:	d902      	bls.n	8011624 <_free_r+0x7c>
 801161e:	230c      	movs	r3, #12
 8011620:	602b      	str	r3, [r5, #0]
 8011622:	e7d3      	b.n	80115cc <_free_r+0x24>
 8011624:	6820      	ldr	r0, [r4, #0]
 8011626:	1821      	adds	r1, r4, r0
 8011628:	428a      	cmp	r2, r1
 801162a:	bf04      	itt	eq
 801162c:	6811      	ldreq	r1, [r2, #0]
 801162e:	6852      	ldreq	r2, [r2, #4]
 8011630:	6062      	str	r2, [r4, #4]
 8011632:	bf04      	itt	eq
 8011634:	1809      	addeq	r1, r1, r0
 8011636:	6021      	streq	r1, [r4, #0]
 8011638:	605c      	str	r4, [r3, #4]
 801163a:	e7c7      	b.n	80115cc <_free_r+0x24>
 801163c:	bd38      	pop	{r3, r4, r5, pc}
 801163e:	bf00      	nop
 8011640:	20004200 	.word	0x20004200

08011644 <_malloc_r>:
 8011644:	b570      	push	{r4, r5, r6, lr}
 8011646:	1ccd      	adds	r5, r1, #3
 8011648:	f025 0503 	bic.w	r5, r5, #3
 801164c:	3508      	adds	r5, #8
 801164e:	2d0c      	cmp	r5, #12
 8011650:	bf38      	it	cc
 8011652:	250c      	movcc	r5, #12
 8011654:	2d00      	cmp	r5, #0
 8011656:	4606      	mov	r6, r0
 8011658:	db01      	blt.n	801165e <_malloc_r+0x1a>
 801165a:	42a9      	cmp	r1, r5
 801165c:	d903      	bls.n	8011666 <_malloc_r+0x22>
 801165e:	230c      	movs	r3, #12
 8011660:	6033      	str	r3, [r6, #0]
 8011662:	2000      	movs	r0, #0
 8011664:	bd70      	pop	{r4, r5, r6, pc}
 8011666:	f000 fbb9 	bl	8011ddc <__malloc_lock>
 801166a:	4a21      	ldr	r2, [pc, #132]	; (80116f0 <_malloc_r+0xac>)
 801166c:	6814      	ldr	r4, [r2, #0]
 801166e:	4621      	mov	r1, r4
 8011670:	b991      	cbnz	r1, 8011698 <_malloc_r+0x54>
 8011672:	4c20      	ldr	r4, [pc, #128]	; (80116f4 <_malloc_r+0xb0>)
 8011674:	6823      	ldr	r3, [r4, #0]
 8011676:	b91b      	cbnz	r3, 8011680 <_malloc_r+0x3c>
 8011678:	4630      	mov	r0, r6
 801167a:	f000 fb05 	bl	8011c88 <_sbrk_r>
 801167e:	6020      	str	r0, [r4, #0]
 8011680:	4629      	mov	r1, r5
 8011682:	4630      	mov	r0, r6
 8011684:	f000 fb00 	bl	8011c88 <_sbrk_r>
 8011688:	1c43      	adds	r3, r0, #1
 801168a:	d124      	bne.n	80116d6 <_malloc_r+0x92>
 801168c:	230c      	movs	r3, #12
 801168e:	6033      	str	r3, [r6, #0]
 8011690:	4630      	mov	r0, r6
 8011692:	f000 fba4 	bl	8011dde <__malloc_unlock>
 8011696:	e7e4      	b.n	8011662 <_malloc_r+0x1e>
 8011698:	680b      	ldr	r3, [r1, #0]
 801169a:	1b5b      	subs	r3, r3, r5
 801169c:	d418      	bmi.n	80116d0 <_malloc_r+0x8c>
 801169e:	2b0b      	cmp	r3, #11
 80116a0:	d90f      	bls.n	80116c2 <_malloc_r+0x7e>
 80116a2:	600b      	str	r3, [r1, #0]
 80116a4:	50cd      	str	r5, [r1, r3]
 80116a6:	18cc      	adds	r4, r1, r3
 80116a8:	4630      	mov	r0, r6
 80116aa:	f000 fb98 	bl	8011dde <__malloc_unlock>
 80116ae:	f104 000b 	add.w	r0, r4, #11
 80116b2:	1d23      	adds	r3, r4, #4
 80116b4:	f020 0007 	bic.w	r0, r0, #7
 80116b8:	1ac3      	subs	r3, r0, r3
 80116ba:	d0d3      	beq.n	8011664 <_malloc_r+0x20>
 80116bc:	425a      	negs	r2, r3
 80116be:	50e2      	str	r2, [r4, r3]
 80116c0:	e7d0      	b.n	8011664 <_malloc_r+0x20>
 80116c2:	428c      	cmp	r4, r1
 80116c4:	684b      	ldr	r3, [r1, #4]
 80116c6:	bf16      	itet	ne
 80116c8:	6063      	strne	r3, [r4, #4]
 80116ca:	6013      	streq	r3, [r2, #0]
 80116cc:	460c      	movne	r4, r1
 80116ce:	e7eb      	b.n	80116a8 <_malloc_r+0x64>
 80116d0:	460c      	mov	r4, r1
 80116d2:	6849      	ldr	r1, [r1, #4]
 80116d4:	e7cc      	b.n	8011670 <_malloc_r+0x2c>
 80116d6:	1cc4      	adds	r4, r0, #3
 80116d8:	f024 0403 	bic.w	r4, r4, #3
 80116dc:	42a0      	cmp	r0, r4
 80116de:	d005      	beq.n	80116ec <_malloc_r+0xa8>
 80116e0:	1a21      	subs	r1, r4, r0
 80116e2:	4630      	mov	r0, r6
 80116e4:	f000 fad0 	bl	8011c88 <_sbrk_r>
 80116e8:	3001      	adds	r0, #1
 80116ea:	d0cf      	beq.n	801168c <_malloc_r+0x48>
 80116ec:	6025      	str	r5, [r4, #0]
 80116ee:	e7db      	b.n	80116a8 <_malloc_r+0x64>
 80116f0:	20004200 	.word	0x20004200
 80116f4:	20004204 	.word	0x20004204

080116f8 <__sfputc_r>:
 80116f8:	6893      	ldr	r3, [r2, #8]
 80116fa:	3b01      	subs	r3, #1
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	b410      	push	{r4}
 8011700:	6093      	str	r3, [r2, #8]
 8011702:	da08      	bge.n	8011716 <__sfputc_r+0x1e>
 8011704:	6994      	ldr	r4, [r2, #24]
 8011706:	42a3      	cmp	r3, r4
 8011708:	db01      	blt.n	801170e <__sfputc_r+0x16>
 801170a:	290a      	cmp	r1, #10
 801170c:	d103      	bne.n	8011716 <__sfputc_r+0x1e>
 801170e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011712:	f7ff bcab 	b.w	801106c <__swbuf_r>
 8011716:	6813      	ldr	r3, [r2, #0]
 8011718:	1c58      	adds	r0, r3, #1
 801171a:	6010      	str	r0, [r2, #0]
 801171c:	7019      	strb	r1, [r3, #0]
 801171e:	4608      	mov	r0, r1
 8011720:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011724:	4770      	bx	lr

08011726 <__sfputs_r>:
 8011726:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011728:	4606      	mov	r6, r0
 801172a:	460f      	mov	r7, r1
 801172c:	4614      	mov	r4, r2
 801172e:	18d5      	adds	r5, r2, r3
 8011730:	42ac      	cmp	r4, r5
 8011732:	d101      	bne.n	8011738 <__sfputs_r+0x12>
 8011734:	2000      	movs	r0, #0
 8011736:	e007      	b.n	8011748 <__sfputs_r+0x22>
 8011738:	463a      	mov	r2, r7
 801173a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801173e:	4630      	mov	r0, r6
 8011740:	f7ff ffda 	bl	80116f8 <__sfputc_r>
 8011744:	1c43      	adds	r3, r0, #1
 8011746:	d1f3      	bne.n	8011730 <__sfputs_r+0xa>
 8011748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801174c <_vfiprintf_r>:
 801174c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011750:	460c      	mov	r4, r1
 8011752:	b09d      	sub	sp, #116	; 0x74
 8011754:	4617      	mov	r7, r2
 8011756:	461d      	mov	r5, r3
 8011758:	4606      	mov	r6, r0
 801175a:	b118      	cbz	r0, 8011764 <_vfiprintf_r+0x18>
 801175c:	6983      	ldr	r3, [r0, #24]
 801175e:	b90b      	cbnz	r3, 8011764 <_vfiprintf_r+0x18>
 8011760:	f7ff fe34 	bl	80113cc <__sinit>
 8011764:	4b7c      	ldr	r3, [pc, #496]	; (8011958 <_vfiprintf_r+0x20c>)
 8011766:	429c      	cmp	r4, r3
 8011768:	d158      	bne.n	801181c <_vfiprintf_r+0xd0>
 801176a:	6874      	ldr	r4, [r6, #4]
 801176c:	89a3      	ldrh	r3, [r4, #12]
 801176e:	0718      	lsls	r0, r3, #28
 8011770:	d55e      	bpl.n	8011830 <_vfiprintf_r+0xe4>
 8011772:	6923      	ldr	r3, [r4, #16]
 8011774:	2b00      	cmp	r3, #0
 8011776:	d05b      	beq.n	8011830 <_vfiprintf_r+0xe4>
 8011778:	2300      	movs	r3, #0
 801177a:	9309      	str	r3, [sp, #36]	; 0x24
 801177c:	2320      	movs	r3, #32
 801177e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011782:	2330      	movs	r3, #48	; 0x30
 8011784:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011788:	9503      	str	r5, [sp, #12]
 801178a:	f04f 0b01 	mov.w	fp, #1
 801178e:	46b8      	mov	r8, r7
 8011790:	4645      	mov	r5, r8
 8011792:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011796:	b10b      	cbz	r3, 801179c <_vfiprintf_r+0x50>
 8011798:	2b25      	cmp	r3, #37	; 0x25
 801179a:	d154      	bne.n	8011846 <_vfiprintf_r+0xfa>
 801179c:	ebb8 0a07 	subs.w	sl, r8, r7
 80117a0:	d00b      	beq.n	80117ba <_vfiprintf_r+0x6e>
 80117a2:	4653      	mov	r3, sl
 80117a4:	463a      	mov	r2, r7
 80117a6:	4621      	mov	r1, r4
 80117a8:	4630      	mov	r0, r6
 80117aa:	f7ff ffbc 	bl	8011726 <__sfputs_r>
 80117ae:	3001      	adds	r0, #1
 80117b0:	f000 80c2 	beq.w	8011938 <_vfiprintf_r+0x1ec>
 80117b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80117b6:	4453      	add	r3, sl
 80117b8:	9309      	str	r3, [sp, #36]	; 0x24
 80117ba:	f898 3000 	ldrb.w	r3, [r8]
 80117be:	2b00      	cmp	r3, #0
 80117c0:	f000 80ba 	beq.w	8011938 <_vfiprintf_r+0x1ec>
 80117c4:	2300      	movs	r3, #0
 80117c6:	f04f 32ff 	mov.w	r2, #4294967295
 80117ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80117ce:	9304      	str	r3, [sp, #16]
 80117d0:	9307      	str	r3, [sp, #28]
 80117d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80117d6:	931a      	str	r3, [sp, #104]	; 0x68
 80117d8:	46a8      	mov	r8, r5
 80117da:	2205      	movs	r2, #5
 80117dc:	f818 1b01 	ldrb.w	r1, [r8], #1
 80117e0:	485e      	ldr	r0, [pc, #376]	; (801195c <_vfiprintf_r+0x210>)
 80117e2:	f7f6 fc2d 	bl	8008040 <memchr>
 80117e6:	9b04      	ldr	r3, [sp, #16]
 80117e8:	bb78      	cbnz	r0, 801184a <_vfiprintf_r+0xfe>
 80117ea:	06d9      	lsls	r1, r3, #27
 80117ec:	bf44      	itt	mi
 80117ee:	2220      	movmi	r2, #32
 80117f0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80117f4:	071a      	lsls	r2, r3, #28
 80117f6:	bf44      	itt	mi
 80117f8:	222b      	movmi	r2, #43	; 0x2b
 80117fa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80117fe:	782a      	ldrb	r2, [r5, #0]
 8011800:	2a2a      	cmp	r2, #42	; 0x2a
 8011802:	d02a      	beq.n	801185a <_vfiprintf_r+0x10e>
 8011804:	9a07      	ldr	r2, [sp, #28]
 8011806:	46a8      	mov	r8, r5
 8011808:	2000      	movs	r0, #0
 801180a:	250a      	movs	r5, #10
 801180c:	4641      	mov	r1, r8
 801180e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011812:	3b30      	subs	r3, #48	; 0x30
 8011814:	2b09      	cmp	r3, #9
 8011816:	d969      	bls.n	80118ec <_vfiprintf_r+0x1a0>
 8011818:	b360      	cbz	r0, 8011874 <_vfiprintf_r+0x128>
 801181a:	e024      	b.n	8011866 <_vfiprintf_r+0x11a>
 801181c:	4b50      	ldr	r3, [pc, #320]	; (8011960 <_vfiprintf_r+0x214>)
 801181e:	429c      	cmp	r4, r3
 8011820:	d101      	bne.n	8011826 <_vfiprintf_r+0xda>
 8011822:	68b4      	ldr	r4, [r6, #8]
 8011824:	e7a2      	b.n	801176c <_vfiprintf_r+0x20>
 8011826:	4b4f      	ldr	r3, [pc, #316]	; (8011964 <_vfiprintf_r+0x218>)
 8011828:	429c      	cmp	r4, r3
 801182a:	bf08      	it	eq
 801182c:	68f4      	ldreq	r4, [r6, #12]
 801182e:	e79d      	b.n	801176c <_vfiprintf_r+0x20>
 8011830:	4621      	mov	r1, r4
 8011832:	4630      	mov	r0, r6
 8011834:	f7ff fc6c 	bl	8011110 <__swsetup_r>
 8011838:	2800      	cmp	r0, #0
 801183a:	d09d      	beq.n	8011778 <_vfiprintf_r+0x2c>
 801183c:	f04f 30ff 	mov.w	r0, #4294967295
 8011840:	b01d      	add	sp, #116	; 0x74
 8011842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011846:	46a8      	mov	r8, r5
 8011848:	e7a2      	b.n	8011790 <_vfiprintf_r+0x44>
 801184a:	4a44      	ldr	r2, [pc, #272]	; (801195c <_vfiprintf_r+0x210>)
 801184c:	1a80      	subs	r0, r0, r2
 801184e:	fa0b f000 	lsl.w	r0, fp, r0
 8011852:	4318      	orrs	r0, r3
 8011854:	9004      	str	r0, [sp, #16]
 8011856:	4645      	mov	r5, r8
 8011858:	e7be      	b.n	80117d8 <_vfiprintf_r+0x8c>
 801185a:	9a03      	ldr	r2, [sp, #12]
 801185c:	1d11      	adds	r1, r2, #4
 801185e:	6812      	ldr	r2, [r2, #0]
 8011860:	9103      	str	r1, [sp, #12]
 8011862:	2a00      	cmp	r2, #0
 8011864:	db01      	blt.n	801186a <_vfiprintf_r+0x11e>
 8011866:	9207      	str	r2, [sp, #28]
 8011868:	e004      	b.n	8011874 <_vfiprintf_r+0x128>
 801186a:	4252      	negs	r2, r2
 801186c:	f043 0302 	orr.w	r3, r3, #2
 8011870:	9207      	str	r2, [sp, #28]
 8011872:	9304      	str	r3, [sp, #16]
 8011874:	f898 3000 	ldrb.w	r3, [r8]
 8011878:	2b2e      	cmp	r3, #46	; 0x2e
 801187a:	d10e      	bne.n	801189a <_vfiprintf_r+0x14e>
 801187c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8011880:	2b2a      	cmp	r3, #42	; 0x2a
 8011882:	d138      	bne.n	80118f6 <_vfiprintf_r+0x1aa>
 8011884:	9b03      	ldr	r3, [sp, #12]
 8011886:	1d1a      	adds	r2, r3, #4
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	9203      	str	r2, [sp, #12]
 801188c:	2b00      	cmp	r3, #0
 801188e:	bfb8      	it	lt
 8011890:	f04f 33ff 	movlt.w	r3, #4294967295
 8011894:	f108 0802 	add.w	r8, r8, #2
 8011898:	9305      	str	r3, [sp, #20]
 801189a:	4d33      	ldr	r5, [pc, #204]	; (8011968 <_vfiprintf_r+0x21c>)
 801189c:	f898 1000 	ldrb.w	r1, [r8]
 80118a0:	2203      	movs	r2, #3
 80118a2:	4628      	mov	r0, r5
 80118a4:	f7f6 fbcc 	bl	8008040 <memchr>
 80118a8:	b140      	cbz	r0, 80118bc <_vfiprintf_r+0x170>
 80118aa:	2340      	movs	r3, #64	; 0x40
 80118ac:	1b40      	subs	r0, r0, r5
 80118ae:	fa03 f000 	lsl.w	r0, r3, r0
 80118b2:	9b04      	ldr	r3, [sp, #16]
 80118b4:	4303      	orrs	r3, r0
 80118b6:	f108 0801 	add.w	r8, r8, #1
 80118ba:	9304      	str	r3, [sp, #16]
 80118bc:	f898 1000 	ldrb.w	r1, [r8]
 80118c0:	482a      	ldr	r0, [pc, #168]	; (801196c <_vfiprintf_r+0x220>)
 80118c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80118c6:	2206      	movs	r2, #6
 80118c8:	f108 0701 	add.w	r7, r8, #1
 80118cc:	f7f6 fbb8 	bl	8008040 <memchr>
 80118d0:	2800      	cmp	r0, #0
 80118d2:	d037      	beq.n	8011944 <_vfiprintf_r+0x1f8>
 80118d4:	4b26      	ldr	r3, [pc, #152]	; (8011970 <_vfiprintf_r+0x224>)
 80118d6:	bb1b      	cbnz	r3, 8011920 <_vfiprintf_r+0x1d4>
 80118d8:	9b03      	ldr	r3, [sp, #12]
 80118da:	3307      	adds	r3, #7
 80118dc:	f023 0307 	bic.w	r3, r3, #7
 80118e0:	3308      	adds	r3, #8
 80118e2:	9303      	str	r3, [sp, #12]
 80118e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118e6:	444b      	add	r3, r9
 80118e8:	9309      	str	r3, [sp, #36]	; 0x24
 80118ea:	e750      	b.n	801178e <_vfiprintf_r+0x42>
 80118ec:	fb05 3202 	mla	r2, r5, r2, r3
 80118f0:	2001      	movs	r0, #1
 80118f2:	4688      	mov	r8, r1
 80118f4:	e78a      	b.n	801180c <_vfiprintf_r+0xc0>
 80118f6:	2300      	movs	r3, #0
 80118f8:	f108 0801 	add.w	r8, r8, #1
 80118fc:	9305      	str	r3, [sp, #20]
 80118fe:	4619      	mov	r1, r3
 8011900:	250a      	movs	r5, #10
 8011902:	4640      	mov	r0, r8
 8011904:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011908:	3a30      	subs	r2, #48	; 0x30
 801190a:	2a09      	cmp	r2, #9
 801190c:	d903      	bls.n	8011916 <_vfiprintf_r+0x1ca>
 801190e:	2b00      	cmp	r3, #0
 8011910:	d0c3      	beq.n	801189a <_vfiprintf_r+0x14e>
 8011912:	9105      	str	r1, [sp, #20]
 8011914:	e7c1      	b.n	801189a <_vfiprintf_r+0x14e>
 8011916:	fb05 2101 	mla	r1, r5, r1, r2
 801191a:	2301      	movs	r3, #1
 801191c:	4680      	mov	r8, r0
 801191e:	e7f0      	b.n	8011902 <_vfiprintf_r+0x1b6>
 8011920:	ab03      	add	r3, sp, #12
 8011922:	9300      	str	r3, [sp, #0]
 8011924:	4622      	mov	r2, r4
 8011926:	4b13      	ldr	r3, [pc, #76]	; (8011974 <_vfiprintf_r+0x228>)
 8011928:	a904      	add	r1, sp, #16
 801192a:	4630      	mov	r0, r6
 801192c:	f3af 8000 	nop.w
 8011930:	f1b0 3fff 	cmp.w	r0, #4294967295
 8011934:	4681      	mov	r9, r0
 8011936:	d1d5      	bne.n	80118e4 <_vfiprintf_r+0x198>
 8011938:	89a3      	ldrh	r3, [r4, #12]
 801193a:	065b      	lsls	r3, r3, #25
 801193c:	f53f af7e 	bmi.w	801183c <_vfiprintf_r+0xf0>
 8011940:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011942:	e77d      	b.n	8011840 <_vfiprintf_r+0xf4>
 8011944:	ab03      	add	r3, sp, #12
 8011946:	9300      	str	r3, [sp, #0]
 8011948:	4622      	mov	r2, r4
 801194a:	4b0a      	ldr	r3, [pc, #40]	; (8011974 <_vfiprintf_r+0x228>)
 801194c:	a904      	add	r1, sp, #16
 801194e:	4630      	mov	r0, r6
 8011950:	f000 f888 	bl	8011a64 <_printf_i>
 8011954:	e7ec      	b.n	8011930 <_vfiprintf_r+0x1e4>
 8011956:	bf00      	nop
 8011958:	08026a04 	.word	0x08026a04
 801195c:	08026a44 	.word	0x08026a44
 8011960:	08026a24 	.word	0x08026a24
 8011964:	080269e4 	.word	0x080269e4
 8011968:	08026a4a 	.word	0x08026a4a
 801196c:	08026a4e 	.word	0x08026a4e
 8011970:	00000000 	.word	0x00000000
 8011974:	08011727 	.word	0x08011727

08011978 <_printf_common>:
 8011978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801197c:	4691      	mov	r9, r2
 801197e:	461f      	mov	r7, r3
 8011980:	688a      	ldr	r2, [r1, #8]
 8011982:	690b      	ldr	r3, [r1, #16]
 8011984:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011988:	4293      	cmp	r3, r2
 801198a:	bfb8      	it	lt
 801198c:	4613      	movlt	r3, r2
 801198e:	f8c9 3000 	str.w	r3, [r9]
 8011992:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011996:	4606      	mov	r6, r0
 8011998:	460c      	mov	r4, r1
 801199a:	b112      	cbz	r2, 80119a2 <_printf_common+0x2a>
 801199c:	3301      	adds	r3, #1
 801199e:	f8c9 3000 	str.w	r3, [r9]
 80119a2:	6823      	ldr	r3, [r4, #0]
 80119a4:	0699      	lsls	r1, r3, #26
 80119a6:	bf42      	ittt	mi
 80119a8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80119ac:	3302      	addmi	r3, #2
 80119ae:	f8c9 3000 	strmi.w	r3, [r9]
 80119b2:	6825      	ldr	r5, [r4, #0]
 80119b4:	f015 0506 	ands.w	r5, r5, #6
 80119b8:	d107      	bne.n	80119ca <_printf_common+0x52>
 80119ba:	f104 0a19 	add.w	sl, r4, #25
 80119be:	68e3      	ldr	r3, [r4, #12]
 80119c0:	f8d9 2000 	ldr.w	r2, [r9]
 80119c4:	1a9b      	subs	r3, r3, r2
 80119c6:	42ab      	cmp	r3, r5
 80119c8:	dc28      	bgt.n	8011a1c <_printf_common+0xa4>
 80119ca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80119ce:	6822      	ldr	r2, [r4, #0]
 80119d0:	3300      	adds	r3, #0
 80119d2:	bf18      	it	ne
 80119d4:	2301      	movne	r3, #1
 80119d6:	0692      	lsls	r2, r2, #26
 80119d8:	d42d      	bmi.n	8011a36 <_printf_common+0xbe>
 80119da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80119de:	4639      	mov	r1, r7
 80119e0:	4630      	mov	r0, r6
 80119e2:	47c0      	blx	r8
 80119e4:	3001      	adds	r0, #1
 80119e6:	d020      	beq.n	8011a2a <_printf_common+0xb2>
 80119e8:	6823      	ldr	r3, [r4, #0]
 80119ea:	68e5      	ldr	r5, [r4, #12]
 80119ec:	f8d9 2000 	ldr.w	r2, [r9]
 80119f0:	f003 0306 	and.w	r3, r3, #6
 80119f4:	2b04      	cmp	r3, #4
 80119f6:	bf08      	it	eq
 80119f8:	1aad      	subeq	r5, r5, r2
 80119fa:	68a3      	ldr	r3, [r4, #8]
 80119fc:	6922      	ldr	r2, [r4, #16]
 80119fe:	bf0c      	ite	eq
 8011a00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011a04:	2500      	movne	r5, #0
 8011a06:	4293      	cmp	r3, r2
 8011a08:	bfc4      	itt	gt
 8011a0a:	1a9b      	subgt	r3, r3, r2
 8011a0c:	18ed      	addgt	r5, r5, r3
 8011a0e:	f04f 0900 	mov.w	r9, #0
 8011a12:	341a      	adds	r4, #26
 8011a14:	454d      	cmp	r5, r9
 8011a16:	d11a      	bne.n	8011a4e <_printf_common+0xd6>
 8011a18:	2000      	movs	r0, #0
 8011a1a:	e008      	b.n	8011a2e <_printf_common+0xb6>
 8011a1c:	2301      	movs	r3, #1
 8011a1e:	4652      	mov	r2, sl
 8011a20:	4639      	mov	r1, r7
 8011a22:	4630      	mov	r0, r6
 8011a24:	47c0      	blx	r8
 8011a26:	3001      	adds	r0, #1
 8011a28:	d103      	bne.n	8011a32 <_printf_common+0xba>
 8011a2a:	f04f 30ff 	mov.w	r0, #4294967295
 8011a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a32:	3501      	adds	r5, #1
 8011a34:	e7c3      	b.n	80119be <_printf_common+0x46>
 8011a36:	18e1      	adds	r1, r4, r3
 8011a38:	1c5a      	adds	r2, r3, #1
 8011a3a:	2030      	movs	r0, #48	; 0x30
 8011a3c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011a40:	4422      	add	r2, r4
 8011a42:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011a46:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011a4a:	3302      	adds	r3, #2
 8011a4c:	e7c5      	b.n	80119da <_printf_common+0x62>
 8011a4e:	2301      	movs	r3, #1
 8011a50:	4622      	mov	r2, r4
 8011a52:	4639      	mov	r1, r7
 8011a54:	4630      	mov	r0, r6
 8011a56:	47c0      	blx	r8
 8011a58:	3001      	adds	r0, #1
 8011a5a:	d0e6      	beq.n	8011a2a <_printf_common+0xb2>
 8011a5c:	f109 0901 	add.w	r9, r9, #1
 8011a60:	e7d8      	b.n	8011a14 <_printf_common+0x9c>
	...

08011a64 <_printf_i>:
 8011a64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011a68:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8011a6c:	460c      	mov	r4, r1
 8011a6e:	7e09      	ldrb	r1, [r1, #24]
 8011a70:	b085      	sub	sp, #20
 8011a72:	296e      	cmp	r1, #110	; 0x6e
 8011a74:	4617      	mov	r7, r2
 8011a76:	4606      	mov	r6, r0
 8011a78:	4698      	mov	r8, r3
 8011a7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011a7c:	f000 80b3 	beq.w	8011be6 <_printf_i+0x182>
 8011a80:	d822      	bhi.n	8011ac8 <_printf_i+0x64>
 8011a82:	2963      	cmp	r1, #99	; 0x63
 8011a84:	d036      	beq.n	8011af4 <_printf_i+0x90>
 8011a86:	d80a      	bhi.n	8011a9e <_printf_i+0x3a>
 8011a88:	2900      	cmp	r1, #0
 8011a8a:	f000 80b9 	beq.w	8011c00 <_printf_i+0x19c>
 8011a8e:	2958      	cmp	r1, #88	; 0x58
 8011a90:	f000 8083 	beq.w	8011b9a <_printf_i+0x136>
 8011a94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011a98:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8011a9c:	e032      	b.n	8011b04 <_printf_i+0xa0>
 8011a9e:	2964      	cmp	r1, #100	; 0x64
 8011aa0:	d001      	beq.n	8011aa6 <_printf_i+0x42>
 8011aa2:	2969      	cmp	r1, #105	; 0x69
 8011aa4:	d1f6      	bne.n	8011a94 <_printf_i+0x30>
 8011aa6:	6820      	ldr	r0, [r4, #0]
 8011aa8:	6813      	ldr	r3, [r2, #0]
 8011aaa:	0605      	lsls	r5, r0, #24
 8011aac:	f103 0104 	add.w	r1, r3, #4
 8011ab0:	d52a      	bpl.n	8011b08 <_printf_i+0xa4>
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	6011      	str	r1, [r2, #0]
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	da03      	bge.n	8011ac2 <_printf_i+0x5e>
 8011aba:	222d      	movs	r2, #45	; 0x2d
 8011abc:	425b      	negs	r3, r3
 8011abe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8011ac2:	486f      	ldr	r0, [pc, #444]	; (8011c80 <_printf_i+0x21c>)
 8011ac4:	220a      	movs	r2, #10
 8011ac6:	e039      	b.n	8011b3c <_printf_i+0xd8>
 8011ac8:	2973      	cmp	r1, #115	; 0x73
 8011aca:	f000 809d 	beq.w	8011c08 <_printf_i+0x1a4>
 8011ace:	d808      	bhi.n	8011ae2 <_printf_i+0x7e>
 8011ad0:	296f      	cmp	r1, #111	; 0x6f
 8011ad2:	d020      	beq.n	8011b16 <_printf_i+0xb2>
 8011ad4:	2970      	cmp	r1, #112	; 0x70
 8011ad6:	d1dd      	bne.n	8011a94 <_printf_i+0x30>
 8011ad8:	6823      	ldr	r3, [r4, #0]
 8011ada:	f043 0320 	orr.w	r3, r3, #32
 8011ade:	6023      	str	r3, [r4, #0]
 8011ae0:	e003      	b.n	8011aea <_printf_i+0x86>
 8011ae2:	2975      	cmp	r1, #117	; 0x75
 8011ae4:	d017      	beq.n	8011b16 <_printf_i+0xb2>
 8011ae6:	2978      	cmp	r1, #120	; 0x78
 8011ae8:	d1d4      	bne.n	8011a94 <_printf_i+0x30>
 8011aea:	2378      	movs	r3, #120	; 0x78
 8011aec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011af0:	4864      	ldr	r0, [pc, #400]	; (8011c84 <_printf_i+0x220>)
 8011af2:	e055      	b.n	8011ba0 <_printf_i+0x13c>
 8011af4:	6813      	ldr	r3, [r2, #0]
 8011af6:	1d19      	adds	r1, r3, #4
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	6011      	str	r1, [r2, #0]
 8011afc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011b00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011b04:	2301      	movs	r3, #1
 8011b06:	e08c      	b.n	8011c22 <_printf_i+0x1be>
 8011b08:	681b      	ldr	r3, [r3, #0]
 8011b0a:	6011      	str	r1, [r2, #0]
 8011b0c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011b10:	bf18      	it	ne
 8011b12:	b21b      	sxthne	r3, r3
 8011b14:	e7cf      	b.n	8011ab6 <_printf_i+0x52>
 8011b16:	6813      	ldr	r3, [r2, #0]
 8011b18:	6825      	ldr	r5, [r4, #0]
 8011b1a:	1d18      	adds	r0, r3, #4
 8011b1c:	6010      	str	r0, [r2, #0]
 8011b1e:	0628      	lsls	r0, r5, #24
 8011b20:	d501      	bpl.n	8011b26 <_printf_i+0xc2>
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	e002      	b.n	8011b2c <_printf_i+0xc8>
 8011b26:	0668      	lsls	r0, r5, #25
 8011b28:	d5fb      	bpl.n	8011b22 <_printf_i+0xbe>
 8011b2a:	881b      	ldrh	r3, [r3, #0]
 8011b2c:	4854      	ldr	r0, [pc, #336]	; (8011c80 <_printf_i+0x21c>)
 8011b2e:	296f      	cmp	r1, #111	; 0x6f
 8011b30:	bf14      	ite	ne
 8011b32:	220a      	movne	r2, #10
 8011b34:	2208      	moveq	r2, #8
 8011b36:	2100      	movs	r1, #0
 8011b38:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011b3c:	6865      	ldr	r5, [r4, #4]
 8011b3e:	60a5      	str	r5, [r4, #8]
 8011b40:	2d00      	cmp	r5, #0
 8011b42:	f2c0 8095 	blt.w	8011c70 <_printf_i+0x20c>
 8011b46:	6821      	ldr	r1, [r4, #0]
 8011b48:	f021 0104 	bic.w	r1, r1, #4
 8011b4c:	6021      	str	r1, [r4, #0]
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d13d      	bne.n	8011bce <_printf_i+0x16a>
 8011b52:	2d00      	cmp	r5, #0
 8011b54:	f040 808e 	bne.w	8011c74 <_printf_i+0x210>
 8011b58:	4665      	mov	r5, ip
 8011b5a:	2a08      	cmp	r2, #8
 8011b5c:	d10b      	bne.n	8011b76 <_printf_i+0x112>
 8011b5e:	6823      	ldr	r3, [r4, #0]
 8011b60:	07db      	lsls	r3, r3, #31
 8011b62:	d508      	bpl.n	8011b76 <_printf_i+0x112>
 8011b64:	6923      	ldr	r3, [r4, #16]
 8011b66:	6862      	ldr	r2, [r4, #4]
 8011b68:	429a      	cmp	r2, r3
 8011b6a:	bfde      	ittt	le
 8011b6c:	2330      	movle	r3, #48	; 0x30
 8011b6e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011b72:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011b76:	ebac 0305 	sub.w	r3, ip, r5
 8011b7a:	6123      	str	r3, [r4, #16]
 8011b7c:	f8cd 8000 	str.w	r8, [sp]
 8011b80:	463b      	mov	r3, r7
 8011b82:	aa03      	add	r2, sp, #12
 8011b84:	4621      	mov	r1, r4
 8011b86:	4630      	mov	r0, r6
 8011b88:	f7ff fef6 	bl	8011978 <_printf_common>
 8011b8c:	3001      	adds	r0, #1
 8011b8e:	d14d      	bne.n	8011c2c <_printf_i+0x1c8>
 8011b90:	f04f 30ff 	mov.w	r0, #4294967295
 8011b94:	b005      	add	sp, #20
 8011b96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011b9a:	4839      	ldr	r0, [pc, #228]	; (8011c80 <_printf_i+0x21c>)
 8011b9c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8011ba0:	6813      	ldr	r3, [r2, #0]
 8011ba2:	6821      	ldr	r1, [r4, #0]
 8011ba4:	1d1d      	adds	r5, r3, #4
 8011ba6:	681b      	ldr	r3, [r3, #0]
 8011ba8:	6015      	str	r5, [r2, #0]
 8011baa:	060a      	lsls	r2, r1, #24
 8011bac:	d50b      	bpl.n	8011bc6 <_printf_i+0x162>
 8011bae:	07ca      	lsls	r2, r1, #31
 8011bb0:	bf44      	itt	mi
 8011bb2:	f041 0120 	orrmi.w	r1, r1, #32
 8011bb6:	6021      	strmi	r1, [r4, #0]
 8011bb8:	b91b      	cbnz	r3, 8011bc2 <_printf_i+0x15e>
 8011bba:	6822      	ldr	r2, [r4, #0]
 8011bbc:	f022 0220 	bic.w	r2, r2, #32
 8011bc0:	6022      	str	r2, [r4, #0]
 8011bc2:	2210      	movs	r2, #16
 8011bc4:	e7b7      	b.n	8011b36 <_printf_i+0xd2>
 8011bc6:	064d      	lsls	r5, r1, #25
 8011bc8:	bf48      	it	mi
 8011bca:	b29b      	uxthmi	r3, r3
 8011bcc:	e7ef      	b.n	8011bae <_printf_i+0x14a>
 8011bce:	4665      	mov	r5, ip
 8011bd0:	fbb3 f1f2 	udiv	r1, r3, r2
 8011bd4:	fb02 3311 	mls	r3, r2, r1, r3
 8011bd8:	5cc3      	ldrb	r3, [r0, r3]
 8011bda:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8011bde:	460b      	mov	r3, r1
 8011be0:	2900      	cmp	r1, #0
 8011be2:	d1f5      	bne.n	8011bd0 <_printf_i+0x16c>
 8011be4:	e7b9      	b.n	8011b5a <_printf_i+0xf6>
 8011be6:	6813      	ldr	r3, [r2, #0]
 8011be8:	6825      	ldr	r5, [r4, #0]
 8011bea:	6961      	ldr	r1, [r4, #20]
 8011bec:	1d18      	adds	r0, r3, #4
 8011bee:	6010      	str	r0, [r2, #0]
 8011bf0:	0628      	lsls	r0, r5, #24
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	d501      	bpl.n	8011bfa <_printf_i+0x196>
 8011bf6:	6019      	str	r1, [r3, #0]
 8011bf8:	e002      	b.n	8011c00 <_printf_i+0x19c>
 8011bfa:	066a      	lsls	r2, r5, #25
 8011bfc:	d5fb      	bpl.n	8011bf6 <_printf_i+0x192>
 8011bfe:	8019      	strh	r1, [r3, #0]
 8011c00:	2300      	movs	r3, #0
 8011c02:	6123      	str	r3, [r4, #16]
 8011c04:	4665      	mov	r5, ip
 8011c06:	e7b9      	b.n	8011b7c <_printf_i+0x118>
 8011c08:	6813      	ldr	r3, [r2, #0]
 8011c0a:	1d19      	adds	r1, r3, #4
 8011c0c:	6011      	str	r1, [r2, #0]
 8011c0e:	681d      	ldr	r5, [r3, #0]
 8011c10:	6862      	ldr	r2, [r4, #4]
 8011c12:	2100      	movs	r1, #0
 8011c14:	4628      	mov	r0, r5
 8011c16:	f7f6 fa13 	bl	8008040 <memchr>
 8011c1a:	b108      	cbz	r0, 8011c20 <_printf_i+0x1bc>
 8011c1c:	1b40      	subs	r0, r0, r5
 8011c1e:	6060      	str	r0, [r4, #4]
 8011c20:	6863      	ldr	r3, [r4, #4]
 8011c22:	6123      	str	r3, [r4, #16]
 8011c24:	2300      	movs	r3, #0
 8011c26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011c2a:	e7a7      	b.n	8011b7c <_printf_i+0x118>
 8011c2c:	6923      	ldr	r3, [r4, #16]
 8011c2e:	462a      	mov	r2, r5
 8011c30:	4639      	mov	r1, r7
 8011c32:	4630      	mov	r0, r6
 8011c34:	47c0      	blx	r8
 8011c36:	3001      	adds	r0, #1
 8011c38:	d0aa      	beq.n	8011b90 <_printf_i+0x12c>
 8011c3a:	6823      	ldr	r3, [r4, #0]
 8011c3c:	079b      	lsls	r3, r3, #30
 8011c3e:	d413      	bmi.n	8011c68 <_printf_i+0x204>
 8011c40:	68e0      	ldr	r0, [r4, #12]
 8011c42:	9b03      	ldr	r3, [sp, #12]
 8011c44:	4298      	cmp	r0, r3
 8011c46:	bfb8      	it	lt
 8011c48:	4618      	movlt	r0, r3
 8011c4a:	e7a3      	b.n	8011b94 <_printf_i+0x130>
 8011c4c:	2301      	movs	r3, #1
 8011c4e:	464a      	mov	r2, r9
 8011c50:	4639      	mov	r1, r7
 8011c52:	4630      	mov	r0, r6
 8011c54:	47c0      	blx	r8
 8011c56:	3001      	adds	r0, #1
 8011c58:	d09a      	beq.n	8011b90 <_printf_i+0x12c>
 8011c5a:	3501      	adds	r5, #1
 8011c5c:	68e3      	ldr	r3, [r4, #12]
 8011c5e:	9a03      	ldr	r2, [sp, #12]
 8011c60:	1a9b      	subs	r3, r3, r2
 8011c62:	42ab      	cmp	r3, r5
 8011c64:	dcf2      	bgt.n	8011c4c <_printf_i+0x1e8>
 8011c66:	e7eb      	b.n	8011c40 <_printf_i+0x1dc>
 8011c68:	2500      	movs	r5, #0
 8011c6a:	f104 0919 	add.w	r9, r4, #25
 8011c6e:	e7f5      	b.n	8011c5c <_printf_i+0x1f8>
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d1ac      	bne.n	8011bce <_printf_i+0x16a>
 8011c74:	7803      	ldrb	r3, [r0, #0]
 8011c76:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011c7a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011c7e:	e76c      	b.n	8011b5a <_printf_i+0xf6>
 8011c80:	08026a55 	.word	0x08026a55
 8011c84:	08026a66 	.word	0x08026a66

08011c88 <_sbrk_r>:
 8011c88:	b538      	push	{r3, r4, r5, lr}
 8011c8a:	4c06      	ldr	r4, [pc, #24]	; (8011ca4 <_sbrk_r+0x1c>)
 8011c8c:	2300      	movs	r3, #0
 8011c8e:	4605      	mov	r5, r0
 8011c90:	4608      	mov	r0, r1
 8011c92:	6023      	str	r3, [r4, #0]
 8011c94:	f7fe fe6a 	bl	801096c <_sbrk>
 8011c98:	1c43      	adds	r3, r0, #1
 8011c9a:	d102      	bne.n	8011ca2 <_sbrk_r+0x1a>
 8011c9c:	6823      	ldr	r3, [r4, #0]
 8011c9e:	b103      	cbz	r3, 8011ca2 <_sbrk_r+0x1a>
 8011ca0:	602b      	str	r3, [r5, #0]
 8011ca2:	bd38      	pop	{r3, r4, r5, pc}
 8011ca4:	200045dc 	.word	0x200045dc

08011ca8 <__sread>:
 8011ca8:	b510      	push	{r4, lr}
 8011caa:	460c      	mov	r4, r1
 8011cac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011cb0:	f000 f896 	bl	8011de0 <_read_r>
 8011cb4:	2800      	cmp	r0, #0
 8011cb6:	bfab      	itete	ge
 8011cb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8011cba:	89a3      	ldrhlt	r3, [r4, #12]
 8011cbc:	181b      	addge	r3, r3, r0
 8011cbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8011cc2:	bfac      	ite	ge
 8011cc4:	6563      	strge	r3, [r4, #84]	; 0x54
 8011cc6:	81a3      	strhlt	r3, [r4, #12]
 8011cc8:	bd10      	pop	{r4, pc}

08011cca <__swrite>:
 8011cca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cce:	461f      	mov	r7, r3
 8011cd0:	898b      	ldrh	r3, [r1, #12]
 8011cd2:	05db      	lsls	r3, r3, #23
 8011cd4:	4605      	mov	r5, r0
 8011cd6:	460c      	mov	r4, r1
 8011cd8:	4616      	mov	r6, r2
 8011cda:	d505      	bpl.n	8011ce8 <__swrite+0x1e>
 8011cdc:	2302      	movs	r3, #2
 8011cde:	2200      	movs	r2, #0
 8011ce0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ce4:	f000 f868 	bl	8011db8 <_lseek_r>
 8011ce8:	89a3      	ldrh	r3, [r4, #12]
 8011cea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011cee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8011cf2:	81a3      	strh	r3, [r4, #12]
 8011cf4:	4632      	mov	r2, r6
 8011cf6:	463b      	mov	r3, r7
 8011cf8:	4628      	mov	r0, r5
 8011cfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011cfe:	f000 b817 	b.w	8011d30 <_write_r>

08011d02 <__sseek>:
 8011d02:	b510      	push	{r4, lr}
 8011d04:	460c      	mov	r4, r1
 8011d06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d0a:	f000 f855 	bl	8011db8 <_lseek_r>
 8011d0e:	1c43      	adds	r3, r0, #1
 8011d10:	89a3      	ldrh	r3, [r4, #12]
 8011d12:	bf15      	itete	ne
 8011d14:	6560      	strne	r0, [r4, #84]	; 0x54
 8011d16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011d1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011d1e:	81a3      	strheq	r3, [r4, #12]
 8011d20:	bf18      	it	ne
 8011d22:	81a3      	strhne	r3, [r4, #12]
 8011d24:	bd10      	pop	{r4, pc}

08011d26 <__sclose>:
 8011d26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d2a:	f000 b813 	b.w	8011d54 <_close_r>
	...

08011d30 <_write_r>:
 8011d30:	b538      	push	{r3, r4, r5, lr}
 8011d32:	4c07      	ldr	r4, [pc, #28]	; (8011d50 <_write_r+0x20>)
 8011d34:	4605      	mov	r5, r0
 8011d36:	4608      	mov	r0, r1
 8011d38:	4611      	mov	r1, r2
 8011d3a:	2200      	movs	r2, #0
 8011d3c:	6022      	str	r2, [r4, #0]
 8011d3e:	461a      	mov	r2, r3
 8011d40:	f7fd fb5b 	bl	800f3fa <_write>
 8011d44:	1c43      	adds	r3, r0, #1
 8011d46:	d102      	bne.n	8011d4e <_write_r+0x1e>
 8011d48:	6823      	ldr	r3, [r4, #0]
 8011d4a:	b103      	cbz	r3, 8011d4e <_write_r+0x1e>
 8011d4c:	602b      	str	r3, [r5, #0]
 8011d4e:	bd38      	pop	{r3, r4, r5, pc}
 8011d50:	200045dc 	.word	0x200045dc

08011d54 <_close_r>:
 8011d54:	b538      	push	{r3, r4, r5, lr}
 8011d56:	4c06      	ldr	r4, [pc, #24]	; (8011d70 <_close_r+0x1c>)
 8011d58:	2300      	movs	r3, #0
 8011d5a:	4605      	mov	r5, r0
 8011d5c:	4608      	mov	r0, r1
 8011d5e:	6023      	str	r3, [r4, #0]
 8011d60:	f7fe fdcf 	bl	8010902 <_close>
 8011d64:	1c43      	adds	r3, r0, #1
 8011d66:	d102      	bne.n	8011d6e <_close_r+0x1a>
 8011d68:	6823      	ldr	r3, [r4, #0]
 8011d6a:	b103      	cbz	r3, 8011d6e <_close_r+0x1a>
 8011d6c:	602b      	str	r3, [r5, #0]
 8011d6e:	bd38      	pop	{r3, r4, r5, pc}
 8011d70:	200045dc 	.word	0x200045dc

08011d74 <_fstat_r>:
 8011d74:	b538      	push	{r3, r4, r5, lr}
 8011d76:	4c07      	ldr	r4, [pc, #28]	; (8011d94 <_fstat_r+0x20>)
 8011d78:	2300      	movs	r3, #0
 8011d7a:	4605      	mov	r5, r0
 8011d7c:	4608      	mov	r0, r1
 8011d7e:	4611      	mov	r1, r2
 8011d80:	6023      	str	r3, [r4, #0]
 8011d82:	f7fe fdca 	bl	801091a <_fstat>
 8011d86:	1c43      	adds	r3, r0, #1
 8011d88:	d102      	bne.n	8011d90 <_fstat_r+0x1c>
 8011d8a:	6823      	ldr	r3, [r4, #0]
 8011d8c:	b103      	cbz	r3, 8011d90 <_fstat_r+0x1c>
 8011d8e:	602b      	str	r3, [r5, #0]
 8011d90:	bd38      	pop	{r3, r4, r5, pc}
 8011d92:	bf00      	nop
 8011d94:	200045dc 	.word	0x200045dc

08011d98 <_isatty_r>:
 8011d98:	b538      	push	{r3, r4, r5, lr}
 8011d9a:	4c06      	ldr	r4, [pc, #24]	; (8011db4 <_isatty_r+0x1c>)
 8011d9c:	2300      	movs	r3, #0
 8011d9e:	4605      	mov	r5, r0
 8011da0:	4608      	mov	r0, r1
 8011da2:	6023      	str	r3, [r4, #0]
 8011da4:	f7fe fdc9 	bl	801093a <_isatty>
 8011da8:	1c43      	adds	r3, r0, #1
 8011daa:	d102      	bne.n	8011db2 <_isatty_r+0x1a>
 8011dac:	6823      	ldr	r3, [r4, #0]
 8011dae:	b103      	cbz	r3, 8011db2 <_isatty_r+0x1a>
 8011db0:	602b      	str	r3, [r5, #0]
 8011db2:	bd38      	pop	{r3, r4, r5, pc}
 8011db4:	200045dc 	.word	0x200045dc

08011db8 <_lseek_r>:
 8011db8:	b538      	push	{r3, r4, r5, lr}
 8011dba:	4c07      	ldr	r4, [pc, #28]	; (8011dd8 <_lseek_r+0x20>)
 8011dbc:	4605      	mov	r5, r0
 8011dbe:	4608      	mov	r0, r1
 8011dc0:	4611      	mov	r1, r2
 8011dc2:	2200      	movs	r2, #0
 8011dc4:	6022      	str	r2, [r4, #0]
 8011dc6:	461a      	mov	r2, r3
 8011dc8:	f7fe fdc2 	bl	8010950 <_lseek>
 8011dcc:	1c43      	adds	r3, r0, #1
 8011dce:	d102      	bne.n	8011dd6 <_lseek_r+0x1e>
 8011dd0:	6823      	ldr	r3, [r4, #0]
 8011dd2:	b103      	cbz	r3, 8011dd6 <_lseek_r+0x1e>
 8011dd4:	602b      	str	r3, [r5, #0]
 8011dd6:	bd38      	pop	{r3, r4, r5, pc}
 8011dd8:	200045dc 	.word	0x200045dc

08011ddc <__malloc_lock>:
 8011ddc:	4770      	bx	lr

08011dde <__malloc_unlock>:
 8011dde:	4770      	bx	lr

08011de0 <_read_r>:
 8011de0:	b538      	push	{r3, r4, r5, lr}
 8011de2:	4c07      	ldr	r4, [pc, #28]	; (8011e00 <_read_r+0x20>)
 8011de4:	4605      	mov	r5, r0
 8011de6:	4608      	mov	r0, r1
 8011de8:	4611      	mov	r1, r2
 8011dea:	2200      	movs	r2, #0
 8011dec:	6022      	str	r2, [r4, #0]
 8011dee:	461a      	mov	r2, r3
 8011df0:	f7fe fd6a 	bl	80108c8 <_read>
 8011df4:	1c43      	adds	r3, r0, #1
 8011df6:	d102      	bne.n	8011dfe <_read_r+0x1e>
 8011df8:	6823      	ldr	r3, [r4, #0]
 8011dfa:	b103      	cbz	r3, 8011dfe <_read_r+0x1e>
 8011dfc:	602b      	str	r3, [r5, #0]
 8011dfe:	bd38      	pop	{r3, r4, r5, pc}
 8011e00:	200045dc 	.word	0x200045dc
 8011e04:	00000000 	.word	0x00000000

08011e08 <sin>:
 8011e08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011e0a:	ec51 0b10 	vmov	r0, r1, d0
 8011e0e:	4a20      	ldr	r2, [pc, #128]	; (8011e90 <sin+0x88>)
 8011e10:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011e14:	4293      	cmp	r3, r2
 8011e16:	dc07      	bgt.n	8011e28 <sin+0x20>
 8011e18:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8011e88 <sin+0x80>
 8011e1c:	2000      	movs	r0, #0
 8011e1e:	f000 ff1b 	bl	8012c58 <__kernel_sin>
 8011e22:	ec51 0b10 	vmov	r0, r1, d0
 8011e26:	e007      	b.n	8011e38 <sin+0x30>
 8011e28:	4a1a      	ldr	r2, [pc, #104]	; (8011e94 <sin+0x8c>)
 8011e2a:	4293      	cmp	r3, r2
 8011e2c:	dd09      	ble.n	8011e42 <sin+0x3a>
 8011e2e:	ee10 2a10 	vmov	r2, s0
 8011e32:	460b      	mov	r3, r1
 8011e34:	f7f6 f958 	bl	80080e8 <__aeabi_dsub>
 8011e38:	ec41 0b10 	vmov	d0, r0, r1
 8011e3c:	b005      	add	sp, #20
 8011e3e:	f85d fb04 	ldr.w	pc, [sp], #4
 8011e42:	4668      	mov	r0, sp
 8011e44:	f000 f884 	bl	8011f50 <__ieee754_rem_pio2>
 8011e48:	f000 0003 	and.w	r0, r0, #3
 8011e4c:	2801      	cmp	r0, #1
 8011e4e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011e52:	ed9d 0b00 	vldr	d0, [sp]
 8011e56:	d004      	beq.n	8011e62 <sin+0x5a>
 8011e58:	2802      	cmp	r0, #2
 8011e5a:	d005      	beq.n	8011e68 <sin+0x60>
 8011e5c:	b970      	cbnz	r0, 8011e7c <sin+0x74>
 8011e5e:	2001      	movs	r0, #1
 8011e60:	e7dd      	b.n	8011e1e <sin+0x16>
 8011e62:	f000 faf1 	bl	8012448 <__kernel_cos>
 8011e66:	e7dc      	b.n	8011e22 <sin+0x1a>
 8011e68:	2001      	movs	r0, #1
 8011e6a:	f000 fef5 	bl	8012c58 <__kernel_sin>
 8011e6e:	ec53 2b10 	vmov	r2, r3, d0
 8011e72:	ee10 0a10 	vmov	r0, s0
 8011e76:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011e7a:	e7dd      	b.n	8011e38 <sin+0x30>
 8011e7c:	f000 fae4 	bl	8012448 <__kernel_cos>
 8011e80:	e7f5      	b.n	8011e6e <sin+0x66>
 8011e82:	bf00      	nop
 8011e84:	f3af 8000 	nop.w
	...
 8011e90:	3fe921fb 	.word	0x3fe921fb
 8011e94:	7fefffff 	.word	0x7fefffff

08011e98 <fmodf>:
 8011e98:	b5d0      	push	{r4, r6, r7, lr}
 8011e9a:	ed2d 8b02 	vpush	{d8}
 8011e9e:	b08a      	sub	sp, #40	; 0x28
 8011ea0:	eef0 8a40 	vmov.f32	s17, s0
 8011ea4:	eeb0 8a60 	vmov.f32	s16, s1
 8011ea8:	f000 fa44 	bl	8012334 <__ieee754_fmodf>
 8011eac:	4b26      	ldr	r3, [pc, #152]	; (8011f48 <fmodf+0xb0>)
 8011eae:	f993 4000 	ldrsb.w	r4, [r3]
 8011eb2:	1c63      	adds	r3, r4, #1
 8011eb4:	d035      	beq.n	8011f22 <fmodf+0x8a>
 8011eb6:	eeb4 8a48 	vcmp.f32	s16, s16
 8011eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ebe:	d630      	bvs.n	8011f22 <fmodf+0x8a>
 8011ec0:	eef4 8a68 	vcmp.f32	s17, s17
 8011ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ec8:	d62b      	bvs.n	8011f22 <fmodf+0x8a>
 8011eca:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8011ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ed2:	d126      	bne.n	8011f22 <fmodf+0x8a>
 8011ed4:	2301      	movs	r3, #1
 8011ed6:	9300      	str	r3, [sp, #0]
 8011ed8:	4b1c      	ldr	r3, [pc, #112]	; (8011f4c <fmodf+0xb4>)
 8011eda:	9301      	str	r3, [sp, #4]
 8011edc:	ee18 0a90 	vmov	r0, s17
 8011ee0:	2300      	movs	r3, #0
 8011ee2:	9308      	str	r3, [sp, #32]
 8011ee4:	f7f6 fa60 	bl	80083a8 <__aeabi_f2d>
 8011ee8:	4606      	mov	r6, r0
 8011eea:	460f      	mov	r7, r1
 8011eec:	ee18 0a10 	vmov	r0, s16
 8011ef0:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8011ef4:	f7f6 fa58 	bl	80083a8 <__aeabi_f2d>
 8011ef8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011efc:	b9ac      	cbnz	r4, 8011f2a <fmodf+0x92>
 8011efe:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8011f02:	4668      	mov	r0, sp
 8011f04:	f000 fff0 	bl	8012ee8 <matherr>
 8011f08:	b1c8      	cbz	r0, 8011f3e <fmodf+0xa6>
 8011f0a:	9b08      	ldr	r3, [sp, #32]
 8011f0c:	b11b      	cbz	r3, 8011f16 <fmodf+0x7e>
 8011f0e:	f7fe fff3 	bl	8010ef8 <__errno>
 8011f12:	9b08      	ldr	r3, [sp, #32]
 8011f14:	6003      	str	r3, [r0, #0]
 8011f16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011f1a:	f7f6 fd5f 	bl	80089dc <__aeabi_d2f>
 8011f1e:	ee00 0a10 	vmov	s0, r0
 8011f22:	b00a      	add	sp, #40	; 0x28
 8011f24:	ecbd 8b02 	vpop	{d8}
 8011f28:	bdd0      	pop	{r4, r6, r7, pc}
 8011f2a:	2200      	movs	r2, #0
 8011f2c:	2300      	movs	r3, #0
 8011f2e:	4610      	mov	r0, r2
 8011f30:	4619      	mov	r1, r3
 8011f32:	f7f6 fbbb 	bl	80086ac <__aeabi_ddiv>
 8011f36:	2c02      	cmp	r4, #2
 8011f38:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011f3c:	d1e1      	bne.n	8011f02 <fmodf+0x6a>
 8011f3e:	f7fe ffdb 	bl	8010ef8 <__errno>
 8011f42:	2321      	movs	r3, #33	; 0x21
 8011f44:	6003      	str	r3, [r0, #0]
 8011f46:	e7e0      	b.n	8011f0a <fmodf+0x72>
 8011f48:	200000a0 	.word	0x200000a0
 8011f4c:	08026a77 	.word	0x08026a77

08011f50 <__ieee754_rem_pio2>:
 8011f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f54:	ec57 6b10 	vmov	r6, r7, d0
 8011f58:	4bc3      	ldr	r3, [pc, #780]	; (8012268 <__ieee754_rem_pio2+0x318>)
 8011f5a:	b08d      	sub	sp, #52	; 0x34
 8011f5c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8011f60:	4598      	cmp	r8, r3
 8011f62:	4604      	mov	r4, r0
 8011f64:	9704      	str	r7, [sp, #16]
 8011f66:	dc07      	bgt.n	8011f78 <__ieee754_rem_pio2+0x28>
 8011f68:	2200      	movs	r2, #0
 8011f6a:	2300      	movs	r3, #0
 8011f6c:	ed84 0b00 	vstr	d0, [r4]
 8011f70:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8011f74:	2500      	movs	r5, #0
 8011f76:	e027      	b.n	8011fc8 <__ieee754_rem_pio2+0x78>
 8011f78:	4bbc      	ldr	r3, [pc, #752]	; (801226c <__ieee754_rem_pio2+0x31c>)
 8011f7a:	4598      	cmp	r8, r3
 8011f7c:	dc75      	bgt.n	801206a <__ieee754_rem_pio2+0x11a>
 8011f7e:	9b04      	ldr	r3, [sp, #16]
 8011f80:	4dbb      	ldr	r5, [pc, #748]	; (8012270 <__ieee754_rem_pio2+0x320>)
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	ee10 0a10 	vmov	r0, s0
 8011f88:	a3a9      	add	r3, pc, #676	; (adr r3, 8012230 <__ieee754_rem_pio2+0x2e0>)
 8011f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f8e:	4639      	mov	r1, r7
 8011f90:	dd36      	ble.n	8012000 <__ieee754_rem_pio2+0xb0>
 8011f92:	f7f6 f8a9 	bl	80080e8 <__aeabi_dsub>
 8011f96:	45a8      	cmp	r8, r5
 8011f98:	4606      	mov	r6, r0
 8011f9a:	460f      	mov	r7, r1
 8011f9c:	d018      	beq.n	8011fd0 <__ieee754_rem_pio2+0x80>
 8011f9e:	a3a6      	add	r3, pc, #664	; (adr r3, 8012238 <__ieee754_rem_pio2+0x2e8>)
 8011fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fa4:	f7f6 f8a0 	bl	80080e8 <__aeabi_dsub>
 8011fa8:	4602      	mov	r2, r0
 8011faa:	460b      	mov	r3, r1
 8011fac:	e9c4 2300 	strd	r2, r3, [r4]
 8011fb0:	4630      	mov	r0, r6
 8011fb2:	4639      	mov	r1, r7
 8011fb4:	f7f6 f898 	bl	80080e8 <__aeabi_dsub>
 8011fb8:	a39f      	add	r3, pc, #636	; (adr r3, 8012238 <__ieee754_rem_pio2+0x2e8>)
 8011fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fbe:	f7f6 f893 	bl	80080e8 <__aeabi_dsub>
 8011fc2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011fc6:	2501      	movs	r5, #1
 8011fc8:	4628      	mov	r0, r5
 8011fca:	b00d      	add	sp, #52	; 0x34
 8011fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fd0:	a39b      	add	r3, pc, #620	; (adr r3, 8012240 <__ieee754_rem_pio2+0x2f0>)
 8011fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fd6:	f7f6 f887 	bl	80080e8 <__aeabi_dsub>
 8011fda:	a39b      	add	r3, pc, #620	; (adr r3, 8012248 <__ieee754_rem_pio2+0x2f8>)
 8011fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fe0:	4606      	mov	r6, r0
 8011fe2:	460f      	mov	r7, r1
 8011fe4:	f7f6 f880 	bl	80080e8 <__aeabi_dsub>
 8011fe8:	4602      	mov	r2, r0
 8011fea:	460b      	mov	r3, r1
 8011fec:	e9c4 2300 	strd	r2, r3, [r4]
 8011ff0:	4630      	mov	r0, r6
 8011ff2:	4639      	mov	r1, r7
 8011ff4:	f7f6 f878 	bl	80080e8 <__aeabi_dsub>
 8011ff8:	a393      	add	r3, pc, #588	; (adr r3, 8012248 <__ieee754_rem_pio2+0x2f8>)
 8011ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ffe:	e7de      	b.n	8011fbe <__ieee754_rem_pio2+0x6e>
 8012000:	f7f6 f874 	bl	80080ec <__adddf3>
 8012004:	45a8      	cmp	r8, r5
 8012006:	4606      	mov	r6, r0
 8012008:	460f      	mov	r7, r1
 801200a:	d016      	beq.n	801203a <__ieee754_rem_pio2+0xea>
 801200c:	a38a      	add	r3, pc, #552	; (adr r3, 8012238 <__ieee754_rem_pio2+0x2e8>)
 801200e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012012:	f7f6 f86b 	bl	80080ec <__adddf3>
 8012016:	4602      	mov	r2, r0
 8012018:	460b      	mov	r3, r1
 801201a:	e9c4 2300 	strd	r2, r3, [r4]
 801201e:	4630      	mov	r0, r6
 8012020:	4639      	mov	r1, r7
 8012022:	f7f6 f861 	bl	80080e8 <__aeabi_dsub>
 8012026:	a384      	add	r3, pc, #528	; (adr r3, 8012238 <__ieee754_rem_pio2+0x2e8>)
 8012028:	e9d3 2300 	ldrd	r2, r3, [r3]
 801202c:	f7f6 f85e 	bl	80080ec <__adddf3>
 8012030:	f04f 35ff 	mov.w	r5, #4294967295
 8012034:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012038:	e7c6      	b.n	8011fc8 <__ieee754_rem_pio2+0x78>
 801203a:	a381      	add	r3, pc, #516	; (adr r3, 8012240 <__ieee754_rem_pio2+0x2f0>)
 801203c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012040:	f7f6 f854 	bl	80080ec <__adddf3>
 8012044:	a380      	add	r3, pc, #512	; (adr r3, 8012248 <__ieee754_rem_pio2+0x2f8>)
 8012046:	e9d3 2300 	ldrd	r2, r3, [r3]
 801204a:	4606      	mov	r6, r0
 801204c:	460f      	mov	r7, r1
 801204e:	f7f6 f84d 	bl	80080ec <__adddf3>
 8012052:	4602      	mov	r2, r0
 8012054:	460b      	mov	r3, r1
 8012056:	e9c4 2300 	strd	r2, r3, [r4]
 801205a:	4630      	mov	r0, r6
 801205c:	4639      	mov	r1, r7
 801205e:	f7f6 f843 	bl	80080e8 <__aeabi_dsub>
 8012062:	a379      	add	r3, pc, #484	; (adr r3, 8012248 <__ieee754_rem_pio2+0x2f8>)
 8012064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012068:	e7e0      	b.n	801202c <__ieee754_rem_pio2+0xdc>
 801206a:	4b82      	ldr	r3, [pc, #520]	; (8012274 <__ieee754_rem_pio2+0x324>)
 801206c:	4598      	cmp	r8, r3
 801206e:	f300 80d0 	bgt.w	8012212 <__ieee754_rem_pio2+0x2c2>
 8012072:	f000 feab 	bl	8012dcc <fabs>
 8012076:	ec57 6b10 	vmov	r6, r7, d0
 801207a:	ee10 0a10 	vmov	r0, s0
 801207e:	a374      	add	r3, pc, #464	; (adr r3, 8012250 <__ieee754_rem_pio2+0x300>)
 8012080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012084:	4639      	mov	r1, r7
 8012086:	f7f6 f9e7 	bl	8008458 <__aeabi_dmul>
 801208a:	2200      	movs	r2, #0
 801208c:	4b7a      	ldr	r3, [pc, #488]	; (8012278 <__ieee754_rem_pio2+0x328>)
 801208e:	f7f6 f82d 	bl	80080ec <__adddf3>
 8012092:	f7f6 fc7b 	bl	800898c <__aeabi_d2iz>
 8012096:	4605      	mov	r5, r0
 8012098:	f7f6 f974 	bl	8008384 <__aeabi_i2d>
 801209c:	a364      	add	r3, pc, #400	; (adr r3, 8012230 <__ieee754_rem_pio2+0x2e0>)
 801209e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80120a6:	f7f6 f9d7 	bl	8008458 <__aeabi_dmul>
 80120aa:	4602      	mov	r2, r0
 80120ac:	460b      	mov	r3, r1
 80120ae:	4630      	mov	r0, r6
 80120b0:	4639      	mov	r1, r7
 80120b2:	f7f6 f819 	bl	80080e8 <__aeabi_dsub>
 80120b6:	a360      	add	r3, pc, #384	; (adr r3, 8012238 <__ieee754_rem_pio2+0x2e8>)
 80120b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120bc:	4682      	mov	sl, r0
 80120be:	468b      	mov	fp, r1
 80120c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80120c4:	f7f6 f9c8 	bl	8008458 <__aeabi_dmul>
 80120c8:	2d1f      	cmp	r5, #31
 80120ca:	4606      	mov	r6, r0
 80120cc:	460f      	mov	r7, r1
 80120ce:	dc0c      	bgt.n	80120ea <__ieee754_rem_pio2+0x19a>
 80120d0:	1e6a      	subs	r2, r5, #1
 80120d2:	4b6a      	ldr	r3, [pc, #424]	; (801227c <__ieee754_rem_pio2+0x32c>)
 80120d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80120d8:	4543      	cmp	r3, r8
 80120da:	d006      	beq.n	80120ea <__ieee754_rem_pio2+0x19a>
 80120dc:	4632      	mov	r2, r6
 80120de:	463b      	mov	r3, r7
 80120e0:	4650      	mov	r0, sl
 80120e2:	4659      	mov	r1, fp
 80120e4:	f7f6 f800 	bl	80080e8 <__aeabi_dsub>
 80120e8:	e00e      	b.n	8012108 <__ieee754_rem_pio2+0x1b8>
 80120ea:	4632      	mov	r2, r6
 80120ec:	463b      	mov	r3, r7
 80120ee:	4650      	mov	r0, sl
 80120f0:	4659      	mov	r1, fp
 80120f2:	f7f5 fff9 	bl	80080e8 <__aeabi_dsub>
 80120f6:	ea4f 5328 	mov.w	r3, r8, asr #20
 80120fa:	9305      	str	r3, [sp, #20]
 80120fc:	9a05      	ldr	r2, [sp, #20]
 80120fe:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012102:	1ad3      	subs	r3, r2, r3
 8012104:	2b10      	cmp	r3, #16
 8012106:	dc02      	bgt.n	801210e <__ieee754_rem_pio2+0x1be>
 8012108:	e9c4 0100 	strd	r0, r1, [r4]
 801210c:	e039      	b.n	8012182 <__ieee754_rem_pio2+0x232>
 801210e:	a34c      	add	r3, pc, #304	; (adr r3, 8012240 <__ieee754_rem_pio2+0x2f0>)
 8012110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012114:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012118:	f7f6 f99e 	bl	8008458 <__aeabi_dmul>
 801211c:	4606      	mov	r6, r0
 801211e:	460f      	mov	r7, r1
 8012120:	4602      	mov	r2, r0
 8012122:	460b      	mov	r3, r1
 8012124:	4650      	mov	r0, sl
 8012126:	4659      	mov	r1, fp
 8012128:	f7f5 ffde 	bl	80080e8 <__aeabi_dsub>
 801212c:	4602      	mov	r2, r0
 801212e:	460b      	mov	r3, r1
 8012130:	4680      	mov	r8, r0
 8012132:	4689      	mov	r9, r1
 8012134:	4650      	mov	r0, sl
 8012136:	4659      	mov	r1, fp
 8012138:	f7f5 ffd6 	bl	80080e8 <__aeabi_dsub>
 801213c:	4632      	mov	r2, r6
 801213e:	463b      	mov	r3, r7
 8012140:	f7f5 ffd2 	bl	80080e8 <__aeabi_dsub>
 8012144:	a340      	add	r3, pc, #256	; (adr r3, 8012248 <__ieee754_rem_pio2+0x2f8>)
 8012146:	e9d3 2300 	ldrd	r2, r3, [r3]
 801214a:	4606      	mov	r6, r0
 801214c:	460f      	mov	r7, r1
 801214e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012152:	f7f6 f981 	bl	8008458 <__aeabi_dmul>
 8012156:	4632      	mov	r2, r6
 8012158:	463b      	mov	r3, r7
 801215a:	f7f5 ffc5 	bl	80080e8 <__aeabi_dsub>
 801215e:	4602      	mov	r2, r0
 8012160:	460b      	mov	r3, r1
 8012162:	4606      	mov	r6, r0
 8012164:	460f      	mov	r7, r1
 8012166:	4640      	mov	r0, r8
 8012168:	4649      	mov	r1, r9
 801216a:	f7f5 ffbd 	bl	80080e8 <__aeabi_dsub>
 801216e:	9a05      	ldr	r2, [sp, #20]
 8012170:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012174:	1ad3      	subs	r3, r2, r3
 8012176:	2b31      	cmp	r3, #49	; 0x31
 8012178:	dc20      	bgt.n	80121bc <__ieee754_rem_pio2+0x26c>
 801217a:	e9c4 0100 	strd	r0, r1, [r4]
 801217e:	46c2      	mov	sl, r8
 8012180:	46cb      	mov	fp, r9
 8012182:	e9d4 8900 	ldrd	r8, r9, [r4]
 8012186:	4650      	mov	r0, sl
 8012188:	4642      	mov	r2, r8
 801218a:	464b      	mov	r3, r9
 801218c:	4659      	mov	r1, fp
 801218e:	f7f5 ffab 	bl	80080e8 <__aeabi_dsub>
 8012192:	463b      	mov	r3, r7
 8012194:	4632      	mov	r2, r6
 8012196:	f7f5 ffa7 	bl	80080e8 <__aeabi_dsub>
 801219a:	9b04      	ldr	r3, [sp, #16]
 801219c:	2b00      	cmp	r3, #0
 801219e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80121a2:	f6bf af11 	bge.w	8011fc8 <__ieee754_rem_pio2+0x78>
 80121a6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80121aa:	6063      	str	r3, [r4, #4]
 80121ac:	f8c4 8000 	str.w	r8, [r4]
 80121b0:	60a0      	str	r0, [r4, #8]
 80121b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80121b6:	60e3      	str	r3, [r4, #12]
 80121b8:	426d      	negs	r5, r5
 80121ba:	e705      	b.n	8011fc8 <__ieee754_rem_pio2+0x78>
 80121bc:	a326      	add	r3, pc, #152	; (adr r3, 8012258 <__ieee754_rem_pio2+0x308>)
 80121be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80121c6:	f7f6 f947 	bl	8008458 <__aeabi_dmul>
 80121ca:	4606      	mov	r6, r0
 80121cc:	460f      	mov	r7, r1
 80121ce:	4602      	mov	r2, r0
 80121d0:	460b      	mov	r3, r1
 80121d2:	4640      	mov	r0, r8
 80121d4:	4649      	mov	r1, r9
 80121d6:	f7f5 ff87 	bl	80080e8 <__aeabi_dsub>
 80121da:	4602      	mov	r2, r0
 80121dc:	460b      	mov	r3, r1
 80121de:	4682      	mov	sl, r0
 80121e0:	468b      	mov	fp, r1
 80121e2:	4640      	mov	r0, r8
 80121e4:	4649      	mov	r1, r9
 80121e6:	f7f5 ff7f 	bl	80080e8 <__aeabi_dsub>
 80121ea:	4632      	mov	r2, r6
 80121ec:	463b      	mov	r3, r7
 80121ee:	f7f5 ff7b 	bl	80080e8 <__aeabi_dsub>
 80121f2:	a31b      	add	r3, pc, #108	; (adr r3, 8012260 <__ieee754_rem_pio2+0x310>)
 80121f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121f8:	4606      	mov	r6, r0
 80121fa:	460f      	mov	r7, r1
 80121fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012200:	f7f6 f92a 	bl	8008458 <__aeabi_dmul>
 8012204:	4632      	mov	r2, r6
 8012206:	463b      	mov	r3, r7
 8012208:	f7f5 ff6e 	bl	80080e8 <__aeabi_dsub>
 801220c:	4606      	mov	r6, r0
 801220e:	460f      	mov	r7, r1
 8012210:	e764      	b.n	80120dc <__ieee754_rem_pio2+0x18c>
 8012212:	4b1b      	ldr	r3, [pc, #108]	; (8012280 <__ieee754_rem_pio2+0x330>)
 8012214:	4598      	cmp	r8, r3
 8012216:	dd35      	ble.n	8012284 <__ieee754_rem_pio2+0x334>
 8012218:	ee10 2a10 	vmov	r2, s0
 801221c:	463b      	mov	r3, r7
 801221e:	4630      	mov	r0, r6
 8012220:	4639      	mov	r1, r7
 8012222:	f7f5 ff61 	bl	80080e8 <__aeabi_dsub>
 8012226:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801222a:	e9c4 0100 	strd	r0, r1, [r4]
 801222e:	e6a1      	b.n	8011f74 <__ieee754_rem_pio2+0x24>
 8012230:	54400000 	.word	0x54400000
 8012234:	3ff921fb 	.word	0x3ff921fb
 8012238:	1a626331 	.word	0x1a626331
 801223c:	3dd0b461 	.word	0x3dd0b461
 8012240:	1a600000 	.word	0x1a600000
 8012244:	3dd0b461 	.word	0x3dd0b461
 8012248:	2e037073 	.word	0x2e037073
 801224c:	3ba3198a 	.word	0x3ba3198a
 8012250:	6dc9c883 	.word	0x6dc9c883
 8012254:	3fe45f30 	.word	0x3fe45f30
 8012258:	2e000000 	.word	0x2e000000
 801225c:	3ba3198a 	.word	0x3ba3198a
 8012260:	252049c1 	.word	0x252049c1
 8012264:	397b839a 	.word	0x397b839a
 8012268:	3fe921fb 	.word	0x3fe921fb
 801226c:	4002d97b 	.word	0x4002d97b
 8012270:	3ff921fb 	.word	0x3ff921fb
 8012274:	413921fb 	.word	0x413921fb
 8012278:	3fe00000 	.word	0x3fe00000
 801227c:	08026a80 	.word	0x08026a80
 8012280:	7fefffff 	.word	0x7fefffff
 8012284:	ea4f 5528 	mov.w	r5, r8, asr #20
 8012288:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 801228c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8012290:	4630      	mov	r0, r6
 8012292:	460f      	mov	r7, r1
 8012294:	f7f6 fb7a 	bl	800898c <__aeabi_d2iz>
 8012298:	f7f6 f874 	bl	8008384 <__aeabi_i2d>
 801229c:	4602      	mov	r2, r0
 801229e:	460b      	mov	r3, r1
 80122a0:	4630      	mov	r0, r6
 80122a2:	4639      	mov	r1, r7
 80122a4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80122a8:	f7f5 ff1e 	bl	80080e8 <__aeabi_dsub>
 80122ac:	2200      	movs	r2, #0
 80122ae:	4b1f      	ldr	r3, [pc, #124]	; (801232c <__ieee754_rem_pio2+0x3dc>)
 80122b0:	f7f6 f8d2 	bl	8008458 <__aeabi_dmul>
 80122b4:	460f      	mov	r7, r1
 80122b6:	4606      	mov	r6, r0
 80122b8:	f7f6 fb68 	bl	800898c <__aeabi_d2iz>
 80122bc:	f7f6 f862 	bl	8008384 <__aeabi_i2d>
 80122c0:	4602      	mov	r2, r0
 80122c2:	460b      	mov	r3, r1
 80122c4:	4630      	mov	r0, r6
 80122c6:	4639      	mov	r1, r7
 80122c8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80122cc:	f7f5 ff0c 	bl	80080e8 <__aeabi_dsub>
 80122d0:	2200      	movs	r2, #0
 80122d2:	4b16      	ldr	r3, [pc, #88]	; (801232c <__ieee754_rem_pio2+0x3dc>)
 80122d4:	f7f6 f8c0 	bl	8008458 <__aeabi_dmul>
 80122d8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80122dc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80122e0:	f04f 0803 	mov.w	r8, #3
 80122e4:	2600      	movs	r6, #0
 80122e6:	2700      	movs	r7, #0
 80122e8:	4632      	mov	r2, r6
 80122ea:	463b      	mov	r3, r7
 80122ec:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80122f0:	f108 3aff 	add.w	sl, r8, #4294967295
 80122f4:	f7f6 fb18 	bl	8008928 <__aeabi_dcmpeq>
 80122f8:	b9b0      	cbnz	r0, 8012328 <__ieee754_rem_pio2+0x3d8>
 80122fa:	4b0d      	ldr	r3, [pc, #52]	; (8012330 <__ieee754_rem_pio2+0x3e0>)
 80122fc:	9301      	str	r3, [sp, #4]
 80122fe:	2302      	movs	r3, #2
 8012300:	9300      	str	r3, [sp, #0]
 8012302:	462a      	mov	r2, r5
 8012304:	4643      	mov	r3, r8
 8012306:	4621      	mov	r1, r4
 8012308:	a806      	add	r0, sp, #24
 801230a:	f000 f965 	bl	80125d8 <__kernel_rem_pio2>
 801230e:	9b04      	ldr	r3, [sp, #16]
 8012310:	2b00      	cmp	r3, #0
 8012312:	4605      	mov	r5, r0
 8012314:	f6bf ae58 	bge.w	8011fc8 <__ieee754_rem_pio2+0x78>
 8012318:	6863      	ldr	r3, [r4, #4]
 801231a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801231e:	6063      	str	r3, [r4, #4]
 8012320:	68e3      	ldr	r3, [r4, #12]
 8012322:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012326:	e746      	b.n	80121b6 <__ieee754_rem_pio2+0x266>
 8012328:	46d0      	mov	r8, sl
 801232a:	e7dd      	b.n	80122e8 <__ieee754_rem_pio2+0x398>
 801232c:	41700000 	.word	0x41700000
 8012330:	08026b00 	.word	0x08026b00

08012334 <__ieee754_fmodf>:
 8012334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012336:	ee10 6a90 	vmov	r6, s1
 801233a:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 801233e:	ee10 3a10 	vmov	r3, s0
 8012342:	d009      	beq.n	8012358 <__ieee754_fmodf+0x24>
 8012344:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8012348:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801234c:	ee10 7a10 	vmov	r7, s0
 8012350:	da02      	bge.n	8012358 <__ieee754_fmodf+0x24>
 8012352:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8012356:	dd0a      	ble.n	801236e <__ieee754_fmodf+0x3a>
 8012358:	ee07 3a90 	vmov	s15, r3
 801235c:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8012360:	eec0 7aa0 	vdiv.f32	s15, s1, s1
 8012364:	ee17 3a90 	vmov	r3, s15
 8012368:	ee00 3a10 	vmov	s0, r3
 801236c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801236e:	42a9      	cmp	r1, r5
 8012370:	dbfa      	blt.n	8012368 <__ieee754_fmodf+0x34>
 8012372:	f003 4400 	and.w	r4, r3, #2147483648	; 0x80000000
 8012376:	d105      	bne.n	8012384 <__ieee754_fmodf+0x50>
 8012378:	4a30      	ldr	r2, [pc, #192]	; (801243c <__ieee754_fmodf+0x108>)
 801237a:	0fe3      	lsrs	r3, r4, #31
 801237c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012380:	681b      	ldr	r3, [r3, #0]
 8012382:	e7f1      	b.n	8012368 <__ieee754_fmodf+0x34>
 8012384:	4b2e      	ldr	r3, [pc, #184]	; (8012440 <__ieee754_fmodf+0x10c>)
 8012386:	4299      	cmp	r1, r3
 8012388:	dc3e      	bgt.n	8012408 <__ieee754_fmodf+0xd4>
 801238a:	020a      	lsls	r2, r1, #8
 801238c:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8012390:	2a00      	cmp	r2, #0
 8012392:	dc36      	bgt.n	8012402 <__ieee754_fmodf+0xce>
 8012394:	429d      	cmp	r5, r3
 8012396:	dc3a      	bgt.n	801240e <__ieee754_fmodf+0xda>
 8012398:	022b      	lsls	r3, r5, #8
 801239a:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 801239e:	005b      	lsls	r3, r3, #1
 80123a0:	f102 32ff 	add.w	r2, r2, #4294967295
 80123a4:	d5fb      	bpl.n	801239e <__ieee754_fmodf+0x6a>
 80123a6:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 80123aa:	bfbb      	ittet	lt
 80123ac:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 80123b0:	1a1b      	sublt	r3, r3, r0
 80123b2:	f3c7 0116 	ubfxge	r1, r7, #0, #23
 80123b6:	4099      	lsllt	r1, r3
 80123b8:	bfa8      	it	ge
 80123ba:	f441 0100 	orrge.w	r1, r1, #8388608	; 0x800000
 80123be:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 80123c2:	bfb5      	itete	lt
 80123c4:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 80123c8:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 80123cc:	1a9b      	sublt	r3, r3, r2
 80123ce:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 80123d2:	bfb8      	it	lt
 80123d4:	409d      	lsllt	r5, r3
 80123d6:	1a80      	subs	r0, r0, r2
 80123d8:	1b4b      	subs	r3, r1, r5
 80123da:	b9d8      	cbnz	r0, 8012414 <__ieee754_fmodf+0xe0>
 80123dc:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 80123e0:	bf28      	it	cs
 80123e2:	460b      	movcs	r3, r1
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d0c7      	beq.n	8012378 <__ieee754_fmodf+0x44>
 80123e8:	4915      	ldr	r1, [pc, #84]	; (8012440 <__ieee754_fmodf+0x10c>)
 80123ea:	428b      	cmp	r3, r1
 80123ec:	dd1a      	ble.n	8012424 <__ieee754_fmodf+0xf0>
 80123ee:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 80123f2:	db1a      	blt.n	801242a <__ieee754_fmodf+0xf6>
 80123f4:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80123f8:	4323      	orrs	r3, r4
 80123fa:	327f      	adds	r2, #127	; 0x7f
 80123fc:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8012400:	e7b2      	b.n	8012368 <__ieee754_fmodf+0x34>
 8012402:	3801      	subs	r0, #1
 8012404:	0052      	lsls	r2, r2, #1
 8012406:	e7c3      	b.n	8012390 <__ieee754_fmodf+0x5c>
 8012408:	15c8      	asrs	r0, r1, #23
 801240a:	387f      	subs	r0, #127	; 0x7f
 801240c:	e7c2      	b.n	8012394 <__ieee754_fmodf+0x60>
 801240e:	15ea      	asrs	r2, r5, #23
 8012410:	3a7f      	subs	r2, #127	; 0x7f
 8012412:	e7c8      	b.n	80123a6 <__ieee754_fmodf+0x72>
 8012414:	2b00      	cmp	r3, #0
 8012416:	da02      	bge.n	801241e <__ieee754_fmodf+0xea>
 8012418:	0049      	lsls	r1, r1, #1
 801241a:	3801      	subs	r0, #1
 801241c:	e7dc      	b.n	80123d8 <__ieee754_fmodf+0xa4>
 801241e:	d0ab      	beq.n	8012378 <__ieee754_fmodf+0x44>
 8012420:	0059      	lsls	r1, r3, #1
 8012422:	e7fa      	b.n	801241a <__ieee754_fmodf+0xe6>
 8012424:	005b      	lsls	r3, r3, #1
 8012426:	3a01      	subs	r2, #1
 8012428:	e7df      	b.n	80123ea <__ieee754_fmodf+0xb6>
 801242a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801242e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8012432:	3282      	adds	r2, #130	; 0x82
 8012434:	4113      	asrs	r3, r2
 8012436:	4323      	orrs	r3, r4
 8012438:	e796      	b.n	8012368 <__ieee754_fmodf+0x34>
 801243a:	bf00      	nop
 801243c:	08026c08 	.word	0x08026c08
 8012440:	007fffff 	.word	0x007fffff
 8012444:	00000000 	.word	0x00000000

08012448 <__kernel_cos>:
 8012448:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801244c:	ec59 8b10 	vmov	r8, r9, d0
 8012450:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8012454:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8012458:	ed2d 8b02 	vpush	{d8}
 801245c:	eeb0 8a41 	vmov.f32	s16, s2
 8012460:	eef0 8a61 	vmov.f32	s17, s3
 8012464:	da07      	bge.n	8012476 <__kernel_cos+0x2e>
 8012466:	ee10 0a10 	vmov	r0, s0
 801246a:	4649      	mov	r1, r9
 801246c:	f7f6 fa8e 	bl	800898c <__aeabi_d2iz>
 8012470:	2800      	cmp	r0, #0
 8012472:	f000 8089 	beq.w	8012588 <__kernel_cos+0x140>
 8012476:	4642      	mov	r2, r8
 8012478:	464b      	mov	r3, r9
 801247a:	4640      	mov	r0, r8
 801247c:	4649      	mov	r1, r9
 801247e:	f7f5 ffeb 	bl	8008458 <__aeabi_dmul>
 8012482:	2200      	movs	r2, #0
 8012484:	4b4e      	ldr	r3, [pc, #312]	; (80125c0 <__kernel_cos+0x178>)
 8012486:	4604      	mov	r4, r0
 8012488:	460d      	mov	r5, r1
 801248a:	f7f5 ffe5 	bl	8008458 <__aeabi_dmul>
 801248e:	a340      	add	r3, pc, #256	; (adr r3, 8012590 <__kernel_cos+0x148>)
 8012490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012494:	4682      	mov	sl, r0
 8012496:	468b      	mov	fp, r1
 8012498:	4620      	mov	r0, r4
 801249a:	4629      	mov	r1, r5
 801249c:	f7f5 ffdc 	bl	8008458 <__aeabi_dmul>
 80124a0:	a33d      	add	r3, pc, #244	; (adr r3, 8012598 <__kernel_cos+0x150>)
 80124a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124a6:	f7f5 fe21 	bl	80080ec <__adddf3>
 80124aa:	4622      	mov	r2, r4
 80124ac:	462b      	mov	r3, r5
 80124ae:	f7f5 ffd3 	bl	8008458 <__aeabi_dmul>
 80124b2:	a33b      	add	r3, pc, #236	; (adr r3, 80125a0 <__kernel_cos+0x158>)
 80124b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124b8:	f7f5 fe16 	bl	80080e8 <__aeabi_dsub>
 80124bc:	4622      	mov	r2, r4
 80124be:	462b      	mov	r3, r5
 80124c0:	f7f5 ffca 	bl	8008458 <__aeabi_dmul>
 80124c4:	a338      	add	r3, pc, #224	; (adr r3, 80125a8 <__kernel_cos+0x160>)
 80124c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124ca:	f7f5 fe0f 	bl	80080ec <__adddf3>
 80124ce:	4622      	mov	r2, r4
 80124d0:	462b      	mov	r3, r5
 80124d2:	f7f5 ffc1 	bl	8008458 <__aeabi_dmul>
 80124d6:	a336      	add	r3, pc, #216	; (adr r3, 80125b0 <__kernel_cos+0x168>)
 80124d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124dc:	f7f5 fe04 	bl	80080e8 <__aeabi_dsub>
 80124e0:	4622      	mov	r2, r4
 80124e2:	462b      	mov	r3, r5
 80124e4:	f7f5 ffb8 	bl	8008458 <__aeabi_dmul>
 80124e8:	a333      	add	r3, pc, #204	; (adr r3, 80125b8 <__kernel_cos+0x170>)
 80124ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124ee:	f7f5 fdfd 	bl	80080ec <__adddf3>
 80124f2:	4622      	mov	r2, r4
 80124f4:	462b      	mov	r3, r5
 80124f6:	f7f5 ffaf 	bl	8008458 <__aeabi_dmul>
 80124fa:	4622      	mov	r2, r4
 80124fc:	462b      	mov	r3, r5
 80124fe:	f7f5 ffab 	bl	8008458 <__aeabi_dmul>
 8012502:	ec53 2b18 	vmov	r2, r3, d8
 8012506:	4604      	mov	r4, r0
 8012508:	460d      	mov	r5, r1
 801250a:	4640      	mov	r0, r8
 801250c:	4649      	mov	r1, r9
 801250e:	f7f5 ffa3 	bl	8008458 <__aeabi_dmul>
 8012512:	460b      	mov	r3, r1
 8012514:	4602      	mov	r2, r0
 8012516:	4629      	mov	r1, r5
 8012518:	4620      	mov	r0, r4
 801251a:	f7f5 fde5 	bl	80080e8 <__aeabi_dsub>
 801251e:	4b29      	ldr	r3, [pc, #164]	; (80125c4 <__kernel_cos+0x17c>)
 8012520:	429e      	cmp	r6, r3
 8012522:	4680      	mov	r8, r0
 8012524:	4689      	mov	r9, r1
 8012526:	dc11      	bgt.n	801254c <__kernel_cos+0x104>
 8012528:	4602      	mov	r2, r0
 801252a:	460b      	mov	r3, r1
 801252c:	4650      	mov	r0, sl
 801252e:	4659      	mov	r1, fp
 8012530:	f7f5 fdda 	bl	80080e8 <__aeabi_dsub>
 8012534:	460b      	mov	r3, r1
 8012536:	4924      	ldr	r1, [pc, #144]	; (80125c8 <__kernel_cos+0x180>)
 8012538:	4602      	mov	r2, r0
 801253a:	2000      	movs	r0, #0
 801253c:	f7f5 fdd4 	bl	80080e8 <__aeabi_dsub>
 8012540:	ecbd 8b02 	vpop	{d8}
 8012544:	ec41 0b10 	vmov	d0, r0, r1
 8012548:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801254c:	4b1f      	ldr	r3, [pc, #124]	; (80125cc <__kernel_cos+0x184>)
 801254e:	491e      	ldr	r1, [pc, #120]	; (80125c8 <__kernel_cos+0x180>)
 8012550:	429e      	cmp	r6, r3
 8012552:	bfcc      	ite	gt
 8012554:	4d1e      	ldrgt	r5, [pc, #120]	; (80125d0 <__kernel_cos+0x188>)
 8012556:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 801255a:	2400      	movs	r4, #0
 801255c:	4622      	mov	r2, r4
 801255e:	462b      	mov	r3, r5
 8012560:	2000      	movs	r0, #0
 8012562:	f7f5 fdc1 	bl	80080e8 <__aeabi_dsub>
 8012566:	4622      	mov	r2, r4
 8012568:	4606      	mov	r6, r0
 801256a:	460f      	mov	r7, r1
 801256c:	462b      	mov	r3, r5
 801256e:	4650      	mov	r0, sl
 8012570:	4659      	mov	r1, fp
 8012572:	f7f5 fdb9 	bl	80080e8 <__aeabi_dsub>
 8012576:	4642      	mov	r2, r8
 8012578:	464b      	mov	r3, r9
 801257a:	f7f5 fdb5 	bl	80080e8 <__aeabi_dsub>
 801257e:	4602      	mov	r2, r0
 8012580:	460b      	mov	r3, r1
 8012582:	4630      	mov	r0, r6
 8012584:	4639      	mov	r1, r7
 8012586:	e7d9      	b.n	801253c <__kernel_cos+0xf4>
 8012588:	2000      	movs	r0, #0
 801258a:	490f      	ldr	r1, [pc, #60]	; (80125c8 <__kernel_cos+0x180>)
 801258c:	e7d8      	b.n	8012540 <__kernel_cos+0xf8>
 801258e:	bf00      	nop
 8012590:	be8838d4 	.word	0xbe8838d4
 8012594:	bda8fae9 	.word	0xbda8fae9
 8012598:	bdb4b1c4 	.word	0xbdb4b1c4
 801259c:	3e21ee9e 	.word	0x3e21ee9e
 80125a0:	809c52ad 	.word	0x809c52ad
 80125a4:	3e927e4f 	.word	0x3e927e4f
 80125a8:	19cb1590 	.word	0x19cb1590
 80125ac:	3efa01a0 	.word	0x3efa01a0
 80125b0:	16c15177 	.word	0x16c15177
 80125b4:	3f56c16c 	.word	0x3f56c16c
 80125b8:	5555554c 	.word	0x5555554c
 80125bc:	3fa55555 	.word	0x3fa55555
 80125c0:	3fe00000 	.word	0x3fe00000
 80125c4:	3fd33332 	.word	0x3fd33332
 80125c8:	3ff00000 	.word	0x3ff00000
 80125cc:	3fe90000 	.word	0x3fe90000
 80125d0:	3fd20000 	.word	0x3fd20000
 80125d4:	00000000 	.word	0x00000000

080125d8 <__kernel_rem_pio2>:
 80125d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125dc:	ed2d 8b02 	vpush	{d8}
 80125e0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80125e4:	1ed4      	subs	r4, r2, #3
 80125e6:	9308      	str	r3, [sp, #32]
 80125e8:	9101      	str	r1, [sp, #4]
 80125ea:	4bc5      	ldr	r3, [pc, #788]	; (8012900 <__kernel_rem_pio2+0x328>)
 80125ec:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80125ee:	9009      	str	r0, [sp, #36]	; 0x24
 80125f0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80125f4:	9304      	str	r3, [sp, #16]
 80125f6:	9b08      	ldr	r3, [sp, #32]
 80125f8:	3b01      	subs	r3, #1
 80125fa:	9307      	str	r3, [sp, #28]
 80125fc:	2318      	movs	r3, #24
 80125fe:	fb94 f4f3 	sdiv	r4, r4, r3
 8012602:	f06f 0317 	mvn.w	r3, #23
 8012606:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801260a:	fb04 3303 	mla	r3, r4, r3, r3
 801260e:	eb03 0a02 	add.w	sl, r3, r2
 8012612:	9b04      	ldr	r3, [sp, #16]
 8012614:	9a07      	ldr	r2, [sp, #28]
 8012616:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80128f0 <__kernel_rem_pio2+0x318>
 801261a:	eb03 0802 	add.w	r8, r3, r2
 801261e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8012620:	1aa7      	subs	r7, r4, r2
 8012622:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8012626:	ae22      	add	r6, sp, #136	; 0x88
 8012628:	2500      	movs	r5, #0
 801262a:	4545      	cmp	r5, r8
 801262c:	dd13      	ble.n	8012656 <__kernel_rem_pio2+0x7e>
 801262e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 80128f0 <__kernel_rem_pio2+0x318>
 8012632:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8012636:	2600      	movs	r6, #0
 8012638:	9b04      	ldr	r3, [sp, #16]
 801263a:	429e      	cmp	r6, r3
 801263c:	dc32      	bgt.n	80126a4 <__kernel_rem_pio2+0xcc>
 801263e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012640:	9302      	str	r3, [sp, #8]
 8012642:	9b08      	ldr	r3, [sp, #32]
 8012644:	199d      	adds	r5, r3, r6
 8012646:	ab22      	add	r3, sp, #136	; 0x88
 8012648:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801264c:	9306      	str	r3, [sp, #24]
 801264e:	ec59 8b18 	vmov	r8, r9, d8
 8012652:	2700      	movs	r7, #0
 8012654:	e01f      	b.n	8012696 <__kernel_rem_pio2+0xbe>
 8012656:	42ef      	cmn	r7, r5
 8012658:	d407      	bmi.n	801266a <__kernel_rem_pio2+0x92>
 801265a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801265e:	f7f5 fe91 	bl	8008384 <__aeabi_i2d>
 8012662:	e8e6 0102 	strd	r0, r1, [r6], #8
 8012666:	3501      	adds	r5, #1
 8012668:	e7df      	b.n	801262a <__kernel_rem_pio2+0x52>
 801266a:	ec51 0b18 	vmov	r0, r1, d8
 801266e:	e7f8      	b.n	8012662 <__kernel_rem_pio2+0x8a>
 8012670:	9906      	ldr	r1, [sp, #24]
 8012672:	9d02      	ldr	r5, [sp, #8]
 8012674:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8012678:	9106      	str	r1, [sp, #24]
 801267a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 801267e:	9502      	str	r5, [sp, #8]
 8012680:	f7f5 feea 	bl	8008458 <__aeabi_dmul>
 8012684:	4602      	mov	r2, r0
 8012686:	460b      	mov	r3, r1
 8012688:	4640      	mov	r0, r8
 801268a:	4649      	mov	r1, r9
 801268c:	f7f5 fd2e 	bl	80080ec <__adddf3>
 8012690:	3701      	adds	r7, #1
 8012692:	4680      	mov	r8, r0
 8012694:	4689      	mov	r9, r1
 8012696:	9b07      	ldr	r3, [sp, #28]
 8012698:	429f      	cmp	r7, r3
 801269a:	dde9      	ble.n	8012670 <__kernel_rem_pio2+0x98>
 801269c:	e8eb 8902 	strd	r8, r9, [fp], #8
 80126a0:	3601      	adds	r6, #1
 80126a2:	e7c9      	b.n	8012638 <__kernel_rem_pio2+0x60>
 80126a4:	9b04      	ldr	r3, [sp, #16]
 80126a6:	aa0e      	add	r2, sp, #56	; 0x38
 80126a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80126ac:	930c      	str	r3, [sp, #48]	; 0x30
 80126ae:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80126b0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80126b4:	9c04      	ldr	r4, [sp, #16]
 80126b6:	930b      	str	r3, [sp, #44]	; 0x2c
 80126b8:	ab9a      	add	r3, sp, #616	; 0x268
 80126ba:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 80126be:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80126c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80126c6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80126ca:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80126ce:	ab9a      	add	r3, sp, #616	; 0x268
 80126d0:	445b      	add	r3, fp
 80126d2:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 80126d6:	2500      	movs	r5, #0
 80126d8:	1b63      	subs	r3, r4, r5
 80126da:	2b00      	cmp	r3, #0
 80126dc:	dc78      	bgt.n	80127d0 <__kernel_rem_pio2+0x1f8>
 80126de:	4650      	mov	r0, sl
 80126e0:	ec49 8b10 	vmov	d0, r8, r9
 80126e4:	f000 fc04 	bl	8012ef0 <scalbn>
 80126e8:	ec57 6b10 	vmov	r6, r7, d0
 80126ec:	2200      	movs	r2, #0
 80126ee:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80126f2:	ee10 0a10 	vmov	r0, s0
 80126f6:	4639      	mov	r1, r7
 80126f8:	f7f5 feae 	bl	8008458 <__aeabi_dmul>
 80126fc:	ec41 0b10 	vmov	d0, r0, r1
 8012700:	f000 fb6e 	bl	8012de0 <floor>
 8012704:	2200      	movs	r2, #0
 8012706:	ec51 0b10 	vmov	r0, r1, d0
 801270a:	4b7e      	ldr	r3, [pc, #504]	; (8012904 <__kernel_rem_pio2+0x32c>)
 801270c:	f7f5 fea4 	bl	8008458 <__aeabi_dmul>
 8012710:	4602      	mov	r2, r0
 8012712:	460b      	mov	r3, r1
 8012714:	4630      	mov	r0, r6
 8012716:	4639      	mov	r1, r7
 8012718:	f7f5 fce6 	bl	80080e8 <__aeabi_dsub>
 801271c:	460f      	mov	r7, r1
 801271e:	4606      	mov	r6, r0
 8012720:	f7f6 f934 	bl	800898c <__aeabi_d2iz>
 8012724:	9006      	str	r0, [sp, #24]
 8012726:	f7f5 fe2d 	bl	8008384 <__aeabi_i2d>
 801272a:	4602      	mov	r2, r0
 801272c:	460b      	mov	r3, r1
 801272e:	4630      	mov	r0, r6
 8012730:	4639      	mov	r1, r7
 8012732:	f7f5 fcd9 	bl	80080e8 <__aeabi_dsub>
 8012736:	f1ba 0f00 	cmp.w	sl, #0
 801273a:	4606      	mov	r6, r0
 801273c:	460f      	mov	r7, r1
 801273e:	dd6c      	ble.n	801281a <__kernel_rem_pio2+0x242>
 8012740:	1e62      	subs	r2, r4, #1
 8012742:	ab0e      	add	r3, sp, #56	; 0x38
 8012744:	f1ca 0118 	rsb	r1, sl, #24
 8012748:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801274c:	9d06      	ldr	r5, [sp, #24]
 801274e:	fa40 f301 	asr.w	r3, r0, r1
 8012752:	441d      	add	r5, r3
 8012754:	408b      	lsls	r3, r1
 8012756:	1ac0      	subs	r0, r0, r3
 8012758:	ab0e      	add	r3, sp, #56	; 0x38
 801275a:	9506      	str	r5, [sp, #24]
 801275c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8012760:	f1ca 0317 	rsb	r3, sl, #23
 8012764:	fa40 f303 	asr.w	r3, r0, r3
 8012768:	9302      	str	r3, [sp, #8]
 801276a:	9b02      	ldr	r3, [sp, #8]
 801276c:	2b00      	cmp	r3, #0
 801276e:	dd62      	ble.n	8012836 <__kernel_rem_pio2+0x25e>
 8012770:	9b06      	ldr	r3, [sp, #24]
 8012772:	2200      	movs	r2, #0
 8012774:	3301      	adds	r3, #1
 8012776:	9306      	str	r3, [sp, #24]
 8012778:	4615      	mov	r5, r2
 801277a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801277e:	4294      	cmp	r4, r2
 8012780:	f300 8095 	bgt.w	80128ae <__kernel_rem_pio2+0x2d6>
 8012784:	f1ba 0f00 	cmp.w	sl, #0
 8012788:	dd07      	ble.n	801279a <__kernel_rem_pio2+0x1c2>
 801278a:	f1ba 0f01 	cmp.w	sl, #1
 801278e:	f000 80a2 	beq.w	80128d6 <__kernel_rem_pio2+0x2fe>
 8012792:	f1ba 0f02 	cmp.w	sl, #2
 8012796:	f000 80c1 	beq.w	801291c <__kernel_rem_pio2+0x344>
 801279a:	9b02      	ldr	r3, [sp, #8]
 801279c:	2b02      	cmp	r3, #2
 801279e:	d14a      	bne.n	8012836 <__kernel_rem_pio2+0x25e>
 80127a0:	4632      	mov	r2, r6
 80127a2:	463b      	mov	r3, r7
 80127a4:	2000      	movs	r0, #0
 80127a6:	4958      	ldr	r1, [pc, #352]	; (8012908 <__kernel_rem_pio2+0x330>)
 80127a8:	f7f5 fc9e 	bl	80080e8 <__aeabi_dsub>
 80127ac:	4606      	mov	r6, r0
 80127ae:	460f      	mov	r7, r1
 80127b0:	2d00      	cmp	r5, #0
 80127b2:	d040      	beq.n	8012836 <__kernel_rem_pio2+0x25e>
 80127b4:	4650      	mov	r0, sl
 80127b6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80128f8 <__kernel_rem_pio2+0x320>
 80127ba:	f000 fb99 	bl	8012ef0 <scalbn>
 80127be:	4630      	mov	r0, r6
 80127c0:	4639      	mov	r1, r7
 80127c2:	ec53 2b10 	vmov	r2, r3, d0
 80127c6:	f7f5 fc8f 	bl	80080e8 <__aeabi_dsub>
 80127ca:	4606      	mov	r6, r0
 80127cc:	460f      	mov	r7, r1
 80127ce:	e032      	b.n	8012836 <__kernel_rem_pio2+0x25e>
 80127d0:	2200      	movs	r2, #0
 80127d2:	4b4e      	ldr	r3, [pc, #312]	; (801290c <__kernel_rem_pio2+0x334>)
 80127d4:	4640      	mov	r0, r8
 80127d6:	4649      	mov	r1, r9
 80127d8:	f7f5 fe3e 	bl	8008458 <__aeabi_dmul>
 80127dc:	f7f6 f8d6 	bl	800898c <__aeabi_d2iz>
 80127e0:	f7f5 fdd0 	bl	8008384 <__aeabi_i2d>
 80127e4:	2200      	movs	r2, #0
 80127e6:	4b4a      	ldr	r3, [pc, #296]	; (8012910 <__kernel_rem_pio2+0x338>)
 80127e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80127ec:	f7f5 fe34 	bl	8008458 <__aeabi_dmul>
 80127f0:	4602      	mov	r2, r0
 80127f2:	460b      	mov	r3, r1
 80127f4:	4640      	mov	r0, r8
 80127f6:	4649      	mov	r1, r9
 80127f8:	f7f5 fc76 	bl	80080e8 <__aeabi_dsub>
 80127fc:	f7f6 f8c6 	bl	800898c <__aeabi_d2iz>
 8012800:	ab0e      	add	r3, sp, #56	; 0x38
 8012802:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8012806:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801280a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801280e:	f7f5 fc6d 	bl	80080ec <__adddf3>
 8012812:	3501      	adds	r5, #1
 8012814:	4680      	mov	r8, r0
 8012816:	4689      	mov	r9, r1
 8012818:	e75e      	b.n	80126d8 <__kernel_rem_pio2+0x100>
 801281a:	d105      	bne.n	8012828 <__kernel_rem_pio2+0x250>
 801281c:	1e63      	subs	r3, r4, #1
 801281e:	aa0e      	add	r2, sp, #56	; 0x38
 8012820:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8012824:	15c3      	asrs	r3, r0, #23
 8012826:	e79f      	b.n	8012768 <__kernel_rem_pio2+0x190>
 8012828:	2200      	movs	r2, #0
 801282a:	4b3a      	ldr	r3, [pc, #232]	; (8012914 <__kernel_rem_pio2+0x33c>)
 801282c:	f7f6 f89a 	bl	8008964 <__aeabi_dcmpge>
 8012830:	2800      	cmp	r0, #0
 8012832:	d139      	bne.n	80128a8 <__kernel_rem_pio2+0x2d0>
 8012834:	9002      	str	r0, [sp, #8]
 8012836:	2200      	movs	r2, #0
 8012838:	2300      	movs	r3, #0
 801283a:	4630      	mov	r0, r6
 801283c:	4639      	mov	r1, r7
 801283e:	f7f6 f873 	bl	8008928 <__aeabi_dcmpeq>
 8012842:	2800      	cmp	r0, #0
 8012844:	f000 80c7 	beq.w	80129d6 <__kernel_rem_pio2+0x3fe>
 8012848:	1e65      	subs	r5, r4, #1
 801284a:	462b      	mov	r3, r5
 801284c:	2200      	movs	r2, #0
 801284e:	9904      	ldr	r1, [sp, #16]
 8012850:	428b      	cmp	r3, r1
 8012852:	da6a      	bge.n	801292a <__kernel_rem_pio2+0x352>
 8012854:	2a00      	cmp	r2, #0
 8012856:	f000 8088 	beq.w	801296a <__kernel_rem_pio2+0x392>
 801285a:	ab0e      	add	r3, sp, #56	; 0x38
 801285c:	f1aa 0a18 	sub.w	sl, sl, #24
 8012860:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8012864:	2b00      	cmp	r3, #0
 8012866:	f000 80b4 	beq.w	80129d2 <__kernel_rem_pio2+0x3fa>
 801286a:	4650      	mov	r0, sl
 801286c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 80128f8 <__kernel_rem_pio2+0x320>
 8012870:	f000 fb3e 	bl	8012ef0 <scalbn>
 8012874:	00ec      	lsls	r4, r5, #3
 8012876:	ab72      	add	r3, sp, #456	; 0x1c8
 8012878:	191e      	adds	r6, r3, r4
 801287a:	ec59 8b10 	vmov	r8, r9, d0
 801287e:	f106 0a08 	add.w	sl, r6, #8
 8012882:	462f      	mov	r7, r5
 8012884:	2f00      	cmp	r7, #0
 8012886:	f280 80df 	bge.w	8012a48 <__kernel_rem_pio2+0x470>
 801288a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 80128f0 <__kernel_rem_pio2+0x318>
 801288e:	f04f 0a00 	mov.w	sl, #0
 8012892:	eba5 030a 	sub.w	r3, r5, sl
 8012896:	2b00      	cmp	r3, #0
 8012898:	f2c0 810a 	blt.w	8012ab0 <__kernel_rem_pio2+0x4d8>
 801289c:	f8df b078 	ldr.w	fp, [pc, #120]	; 8012918 <__kernel_rem_pio2+0x340>
 80128a0:	ec59 8b18 	vmov	r8, r9, d8
 80128a4:	2700      	movs	r7, #0
 80128a6:	e0f5      	b.n	8012a94 <__kernel_rem_pio2+0x4bc>
 80128a8:	2302      	movs	r3, #2
 80128aa:	9302      	str	r3, [sp, #8]
 80128ac:	e760      	b.n	8012770 <__kernel_rem_pio2+0x198>
 80128ae:	ab0e      	add	r3, sp, #56	; 0x38
 80128b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80128b4:	b94d      	cbnz	r5, 80128ca <__kernel_rem_pio2+0x2f2>
 80128b6:	b12b      	cbz	r3, 80128c4 <__kernel_rem_pio2+0x2ec>
 80128b8:	a80e      	add	r0, sp, #56	; 0x38
 80128ba:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80128be:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80128c2:	2301      	movs	r3, #1
 80128c4:	3201      	adds	r2, #1
 80128c6:	461d      	mov	r5, r3
 80128c8:	e759      	b.n	801277e <__kernel_rem_pio2+0x1a6>
 80128ca:	a80e      	add	r0, sp, #56	; 0x38
 80128cc:	1acb      	subs	r3, r1, r3
 80128ce:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80128d2:	462b      	mov	r3, r5
 80128d4:	e7f6      	b.n	80128c4 <__kernel_rem_pio2+0x2ec>
 80128d6:	1e62      	subs	r2, r4, #1
 80128d8:	ab0e      	add	r3, sp, #56	; 0x38
 80128da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80128de:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80128e2:	a90e      	add	r1, sp, #56	; 0x38
 80128e4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80128e8:	e757      	b.n	801279a <__kernel_rem_pio2+0x1c2>
 80128ea:	bf00      	nop
 80128ec:	f3af 8000 	nop.w
	...
 80128fc:	3ff00000 	.word	0x3ff00000
 8012900:	08026c50 	.word	0x08026c50
 8012904:	40200000 	.word	0x40200000
 8012908:	3ff00000 	.word	0x3ff00000
 801290c:	3e700000 	.word	0x3e700000
 8012910:	41700000 	.word	0x41700000
 8012914:	3fe00000 	.word	0x3fe00000
 8012918:	08026c10 	.word	0x08026c10
 801291c:	1e62      	subs	r2, r4, #1
 801291e:	ab0e      	add	r3, sp, #56	; 0x38
 8012920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012924:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012928:	e7db      	b.n	80128e2 <__kernel_rem_pio2+0x30a>
 801292a:	a90e      	add	r1, sp, #56	; 0x38
 801292c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8012930:	3b01      	subs	r3, #1
 8012932:	430a      	orrs	r2, r1
 8012934:	e78b      	b.n	801284e <__kernel_rem_pio2+0x276>
 8012936:	3301      	adds	r3, #1
 8012938:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801293c:	2900      	cmp	r1, #0
 801293e:	d0fa      	beq.n	8012936 <__kernel_rem_pio2+0x35e>
 8012940:	9a08      	ldr	r2, [sp, #32]
 8012942:	4422      	add	r2, r4
 8012944:	00d2      	lsls	r2, r2, #3
 8012946:	a922      	add	r1, sp, #136	; 0x88
 8012948:	18e3      	adds	r3, r4, r3
 801294a:	9206      	str	r2, [sp, #24]
 801294c:	440a      	add	r2, r1
 801294e:	9302      	str	r3, [sp, #8]
 8012950:	f10b 0108 	add.w	r1, fp, #8
 8012954:	f102 0308 	add.w	r3, r2, #8
 8012958:	1c66      	adds	r6, r4, #1
 801295a:	910a      	str	r1, [sp, #40]	; 0x28
 801295c:	2500      	movs	r5, #0
 801295e:	930d      	str	r3, [sp, #52]	; 0x34
 8012960:	9b02      	ldr	r3, [sp, #8]
 8012962:	42b3      	cmp	r3, r6
 8012964:	da04      	bge.n	8012970 <__kernel_rem_pio2+0x398>
 8012966:	461c      	mov	r4, r3
 8012968:	e6a6      	b.n	80126b8 <__kernel_rem_pio2+0xe0>
 801296a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801296c:	2301      	movs	r3, #1
 801296e:	e7e3      	b.n	8012938 <__kernel_rem_pio2+0x360>
 8012970:	9b06      	ldr	r3, [sp, #24]
 8012972:	18ef      	adds	r7, r5, r3
 8012974:	ab22      	add	r3, sp, #136	; 0x88
 8012976:	441f      	add	r7, r3
 8012978:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801297a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801297e:	f7f5 fd01 	bl	8008384 <__aeabi_i2d>
 8012982:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012984:	461c      	mov	r4, r3
 8012986:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012988:	e9c7 0100 	strd	r0, r1, [r7]
 801298c:	eb03 0b05 	add.w	fp, r3, r5
 8012990:	2700      	movs	r7, #0
 8012992:	f04f 0800 	mov.w	r8, #0
 8012996:	f04f 0900 	mov.w	r9, #0
 801299a:	9b07      	ldr	r3, [sp, #28]
 801299c:	429f      	cmp	r7, r3
 801299e:	dd08      	ble.n	80129b2 <__kernel_rem_pio2+0x3da>
 80129a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80129a2:	aa72      	add	r2, sp, #456	; 0x1c8
 80129a4:	18eb      	adds	r3, r5, r3
 80129a6:	4413      	add	r3, r2
 80129a8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 80129ac:	3601      	adds	r6, #1
 80129ae:	3508      	adds	r5, #8
 80129b0:	e7d6      	b.n	8012960 <__kernel_rem_pio2+0x388>
 80129b2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80129b6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80129ba:	f7f5 fd4d 	bl	8008458 <__aeabi_dmul>
 80129be:	4602      	mov	r2, r0
 80129c0:	460b      	mov	r3, r1
 80129c2:	4640      	mov	r0, r8
 80129c4:	4649      	mov	r1, r9
 80129c6:	f7f5 fb91 	bl	80080ec <__adddf3>
 80129ca:	3701      	adds	r7, #1
 80129cc:	4680      	mov	r8, r0
 80129ce:	4689      	mov	r9, r1
 80129d0:	e7e3      	b.n	801299a <__kernel_rem_pio2+0x3c2>
 80129d2:	3d01      	subs	r5, #1
 80129d4:	e741      	b.n	801285a <__kernel_rem_pio2+0x282>
 80129d6:	f1ca 0000 	rsb	r0, sl, #0
 80129da:	ec47 6b10 	vmov	d0, r6, r7
 80129de:	f000 fa87 	bl	8012ef0 <scalbn>
 80129e2:	ec57 6b10 	vmov	r6, r7, d0
 80129e6:	2200      	movs	r2, #0
 80129e8:	4b99      	ldr	r3, [pc, #612]	; (8012c50 <__kernel_rem_pio2+0x678>)
 80129ea:	ee10 0a10 	vmov	r0, s0
 80129ee:	4639      	mov	r1, r7
 80129f0:	f7f5 ffb8 	bl	8008964 <__aeabi_dcmpge>
 80129f4:	b1f8      	cbz	r0, 8012a36 <__kernel_rem_pio2+0x45e>
 80129f6:	2200      	movs	r2, #0
 80129f8:	4b96      	ldr	r3, [pc, #600]	; (8012c54 <__kernel_rem_pio2+0x67c>)
 80129fa:	4630      	mov	r0, r6
 80129fc:	4639      	mov	r1, r7
 80129fe:	f7f5 fd2b 	bl	8008458 <__aeabi_dmul>
 8012a02:	f7f5 ffc3 	bl	800898c <__aeabi_d2iz>
 8012a06:	4680      	mov	r8, r0
 8012a08:	f7f5 fcbc 	bl	8008384 <__aeabi_i2d>
 8012a0c:	2200      	movs	r2, #0
 8012a0e:	4b90      	ldr	r3, [pc, #576]	; (8012c50 <__kernel_rem_pio2+0x678>)
 8012a10:	f7f5 fd22 	bl	8008458 <__aeabi_dmul>
 8012a14:	460b      	mov	r3, r1
 8012a16:	4602      	mov	r2, r0
 8012a18:	4639      	mov	r1, r7
 8012a1a:	4630      	mov	r0, r6
 8012a1c:	f7f5 fb64 	bl	80080e8 <__aeabi_dsub>
 8012a20:	f7f5 ffb4 	bl	800898c <__aeabi_d2iz>
 8012a24:	1c65      	adds	r5, r4, #1
 8012a26:	ab0e      	add	r3, sp, #56	; 0x38
 8012a28:	f10a 0a18 	add.w	sl, sl, #24
 8012a2c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012a30:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8012a34:	e719      	b.n	801286a <__kernel_rem_pio2+0x292>
 8012a36:	4630      	mov	r0, r6
 8012a38:	4639      	mov	r1, r7
 8012a3a:	f7f5 ffa7 	bl	800898c <__aeabi_d2iz>
 8012a3e:	ab0e      	add	r3, sp, #56	; 0x38
 8012a40:	4625      	mov	r5, r4
 8012a42:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012a46:	e710      	b.n	801286a <__kernel_rem_pio2+0x292>
 8012a48:	ab0e      	add	r3, sp, #56	; 0x38
 8012a4a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8012a4e:	f7f5 fc99 	bl	8008384 <__aeabi_i2d>
 8012a52:	4642      	mov	r2, r8
 8012a54:	464b      	mov	r3, r9
 8012a56:	f7f5 fcff 	bl	8008458 <__aeabi_dmul>
 8012a5a:	2200      	movs	r2, #0
 8012a5c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8012a60:	4b7c      	ldr	r3, [pc, #496]	; (8012c54 <__kernel_rem_pio2+0x67c>)
 8012a62:	4640      	mov	r0, r8
 8012a64:	4649      	mov	r1, r9
 8012a66:	f7f5 fcf7 	bl	8008458 <__aeabi_dmul>
 8012a6a:	3f01      	subs	r7, #1
 8012a6c:	4680      	mov	r8, r0
 8012a6e:	4689      	mov	r9, r1
 8012a70:	e708      	b.n	8012884 <__kernel_rem_pio2+0x2ac>
 8012a72:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8012a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a7a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8012a7e:	f7f5 fceb 	bl	8008458 <__aeabi_dmul>
 8012a82:	4602      	mov	r2, r0
 8012a84:	460b      	mov	r3, r1
 8012a86:	4640      	mov	r0, r8
 8012a88:	4649      	mov	r1, r9
 8012a8a:	f7f5 fb2f 	bl	80080ec <__adddf3>
 8012a8e:	3701      	adds	r7, #1
 8012a90:	4680      	mov	r8, r0
 8012a92:	4689      	mov	r9, r1
 8012a94:	9b04      	ldr	r3, [sp, #16]
 8012a96:	429f      	cmp	r7, r3
 8012a98:	dc01      	bgt.n	8012a9e <__kernel_rem_pio2+0x4c6>
 8012a9a:	45ba      	cmp	sl, r7
 8012a9c:	dae9      	bge.n	8012a72 <__kernel_rem_pio2+0x49a>
 8012a9e:	ab4a      	add	r3, sp, #296	; 0x128
 8012aa0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012aa4:	e9c3 8900 	strd	r8, r9, [r3]
 8012aa8:	f10a 0a01 	add.w	sl, sl, #1
 8012aac:	3e08      	subs	r6, #8
 8012aae:	e6f0      	b.n	8012892 <__kernel_rem_pio2+0x2ba>
 8012ab0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8012ab2:	2b03      	cmp	r3, #3
 8012ab4:	d85b      	bhi.n	8012b6e <__kernel_rem_pio2+0x596>
 8012ab6:	e8df f003 	tbb	[pc, r3]
 8012aba:	264a      	.short	0x264a
 8012abc:	0226      	.short	0x0226
 8012abe:	ab9a      	add	r3, sp, #616	; 0x268
 8012ac0:	441c      	add	r4, r3
 8012ac2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8012ac6:	46a2      	mov	sl, r4
 8012ac8:	46ab      	mov	fp, r5
 8012aca:	f1bb 0f00 	cmp.w	fp, #0
 8012ace:	dc6c      	bgt.n	8012baa <__kernel_rem_pio2+0x5d2>
 8012ad0:	46a2      	mov	sl, r4
 8012ad2:	46ab      	mov	fp, r5
 8012ad4:	f1bb 0f01 	cmp.w	fp, #1
 8012ad8:	f300 8086 	bgt.w	8012be8 <__kernel_rem_pio2+0x610>
 8012adc:	2000      	movs	r0, #0
 8012ade:	2100      	movs	r1, #0
 8012ae0:	2d01      	cmp	r5, #1
 8012ae2:	f300 80a0 	bgt.w	8012c26 <__kernel_rem_pio2+0x64e>
 8012ae6:	9b02      	ldr	r3, [sp, #8]
 8012ae8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8012aec:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	f040 809e 	bne.w	8012c32 <__kernel_rem_pio2+0x65a>
 8012af6:	9b01      	ldr	r3, [sp, #4]
 8012af8:	e9c3 7800 	strd	r7, r8, [r3]
 8012afc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8012b00:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8012b04:	e033      	b.n	8012b6e <__kernel_rem_pio2+0x596>
 8012b06:	3408      	adds	r4, #8
 8012b08:	ab4a      	add	r3, sp, #296	; 0x128
 8012b0a:	441c      	add	r4, r3
 8012b0c:	462e      	mov	r6, r5
 8012b0e:	2000      	movs	r0, #0
 8012b10:	2100      	movs	r1, #0
 8012b12:	2e00      	cmp	r6, #0
 8012b14:	da3a      	bge.n	8012b8c <__kernel_rem_pio2+0x5b4>
 8012b16:	9b02      	ldr	r3, [sp, #8]
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d03d      	beq.n	8012b98 <__kernel_rem_pio2+0x5c0>
 8012b1c:	4602      	mov	r2, r0
 8012b1e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012b22:	9c01      	ldr	r4, [sp, #4]
 8012b24:	e9c4 2300 	strd	r2, r3, [r4]
 8012b28:	4602      	mov	r2, r0
 8012b2a:	460b      	mov	r3, r1
 8012b2c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8012b30:	f7f5 fada 	bl	80080e8 <__aeabi_dsub>
 8012b34:	ae4c      	add	r6, sp, #304	; 0x130
 8012b36:	2401      	movs	r4, #1
 8012b38:	42a5      	cmp	r5, r4
 8012b3a:	da30      	bge.n	8012b9e <__kernel_rem_pio2+0x5c6>
 8012b3c:	9b02      	ldr	r3, [sp, #8]
 8012b3e:	b113      	cbz	r3, 8012b46 <__kernel_rem_pio2+0x56e>
 8012b40:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012b44:	4619      	mov	r1, r3
 8012b46:	9b01      	ldr	r3, [sp, #4]
 8012b48:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8012b4c:	e00f      	b.n	8012b6e <__kernel_rem_pio2+0x596>
 8012b4e:	ab9a      	add	r3, sp, #616	; 0x268
 8012b50:	441c      	add	r4, r3
 8012b52:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8012b56:	2000      	movs	r0, #0
 8012b58:	2100      	movs	r1, #0
 8012b5a:	2d00      	cmp	r5, #0
 8012b5c:	da10      	bge.n	8012b80 <__kernel_rem_pio2+0x5a8>
 8012b5e:	9b02      	ldr	r3, [sp, #8]
 8012b60:	b113      	cbz	r3, 8012b68 <__kernel_rem_pio2+0x590>
 8012b62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012b66:	4619      	mov	r1, r3
 8012b68:	9b01      	ldr	r3, [sp, #4]
 8012b6a:	e9c3 0100 	strd	r0, r1, [r3]
 8012b6e:	9b06      	ldr	r3, [sp, #24]
 8012b70:	f003 0007 	and.w	r0, r3, #7
 8012b74:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8012b78:	ecbd 8b02 	vpop	{d8}
 8012b7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b80:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012b84:	f7f5 fab2 	bl	80080ec <__adddf3>
 8012b88:	3d01      	subs	r5, #1
 8012b8a:	e7e6      	b.n	8012b5a <__kernel_rem_pio2+0x582>
 8012b8c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012b90:	f7f5 faac 	bl	80080ec <__adddf3>
 8012b94:	3e01      	subs	r6, #1
 8012b96:	e7bc      	b.n	8012b12 <__kernel_rem_pio2+0x53a>
 8012b98:	4602      	mov	r2, r0
 8012b9a:	460b      	mov	r3, r1
 8012b9c:	e7c1      	b.n	8012b22 <__kernel_rem_pio2+0x54a>
 8012b9e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8012ba2:	f7f5 faa3 	bl	80080ec <__adddf3>
 8012ba6:	3401      	adds	r4, #1
 8012ba8:	e7c6      	b.n	8012b38 <__kernel_rem_pio2+0x560>
 8012baa:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8012bae:	ed3a 7b02 	vldmdb	sl!, {d7}
 8012bb2:	4640      	mov	r0, r8
 8012bb4:	ec53 2b17 	vmov	r2, r3, d7
 8012bb8:	4649      	mov	r1, r9
 8012bba:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012bbe:	f7f5 fa95 	bl	80080ec <__adddf3>
 8012bc2:	4602      	mov	r2, r0
 8012bc4:	460b      	mov	r3, r1
 8012bc6:	4606      	mov	r6, r0
 8012bc8:	460f      	mov	r7, r1
 8012bca:	4640      	mov	r0, r8
 8012bcc:	4649      	mov	r1, r9
 8012bce:	f7f5 fa8b 	bl	80080e8 <__aeabi_dsub>
 8012bd2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012bd6:	f7f5 fa89 	bl	80080ec <__adddf3>
 8012bda:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012bde:	e9ca 0100 	strd	r0, r1, [sl]
 8012be2:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8012be6:	e770      	b.n	8012aca <__kernel_rem_pio2+0x4f2>
 8012be8:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8012bec:	ed3a 7b02 	vldmdb	sl!, {d7}
 8012bf0:	4630      	mov	r0, r6
 8012bf2:	ec53 2b17 	vmov	r2, r3, d7
 8012bf6:	4639      	mov	r1, r7
 8012bf8:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012bfc:	f7f5 fa76 	bl	80080ec <__adddf3>
 8012c00:	4602      	mov	r2, r0
 8012c02:	460b      	mov	r3, r1
 8012c04:	4680      	mov	r8, r0
 8012c06:	4689      	mov	r9, r1
 8012c08:	4630      	mov	r0, r6
 8012c0a:	4639      	mov	r1, r7
 8012c0c:	f7f5 fa6c 	bl	80080e8 <__aeabi_dsub>
 8012c10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012c14:	f7f5 fa6a 	bl	80080ec <__adddf3>
 8012c18:	f10b 3bff 	add.w	fp, fp, #4294967295
 8012c1c:	e9ca 0100 	strd	r0, r1, [sl]
 8012c20:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8012c24:	e756      	b.n	8012ad4 <__kernel_rem_pio2+0x4fc>
 8012c26:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012c2a:	f7f5 fa5f 	bl	80080ec <__adddf3>
 8012c2e:	3d01      	subs	r5, #1
 8012c30:	e756      	b.n	8012ae0 <__kernel_rem_pio2+0x508>
 8012c32:	9b01      	ldr	r3, [sp, #4]
 8012c34:	9a01      	ldr	r2, [sp, #4]
 8012c36:	601f      	str	r7, [r3, #0]
 8012c38:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8012c3c:	605c      	str	r4, [r3, #4]
 8012c3e:	609d      	str	r5, [r3, #8]
 8012c40:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8012c44:	60d3      	str	r3, [r2, #12]
 8012c46:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012c4a:	6110      	str	r0, [r2, #16]
 8012c4c:	6153      	str	r3, [r2, #20]
 8012c4e:	e78e      	b.n	8012b6e <__kernel_rem_pio2+0x596>
 8012c50:	41700000 	.word	0x41700000
 8012c54:	3e700000 	.word	0x3e700000

08012c58 <__kernel_sin>:
 8012c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c5c:	ec55 4b10 	vmov	r4, r5, d0
 8012c60:	b085      	sub	sp, #20
 8012c62:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012c66:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8012c6a:	ed8d 1b00 	vstr	d1, [sp]
 8012c6e:	9002      	str	r0, [sp, #8]
 8012c70:	da06      	bge.n	8012c80 <__kernel_sin+0x28>
 8012c72:	ee10 0a10 	vmov	r0, s0
 8012c76:	4629      	mov	r1, r5
 8012c78:	f7f5 fe88 	bl	800898c <__aeabi_d2iz>
 8012c7c:	2800      	cmp	r0, #0
 8012c7e:	d051      	beq.n	8012d24 <__kernel_sin+0xcc>
 8012c80:	4622      	mov	r2, r4
 8012c82:	462b      	mov	r3, r5
 8012c84:	4620      	mov	r0, r4
 8012c86:	4629      	mov	r1, r5
 8012c88:	f7f5 fbe6 	bl	8008458 <__aeabi_dmul>
 8012c8c:	4682      	mov	sl, r0
 8012c8e:	468b      	mov	fp, r1
 8012c90:	4602      	mov	r2, r0
 8012c92:	460b      	mov	r3, r1
 8012c94:	4620      	mov	r0, r4
 8012c96:	4629      	mov	r1, r5
 8012c98:	f7f5 fbde 	bl	8008458 <__aeabi_dmul>
 8012c9c:	a341      	add	r3, pc, #260	; (adr r3, 8012da4 <__kernel_sin+0x14c>)
 8012c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ca2:	4680      	mov	r8, r0
 8012ca4:	4689      	mov	r9, r1
 8012ca6:	4650      	mov	r0, sl
 8012ca8:	4659      	mov	r1, fp
 8012caa:	f7f5 fbd5 	bl	8008458 <__aeabi_dmul>
 8012cae:	a33f      	add	r3, pc, #252	; (adr r3, 8012dac <__kernel_sin+0x154>)
 8012cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cb4:	f7f5 fa18 	bl	80080e8 <__aeabi_dsub>
 8012cb8:	4652      	mov	r2, sl
 8012cba:	465b      	mov	r3, fp
 8012cbc:	f7f5 fbcc 	bl	8008458 <__aeabi_dmul>
 8012cc0:	a33c      	add	r3, pc, #240	; (adr r3, 8012db4 <__kernel_sin+0x15c>)
 8012cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cc6:	f7f5 fa11 	bl	80080ec <__adddf3>
 8012cca:	4652      	mov	r2, sl
 8012ccc:	465b      	mov	r3, fp
 8012cce:	f7f5 fbc3 	bl	8008458 <__aeabi_dmul>
 8012cd2:	a33a      	add	r3, pc, #232	; (adr r3, 8012dbc <__kernel_sin+0x164>)
 8012cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cd8:	f7f5 fa06 	bl	80080e8 <__aeabi_dsub>
 8012cdc:	4652      	mov	r2, sl
 8012cde:	465b      	mov	r3, fp
 8012ce0:	f7f5 fbba 	bl	8008458 <__aeabi_dmul>
 8012ce4:	a337      	add	r3, pc, #220	; (adr r3, 8012dc4 <__kernel_sin+0x16c>)
 8012ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cea:	f7f5 f9ff 	bl	80080ec <__adddf3>
 8012cee:	9b02      	ldr	r3, [sp, #8]
 8012cf0:	4606      	mov	r6, r0
 8012cf2:	460f      	mov	r7, r1
 8012cf4:	b9db      	cbnz	r3, 8012d2e <__kernel_sin+0xd6>
 8012cf6:	4602      	mov	r2, r0
 8012cf8:	460b      	mov	r3, r1
 8012cfa:	4650      	mov	r0, sl
 8012cfc:	4659      	mov	r1, fp
 8012cfe:	f7f5 fbab 	bl	8008458 <__aeabi_dmul>
 8012d02:	a325      	add	r3, pc, #148	; (adr r3, 8012d98 <__kernel_sin+0x140>)
 8012d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d08:	f7f5 f9ee 	bl	80080e8 <__aeabi_dsub>
 8012d0c:	4642      	mov	r2, r8
 8012d0e:	464b      	mov	r3, r9
 8012d10:	f7f5 fba2 	bl	8008458 <__aeabi_dmul>
 8012d14:	4602      	mov	r2, r0
 8012d16:	460b      	mov	r3, r1
 8012d18:	4620      	mov	r0, r4
 8012d1a:	4629      	mov	r1, r5
 8012d1c:	f7f5 f9e6 	bl	80080ec <__adddf3>
 8012d20:	4604      	mov	r4, r0
 8012d22:	460d      	mov	r5, r1
 8012d24:	ec45 4b10 	vmov	d0, r4, r5
 8012d28:	b005      	add	sp, #20
 8012d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d2e:	2200      	movs	r2, #0
 8012d30:	4b1b      	ldr	r3, [pc, #108]	; (8012da0 <__kernel_sin+0x148>)
 8012d32:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012d36:	f7f5 fb8f 	bl	8008458 <__aeabi_dmul>
 8012d3a:	4632      	mov	r2, r6
 8012d3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012d40:	463b      	mov	r3, r7
 8012d42:	4640      	mov	r0, r8
 8012d44:	4649      	mov	r1, r9
 8012d46:	f7f5 fb87 	bl	8008458 <__aeabi_dmul>
 8012d4a:	4602      	mov	r2, r0
 8012d4c:	460b      	mov	r3, r1
 8012d4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012d52:	f7f5 f9c9 	bl	80080e8 <__aeabi_dsub>
 8012d56:	4652      	mov	r2, sl
 8012d58:	465b      	mov	r3, fp
 8012d5a:	f7f5 fb7d 	bl	8008458 <__aeabi_dmul>
 8012d5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012d62:	f7f5 f9c1 	bl	80080e8 <__aeabi_dsub>
 8012d66:	a30c      	add	r3, pc, #48	; (adr r3, 8012d98 <__kernel_sin+0x140>)
 8012d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d6c:	4606      	mov	r6, r0
 8012d6e:	460f      	mov	r7, r1
 8012d70:	4640      	mov	r0, r8
 8012d72:	4649      	mov	r1, r9
 8012d74:	f7f5 fb70 	bl	8008458 <__aeabi_dmul>
 8012d78:	4602      	mov	r2, r0
 8012d7a:	460b      	mov	r3, r1
 8012d7c:	4630      	mov	r0, r6
 8012d7e:	4639      	mov	r1, r7
 8012d80:	f7f5 f9b4 	bl	80080ec <__adddf3>
 8012d84:	4602      	mov	r2, r0
 8012d86:	460b      	mov	r3, r1
 8012d88:	4620      	mov	r0, r4
 8012d8a:	4629      	mov	r1, r5
 8012d8c:	f7f5 f9ac 	bl	80080e8 <__aeabi_dsub>
 8012d90:	e7c6      	b.n	8012d20 <__kernel_sin+0xc8>
 8012d92:	bf00      	nop
 8012d94:	f3af 8000 	nop.w
 8012d98:	55555549 	.word	0x55555549
 8012d9c:	3fc55555 	.word	0x3fc55555
 8012da0:	3fe00000 	.word	0x3fe00000
 8012da4:	5acfd57c 	.word	0x5acfd57c
 8012da8:	3de5d93a 	.word	0x3de5d93a
 8012dac:	8a2b9ceb 	.word	0x8a2b9ceb
 8012db0:	3e5ae5e6 	.word	0x3e5ae5e6
 8012db4:	57b1fe7d 	.word	0x57b1fe7d
 8012db8:	3ec71de3 	.word	0x3ec71de3
 8012dbc:	19c161d5 	.word	0x19c161d5
 8012dc0:	3f2a01a0 	.word	0x3f2a01a0
 8012dc4:	1110f8a6 	.word	0x1110f8a6
 8012dc8:	3f811111 	.word	0x3f811111

08012dcc <fabs>:
 8012dcc:	ec51 0b10 	vmov	r0, r1, d0
 8012dd0:	ee10 2a10 	vmov	r2, s0
 8012dd4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012dd8:	ec43 2b10 	vmov	d0, r2, r3
 8012ddc:	4770      	bx	lr
	...

08012de0 <floor>:
 8012de0:	ec51 0b10 	vmov	r0, r1, d0
 8012de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012de8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8012dec:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8012df0:	2e13      	cmp	r6, #19
 8012df2:	460c      	mov	r4, r1
 8012df4:	ee10 5a10 	vmov	r5, s0
 8012df8:	4680      	mov	r8, r0
 8012dfa:	dc34      	bgt.n	8012e66 <floor+0x86>
 8012dfc:	2e00      	cmp	r6, #0
 8012dfe:	da16      	bge.n	8012e2e <floor+0x4e>
 8012e00:	a335      	add	r3, pc, #212	; (adr r3, 8012ed8 <floor+0xf8>)
 8012e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e06:	f7f5 f971 	bl	80080ec <__adddf3>
 8012e0a:	2200      	movs	r2, #0
 8012e0c:	2300      	movs	r3, #0
 8012e0e:	f7f5 fdb3 	bl	8008978 <__aeabi_dcmpgt>
 8012e12:	b148      	cbz	r0, 8012e28 <floor+0x48>
 8012e14:	2c00      	cmp	r4, #0
 8012e16:	da59      	bge.n	8012ecc <floor+0xec>
 8012e18:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8012e1c:	4a30      	ldr	r2, [pc, #192]	; (8012ee0 <floor+0x100>)
 8012e1e:	432b      	orrs	r3, r5
 8012e20:	2500      	movs	r5, #0
 8012e22:	42ab      	cmp	r3, r5
 8012e24:	bf18      	it	ne
 8012e26:	4614      	movne	r4, r2
 8012e28:	4621      	mov	r1, r4
 8012e2a:	4628      	mov	r0, r5
 8012e2c:	e025      	b.n	8012e7a <floor+0x9a>
 8012e2e:	4f2d      	ldr	r7, [pc, #180]	; (8012ee4 <floor+0x104>)
 8012e30:	4137      	asrs	r7, r6
 8012e32:	ea01 0307 	and.w	r3, r1, r7
 8012e36:	4303      	orrs	r3, r0
 8012e38:	d01f      	beq.n	8012e7a <floor+0x9a>
 8012e3a:	a327      	add	r3, pc, #156	; (adr r3, 8012ed8 <floor+0xf8>)
 8012e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e40:	f7f5 f954 	bl	80080ec <__adddf3>
 8012e44:	2200      	movs	r2, #0
 8012e46:	2300      	movs	r3, #0
 8012e48:	f7f5 fd96 	bl	8008978 <__aeabi_dcmpgt>
 8012e4c:	2800      	cmp	r0, #0
 8012e4e:	d0eb      	beq.n	8012e28 <floor+0x48>
 8012e50:	2c00      	cmp	r4, #0
 8012e52:	bfbe      	ittt	lt
 8012e54:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8012e58:	fa43 f606 	asrlt.w	r6, r3, r6
 8012e5c:	19a4      	addlt	r4, r4, r6
 8012e5e:	ea24 0407 	bic.w	r4, r4, r7
 8012e62:	2500      	movs	r5, #0
 8012e64:	e7e0      	b.n	8012e28 <floor+0x48>
 8012e66:	2e33      	cmp	r6, #51	; 0x33
 8012e68:	dd0b      	ble.n	8012e82 <floor+0xa2>
 8012e6a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012e6e:	d104      	bne.n	8012e7a <floor+0x9a>
 8012e70:	ee10 2a10 	vmov	r2, s0
 8012e74:	460b      	mov	r3, r1
 8012e76:	f7f5 f939 	bl	80080ec <__adddf3>
 8012e7a:	ec41 0b10 	vmov	d0, r0, r1
 8012e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e82:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8012e86:	f04f 33ff 	mov.w	r3, #4294967295
 8012e8a:	fa23 f707 	lsr.w	r7, r3, r7
 8012e8e:	4207      	tst	r7, r0
 8012e90:	d0f3      	beq.n	8012e7a <floor+0x9a>
 8012e92:	a311      	add	r3, pc, #68	; (adr r3, 8012ed8 <floor+0xf8>)
 8012e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e98:	f7f5 f928 	bl	80080ec <__adddf3>
 8012e9c:	2200      	movs	r2, #0
 8012e9e:	2300      	movs	r3, #0
 8012ea0:	f7f5 fd6a 	bl	8008978 <__aeabi_dcmpgt>
 8012ea4:	2800      	cmp	r0, #0
 8012ea6:	d0bf      	beq.n	8012e28 <floor+0x48>
 8012ea8:	2c00      	cmp	r4, #0
 8012eaa:	da02      	bge.n	8012eb2 <floor+0xd2>
 8012eac:	2e14      	cmp	r6, #20
 8012eae:	d103      	bne.n	8012eb8 <floor+0xd8>
 8012eb0:	3401      	adds	r4, #1
 8012eb2:	ea25 0507 	bic.w	r5, r5, r7
 8012eb6:	e7b7      	b.n	8012e28 <floor+0x48>
 8012eb8:	2301      	movs	r3, #1
 8012eba:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8012ebe:	fa03 f606 	lsl.w	r6, r3, r6
 8012ec2:	4435      	add	r5, r6
 8012ec4:	4545      	cmp	r5, r8
 8012ec6:	bf38      	it	cc
 8012ec8:	18e4      	addcc	r4, r4, r3
 8012eca:	e7f2      	b.n	8012eb2 <floor+0xd2>
 8012ecc:	2500      	movs	r5, #0
 8012ece:	462c      	mov	r4, r5
 8012ed0:	e7aa      	b.n	8012e28 <floor+0x48>
 8012ed2:	bf00      	nop
 8012ed4:	f3af 8000 	nop.w
 8012ed8:	8800759c 	.word	0x8800759c
 8012edc:	7e37e43c 	.word	0x7e37e43c
 8012ee0:	bff00000 	.word	0xbff00000
 8012ee4:	000fffff 	.word	0x000fffff

08012ee8 <matherr>:
 8012ee8:	2000      	movs	r0, #0
 8012eea:	4770      	bx	lr
 8012eec:	0000      	movs	r0, r0
	...

08012ef0 <scalbn>:
 8012ef0:	b570      	push	{r4, r5, r6, lr}
 8012ef2:	ec55 4b10 	vmov	r4, r5, d0
 8012ef6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8012efa:	4606      	mov	r6, r0
 8012efc:	462b      	mov	r3, r5
 8012efe:	b9aa      	cbnz	r2, 8012f2c <scalbn+0x3c>
 8012f00:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012f04:	4323      	orrs	r3, r4
 8012f06:	d03b      	beq.n	8012f80 <scalbn+0x90>
 8012f08:	4b31      	ldr	r3, [pc, #196]	; (8012fd0 <scalbn+0xe0>)
 8012f0a:	4629      	mov	r1, r5
 8012f0c:	2200      	movs	r2, #0
 8012f0e:	ee10 0a10 	vmov	r0, s0
 8012f12:	f7f5 faa1 	bl	8008458 <__aeabi_dmul>
 8012f16:	4b2f      	ldr	r3, [pc, #188]	; (8012fd4 <scalbn+0xe4>)
 8012f18:	429e      	cmp	r6, r3
 8012f1a:	4604      	mov	r4, r0
 8012f1c:	460d      	mov	r5, r1
 8012f1e:	da12      	bge.n	8012f46 <scalbn+0x56>
 8012f20:	a327      	add	r3, pc, #156	; (adr r3, 8012fc0 <scalbn+0xd0>)
 8012f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f26:	f7f5 fa97 	bl	8008458 <__aeabi_dmul>
 8012f2a:	e009      	b.n	8012f40 <scalbn+0x50>
 8012f2c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012f30:	428a      	cmp	r2, r1
 8012f32:	d10c      	bne.n	8012f4e <scalbn+0x5e>
 8012f34:	ee10 2a10 	vmov	r2, s0
 8012f38:	4620      	mov	r0, r4
 8012f3a:	4629      	mov	r1, r5
 8012f3c:	f7f5 f8d6 	bl	80080ec <__adddf3>
 8012f40:	4604      	mov	r4, r0
 8012f42:	460d      	mov	r5, r1
 8012f44:	e01c      	b.n	8012f80 <scalbn+0x90>
 8012f46:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012f4a:	460b      	mov	r3, r1
 8012f4c:	3a36      	subs	r2, #54	; 0x36
 8012f4e:	4432      	add	r2, r6
 8012f50:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012f54:	428a      	cmp	r2, r1
 8012f56:	dd0b      	ble.n	8012f70 <scalbn+0x80>
 8012f58:	ec45 4b11 	vmov	d1, r4, r5
 8012f5c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8012fc8 <scalbn+0xd8>
 8012f60:	f000 f83c 	bl	8012fdc <copysign>
 8012f64:	a318      	add	r3, pc, #96	; (adr r3, 8012fc8 <scalbn+0xd8>)
 8012f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f6a:	ec51 0b10 	vmov	r0, r1, d0
 8012f6e:	e7da      	b.n	8012f26 <scalbn+0x36>
 8012f70:	2a00      	cmp	r2, #0
 8012f72:	dd08      	ble.n	8012f86 <scalbn+0x96>
 8012f74:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012f78:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012f7c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012f80:	ec45 4b10 	vmov	d0, r4, r5
 8012f84:	bd70      	pop	{r4, r5, r6, pc}
 8012f86:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012f8a:	da0d      	bge.n	8012fa8 <scalbn+0xb8>
 8012f8c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012f90:	429e      	cmp	r6, r3
 8012f92:	ec45 4b11 	vmov	d1, r4, r5
 8012f96:	dce1      	bgt.n	8012f5c <scalbn+0x6c>
 8012f98:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8012fc0 <scalbn+0xd0>
 8012f9c:	f000 f81e 	bl	8012fdc <copysign>
 8012fa0:	a307      	add	r3, pc, #28	; (adr r3, 8012fc0 <scalbn+0xd0>)
 8012fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fa6:	e7e0      	b.n	8012f6a <scalbn+0x7a>
 8012fa8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012fac:	3236      	adds	r2, #54	; 0x36
 8012fae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012fb2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012fb6:	4620      	mov	r0, r4
 8012fb8:	4629      	mov	r1, r5
 8012fba:	2200      	movs	r2, #0
 8012fbc:	4b06      	ldr	r3, [pc, #24]	; (8012fd8 <scalbn+0xe8>)
 8012fbe:	e7b2      	b.n	8012f26 <scalbn+0x36>
 8012fc0:	c2f8f359 	.word	0xc2f8f359
 8012fc4:	01a56e1f 	.word	0x01a56e1f
 8012fc8:	8800759c 	.word	0x8800759c
 8012fcc:	7e37e43c 	.word	0x7e37e43c
 8012fd0:	43500000 	.word	0x43500000
 8012fd4:	ffff3cb0 	.word	0xffff3cb0
 8012fd8:	3c900000 	.word	0x3c900000

08012fdc <copysign>:
 8012fdc:	ec51 0b10 	vmov	r0, r1, d0
 8012fe0:	ee11 0a90 	vmov	r0, s3
 8012fe4:	ee10 2a10 	vmov	r2, s0
 8012fe8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8012fec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8012ff0:	ea41 0300 	orr.w	r3, r1, r0
 8012ff4:	ec43 2b10 	vmov	d0, r2, r3
 8012ff8:	4770      	bx	lr
	...

08012ffc <_init>:
 8012ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ffe:	bf00      	nop
 8013000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013002:	bc08      	pop	{r3}
 8013004:	469e      	mov	lr, r3
 8013006:	4770      	bx	lr

08013008 <_fini>:
 8013008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801300a:	bf00      	nop
 801300c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801300e:	bc08      	pop	{r3}
 8013010:	469e      	mov	lr, r3
 8013012:	4770      	bx	lr
