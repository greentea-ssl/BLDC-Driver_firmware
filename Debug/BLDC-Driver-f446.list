
BLDC-Driver-f446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095b8  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013954  08009780  08009780  00019780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d0d4  0801d0d4  000300a4  2**0
                  CONTENTS
  4 .ARM          00000008  0801d0d4  0801d0d4  0002d0d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d0dc  0801d0dc  000300a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d0dc  0801d0dc  0002d0dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d0e0  0801d0e0  0002d0e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  0801d0e4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000518  200000a4  0801d188  000300a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005bc  0801d188  000305bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a0b9  00000000  00000000  000300d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000039b1  00000000  00000000  0004a18d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001360  00000000  00000000  0004db40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001188  00000000  00000000  0004eea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025be8  00000000  00000000  00050028  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011f0d  00000000  00000000  00075c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d9e79  00000000  00000000  00087b1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00161996  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000568c  00000000  00000000  00161a14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200000a4 	.word	0x200000a4
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08009768 	.word	0x08009768

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200000a8 	.word	0x200000a8
 8000204:	08009768 	.word	0x08009768

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000346:	f1a4 0401 	sub.w	r4, r4, #1
 800034a:	d1e9      	bne.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2f>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000abc:	bf24      	itt	cs
 8000abe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ac2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac6:	d90d      	bls.n	8000ae4 <__aeabi_d2f+0x30>
 8000ac8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000acc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000adc:	bf08      	it	eq
 8000ade:	f020 0001 	biceq.w	r0, r0, #1
 8000ae2:	4770      	bx	lr
 8000ae4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae8:	d121      	bne.n	8000b2e <__aeabi_d2f+0x7a>
 8000aea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aee:	bfbc      	itt	lt
 8000af0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	4770      	bxlt	lr
 8000af6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000afa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afe:	f1c2 0218 	rsb	r2, r2, #24
 8000b02:	f1c2 0c20 	rsb	ip, r2, #32
 8000b06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0e:	bf18      	it	ne
 8000b10:	f040 0001 	orrne.w	r0, r0, #1
 8000b14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b20:	ea40 000c 	orr.w	r0, r0, ip
 8000b24:	fa23 f302 	lsr.w	r3, r3, r2
 8000b28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b2c:	e7cc      	b.n	8000ac8 <__aeabi_d2f+0x14>
 8000b2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b32:	d107      	bne.n	8000b44 <__aeabi_d2f+0x90>
 8000b34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b38:	bf1e      	ittt	ne
 8000b3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b42:	4770      	bxne	lr
 8000b44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop

08000b54 <__aeabi_uldivmod>:
 8000b54:	b953      	cbnz	r3, 8000b6c <__aeabi_uldivmod+0x18>
 8000b56:	b94a      	cbnz	r2, 8000b6c <__aeabi_uldivmod+0x18>
 8000b58:	2900      	cmp	r1, #0
 8000b5a:	bf08      	it	eq
 8000b5c:	2800      	cmpeq	r0, #0
 8000b5e:	bf1c      	itt	ne
 8000b60:	f04f 31ff 	movne.w	r1, #4294967295
 8000b64:	f04f 30ff 	movne.w	r0, #4294967295
 8000b68:	f000 b972 	b.w	8000e50 <__aeabi_idiv0>
 8000b6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b74:	f000 f806 	bl	8000b84 <__udivmoddi4>
 8000b78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b80:	b004      	add	sp, #16
 8000b82:	4770      	bx	lr

08000b84 <__udivmoddi4>:
 8000b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b88:	9e08      	ldr	r6, [sp, #32]
 8000b8a:	4604      	mov	r4, r0
 8000b8c:	4688      	mov	r8, r1
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d14b      	bne.n	8000c2a <__udivmoddi4+0xa6>
 8000b92:	428a      	cmp	r2, r1
 8000b94:	4615      	mov	r5, r2
 8000b96:	d967      	bls.n	8000c68 <__udivmoddi4+0xe4>
 8000b98:	fab2 f282 	clz	r2, r2
 8000b9c:	b14a      	cbz	r2, 8000bb2 <__udivmoddi4+0x2e>
 8000b9e:	f1c2 0720 	rsb	r7, r2, #32
 8000ba2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ba6:	fa20 f707 	lsr.w	r7, r0, r7
 8000baa:	4095      	lsls	r5, r2
 8000bac:	ea47 0803 	orr.w	r8, r7, r3
 8000bb0:	4094      	lsls	r4, r2
 8000bb2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bb6:	0c23      	lsrs	r3, r4, #16
 8000bb8:	fbb8 f7fe 	udiv	r7, r8, lr
 8000bbc:	fa1f fc85 	uxth.w	ip, r5
 8000bc0:	fb0e 8817 	mls	r8, lr, r7, r8
 8000bc4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bc8:	fb07 f10c 	mul.w	r1, r7, ip
 8000bcc:	4299      	cmp	r1, r3
 8000bce:	d909      	bls.n	8000be4 <__udivmoddi4+0x60>
 8000bd0:	18eb      	adds	r3, r5, r3
 8000bd2:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bd6:	f080 811b 	bcs.w	8000e10 <__udivmoddi4+0x28c>
 8000bda:	4299      	cmp	r1, r3
 8000bdc:	f240 8118 	bls.w	8000e10 <__udivmoddi4+0x28c>
 8000be0:	3f02      	subs	r7, #2
 8000be2:	442b      	add	r3, r5
 8000be4:	1a5b      	subs	r3, r3, r1
 8000be6:	b2a4      	uxth	r4, r4
 8000be8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bec:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bf0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bf8:	45a4      	cmp	ip, r4
 8000bfa:	d909      	bls.n	8000c10 <__udivmoddi4+0x8c>
 8000bfc:	192c      	adds	r4, r5, r4
 8000bfe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c02:	f080 8107 	bcs.w	8000e14 <__udivmoddi4+0x290>
 8000c06:	45a4      	cmp	ip, r4
 8000c08:	f240 8104 	bls.w	8000e14 <__udivmoddi4+0x290>
 8000c0c:	3802      	subs	r0, #2
 8000c0e:	442c      	add	r4, r5
 8000c10:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c14:	eba4 040c 	sub.w	r4, r4, ip
 8000c18:	2700      	movs	r7, #0
 8000c1a:	b11e      	cbz	r6, 8000c24 <__udivmoddi4+0xa0>
 8000c1c:	40d4      	lsrs	r4, r2
 8000c1e:	2300      	movs	r3, #0
 8000c20:	e9c6 4300 	strd	r4, r3, [r6]
 8000c24:	4639      	mov	r1, r7
 8000c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2a:	428b      	cmp	r3, r1
 8000c2c:	d909      	bls.n	8000c42 <__udivmoddi4+0xbe>
 8000c2e:	2e00      	cmp	r6, #0
 8000c30:	f000 80eb 	beq.w	8000e0a <__udivmoddi4+0x286>
 8000c34:	2700      	movs	r7, #0
 8000c36:	e9c6 0100 	strd	r0, r1, [r6]
 8000c3a:	4638      	mov	r0, r7
 8000c3c:	4639      	mov	r1, r7
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	fab3 f783 	clz	r7, r3
 8000c46:	2f00      	cmp	r7, #0
 8000c48:	d147      	bne.n	8000cda <__udivmoddi4+0x156>
 8000c4a:	428b      	cmp	r3, r1
 8000c4c:	d302      	bcc.n	8000c54 <__udivmoddi4+0xd0>
 8000c4e:	4282      	cmp	r2, r0
 8000c50:	f200 80fa 	bhi.w	8000e48 <__udivmoddi4+0x2c4>
 8000c54:	1a84      	subs	r4, r0, r2
 8000c56:	eb61 0303 	sbc.w	r3, r1, r3
 8000c5a:	2001      	movs	r0, #1
 8000c5c:	4698      	mov	r8, r3
 8000c5e:	2e00      	cmp	r6, #0
 8000c60:	d0e0      	beq.n	8000c24 <__udivmoddi4+0xa0>
 8000c62:	e9c6 4800 	strd	r4, r8, [r6]
 8000c66:	e7dd      	b.n	8000c24 <__udivmoddi4+0xa0>
 8000c68:	b902      	cbnz	r2, 8000c6c <__udivmoddi4+0xe8>
 8000c6a:	deff      	udf	#255	; 0xff
 8000c6c:	fab2 f282 	clz	r2, r2
 8000c70:	2a00      	cmp	r2, #0
 8000c72:	f040 808f 	bne.w	8000d94 <__udivmoddi4+0x210>
 8000c76:	1b49      	subs	r1, r1, r5
 8000c78:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c7c:	fa1f f885 	uxth.w	r8, r5
 8000c80:	2701      	movs	r7, #1
 8000c82:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c86:	0c23      	lsrs	r3, r4, #16
 8000c88:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c8c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c90:	fb08 f10c 	mul.w	r1, r8, ip
 8000c94:	4299      	cmp	r1, r3
 8000c96:	d907      	bls.n	8000ca8 <__udivmoddi4+0x124>
 8000c98:	18eb      	adds	r3, r5, r3
 8000c9a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c9e:	d202      	bcs.n	8000ca6 <__udivmoddi4+0x122>
 8000ca0:	4299      	cmp	r1, r3
 8000ca2:	f200 80cd 	bhi.w	8000e40 <__udivmoddi4+0x2bc>
 8000ca6:	4684      	mov	ip, r0
 8000ca8:	1a59      	subs	r1, r3, r1
 8000caa:	b2a3      	uxth	r3, r4
 8000cac:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb0:	fb0e 1410 	mls	r4, lr, r0, r1
 8000cb4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000cb8:	fb08 f800 	mul.w	r8, r8, r0
 8000cbc:	45a0      	cmp	r8, r4
 8000cbe:	d907      	bls.n	8000cd0 <__udivmoddi4+0x14c>
 8000cc0:	192c      	adds	r4, r5, r4
 8000cc2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0x14a>
 8000cc8:	45a0      	cmp	r8, r4
 8000cca:	f200 80b6 	bhi.w	8000e3a <__udivmoddi4+0x2b6>
 8000cce:	4618      	mov	r0, r3
 8000cd0:	eba4 0408 	sub.w	r4, r4, r8
 8000cd4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cd8:	e79f      	b.n	8000c1a <__udivmoddi4+0x96>
 8000cda:	f1c7 0c20 	rsb	ip, r7, #32
 8000cde:	40bb      	lsls	r3, r7
 8000ce0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ce4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ce8:	fa01 f407 	lsl.w	r4, r1, r7
 8000cec:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cf0:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cf4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cf8:	4325      	orrs	r5, r4
 8000cfa:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cfe:	0c2c      	lsrs	r4, r5, #16
 8000d00:	fb08 3319 	mls	r3, r8, r9, r3
 8000d04:	fa1f fa8e 	uxth.w	sl, lr
 8000d08:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d0c:	fb09 f40a 	mul.w	r4, r9, sl
 8000d10:	429c      	cmp	r4, r3
 8000d12:	fa02 f207 	lsl.w	r2, r2, r7
 8000d16:	fa00 f107 	lsl.w	r1, r0, r7
 8000d1a:	d90b      	bls.n	8000d34 <__udivmoddi4+0x1b0>
 8000d1c:	eb1e 0303 	adds.w	r3, lr, r3
 8000d20:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d24:	f080 8087 	bcs.w	8000e36 <__udivmoddi4+0x2b2>
 8000d28:	429c      	cmp	r4, r3
 8000d2a:	f240 8084 	bls.w	8000e36 <__udivmoddi4+0x2b2>
 8000d2e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d32:	4473      	add	r3, lr
 8000d34:	1b1b      	subs	r3, r3, r4
 8000d36:	b2ad      	uxth	r5, r5
 8000d38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d3c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d40:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d44:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d48:	45a2      	cmp	sl, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x1da>
 8000d4c:	eb1e 0404 	adds.w	r4, lr, r4
 8000d50:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d54:	d26b      	bcs.n	8000e2e <__udivmoddi4+0x2aa>
 8000d56:	45a2      	cmp	sl, r4
 8000d58:	d969      	bls.n	8000e2e <__udivmoddi4+0x2aa>
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	4474      	add	r4, lr
 8000d5e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d62:	fba0 8902 	umull	r8, r9, r0, r2
 8000d66:	eba4 040a 	sub.w	r4, r4, sl
 8000d6a:	454c      	cmp	r4, r9
 8000d6c:	46c2      	mov	sl, r8
 8000d6e:	464b      	mov	r3, r9
 8000d70:	d354      	bcc.n	8000e1c <__udivmoddi4+0x298>
 8000d72:	d051      	beq.n	8000e18 <__udivmoddi4+0x294>
 8000d74:	2e00      	cmp	r6, #0
 8000d76:	d069      	beq.n	8000e4c <__udivmoddi4+0x2c8>
 8000d78:	ebb1 050a 	subs.w	r5, r1, sl
 8000d7c:	eb64 0403 	sbc.w	r4, r4, r3
 8000d80:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d84:	40fd      	lsrs	r5, r7
 8000d86:	40fc      	lsrs	r4, r7
 8000d88:	ea4c 0505 	orr.w	r5, ip, r5
 8000d8c:	e9c6 5400 	strd	r5, r4, [r6]
 8000d90:	2700      	movs	r7, #0
 8000d92:	e747      	b.n	8000c24 <__udivmoddi4+0xa0>
 8000d94:	f1c2 0320 	rsb	r3, r2, #32
 8000d98:	fa20 f703 	lsr.w	r7, r0, r3
 8000d9c:	4095      	lsls	r5, r2
 8000d9e:	fa01 f002 	lsl.w	r0, r1, r2
 8000da2:	fa21 f303 	lsr.w	r3, r1, r3
 8000da6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000daa:	4338      	orrs	r0, r7
 8000dac:	0c01      	lsrs	r1, r0, #16
 8000dae:	fbb3 f7fe 	udiv	r7, r3, lr
 8000db2:	fa1f f885 	uxth.w	r8, r5
 8000db6:	fb0e 3317 	mls	r3, lr, r7, r3
 8000dba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dbe:	fb07 f308 	mul.w	r3, r7, r8
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	fa04 f402 	lsl.w	r4, r4, r2
 8000dc8:	d907      	bls.n	8000dda <__udivmoddi4+0x256>
 8000dca:	1869      	adds	r1, r5, r1
 8000dcc:	f107 3cff 	add.w	ip, r7, #4294967295
 8000dd0:	d22f      	bcs.n	8000e32 <__udivmoddi4+0x2ae>
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d92d      	bls.n	8000e32 <__udivmoddi4+0x2ae>
 8000dd6:	3f02      	subs	r7, #2
 8000dd8:	4429      	add	r1, r5
 8000dda:	1acb      	subs	r3, r1, r3
 8000ddc:	b281      	uxth	r1, r0
 8000dde:	fbb3 f0fe 	udiv	r0, r3, lr
 8000de2:	fb0e 3310 	mls	r3, lr, r0, r3
 8000de6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dea:	fb00 f308 	mul.w	r3, r0, r8
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d907      	bls.n	8000e02 <__udivmoddi4+0x27e>
 8000df2:	1869      	adds	r1, r5, r1
 8000df4:	f100 3cff 	add.w	ip, r0, #4294967295
 8000df8:	d217      	bcs.n	8000e2a <__udivmoddi4+0x2a6>
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	d915      	bls.n	8000e2a <__udivmoddi4+0x2a6>
 8000dfe:	3802      	subs	r0, #2
 8000e00:	4429      	add	r1, r5
 8000e02:	1ac9      	subs	r1, r1, r3
 8000e04:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e08:	e73b      	b.n	8000c82 <__udivmoddi4+0xfe>
 8000e0a:	4637      	mov	r7, r6
 8000e0c:	4630      	mov	r0, r6
 8000e0e:	e709      	b.n	8000c24 <__udivmoddi4+0xa0>
 8000e10:	4607      	mov	r7, r0
 8000e12:	e6e7      	b.n	8000be4 <__udivmoddi4+0x60>
 8000e14:	4618      	mov	r0, r3
 8000e16:	e6fb      	b.n	8000c10 <__udivmoddi4+0x8c>
 8000e18:	4541      	cmp	r1, r8
 8000e1a:	d2ab      	bcs.n	8000d74 <__udivmoddi4+0x1f0>
 8000e1c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e20:	eb69 020e 	sbc.w	r2, r9, lr
 8000e24:	3801      	subs	r0, #1
 8000e26:	4613      	mov	r3, r2
 8000e28:	e7a4      	b.n	8000d74 <__udivmoddi4+0x1f0>
 8000e2a:	4660      	mov	r0, ip
 8000e2c:	e7e9      	b.n	8000e02 <__udivmoddi4+0x27e>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	e795      	b.n	8000d5e <__udivmoddi4+0x1da>
 8000e32:	4667      	mov	r7, ip
 8000e34:	e7d1      	b.n	8000dda <__udivmoddi4+0x256>
 8000e36:	4681      	mov	r9, r0
 8000e38:	e77c      	b.n	8000d34 <__udivmoddi4+0x1b0>
 8000e3a:	3802      	subs	r0, #2
 8000e3c:	442c      	add	r4, r5
 8000e3e:	e747      	b.n	8000cd0 <__udivmoddi4+0x14c>
 8000e40:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e44:	442b      	add	r3, r5
 8000e46:	e72f      	b.n	8000ca8 <__udivmoddi4+0x124>
 8000e48:	4638      	mov	r0, r7
 8000e4a:	e708      	b.n	8000c5e <__udivmoddi4+0xda>
 8000e4c:	4637      	mov	r7, r6
 8000e4e:	e6e9      	b.n	8000c24 <__udivmoddi4+0xa0>

08000e50 <__aeabi_idiv0>:
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop

08000e54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e58:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <HAL_Init+0x40>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a0d      	ldr	r2, [pc, #52]	; (8000e94 <HAL_Init+0x40>)
 8000e5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e64:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <HAL_Init+0x40>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a0a      	ldr	r2, [pc, #40]	; (8000e94 <HAL_Init+0x40>)
 8000e6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e70:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <HAL_Init+0x40>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a07      	ldr	r2, [pc, #28]	; (8000e94 <HAL_Init+0x40>)
 8000e76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e7c:	2003      	movs	r0, #3
 8000e7e:	f001 fab5 	bl	80023ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e82:	2000      	movs	r0, #0
 8000e84:	f000 f808 	bl	8000e98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e88:	f007 fafc 	bl	8008484 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40023c00 	.word	0x40023c00

08000e98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ea0:	4b12      	ldr	r3, [pc, #72]	; (8000eec <HAL_InitTick+0x54>)
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <HAL_InitTick+0x58>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f001 facd 	bl	8002456 <HAL_SYSTICK_Config>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e00e      	b.n	8000ee4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2b0f      	cmp	r3, #15
 8000eca:	d80a      	bhi.n	8000ee2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	6879      	ldr	r1, [r7, #4]
 8000ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed4:	f001 fa95 	bl	8002402 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ed8:	4a06      	ldr	r2, [pc, #24]	; (8000ef4 <HAL_InitTick+0x5c>)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	e000      	b.n	8000ee4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000038 	.word	0x20000038
 8000ef0:	20000004 	.word	0x20000004
 8000ef4:	20000000 	.word	0x20000000

08000ef8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <HAL_IncTick+0x20>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	461a      	mov	r2, r3
 8000f02:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <HAL_IncTick+0x24>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4413      	add	r3, r2
 8000f08:	4a04      	ldr	r2, [pc, #16]	; (8000f1c <HAL_IncTick+0x24>)
 8000f0a:	6013      	str	r3, [r2, #0]
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	20000004 	.word	0x20000004
 8000f1c:	20000208 	.word	0x20000208

08000f20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  return uwTick;
 8000f24:	4b03      	ldr	r3, [pc, #12]	; (8000f34 <HAL_GetTick+0x14>)
 8000f26:	681b      	ldr	r3, [r3, #0]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	20000208 	.word	0x20000208

08000f38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f40:	f7ff ffee 	bl	8000f20 <HAL_GetTick>
 8000f44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f50:	d005      	beq.n	8000f5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f52:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <HAL_Delay+0x40>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	461a      	mov	r2, r3
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f5e:	bf00      	nop
 8000f60:	f7ff ffde 	bl	8000f20 <HAL_GetTick>
 8000f64:	4602      	mov	r2, r0
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	68fa      	ldr	r2, [r7, #12]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d8f7      	bhi.n	8000f60 <HAL_Delay+0x28>
  {
  }
}
 8000f70:	bf00      	nop
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000004 	.word	0x20000004

08000f7c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f84:	2300      	movs	r3, #0
 8000f86:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d101      	bne.n	8000f92 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e033      	b.n	8000ffa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d109      	bne.n	8000fae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f005 fbc8 	bl	8006730 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb2:	f003 0310 	and.w	r3, r3, #16
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d118      	bne.n	8000fec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000fc2:	f023 0302 	bic.w	r3, r3, #2
 8000fc6:	f043 0202 	orr.w	r2, r3, #2
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f000 fa5a 	bl	8001488 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fde:	f023 0303 	bic.w	r3, r3, #3
 8000fe2:	f043 0201 	orr.w	r2, r3, #1
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	641a      	str	r2, [r3, #64]	; 0x40
 8000fea:	e001      	b.n	8000ff0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000fec:	2301      	movs	r3, #1
 8000fee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3710      	adds	r7, #16
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
	...

08001004 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001010:	2300      	movs	r3, #0
 8001012:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800101a:	2b01      	cmp	r3, #1
 800101c:	d101      	bne.n	8001022 <HAL_ADC_Start_DMA+0x1e>
 800101e:	2302      	movs	r3, #2
 8001020:	e0cc      	b.n	80011bc <HAL_ADC_Start_DMA+0x1b8>
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	2201      	movs	r2, #1
 8001026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	f003 0301 	and.w	r3, r3, #1
 8001034:	2b01      	cmp	r3, #1
 8001036:	d018      	beq.n	800106a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	689a      	ldr	r2, [r3, #8]
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f042 0201 	orr.w	r2, r2, #1
 8001046:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001048:	4b5e      	ldr	r3, [pc, #376]	; (80011c4 <HAL_ADC_Start_DMA+0x1c0>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a5e      	ldr	r2, [pc, #376]	; (80011c8 <HAL_ADC_Start_DMA+0x1c4>)
 800104e:	fba2 2303 	umull	r2, r3, r2, r3
 8001052:	0c9a      	lsrs	r2, r3, #18
 8001054:	4613      	mov	r3, r2
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	4413      	add	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800105c:	e002      	b.n	8001064 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	3b01      	subs	r3, #1
 8001062:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d1f9      	bne.n	800105e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	689b      	ldr	r3, [r3, #8]
 8001070:	f003 0301 	and.w	r3, r3, #1
 8001074:	2b01      	cmp	r3, #1
 8001076:	f040 80a0 	bne.w	80011ba <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001082:	f023 0301 	bic.w	r3, r3, #1
 8001086:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001098:	2b00      	cmp	r3, #0
 800109a:	d007      	beq.n	80010ac <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010a4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010b8:	d106      	bne.n	80010c8 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010be:	f023 0206 	bic.w	r2, r3, #6
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	645a      	str	r2, [r3, #68]	; 0x44
 80010c6:	e002      	b.n	80010ce <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	2200      	movs	r2, #0
 80010cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	2200      	movs	r2, #0
 80010d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010d6:	4b3d      	ldr	r3, [pc, #244]	; (80011cc <HAL_ADC_Start_DMA+0x1c8>)
 80010d8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010de:	4a3c      	ldr	r2, [pc, #240]	; (80011d0 <HAL_ADC_Start_DMA+0x1cc>)
 80010e0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010e6:	4a3b      	ldr	r2, [pc, #236]	; (80011d4 <HAL_ADC_Start_DMA+0x1d0>)
 80010e8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010ee:	4a3a      	ldr	r2, [pc, #232]	; (80011d8 <HAL_ADC_Start_DMA+0x1d4>)
 80010f0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80010fa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	685a      	ldr	r2, [r3, #4]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800110a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	689a      	ldr	r2, [r3, #8]
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800111a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	334c      	adds	r3, #76	; 0x4c
 8001126:	4619      	mov	r1, r3
 8001128:	68ba      	ldr	r2, [r7, #8]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	f001 fa4e 	bl	80025cc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f003 031f 	and.w	r3, r3, #31
 8001138:	2b00      	cmp	r3, #0
 800113a:	d12a      	bne.n	8001192 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4a26      	ldr	r2, [pc, #152]	; (80011dc <HAL_ADC_Start_DMA+0x1d8>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d015      	beq.n	8001172 <HAL_ADC_Start_DMA+0x16e>
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a25      	ldr	r2, [pc, #148]	; (80011e0 <HAL_ADC_Start_DMA+0x1dc>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d105      	bne.n	800115c <HAL_ADC_Start_DMA+0x158>
 8001150:	4b1e      	ldr	r3, [pc, #120]	; (80011cc <HAL_ADC_Start_DMA+0x1c8>)
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f003 031f 	and.w	r3, r3, #31
 8001158:	2b00      	cmp	r3, #0
 800115a:	d00a      	beq.n	8001172 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a20      	ldr	r2, [pc, #128]	; (80011e4 <HAL_ADC_Start_DMA+0x1e0>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d129      	bne.n	80011ba <HAL_ADC_Start_DMA+0x1b6>
 8001166:	4b19      	ldr	r3, [pc, #100]	; (80011cc <HAL_ADC_Start_DMA+0x1c8>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	f003 031f 	and.w	r3, r3, #31
 800116e:	2b0f      	cmp	r3, #15
 8001170:	d823      	bhi.n	80011ba <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d11c      	bne.n	80011ba <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	689a      	ldr	r2, [r3, #8]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	e013      	b.n	80011ba <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a11      	ldr	r2, [pc, #68]	; (80011dc <HAL_ADC_Start_DMA+0x1d8>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d10e      	bne.n	80011ba <HAL_ADC_Start_DMA+0x1b6>
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d107      	bne.n	80011ba <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	689a      	ldr	r2, [r3, #8]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011b8:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80011ba:	2300      	movs	r3, #0
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3718      	adds	r7, #24
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000038 	.word	0x20000038
 80011c8:	431bde83 	.word	0x431bde83
 80011cc:	40012300 	.word	0x40012300
 80011d0:	08001681 	.word	0x08001681
 80011d4:	0800173b 	.word	0x0800173b
 80011d8:	08001757 	.word	0x08001757
 80011dc:	40012000 	.word	0x40012000
 80011e0:	40012100 	.word	0x40012100
 80011e4:	40012200 	.word	0x40012200

080011e8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr

080011fc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr

08001224 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800122e:	2300      	movs	r3, #0
 8001230:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001238:	2b01      	cmp	r3, #1
 800123a:	d101      	bne.n	8001240 <HAL_ADC_ConfigChannel+0x1c>
 800123c:	2302      	movs	r3, #2
 800123e:	e113      	b.n	8001468 <HAL_ADC_ConfigChannel+0x244>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2201      	movs	r2, #1
 8001244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b09      	cmp	r3, #9
 800124e:	d925      	bls.n	800129c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	68d9      	ldr	r1, [r3, #12]
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	b29b      	uxth	r3, r3
 800125c:	461a      	mov	r2, r3
 800125e:	4613      	mov	r3, r2
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	4413      	add	r3, r2
 8001264:	3b1e      	subs	r3, #30
 8001266:	2207      	movs	r2, #7
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43da      	mvns	r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	400a      	ands	r2, r1
 8001274:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	68d9      	ldr	r1, [r3, #12]
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	689a      	ldr	r2, [r3, #8]
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	b29b      	uxth	r3, r3
 8001286:	4618      	mov	r0, r3
 8001288:	4603      	mov	r3, r0
 800128a:	005b      	lsls	r3, r3, #1
 800128c:	4403      	add	r3, r0
 800128e:	3b1e      	subs	r3, #30
 8001290:	409a      	lsls	r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	430a      	orrs	r2, r1
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	e022      	b.n	80012e2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	6919      	ldr	r1, [r3, #16]
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	461a      	mov	r2, r3
 80012aa:	4613      	mov	r3, r2
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	4413      	add	r3, r2
 80012b0:	2207      	movs	r2, #7
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43da      	mvns	r2, r3
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	400a      	ands	r2, r1
 80012be:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	6919      	ldr	r1, [r3, #16]
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	689a      	ldr	r2, [r3, #8]
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	4618      	mov	r0, r3
 80012d2:	4603      	mov	r3, r0
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	4403      	add	r3, r0
 80012d8:	409a      	lsls	r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	430a      	orrs	r2, r1
 80012e0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	2b06      	cmp	r3, #6
 80012e8:	d824      	bhi.n	8001334 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	685a      	ldr	r2, [r3, #4]
 80012f4:	4613      	mov	r3, r2
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	4413      	add	r3, r2
 80012fa:	3b05      	subs	r3, #5
 80012fc:	221f      	movs	r2, #31
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	43da      	mvns	r2, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	400a      	ands	r2, r1
 800130a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	b29b      	uxth	r3, r3
 8001318:	4618      	mov	r0, r3
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685a      	ldr	r2, [r3, #4]
 800131e:	4613      	mov	r3, r2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	4413      	add	r3, r2
 8001324:	3b05      	subs	r3, #5
 8001326:	fa00 f203 	lsl.w	r2, r0, r3
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	430a      	orrs	r2, r1
 8001330:	635a      	str	r2, [r3, #52]	; 0x34
 8001332:	e04c      	b.n	80013ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	2b0c      	cmp	r3, #12
 800133a:	d824      	bhi.n	8001386 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685a      	ldr	r2, [r3, #4]
 8001346:	4613      	mov	r3, r2
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	4413      	add	r3, r2
 800134c:	3b23      	subs	r3, #35	; 0x23
 800134e:	221f      	movs	r2, #31
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	43da      	mvns	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	400a      	ands	r2, r1
 800135c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	b29b      	uxth	r3, r3
 800136a:	4618      	mov	r0, r3
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685a      	ldr	r2, [r3, #4]
 8001370:	4613      	mov	r3, r2
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	4413      	add	r3, r2
 8001376:	3b23      	subs	r3, #35	; 0x23
 8001378:	fa00 f203 	lsl.w	r2, r0, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	430a      	orrs	r2, r1
 8001382:	631a      	str	r2, [r3, #48]	; 0x30
 8001384:	e023      	b.n	80013ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685a      	ldr	r2, [r3, #4]
 8001390:	4613      	mov	r3, r2
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	4413      	add	r3, r2
 8001396:	3b41      	subs	r3, #65	; 0x41
 8001398:	221f      	movs	r2, #31
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	43da      	mvns	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	400a      	ands	r2, r1
 80013a6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	4618      	mov	r0, r3
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685a      	ldr	r2, [r3, #4]
 80013ba:	4613      	mov	r3, r2
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	4413      	add	r3, r2
 80013c0:	3b41      	subs	r3, #65	; 0x41
 80013c2:	fa00 f203 	lsl.w	r2, r0, r3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	430a      	orrs	r2, r1
 80013cc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013ce:	4b29      	ldr	r3, [pc, #164]	; (8001474 <HAL_ADC_ConfigChannel+0x250>)
 80013d0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a28      	ldr	r2, [pc, #160]	; (8001478 <HAL_ADC_ConfigChannel+0x254>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d10f      	bne.n	80013fc <HAL_ADC_ConfigChannel+0x1d8>
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b12      	cmp	r3, #18
 80013e2:	d10b      	bne.n	80013fc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a1d      	ldr	r2, [pc, #116]	; (8001478 <HAL_ADC_ConfigChannel+0x254>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d12b      	bne.n	800145e <HAL_ADC_ConfigChannel+0x23a>
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a1c      	ldr	r2, [pc, #112]	; (800147c <HAL_ADC_ConfigChannel+0x258>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d003      	beq.n	8001418 <HAL_ADC_ConfigChannel+0x1f4>
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2b11      	cmp	r3, #17
 8001416:	d122      	bne.n	800145e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a11      	ldr	r2, [pc, #68]	; (800147c <HAL_ADC_ConfigChannel+0x258>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d111      	bne.n	800145e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800143a:	4b11      	ldr	r3, [pc, #68]	; (8001480 <HAL_ADC_ConfigChannel+0x25c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a11      	ldr	r2, [pc, #68]	; (8001484 <HAL_ADC_ConfigChannel+0x260>)
 8001440:	fba2 2303 	umull	r2, r3, r2, r3
 8001444:	0c9a      	lsrs	r2, r3, #18
 8001446:	4613      	mov	r3, r2
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	4413      	add	r3, r2
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001450:	e002      	b.n	8001458 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	3b01      	subs	r3, #1
 8001456:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1f9      	bne.n	8001452 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001466:	2300      	movs	r3, #0
}
 8001468:	4618      	mov	r0, r3
 800146a:	3714      	adds	r7, #20
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	40012300 	.word	0x40012300
 8001478:	40012000 	.word	0x40012000
 800147c:	10000012 	.word	0x10000012
 8001480:	20000038 	.word	0x20000038
 8001484:	431bde83 	.word	0x431bde83

08001488 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001490:	4b79      	ldr	r3, [pc, #484]	; (8001678 <ADC_Init+0x1f0>)
 8001492:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	685a      	ldr	r2, [r3, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	431a      	orrs	r2, r3
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	685a      	ldr	r2, [r3, #4]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	6859      	ldr	r1, [r3, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	691b      	ldr	r3, [r3, #16]
 80014c8:	021a      	lsls	r2, r3, #8
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	430a      	orrs	r2, r1
 80014d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	685a      	ldr	r2, [r3, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80014e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	6859      	ldr	r1, [r3, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689a      	ldr	r2, [r3, #8]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	430a      	orrs	r2, r1
 80014f2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001502:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6899      	ldr	r1, [r3, #8]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	68da      	ldr	r2, [r3, #12]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	430a      	orrs	r2, r1
 8001514:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800151a:	4a58      	ldr	r2, [pc, #352]	; (800167c <ADC_Init+0x1f4>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d022      	beq.n	8001566 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	689a      	ldr	r2, [r3, #8]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800152e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	6899      	ldr	r1, [r3, #8]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	430a      	orrs	r2, r1
 8001540:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	689a      	ldr	r2, [r3, #8]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001550:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6899      	ldr	r1, [r3, #8]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	430a      	orrs	r2, r1
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	e00f      	b.n	8001586 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	689a      	ldr	r2, [r3, #8]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001574:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	689a      	ldr	r2, [r3, #8]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001584:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	689a      	ldr	r2, [r3, #8]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f022 0202 	bic.w	r2, r2, #2
 8001594:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6899      	ldr	r1, [r3, #8]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	7e1b      	ldrb	r3, [r3, #24]
 80015a0:	005a      	lsls	r2, r3, #1
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	430a      	orrs	r2, r1
 80015a8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d01b      	beq.n	80015ec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	685a      	ldr	r2, [r3, #4]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015c2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	685a      	ldr	r2, [r3, #4]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80015d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	6859      	ldr	r1, [r3, #4]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015de:	3b01      	subs	r3, #1
 80015e0:	035a      	lsls	r2, r3, #13
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	430a      	orrs	r2, r1
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	e007      	b.n	80015fc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	685a      	ldr	r2, [r3, #4]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800160a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	3b01      	subs	r3, #1
 8001618:	051a      	lsls	r2, r3, #20
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	430a      	orrs	r2, r1
 8001620:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	689a      	ldr	r2, [r3, #8]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001630:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	6899      	ldr	r1, [r3, #8]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800163e:	025a      	lsls	r2, r3, #9
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	430a      	orrs	r2, r1
 8001646:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	689a      	ldr	r2, [r3, #8]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001656:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6899      	ldr	r1, [r3, #8]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	695b      	ldr	r3, [r3, #20]
 8001662:	029a      	lsls	r2, r3, #10
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	430a      	orrs	r2, r1
 800166a:	609a      	str	r2, [r3, #8]
}
 800166c:	bf00      	nop
 800166e:	3714      	adds	r7, #20
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	40012300 	.word	0x40012300
 800167c:	0f000001 	.word	0x0f000001

08001680 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800168c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001696:	2b00      	cmp	r3, #0
 8001698:	d13c      	bne.n	8001714 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d12b      	bne.n	800170c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d127      	bne.n	800170c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d006      	beq.n	80016d8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d119      	bne.n	800170c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	685a      	ldr	r2, [r3, #4]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f022 0220 	bic.w	r2, r2, #32
 80016e6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d105      	bne.n	800170c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001704:	f043 0201 	orr.w	r2, r3, #1
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800170c:	68f8      	ldr	r0, [r7, #12]
 800170e:	f7ff fd6b 	bl	80011e8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001712:	e00e      	b.n	8001732 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001718:	f003 0310 	and.w	r3, r3, #16
 800171c:	2b00      	cmp	r3, #0
 800171e:	d003      	beq.n	8001728 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001720:	68f8      	ldr	r0, [r7, #12]
 8001722:	f7ff fd75 	bl	8001210 <HAL_ADC_ErrorCallback>
}
 8001726:	e004      	b.n	8001732 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800172c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	4798      	blx	r3
}
 8001732:	bf00      	nop
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b084      	sub	sp, #16
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001746:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001748:	68f8      	ldr	r0, [r7, #12]
 800174a:	f7ff fd57 	bl	80011fc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800174e:	bf00      	nop
 8001750:	3710      	adds	r7, #16
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b084      	sub	sp, #16
 800175a:	af00      	add	r7, sp, #0
 800175c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001762:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2240      	movs	r2, #64	; 0x40
 8001768:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176e:	f043 0204 	orr.w	r2, r3, #4
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001776:	68f8      	ldr	r0, [r7, #12]
 8001778:	f7ff fd4a 	bl	8001210 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800177c:	bf00      	nop
 800177e:	3710      	adds	r7, #16
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d101      	bne.n	8001796 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e0ed      	b.n	8001972 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f893 3020 	ldrb.w	r3, [r3, #32]
 800179c:	b2db      	uxtb	r3, r3
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d102      	bne.n	80017a8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f005 fb78 	bl	8006e98 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f022 0202 	bic.w	r2, r2, #2
 80017b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017b8:	f7ff fbb2 	bl	8000f20 <HAL_GetTick>
 80017bc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80017be:	e012      	b.n	80017e6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80017c0:	f7ff fbae 	bl	8000f20 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b0a      	cmp	r3, #10
 80017cc:	d90b      	bls.n	80017e6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2205      	movs	r2, #5
 80017de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e0c5      	b.n	8001972 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1e5      	bne.n	80017c0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f042 0201 	orr.w	r2, r2, #1
 8001802:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001804:	f7ff fb8c 	bl	8000f20 <HAL_GetTick>
 8001808:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800180a:	e012      	b.n	8001832 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800180c:	f7ff fb88 	bl	8000f20 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b0a      	cmp	r3, #10
 8001818:	d90b      	bls.n	8001832 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2205      	movs	r2, #5
 800182a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e09f      	b.n	8001972 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	2b00      	cmp	r3, #0
 800183e:	d0e5      	beq.n	800180c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	7e1b      	ldrb	r3, [r3, #24]
 8001844:	2b01      	cmp	r3, #1
 8001846:	d108      	bne.n	800185a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001856:	601a      	str	r2, [r3, #0]
 8001858:	e007      	b.n	800186a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001868:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	7e5b      	ldrb	r3, [r3, #25]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d108      	bne.n	8001884 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	e007      	b.n	8001894 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001892:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	7e9b      	ldrb	r3, [r3, #26]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d108      	bne.n	80018ae <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f042 0220 	orr.w	r2, r2, #32
 80018aa:	601a      	str	r2, [r3, #0]
 80018ac:	e007      	b.n	80018be <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f022 0220 	bic.w	r2, r2, #32
 80018bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	7edb      	ldrb	r3, [r3, #27]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d108      	bne.n	80018d8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f022 0210 	bic.w	r2, r2, #16
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	e007      	b.n	80018e8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f042 0210 	orr.w	r2, r2, #16
 80018e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	7f1b      	ldrb	r3, [r3, #28]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d108      	bne.n	8001902 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f042 0208 	orr.w	r2, r2, #8
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	e007      	b.n	8001912 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f022 0208 	bic.w	r2, r2, #8
 8001910:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	7f5b      	ldrb	r3, [r3, #29]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d108      	bne.n	800192c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f042 0204 	orr.w	r2, r2, #4
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	e007      	b.n	800193c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f022 0204 	bic.w	r2, r2, #4
 800193a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689a      	ldr	r2, [r3, #8]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	431a      	orrs	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	691b      	ldr	r3, [r3, #16]
 800194a:	431a      	orrs	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	695b      	ldr	r3, [r3, #20]
 8001950:	ea42 0103 	orr.w	r1, r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	1e5a      	subs	r2, r3, #1
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	430a      	orrs	r2, r1
 8001960:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2200      	movs	r2, #0
 8001966:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
	...

0800197c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800197c:	b480      	push	{r7}
 800197e:	b087      	sub	sp, #28
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001992:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001994:	7cfb      	ldrb	r3, [r7, #19]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d003      	beq.n	80019a2 <HAL_CAN_ConfigFilter+0x26>
 800199a:	7cfb      	ldrb	r3, [r7, #19]
 800199c:	2b02      	cmp	r3, #2
 800199e:	f040 80be 	bne.w	8001b1e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80019a2:	4b65      	ldr	r3, [pc, #404]	; (8001b38 <HAL_CAN_ConfigFilter+0x1bc>)
 80019a4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80019ac:	f043 0201 	orr.w	r2, r3, #1
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80019bc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d0:	021b      	lsls	r3, r3, #8
 80019d2:	431a      	orrs	r2, r3
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	695b      	ldr	r3, [r3, #20]
 80019de:	f003 031f 	and.w	r3, r3, #31
 80019e2:	2201      	movs	r2, #1
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	43db      	mvns	r3, r3
 80019f4:	401a      	ands	r2, r3
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	69db      	ldr	r3, [r3, #28]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d123      	bne.n	8001a4c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	401a      	ands	r2, r3
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	68db      	ldr	r3, [r3, #12]
 8001a1a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001a26:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	3248      	adds	r2, #72	; 0x48
 8001a2c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a40:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a42:	6979      	ldr	r1, [r7, #20]
 8001a44:	3348      	adds	r3, #72	; 0x48
 8001a46:	00db      	lsls	r3, r3, #3
 8001a48:	440b      	add	r3, r1
 8001a4a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	69db      	ldr	r3, [r3, #28]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d122      	bne.n	8001a9a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	431a      	orrs	r2, r3
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a70:	683a      	ldr	r2, [r7, #0]
 8001a72:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001a74:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	3248      	adds	r2, #72	; 0x48
 8001a7a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001a8e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001a90:	6979      	ldr	r1, [r7, #20]
 8001a92:	3348      	adds	r3, #72	; 0x48
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	440b      	add	r3, r1
 8001a98:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d109      	bne.n	8001ab6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	401a      	ands	r2, r3
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001ab4:	e007      	b.n	8001ac6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d109      	bne.n	8001ae2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	43db      	mvns	r3, r3
 8001ad8:	401a      	ands	r2, r3
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001ae0:	e007      	b.n	8001af2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	431a      	orrs	r2, r3
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	6a1b      	ldr	r3, [r3, #32]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d107      	bne.n	8001b0a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	431a      	orrs	r2, r3
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001b10:	f023 0201 	bic.w	r2, r3, #1
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	e006      	b.n	8001b2c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b22:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
  }
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	371c      	adds	r7, #28
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	40006400 	.word	0x40006400

08001b3c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d12e      	bne.n	8001bae <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2202      	movs	r2, #2
 8001b54:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f022 0201 	bic.w	r2, r2, #1
 8001b66:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001b68:	f7ff f9da 	bl	8000f20 <HAL_GetTick>
 8001b6c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b6e:	e012      	b.n	8001b96 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b70:	f7ff f9d6 	bl	8000f20 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b0a      	cmp	r3, #10
 8001b7c:	d90b      	bls.n	8001b96 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b82:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2205      	movs	r2, #5
 8001b8e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e012      	b.n	8001bbc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d1e5      	bne.n	8001b70 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001baa:	2300      	movs	r3, #0
 8001bac:	e006      	b.n	8001bbc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
  }
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b087      	sub	sp, #28
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
 8001bd0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bd8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001bda:	7dfb      	ldrb	r3, [r7, #23]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d003      	beq.n	8001be8 <HAL_CAN_GetRxMessage+0x24>
 8001be0:	7dfb      	ldrb	r3, [r7, #23]
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	f040 80f4 	bne.w	8001dd0 <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d10e      	bne.n	8001c0c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	f003 0303 	and.w	r3, r3, #3
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d116      	bne.n	8001c2a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c00:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e0e8      	b.n	8001dde <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d107      	bne.n	8001c2a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e0d9      	b.n	8001dde <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	331b      	adds	r3, #27
 8001c32:	011b      	lsls	r3, r3, #4
 8001c34:	4413      	add	r3, r2
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0204 	and.w	r2, r3, #4
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d10c      	bne.n	8001c62 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	331b      	adds	r3, #27
 8001c50:	011b      	lsls	r3, r3, #4
 8001c52:	4413      	add	r3, r2
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	0d5b      	lsrs	r3, r3, #21
 8001c58:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	e00b      	b.n	8001c7a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	331b      	adds	r3, #27
 8001c6a:	011b      	lsls	r3, r3, #4
 8001c6c:	4413      	add	r3, r2
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	08db      	lsrs	r3, r3, #3
 8001c72:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	331b      	adds	r3, #27
 8001c82:	011b      	lsls	r3, r3, #4
 8001c84:	4413      	add	r3, r2
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	085b      	lsrs	r3, r3, #1
 8001c8a:	f003 0201 	and.w	r2, r3, #1
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	331b      	adds	r3, #27
 8001c9a:	011b      	lsls	r3, r3, #4
 8001c9c:	4413      	add	r3, r2
 8001c9e:	3304      	adds	r3, #4
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 020f 	and.w	r2, r3, #15
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	331b      	adds	r3, #27
 8001cb2:	011b      	lsls	r3, r3, #4
 8001cb4:	4413      	add	r3, r2
 8001cb6:	3304      	adds	r3, #4
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	0a1b      	lsrs	r3, r3, #8
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	331b      	adds	r3, #27
 8001cca:	011b      	lsls	r3, r3, #4
 8001ccc:	4413      	add	r3, r2
 8001cce:	3304      	adds	r3, #4
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	0c1b      	lsrs	r3, r3, #16
 8001cd4:	b29a      	uxth	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	011b      	lsls	r3, r3, #4
 8001ce2:	4413      	add	r3, r2
 8001ce4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	b2da      	uxtb	r2, r3
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	011b      	lsls	r3, r3, #4
 8001cf8:	4413      	add	r3, r2
 8001cfa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	0a1a      	lsrs	r2, r3, #8
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	3301      	adds	r3, #1
 8001d06:	b2d2      	uxtb	r2, r2
 8001d08:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	011b      	lsls	r3, r3, #4
 8001d12:	4413      	add	r3, r2
 8001d14:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	0c1a      	lsrs	r2, r3, #16
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	3302      	adds	r3, #2
 8001d20:	b2d2      	uxtb	r2, r2
 8001d22:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	011b      	lsls	r3, r3, #4
 8001d2c:	4413      	add	r3, r2
 8001d2e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	0e1a      	lsrs	r2, r3, #24
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	3303      	adds	r3, #3
 8001d3a:	b2d2      	uxtb	r2, r2
 8001d3c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	011b      	lsls	r3, r3, #4
 8001d46:	4413      	add	r3, r2
 8001d48:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	3304      	adds	r3, #4
 8001d52:	b2d2      	uxtb	r2, r2
 8001d54:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	011b      	lsls	r3, r3, #4
 8001d5e:	4413      	add	r3, r2
 8001d60:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	0a1a      	lsrs	r2, r3, #8
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	3305      	adds	r3, #5
 8001d6c:	b2d2      	uxtb	r2, r2
 8001d6e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	011b      	lsls	r3, r3, #4
 8001d78:	4413      	add	r3, r2
 8001d7a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	0c1a      	lsrs	r2, r3, #16
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	3306      	adds	r3, #6
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	011b      	lsls	r3, r3, #4
 8001d92:	4413      	add	r3, r2
 8001d94:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	0e1a      	lsrs	r2, r3, #24
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	3307      	adds	r3, #7
 8001da0:	b2d2      	uxtb	r2, r2
 8001da2:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d108      	bne.n	8001dbc <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	68da      	ldr	r2, [r3, #12]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f042 0220 	orr.w	r2, r2, #32
 8001db8:	60da      	str	r2, [r3, #12]
 8001dba:	e007      	b.n	8001dcc <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	691a      	ldr	r2, [r3, #16]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f042 0220 	orr.w	r2, r2, #32
 8001dca:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	e006      	b.n	8001dde <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
  }
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	371c      	adds	r7, #28
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b085      	sub	sp, #20
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
 8001df2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dfa:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d002      	beq.n	8001e08 <HAL_CAN_ActivateNotification+0x1e>
 8001e02:	7bfb      	ldrb	r3, [r7, #15]
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d109      	bne.n	8001e1c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6959      	ldr	r1, [r3, #20]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	683a      	ldr	r2, [r7, #0]
 8001e14:	430a      	orrs	r2, r1
 8001e16:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	e006      	b.n	8001e2a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e20:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
  }
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3714      	adds	r7, #20
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b08a      	sub	sp, #40	; 0x28
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	695b      	ldr	r3, [r3, #20]
 8001e48:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001e72:	6a3b      	ldr	r3, [r7, #32]
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d07c      	beq.n	8001f76 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d023      	beq.n	8001ece <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d003      	beq.n	8001ea0 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f005 f8e3 	bl	8007064 <HAL_CAN_TxMailbox0CompleteCallback>
 8001e9e:	e016      	b.n	8001ece <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	f003 0304 	and.w	r3, r3, #4
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d004      	beq.n	8001eb4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8001eb2:	e00c      	b.n	8001ece <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	f003 0308 	and.w	r3, r3, #8
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d004      	beq.n	8001ec8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ec6:	e002      	b.n	8001ece <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f000 f965 	bl	8002198 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d024      	beq.n	8001f22 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ee0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d003      	beq.n	8001ef4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f005 f8c9 	bl	8007084 <HAL_CAN_TxMailbox1CompleteCallback>
 8001ef2:	e016      	b.n	8001f22 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d004      	beq.n	8001f08 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f00:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001f04:	627b      	str	r3, [r7, #36]	; 0x24
 8001f06:	e00c      	b.n	8001f22 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d004      	beq.n	8001f1c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f18:	627b      	str	r3, [r7, #36]	; 0x24
 8001f1a:	e002      	b.n	8001f22 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f000 f945 	bl	80021ac <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d024      	beq.n	8001f76 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001f34:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d003      	beq.n	8001f48 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f005 f8af 	bl	80070a4 <HAL_CAN_TxMailbox2CompleteCallback>
 8001f46:	e016      	b.n	8001f76 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d004      	beq.n	8001f5c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
 8001f5a:	e00c      	b.n	8001f76 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d004      	beq.n	8001f70 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f6e:	e002      	b.n	8001f76 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f000 f925 	bl	80021c0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001f76:	6a3b      	ldr	r3, [r7, #32]
 8001f78:	f003 0308 	and.w	r3, r3, #8
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d00c      	beq.n	8001f9a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	f003 0310 	and.w	r3, r3, #16
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d007      	beq.n	8001f9a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f90:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2210      	movs	r2, #16
 8001f98:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001f9a:	6a3b      	ldr	r3, [r7, #32]
 8001f9c:	f003 0304 	and.w	r3, r3, #4
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d00b      	beq.n	8001fbc <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	f003 0308 	and.w	r3, r3, #8
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d006      	beq.n	8001fbc <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2208      	movs	r2, #8
 8001fb4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f90c 	bl	80021d4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001fbc:	6a3b      	ldr	r3, [r7, #32]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d009      	beq.n	8001fda <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	f003 0303 	and.w	r3, r3, #3
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d002      	beq.n	8001fda <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	f005 f875 	bl	80070c4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001fda:	6a3b      	ldr	r3, [r7, #32]
 8001fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00c      	beq.n	8001ffe <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	f003 0310 	and.w	r3, r3, #16
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d007      	beq.n	8001ffe <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ff4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2210      	movs	r2, #16
 8001ffc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001ffe:	6a3b      	ldr	r3, [r7, #32]
 8002000:	f003 0320 	and.w	r3, r3, #32
 8002004:	2b00      	cmp	r3, #0
 8002006:	d00b      	beq.n	8002020 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	f003 0308 	and.w	r3, r3, #8
 800200e:	2b00      	cmp	r3, #0
 8002010:	d006      	beq.n	8002020 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2208      	movs	r2, #8
 8002018:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 f8ee 	bl	80021fc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002020:	6a3b      	ldr	r3, [r7, #32]
 8002022:	f003 0310 	and.w	r3, r3, #16
 8002026:	2b00      	cmp	r3, #0
 8002028:	d009      	beq.n	800203e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	f003 0303 	and.w	r3, r3, #3
 8002034:	2b00      	cmp	r3, #0
 8002036:	d002      	beq.n	800203e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f000 f8d5 	bl	80021e8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800203e:	6a3b      	ldr	r3, [r7, #32]
 8002040:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d00b      	beq.n	8002060 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	f003 0310 	and.w	r3, r3, #16
 800204e:	2b00      	cmp	r3, #0
 8002050:	d006      	beq.n	8002060 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2210      	movs	r2, #16
 8002058:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f8d8 	bl	8002210 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002060:	6a3b      	ldr	r3, [r7, #32]
 8002062:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00b      	beq.n	8002082 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	f003 0308 	and.w	r3, r3, #8
 8002070:	2b00      	cmp	r3, #0
 8002072:	d006      	beq.n	8002082 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2208      	movs	r2, #8
 800207a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f000 f8d1 	bl	8002224 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002082:	6a3b      	ldr	r3, [r7, #32]
 8002084:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d075      	beq.n	8002178 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	f003 0304 	and.w	r3, r3, #4
 8002092:	2b00      	cmp	r3, #0
 8002094:	d06c      	beq.n	8002170 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002096:	6a3b      	ldr	r3, [r7, #32]
 8002098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800209c:	2b00      	cmp	r3, #0
 800209e:	d008      	beq.n	80020b2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d003      	beq.n	80020b2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	f043 0301 	orr.w	r3, r3, #1
 80020b0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80020b2:	6a3b      	ldr	r3, [r7, #32]
 80020b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d008      	beq.n	80020ce <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c8:	f043 0302 	orr.w	r3, r3, #2
 80020cc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80020ce:	6a3b      	ldr	r3, [r7, #32]
 80020d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d008      	beq.n	80020ea <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80020e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e4:	f043 0304 	orr.w	r3, r3, #4
 80020e8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80020ea:	6a3b      	ldr	r3, [r7, #32]
 80020ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d03d      	beq.n	8002170 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d038      	beq.n	8002170 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002104:	2b30      	cmp	r3, #48	; 0x30
 8002106:	d017      	beq.n	8002138 <HAL_CAN_IRQHandler+0x302>
 8002108:	2b30      	cmp	r3, #48	; 0x30
 800210a:	d804      	bhi.n	8002116 <HAL_CAN_IRQHandler+0x2e0>
 800210c:	2b10      	cmp	r3, #16
 800210e:	d009      	beq.n	8002124 <HAL_CAN_IRQHandler+0x2ee>
 8002110:	2b20      	cmp	r3, #32
 8002112:	d00c      	beq.n	800212e <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002114:	e024      	b.n	8002160 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8002116:	2b50      	cmp	r3, #80	; 0x50
 8002118:	d018      	beq.n	800214c <HAL_CAN_IRQHandler+0x316>
 800211a:	2b60      	cmp	r3, #96	; 0x60
 800211c:	d01b      	beq.n	8002156 <HAL_CAN_IRQHandler+0x320>
 800211e:	2b40      	cmp	r3, #64	; 0x40
 8002120:	d00f      	beq.n	8002142 <HAL_CAN_IRQHandler+0x30c>
            break;
 8002122:	e01d      	b.n	8002160 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8002124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002126:	f043 0308 	orr.w	r3, r3, #8
 800212a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800212c:	e018      	b.n	8002160 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 800212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002130:	f043 0310 	orr.w	r3, r3, #16
 8002134:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002136:	e013      	b.n	8002160 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213a:	f043 0320 	orr.w	r3, r3, #32
 800213e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002140:	e00e      	b.n	8002160 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8002142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002148:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800214a:	e009      	b.n	8002160 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 800214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002152:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002154:	e004      	b.n	8002160 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800215c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800215e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	699a      	ldr	r2, [r3, #24]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800216e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2204      	movs	r2, #4
 8002176:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217a:	2b00      	cmp	r3, #0
 800217c:	d008      	beq.n	8002190 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002184:	431a      	orrs	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 f854 	bl	8002238 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002190:	bf00      	nop
 8002192:	3728      	adds	r7, #40	; 0x28
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80021b4:	bf00      	nop
 80021b6:	370c      	adds	r7, #12
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002240:	bf00      	nop
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800225c:	4b0c      	ldr	r3, [pc, #48]	; (8002290 <__NVIC_SetPriorityGrouping+0x44>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002262:	68ba      	ldr	r2, [r7, #8]
 8002264:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002268:	4013      	ands	r3, r2
 800226a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002274:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002278:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800227c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800227e:	4a04      	ldr	r2, [pc, #16]	; (8002290 <__NVIC_SetPriorityGrouping+0x44>)
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	60d3      	str	r3, [r2, #12]
}
 8002284:	bf00      	nop
 8002286:	3714      	adds	r7, #20
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	e000ed00 	.word	0xe000ed00

08002294 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002298:	4b04      	ldr	r3, [pc, #16]	; (80022ac <__NVIC_GetPriorityGrouping+0x18>)
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	0a1b      	lsrs	r3, r3, #8
 800229e:	f003 0307 	and.w	r3, r3, #7
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	e000ed00 	.word	0xe000ed00

080022b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4603      	mov	r3, r0
 80022b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	db0b      	blt.n	80022da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022c2:	79fb      	ldrb	r3, [r7, #7]
 80022c4:	f003 021f 	and.w	r2, r3, #31
 80022c8:	4907      	ldr	r1, [pc, #28]	; (80022e8 <__NVIC_EnableIRQ+0x38>)
 80022ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ce:	095b      	lsrs	r3, r3, #5
 80022d0:	2001      	movs	r0, #1
 80022d2:	fa00 f202 	lsl.w	r2, r0, r2
 80022d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022da:	bf00      	nop
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	e000e100 	.word	0xe000e100

080022ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	6039      	str	r1, [r7, #0]
 80022f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	db0a      	blt.n	8002316 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	b2da      	uxtb	r2, r3
 8002304:	490c      	ldr	r1, [pc, #48]	; (8002338 <__NVIC_SetPriority+0x4c>)
 8002306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800230a:	0112      	lsls	r2, r2, #4
 800230c:	b2d2      	uxtb	r2, r2
 800230e:	440b      	add	r3, r1
 8002310:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002314:	e00a      	b.n	800232c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	b2da      	uxtb	r2, r3
 800231a:	4908      	ldr	r1, [pc, #32]	; (800233c <__NVIC_SetPriority+0x50>)
 800231c:	79fb      	ldrb	r3, [r7, #7]
 800231e:	f003 030f 	and.w	r3, r3, #15
 8002322:	3b04      	subs	r3, #4
 8002324:	0112      	lsls	r2, r2, #4
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	440b      	add	r3, r1
 800232a:	761a      	strb	r2, [r3, #24]
}
 800232c:	bf00      	nop
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	e000e100 	.word	0xe000e100
 800233c:	e000ed00 	.word	0xe000ed00

08002340 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002340:	b480      	push	{r7}
 8002342:	b089      	sub	sp, #36	; 0x24
 8002344:	af00      	add	r7, sp, #0
 8002346:	60f8      	str	r0, [r7, #12]
 8002348:	60b9      	str	r1, [r7, #8]
 800234a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f003 0307 	and.w	r3, r3, #7
 8002352:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	f1c3 0307 	rsb	r3, r3, #7
 800235a:	2b04      	cmp	r3, #4
 800235c:	bf28      	it	cs
 800235e:	2304      	movcs	r3, #4
 8002360:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	3304      	adds	r3, #4
 8002366:	2b06      	cmp	r3, #6
 8002368:	d902      	bls.n	8002370 <NVIC_EncodePriority+0x30>
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	3b03      	subs	r3, #3
 800236e:	e000      	b.n	8002372 <NVIC_EncodePriority+0x32>
 8002370:	2300      	movs	r3, #0
 8002372:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002374:	f04f 32ff 	mov.w	r2, #4294967295
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	fa02 f303 	lsl.w	r3, r2, r3
 800237e:	43da      	mvns	r2, r3
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	401a      	ands	r2, r3
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002388:	f04f 31ff 	mov.w	r1, #4294967295
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	fa01 f303 	lsl.w	r3, r1, r3
 8002392:	43d9      	mvns	r1, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002398:	4313      	orrs	r3, r2
         );
}
 800239a:	4618      	mov	r0, r3
 800239c:	3724      	adds	r7, #36	; 0x24
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
	...

080023a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3b01      	subs	r3, #1
 80023b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023b8:	d301      	bcc.n	80023be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023ba:	2301      	movs	r3, #1
 80023bc:	e00f      	b.n	80023de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023be:	4a0a      	ldr	r2, [pc, #40]	; (80023e8 <SysTick_Config+0x40>)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	3b01      	subs	r3, #1
 80023c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023c6:	210f      	movs	r1, #15
 80023c8:	f04f 30ff 	mov.w	r0, #4294967295
 80023cc:	f7ff ff8e 	bl	80022ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023d0:	4b05      	ldr	r3, [pc, #20]	; (80023e8 <SysTick_Config+0x40>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023d6:	4b04      	ldr	r3, [pc, #16]	; (80023e8 <SysTick_Config+0x40>)
 80023d8:	2207      	movs	r2, #7
 80023da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	e000e010 	.word	0xe000e010

080023ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f7ff ff29 	bl	800224c <__NVIC_SetPriorityGrouping>
}
 80023fa:	bf00      	nop
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002402:	b580      	push	{r7, lr}
 8002404:	b086      	sub	sp, #24
 8002406:	af00      	add	r7, sp, #0
 8002408:	4603      	mov	r3, r0
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	607a      	str	r2, [r7, #4]
 800240e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002410:	2300      	movs	r3, #0
 8002412:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002414:	f7ff ff3e 	bl	8002294 <__NVIC_GetPriorityGrouping>
 8002418:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	68b9      	ldr	r1, [r7, #8]
 800241e:	6978      	ldr	r0, [r7, #20]
 8002420:	f7ff ff8e 	bl	8002340 <NVIC_EncodePriority>
 8002424:	4602      	mov	r2, r0
 8002426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800242a:	4611      	mov	r1, r2
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff ff5d 	bl	80022ec <__NVIC_SetPriority>
}
 8002432:	bf00      	nop
 8002434:	3718      	adds	r7, #24
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b082      	sub	sp, #8
 800243e:	af00      	add	r7, sp, #0
 8002440:	4603      	mov	r3, r0
 8002442:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff ff31 	bl	80022b0 <__NVIC_EnableIRQ>
}
 800244e:	bf00      	nop
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b082      	sub	sp, #8
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f7ff ffa2 	bl	80023a8 <SysTick_Config>
 8002464:	4603      	mov	r3, r0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
	...

08002470 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002478:	2300      	movs	r3, #0
 800247a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800247c:	f7fe fd50 	bl	8000f20 <HAL_GetTick>
 8002480:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d101      	bne.n	800248c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e099      	b.n	80025c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2202      	movs	r2, #2
 8002498:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f022 0201 	bic.w	r2, r2, #1
 80024aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024ac:	e00f      	b.n	80024ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024ae:	f7fe fd37 	bl	8000f20 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b05      	cmp	r3, #5
 80024ba:	d908      	bls.n	80024ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2220      	movs	r2, #32
 80024c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2203      	movs	r2, #3
 80024c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e078      	b.n	80025c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f003 0301 	and.w	r3, r3, #1
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d1e8      	bne.n	80024ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024e4:	697a      	ldr	r2, [r7, #20]
 80024e6:	4b38      	ldr	r3, [pc, #224]	; (80025c8 <HAL_DMA_Init+0x158>)
 80024e8:	4013      	ands	r3, r2
 80024ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002506:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002512:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	4313      	orrs	r3, r2
 800251e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002524:	2b04      	cmp	r3, #4
 8002526:	d107      	bne.n	8002538 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002530:	4313      	orrs	r3, r2
 8002532:	697a      	ldr	r2, [r7, #20]
 8002534:	4313      	orrs	r3, r2
 8002536:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	697a      	ldr	r2, [r7, #20]
 800253e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	f023 0307 	bic.w	r3, r3, #7
 800254e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	4313      	orrs	r3, r2
 8002558:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255e:	2b04      	cmp	r3, #4
 8002560:	d117      	bne.n	8002592 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002566:	697a      	ldr	r2, [r7, #20]
 8002568:	4313      	orrs	r3, r2
 800256a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00e      	beq.n	8002592 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f000 fa99 	bl	8002aac <DMA_CheckFifoParam>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d008      	beq.n	8002592 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2240      	movs	r2, #64	; 0x40
 8002584:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2201      	movs	r2, #1
 800258a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800258e:	2301      	movs	r3, #1
 8002590:	e016      	b.n	80025c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	697a      	ldr	r2, [r7, #20]
 8002598:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 fa50 	bl	8002a40 <DMA_CalcBaseAndBitshift>
 80025a0:	4603      	mov	r3, r0
 80025a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a8:	223f      	movs	r2, #63	; 0x3f
 80025aa:	409a      	lsls	r2, r3
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2201      	movs	r2, #1
 80025ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3718      	adds	r7, #24
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	f010803f 	.word	0xf010803f

080025cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
 80025d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025da:	2300      	movs	r3, #0
 80025dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d101      	bne.n	80025f2 <HAL_DMA_Start_IT+0x26>
 80025ee:	2302      	movs	r3, #2
 80025f0:	e048      	b.n	8002684 <HAL_DMA_Start_IT+0xb8>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2201      	movs	r2, #1
 80025f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b01      	cmp	r3, #1
 8002604:	d137      	bne.n	8002676 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2202      	movs	r2, #2
 800260a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	68b9      	ldr	r1, [r7, #8]
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	f000 f9e2 	bl	80029e4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002624:	223f      	movs	r2, #63	; 0x3f
 8002626:	409a      	lsls	r2, r3
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f042 0216 	orr.w	r2, r2, #22
 800263a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	695a      	ldr	r2, [r3, #20]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800264a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002650:	2b00      	cmp	r3, #0
 8002652:	d007      	beq.n	8002664 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f042 0208 	orr.w	r2, r2, #8
 8002662:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f042 0201 	orr.w	r2, r2, #1
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	e005      	b.n	8002682 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800267e:	2302      	movs	r3, #2
 8002680:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002682:	7dfb      	ldrb	r3, [r7, #23]
}
 8002684:	4618      	mov	r0, r3
 8002686:	3718      	adds	r7, #24
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d004      	beq.n	80026aa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2280      	movs	r2, #128	; 0x80
 80026a4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e00c      	b.n	80026c4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2205      	movs	r2, #5
 80026ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 0201 	bic.w	r2, r2, #1
 80026c0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80026c2:	2300      	movs	r3, #0
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr

080026d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80026d8:	2300      	movs	r3, #0
 80026da:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80026dc:	4b92      	ldr	r3, [pc, #584]	; (8002928 <HAL_DMA_IRQHandler+0x258>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a92      	ldr	r2, [pc, #584]	; (800292c <HAL_DMA_IRQHandler+0x25c>)
 80026e2:	fba2 2303 	umull	r2, r3, r2, r3
 80026e6:	0a9b      	lsrs	r3, r3, #10
 80026e8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ee:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fa:	2208      	movs	r2, #8
 80026fc:	409a      	lsls	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	4013      	ands	r3, r2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d01a      	beq.n	800273c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0304 	and.w	r3, r3, #4
 8002710:	2b00      	cmp	r3, #0
 8002712:	d013      	beq.n	800273c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f022 0204 	bic.w	r2, r2, #4
 8002722:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002728:	2208      	movs	r2, #8
 800272a:	409a      	lsls	r2, r3
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002734:	f043 0201 	orr.w	r2, r3, #1
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002740:	2201      	movs	r2, #1
 8002742:	409a      	lsls	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	4013      	ands	r3, r2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d012      	beq.n	8002772 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00b      	beq.n	8002772 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800275e:	2201      	movs	r2, #1
 8002760:	409a      	lsls	r2, r3
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800276a:	f043 0202 	orr.w	r2, r3, #2
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002776:	2204      	movs	r2, #4
 8002778:	409a      	lsls	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	4013      	ands	r3, r2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d012      	beq.n	80027a8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d00b      	beq.n	80027a8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002794:	2204      	movs	r2, #4
 8002796:	409a      	lsls	r2, r3
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a0:	f043 0204 	orr.w	r2, r3, #4
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ac:	2210      	movs	r2, #16
 80027ae:	409a      	lsls	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	4013      	ands	r3, r2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d043      	beq.n	8002840 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0308 	and.w	r3, r3, #8
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d03c      	beq.n	8002840 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ca:	2210      	movs	r2, #16
 80027cc:	409a      	lsls	r2, r3
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d018      	beq.n	8002812 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d108      	bne.n	8002800 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d024      	beq.n	8002840 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	4798      	blx	r3
 80027fe:	e01f      	b.n	8002840 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002804:	2b00      	cmp	r3, #0
 8002806:	d01b      	beq.n	8002840 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	4798      	blx	r3
 8002810:	e016      	b.n	8002840 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800281c:	2b00      	cmp	r3, #0
 800281e:	d107      	bne.n	8002830 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f022 0208 	bic.w	r2, r2, #8
 800282e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002834:	2b00      	cmp	r3, #0
 8002836:	d003      	beq.n	8002840 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002844:	2220      	movs	r2, #32
 8002846:	409a      	lsls	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	4013      	ands	r3, r2
 800284c:	2b00      	cmp	r3, #0
 800284e:	f000 808e 	beq.w	800296e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0310 	and.w	r3, r3, #16
 800285c:	2b00      	cmp	r3, #0
 800285e:	f000 8086 	beq.w	800296e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002866:	2220      	movs	r2, #32
 8002868:	409a      	lsls	r2, r3
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b05      	cmp	r3, #5
 8002878:	d136      	bne.n	80028e8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f022 0216 	bic.w	r2, r2, #22
 8002888:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	695a      	ldr	r2, [r3, #20]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002898:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d103      	bne.n	80028aa <HAL_DMA_IRQHandler+0x1da>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d007      	beq.n	80028ba <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f022 0208 	bic.w	r2, r2, #8
 80028b8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028be:	223f      	movs	r2, #63	; 0x3f
 80028c0:	409a      	lsls	r2, r3
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d07d      	beq.n	80029da <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	4798      	blx	r3
        }
        return;
 80028e6:	e078      	b.n	80029da <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d01c      	beq.n	8002930 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d108      	bne.n	8002916 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002908:	2b00      	cmp	r3, #0
 800290a:	d030      	beq.n	800296e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	4798      	blx	r3
 8002914:	e02b      	b.n	800296e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800291a:	2b00      	cmp	r3, #0
 800291c:	d027      	beq.n	800296e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	4798      	blx	r3
 8002926:	e022      	b.n	800296e <HAL_DMA_IRQHandler+0x29e>
 8002928:	20000038 	.word	0x20000038
 800292c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293a:	2b00      	cmp	r3, #0
 800293c:	d10f      	bne.n	800295e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f022 0210 	bic.w	r2, r2, #16
 800294c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2201      	movs	r2, #1
 800295a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002962:	2b00      	cmp	r3, #0
 8002964:	d003      	beq.n	800296e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002972:	2b00      	cmp	r3, #0
 8002974:	d032      	beq.n	80029dc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	2b00      	cmp	r3, #0
 8002980:	d022      	beq.n	80029c8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2205      	movs	r2, #5
 8002986:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f022 0201 	bic.w	r2, r2, #1
 8002998:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	3301      	adds	r3, #1
 800299e:	60bb      	str	r3, [r7, #8]
 80029a0:	697a      	ldr	r2, [r7, #20]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d307      	bcc.n	80029b6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d1f2      	bne.n	800299a <HAL_DMA_IRQHandler+0x2ca>
 80029b4:	e000      	b.n	80029b8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80029b6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d005      	beq.n	80029dc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	4798      	blx	r3
 80029d8:	e000      	b.n	80029dc <HAL_DMA_IRQHandler+0x30c>
        return;
 80029da:	bf00      	nop
    }
  }
}
 80029dc:	3718      	adds	r7, #24
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop

080029e4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
 80029f0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a00:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	2b40      	cmp	r3, #64	; 0x40
 8002a10:	d108      	bne.n	8002a24 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68ba      	ldr	r2, [r7, #8]
 8002a20:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a22:	e007      	b.n	8002a34 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68ba      	ldr	r2, [r7, #8]
 8002a2a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	60da      	str	r2, [r3, #12]
}
 8002a34:	bf00      	nop
 8002a36:	3714      	adds	r7, #20
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b085      	sub	sp, #20
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	3b10      	subs	r3, #16
 8002a50:	4a14      	ldr	r2, [pc, #80]	; (8002aa4 <DMA_CalcBaseAndBitshift+0x64>)
 8002a52:	fba2 2303 	umull	r2, r3, r2, r3
 8002a56:	091b      	lsrs	r3, r3, #4
 8002a58:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a5a:	4a13      	ldr	r2, [pc, #76]	; (8002aa8 <DMA_CalcBaseAndBitshift+0x68>)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	4413      	add	r3, r2
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	461a      	mov	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2b03      	cmp	r3, #3
 8002a6c:	d909      	bls.n	8002a82 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a76:	f023 0303 	bic.w	r3, r3, #3
 8002a7a:	1d1a      	adds	r2, r3, #4
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	659a      	str	r2, [r3, #88]	; 0x58
 8002a80:	e007      	b.n	8002a92 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a8a:	f023 0303 	bic.w	r3, r3, #3
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3714      	adds	r7, #20
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	aaaaaaab 	.word	0xaaaaaaab
 8002aa8:	08009788 	.word	0x08009788

08002aac <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002abc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d11f      	bne.n	8002b06 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	2b03      	cmp	r3, #3
 8002aca:	d855      	bhi.n	8002b78 <DMA_CheckFifoParam+0xcc>
 8002acc:	a201      	add	r2, pc, #4	; (adr r2, 8002ad4 <DMA_CheckFifoParam+0x28>)
 8002ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ad2:	bf00      	nop
 8002ad4:	08002ae5 	.word	0x08002ae5
 8002ad8:	08002af7 	.word	0x08002af7
 8002adc:	08002ae5 	.word	0x08002ae5
 8002ae0:	08002b79 	.word	0x08002b79
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ae8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d045      	beq.n	8002b7c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002af4:	e042      	b.n	8002b7c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002afe:	d13f      	bne.n	8002b80 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b04:	e03c      	b.n	8002b80 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b0e:	d121      	bne.n	8002b54 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	2b03      	cmp	r3, #3
 8002b14:	d836      	bhi.n	8002b84 <DMA_CheckFifoParam+0xd8>
 8002b16:	a201      	add	r2, pc, #4	; (adr r2, 8002b1c <DMA_CheckFifoParam+0x70>)
 8002b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b1c:	08002b2d 	.word	0x08002b2d
 8002b20:	08002b33 	.word	0x08002b33
 8002b24:	08002b2d 	.word	0x08002b2d
 8002b28:	08002b45 	.word	0x08002b45
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b30:	e02f      	b.n	8002b92 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d024      	beq.n	8002b88 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b42:	e021      	b.n	8002b88 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b48:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b4c:	d11e      	bne.n	8002b8c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b52:	e01b      	b.n	8002b8c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d902      	bls.n	8002b60 <DMA_CheckFifoParam+0xb4>
 8002b5a:	2b03      	cmp	r3, #3
 8002b5c:	d003      	beq.n	8002b66 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b5e:	e018      	b.n	8002b92 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	73fb      	strb	r3, [r7, #15]
      break;
 8002b64:	e015      	b.n	8002b92 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00e      	beq.n	8002b90 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	73fb      	strb	r3, [r7, #15]
      break;
 8002b76:	e00b      	b.n	8002b90 <DMA_CheckFifoParam+0xe4>
      break;
 8002b78:	bf00      	nop
 8002b7a:	e00a      	b.n	8002b92 <DMA_CheckFifoParam+0xe6>
      break;
 8002b7c:	bf00      	nop
 8002b7e:	e008      	b.n	8002b92 <DMA_CheckFifoParam+0xe6>
      break;
 8002b80:	bf00      	nop
 8002b82:	e006      	b.n	8002b92 <DMA_CheckFifoParam+0xe6>
      break;
 8002b84:	bf00      	nop
 8002b86:	e004      	b.n	8002b92 <DMA_CheckFifoParam+0xe6>
      break;
 8002b88:	bf00      	nop
 8002b8a:	e002      	b.n	8002b92 <DMA_CheckFifoParam+0xe6>
      break;   
 8002b8c:	bf00      	nop
 8002b8e:	e000      	b.n	8002b92 <DMA_CheckFifoParam+0xe6>
      break;
 8002b90:	bf00      	nop
    }
  } 
  
  return status; 
 8002b92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3714      	adds	r7, #20
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b089      	sub	sp, #36	; 0x24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002baa:	2300      	movs	r3, #0
 8002bac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	61fb      	str	r3, [r7, #28]
 8002bba:	e165      	b.n	8002e88 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	f040 8154 	bne.w	8002e82 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d003      	beq.n	8002bea <HAL_GPIO_Init+0x4a>
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2b12      	cmp	r3, #18
 8002be8:	d123      	bne.n	8002c32 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	08da      	lsrs	r2, r3, #3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	3208      	adds	r2, #8
 8002bf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	f003 0307 	and.w	r3, r3, #7
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	220f      	movs	r2, #15
 8002c02:	fa02 f303 	lsl.w	r3, r2, r3
 8002c06:	43db      	mvns	r3, r3
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	691a      	ldr	r2, [r3, #16]
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	f003 0307 	and.w	r3, r3, #7
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c24:	69fb      	ldr	r3, [r7, #28]
 8002c26:	08da      	lsrs	r2, r3, #3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	3208      	adds	r2, #8
 8002c2c:	69b9      	ldr	r1, [r7, #24]
 8002c2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	2203      	movs	r2, #3
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	43db      	mvns	r3, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4013      	ands	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f003 0203 	and.w	r2, r3, #3
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d00b      	beq.n	8002c86 <HAL_GPIO_Init+0xe6>
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d007      	beq.n	8002c86 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c7a:	2b11      	cmp	r3, #17
 8002c7c:	d003      	beq.n	8002c86 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	2b12      	cmp	r3, #18
 8002c84:	d130      	bne.n	8002ce8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	2203      	movs	r2, #3
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	43db      	mvns	r3, r3
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	68da      	ldr	r2, [r3, #12]
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	091b      	lsrs	r3, r3, #4
 8002cd2:	f003 0201 	and.w	r2, r3, #1
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	2203      	movs	r2, #3
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f000 80ae 	beq.w	8002e82 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d26:	2300      	movs	r3, #0
 8002d28:	60fb      	str	r3, [r7, #12]
 8002d2a:	4b5c      	ldr	r3, [pc, #368]	; (8002e9c <HAL_GPIO_Init+0x2fc>)
 8002d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2e:	4a5b      	ldr	r2, [pc, #364]	; (8002e9c <HAL_GPIO_Init+0x2fc>)
 8002d30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d34:	6453      	str	r3, [r2, #68]	; 0x44
 8002d36:	4b59      	ldr	r3, [pc, #356]	; (8002e9c <HAL_GPIO_Init+0x2fc>)
 8002d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d3e:	60fb      	str	r3, [r7, #12]
 8002d40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d42:	4a57      	ldr	r2, [pc, #348]	; (8002ea0 <HAL_GPIO_Init+0x300>)
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	089b      	lsrs	r3, r3, #2
 8002d48:	3302      	adds	r3, #2
 8002d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	f003 0303 	and.w	r3, r3, #3
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	220f      	movs	r2, #15
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	43db      	mvns	r3, r3
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4013      	ands	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a4e      	ldr	r2, [pc, #312]	; (8002ea4 <HAL_GPIO_Init+0x304>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d025      	beq.n	8002dba <HAL_GPIO_Init+0x21a>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a4d      	ldr	r2, [pc, #308]	; (8002ea8 <HAL_GPIO_Init+0x308>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d01f      	beq.n	8002db6 <HAL_GPIO_Init+0x216>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a4c      	ldr	r2, [pc, #304]	; (8002eac <HAL_GPIO_Init+0x30c>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d019      	beq.n	8002db2 <HAL_GPIO_Init+0x212>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a4b      	ldr	r2, [pc, #300]	; (8002eb0 <HAL_GPIO_Init+0x310>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d013      	beq.n	8002dae <HAL_GPIO_Init+0x20e>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a4a      	ldr	r2, [pc, #296]	; (8002eb4 <HAL_GPIO_Init+0x314>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d00d      	beq.n	8002daa <HAL_GPIO_Init+0x20a>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a49      	ldr	r2, [pc, #292]	; (8002eb8 <HAL_GPIO_Init+0x318>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d007      	beq.n	8002da6 <HAL_GPIO_Init+0x206>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a48      	ldr	r2, [pc, #288]	; (8002ebc <HAL_GPIO_Init+0x31c>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d101      	bne.n	8002da2 <HAL_GPIO_Init+0x202>
 8002d9e:	2306      	movs	r3, #6
 8002da0:	e00c      	b.n	8002dbc <HAL_GPIO_Init+0x21c>
 8002da2:	2307      	movs	r3, #7
 8002da4:	e00a      	b.n	8002dbc <HAL_GPIO_Init+0x21c>
 8002da6:	2305      	movs	r3, #5
 8002da8:	e008      	b.n	8002dbc <HAL_GPIO_Init+0x21c>
 8002daa:	2304      	movs	r3, #4
 8002dac:	e006      	b.n	8002dbc <HAL_GPIO_Init+0x21c>
 8002dae:	2303      	movs	r3, #3
 8002db0:	e004      	b.n	8002dbc <HAL_GPIO_Init+0x21c>
 8002db2:	2302      	movs	r3, #2
 8002db4:	e002      	b.n	8002dbc <HAL_GPIO_Init+0x21c>
 8002db6:	2301      	movs	r3, #1
 8002db8:	e000      	b.n	8002dbc <HAL_GPIO_Init+0x21c>
 8002dba:	2300      	movs	r3, #0
 8002dbc:	69fa      	ldr	r2, [r7, #28]
 8002dbe:	f002 0203 	and.w	r2, r2, #3
 8002dc2:	0092      	lsls	r2, r2, #2
 8002dc4:	4093      	lsls	r3, r2
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dcc:	4934      	ldr	r1, [pc, #208]	; (8002ea0 <HAL_GPIO_Init+0x300>)
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	089b      	lsrs	r3, r3, #2
 8002dd2:	3302      	adds	r3, #2
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dda:	4b39      	ldr	r3, [pc, #228]	; (8002ec0 <HAL_GPIO_Init+0x320>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	43db      	mvns	r3, r3
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	4013      	ands	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dfe:	4a30      	ldr	r2, [pc, #192]	; (8002ec0 <HAL_GPIO_Init+0x320>)
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e04:	4b2e      	ldr	r3, [pc, #184]	; (8002ec0 <HAL_GPIO_Init+0x320>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	69ba      	ldr	r2, [r7, #24]
 8002e10:	4013      	ands	r3, r2
 8002e12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d003      	beq.n	8002e28 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e28:	4a25      	ldr	r2, [pc, #148]	; (8002ec0 <HAL_GPIO_Init+0x320>)
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e2e:	4b24      	ldr	r3, [pc, #144]	; (8002ec0 <HAL_GPIO_Init+0x320>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	43db      	mvns	r3, r3
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d003      	beq.n	8002e52 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e52:	4a1b      	ldr	r2, [pc, #108]	; (8002ec0 <HAL_GPIO_Init+0x320>)
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e58:	4b19      	ldr	r3, [pc, #100]	; (8002ec0 <HAL_GPIO_Init+0x320>)
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	43db      	mvns	r3, r3
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	4013      	ands	r3, r2
 8002e66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d003      	beq.n	8002e7c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e7c:	4a10      	ldr	r2, [pc, #64]	; (8002ec0 <HAL_GPIO_Init+0x320>)
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	3301      	adds	r3, #1
 8002e86:	61fb      	str	r3, [r7, #28]
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	2b0f      	cmp	r3, #15
 8002e8c:	f67f ae96 	bls.w	8002bbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e90:	bf00      	nop
 8002e92:	3724      	adds	r7, #36	; 0x24
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	40013800 	.word	0x40013800
 8002ea4:	40020000 	.word	0x40020000
 8002ea8:	40020400 	.word	0x40020400
 8002eac:	40020800 	.word	0x40020800
 8002eb0:	40020c00 	.word	0x40020c00
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	40021400 	.word	0x40021400
 8002ebc:	40021800 	.word	0x40021800
 8002ec0:	40013c00 	.word	0x40013c00

08002ec4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	460b      	mov	r3, r1
 8002ece:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	691a      	ldr	r2, [r3, #16]
 8002ed4:	887b      	ldrh	r3, [r7, #2]
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d002      	beq.n	8002ee2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002edc:	2301      	movs	r3, #1
 8002ede:	73fb      	strb	r3, [r7, #15]
 8002ee0:	e001      	b.n	8002ee6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3714      	adds	r7, #20
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	460b      	mov	r3, r1
 8002efe:	807b      	strh	r3, [r7, #2]
 8002f00:	4613      	mov	r3, r2
 8002f02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f04:	787b      	ldrb	r3, [r7, #1]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d003      	beq.n	8002f12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f0a:	887a      	ldrh	r2, [r7, #2]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f10:	e003      	b.n	8002f1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f12:	887b      	ldrh	r3, [r7, #2]
 8002f14:	041a      	lsls	r2, r3, #16
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	619a      	str	r2, [r3, #24]
}
 8002f1a:	bf00      	nop
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr

08002f26 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f26:	b480      	push	{r7}
 8002f28:	b083      	sub	sp, #12
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
 8002f2e:	460b      	mov	r3, r1
 8002f30:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	695a      	ldr	r2, [r3, #20]
 8002f36:	887b      	ldrh	r3, [r7, #2]
 8002f38:	401a      	ands	r2, r3
 8002f3a:	887b      	ldrh	r3, [r7, #2]
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d104      	bne.n	8002f4a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002f40:	887b      	ldrh	r3, [r7, #2]
 8002f42:	041a      	lsls	r2, r3, #16
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002f48:	e002      	b.n	8002f50 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002f4a:	887a      	ldrh	r2, [r7, #2]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	619a      	str	r2, [r3, #24]
}
 8002f50:	bf00      	nop
 8002f52:	370c      	adds	r7, #12
 8002f54:	46bd      	mov	sp, r7
 8002f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5a:	4770      	bx	lr

08002f5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d101      	bne.n	8002f70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e0ca      	b.n	8003106 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f70:	4b67      	ldr	r3, [pc, #412]	; (8003110 <HAL_RCC_ClockConfig+0x1b4>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 030f 	and.w	r3, r3, #15
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d90c      	bls.n	8002f98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f7e:	4b64      	ldr	r3, [pc, #400]	; (8003110 <HAL_RCC_ClockConfig+0x1b4>)
 8002f80:	683a      	ldr	r2, [r7, #0]
 8002f82:	b2d2      	uxtb	r2, r2
 8002f84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f86:	4b62      	ldr	r3, [pc, #392]	; (8003110 <HAL_RCC_ClockConfig+0x1b4>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 030f 	and.w	r3, r3, #15
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d001      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e0b6      	b.n	8003106 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d020      	beq.n	8002fe6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d005      	beq.n	8002fbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fb0:	4b58      	ldr	r3, [pc, #352]	; (8003114 <HAL_RCC_ClockConfig+0x1b8>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	4a57      	ldr	r2, [pc, #348]	; (8003114 <HAL_RCC_ClockConfig+0x1b8>)
 8002fb6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0308 	and.w	r3, r3, #8
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d005      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fc8:	4b52      	ldr	r3, [pc, #328]	; (8003114 <HAL_RCC_ClockConfig+0x1b8>)
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	4a51      	ldr	r2, [pc, #324]	; (8003114 <HAL_RCC_ClockConfig+0x1b8>)
 8002fce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002fd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fd4:	4b4f      	ldr	r3, [pc, #316]	; (8003114 <HAL_RCC_ClockConfig+0x1b8>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	494c      	ldr	r1, [pc, #304]	; (8003114 <HAL_RCC_ClockConfig+0x1b8>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d044      	beq.n	800307c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d107      	bne.n	800300a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ffa:	4b46      	ldr	r3, [pc, #280]	; (8003114 <HAL_RCC_ClockConfig+0x1b8>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d119      	bne.n	800303a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e07d      	b.n	8003106 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	2b02      	cmp	r3, #2
 8003010:	d003      	beq.n	800301a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003016:	2b03      	cmp	r3, #3
 8003018:	d107      	bne.n	800302a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800301a:	4b3e      	ldr	r3, [pc, #248]	; (8003114 <HAL_RCC_ClockConfig+0x1b8>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d109      	bne.n	800303a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e06d      	b.n	8003106 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800302a:	4b3a      	ldr	r3, [pc, #232]	; (8003114 <HAL_RCC_ClockConfig+0x1b8>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0302 	and.w	r3, r3, #2
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e065      	b.n	8003106 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800303a:	4b36      	ldr	r3, [pc, #216]	; (8003114 <HAL_RCC_ClockConfig+0x1b8>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f023 0203 	bic.w	r2, r3, #3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	4933      	ldr	r1, [pc, #204]	; (8003114 <HAL_RCC_ClockConfig+0x1b8>)
 8003048:	4313      	orrs	r3, r2
 800304a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800304c:	f7fd ff68 	bl	8000f20 <HAL_GetTick>
 8003050:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003052:	e00a      	b.n	800306a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003054:	f7fd ff64 	bl	8000f20 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003062:	4293      	cmp	r3, r2
 8003064:	d901      	bls.n	800306a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e04d      	b.n	8003106 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800306a:	4b2a      	ldr	r3, [pc, #168]	; (8003114 <HAL_RCC_ClockConfig+0x1b8>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	f003 020c 	and.w	r2, r3, #12
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	429a      	cmp	r2, r3
 800307a:	d1eb      	bne.n	8003054 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800307c:	4b24      	ldr	r3, [pc, #144]	; (8003110 <HAL_RCC_ClockConfig+0x1b4>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 030f 	and.w	r3, r3, #15
 8003084:	683a      	ldr	r2, [r7, #0]
 8003086:	429a      	cmp	r2, r3
 8003088:	d20c      	bcs.n	80030a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800308a:	4b21      	ldr	r3, [pc, #132]	; (8003110 <HAL_RCC_ClockConfig+0x1b4>)
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	b2d2      	uxtb	r2, r2
 8003090:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003092:	4b1f      	ldr	r3, [pc, #124]	; (8003110 <HAL_RCC_ClockConfig+0x1b4>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 030f 	and.w	r3, r3, #15
 800309a:	683a      	ldr	r2, [r7, #0]
 800309c:	429a      	cmp	r2, r3
 800309e:	d001      	beq.n	80030a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e030      	b.n	8003106 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0304 	and.w	r3, r3, #4
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d008      	beq.n	80030c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030b0:	4b18      	ldr	r3, [pc, #96]	; (8003114 <HAL_RCC_ClockConfig+0x1b8>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	4915      	ldr	r1, [pc, #84]	; (8003114 <HAL_RCC_ClockConfig+0x1b8>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0308 	and.w	r3, r3, #8
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d009      	beq.n	80030e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030ce:	4b11      	ldr	r3, [pc, #68]	; (8003114 <HAL_RCC_ClockConfig+0x1b8>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	691b      	ldr	r3, [r3, #16]
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	490d      	ldr	r1, [pc, #52]	; (8003114 <HAL_RCC_ClockConfig+0x1b8>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030e2:	f000 f851 	bl	8003188 <HAL_RCC_GetSysClockFreq>
 80030e6:	4601      	mov	r1, r0
 80030e8:	4b0a      	ldr	r3, [pc, #40]	; (8003114 <HAL_RCC_ClockConfig+0x1b8>)
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	091b      	lsrs	r3, r3, #4
 80030ee:	f003 030f 	and.w	r3, r3, #15
 80030f2:	4a09      	ldr	r2, [pc, #36]	; (8003118 <HAL_RCC_ClockConfig+0x1bc>)
 80030f4:	5cd3      	ldrb	r3, [r2, r3]
 80030f6:	fa21 f303 	lsr.w	r3, r1, r3
 80030fa:	4a08      	ldr	r2, [pc, #32]	; (800311c <HAL_RCC_ClockConfig+0x1c0>)
 80030fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80030fe:	2000      	movs	r0, #0
 8003100:	f7fd feca 	bl	8000e98 <HAL_InitTick>

  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3710      	adds	r7, #16
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	40023c00 	.word	0x40023c00
 8003114:	40023800 	.word	0x40023800
 8003118:	0801d048 	.word	0x0801d048
 800311c:	20000038 	.word	0x20000038

08003120 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003120:	b480      	push	{r7}
 8003122:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003124:	4b03      	ldr	r3, [pc, #12]	; (8003134 <HAL_RCC_GetHCLKFreq+0x14>)
 8003126:	681b      	ldr	r3, [r3, #0]
}
 8003128:	4618      	mov	r0, r3
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	20000038 	.word	0x20000038

08003138 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800313c:	f7ff fff0 	bl	8003120 <HAL_RCC_GetHCLKFreq>
 8003140:	4601      	mov	r1, r0
 8003142:	4b05      	ldr	r3, [pc, #20]	; (8003158 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	0a9b      	lsrs	r3, r3, #10
 8003148:	f003 0307 	and.w	r3, r3, #7
 800314c:	4a03      	ldr	r2, [pc, #12]	; (800315c <HAL_RCC_GetPCLK1Freq+0x24>)
 800314e:	5cd3      	ldrb	r3, [r2, r3]
 8003150:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003154:	4618      	mov	r0, r3
 8003156:	bd80      	pop	{r7, pc}
 8003158:	40023800 	.word	0x40023800
 800315c:	0801d058 	.word	0x0801d058

08003160 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003164:	f7ff ffdc 	bl	8003120 <HAL_RCC_GetHCLKFreq>
 8003168:	4601      	mov	r1, r0
 800316a:	4b05      	ldr	r3, [pc, #20]	; (8003180 <HAL_RCC_GetPCLK2Freq+0x20>)
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	0b5b      	lsrs	r3, r3, #13
 8003170:	f003 0307 	and.w	r3, r3, #7
 8003174:	4a03      	ldr	r2, [pc, #12]	; (8003184 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003176:	5cd3      	ldrb	r3, [r2, r3]
 8003178:	fa21 f303 	lsr.w	r3, r1, r3
}
 800317c:	4618      	mov	r0, r3
 800317e:	bd80      	pop	{r7, pc}
 8003180:	40023800 	.word	0x40023800
 8003184:	0801d058 	.word	0x0801d058

08003188 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800318a:	b087      	sub	sp, #28
 800318c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800318e:	2300      	movs	r3, #0
 8003190:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8003192:	2300      	movs	r3, #0
 8003194:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8003196:	2300      	movs	r3, #0
 8003198:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800319a:	2300      	movs	r3, #0
 800319c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800319e:	2300      	movs	r3, #0
 80031a0:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031a2:	4bc6      	ldr	r3, [pc, #792]	; (80034bc <HAL_RCC_GetSysClockFreq+0x334>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f003 030c 	and.w	r3, r3, #12
 80031aa:	2b0c      	cmp	r3, #12
 80031ac:	f200 817e 	bhi.w	80034ac <HAL_RCC_GetSysClockFreq+0x324>
 80031b0:	a201      	add	r2, pc, #4	; (adr r2, 80031b8 <HAL_RCC_GetSysClockFreq+0x30>)
 80031b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b6:	bf00      	nop
 80031b8:	080031ed 	.word	0x080031ed
 80031bc:	080034ad 	.word	0x080034ad
 80031c0:	080034ad 	.word	0x080034ad
 80031c4:	080034ad 	.word	0x080034ad
 80031c8:	080031f3 	.word	0x080031f3
 80031cc:	080034ad 	.word	0x080034ad
 80031d0:	080034ad 	.word	0x080034ad
 80031d4:	080034ad 	.word	0x080034ad
 80031d8:	080031f9 	.word	0x080031f9
 80031dc:	080034ad 	.word	0x080034ad
 80031e0:	080034ad 	.word	0x080034ad
 80031e4:	080034ad 	.word	0x080034ad
 80031e8:	08003355 	.word	0x08003355
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031ec:	4bb4      	ldr	r3, [pc, #720]	; (80034c0 <HAL_RCC_GetSysClockFreq+0x338>)
 80031ee:	613b      	str	r3, [r7, #16]
       break;
 80031f0:	e15f      	b.n	80034b2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031f2:	4bb4      	ldr	r3, [pc, #720]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x33c>)
 80031f4:	613b      	str	r3, [r7, #16]
      break;
 80031f6:	e15c      	b.n	80034b2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031f8:	4bb0      	ldr	r3, [pc, #704]	; (80034bc <HAL_RCC_GetSysClockFreq+0x334>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003200:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003202:	4bae      	ldr	r3, [pc, #696]	; (80034bc <HAL_RCC_GetSysClockFreq+0x334>)
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d04a      	beq.n	80032a4 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800320e:	4bab      	ldr	r3, [pc, #684]	; (80034bc <HAL_RCC_GetSysClockFreq+0x334>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	099b      	lsrs	r3, r3, #6
 8003214:	f04f 0400 	mov.w	r4, #0
 8003218:	f240 11ff 	movw	r1, #511	; 0x1ff
 800321c:	f04f 0200 	mov.w	r2, #0
 8003220:	ea03 0501 	and.w	r5, r3, r1
 8003224:	ea04 0602 	and.w	r6, r4, r2
 8003228:	4629      	mov	r1, r5
 800322a:	4632      	mov	r2, r6
 800322c:	f04f 0300 	mov.w	r3, #0
 8003230:	f04f 0400 	mov.w	r4, #0
 8003234:	0154      	lsls	r4, r2, #5
 8003236:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800323a:	014b      	lsls	r3, r1, #5
 800323c:	4619      	mov	r1, r3
 800323e:	4622      	mov	r2, r4
 8003240:	1b49      	subs	r1, r1, r5
 8003242:	eb62 0206 	sbc.w	r2, r2, r6
 8003246:	f04f 0300 	mov.w	r3, #0
 800324a:	f04f 0400 	mov.w	r4, #0
 800324e:	0194      	lsls	r4, r2, #6
 8003250:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003254:	018b      	lsls	r3, r1, #6
 8003256:	1a5b      	subs	r3, r3, r1
 8003258:	eb64 0402 	sbc.w	r4, r4, r2
 800325c:	f04f 0100 	mov.w	r1, #0
 8003260:	f04f 0200 	mov.w	r2, #0
 8003264:	00e2      	lsls	r2, r4, #3
 8003266:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800326a:	00d9      	lsls	r1, r3, #3
 800326c:	460b      	mov	r3, r1
 800326e:	4614      	mov	r4, r2
 8003270:	195b      	adds	r3, r3, r5
 8003272:	eb44 0406 	adc.w	r4, r4, r6
 8003276:	f04f 0100 	mov.w	r1, #0
 800327a:	f04f 0200 	mov.w	r2, #0
 800327e:	0262      	lsls	r2, r4, #9
 8003280:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003284:	0259      	lsls	r1, r3, #9
 8003286:	460b      	mov	r3, r1
 8003288:	4614      	mov	r4, r2
 800328a:	4618      	mov	r0, r3
 800328c:	4621      	mov	r1, r4
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f04f 0400 	mov.w	r4, #0
 8003294:	461a      	mov	r2, r3
 8003296:	4623      	mov	r3, r4
 8003298:	f7fd fc5c 	bl	8000b54 <__aeabi_uldivmod>
 800329c:	4603      	mov	r3, r0
 800329e:	460c      	mov	r4, r1
 80032a0:	617b      	str	r3, [r7, #20]
 80032a2:	e049      	b.n	8003338 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032a4:	4b85      	ldr	r3, [pc, #532]	; (80034bc <HAL_RCC_GetSysClockFreq+0x334>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	099b      	lsrs	r3, r3, #6
 80032aa:	f04f 0400 	mov.w	r4, #0
 80032ae:	f240 11ff 	movw	r1, #511	; 0x1ff
 80032b2:	f04f 0200 	mov.w	r2, #0
 80032b6:	ea03 0501 	and.w	r5, r3, r1
 80032ba:	ea04 0602 	and.w	r6, r4, r2
 80032be:	4629      	mov	r1, r5
 80032c0:	4632      	mov	r2, r6
 80032c2:	f04f 0300 	mov.w	r3, #0
 80032c6:	f04f 0400 	mov.w	r4, #0
 80032ca:	0154      	lsls	r4, r2, #5
 80032cc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80032d0:	014b      	lsls	r3, r1, #5
 80032d2:	4619      	mov	r1, r3
 80032d4:	4622      	mov	r2, r4
 80032d6:	1b49      	subs	r1, r1, r5
 80032d8:	eb62 0206 	sbc.w	r2, r2, r6
 80032dc:	f04f 0300 	mov.w	r3, #0
 80032e0:	f04f 0400 	mov.w	r4, #0
 80032e4:	0194      	lsls	r4, r2, #6
 80032e6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80032ea:	018b      	lsls	r3, r1, #6
 80032ec:	1a5b      	subs	r3, r3, r1
 80032ee:	eb64 0402 	sbc.w	r4, r4, r2
 80032f2:	f04f 0100 	mov.w	r1, #0
 80032f6:	f04f 0200 	mov.w	r2, #0
 80032fa:	00e2      	lsls	r2, r4, #3
 80032fc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003300:	00d9      	lsls	r1, r3, #3
 8003302:	460b      	mov	r3, r1
 8003304:	4614      	mov	r4, r2
 8003306:	195b      	adds	r3, r3, r5
 8003308:	eb44 0406 	adc.w	r4, r4, r6
 800330c:	f04f 0100 	mov.w	r1, #0
 8003310:	f04f 0200 	mov.w	r2, #0
 8003314:	02a2      	lsls	r2, r4, #10
 8003316:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800331a:	0299      	lsls	r1, r3, #10
 800331c:	460b      	mov	r3, r1
 800331e:	4614      	mov	r4, r2
 8003320:	4618      	mov	r0, r3
 8003322:	4621      	mov	r1, r4
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f04f 0400 	mov.w	r4, #0
 800332a:	461a      	mov	r2, r3
 800332c:	4623      	mov	r3, r4
 800332e:	f7fd fc11 	bl	8000b54 <__aeabi_uldivmod>
 8003332:	4603      	mov	r3, r0
 8003334:	460c      	mov	r4, r1
 8003336:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003338:	4b60      	ldr	r3, [pc, #384]	; (80034bc <HAL_RCC_GetSysClockFreq+0x334>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	0c1b      	lsrs	r3, r3, #16
 800333e:	f003 0303 	and.w	r3, r3, #3
 8003342:	3301      	adds	r3, #1
 8003344:	005b      	lsls	r3, r3, #1
 8003346:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003350:	613b      	str	r3, [r7, #16]
      break;
 8003352:	e0ae      	b.n	80034b2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003354:	4b59      	ldr	r3, [pc, #356]	; (80034bc <HAL_RCC_GetSysClockFreq+0x334>)
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800335c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800335e:	4b57      	ldr	r3, [pc, #348]	; (80034bc <HAL_RCC_GetSysClockFreq+0x334>)
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d04a      	beq.n	8003400 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800336a:	4b54      	ldr	r3, [pc, #336]	; (80034bc <HAL_RCC_GetSysClockFreq+0x334>)
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	099b      	lsrs	r3, r3, #6
 8003370:	f04f 0400 	mov.w	r4, #0
 8003374:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003378:	f04f 0200 	mov.w	r2, #0
 800337c:	ea03 0501 	and.w	r5, r3, r1
 8003380:	ea04 0602 	and.w	r6, r4, r2
 8003384:	4629      	mov	r1, r5
 8003386:	4632      	mov	r2, r6
 8003388:	f04f 0300 	mov.w	r3, #0
 800338c:	f04f 0400 	mov.w	r4, #0
 8003390:	0154      	lsls	r4, r2, #5
 8003392:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003396:	014b      	lsls	r3, r1, #5
 8003398:	4619      	mov	r1, r3
 800339a:	4622      	mov	r2, r4
 800339c:	1b49      	subs	r1, r1, r5
 800339e:	eb62 0206 	sbc.w	r2, r2, r6
 80033a2:	f04f 0300 	mov.w	r3, #0
 80033a6:	f04f 0400 	mov.w	r4, #0
 80033aa:	0194      	lsls	r4, r2, #6
 80033ac:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80033b0:	018b      	lsls	r3, r1, #6
 80033b2:	1a5b      	subs	r3, r3, r1
 80033b4:	eb64 0402 	sbc.w	r4, r4, r2
 80033b8:	f04f 0100 	mov.w	r1, #0
 80033bc:	f04f 0200 	mov.w	r2, #0
 80033c0:	00e2      	lsls	r2, r4, #3
 80033c2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80033c6:	00d9      	lsls	r1, r3, #3
 80033c8:	460b      	mov	r3, r1
 80033ca:	4614      	mov	r4, r2
 80033cc:	195b      	adds	r3, r3, r5
 80033ce:	eb44 0406 	adc.w	r4, r4, r6
 80033d2:	f04f 0100 	mov.w	r1, #0
 80033d6:	f04f 0200 	mov.w	r2, #0
 80033da:	0262      	lsls	r2, r4, #9
 80033dc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80033e0:	0259      	lsls	r1, r3, #9
 80033e2:	460b      	mov	r3, r1
 80033e4:	4614      	mov	r4, r2
 80033e6:	4618      	mov	r0, r3
 80033e8:	4621      	mov	r1, r4
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f04f 0400 	mov.w	r4, #0
 80033f0:	461a      	mov	r2, r3
 80033f2:	4623      	mov	r3, r4
 80033f4:	f7fd fbae 	bl	8000b54 <__aeabi_uldivmod>
 80033f8:	4603      	mov	r3, r0
 80033fa:	460c      	mov	r4, r1
 80033fc:	617b      	str	r3, [r7, #20]
 80033fe:	e049      	b.n	8003494 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003400:	4b2e      	ldr	r3, [pc, #184]	; (80034bc <HAL_RCC_GetSysClockFreq+0x334>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	099b      	lsrs	r3, r3, #6
 8003406:	f04f 0400 	mov.w	r4, #0
 800340a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800340e:	f04f 0200 	mov.w	r2, #0
 8003412:	ea03 0501 	and.w	r5, r3, r1
 8003416:	ea04 0602 	and.w	r6, r4, r2
 800341a:	4629      	mov	r1, r5
 800341c:	4632      	mov	r2, r6
 800341e:	f04f 0300 	mov.w	r3, #0
 8003422:	f04f 0400 	mov.w	r4, #0
 8003426:	0154      	lsls	r4, r2, #5
 8003428:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800342c:	014b      	lsls	r3, r1, #5
 800342e:	4619      	mov	r1, r3
 8003430:	4622      	mov	r2, r4
 8003432:	1b49      	subs	r1, r1, r5
 8003434:	eb62 0206 	sbc.w	r2, r2, r6
 8003438:	f04f 0300 	mov.w	r3, #0
 800343c:	f04f 0400 	mov.w	r4, #0
 8003440:	0194      	lsls	r4, r2, #6
 8003442:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003446:	018b      	lsls	r3, r1, #6
 8003448:	1a5b      	subs	r3, r3, r1
 800344a:	eb64 0402 	sbc.w	r4, r4, r2
 800344e:	f04f 0100 	mov.w	r1, #0
 8003452:	f04f 0200 	mov.w	r2, #0
 8003456:	00e2      	lsls	r2, r4, #3
 8003458:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800345c:	00d9      	lsls	r1, r3, #3
 800345e:	460b      	mov	r3, r1
 8003460:	4614      	mov	r4, r2
 8003462:	195b      	adds	r3, r3, r5
 8003464:	eb44 0406 	adc.w	r4, r4, r6
 8003468:	f04f 0100 	mov.w	r1, #0
 800346c:	f04f 0200 	mov.w	r2, #0
 8003470:	02a2      	lsls	r2, r4, #10
 8003472:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003476:	0299      	lsls	r1, r3, #10
 8003478:	460b      	mov	r3, r1
 800347a:	4614      	mov	r4, r2
 800347c:	4618      	mov	r0, r3
 800347e:	4621      	mov	r1, r4
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	f04f 0400 	mov.w	r4, #0
 8003486:	461a      	mov	r2, r3
 8003488:	4623      	mov	r3, r4
 800348a:	f7fd fb63 	bl	8000b54 <__aeabi_uldivmod>
 800348e:	4603      	mov	r3, r0
 8003490:	460c      	mov	r4, r1
 8003492:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003494:	4b09      	ldr	r3, [pc, #36]	; (80034bc <HAL_RCC_GetSysClockFreq+0x334>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	0f1b      	lsrs	r3, r3, #28
 800349a:	f003 0307 	and.w	r3, r3, #7
 800349e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a8:	613b      	str	r3, [r7, #16]
      break;
 80034aa:	e002      	b.n	80034b2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034ac:	4b04      	ldr	r3, [pc, #16]	; (80034c0 <HAL_RCC_GetSysClockFreq+0x338>)
 80034ae:	613b      	str	r3, [r7, #16]
      break;
 80034b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034b2:	693b      	ldr	r3, [r7, #16]
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	371c      	adds	r7, #28
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034bc:	40023800 	.word	0x40023800
 80034c0:	00f42400 	.word	0x00f42400
 80034c4:	007a1200 	.word	0x007a1200

080034c8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b086      	sub	sp, #24
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034d0:	2300      	movs	r3, #0
 80034d2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0301 	and.w	r3, r3, #1
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f000 8083 	beq.w	80035e8 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80034e2:	4b95      	ldr	r3, [pc, #596]	; (8003738 <HAL_RCC_OscConfig+0x270>)
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f003 030c 	and.w	r3, r3, #12
 80034ea:	2b04      	cmp	r3, #4
 80034ec:	d019      	beq.n	8003522 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80034ee:	4b92      	ldr	r3, [pc, #584]	; (8003738 <HAL_RCC_OscConfig+0x270>)
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80034f6:	2b08      	cmp	r3, #8
 80034f8:	d106      	bne.n	8003508 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80034fa:	4b8f      	ldr	r3, [pc, #572]	; (8003738 <HAL_RCC_OscConfig+0x270>)
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003502:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003506:	d00c      	beq.n	8003522 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003508:	4b8b      	ldr	r3, [pc, #556]	; (8003738 <HAL_RCC_OscConfig+0x270>)
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003510:	2b0c      	cmp	r3, #12
 8003512:	d112      	bne.n	800353a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003514:	4b88      	ldr	r3, [pc, #544]	; (8003738 <HAL_RCC_OscConfig+0x270>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800351c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003520:	d10b      	bne.n	800353a <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003522:	4b85      	ldr	r3, [pc, #532]	; (8003738 <HAL_RCC_OscConfig+0x270>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d05b      	beq.n	80035e6 <HAL_RCC_OscConfig+0x11e>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d157      	bne.n	80035e6 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e216      	b.n	8003968 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003542:	d106      	bne.n	8003552 <HAL_RCC_OscConfig+0x8a>
 8003544:	4b7c      	ldr	r3, [pc, #496]	; (8003738 <HAL_RCC_OscConfig+0x270>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a7b      	ldr	r2, [pc, #492]	; (8003738 <HAL_RCC_OscConfig+0x270>)
 800354a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800354e:	6013      	str	r3, [r2, #0]
 8003550:	e01d      	b.n	800358e <HAL_RCC_OscConfig+0xc6>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800355a:	d10c      	bne.n	8003576 <HAL_RCC_OscConfig+0xae>
 800355c:	4b76      	ldr	r3, [pc, #472]	; (8003738 <HAL_RCC_OscConfig+0x270>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a75      	ldr	r2, [pc, #468]	; (8003738 <HAL_RCC_OscConfig+0x270>)
 8003562:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003566:	6013      	str	r3, [r2, #0]
 8003568:	4b73      	ldr	r3, [pc, #460]	; (8003738 <HAL_RCC_OscConfig+0x270>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a72      	ldr	r2, [pc, #456]	; (8003738 <HAL_RCC_OscConfig+0x270>)
 800356e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003572:	6013      	str	r3, [r2, #0]
 8003574:	e00b      	b.n	800358e <HAL_RCC_OscConfig+0xc6>
 8003576:	4b70      	ldr	r3, [pc, #448]	; (8003738 <HAL_RCC_OscConfig+0x270>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a6f      	ldr	r2, [pc, #444]	; (8003738 <HAL_RCC_OscConfig+0x270>)
 800357c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003580:	6013      	str	r3, [r2, #0]
 8003582:	4b6d      	ldr	r3, [pc, #436]	; (8003738 <HAL_RCC_OscConfig+0x270>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a6c      	ldr	r2, [pc, #432]	; (8003738 <HAL_RCC_OscConfig+0x270>)
 8003588:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800358c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d013      	beq.n	80035be <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003596:	f7fd fcc3 	bl	8000f20 <HAL_GetTick>
 800359a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800359c:	e008      	b.n	80035b0 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800359e:	f7fd fcbf 	bl	8000f20 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	2b64      	cmp	r3, #100	; 0x64
 80035aa:	d901      	bls.n	80035b0 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e1db      	b.n	8003968 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035b0:	4b61      	ldr	r3, [pc, #388]	; (8003738 <HAL_RCC_OscConfig+0x270>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d0f0      	beq.n	800359e <HAL_RCC_OscConfig+0xd6>
 80035bc:	e014      	b.n	80035e8 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035be:	f7fd fcaf 	bl	8000f20 <HAL_GetTick>
 80035c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035c4:	e008      	b.n	80035d8 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035c6:	f7fd fcab 	bl	8000f20 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b64      	cmp	r3, #100	; 0x64
 80035d2:	d901      	bls.n	80035d8 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e1c7      	b.n	8003968 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035d8:	4b57      	ldr	r3, [pc, #348]	; (8003738 <HAL_RCC_OscConfig+0x270>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d1f0      	bne.n	80035c6 <HAL_RCC_OscConfig+0xfe>
 80035e4:	e000      	b.n	80035e8 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035e6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0302 	and.w	r3, r3, #2
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d06f      	beq.n	80036d4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80035f4:	4b50      	ldr	r3, [pc, #320]	; (8003738 <HAL_RCC_OscConfig+0x270>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f003 030c 	and.w	r3, r3, #12
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d017      	beq.n	8003630 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003600:	4b4d      	ldr	r3, [pc, #308]	; (8003738 <HAL_RCC_OscConfig+0x270>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003608:	2b08      	cmp	r3, #8
 800360a:	d105      	bne.n	8003618 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800360c:	4b4a      	ldr	r3, [pc, #296]	; (8003738 <HAL_RCC_OscConfig+0x270>)
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00b      	beq.n	8003630 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003618:	4b47      	ldr	r3, [pc, #284]	; (8003738 <HAL_RCC_OscConfig+0x270>)
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003620:	2b0c      	cmp	r3, #12
 8003622:	d11c      	bne.n	800365e <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003624:	4b44      	ldr	r3, [pc, #272]	; (8003738 <HAL_RCC_OscConfig+0x270>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d116      	bne.n	800365e <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003630:	4b41      	ldr	r3, [pc, #260]	; (8003738 <HAL_RCC_OscConfig+0x270>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d005      	beq.n	8003648 <HAL_RCC_OscConfig+0x180>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d001      	beq.n	8003648 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e18f      	b.n	8003968 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003648:	4b3b      	ldr	r3, [pc, #236]	; (8003738 <HAL_RCC_OscConfig+0x270>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	00db      	lsls	r3, r3, #3
 8003656:	4938      	ldr	r1, [pc, #224]	; (8003738 <HAL_RCC_OscConfig+0x270>)
 8003658:	4313      	orrs	r3, r2
 800365a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800365c:	e03a      	b.n	80036d4 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d020      	beq.n	80036a8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003666:	4b35      	ldr	r3, [pc, #212]	; (800373c <HAL_RCC_OscConfig+0x274>)
 8003668:	2201      	movs	r2, #1
 800366a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800366c:	f7fd fc58 	bl	8000f20 <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003674:	f7fd fc54 	bl	8000f20 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e170      	b.n	8003968 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003686:	4b2c      	ldr	r3, [pc, #176]	; (8003738 <HAL_RCC_OscConfig+0x270>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0302 	and.w	r3, r3, #2
 800368e:	2b00      	cmp	r3, #0
 8003690:	d0f0      	beq.n	8003674 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003692:	4b29      	ldr	r3, [pc, #164]	; (8003738 <HAL_RCC_OscConfig+0x270>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	691b      	ldr	r3, [r3, #16]
 800369e:	00db      	lsls	r3, r3, #3
 80036a0:	4925      	ldr	r1, [pc, #148]	; (8003738 <HAL_RCC_OscConfig+0x270>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	600b      	str	r3, [r1, #0]
 80036a6:	e015      	b.n	80036d4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036a8:	4b24      	ldr	r3, [pc, #144]	; (800373c <HAL_RCC_OscConfig+0x274>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ae:	f7fd fc37 	bl	8000f20 <HAL_GetTick>
 80036b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036b4:	e008      	b.n	80036c8 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036b6:	f7fd fc33 	bl	8000f20 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e14f      	b.n	8003968 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036c8:	4b1b      	ldr	r3, [pc, #108]	; (8003738 <HAL_RCC_OscConfig+0x270>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1f0      	bne.n	80036b6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f003 0308 	and.w	r3, r3, #8
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d037      	beq.n	8003750 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	695b      	ldr	r3, [r3, #20]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d016      	beq.n	8003716 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036e8:	4b15      	ldr	r3, [pc, #84]	; (8003740 <HAL_RCC_OscConfig+0x278>)
 80036ea:	2201      	movs	r2, #1
 80036ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ee:	f7fd fc17 	bl	8000f20 <HAL_GetTick>
 80036f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036f4:	e008      	b.n	8003708 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036f6:	f7fd fc13 	bl	8000f20 <HAL_GetTick>
 80036fa:	4602      	mov	r2, r0
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b02      	cmp	r3, #2
 8003702:	d901      	bls.n	8003708 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e12f      	b.n	8003968 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003708:	4b0b      	ldr	r3, [pc, #44]	; (8003738 <HAL_RCC_OscConfig+0x270>)
 800370a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800370c:	f003 0302 	and.w	r3, r3, #2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d0f0      	beq.n	80036f6 <HAL_RCC_OscConfig+0x22e>
 8003714:	e01c      	b.n	8003750 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003716:	4b0a      	ldr	r3, [pc, #40]	; (8003740 <HAL_RCC_OscConfig+0x278>)
 8003718:	2200      	movs	r2, #0
 800371a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800371c:	f7fd fc00 	bl	8000f20 <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003722:	e00f      	b.n	8003744 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003724:	f7fd fbfc 	bl	8000f20 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d908      	bls.n	8003744 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e118      	b.n	8003968 <HAL_RCC_OscConfig+0x4a0>
 8003736:	bf00      	nop
 8003738:	40023800 	.word	0x40023800
 800373c:	42470000 	.word	0x42470000
 8003740:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003744:	4b8a      	ldr	r3, [pc, #552]	; (8003970 <HAL_RCC_OscConfig+0x4a8>)
 8003746:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003748:	f003 0302 	and.w	r3, r3, #2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1e9      	bne.n	8003724 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0304 	and.w	r3, r3, #4
 8003758:	2b00      	cmp	r3, #0
 800375a:	f000 8097 	beq.w	800388c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800375e:	2300      	movs	r3, #0
 8003760:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003762:	4b83      	ldr	r3, [pc, #524]	; (8003970 <HAL_RCC_OscConfig+0x4a8>)
 8003764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d10f      	bne.n	800378e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800376e:	2300      	movs	r3, #0
 8003770:	60fb      	str	r3, [r7, #12]
 8003772:	4b7f      	ldr	r3, [pc, #508]	; (8003970 <HAL_RCC_OscConfig+0x4a8>)
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	4a7e      	ldr	r2, [pc, #504]	; (8003970 <HAL_RCC_OscConfig+0x4a8>)
 8003778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800377c:	6413      	str	r3, [r2, #64]	; 0x40
 800377e:	4b7c      	ldr	r3, [pc, #496]	; (8003970 <HAL_RCC_OscConfig+0x4a8>)
 8003780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003786:	60fb      	str	r3, [r7, #12]
 8003788:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800378a:	2301      	movs	r3, #1
 800378c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800378e:	4b79      	ldr	r3, [pc, #484]	; (8003974 <HAL_RCC_OscConfig+0x4ac>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003796:	2b00      	cmp	r3, #0
 8003798:	d118      	bne.n	80037cc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800379a:	4b76      	ldr	r3, [pc, #472]	; (8003974 <HAL_RCC_OscConfig+0x4ac>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a75      	ldr	r2, [pc, #468]	; (8003974 <HAL_RCC_OscConfig+0x4ac>)
 80037a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037a6:	f7fd fbbb 	bl	8000f20 <HAL_GetTick>
 80037aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ac:	e008      	b.n	80037c0 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ae:	f7fd fbb7 	bl	8000f20 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b02      	cmp	r3, #2
 80037ba:	d901      	bls.n	80037c0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e0d3      	b.n	8003968 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c0:	4b6c      	ldr	r3, [pc, #432]	; (8003974 <HAL_RCC_OscConfig+0x4ac>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d0f0      	beq.n	80037ae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d106      	bne.n	80037e2 <HAL_RCC_OscConfig+0x31a>
 80037d4:	4b66      	ldr	r3, [pc, #408]	; (8003970 <HAL_RCC_OscConfig+0x4a8>)
 80037d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d8:	4a65      	ldr	r2, [pc, #404]	; (8003970 <HAL_RCC_OscConfig+0x4a8>)
 80037da:	f043 0301 	orr.w	r3, r3, #1
 80037de:	6713      	str	r3, [r2, #112]	; 0x70
 80037e0:	e01c      	b.n	800381c <HAL_RCC_OscConfig+0x354>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	2b05      	cmp	r3, #5
 80037e8:	d10c      	bne.n	8003804 <HAL_RCC_OscConfig+0x33c>
 80037ea:	4b61      	ldr	r3, [pc, #388]	; (8003970 <HAL_RCC_OscConfig+0x4a8>)
 80037ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ee:	4a60      	ldr	r2, [pc, #384]	; (8003970 <HAL_RCC_OscConfig+0x4a8>)
 80037f0:	f043 0304 	orr.w	r3, r3, #4
 80037f4:	6713      	str	r3, [r2, #112]	; 0x70
 80037f6:	4b5e      	ldr	r3, [pc, #376]	; (8003970 <HAL_RCC_OscConfig+0x4a8>)
 80037f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037fa:	4a5d      	ldr	r2, [pc, #372]	; (8003970 <HAL_RCC_OscConfig+0x4a8>)
 80037fc:	f043 0301 	orr.w	r3, r3, #1
 8003800:	6713      	str	r3, [r2, #112]	; 0x70
 8003802:	e00b      	b.n	800381c <HAL_RCC_OscConfig+0x354>
 8003804:	4b5a      	ldr	r3, [pc, #360]	; (8003970 <HAL_RCC_OscConfig+0x4a8>)
 8003806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003808:	4a59      	ldr	r2, [pc, #356]	; (8003970 <HAL_RCC_OscConfig+0x4a8>)
 800380a:	f023 0301 	bic.w	r3, r3, #1
 800380e:	6713      	str	r3, [r2, #112]	; 0x70
 8003810:	4b57      	ldr	r3, [pc, #348]	; (8003970 <HAL_RCC_OscConfig+0x4a8>)
 8003812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003814:	4a56      	ldr	r2, [pc, #344]	; (8003970 <HAL_RCC_OscConfig+0x4a8>)
 8003816:	f023 0304 	bic.w	r3, r3, #4
 800381a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d015      	beq.n	8003850 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003824:	f7fd fb7c 	bl	8000f20 <HAL_GetTick>
 8003828:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800382a:	e00a      	b.n	8003842 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800382c:	f7fd fb78 	bl	8000f20 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	f241 3288 	movw	r2, #5000	; 0x1388
 800383a:	4293      	cmp	r3, r2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e092      	b.n	8003968 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003842:	4b4b      	ldr	r3, [pc, #300]	; (8003970 <HAL_RCC_OscConfig+0x4a8>)
 8003844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003846:	f003 0302 	and.w	r3, r3, #2
 800384a:	2b00      	cmp	r3, #0
 800384c:	d0ee      	beq.n	800382c <HAL_RCC_OscConfig+0x364>
 800384e:	e014      	b.n	800387a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003850:	f7fd fb66 	bl	8000f20 <HAL_GetTick>
 8003854:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003856:	e00a      	b.n	800386e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003858:	f7fd fb62 	bl	8000f20 <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	f241 3288 	movw	r2, #5000	; 0x1388
 8003866:	4293      	cmp	r3, r2
 8003868:	d901      	bls.n	800386e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e07c      	b.n	8003968 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800386e:	4b40      	ldr	r3, [pc, #256]	; (8003970 <HAL_RCC_OscConfig+0x4a8>)
 8003870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003872:	f003 0302 	and.w	r3, r3, #2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1ee      	bne.n	8003858 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800387a:	7dfb      	ldrb	r3, [r7, #23]
 800387c:	2b01      	cmp	r3, #1
 800387e:	d105      	bne.n	800388c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003880:	4b3b      	ldr	r3, [pc, #236]	; (8003970 <HAL_RCC_OscConfig+0x4a8>)
 8003882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003884:	4a3a      	ldr	r2, [pc, #232]	; (8003970 <HAL_RCC_OscConfig+0x4a8>)
 8003886:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800388a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d068      	beq.n	8003966 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003894:	4b36      	ldr	r3, [pc, #216]	; (8003970 <HAL_RCC_OscConfig+0x4a8>)
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f003 030c 	and.w	r3, r3, #12
 800389c:	2b08      	cmp	r3, #8
 800389e:	d060      	beq.n	8003962 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d145      	bne.n	8003934 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038a8:	4b33      	ldr	r3, [pc, #204]	; (8003978 <HAL_RCC_OscConfig+0x4b0>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ae:	f7fd fb37 	bl	8000f20 <HAL_GetTick>
 80038b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038b4:	e008      	b.n	80038c8 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038b6:	f7fd fb33 	bl	8000f20 <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d901      	bls.n	80038c8 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e04f      	b.n	8003968 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038c8:	4b29      	ldr	r3, [pc, #164]	; (8003970 <HAL_RCC_OscConfig+0x4a8>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d1f0      	bne.n	80038b6 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	69da      	ldr	r2, [r3, #28]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a1b      	ldr	r3, [r3, #32]
 80038dc:	431a      	orrs	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e2:	019b      	lsls	r3, r3, #6
 80038e4:	431a      	orrs	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ea:	085b      	lsrs	r3, r3, #1
 80038ec:	3b01      	subs	r3, #1
 80038ee:	041b      	lsls	r3, r3, #16
 80038f0:	431a      	orrs	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f6:	061b      	lsls	r3, r3, #24
 80038f8:	431a      	orrs	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fe:	071b      	lsls	r3, r3, #28
 8003900:	491b      	ldr	r1, [pc, #108]	; (8003970 <HAL_RCC_OscConfig+0x4a8>)
 8003902:	4313      	orrs	r3, r2
 8003904:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003906:	4b1c      	ldr	r3, [pc, #112]	; (8003978 <HAL_RCC_OscConfig+0x4b0>)
 8003908:	2201      	movs	r2, #1
 800390a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800390c:	f7fd fb08 	bl	8000f20 <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003912:	e008      	b.n	8003926 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003914:	f7fd fb04 	bl	8000f20 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e020      	b.n	8003968 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003926:	4b12      	ldr	r3, [pc, #72]	; (8003970 <HAL_RCC_OscConfig+0x4a8>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800392e:	2b00      	cmp	r3, #0
 8003930:	d0f0      	beq.n	8003914 <HAL_RCC_OscConfig+0x44c>
 8003932:	e018      	b.n	8003966 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003934:	4b10      	ldr	r3, [pc, #64]	; (8003978 <HAL_RCC_OscConfig+0x4b0>)
 8003936:	2200      	movs	r2, #0
 8003938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800393a:	f7fd faf1 	bl	8000f20 <HAL_GetTick>
 800393e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003940:	e008      	b.n	8003954 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003942:	f7fd faed 	bl	8000f20 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d901      	bls.n	8003954 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e009      	b.n	8003968 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003954:	4b06      	ldr	r3, [pc, #24]	; (8003970 <HAL_RCC_OscConfig+0x4a8>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1f0      	bne.n	8003942 <HAL_RCC_OscConfig+0x47a>
 8003960:	e001      	b.n	8003966 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e000      	b.n	8003968 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003966:	2300      	movs	r3, #0
}
 8003968:	4618      	mov	r0, r3
 800396a:	3718      	adds	r7, #24
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	40023800 	.word	0x40023800
 8003974:	40007000 	.word	0x40007000
 8003978:	42470060 	.word	0x42470060

0800397c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d101      	bne.n	800398e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e056      	b.n	8003a3c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800399a:	b2db      	uxtb	r3, r3
 800399c:	2b00      	cmp	r3, #0
 800399e:	d106      	bne.n	80039ae <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f004 fafb 	bl	8007fa4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2202      	movs	r2, #2
 80039b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039c4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685a      	ldr	r2, [r3, #4]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	431a      	orrs	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	431a      	orrs	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	431a      	orrs	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	695b      	ldr	r3, [r3, #20]
 80039e0:	431a      	orrs	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039ea:	431a      	orrs	r2, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	69db      	ldr	r3, [r3, #28]
 80039f0:	431a      	orrs	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	ea42 0103 	orr.w	r1, r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	430a      	orrs	r2, r1
 8003a04:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	0c1b      	lsrs	r3, r3, #16
 8003a0c:	f003 0104 	and.w	r1, r3, #4
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	430a      	orrs	r2, r1
 8003a1a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	69da      	ldr	r2, [r3, #28]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a2a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3708      	adds	r7, #8
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b087      	sub	sp, #28
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
 8003a50:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003a52:	2300      	movs	r3, #0
 8003a54:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d101      	bne.n	8003a64 <HAL_SPI_TransmitReceive_IT+0x20>
 8003a60:	2302      	movs	r3, #2
 8003a62:	e075      	b.n	8003b50 <HAL_SPI_TransmitReceive_IT+0x10c>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a72:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a7a:	7dbb      	ldrb	r3, [r7, #22]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d00d      	beq.n	8003a9c <HAL_SPI_TransmitReceive_IT+0x58>
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a86:	d106      	bne.n	8003a96 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d102      	bne.n	8003a96 <HAL_SPI_TransmitReceive_IT+0x52>
 8003a90:	7dbb      	ldrb	r3, [r7, #22]
 8003a92:	2b04      	cmp	r3, #4
 8003a94:	d002      	beq.n	8003a9c <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8003a96:	2302      	movs	r3, #2
 8003a98:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003a9a:	e054      	b.n	8003b46 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d005      	beq.n	8003aae <HAL_SPI_TransmitReceive_IT+0x6a>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d002      	beq.n	8003aae <HAL_SPI_TransmitReceive_IT+0x6a>
 8003aa8:	887b      	ldrh	r3, [r7, #2]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d102      	bne.n	8003ab4 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003ab2:	e048      	b.n	8003b46 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b04      	cmp	r3, #4
 8003abe:	d003      	beq.n	8003ac8 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2205      	movs	r2, #5
 8003ac4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	68ba      	ldr	r2, [r7, #8]
 8003ad2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	887a      	ldrh	r2, [r7, #2]
 8003ad8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	887a      	ldrh	r2, [r7, #2]
 8003ade:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	887a      	ldrh	r2, [r7, #2]
 8003aea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	887a      	ldrh	r2, [r7, #2]
 8003af0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d006      	beq.n	8003b08 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	4a17      	ldr	r2, [pc, #92]	; (8003b5c <HAL_SPI_TransmitReceive_IT+0x118>)
 8003afe:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4a17      	ldr	r2, [pc, #92]	; (8003b60 <HAL_SPI_TransmitReceive_IT+0x11c>)
 8003b04:	645a      	str	r2, [r3, #68]	; 0x44
 8003b06:	e005      	b.n	8003b14 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	4a16      	ldr	r2, [pc, #88]	; (8003b64 <HAL_SPI_TransmitReceive_IT+0x120>)
 8003b0c:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	4a15      	ldr	r2, [pc, #84]	; (8003b68 <HAL_SPI_TransmitReceive_IT+0x124>)
 8003b12:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8003b22:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b2e:	2b40      	cmp	r3, #64	; 0x40
 8003b30:	d008      	beq.n	8003b44 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b40:	601a      	str	r2, [r3, #0]
 8003b42:	e000      	b.n	8003b46 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8003b44:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003b4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	371c      	adds	r7, #28
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr
 8003b5c:	08003e95 	.word	0x08003e95
 8003b60:	08003ef5 	.word	0x08003ef5
 8003b64:	08003dd1 	.word	0x08003dd1
 8003b68:	08003e35 	.word	0x08003e35

08003b6c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b088      	sub	sp, #32
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	099b      	lsrs	r3, r3, #6
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d10f      	bne.n	8003bb0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00a      	beq.n	8003bb0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	099b      	lsrs	r3, r3, #6
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d004      	beq.n	8003bb0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	4798      	blx	r3
    return;
 8003bae:	e0d8      	b.n	8003d62 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	085b      	lsrs	r3, r3, #1
 8003bb4:	f003 0301 	and.w	r3, r3, #1
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00a      	beq.n	8003bd2 <HAL_SPI_IRQHandler+0x66>
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	09db      	lsrs	r3, r3, #7
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d004      	beq.n	8003bd2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	4798      	blx	r3
    return;
 8003bd0:	e0c7      	b.n	8003d62 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	095b      	lsrs	r3, r3, #5
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10c      	bne.n	8003bf8 <HAL_SPI_IRQHandler+0x8c>
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	099b      	lsrs	r3, r3, #6
 8003be2:	f003 0301 	and.w	r3, r3, #1
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d106      	bne.n	8003bf8 <HAL_SPI_IRQHandler+0x8c>
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	0a1b      	lsrs	r3, r3, #8
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	f000 80b5 	beq.w	8003d62 <HAL_SPI_IRQHandler+0x1f6>
 8003bf8:	69fb      	ldr	r3, [r7, #28]
 8003bfa:	095b      	lsrs	r3, r3, #5
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f000 80ae 	beq.w	8003d62 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	099b      	lsrs	r3, r3, #6
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d023      	beq.n	8003c5a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b03      	cmp	r3, #3
 8003c1c:	d011      	beq.n	8003c42 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c22:	f043 0204 	orr.w	r2, r3, #4
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	617b      	str	r3, [r7, #20]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	617b      	str	r3, [r7, #20]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	617b      	str	r3, [r7, #20]
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	e00b      	b.n	8003c5a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c42:	2300      	movs	r3, #0
 8003c44:	613b      	str	r3, [r7, #16]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	613b      	str	r3, [r7, #16]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	613b      	str	r3, [r7, #16]
 8003c56:	693b      	ldr	r3, [r7, #16]
        return;
 8003c58:	e083      	b.n	8003d62 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	095b      	lsrs	r3, r3, #5
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d014      	beq.n	8003c90 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c6a:	f043 0201 	orr.w	r2, r3, #1
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003c72:	2300      	movs	r3, #0
 8003c74:	60fb      	str	r3, [r7, #12]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	60fb      	str	r3, [r7, #12]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c8c:	601a      	str	r2, [r3, #0]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	0a1b      	lsrs	r3, r3, #8
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00c      	beq.n	8003cb6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca0:	f043 0208 	orr.w	r2, r3, #8
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003ca8:	2300      	movs	r3, #0
 8003caa:	60bb      	str	r3, [r7, #8]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	60bb      	str	r3, [r7, #8]
 8003cb4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d050      	beq.n	8003d60 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	685a      	ldr	r2, [r3, #4]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ccc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d104      	bne.n	8003cea <HAL_SPI_IRQHandler+0x17e>
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d034      	beq.n	8003d54 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	685a      	ldr	r2, [r3, #4]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f022 0203 	bic.w	r2, r2, #3
 8003cf8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d011      	beq.n	8003d26 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d06:	4a18      	ldr	r2, [pc, #96]	; (8003d68 <HAL_SPI_IRQHandler+0x1fc>)
 8003d08:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7fe fcbc 	bl	800268c <HAL_DMA_Abort_IT>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d005      	beq.n	8003d26 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d016      	beq.n	8003d5c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d32:	4a0d      	ldr	r2, [pc, #52]	; (8003d68 <HAL_SPI_IRQHandler+0x1fc>)
 8003d34:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7fe fca6 	bl	800268c <HAL_DMA_Abort_IT>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00a      	beq.n	8003d5c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d4a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003d52:	e003      	b.n	8003d5c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 f81d 	bl	8003d94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003d5a:	e000      	b.n	8003d5e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003d5c:	bf00      	nop
    return;
 8003d5e:	bf00      	nop
 8003d60:	bf00      	nop
  }
}
 8003d62:	3720      	adds	r7, #32
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	08003da9 	.word	0x08003da9

08003d6c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003d9c:	bf00      	nop
 8003d9e:	370c      	adds	r7, #12
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f7ff ffe6 	bl	8003d94 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003dc8:	bf00      	nop
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f103 020c 	add.w	r2, r3, #12
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de4:	7812      	ldrb	r2, [r2, #0]
 8003de6:	b2d2      	uxtb	r2, r2
 8003de8:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dee:	1c5a      	adds	r2, r3, #1
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	3b01      	subs	r3, #1
 8003dfc:	b29a      	uxth	r2, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d10f      	bne.n	8003e2c <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	685a      	ldr	r2, [r3, #4]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e1a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d102      	bne.n	8003e2c <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 f940 	bl	80040ac <SPI_CloseRxTx_ISR>
    }
  }
}
 8003e2c:	bf00      	nop
 8003e2e:	3708      	adds	r7, #8
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	330c      	adds	r3, #12
 8003e46:	7812      	ldrb	r2, [r2, #0]
 8003e48:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4e:	1c5a      	adds	r2, r3, #1
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d10f      	bne.n	8003e8c <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	685a      	ldr	r2, [r3, #4]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003e7a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d102      	bne.n	8003e8c <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 f910 	bl	80040ac <SPI_CloseRxTx_ISR>
    }
  }
}
 8003e8c:	bf00      	nop
 8003e8e:	3708      	adds	r7, #8
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68da      	ldr	r2, [r3, #12]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea6:	b292      	uxth	r2, r2
 8003ea8:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eae:	1c9a      	adds	r2, r3, #2
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eb8:	b29b      	uxth	r3, r3
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d10f      	bne.n	8003eec <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	685a      	ldr	r2, [r3, #4]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eda:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d102      	bne.n	8003eec <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f000 f8e0 	bl	80040ac <SPI_CloseRxTx_ISR>
    }
  }
}
 8003eec:	bf00      	nop
 8003eee:	3708      	adds	r7, #8
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f00:	881a      	ldrh	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0c:	1c9a      	adds	r2, r3, #2
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	b29a      	uxth	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10f      	bne.n	8003f4a <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	685a      	ldr	r2, [r3, #4]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f38:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d102      	bne.n	8003f4a <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 f8b1 	bl	80040ac <SPI_CloseRxTx_ISR>
    }
  }
}
 8003f4a:	bf00      	nop
 8003f4c:	3708      	adds	r7, #8
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b084      	sub	sp, #16
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	60f8      	str	r0, [r7, #12]
 8003f5a:	60b9      	str	r1, [r7, #8]
 8003f5c:	603b      	str	r3, [r7, #0]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f62:	e04c      	b.n	8003ffe <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f6a:	d048      	beq.n	8003ffe <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003f6c:	f7fc ffd8 	bl	8000f20 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	683a      	ldr	r2, [r7, #0]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d902      	bls.n	8003f82 <SPI_WaitFlagStateUntilTimeout+0x30>
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d13d      	bne.n	8003ffe <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f9a:	d111      	bne.n	8003fc0 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fa4:	d004      	beq.n	8003fb0 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fae:	d107      	bne.n	8003fc0 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fbe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fc8:	d10f      	bne.n	8003fea <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fd8:	601a      	str	r2, [r3, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fe8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e00f      	b.n	800401e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	689a      	ldr	r2, [r3, #8]
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	4013      	ands	r3, r2
 8004008:	68ba      	ldr	r2, [r7, #8]
 800400a:	429a      	cmp	r2, r3
 800400c:	bf0c      	ite	eq
 800400e:	2301      	moveq	r3, #1
 8004010:	2300      	movne	r3, #0
 8004012:	b2db      	uxtb	r3, r3
 8004014:	461a      	mov	r2, r3
 8004016:	79fb      	ldrb	r3, [r7, #7]
 8004018:	429a      	cmp	r2, r3
 800401a:	d1a3      	bne.n	8003f64 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3710      	adds	r7, #16
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
	...

08004028 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b088      	sub	sp, #32
 800402c:	af02      	add	r7, sp, #8
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004034:	4b1b      	ldr	r3, [pc, #108]	; (80040a4 <SPI_EndRxTxTransaction+0x7c>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a1b      	ldr	r2, [pc, #108]	; (80040a8 <SPI_EndRxTxTransaction+0x80>)
 800403a:	fba2 2303 	umull	r2, r3, r2, r3
 800403e:	0d5b      	lsrs	r3, r3, #21
 8004040:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004044:	fb02 f303 	mul.w	r3, r2, r3
 8004048:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004052:	d112      	bne.n	800407a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	9300      	str	r3, [sp, #0]
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	2200      	movs	r2, #0
 800405c:	2180      	movs	r1, #128	; 0x80
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	f7ff ff77 	bl	8003f52 <SPI_WaitFlagStateUntilTimeout>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d016      	beq.n	8004098 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800406e:	f043 0220 	orr.w	r2, r3, #32
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e00f      	b.n	800409a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00a      	beq.n	8004096 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	3b01      	subs	r3, #1
 8004084:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004090:	2b80      	cmp	r3, #128	; 0x80
 8004092:	d0f2      	beq.n	800407a <SPI_EndRxTxTransaction+0x52>
 8004094:	e000      	b.n	8004098 <SPI_EndRxTxTransaction+0x70>
        break;
 8004096:	bf00      	nop
  }

  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3718      	adds	r7, #24
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	20000038 	.word	0x20000038
 80040a8:	165e9f81 	.word	0x165e9f81

080040ac <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b086      	sub	sp, #24
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80040b4:	4b35      	ldr	r3, [pc, #212]	; (800418c <SPI_CloseRxTx_ISR+0xe0>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a35      	ldr	r2, [pc, #212]	; (8004190 <SPI_CloseRxTx_ISR+0xe4>)
 80040ba:	fba2 2303 	umull	r2, r3, r2, r3
 80040be:	0a5b      	lsrs	r3, r3, #9
 80040c0:	2264      	movs	r2, #100	; 0x64
 80040c2:	fb02 f303 	mul.w	r3, r2, r3
 80040c6:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80040c8:	f7fc ff2a 	bl	8000f20 <HAL_GetTick>
 80040cc:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	685a      	ldr	r2, [r3, #4]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f022 0220 	bic.w	r2, r2, #32
 80040dc:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d106      	bne.n	80040f2 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e8:	f043 0220 	orr.w	r2, r3, #32
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80040f0:	e009      	b.n	8004106 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	3b01      	subs	r3, #1
 80040f6:	613b      	str	r3, [r7, #16]
  }
  while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f003 0302 	and.w	r3, r3, #2
 8004102:	2b00      	cmp	r3, #0
 8004104:	d0eb      	beq.n	80040de <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	2164      	movs	r1, #100	; 0x64
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f7ff ff8c 	bl	8004028 <SPI_EndRxTxTransaction>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d005      	beq.n	8004122 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800411a:	f043 0220 	orr.w	r2, r3, #32
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10a      	bne.n	8004140 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800412a:	2300      	movs	r3, #0
 800412c:	60fb      	str	r3, [r7, #12]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	60fb      	str	r3, [r7, #12]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	60fb      	str	r3, [r7, #12]
 800413e:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004144:	2b00      	cmp	r3, #0
 8004146:	d115      	bne.n	8004174 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800414e:	b2db      	uxtb	r3, r3
 8004150:	2b04      	cmp	r3, #4
 8004152:	d107      	bne.n	8004164 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f7ff fe05 	bl	8003d6c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8004162:	e00e      	b.n	8004182 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f7ff fe07 	bl	8003d80 <HAL_SPI_TxRxCpltCallback>
}
 8004172:	e006      	b.n	8004182 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f7ff fe09 	bl	8003d94 <HAL_SPI_ErrorCallback>
}
 8004182:	bf00      	nop
 8004184:	3718      	adds	r7, #24
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	20000038 	.word	0x20000038
 8004190:	057619f1 	.word	0x057619f1

08004194 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d101      	bne.n	80041a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e01d      	b.n	80041e2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d106      	bne.n	80041c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f004 fb74 	bl	80088a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2202      	movs	r2, #2
 80041c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	3304      	adds	r3, #4
 80041d0:	4619      	mov	r1, r3
 80041d2:	4610      	mov	r0, r2
 80041d4:	f000 fc0a 	bl	80049ec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3708      	adds	r7, #8
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}

080041ea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b082      	sub	sp, #8
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d101      	bne.n	80041fc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e01d      	b.n	8004238 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004202:	b2db      	uxtb	r3, r3
 8004204:	2b00      	cmp	r3, #0
 8004206:	d106      	bne.n	8004216 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f000 f815 	bl	8004240 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2202      	movs	r2, #2
 800421a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	3304      	adds	r3, #4
 8004226:	4619      	mov	r1, r3
 8004228:	4610      	mov	r0, r2
 800422a:	f000 fbdf 	bl	80049ec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2201      	movs	r2, #1
 8004232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	3708      	adds	r7, #8
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004248:	bf00      	nop
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	2b0c      	cmp	r3, #12
 8004262:	d841      	bhi.n	80042e8 <HAL_TIM_PWM_Start_IT+0x94>
 8004264:	a201      	add	r2, pc, #4	; (adr r2, 800426c <HAL_TIM_PWM_Start_IT+0x18>)
 8004266:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800426a:	bf00      	nop
 800426c:	080042a1 	.word	0x080042a1
 8004270:	080042e9 	.word	0x080042e9
 8004274:	080042e9 	.word	0x080042e9
 8004278:	080042e9 	.word	0x080042e9
 800427c:	080042b3 	.word	0x080042b3
 8004280:	080042e9 	.word	0x080042e9
 8004284:	080042e9 	.word	0x080042e9
 8004288:	080042e9 	.word	0x080042e9
 800428c:	080042c5 	.word	0x080042c5
 8004290:	080042e9 	.word	0x080042e9
 8004294:	080042e9 	.word	0x080042e9
 8004298:	080042e9 	.word	0x080042e9
 800429c:	080042d7 	.word	0x080042d7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68da      	ldr	r2, [r3, #12]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f042 0202 	orr.w	r2, r2, #2
 80042ae:	60da      	str	r2, [r3, #12]
      break;
 80042b0:	e01b      	b.n	80042ea <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68da      	ldr	r2, [r3, #12]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f042 0204 	orr.w	r2, r2, #4
 80042c0:	60da      	str	r2, [r3, #12]
      break;
 80042c2:	e012      	b.n	80042ea <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68da      	ldr	r2, [r3, #12]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f042 0208 	orr.w	r2, r2, #8
 80042d2:	60da      	str	r2, [r3, #12]
      break;
 80042d4:	e009      	b.n	80042ea <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68da      	ldr	r2, [r3, #12]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f042 0210 	orr.w	r2, r2, #16
 80042e4:	60da      	str	r2, [r3, #12]
      break;
 80042e6:	e000      	b.n	80042ea <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 80042e8:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2201      	movs	r2, #1
 80042f0:	6839      	ldr	r1, [r7, #0]
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 fe64 	bl	8004fc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a15      	ldr	r2, [pc, #84]	; (8004354 <HAL_TIM_PWM_Start_IT+0x100>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d004      	beq.n	800430c <HAL_TIM_PWM_Start_IT+0xb8>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a14      	ldr	r2, [pc, #80]	; (8004358 <HAL_TIM_PWM_Start_IT+0x104>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d101      	bne.n	8004310 <HAL_TIM_PWM_Start_IT+0xbc>
 800430c:	2301      	movs	r3, #1
 800430e:	e000      	b.n	8004312 <HAL_TIM_PWM_Start_IT+0xbe>
 8004310:	2300      	movs	r3, #0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d007      	beq.n	8004326 <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004324:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f003 0307 	and.w	r3, r3, #7
 8004330:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2b06      	cmp	r3, #6
 8004336:	d007      	beq.n	8004348 <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f042 0201 	orr.w	r2, r2, #1
 8004346:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	40010000 	.word	0x40010000
 8004358:	40010400 	.word	0x40010400

0800435c <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	2b0c      	cmp	r3, #12
 800436a:	d841      	bhi.n	80043f0 <HAL_TIM_PWM_Stop_IT+0x94>
 800436c:	a201      	add	r2, pc, #4	; (adr r2, 8004374 <HAL_TIM_PWM_Stop_IT+0x18>)
 800436e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004372:	bf00      	nop
 8004374:	080043a9 	.word	0x080043a9
 8004378:	080043f1 	.word	0x080043f1
 800437c:	080043f1 	.word	0x080043f1
 8004380:	080043f1 	.word	0x080043f1
 8004384:	080043bb 	.word	0x080043bb
 8004388:	080043f1 	.word	0x080043f1
 800438c:	080043f1 	.word	0x080043f1
 8004390:	080043f1 	.word	0x080043f1
 8004394:	080043cd 	.word	0x080043cd
 8004398:	080043f1 	.word	0x080043f1
 800439c:	080043f1 	.word	0x080043f1
 80043a0:	080043f1 	.word	0x080043f1
 80043a4:	080043df 	.word	0x080043df
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68da      	ldr	r2, [r3, #12]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f022 0202 	bic.w	r2, r2, #2
 80043b6:	60da      	str	r2, [r3, #12]
      break;
 80043b8:	e01b      	b.n	80043f2 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68da      	ldr	r2, [r3, #12]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f022 0204 	bic.w	r2, r2, #4
 80043c8:	60da      	str	r2, [r3, #12]
      break;
 80043ca:	e012      	b.n	80043f2 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68da      	ldr	r2, [r3, #12]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f022 0208 	bic.w	r2, r2, #8
 80043da:	60da      	str	r2, [r3, #12]
      break;
 80043dc:	e009      	b.n	80043f2 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	68da      	ldr	r2, [r3, #12]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f022 0210 	bic.w	r2, r2, #16
 80043ec:	60da      	str	r2, [r3, #12]
      break;
 80043ee:	e000      	b.n	80043f2 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 80043f0:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2200      	movs	r2, #0
 80043f8:	6839      	ldr	r1, [r7, #0]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f000 fde0 	bl	8004fc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a20      	ldr	r2, [pc, #128]	; (8004488 <HAL_TIM_PWM_Stop_IT+0x12c>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d004      	beq.n	8004414 <HAL_TIM_PWM_Stop_IT+0xb8>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a1f      	ldr	r2, [pc, #124]	; (800448c <HAL_TIM_PWM_Stop_IT+0x130>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d101      	bne.n	8004418 <HAL_TIM_PWM_Stop_IT+0xbc>
 8004414:	2301      	movs	r3, #1
 8004416:	e000      	b.n	800441a <HAL_TIM_PWM_Stop_IT+0xbe>
 8004418:	2300      	movs	r3, #0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d017      	beq.n	800444e <HAL_TIM_PWM_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	6a1a      	ldr	r2, [r3, #32]
 8004424:	f241 1311 	movw	r3, #4369	; 0x1111
 8004428:	4013      	ands	r3, r2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d10f      	bne.n	800444e <HAL_TIM_PWM_Stop_IT+0xf2>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	6a1a      	ldr	r2, [r3, #32]
 8004434:	f240 4344 	movw	r3, #1092	; 0x444
 8004438:	4013      	ands	r3, r2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d107      	bne.n	800444e <HAL_TIM_PWM_Stop_IT+0xf2>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800444c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	6a1a      	ldr	r2, [r3, #32]
 8004454:	f241 1311 	movw	r3, #4369	; 0x1111
 8004458:	4013      	ands	r3, r2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10f      	bne.n	800447e <HAL_TIM_PWM_Stop_IT+0x122>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	6a1a      	ldr	r2, [r3, #32]
 8004464:	f240 4344 	movw	r3, #1092	; 0x444
 8004468:	4013      	ands	r3, r2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d107      	bne.n	800447e <HAL_TIM_PWM_Stop_IT+0x122>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f022 0201 	bic.w	r2, r2, #1
 800447c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	3708      	adds	r7, #8
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}
 8004488:	40010000 	.word	0x40010000
 800448c:	40010400 	.word	0x40010400

08004490 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d122      	bne.n	80044ec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	f003 0302 	and.w	r3, r3, #2
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d11b      	bne.n	80044ec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f06f 0202 	mvn.w	r2, #2
 80044bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2201      	movs	r2, #1
 80044c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	f003 0303 	and.w	r3, r3, #3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d003      	beq.n	80044da <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 fa6b 	bl	80049ae <HAL_TIM_IC_CaptureCallback>
 80044d8:	e005      	b.n	80044e6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 fa5d 	bl	800499a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 fa6e 	bl	80049c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	f003 0304 	and.w	r3, r3, #4
 80044f6:	2b04      	cmp	r3, #4
 80044f8:	d122      	bne.n	8004540 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	f003 0304 	and.w	r3, r3, #4
 8004504:	2b04      	cmp	r3, #4
 8004506:	d11b      	bne.n	8004540 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f06f 0204 	mvn.w	r2, #4
 8004510:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2202      	movs	r2, #2
 8004516:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	699b      	ldr	r3, [r3, #24]
 800451e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004522:	2b00      	cmp	r3, #0
 8004524:	d003      	beq.n	800452e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 fa41 	bl	80049ae <HAL_TIM_IC_CaptureCallback>
 800452c:	e005      	b.n	800453a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 fa33 	bl	800499a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 fa44 	bl	80049c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	f003 0308 	and.w	r3, r3, #8
 800454a:	2b08      	cmp	r3, #8
 800454c:	d122      	bne.n	8004594 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	f003 0308 	and.w	r3, r3, #8
 8004558:	2b08      	cmp	r3, #8
 800455a:	d11b      	bne.n	8004594 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f06f 0208 	mvn.w	r2, #8
 8004564:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2204      	movs	r2, #4
 800456a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	69db      	ldr	r3, [r3, #28]
 8004572:	f003 0303 	and.w	r3, r3, #3
 8004576:	2b00      	cmp	r3, #0
 8004578:	d003      	beq.n	8004582 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 fa17 	bl	80049ae <HAL_TIM_IC_CaptureCallback>
 8004580:	e005      	b.n	800458e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 fa09 	bl	800499a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f000 fa1a 	bl	80049c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	f003 0310 	and.w	r3, r3, #16
 800459e:	2b10      	cmp	r3, #16
 80045a0:	d122      	bne.n	80045e8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	f003 0310 	and.w	r3, r3, #16
 80045ac:	2b10      	cmp	r3, #16
 80045ae:	d11b      	bne.n	80045e8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f06f 0210 	mvn.w	r2, #16
 80045b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2208      	movs	r2, #8
 80045be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d003      	beq.n	80045d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 f9ed 	bl	80049ae <HAL_TIM_IC_CaptureCallback>
 80045d4:	e005      	b.n	80045e2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 f9df 	bl	800499a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 f9f0 	bl	80049c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	2b01      	cmp	r3, #1
 80045f4:	d10e      	bne.n	8004614 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	2b01      	cmp	r3, #1
 8004602:	d107      	bne.n	8004614 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f06f 0201 	mvn.w	r2, #1
 800460c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f004 fa3e 	bl	8008a90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800461e:	2b80      	cmp	r3, #128	; 0x80
 8004620:	d10e      	bne.n	8004640 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800462c:	2b80      	cmp	r3, #128	; 0x80
 800462e:	d107      	bne.n	8004640 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 fe51 	bl	80052e2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800464a:	2b40      	cmp	r3, #64	; 0x40
 800464c:	d10e      	bne.n	800466c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004658:	2b40      	cmp	r3, #64	; 0x40
 800465a:	d107      	bne.n	800466c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 f9b5 	bl	80049d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	f003 0320 	and.w	r3, r3, #32
 8004676:	2b20      	cmp	r3, #32
 8004678:	d10e      	bne.n	8004698 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	f003 0320 	and.w	r3, r3, #32
 8004684:	2b20      	cmp	r3, #32
 8004686:	d107      	bne.n	8004698 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f06f 0220 	mvn.w	r2, #32
 8004690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 fe1b 	bl	80052ce <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004698:	bf00      	nop
 800469a:	3708      	adds	r7, #8
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d101      	bne.n	80046ba <HAL_TIM_PWM_ConfigChannel+0x1a>
 80046b6:	2302      	movs	r3, #2
 80046b8:	e0b4      	b.n	8004824 <HAL_TIM_PWM_ConfigChannel+0x184>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2202      	movs	r2, #2
 80046c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2b0c      	cmp	r3, #12
 80046ce:	f200 809f 	bhi.w	8004810 <HAL_TIM_PWM_ConfigChannel+0x170>
 80046d2:	a201      	add	r2, pc, #4	; (adr r2, 80046d8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80046d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d8:	0800470d 	.word	0x0800470d
 80046dc:	08004811 	.word	0x08004811
 80046e0:	08004811 	.word	0x08004811
 80046e4:	08004811 	.word	0x08004811
 80046e8:	0800474d 	.word	0x0800474d
 80046ec:	08004811 	.word	0x08004811
 80046f0:	08004811 	.word	0x08004811
 80046f4:	08004811 	.word	0x08004811
 80046f8:	0800478f 	.word	0x0800478f
 80046fc:	08004811 	.word	0x08004811
 8004700:	08004811 	.word	0x08004811
 8004704:	08004811 	.word	0x08004811
 8004708:	080047cf 	.word	0x080047cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68b9      	ldr	r1, [r7, #8]
 8004712:	4618      	mov	r0, r3
 8004714:	f000 fa0a 	bl	8004b2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	699a      	ldr	r2, [r3, #24]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f042 0208 	orr.w	r2, r2, #8
 8004726:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	699a      	ldr	r2, [r3, #24]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f022 0204 	bic.w	r2, r2, #4
 8004736:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	6999      	ldr	r1, [r3, #24]
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	691a      	ldr	r2, [r3, #16]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	430a      	orrs	r2, r1
 8004748:	619a      	str	r2, [r3, #24]
      break;
 800474a:	e062      	b.n	8004812 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68b9      	ldr	r1, [r7, #8]
 8004752:	4618      	mov	r0, r3
 8004754:	f000 fa5a 	bl	8004c0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	699a      	ldr	r2, [r3, #24]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004766:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	699a      	ldr	r2, [r3, #24]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004776:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	6999      	ldr	r1, [r3, #24]
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	021a      	lsls	r2, r3, #8
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	430a      	orrs	r2, r1
 800478a:	619a      	str	r2, [r3, #24]
      break;
 800478c:	e041      	b.n	8004812 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68b9      	ldr	r1, [r7, #8]
 8004794:	4618      	mov	r0, r3
 8004796:	f000 faaf 	bl	8004cf8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	69da      	ldr	r2, [r3, #28]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f042 0208 	orr.w	r2, r2, #8
 80047a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	69da      	ldr	r2, [r3, #28]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f022 0204 	bic.w	r2, r2, #4
 80047b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	69d9      	ldr	r1, [r3, #28]
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	691a      	ldr	r2, [r3, #16]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	430a      	orrs	r2, r1
 80047ca:	61da      	str	r2, [r3, #28]
      break;
 80047cc:	e021      	b.n	8004812 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68b9      	ldr	r1, [r7, #8]
 80047d4:	4618      	mov	r0, r3
 80047d6:	f000 fb03 	bl	8004de0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	69da      	ldr	r2, [r3, #28]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	69da      	ldr	r2, [r3, #28]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	69d9      	ldr	r1, [r3, #28]
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	021a      	lsls	r2, r3, #8
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	430a      	orrs	r2, r1
 800480c:	61da      	str	r2, [r3, #28]
      break;
 800480e:	e000      	b.n	8004812 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004810:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	3710      	adds	r7, #16
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800483c:	2b01      	cmp	r3, #1
 800483e:	d101      	bne.n	8004844 <HAL_TIM_ConfigClockSource+0x18>
 8004840:	2302      	movs	r3, #2
 8004842:	e0a6      	b.n	8004992 <HAL_TIM_ConfigClockSource+0x166>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2202      	movs	r2, #2
 8004850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004862:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800486a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2b40      	cmp	r3, #64	; 0x40
 800487a:	d067      	beq.n	800494c <HAL_TIM_ConfigClockSource+0x120>
 800487c:	2b40      	cmp	r3, #64	; 0x40
 800487e:	d80b      	bhi.n	8004898 <HAL_TIM_ConfigClockSource+0x6c>
 8004880:	2b10      	cmp	r3, #16
 8004882:	d073      	beq.n	800496c <HAL_TIM_ConfigClockSource+0x140>
 8004884:	2b10      	cmp	r3, #16
 8004886:	d802      	bhi.n	800488e <HAL_TIM_ConfigClockSource+0x62>
 8004888:	2b00      	cmp	r3, #0
 800488a:	d06f      	beq.n	800496c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800488c:	e078      	b.n	8004980 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800488e:	2b20      	cmp	r3, #32
 8004890:	d06c      	beq.n	800496c <HAL_TIM_ConfigClockSource+0x140>
 8004892:	2b30      	cmp	r3, #48	; 0x30
 8004894:	d06a      	beq.n	800496c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004896:	e073      	b.n	8004980 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004898:	2b70      	cmp	r3, #112	; 0x70
 800489a:	d00d      	beq.n	80048b8 <HAL_TIM_ConfigClockSource+0x8c>
 800489c:	2b70      	cmp	r3, #112	; 0x70
 800489e:	d804      	bhi.n	80048aa <HAL_TIM_ConfigClockSource+0x7e>
 80048a0:	2b50      	cmp	r3, #80	; 0x50
 80048a2:	d033      	beq.n	800490c <HAL_TIM_ConfigClockSource+0xe0>
 80048a4:	2b60      	cmp	r3, #96	; 0x60
 80048a6:	d041      	beq.n	800492c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80048a8:	e06a      	b.n	8004980 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80048aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ae:	d066      	beq.n	800497e <HAL_TIM_ConfigClockSource+0x152>
 80048b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048b4:	d017      	beq.n	80048e6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80048b6:	e063      	b.n	8004980 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6818      	ldr	r0, [r3, #0]
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	6899      	ldr	r1, [r3, #8]
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	685a      	ldr	r2, [r3, #4]
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	f000 fb5a 	bl	8004f80 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80048da:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	609a      	str	r2, [r3, #8]
      break;
 80048e4:	e04c      	b.n	8004980 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6818      	ldr	r0, [r3, #0]
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	6899      	ldr	r1, [r3, #8]
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	685a      	ldr	r2, [r3, #4]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	f000 fb43 	bl	8004f80 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	689a      	ldr	r2, [r3, #8]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004908:	609a      	str	r2, [r3, #8]
      break;
 800490a:	e039      	b.n	8004980 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6818      	ldr	r0, [r3, #0]
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	6859      	ldr	r1, [r3, #4]
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	461a      	mov	r2, r3
 800491a:	f000 fab7 	bl	8004e8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2150      	movs	r1, #80	; 0x50
 8004924:	4618      	mov	r0, r3
 8004926:	f000 fb10 	bl	8004f4a <TIM_ITRx_SetConfig>
      break;
 800492a:	e029      	b.n	8004980 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6818      	ldr	r0, [r3, #0]
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	6859      	ldr	r1, [r3, #4]
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	461a      	mov	r2, r3
 800493a:	f000 fad6 	bl	8004eea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2160      	movs	r1, #96	; 0x60
 8004944:	4618      	mov	r0, r3
 8004946:	f000 fb00 	bl	8004f4a <TIM_ITRx_SetConfig>
      break;
 800494a:	e019      	b.n	8004980 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6818      	ldr	r0, [r3, #0]
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	6859      	ldr	r1, [r3, #4]
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	461a      	mov	r2, r3
 800495a:	f000 fa97 	bl	8004e8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	2140      	movs	r1, #64	; 0x40
 8004964:	4618      	mov	r0, r3
 8004966:	f000 faf0 	bl	8004f4a <TIM_ITRx_SetConfig>
      break;
 800496a:	e009      	b.n	8004980 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4619      	mov	r1, r3
 8004976:	4610      	mov	r0, r2
 8004978:	f000 fae7 	bl	8004f4a <TIM_ITRx_SetConfig>
      break;
 800497c:	e000      	b.n	8004980 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800497e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3710      	adds	r7, #16
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800499a:	b480      	push	{r7}
 800499c:	b083      	sub	sp, #12
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049a2:	bf00      	nop
 80049a4:	370c      	adds	r7, #12
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b083      	sub	sp, #12
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049b6:	bf00      	nop
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr

080049c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049c2:	b480      	push	{r7}
 80049c4:	b083      	sub	sp, #12
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049ca:	bf00      	nop
 80049cc:	370c      	adds	r7, #12
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b083      	sub	sp, #12
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049de:	bf00      	nop
 80049e0:	370c      	adds	r7, #12
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
	...

080049ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b085      	sub	sp, #20
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a40      	ldr	r2, [pc, #256]	; (8004b00 <TIM_Base_SetConfig+0x114>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d013      	beq.n	8004a2c <TIM_Base_SetConfig+0x40>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a0a:	d00f      	beq.n	8004a2c <TIM_Base_SetConfig+0x40>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a3d      	ldr	r2, [pc, #244]	; (8004b04 <TIM_Base_SetConfig+0x118>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d00b      	beq.n	8004a2c <TIM_Base_SetConfig+0x40>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a3c      	ldr	r2, [pc, #240]	; (8004b08 <TIM_Base_SetConfig+0x11c>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d007      	beq.n	8004a2c <TIM_Base_SetConfig+0x40>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a3b      	ldr	r2, [pc, #236]	; (8004b0c <TIM_Base_SetConfig+0x120>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d003      	beq.n	8004a2c <TIM_Base_SetConfig+0x40>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a3a      	ldr	r2, [pc, #232]	; (8004b10 <TIM_Base_SetConfig+0x124>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d108      	bne.n	8004a3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	68fa      	ldr	r2, [r7, #12]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a2f      	ldr	r2, [pc, #188]	; (8004b00 <TIM_Base_SetConfig+0x114>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d02b      	beq.n	8004a9e <TIM_Base_SetConfig+0xb2>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a4c:	d027      	beq.n	8004a9e <TIM_Base_SetConfig+0xb2>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a2c      	ldr	r2, [pc, #176]	; (8004b04 <TIM_Base_SetConfig+0x118>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d023      	beq.n	8004a9e <TIM_Base_SetConfig+0xb2>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a2b      	ldr	r2, [pc, #172]	; (8004b08 <TIM_Base_SetConfig+0x11c>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d01f      	beq.n	8004a9e <TIM_Base_SetConfig+0xb2>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a2a      	ldr	r2, [pc, #168]	; (8004b0c <TIM_Base_SetConfig+0x120>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d01b      	beq.n	8004a9e <TIM_Base_SetConfig+0xb2>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a29      	ldr	r2, [pc, #164]	; (8004b10 <TIM_Base_SetConfig+0x124>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d017      	beq.n	8004a9e <TIM_Base_SetConfig+0xb2>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a28      	ldr	r2, [pc, #160]	; (8004b14 <TIM_Base_SetConfig+0x128>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d013      	beq.n	8004a9e <TIM_Base_SetConfig+0xb2>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a27      	ldr	r2, [pc, #156]	; (8004b18 <TIM_Base_SetConfig+0x12c>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d00f      	beq.n	8004a9e <TIM_Base_SetConfig+0xb2>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a26      	ldr	r2, [pc, #152]	; (8004b1c <TIM_Base_SetConfig+0x130>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d00b      	beq.n	8004a9e <TIM_Base_SetConfig+0xb2>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a25      	ldr	r2, [pc, #148]	; (8004b20 <TIM_Base_SetConfig+0x134>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d007      	beq.n	8004a9e <TIM_Base_SetConfig+0xb2>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a24      	ldr	r2, [pc, #144]	; (8004b24 <TIM_Base_SetConfig+0x138>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d003      	beq.n	8004a9e <TIM_Base_SetConfig+0xb2>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a23      	ldr	r2, [pc, #140]	; (8004b28 <TIM_Base_SetConfig+0x13c>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d108      	bne.n	8004ab0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	68db      	ldr	r3, [r3, #12]
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	689a      	ldr	r2, [r3, #8]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a0a      	ldr	r2, [pc, #40]	; (8004b00 <TIM_Base_SetConfig+0x114>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d003      	beq.n	8004ae4 <TIM_Base_SetConfig+0xf8>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a0c      	ldr	r2, [pc, #48]	; (8004b10 <TIM_Base_SetConfig+0x124>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d103      	bne.n	8004aec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	691a      	ldr	r2, [r3, #16]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	615a      	str	r2, [r3, #20]
}
 8004af2:	bf00      	nop
 8004af4:	3714      	adds	r7, #20
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	40010000 	.word	0x40010000
 8004b04:	40000400 	.word	0x40000400
 8004b08:	40000800 	.word	0x40000800
 8004b0c:	40000c00 	.word	0x40000c00
 8004b10:	40010400 	.word	0x40010400
 8004b14:	40014000 	.word	0x40014000
 8004b18:	40014400 	.word	0x40014400
 8004b1c:	40014800 	.word	0x40014800
 8004b20:	40001800 	.word	0x40001800
 8004b24:	40001c00 	.word	0x40001c00
 8004b28:	40002000 	.word	0x40002000

08004b2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b087      	sub	sp, #28
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
 8004b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a1b      	ldr	r3, [r3, #32]
 8004b3a:	f023 0201 	bic.w	r2, r3, #1
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a1b      	ldr	r3, [r3, #32]
 8004b46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	699b      	ldr	r3, [r3, #24]
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f023 0303 	bic.w	r3, r3, #3
 8004b62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	f023 0302 	bic.w	r3, r3, #2
 8004b74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a20      	ldr	r2, [pc, #128]	; (8004c04 <TIM_OC1_SetConfig+0xd8>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d003      	beq.n	8004b90 <TIM_OC1_SetConfig+0x64>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a1f      	ldr	r2, [pc, #124]	; (8004c08 <TIM_OC1_SetConfig+0xdc>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d10c      	bne.n	8004baa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	f023 0308 	bic.w	r3, r3, #8
 8004b96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	f023 0304 	bic.w	r3, r3, #4
 8004ba8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a15      	ldr	r2, [pc, #84]	; (8004c04 <TIM_OC1_SetConfig+0xd8>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d003      	beq.n	8004bba <TIM_OC1_SetConfig+0x8e>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a14      	ldr	r2, [pc, #80]	; (8004c08 <TIM_OC1_SetConfig+0xdc>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d111      	bne.n	8004bde <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004bc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	693a      	ldr	r2, [r7, #16]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	699b      	ldr	r3, [r3, #24]
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	693a      	ldr	r2, [r7, #16]
 8004be2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	685a      	ldr	r2, [r3, #4]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	697a      	ldr	r2, [r7, #20]
 8004bf6:	621a      	str	r2, [r3, #32]
}
 8004bf8:	bf00      	nop
 8004bfa:	371c      	adds	r7, #28
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr
 8004c04:	40010000 	.word	0x40010000
 8004c08:	40010400 	.word	0x40010400

08004c0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b087      	sub	sp, #28
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a1b      	ldr	r3, [r3, #32]
 8004c1a:	f023 0210 	bic.w	r2, r3, #16
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	021b      	lsls	r3, r3, #8
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	f023 0320 	bic.w	r3, r3, #32
 8004c56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	011b      	lsls	r3, r3, #4
 8004c5e:	697a      	ldr	r2, [r7, #20]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a22      	ldr	r2, [pc, #136]	; (8004cf0 <TIM_OC2_SetConfig+0xe4>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d003      	beq.n	8004c74 <TIM_OC2_SetConfig+0x68>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a21      	ldr	r2, [pc, #132]	; (8004cf4 <TIM_OC2_SetConfig+0xe8>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d10d      	bne.n	8004c90 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	011b      	lsls	r3, r3, #4
 8004c82:	697a      	ldr	r2, [r7, #20]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a17      	ldr	r2, [pc, #92]	; (8004cf0 <TIM_OC2_SetConfig+0xe4>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d003      	beq.n	8004ca0 <TIM_OC2_SetConfig+0x94>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a16      	ldr	r2, [pc, #88]	; (8004cf4 <TIM_OC2_SetConfig+0xe8>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d113      	bne.n	8004cc8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ca6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	693a      	ldr	r2, [r7, #16]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	699b      	ldr	r3, [r3, #24]
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	693a      	ldr	r2, [r7, #16]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	693a      	ldr	r2, [r7, #16]
 8004ccc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	685a      	ldr	r2, [r3, #4]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	697a      	ldr	r2, [r7, #20]
 8004ce0:	621a      	str	r2, [r3, #32]
}
 8004ce2:	bf00      	nop
 8004ce4:	371c      	adds	r7, #28
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	40010000 	.word	0x40010000
 8004cf4:	40010400 	.word	0x40010400

08004cf8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b087      	sub	sp, #28
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a1b      	ldr	r3, [r3, #32]
 8004d06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a1b      	ldr	r3, [r3, #32]
 8004d12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	69db      	ldr	r3, [r3, #28]
 8004d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f023 0303 	bic.w	r3, r3, #3
 8004d2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	021b      	lsls	r3, r3, #8
 8004d48:	697a      	ldr	r2, [r7, #20]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a21      	ldr	r2, [pc, #132]	; (8004dd8 <TIM_OC3_SetConfig+0xe0>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d003      	beq.n	8004d5e <TIM_OC3_SetConfig+0x66>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a20      	ldr	r2, [pc, #128]	; (8004ddc <TIM_OC3_SetConfig+0xe4>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d10d      	bne.n	8004d7a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	68db      	ldr	r3, [r3, #12]
 8004d6a:	021b      	lsls	r3, r3, #8
 8004d6c:	697a      	ldr	r2, [r7, #20]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a16      	ldr	r2, [pc, #88]	; (8004dd8 <TIM_OC3_SetConfig+0xe0>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d003      	beq.n	8004d8a <TIM_OC3_SetConfig+0x92>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a15      	ldr	r2, [pc, #84]	; (8004ddc <TIM_OC3_SetConfig+0xe4>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d113      	bne.n	8004db2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	011b      	lsls	r3, r3, #4
 8004da0:	693a      	ldr	r2, [r7, #16]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	011b      	lsls	r3, r3, #4
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	693a      	ldr	r2, [r7, #16]
 8004db6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	685a      	ldr	r2, [r3, #4]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	621a      	str	r2, [r3, #32]
}
 8004dcc:	bf00      	nop
 8004dce:	371c      	adds	r7, #28
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr
 8004dd8:	40010000 	.word	0x40010000
 8004ddc:	40010400 	.word	0x40010400

08004de0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b087      	sub	sp, #28
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	69db      	ldr	r3, [r3, #28]
 8004e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	021b      	lsls	r3, r3, #8
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e2a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	031b      	lsls	r3, r3, #12
 8004e32:	693a      	ldr	r2, [r7, #16]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a12      	ldr	r2, [pc, #72]	; (8004e84 <TIM_OC4_SetConfig+0xa4>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d003      	beq.n	8004e48 <TIM_OC4_SetConfig+0x68>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a11      	ldr	r2, [pc, #68]	; (8004e88 <TIM_OC4_SetConfig+0xa8>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d109      	bne.n	8004e5c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e4e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	695b      	ldr	r3, [r3, #20]
 8004e54:	019b      	lsls	r3, r3, #6
 8004e56:	697a      	ldr	r2, [r7, #20]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	697a      	ldr	r2, [r7, #20]
 8004e60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685a      	ldr	r2, [r3, #4]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	693a      	ldr	r2, [r7, #16]
 8004e74:	621a      	str	r2, [r3, #32]
}
 8004e76:	bf00      	nop
 8004e78:	371c      	adds	r7, #28
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
 8004e82:	bf00      	nop
 8004e84:	40010000 	.word	0x40010000
 8004e88:	40010400 	.word	0x40010400

08004e8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b087      	sub	sp, #28
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6a1b      	ldr	r3, [r3, #32]
 8004e9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6a1b      	ldr	r3, [r3, #32]
 8004ea2:	f023 0201 	bic.w	r2, r3, #1
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004eb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	011b      	lsls	r3, r3, #4
 8004ebc:	693a      	ldr	r2, [r7, #16]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	f023 030a 	bic.w	r3, r3, #10
 8004ec8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	693a      	ldr	r2, [r7, #16]
 8004ed6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	697a      	ldr	r2, [r7, #20]
 8004edc:	621a      	str	r2, [r3, #32]
}
 8004ede:	bf00      	nop
 8004ee0:	371c      	adds	r7, #28
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr

08004eea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004eea:	b480      	push	{r7}
 8004eec:	b087      	sub	sp, #28
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	60f8      	str	r0, [r7, #12]
 8004ef2:	60b9      	str	r1, [r7, #8]
 8004ef4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6a1b      	ldr	r3, [r3, #32]
 8004efa:	f023 0210 	bic.w	r2, r3, #16
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	6a1b      	ldr	r3, [r3, #32]
 8004f0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	031b      	lsls	r3, r3, #12
 8004f1a:	697a      	ldr	r2, [r7, #20]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f26:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	011b      	lsls	r3, r3, #4
 8004f2c:	693a      	ldr	r2, [r7, #16]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	697a      	ldr	r2, [r7, #20]
 8004f36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	693a      	ldr	r2, [r7, #16]
 8004f3c:	621a      	str	r2, [r3, #32]
}
 8004f3e:	bf00      	nop
 8004f40:	371c      	adds	r7, #28
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr

08004f4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b085      	sub	sp, #20
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
 8004f52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f62:	683a      	ldr	r2, [r7, #0]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	f043 0307 	orr.w	r3, r3, #7
 8004f6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	609a      	str	r2, [r3, #8]
}
 8004f74:	bf00      	nop
 8004f76:	3714      	adds	r7, #20
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b087      	sub	sp, #28
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	60f8      	str	r0, [r7, #12]
 8004f88:	60b9      	str	r1, [r7, #8]
 8004f8a:	607a      	str	r2, [r7, #4]
 8004f8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	021a      	lsls	r2, r3, #8
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	431a      	orrs	r2, r3
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	697a      	ldr	r2, [r7, #20]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	697a      	ldr	r2, [r7, #20]
 8004fb2:	609a      	str	r2, [r3, #8]
}
 8004fb4:	bf00      	nop
 8004fb6:	371c      	adds	r7, #28
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr

08004fc0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b087      	sub	sp, #28
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	f003 031f 	and.w	r3, r3, #31
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6a1a      	ldr	r2, [r3, #32]
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	43db      	mvns	r3, r3
 8004fe2:	401a      	ands	r2, r3
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6a1a      	ldr	r2, [r3, #32]
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	f003 031f 	and.w	r3, r3, #31
 8004ff2:	6879      	ldr	r1, [r7, #4]
 8004ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8004ff8:	431a      	orrs	r2, r3
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	621a      	str	r2, [r3, #32]
}
 8004ffe:	bf00      	nop
 8005000:	371c      	adds	r7, #28
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr

0800500a <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800500a:	b580      	push	{r7, lr}
 800500c:	b084      	sub	sp, #16
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
 8005012:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	2b04      	cmp	r3, #4
 8005018:	d00d      	beq.n	8005036 <HAL_TIMEx_PWMN_Start_IT+0x2c>
 800501a:	2b08      	cmp	r3, #8
 800501c:	d014      	beq.n	8005048 <HAL_TIMEx_PWMN_Start_IT+0x3e>
 800501e:	2b00      	cmp	r3, #0
 8005020:	d000      	beq.n	8005024 <HAL_TIMEx_PWMN_Start_IT+0x1a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 8005022:	e01a      	b.n	800505a <HAL_TIMEx_PWMN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68da      	ldr	r2, [r3, #12]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f042 0202 	orr.w	r2, r2, #2
 8005032:	60da      	str	r2, [r3, #12]
      break;
 8005034:	e011      	b.n	800505a <HAL_TIMEx_PWMN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68da      	ldr	r2, [r3, #12]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f042 0204 	orr.w	r2, r2, #4
 8005044:	60da      	str	r2, [r3, #12]
      break;
 8005046:	e008      	b.n	800505a <HAL_TIMEx_PWMN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	68da      	ldr	r2, [r3, #12]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f042 0208 	orr.w	r2, r2, #8
 8005056:	60da      	str	r2, [r3, #12]
      break;
 8005058:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68da      	ldr	r2, [r3, #12]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005068:	60da      	str	r2, [r3, #12]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2204      	movs	r2, #4
 8005070:	6839      	ldr	r1, [r7, #0]
 8005072:	4618      	mov	r0, r3
 8005074:	f000 f93f 	bl	80052f6 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005086:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	f003 0307 	and.w	r3, r3, #7
 8005092:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2b06      	cmp	r3, #6
 8005098:	d007      	beq.n	80050aa <HAL_TIMEx_PWMN_Start_IT+0xa0>
  {
    __HAL_TIM_ENABLE(htim);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f042 0201 	orr.w	r2, r2, #1
 80050a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3710      	adds	r7, #16
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <HAL_TIMEx_PWMN_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b084      	sub	sp, #16
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccer;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	2b04      	cmp	r3, #4
 80050c2:	d00d      	beq.n	80050e0 <HAL_TIMEx_PWMN_Stop_IT+0x2c>
 80050c4:	2b08      	cmp	r3, #8
 80050c6:	d014      	beq.n	80050f2 <HAL_TIMEx_PWMN_Stop_IT+0x3e>
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d000      	beq.n	80050ce <HAL_TIMEx_PWMN_Stop_IT+0x1a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 80050cc:	e01a      	b.n	8005104 <HAL_TIMEx_PWMN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68da      	ldr	r2, [r3, #12]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f022 0202 	bic.w	r2, r2, #2
 80050dc:	60da      	str	r2, [r3, #12]
      break;
 80050de:	e011      	b.n	8005104 <HAL_TIMEx_PWMN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68da      	ldr	r2, [r3, #12]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f022 0204 	bic.w	r2, r2, #4
 80050ee:	60da      	str	r2, [r3, #12]
      break;
 80050f0:	e008      	b.n	8005104 <HAL_TIMEx_PWMN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68da      	ldr	r2, [r3, #12]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f022 0208 	bic.w	r2, r2, #8
 8005100:	60da      	str	r2, [r3, #12]
      break;
 8005102:	bf00      	nop
  }

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2200      	movs	r2, #0
 800510a:	6839      	ldr	r1, [r7, #0]
 800510c:	4618      	mov	r0, r3
 800510e:	f000 f8f2 	bl	80052f6 <TIM_CCxNChannelCmd>

  /* Disable the TIM Break interrupt (only if no more channel is active) */
  tmpccer = htim->Instance->CCER;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	6a1b      	ldr	r3, [r3, #32]
 8005118:	60fb      	str	r3, [r7, #12]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	f240 4344 	movw	r3, #1092	; 0x444
 8005120:	4013      	ands	r3, r2
 8005122:	2b00      	cmp	r3, #0
 8005124:	d107      	bne.n	8005136 <HAL_TIMEx_PWMN_Stop_IT+0x82>
  {
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68da      	ldr	r2, [r3, #12]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005134:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	6a1a      	ldr	r2, [r3, #32]
 800513c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005140:	4013      	ands	r3, r2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d10f      	bne.n	8005166 <HAL_TIMEx_PWMN_Stop_IT+0xb2>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	6a1a      	ldr	r2, [r3, #32]
 800514c:	f240 4344 	movw	r3, #1092	; 0x444
 8005150:	4013      	ands	r3, r2
 8005152:	2b00      	cmp	r3, #0
 8005154:	d107      	bne.n	8005166 <HAL_TIMEx_PWMN_Stop_IT+0xb2>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005164:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	6a1a      	ldr	r2, [r3, #32]
 800516c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005170:	4013      	ands	r3, r2
 8005172:	2b00      	cmp	r3, #0
 8005174:	d10f      	bne.n	8005196 <HAL_TIMEx_PWMN_Stop_IT+0xe2>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	6a1a      	ldr	r2, [r3, #32]
 800517c:	f240 4344 	movw	r3, #1092	; 0x444
 8005180:	4013      	ands	r3, r2
 8005182:	2b00      	cmp	r3, #0
 8005184:	d107      	bne.n	8005196 <HAL_TIMEx_PWMN_Stop_IT+0xe2>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f022 0201 	bic.w	r2, r2, #1
 8005194:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005196:	2300      	movs	r3, #0
}
 8005198:	4618      	mov	r0, r3
 800519a:	3710      	adds	r7, #16
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d101      	bne.n	80051b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051b4:	2302      	movs	r3, #2
 80051b6:	e032      	b.n	800521e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2202      	movs	r2, #2
 80051c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051f0:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	68ba      	ldr	r2, [r7, #8]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68fa      	ldr	r2, [r7, #12]
 8005202:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800521c:	2300      	movs	r3, #0
}
 800521e:	4618      	mov	r0, r3
 8005220:	3714      	adds	r7, #20
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr

0800522a <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800522a:	b480      	push	{r7}
 800522c:	b085      	sub	sp, #20
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]
 8005232:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005234:	2300      	movs	r3, #0
 8005236:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800523e:	2b01      	cmp	r3, #1
 8005240:	d101      	bne.n	8005246 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005242:	2302      	movs	r3, #2
 8005244:	e03d      	b.n	80052c2 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2201      	movs	r2, #1
 800524a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	4313      	orrs	r3, r2
 800525a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	4313      	orrs	r3, r2
 8005268:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	4313      	orrs	r3, r2
 8005276:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4313      	orrs	r3, r2
 8005284:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	691b      	ldr	r3, [r3, #16]
 8005290:	4313      	orrs	r3, r2
 8005292:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	4313      	orrs	r3, r2
 80052a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	69db      	ldr	r3, [r3, #28]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3714      	adds	r7, #20
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr

080052ce <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052ce:	b480      	push	{r7}
 80052d0:	b083      	sub	sp, #12
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052d6:	bf00      	nop
 80052d8:	370c      	adds	r7, #12
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr

080052e2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052e2:	b480      	push	{r7}
 80052e4:	b083      	sub	sp, #12
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052ea:	bf00      	nop
 80052ec:	370c      	adds	r7, #12
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr

080052f6 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80052f6:	b480      	push	{r7}
 80052f8:	b087      	sub	sp, #28
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	60f8      	str	r0, [r7, #12]
 80052fe:	60b9      	str	r1, [r7, #8]
 8005300:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	f003 031f 	and.w	r3, r3, #31
 8005308:	2204      	movs	r2, #4
 800530a:	fa02 f303 	lsl.w	r3, r2, r3
 800530e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6a1a      	ldr	r2, [r3, #32]
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	43db      	mvns	r3, r3
 8005318:	401a      	ands	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6a1a      	ldr	r2, [r3, #32]
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	f003 031f 	and.w	r3, r3, #31
 8005328:	6879      	ldr	r1, [r7, #4]
 800532a:	fa01 f303 	lsl.w	r3, r1, r3
 800532e:	431a      	orrs	r2, r3
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	621a      	str	r2, [r3, #32]
}
 8005334:	bf00      	nop
 8005336:	371c      	adds	r7, #28
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d101      	bne.n	8005352 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e03f      	b.n	80053d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005358:	b2db      	uxtb	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d106      	bne.n	800536c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f003 fc04 	bl	8008b74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2224      	movs	r2, #36	; 0x24
 8005370:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68da      	ldr	r2, [r3, #12]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005382:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 fa65 	bl	8005854 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	691a      	ldr	r2, [r3, #16]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005398:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	695a      	ldr	r2, [r3, #20]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68da      	ldr	r2, [r3, #12]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2220      	movs	r2, #32
 80053c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2220      	movs	r2, #32
 80053cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3708      	adds	r7, #8
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
	...

080053dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b088      	sub	sp, #32
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80053fc:	2300      	movs	r3, #0
 80053fe:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005400:	2300      	movs	r3, #0
 8005402:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	f003 030f 	and.w	r3, r3, #15
 800540a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d10d      	bne.n	800542e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	f003 0320 	and.w	r3, r3, #32
 8005418:	2b00      	cmp	r3, #0
 800541a:	d008      	beq.n	800542e <HAL_UART_IRQHandler+0x52>
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	f003 0320 	and.w	r3, r3, #32
 8005422:	2b00      	cmp	r3, #0
 8005424:	d003      	beq.n	800542e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005426:	6878      	ldr	r0, [r7, #4]
 8005428:	f000 f992 	bl	8005750 <UART_Receive_IT>
      return;
 800542c:	e0cc      	b.n	80055c8 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	2b00      	cmp	r3, #0
 8005432:	f000 80ab 	beq.w	800558c <HAL_UART_IRQHandler+0x1b0>
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	f003 0301 	and.w	r3, r3, #1
 800543c:	2b00      	cmp	r3, #0
 800543e:	d105      	bne.n	800544c <HAL_UART_IRQHandler+0x70>
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005446:	2b00      	cmp	r3, #0
 8005448:	f000 80a0 	beq.w	800558c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	f003 0301 	and.w	r3, r3, #1
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00a      	beq.n	800546c <HAL_UART_IRQHandler+0x90>
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800545c:	2b00      	cmp	r3, #0
 800545e:	d005      	beq.n	800546c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005464:	f043 0201 	orr.w	r2, r3, #1
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	f003 0304 	and.w	r3, r3, #4
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00a      	beq.n	800548c <HAL_UART_IRQHandler+0xb0>
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	f003 0301 	and.w	r3, r3, #1
 800547c:	2b00      	cmp	r3, #0
 800547e:	d005      	beq.n	800548c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005484:	f043 0202 	orr.w	r2, r3, #2
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	f003 0302 	and.w	r3, r3, #2
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00a      	beq.n	80054ac <HAL_UART_IRQHandler+0xd0>
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	f003 0301 	and.w	r3, r3, #1
 800549c:	2b00      	cmp	r3, #0
 800549e:	d005      	beq.n	80054ac <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054a4:	f043 0204 	orr.w	r2, r3, #4
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	f003 0308 	and.w	r3, r3, #8
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00a      	beq.n	80054cc <HAL_UART_IRQHandler+0xf0>
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	f003 0301 	and.w	r3, r3, #1
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d005      	beq.n	80054cc <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054c4:	f043 0208 	orr.w	r2, r3, #8
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d078      	beq.n	80055c6 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	f003 0320 	and.w	r3, r3, #32
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d007      	beq.n	80054ee <HAL_UART_IRQHandler+0x112>
 80054de:	69bb      	ldr	r3, [r7, #24]
 80054e0:	f003 0320 	and.w	r3, r3, #32
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d002      	beq.n	80054ee <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 f931 	bl	8005750 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	695b      	ldr	r3, [r3, #20]
 80054f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054f8:	2b40      	cmp	r3, #64	; 0x40
 80054fa:	bf0c      	ite	eq
 80054fc:	2301      	moveq	r3, #1
 80054fe:	2300      	movne	r3, #0
 8005500:	b2db      	uxtb	r3, r3
 8005502:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005508:	f003 0308 	and.w	r3, r3, #8
 800550c:	2b00      	cmp	r3, #0
 800550e:	d102      	bne.n	8005516 <HAL_UART_IRQHandler+0x13a>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d031      	beq.n	800557a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 f87a 	bl	8005610 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005526:	2b40      	cmp	r3, #64	; 0x40
 8005528:	d123      	bne.n	8005572 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	695a      	ldr	r2, [r3, #20]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005538:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800553e:	2b00      	cmp	r3, #0
 8005540:	d013      	beq.n	800556a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005546:	4a22      	ldr	r2, [pc, #136]	; (80055d0 <HAL_UART_IRQHandler+0x1f4>)
 8005548:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800554e:	4618      	mov	r0, r3
 8005550:	f7fd f89c 	bl	800268c <HAL_DMA_Abort_IT>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d016      	beq.n	8005588 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800555e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005564:	4610      	mov	r0, r2
 8005566:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005568:	e00e      	b.n	8005588 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f846 	bl	80055fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005570:	e00a      	b.n	8005588 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 f842 	bl	80055fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005578:	e006      	b.n	8005588 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 f83e 	bl	80055fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005586:	e01e      	b.n	80055c6 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005588:	bf00      	nop
    return;
 800558a:	e01c      	b.n	80055c6 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800558c:	69fb      	ldr	r3, [r7, #28]
 800558e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005592:	2b00      	cmp	r3, #0
 8005594:	d008      	beq.n	80055a8 <HAL_UART_IRQHandler+0x1cc>
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800559c:	2b00      	cmp	r3, #0
 800559e:	d003      	beq.n	80055a8 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f000 f867 	bl	8005674 <UART_Transmit_IT>
    return;
 80055a6:	e00f      	b.n	80055c8 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00a      	beq.n	80055c8 <HAL_UART_IRQHandler+0x1ec>
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d005      	beq.n	80055c8 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f000 f8af 	bl	8005720 <UART_EndTransmit_IT>
    return;
 80055c2:	bf00      	nop
 80055c4:	e000      	b.n	80055c8 <HAL_UART_IRQHandler+0x1ec>
    return;
 80055c6:	bf00      	nop
  }
}
 80055c8:	3720      	adds	r7, #32
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	0800564d 	.word	0x0800564d

080055d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80055dc:	bf00      	nop
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80055f0:	bf00      	nop
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005604:	bf00      	nop
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68da      	ldr	r2, [r3, #12]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005626:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	695a      	ldr	r2, [r3, #20]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f022 0201 	bic.w	r2, r2, #1
 8005636:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2220      	movs	r2, #32
 800563c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005640:	bf00      	nop
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005658:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2200      	movs	r2, #0
 800565e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005666:	68f8      	ldr	r0, [r7, #12]
 8005668:	f7ff ffc8 	bl	80055fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800566c:	bf00      	nop
 800566e:	3710      	adds	r7, #16
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005674:	b480      	push	{r7}
 8005676:	b085      	sub	sp, #20
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005682:	b2db      	uxtb	r3, r3
 8005684:	2b21      	cmp	r3, #33	; 0x21
 8005686:	d144      	bne.n	8005712 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005690:	d11a      	bne.n	80056c8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a1b      	ldr	r3, [r3, #32]
 8005696:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	881b      	ldrh	r3, [r3, #0]
 800569c:	461a      	mov	r2, r3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056a6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d105      	bne.n	80056bc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a1b      	ldr	r3, [r3, #32]
 80056b4:	1c9a      	adds	r2, r3, #2
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	621a      	str	r2, [r3, #32]
 80056ba:	e00e      	b.n	80056da <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a1b      	ldr	r3, [r3, #32]
 80056c0:	1c5a      	adds	r2, r3, #1
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	621a      	str	r2, [r3, #32]
 80056c6:	e008      	b.n	80056da <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6a1b      	ldr	r3, [r3, #32]
 80056cc:	1c59      	adds	r1, r3, #1
 80056ce:	687a      	ldr	r2, [r7, #4]
 80056d0:	6211      	str	r1, [r2, #32]
 80056d2:	781a      	ldrb	r2, [r3, #0]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056de:	b29b      	uxth	r3, r3
 80056e0:	3b01      	subs	r3, #1
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	4619      	mov	r1, r3
 80056e8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d10f      	bne.n	800570e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68da      	ldr	r2, [r3, #12]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056fc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68da      	ldr	r2, [r3, #12]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800570c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800570e:	2300      	movs	r3, #0
 8005710:	e000      	b.n	8005714 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005712:	2302      	movs	r3, #2
  }
}
 8005714:	4618      	mov	r0, r3
 8005716:	3714      	adds	r7, #20
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr

08005720 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68da      	ldr	r2, [r3, #12]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005736:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2220      	movs	r2, #32
 800573c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f7ff ff47 	bl	80055d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	3708      	adds	r7, #8
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800575e:	b2db      	uxtb	r3, r3
 8005760:	2b22      	cmp	r3, #34	; 0x22
 8005762:	d171      	bne.n	8005848 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800576c:	d123      	bne.n	80057b6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005772:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d10e      	bne.n	800579a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	b29b      	uxth	r3, r3
 8005784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005788:	b29a      	uxth	r2, r3
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005792:	1c9a      	adds	r2, r3, #2
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	629a      	str	r2, [r3, #40]	; 0x28
 8005798:	e029      	b.n	80057ee <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	b29a      	uxth	r2, r3
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ae:	1c5a      	adds	r2, r3, #1
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	629a      	str	r2, [r3, #40]	; 0x28
 80057b4:	e01b      	b.n	80057ee <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d10a      	bne.n	80057d4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	6858      	ldr	r0, [r3, #4]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c8:	1c59      	adds	r1, r3, #1
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	6291      	str	r1, [r2, #40]	; 0x28
 80057ce:	b2c2      	uxtb	r2, r0
 80057d0:	701a      	strb	r2, [r3, #0]
 80057d2:	e00c      	b.n	80057ee <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	b2da      	uxtb	r2, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e0:	1c58      	adds	r0, r3, #1
 80057e2:	6879      	ldr	r1, [r7, #4]
 80057e4:	6288      	str	r0, [r1, #40]	; 0x28
 80057e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80057ea:	b2d2      	uxtb	r2, r2
 80057ec:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	3b01      	subs	r3, #1
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	4619      	mov	r1, r3
 80057fc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d120      	bne.n	8005844 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68da      	ldr	r2, [r3, #12]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f022 0220 	bic.w	r2, r2, #32
 8005810:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68da      	ldr	r2, [r3, #12]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005820:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	695a      	ldr	r2, [r3, #20]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f022 0201 	bic.w	r2, r2, #1
 8005830:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2220      	movs	r2, #32
 8005836:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f7ff fed4 	bl	80055e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005840:	2300      	movs	r3, #0
 8005842:	e002      	b.n	800584a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005844:	2300      	movs	r3, #0
 8005846:	e000      	b.n	800584a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005848:	2302      	movs	r3, #2
  }
}
 800584a:	4618      	mov	r0, r3
 800584c:	3710      	adds	r7, #16
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}
	...

08005854 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005854:	b5b0      	push	{r4, r5, r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	68da      	ldr	r2, [r3, #12]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	430a      	orrs	r2, r1
 8005870:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	689a      	ldr	r2, [r3, #8]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	431a      	orrs	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	695b      	ldr	r3, [r3, #20]
 8005880:	431a      	orrs	r2, r3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	69db      	ldr	r3, [r3, #28]
 8005886:	4313      	orrs	r3, r2
 8005888:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005894:	f023 030c 	bic.w	r3, r3, #12
 8005898:	687a      	ldr	r2, [r7, #4]
 800589a:	6812      	ldr	r2, [r2, #0]
 800589c:	68f9      	ldr	r1, [r7, #12]
 800589e:	430b      	orrs	r3, r1
 80058a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	695b      	ldr	r3, [r3, #20]
 80058a8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	699a      	ldr	r2, [r3, #24]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	430a      	orrs	r2, r1
 80058b6:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	69db      	ldr	r3, [r3, #28]
 80058bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058c0:	f040 80e4 	bne.w	8005a8c <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4aab      	ldr	r2, [pc, #684]	; (8005b78 <UART_SetConfig+0x324>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d004      	beq.n	80058d8 <UART_SetConfig+0x84>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4aaa      	ldr	r2, [pc, #680]	; (8005b7c <UART_SetConfig+0x328>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d16c      	bne.n	80059b2 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80058d8:	f7fd fc42 	bl	8003160 <HAL_RCC_GetPCLK2Freq>
 80058dc:	4602      	mov	r2, r0
 80058de:	4613      	mov	r3, r2
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	4413      	add	r3, r2
 80058e4:	009a      	lsls	r2, r3, #2
 80058e6:	441a      	add	r2, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	005b      	lsls	r3, r3, #1
 80058ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80058f2:	4aa3      	ldr	r2, [pc, #652]	; (8005b80 <UART_SetConfig+0x32c>)
 80058f4:	fba2 2303 	umull	r2, r3, r2, r3
 80058f8:	095b      	lsrs	r3, r3, #5
 80058fa:	011c      	lsls	r4, r3, #4
 80058fc:	f7fd fc30 	bl	8003160 <HAL_RCC_GetPCLK2Freq>
 8005900:	4602      	mov	r2, r0
 8005902:	4613      	mov	r3, r2
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	4413      	add	r3, r2
 8005908:	009a      	lsls	r2, r3, #2
 800590a:	441a      	add	r2, r3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	005b      	lsls	r3, r3, #1
 8005912:	fbb2 f5f3 	udiv	r5, r2, r3
 8005916:	f7fd fc23 	bl	8003160 <HAL_RCC_GetPCLK2Freq>
 800591a:	4602      	mov	r2, r0
 800591c:	4613      	mov	r3, r2
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	4413      	add	r3, r2
 8005922:	009a      	lsls	r2, r3, #2
 8005924:	441a      	add	r2, r3
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	005b      	lsls	r3, r3, #1
 800592c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005930:	4a93      	ldr	r2, [pc, #588]	; (8005b80 <UART_SetConfig+0x32c>)
 8005932:	fba2 2303 	umull	r2, r3, r2, r3
 8005936:	095b      	lsrs	r3, r3, #5
 8005938:	2264      	movs	r2, #100	; 0x64
 800593a:	fb02 f303 	mul.w	r3, r2, r3
 800593e:	1aeb      	subs	r3, r5, r3
 8005940:	00db      	lsls	r3, r3, #3
 8005942:	3332      	adds	r3, #50	; 0x32
 8005944:	4a8e      	ldr	r2, [pc, #568]	; (8005b80 <UART_SetConfig+0x32c>)
 8005946:	fba2 2303 	umull	r2, r3, r2, r3
 800594a:	095b      	lsrs	r3, r3, #5
 800594c:	005b      	lsls	r3, r3, #1
 800594e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005952:	441c      	add	r4, r3
 8005954:	f7fd fc04 	bl	8003160 <HAL_RCC_GetPCLK2Freq>
 8005958:	4602      	mov	r2, r0
 800595a:	4613      	mov	r3, r2
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	4413      	add	r3, r2
 8005960:	009a      	lsls	r2, r3, #2
 8005962:	441a      	add	r2, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	005b      	lsls	r3, r3, #1
 800596a:	fbb2 f5f3 	udiv	r5, r2, r3
 800596e:	f7fd fbf7 	bl	8003160 <HAL_RCC_GetPCLK2Freq>
 8005972:	4602      	mov	r2, r0
 8005974:	4613      	mov	r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	4413      	add	r3, r2
 800597a:	009a      	lsls	r2, r3, #2
 800597c:	441a      	add	r2, r3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	005b      	lsls	r3, r3, #1
 8005984:	fbb2 f3f3 	udiv	r3, r2, r3
 8005988:	4a7d      	ldr	r2, [pc, #500]	; (8005b80 <UART_SetConfig+0x32c>)
 800598a:	fba2 2303 	umull	r2, r3, r2, r3
 800598e:	095b      	lsrs	r3, r3, #5
 8005990:	2264      	movs	r2, #100	; 0x64
 8005992:	fb02 f303 	mul.w	r3, r2, r3
 8005996:	1aeb      	subs	r3, r5, r3
 8005998:	00db      	lsls	r3, r3, #3
 800599a:	3332      	adds	r3, #50	; 0x32
 800599c:	4a78      	ldr	r2, [pc, #480]	; (8005b80 <UART_SetConfig+0x32c>)
 800599e:	fba2 2303 	umull	r2, r3, r2, r3
 80059a2:	095b      	lsrs	r3, r3, #5
 80059a4:	f003 0207 	and.w	r2, r3, #7
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4422      	add	r2, r4
 80059ae:	609a      	str	r2, [r3, #8]
 80059b0:	e154      	b.n	8005c5c <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80059b2:	f7fd fbc1 	bl	8003138 <HAL_RCC_GetPCLK1Freq>
 80059b6:	4602      	mov	r2, r0
 80059b8:	4613      	mov	r3, r2
 80059ba:	009b      	lsls	r3, r3, #2
 80059bc:	4413      	add	r3, r2
 80059be:	009a      	lsls	r2, r3, #2
 80059c0:	441a      	add	r2, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	005b      	lsls	r3, r3, #1
 80059c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059cc:	4a6c      	ldr	r2, [pc, #432]	; (8005b80 <UART_SetConfig+0x32c>)
 80059ce:	fba2 2303 	umull	r2, r3, r2, r3
 80059d2:	095b      	lsrs	r3, r3, #5
 80059d4:	011c      	lsls	r4, r3, #4
 80059d6:	f7fd fbaf 	bl	8003138 <HAL_RCC_GetPCLK1Freq>
 80059da:	4602      	mov	r2, r0
 80059dc:	4613      	mov	r3, r2
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	4413      	add	r3, r2
 80059e2:	009a      	lsls	r2, r3, #2
 80059e4:	441a      	add	r2, r3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	005b      	lsls	r3, r3, #1
 80059ec:	fbb2 f5f3 	udiv	r5, r2, r3
 80059f0:	f7fd fba2 	bl	8003138 <HAL_RCC_GetPCLK1Freq>
 80059f4:	4602      	mov	r2, r0
 80059f6:	4613      	mov	r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	4413      	add	r3, r2
 80059fc:	009a      	lsls	r2, r3, #2
 80059fe:	441a      	add	r2, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	005b      	lsls	r3, r3, #1
 8005a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a0a:	4a5d      	ldr	r2, [pc, #372]	; (8005b80 <UART_SetConfig+0x32c>)
 8005a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a10:	095b      	lsrs	r3, r3, #5
 8005a12:	2264      	movs	r2, #100	; 0x64
 8005a14:	fb02 f303 	mul.w	r3, r2, r3
 8005a18:	1aeb      	subs	r3, r5, r3
 8005a1a:	00db      	lsls	r3, r3, #3
 8005a1c:	3332      	adds	r3, #50	; 0x32
 8005a1e:	4a58      	ldr	r2, [pc, #352]	; (8005b80 <UART_SetConfig+0x32c>)
 8005a20:	fba2 2303 	umull	r2, r3, r2, r3
 8005a24:	095b      	lsrs	r3, r3, #5
 8005a26:	005b      	lsls	r3, r3, #1
 8005a28:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a2c:	441c      	add	r4, r3
 8005a2e:	f7fd fb83 	bl	8003138 <HAL_RCC_GetPCLK1Freq>
 8005a32:	4602      	mov	r2, r0
 8005a34:	4613      	mov	r3, r2
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	4413      	add	r3, r2
 8005a3a:	009a      	lsls	r2, r3, #2
 8005a3c:	441a      	add	r2, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	005b      	lsls	r3, r3, #1
 8005a44:	fbb2 f5f3 	udiv	r5, r2, r3
 8005a48:	f7fd fb76 	bl	8003138 <HAL_RCC_GetPCLK1Freq>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	4613      	mov	r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	4413      	add	r3, r2
 8005a54:	009a      	lsls	r2, r3, #2
 8005a56:	441a      	add	r2, r3
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	005b      	lsls	r3, r3, #1
 8005a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a62:	4a47      	ldr	r2, [pc, #284]	; (8005b80 <UART_SetConfig+0x32c>)
 8005a64:	fba2 2303 	umull	r2, r3, r2, r3
 8005a68:	095b      	lsrs	r3, r3, #5
 8005a6a:	2264      	movs	r2, #100	; 0x64
 8005a6c:	fb02 f303 	mul.w	r3, r2, r3
 8005a70:	1aeb      	subs	r3, r5, r3
 8005a72:	00db      	lsls	r3, r3, #3
 8005a74:	3332      	adds	r3, #50	; 0x32
 8005a76:	4a42      	ldr	r2, [pc, #264]	; (8005b80 <UART_SetConfig+0x32c>)
 8005a78:	fba2 2303 	umull	r2, r3, r2, r3
 8005a7c:	095b      	lsrs	r3, r3, #5
 8005a7e:	f003 0207 	and.w	r2, r3, #7
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4422      	add	r2, r4
 8005a88:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8005a8a:	e0e7      	b.n	8005c5c <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a39      	ldr	r2, [pc, #228]	; (8005b78 <UART_SetConfig+0x324>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d004      	beq.n	8005aa0 <UART_SetConfig+0x24c>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a38      	ldr	r2, [pc, #224]	; (8005b7c <UART_SetConfig+0x328>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d171      	bne.n	8005b84 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005aa0:	f7fd fb5e 	bl	8003160 <HAL_RCC_GetPCLK2Freq>
 8005aa4:	4602      	mov	r2, r0
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	009b      	lsls	r3, r3, #2
 8005aaa:	4413      	add	r3, r2
 8005aac:	009a      	lsls	r2, r3, #2
 8005aae:	441a      	add	r2, r3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aba:	4a31      	ldr	r2, [pc, #196]	; (8005b80 <UART_SetConfig+0x32c>)
 8005abc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ac0:	095b      	lsrs	r3, r3, #5
 8005ac2:	011c      	lsls	r4, r3, #4
 8005ac4:	f7fd fb4c 	bl	8003160 <HAL_RCC_GetPCLK2Freq>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	4613      	mov	r3, r2
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	4413      	add	r3, r2
 8005ad0:	009a      	lsls	r2, r3, #2
 8005ad2:	441a      	add	r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	fbb2 f5f3 	udiv	r5, r2, r3
 8005ade:	f7fd fb3f 	bl	8003160 <HAL_RCC_GetPCLK2Freq>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	4413      	add	r3, r2
 8005aea:	009a      	lsls	r2, r3, #2
 8005aec:	441a      	add	r2, r3
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005af8:	4a21      	ldr	r2, [pc, #132]	; (8005b80 <UART_SetConfig+0x32c>)
 8005afa:	fba2 2303 	umull	r2, r3, r2, r3
 8005afe:	095b      	lsrs	r3, r3, #5
 8005b00:	2264      	movs	r2, #100	; 0x64
 8005b02:	fb02 f303 	mul.w	r3, r2, r3
 8005b06:	1aeb      	subs	r3, r5, r3
 8005b08:	011b      	lsls	r3, r3, #4
 8005b0a:	3332      	adds	r3, #50	; 0x32
 8005b0c:	4a1c      	ldr	r2, [pc, #112]	; (8005b80 <UART_SetConfig+0x32c>)
 8005b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b12:	095b      	lsrs	r3, r3, #5
 8005b14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b18:	441c      	add	r4, r3
 8005b1a:	f7fd fb21 	bl	8003160 <HAL_RCC_GetPCLK2Freq>
 8005b1e:	4602      	mov	r2, r0
 8005b20:	4613      	mov	r3, r2
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	4413      	add	r3, r2
 8005b26:	009a      	lsls	r2, r3, #2
 8005b28:	441a      	add	r2, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	fbb2 f5f3 	udiv	r5, r2, r3
 8005b34:	f7fd fb14 	bl	8003160 <HAL_RCC_GetPCLK2Freq>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	4413      	add	r3, r2
 8005b40:	009a      	lsls	r2, r3, #2
 8005b42:	441a      	add	r2, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b4e:	4a0c      	ldr	r2, [pc, #48]	; (8005b80 <UART_SetConfig+0x32c>)
 8005b50:	fba2 2303 	umull	r2, r3, r2, r3
 8005b54:	095b      	lsrs	r3, r3, #5
 8005b56:	2264      	movs	r2, #100	; 0x64
 8005b58:	fb02 f303 	mul.w	r3, r2, r3
 8005b5c:	1aeb      	subs	r3, r5, r3
 8005b5e:	011b      	lsls	r3, r3, #4
 8005b60:	3332      	adds	r3, #50	; 0x32
 8005b62:	4a07      	ldr	r2, [pc, #28]	; (8005b80 <UART_SetConfig+0x32c>)
 8005b64:	fba2 2303 	umull	r2, r3, r2, r3
 8005b68:	095b      	lsrs	r3, r3, #5
 8005b6a:	f003 020f 	and.w	r2, r3, #15
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4422      	add	r2, r4
 8005b74:	609a      	str	r2, [r3, #8]
 8005b76:	e071      	b.n	8005c5c <UART_SetConfig+0x408>
 8005b78:	40011000 	.word	0x40011000
 8005b7c:	40011400 	.word	0x40011400
 8005b80:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005b84:	f7fd fad8 	bl	8003138 <HAL_RCC_GetPCLK1Freq>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	4613      	mov	r3, r2
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	4413      	add	r3, r2
 8005b90:	009a      	lsls	r2, r3, #2
 8005b92:	441a      	add	r2, r3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b9e:	4a31      	ldr	r2, [pc, #196]	; (8005c64 <UART_SetConfig+0x410>)
 8005ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba4:	095b      	lsrs	r3, r3, #5
 8005ba6:	011c      	lsls	r4, r3, #4
 8005ba8:	f7fd fac6 	bl	8003138 <HAL_RCC_GetPCLK1Freq>
 8005bac:	4602      	mov	r2, r0
 8005bae:	4613      	mov	r3, r2
 8005bb0:	009b      	lsls	r3, r3, #2
 8005bb2:	4413      	add	r3, r2
 8005bb4:	009a      	lsls	r2, r3, #2
 8005bb6:	441a      	add	r2, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	fbb2 f5f3 	udiv	r5, r2, r3
 8005bc2:	f7fd fab9 	bl	8003138 <HAL_RCC_GetPCLK1Freq>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	4613      	mov	r3, r2
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	4413      	add	r3, r2
 8005bce:	009a      	lsls	r2, r3, #2
 8005bd0:	441a      	add	r2, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bdc:	4a21      	ldr	r2, [pc, #132]	; (8005c64 <UART_SetConfig+0x410>)
 8005bde:	fba2 2303 	umull	r2, r3, r2, r3
 8005be2:	095b      	lsrs	r3, r3, #5
 8005be4:	2264      	movs	r2, #100	; 0x64
 8005be6:	fb02 f303 	mul.w	r3, r2, r3
 8005bea:	1aeb      	subs	r3, r5, r3
 8005bec:	011b      	lsls	r3, r3, #4
 8005bee:	3332      	adds	r3, #50	; 0x32
 8005bf0:	4a1c      	ldr	r2, [pc, #112]	; (8005c64 <UART_SetConfig+0x410>)
 8005bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bf6:	095b      	lsrs	r3, r3, #5
 8005bf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bfc:	441c      	add	r4, r3
 8005bfe:	f7fd fa9b 	bl	8003138 <HAL_RCC_GetPCLK1Freq>
 8005c02:	4602      	mov	r2, r0
 8005c04:	4613      	mov	r3, r2
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	4413      	add	r3, r2
 8005c0a:	009a      	lsls	r2, r3, #2
 8005c0c:	441a      	add	r2, r3
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	685b      	ldr	r3, [r3, #4]
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	fbb2 f5f3 	udiv	r5, r2, r3
 8005c18:	f7fd fa8e 	bl	8003138 <HAL_RCC_GetPCLK1Freq>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	4613      	mov	r3, r2
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	4413      	add	r3, r2
 8005c24:	009a      	lsls	r2, r3, #2
 8005c26:	441a      	add	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	009b      	lsls	r3, r3, #2
 8005c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c32:	4a0c      	ldr	r2, [pc, #48]	; (8005c64 <UART_SetConfig+0x410>)
 8005c34:	fba2 2303 	umull	r2, r3, r2, r3
 8005c38:	095b      	lsrs	r3, r3, #5
 8005c3a:	2264      	movs	r2, #100	; 0x64
 8005c3c:	fb02 f303 	mul.w	r3, r2, r3
 8005c40:	1aeb      	subs	r3, r5, r3
 8005c42:	011b      	lsls	r3, r3, #4
 8005c44:	3332      	adds	r3, #50	; 0x32
 8005c46:	4a07      	ldr	r2, [pc, #28]	; (8005c64 <UART_SetConfig+0x410>)
 8005c48:	fba2 2303 	umull	r2, r3, r2, r3
 8005c4c:	095b      	lsrs	r3, r3, #5
 8005c4e:	f003 020f 	and.w	r2, r3, #15
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4422      	add	r2, r4
 8005c58:	609a      	str	r2, [r3, #8]
}
 8005c5a:	e7ff      	b.n	8005c5c <UART_SetConfig+0x408>
 8005c5c:	bf00      	nop
 8005c5e:	3710      	adds	r7, #16
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bdb0      	pop	{r4, r5, r7, pc}
 8005c64:	51eb851f 	.word	0x51eb851f

08005c68 <currentControl>:
}



inline void currentControl(void)
{
 8005c68:	b590      	push	{r4, r7, lr}
 8005c6a:	b083      	sub	sp, #12
 8005c6c:	af00      	add	r7, sp, #0



	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_SET);
 8005c6e:	2201      	movs	r2, #1
 8005c70:	2140      	movs	r1, #64	; 0x40
 8005c72:	48bb      	ldr	r0, [pc, #748]	; (8005f60 <currentControl+0x2f8>)
 8005c74:	f7fd f93e 	bl	8002ef4 <HAL_GPIO_WritePin>



	if(forced_commute_enable)
 8005c78:	4bba      	ldr	r3, [pc, #744]	; (8005f64 <currentControl+0x2fc>)
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d075      	beq.n	8005d6e <currentControl+0x106>
	{
		float _forced_theta_re = fmodf(forced_theta * POLES / 2, 2.0f * M_PI);
 8005c82:	4bb9      	ldr	r3, [pc, #740]	; (8005f68 <currentControl+0x300>)
 8005c84:	edd3 7a00 	vldr	s15, [r3]
 8005c88:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 8005c8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c90:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005c94:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005c98:	eddf 0ab4 	vldr	s1, [pc, #720]	; 8005f6c <currentControl+0x304>
 8005c9c:	eeb0 0a66 	vmov.f32	s0, s13
 8005ca0:	f003 fc7c 	bl	800959c <fmodf>
 8005ca4:	ed87 0a01 	vstr	s0, [r7, #4]

		if(_forced_theta_re < 0.0f)				forced_theta_re = _forced_theta_re + 2 * M_PI;
 8005ca8:	edd7 7a01 	vldr	s15, [r7, #4]
 8005cac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cb4:	d511      	bpl.n	8005cda <currentControl+0x72>
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f7fa fc0a 	bl	80004d0 <__aeabi_f2d>
 8005cbc:	a3a4      	add	r3, pc, #656	; (adr r3, 8005f50 <currentControl+0x2e8>)
 8005cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc2:	f7fa faa7 	bl	8000214 <__adddf3>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	460c      	mov	r4, r1
 8005cca:	4618      	mov	r0, r3
 8005ccc:	4621      	mov	r1, r4
 8005cce:	f7fa fef1 	bl	8000ab4 <__aeabi_d2f>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	4ba6      	ldr	r3, [pc, #664]	; (8005f70 <currentControl+0x308>)
 8005cd6:	601a      	str	r2, [r3, #0]
 8005cd8:	e01f      	b.n	8005d1a <currentControl+0xb2>
		else if(_forced_theta_re >= 2 * M_PI)	forced_theta_re = _forced_theta_re - 2 * M_PI;
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f7fa fbf8 	bl	80004d0 <__aeabi_f2d>
 8005ce0:	a39b      	add	r3, pc, #620	; (adr r3, 8005f50 <currentControl+0x2e8>)
 8005ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce6:	f7fa fed1 	bl	8000a8c <__aeabi_dcmpge>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d011      	beq.n	8005d14 <currentControl+0xac>
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f7fa fbed 	bl	80004d0 <__aeabi_f2d>
 8005cf6:	a396      	add	r3, pc, #600	; (adr r3, 8005f50 <currentControl+0x2e8>)
 8005cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cfc:	f7fa fa88 	bl	8000210 <__aeabi_dsub>
 8005d00:	4603      	mov	r3, r0
 8005d02:	460c      	mov	r4, r1
 8005d04:	4618      	mov	r0, r3
 8005d06:	4621      	mov	r1, r4
 8005d08:	f7fa fed4 	bl	8000ab4 <__aeabi_d2f>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	4b98      	ldr	r3, [pc, #608]	; (8005f70 <currentControl+0x308>)
 8005d10:	601a      	str	r2, [r3, #0]
 8005d12:	e002      	b.n	8005d1a <currentControl+0xb2>
		else									forced_theta_re = _forced_theta_re;
 8005d14:	4a96      	ldr	r2, [pc, #600]	; (8005f70 <currentControl+0x308>)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6013      	str	r3, [r2, #0]

		cos_theta_re = sin_table2[(int)((forced_theta_re * 0.3183f + 0.5f) * 5000.0f)];
 8005d1a:	4b95      	ldr	r3, [pc, #596]	; (8005f70 <currentControl+0x308>)
 8005d1c:	edd3 7a00 	vldr	s15, [r3]
 8005d20:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8005f74 <currentControl+0x30c>
 8005d24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d28:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005d2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d30:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8005f78 <currentControl+0x310>
 8005d34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d3c:	ee17 3a90 	vmov	r3, s15
 8005d40:	4a8e      	ldr	r2, [pc, #568]	; (8005f7c <currentControl+0x314>)
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	4413      	add	r3, r2
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a8d      	ldr	r2, [pc, #564]	; (8005f80 <currentControl+0x318>)
 8005d4a:	6013      	str	r3, [r2, #0]
		sin_theta_re = sin_table2[(int)(forced_theta_re * 1591.54943f)];
 8005d4c:	4b88      	ldr	r3, [pc, #544]	; (8005f70 <currentControl+0x308>)
 8005d4e:	edd3 7a00 	vldr	s15, [r3]
 8005d52:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8005f84 <currentControl+0x31c>
 8005d56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005d5e:	ee17 3a90 	vmov	r3, s15
 8005d62:	4a86      	ldr	r2, [pc, #536]	; (8005f7c <currentControl+0x314>)
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	4413      	add	r3, r2
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a87      	ldr	r2, [pc, #540]	; (8005f88 <currentControl+0x320>)
 8005d6c:	6013      	str	r3, [r2, #0]



	/********** ACR (Auto Current Regulator) **********/

	if(ACR_enable)
 8005d6e:	4b87      	ldr	r3, [pc, #540]	; (8005f8c <currentControl+0x324>)
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	f000 8187 	beq.w	8006088 <currentControl+0x420>
	{

		refreshEncoder();
 8005d7a:	f002 fa39 	bl	80081f0 <refreshEncoder>

		get_current_dq(&Id, &Iq, sector_SVM, cos_theta_re, sin_theta_re);
 8005d7e:	4b84      	ldr	r3, [pc, #528]	; (8005f90 <currentControl+0x328>)
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	4b7f      	ldr	r3, [pc, #508]	; (8005f80 <currentControl+0x318>)
 8005d84:	edd3 7a00 	vldr	s15, [r3]
 8005d88:	4b7f      	ldr	r3, [pc, #508]	; (8005f88 <currentControl+0x320>)
 8005d8a:	ed93 7a00 	vldr	s14, [r3]
 8005d8e:	eef0 0a47 	vmov.f32	s1, s14
 8005d92:	eeb0 0a67 	vmov.f32	s0, s15
 8005d96:	497f      	ldr	r1, [pc, #508]	; (8005f94 <currentControl+0x32c>)
 8005d98:	487f      	ldr	r0, [pc, #508]	; (8005f98 <currentControl+0x330>)
 8005d9a:	f000 fe47 	bl	8006a2c <get_current_dq>


		if(theta_re < M_PI)
 8005d9e:	4b7f      	ldr	r3, [pc, #508]	; (8005f9c <currentControl+0x334>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4618      	mov	r0, r3
 8005da4:	f7fa fb94 	bl	80004d0 <__aeabi_f2d>
 8005da8:	a36b      	add	r3, pc, #428	; (adr r3, 8005f58 <currentControl+0x2f0>)
 8005daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dae:	f7fa fe59 	bl	8000a64 <__aeabi_dcmplt>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d005      	beq.n	8005dc4 <currentControl+0x15c>
			HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_RESET);
 8005db8:	2200      	movs	r2, #0
 8005dba:	2140      	movs	r1, #64	; 0x40
 8005dbc:	4878      	ldr	r0, [pc, #480]	; (8005fa0 <currentControl+0x338>)
 8005dbe:	f7fd f899 	bl	8002ef4 <HAL_GPIO_WritePin>
 8005dc2:	e004      	b.n	8005dce <currentControl+0x166>
		else
			HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_SET);
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	2140      	movs	r1, #64	; 0x40
 8005dc8:	4875      	ldr	r0, [pc, #468]	; (8005fa0 <currentControl+0x338>)
 8005dca:	f7fd f893 	bl	8002ef4 <HAL_GPIO_WritePin>




		if(Id_ref < -Id_limit)		_Id_ref = -Id_limit;
 8005dce:	4b75      	ldr	r3, [pc, #468]	; (8005fa4 <currentControl+0x33c>)
 8005dd0:	edd3 7a00 	vldr	s15, [r3]
 8005dd4:	eeb1 7a67 	vneg.f32	s14, s15
 8005dd8:	4b73      	ldr	r3, [pc, #460]	; (8005fa8 <currentControl+0x340>)
 8005dda:	edd3 7a00 	vldr	s15, [r3]
 8005dde:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005de6:	dd08      	ble.n	8005dfa <currentControl+0x192>
 8005de8:	4b6e      	ldr	r3, [pc, #440]	; (8005fa4 <currentControl+0x33c>)
 8005dea:	edd3 7a00 	vldr	s15, [r3]
 8005dee:	eef1 7a67 	vneg.f32	s15, s15
 8005df2:	4b6e      	ldr	r3, [pc, #440]	; (8005fac <currentControl+0x344>)
 8005df4:	edc3 7a00 	vstr	s15, [r3]
 8005df8:	e013      	b.n	8005e22 <currentControl+0x1ba>
		else if(Id_ref > Id_limit)	_Id_ref = Id_limit;
 8005dfa:	4b6b      	ldr	r3, [pc, #428]	; (8005fa8 <currentControl+0x340>)
 8005dfc:	ed93 7a00 	vldr	s14, [r3]
 8005e00:	4b68      	ldr	r3, [pc, #416]	; (8005fa4 <currentControl+0x33c>)
 8005e02:	edd3 7a00 	vldr	s15, [r3]
 8005e06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e0e:	dd04      	ble.n	8005e1a <currentControl+0x1b2>
 8005e10:	4b64      	ldr	r3, [pc, #400]	; (8005fa4 <currentControl+0x33c>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a65      	ldr	r2, [pc, #404]	; (8005fac <currentControl+0x344>)
 8005e16:	6013      	str	r3, [r2, #0]
 8005e18:	e003      	b.n	8005e22 <currentControl+0x1ba>
		else						_Id_ref = Id_ref;
 8005e1a:	4b63      	ldr	r3, [pc, #396]	; (8005fa8 <currentControl+0x340>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a63      	ldr	r2, [pc, #396]	; (8005fac <currentControl+0x344>)
 8005e20:	6013      	str	r3, [r2, #0]

		if(Iq_ref < -Iq_limit)		_Iq_ref = -Iq_limit;
 8005e22:	4b63      	ldr	r3, [pc, #396]	; (8005fb0 <currentControl+0x348>)
 8005e24:	edd3 7a00 	vldr	s15, [r3]
 8005e28:	eeb1 7a67 	vneg.f32	s14, s15
 8005e2c:	4b61      	ldr	r3, [pc, #388]	; (8005fb4 <currentControl+0x34c>)
 8005e2e:	edd3 7a00 	vldr	s15, [r3]
 8005e32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e3a:	dd08      	ble.n	8005e4e <currentControl+0x1e6>
 8005e3c:	4b5c      	ldr	r3, [pc, #368]	; (8005fb0 <currentControl+0x348>)
 8005e3e:	edd3 7a00 	vldr	s15, [r3]
 8005e42:	eef1 7a67 	vneg.f32	s15, s15
 8005e46:	4b5c      	ldr	r3, [pc, #368]	; (8005fb8 <currentControl+0x350>)
 8005e48:	edc3 7a00 	vstr	s15, [r3]
 8005e4c:	e013      	b.n	8005e76 <currentControl+0x20e>
		else if(Iq_ref > Iq_limit)	_Iq_ref = Iq_limit;
 8005e4e:	4b59      	ldr	r3, [pc, #356]	; (8005fb4 <currentControl+0x34c>)
 8005e50:	ed93 7a00 	vldr	s14, [r3]
 8005e54:	4b56      	ldr	r3, [pc, #344]	; (8005fb0 <currentControl+0x348>)
 8005e56:	edd3 7a00 	vldr	s15, [r3]
 8005e5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e62:	dd04      	ble.n	8005e6e <currentControl+0x206>
 8005e64:	4b52      	ldr	r3, [pc, #328]	; (8005fb0 <currentControl+0x348>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a53      	ldr	r2, [pc, #332]	; (8005fb8 <currentControl+0x350>)
 8005e6a:	6013      	str	r3, [r2, #0]
 8005e6c:	e003      	b.n	8005e76 <currentControl+0x20e>
		else						_Iq_ref = Iq_ref;
 8005e6e:	4b51      	ldr	r3, [pc, #324]	; (8005fb4 <currentControl+0x34c>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a51      	ldr	r2, [pc, #324]	; (8005fb8 <currentControl+0x350>)
 8005e74:	6013      	str	r3, [r2, #0]


		Id_error = _Id_ref - Id;
 8005e76:	4b4d      	ldr	r3, [pc, #308]	; (8005fac <currentControl+0x344>)
 8005e78:	ed93 7a00 	vldr	s14, [r3]
 8005e7c:	4b46      	ldr	r3, [pc, #280]	; (8005f98 <currentControl+0x330>)
 8005e7e:	edd3 7a00 	vldr	s15, [r3]
 8005e82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e86:	4b4d      	ldr	r3, [pc, #308]	; (8005fbc <currentControl+0x354>)
 8005e88:	edc3 7a00 	vstr	s15, [r3]
		Iq_error = _Iq_ref - Iq;
 8005e8c:	4b4a      	ldr	r3, [pc, #296]	; (8005fb8 <currentControl+0x350>)
 8005e8e:	ed93 7a00 	vldr	s14, [r3]
 8005e92:	4b40      	ldr	r3, [pc, #256]	; (8005f94 <currentControl+0x32c>)
 8005e94:	edd3 7a00 	vldr	s15, [r3]
 8005e98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e9c:	4b48      	ldr	r3, [pc, #288]	; (8005fc0 <currentControl+0x358>)
 8005e9e:	edc3 7a00 	vstr	s15, [r3]


		// integral
		Id_error_integ_temp1 = Id_error + Id_error_integ_temp2;
 8005ea2:	4b46      	ldr	r3, [pc, #280]	; (8005fbc <currentControl+0x354>)
 8005ea4:	ed93 7a00 	vldr	s14, [r3]
 8005ea8:	4b46      	ldr	r3, [pc, #280]	; (8005fc4 <currentControl+0x35c>)
 8005eaa:	edd3 7a00 	vldr	s15, [r3]
 8005eae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005eb2:	4b45      	ldr	r3, [pc, #276]	; (8005fc8 <currentControl+0x360>)
 8005eb4:	edc3 7a00 	vstr	s15, [r3]
		if(Id_error_integ_temp1 < -1000000.0) Id_error_integ_temp1 = -1000000.0;
 8005eb8:	4b43      	ldr	r3, [pc, #268]	; (8005fc8 <currentControl+0x360>)
 8005eba:	edd3 7a00 	vldr	s15, [r3]
 8005ebe:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8005fcc <currentControl+0x364>
 8005ec2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005eca:	d503      	bpl.n	8005ed4 <currentControl+0x26c>
 8005ecc:	4b3e      	ldr	r3, [pc, #248]	; (8005fc8 <currentControl+0x360>)
 8005ece:	4a40      	ldr	r2, [pc, #256]	; (8005fd0 <currentControl+0x368>)
 8005ed0:	601a      	str	r2, [r3, #0]
 8005ed2:	e00c      	b.n	8005eee <currentControl+0x286>
		else if(Id_error_integ_temp1 > 1000000.0) Id_error_integ_temp1 = 1000000.0;
 8005ed4:	4b3c      	ldr	r3, [pc, #240]	; (8005fc8 <currentControl+0x360>)
 8005ed6:	edd3 7a00 	vldr	s15, [r3]
 8005eda:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8005fd4 <currentControl+0x36c>
 8005ede:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ee6:	dd02      	ble.n	8005eee <currentControl+0x286>
 8005ee8:	4b37      	ldr	r3, [pc, #220]	; (8005fc8 <currentControl+0x360>)
 8005eea:	4a3b      	ldr	r2, [pc, #236]	; (8005fd8 <currentControl+0x370>)
 8005eec:	601a      	str	r2, [r3, #0]
		Id_error_integ = ACR_cycleTime * 0.5f * (Id_error_integ_temp1 + Id_error_integ_temp2);
 8005eee:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8005fdc <currentControl+0x374>
 8005ef2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8005ef6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005efa:	4b33      	ldr	r3, [pc, #204]	; (8005fc8 <currentControl+0x360>)
 8005efc:	edd3 6a00 	vldr	s13, [r3]
 8005f00:	4b30      	ldr	r3, [pc, #192]	; (8005fc4 <currentControl+0x35c>)
 8005f02:	edd3 7a00 	vldr	s15, [r3]
 8005f06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f0e:	4b34      	ldr	r3, [pc, #208]	; (8005fe0 <currentControl+0x378>)
 8005f10:	edc3 7a00 	vstr	s15, [r3]
		Id_error_integ_temp2 = Id_error_integ_temp1;
 8005f14:	4b2c      	ldr	r3, [pc, #176]	; (8005fc8 <currentControl+0x360>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a2a      	ldr	r2, [pc, #168]	; (8005fc4 <currentControl+0x35c>)
 8005f1a:	6013      	str	r3, [r2, #0]

		Iq_error_integ_temp1 = Iq_error + Iq_error_integ_temp2;
 8005f1c:	4b28      	ldr	r3, [pc, #160]	; (8005fc0 <currentControl+0x358>)
 8005f1e:	ed93 7a00 	vldr	s14, [r3]
 8005f22:	4b30      	ldr	r3, [pc, #192]	; (8005fe4 <currentControl+0x37c>)
 8005f24:	edd3 7a00 	vldr	s15, [r3]
 8005f28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f2c:	4b2e      	ldr	r3, [pc, #184]	; (8005fe8 <currentControl+0x380>)
 8005f2e:	edc3 7a00 	vstr	s15, [r3]
		if(Iq_error_integ_temp1 < -1000000.0) Iq_error_integ_temp1 = -1000000.0;
 8005f32:	4b2d      	ldr	r3, [pc, #180]	; (8005fe8 <currentControl+0x380>)
 8005f34:	edd3 7a00 	vldr	s15, [r3]
 8005f38:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8005fcc <currentControl+0x364>
 8005f3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f44:	d552      	bpl.n	8005fec <currentControl+0x384>
 8005f46:	4b28      	ldr	r3, [pc, #160]	; (8005fe8 <currentControl+0x380>)
 8005f48:	4a21      	ldr	r2, [pc, #132]	; (8005fd0 <currentControl+0x368>)
 8005f4a:	601a      	str	r2, [r3, #0]
 8005f4c:	e05b      	b.n	8006006 <currentControl+0x39e>
 8005f4e:	bf00      	nop
 8005f50:	54442d18 	.word	0x54442d18
 8005f54:	401921fb 	.word	0x401921fb
 8005f58:	54442d18 	.word	0x54442d18
 8005f5c:	400921fb 	.word	0x400921fb
 8005f60:	40020400 	.word	0x40020400
 8005f64:	200001e4 	.word	0x200001e4
 8005f68:	200000f4 	.word	0x200000f4
 8005f6c:	40c90fdb 	.word	0x40c90fdb
 8005f70:	200000f8 	.word	0x200000f8
 8005f74:	3ea2f838 	.word	0x3ea2f838
 8005f78:	459c4000 	.word	0x459c4000
 8005f7c:	080097c8 	.word	0x080097c8
 8005f80:	20000034 	.word	0x20000034
 8005f84:	44c6f195 	.word	0x44c6f195
 8005f88:	200001e0 	.word	0x200001e0
 8005f8c:	200000c0 	.word	0x200000c0
 8005f90:	20000190 	.word	0x20000190
 8005f94:	200000d0 	.word	0x200000d0
 8005f98:	200000cc 	.word	0x200000cc
 8005f9c:	200001dc 	.word	0x200001dc
 8005fa0:	40020000 	.word	0x40020000
 8005fa4:	20000010 	.word	0x20000010
 8005fa8:	200000c4 	.word	0x200000c4
 8005fac:	2000020c 	.word	0x2000020c
 8005fb0:	20000014 	.word	0x20000014
 8005fb4:	200000c8 	.word	0x200000c8
 8005fb8:	20000210 	.word	0x20000210
 8005fbc:	200000d4 	.word	0x200000d4
 8005fc0:	200000d8 	.word	0x200000d8
 8005fc4:	200000e8 	.word	0x200000e8
 8005fc8:	200000e4 	.word	0x200000e4
 8005fcc:	c9742400 	.word	0xc9742400
 8005fd0:	c9742400 	.word	0xc9742400
 8005fd4:	49742400 	.word	0x49742400
 8005fd8:	49742400 	.word	0x49742400
 8005fdc:	38d1b717 	.word	0x38d1b717
 8005fe0:	200000dc 	.word	0x200000dc
 8005fe4:	200000f0 	.word	0x200000f0
 8005fe8:	200000ec 	.word	0x200000ec
		else if(Iq_error_integ_temp1 > 1000000.0) Iq_error_integ_temp1 = 1000000.0;
 8005fec:	4b39      	ldr	r3, [pc, #228]	; (80060d4 <currentControl+0x46c>)
 8005fee:	edd3 7a00 	vldr	s15, [r3]
 8005ff2:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80060d8 <currentControl+0x470>
 8005ff6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ffe:	dd02      	ble.n	8006006 <currentControl+0x39e>
 8006000:	4b34      	ldr	r3, [pc, #208]	; (80060d4 <currentControl+0x46c>)
 8006002:	4a36      	ldr	r2, [pc, #216]	; (80060dc <currentControl+0x474>)
 8006004:	601a      	str	r2, [r3, #0]
		Iq_error_integ = ACR_cycleTime * 0.5f * (Iq_error_integ_temp1 + Iq_error_integ_temp2);
 8006006:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80060e0 <currentControl+0x478>
 800600a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800600e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006012:	4b30      	ldr	r3, [pc, #192]	; (80060d4 <currentControl+0x46c>)
 8006014:	edd3 6a00 	vldr	s13, [r3]
 8006018:	4b32      	ldr	r3, [pc, #200]	; (80060e4 <currentControl+0x47c>)
 800601a:	edd3 7a00 	vldr	s15, [r3]
 800601e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006022:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006026:	4b30      	ldr	r3, [pc, #192]	; (80060e8 <currentControl+0x480>)
 8006028:	edc3 7a00 	vstr	s15, [r3]
		Iq_error_integ_temp2 = Iq_error_integ_temp1;
 800602c:	4b29      	ldr	r3, [pc, #164]	; (80060d4 <currentControl+0x46c>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a2c      	ldr	r2, [pc, #176]	; (80060e4 <currentControl+0x47c>)
 8006032:	6013      	str	r3, [r2, #0]


		Vd_ref = Kp_ACR * Id_error + Ki_ACR * Id_error_integ;
 8006034:	4b2d      	ldr	r3, [pc, #180]	; (80060ec <currentControl+0x484>)
 8006036:	ed93 7a00 	vldr	s14, [r3]
 800603a:	4b2d      	ldr	r3, [pc, #180]	; (80060f0 <currentControl+0x488>)
 800603c:	edd3 7a00 	vldr	s15, [r3]
 8006040:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006044:	4b2b      	ldr	r3, [pc, #172]	; (80060f4 <currentControl+0x48c>)
 8006046:	edd3 6a00 	vldr	s13, [r3]
 800604a:	4b2b      	ldr	r3, [pc, #172]	; (80060f8 <currentControl+0x490>)
 800604c:	edd3 7a00 	vldr	s15, [r3]
 8006050:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006054:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006058:	4b28      	ldr	r3, [pc, #160]	; (80060fc <currentControl+0x494>)
 800605a:	edc3 7a00 	vstr	s15, [r3]
		Vq_ref = Kp_ACR * Iq_error + Ki_ACR * Iq_error_integ;
 800605e:	4b23      	ldr	r3, [pc, #140]	; (80060ec <currentControl+0x484>)
 8006060:	ed93 7a00 	vldr	s14, [r3]
 8006064:	4b26      	ldr	r3, [pc, #152]	; (8006100 <currentControl+0x498>)
 8006066:	edd3 7a00 	vldr	s15, [r3]
 800606a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800606e:	4b21      	ldr	r3, [pc, #132]	; (80060f4 <currentControl+0x48c>)
 8006070:	edd3 6a00 	vldr	s13, [r3]
 8006074:	4b1c      	ldr	r3, [pc, #112]	; (80060e8 <currentControl+0x480>)
 8006076:	edd3 7a00 	vldr	s15, [r3]
 800607a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800607e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006082:	4b20      	ldr	r3, [pc, #128]	; (8006104 <currentControl+0x49c>)
 8006084:	edc3 7a00 	vstr	s15, [r3]
	}

	/********* end of ACR **********/


	if(HAL_GPIO_ReadPin(BR_FLT_GPIO_Port, BR_FLT_Pin) == GPIO_PIN_RESET)
 8006088:	f44f 7180 	mov.w	r1, #256	; 0x100
 800608c:	481e      	ldr	r0, [pc, #120]	; (8006108 <currentControl+0x4a0>)
 800608e:	f7fc ff19 	bl	8002ec4 <HAL_GPIO_ReadPin>
	{
		//HAL_NVIC_SystemReset();
	}


	setSVM_dq();
 8006092:	f001 fb6b 	bl	800776c <setSVM_dq>

#endif



	if(!forced_commute_enable)
 8006096:	4b1d      	ldr	r3, [pc, #116]	; (800610c <currentControl+0x4a4>)
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	b2db      	uxtb	r3, r3
 800609c:	2b00      	cmp	r3, #0
 800609e:	d101      	bne.n	80060a4 <currentControl+0x43c>
	{
		requestEncoder();
 80060a0:	f002 f886 	bl	80081b0 <requestEncoder>
	}


	// Auto Speed Regulator launching
	ASR_prescalerCount += 1;
 80060a4:	4b1a      	ldr	r3, [pc, #104]	; (8006110 <currentControl+0x4a8>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	3301      	adds	r3, #1
 80060aa:	4a19      	ldr	r2, [pc, #100]	; (8006110 <currentControl+0x4a8>)
 80060ac:	6013      	str	r3, [r2, #0]
	if(ASR_prescalerCount >= ASR_prescale)
 80060ae:	4b18      	ldr	r3, [pc, #96]	; (8006110 <currentControl+0x4a8>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2b09      	cmp	r3, #9
 80060b4:	dd05      	ble.n	80060c2 <currentControl+0x45a>
	{
		ASR_flg = 1;
 80060b6:	4b17      	ldr	r3, [pc, #92]	; (8006114 <currentControl+0x4ac>)
 80060b8:	2201      	movs	r2, #1
 80060ba:	601a      	str	r2, [r3, #0]
		ASR_prescalerCount = 0;
 80060bc:	4b14      	ldr	r3, [pc, #80]	; (8006110 <currentControl+0x4a8>)
 80060be:	2200      	movs	r2, #0
 80060c0:	601a      	str	r2, [r3, #0]
	}



	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 80060c2:	2200      	movs	r2, #0
 80060c4:	2140      	movs	r1, #64	; 0x40
 80060c6:	4814      	ldr	r0, [pc, #80]	; (8006118 <currentControl+0x4b0>)
 80060c8:	f7fc ff14 	bl	8002ef4 <HAL_GPIO_WritePin>

	return;
 80060cc:	bf00      	nop
}
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd90      	pop	{r4, r7, pc}
 80060d4:	200000ec 	.word	0x200000ec
 80060d8:	49742400 	.word	0x49742400
 80060dc:	49742400 	.word	0x49742400
 80060e0:	38d1b717 	.word	0x38d1b717
 80060e4:	200000f0 	.word	0x200000f0
 80060e8:	200000e0 	.word	0x200000e0
 80060ec:	20000008 	.word	0x20000008
 80060f0:	200000d4 	.word	0x200000d4
 80060f4:	2000000c 	.word	0x2000000c
 80060f8:	200000dc 	.word	0x200000dc
 80060fc:	20000188 	.word	0x20000188
 8006100:	200000d8 	.word	0x200000d8
 8006104:	2000018c 	.word	0x2000018c
 8006108:	40020000 	.word	0x40020000
 800610c:	200001e4 	.word	0x200001e4
 8006110:	20000118 	.word	0x20000118
 8006114:	20000114 	.word	0x20000114
 8006118:	40020400 	.word	0x40020400

0800611c <ACR_Reset>:



inline void ACR_Reset()
{
 800611c:	b480      	push	{r7}
 800611e:	af00      	add	r7, sp, #0

	Id_error_integ_temp1 = 0.0f;
 8006120:	4b14      	ldr	r3, [pc, #80]	; (8006174 <ACR_Reset+0x58>)
 8006122:	f04f 0200 	mov.w	r2, #0
 8006126:	601a      	str	r2, [r3, #0]
	Id_error_integ_temp2 = 0.0f;
 8006128:	4b13      	ldr	r3, [pc, #76]	; (8006178 <ACR_Reset+0x5c>)
 800612a:	f04f 0200 	mov.w	r2, #0
 800612e:	601a      	str	r2, [r3, #0]
	Iq_error_integ_temp1 = 0.0f;
 8006130:	4b12      	ldr	r3, [pc, #72]	; (800617c <ACR_Reset+0x60>)
 8006132:	f04f 0200 	mov.w	r2, #0
 8006136:	601a      	str	r2, [r3, #0]
	Iq_error_integ_temp2 = 0.0f;
 8006138:	4b11      	ldr	r3, [pc, #68]	; (8006180 <ACR_Reset+0x64>)
 800613a:	f04f 0200 	mov.w	r2, #0
 800613e:	601a      	str	r2, [r3, #0]


	Id = Id_ref = 0.0f;
 8006140:	f04f 0300 	mov.w	r3, #0
 8006144:	4a0f      	ldr	r2, [pc, #60]	; (8006184 <ACR_Reset+0x68>)
 8006146:	6013      	str	r3, [r2, #0]
 8006148:	4a0f      	ldr	r2, [pc, #60]	; (8006188 <ACR_Reset+0x6c>)
 800614a:	6013      	str	r3, [r2, #0]
	Iq = Iq_ref = 0.0f;
 800614c:	f04f 0300 	mov.w	r3, #0
 8006150:	4a0e      	ldr	r2, [pc, #56]	; (800618c <ACR_Reset+0x70>)
 8006152:	6013      	str	r3, [r2, #0]
 8006154:	4a0e      	ldr	r2, [pc, #56]	; (8006190 <ACR_Reset+0x74>)
 8006156:	6013      	str	r3, [r2, #0]

	Vd_ref = 0.0f;
 8006158:	4b0e      	ldr	r3, [pc, #56]	; (8006194 <ACR_Reset+0x78>)
 800615a:	f04f 0200 	mov.w	r2, #0
 800615e:	601a      	str	r2, [r3, #0]
	Vq_ref = 0.0f;
 8006160:	4b0d      	ldr	r3, [pc, #52]	; (8006198 <ACR_Reset+0x7c>)
 8006162:	f04f 0200 	mov.w	r2, #0
 8006166:	601a      	str	r2, [r3, #0]

}
 8006168:	bf00      	nop
 800616a:	46bd      	mov	sp, r7
 800616c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006170:	4770      	bx	lr
 8006172:	bf00      	nop
 8006174:	200000e4 	.word	0x200000e4
 8006178:	200000e8 	.word	0x200000e8
 800617c:	200000ec 	.word	0x200000ec
 8006180:	200000f0 	.word	0x200000f0
 8006184:	200000c4 	.word	0x200000c4
 8006188:	200000cc 	.word	0x200000cc
 800618c:	200000c8 	.word	0x200000c8
 8006190:	200000d0 	.word	0x200000d0
 8006194:	20000188 	.word	0x20000188
 8006198:	2000018c 	.word	0x2000018c
 800619c:	00000000 	.word	0x00000000

080061a0 <speedControl>:
}



inline void speedControl()
{
 80061a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80061a4:	af00      	add	r7, sp, #0



	  if(ASR_steps <= 0)
 80061a6:	4bbc      	ldr	r3, [pc, #752]	; (8006498 <speedControl+0x2f8>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	dc04      	bgt.n	80061b8 <speedControl+0x18>
	  {
		  d_theta = 0.0f;
 80061ae:	4bbb      	ldr	r3, [pc, #748]	; (800649c <speedControl+0x2fc>)
 80061b0:	f04f 0200 	mov.w	r2, #0
 80061b4:	601a      	str	r2, [r3, #0]
 80061b6:	e00a      	b.n	80061ce <speedControl+0x2e>
	  }
	  else
	  {
		  d_theta = theta - p_theta;
 80061b8:	4bb9      	ldr	r3, [pc, #740]	; (80064a0 <speedControl+0x300>)
 80061ba:	ed93 7a00 	vldr	s14, [r3]
 80061be:	4bb9      	ldr	r3, [pc, #740]	; (80064a4 <speedControl+0x304>)
 80061c0:	edd3 7a00 	vldr	s15, [r3]
 80061c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061c8:	4bb4      	ldr	r3, [pc, #720]	; (800649c <speedControl+0x2fc>)
 80061ca:	edc3 7a00 	vstr	s15, [r3]
	  }
	  ASR_steps += 1;
 80061ce:	4bb2      	ldr	r3, [pc, #712]	; (8006498 <speedControl+0x2f8>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	3301      	adds	r3, #1
 80061d4:	4ab0      	ldr	r2, [pc, #704]	; (8006498 <speedControl+0x2f8>)
 80061d6:	6013      	str	r3, [r2, #0]

	  p_theta = theta;
 80061d8:	4bb1      	ldr	r3, [pc, #708]	; (80064a0 <speedControl+0x300>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4ab1      	ldr	r2, [pc, #708]	; (80064a4 <speedControl+0x304>)
 80061de:	6013      	str	r3, [r2, #0]

	  if(d_theta < - M_PI)		d_theta += 2 * M_PI;
 80061e0:	4bae      	ldr	r3, [pc, #696]	; (800649c <speedControl+0x2fc>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4618      	mov	r0, r3
 80061e6:	f7fa f973 	bl	80004d0 <__aeabi_f2d>
 80061ea:	a3a3      	add	r3, pc, #652	; (adr r3, 8006478 <speedControl+0x2d8>)
 80061ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f0:	f7fa fc38 	bl	8000a64 <__aeabi_dcmplt>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d013      	beq.n	8006222 <speedControl+0x82>
 80061fa:	4ba8      	ldr	r3, [pc, #672]	; (800649c <speedControl+0x2fc>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4618      	mov	r0, r3
 8006200:	f7fa f966 	bl	80004d0 <__aeabi_f2d>
 8006204:	a39e      	add	r3, pc, #632	; (adr r3, 8006480 <speedControl+0x2e0>)
 8006206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800620a:	f7fa f803 	bl	8000214 <__adddf3>
 800620e:	4603      	mov	r3, r0
 8006210:	460c      	mov	r4, r1
 8006212:	4618      	mov	r0, r3
 8006214:	4621      	mov	r1, r4
 8006216:	f7fa fc4d 	bl	8000ab4 <__aeabi_d2f>
 800621a:	4602      	mov	r2, r0
 800621c:	4b9f      	ldr	r3, [pc, #636]	; (800649c <speedControl+0x2fc>)
 800621e:	601a      	str	r2, [r3, #0]
 8006220:	e01f      	b.n	8006262 <speedControl+0xc2>
	  else if(d_theta > M_PI)	d_theta -= 2 * M_PI;
 8006222:	4b9e      	ldr	r3, [pc, #632]	; (800649c <speedControl+0x2fc>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4618      	mov	r0, r3
 8006228:	f7fa f952 	bl	80004d0 <__aeabi_f2d>
 800622c:	a396      	add	r3, pc, #600	; (adr r3, 8006488 <speedControl+0x2e8>)
 800622e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006232:	f7fa fc35 	bl	8000aa0 <__aeabi_dcmpgt>
 8006236:	4603      	mov	r3, r0
 8006238:	2b00      	cmp	r3, #0
 800623a:	d012      	beq.n	8006262 <speedControl+0xc2>
 800623c:	4b97      	ldr	r3, [pc, #604]	; (800649c <speedControl+0x2fc>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	4618      	mov	r0, r3
 8006242:	f7fa f945 	bl	80004d0 <__aeabi_f2d>
 8006246:	a38e      	add	r3, pc, #568	; (adr r3, 8006480 <speedControl+0x2e0>)
 8006248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800624c:	f7f9 ffe0 	bl	8000210 <__aeabi_dsub>
 8006250:	4603      	mov	r3, r0
 8006252:	460c      	mov	r4, r1
 8006254:	4618      	mov	r0, r3
 8006256:	4621      	mov	r1, r4
 8006258:	f7fa fc2c 	bl	8000ab4 <__aeabi_d2f>
 800625c:	4602      	mov	r2, r0
 800625e:	4b8f      	ldr	r3, [pc, #572]	; (800649c <speedControl+0x2fc>)
 8006260:	601a      	str	r2, [r3, #0]

	  omega = omega * 0.5 + 0.5 * d_theta / ASR_cycleTime;
 8006262:	4b91      	ldr	r3, [pc, #580]	; (80064a8 <speedControl+0x308>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4618      	mov	r0, r3
 8006268:	f7fa f932 	bl	80004d0 <__aeabi_f2d>
 800626c:	f04f 0200 	mov.w	r2, #0
 8006270:	4b8e      	ldr	r3, [pc, #568]	; (80064ac <speedControl+0x30c>)
 8006272:	f7fa f985 	bl	8000580 <__aeabi_dmul>
 8006276:	4603      	mov	r3, r0
 8006278:	460c      	mov	r4, r1
 800627a:	4625      	mov	r5, r4
 800627c:	461c      	mov	r4, r3
 800627e:	4b87      	ldr	r3, [pc, #540]	; (800649c <speedControl+0x2fc>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4618      	mov	r0, r3
 8006284:	f7fa f924 	bl	80004d0 <__aeabi_f2d>
 8006288:	f04f 0200 	mov.w	r2, #0
 800628c:	4b87      	ldr	r3, [pc, #540]	; (80064ac <speedControl+0x30c>)
 800628e:	f7fa f977 	bl	8000580 <__aeabi_dmul>
 8006292:	4602      	mov	r2, r0
 8006294:	460b      	mov	r3, r1
 8006296:	4690      	mov	r8, r2
 8006298:	4699      	mov	r9, r3
 800629a:	4b85      	ldr	r3, [pc, #532]	; (80064b0 <speedControl+0x310>)
 800629c:	4618      	mov	r0, r3
 800629e:	f7fa f917 	bl	80004d0 <__aeabi_f2d>
 80062a2:	4602      	mov	r2, r0
 80062a4:	460b      	mov	r3, r1
 80062a6:	4640      	mov	r0, r8
 80062a8:	4649      	mov	r1, r9
 80062aa:	f7fa fa93 	bl	80007d4 <__aeabi_ddiv>
 80062ae:	4602      	mov	r2, r0
 80062b0:	460b      	mov	r3, r1
 80062b2:	4620      	mov	r0, r4
 80062b4:	4629      	mov	r1, r5
 80062b6:	f7f9 ffad 	bl	8000214 <__adddf3>
 80062ba:	4603      	mov	r3, r0
 80062bc:	460c      	mov	r4, r1
 80062be:	4618      	mov	r0, r3
 80062c0:	4621      	mov	r1, r4
 80062c2:	f7fa fbf7 	bl	8000ab4 <__aeabi_d2f>
 80062c6:	4602      	mov	r2, r0
 80062c8:	4b77      	ldr	r3, [pc, #476]	; (80064a8 <speedControl+0x308>)
 80062ca:	601a      	str	r2, [r3, #0]


	  if(ASR_enable)
 80062cc:	4b79      	ldr	r3, [pc, #484]	; (80064b4 <speedControl+0x314>)
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	b2db      	uxtb	r3, r3
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	f000 80cd 	beq.w	8006472 <speedControl+0x2d2>
	  {

		  if(omega_ref < -omega_limit)		_omega_ref = -omega_limit;
 80062d8:	4b77      	ldr	r3, [pc, #476]	; (80064b8 <speedControl+0x318>)
 80062da:	edd3 7a00 	vldr	s15, [r3]
 80062de:	eeb1 7a67 	vneg.f32	s14, s15
 80062e2:	4b76      	ldr	r3, [pc, #472]	; (80064bc <speedControl+0x31c>)
 80062e4:	edd3 7a00 	vldr	s15, [r3]
 80062e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80062ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062f0:	dd08      	ble.n	8006304 <speedControl+0x164>
 80062f2:	4b71      	ldr	r3, [pc, #452]	; (80064b8 <speedControl+0x318>)
 80062f4:	edd3 7a00 	vldr	s15, [r3]
 80062f8:	eef1 7a67 	vneg.f32	s15, s15
 80062fc:	4b70      	ldr	r3, [pc, #448]	; (80064c0 <speedControl+0x320>)
 80062fe:	edc3 7a00 	vstr	s15, [r3]
 8006302:	e013      	b.n	800632c <speedControl+0x18c>
		  else if(omega_ref > omega_limit)	_omega_ref = omega_limit;
 8006304:	4b6d      	ldr	r3, [pc, #436]	; (80064bc <speedControl+0x31c>)
 8006306:	ed93 7a00 	vldr	s14, [r3]
 800630a:	4b6b      	ldr	r3, [pc, #428]	; (80064b8 <speedControl+0x318>)
 800630c:	edd3 7a00 	vldr	s15, [r3]
 8006310:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006318:	dd04      	ble.n	8006324 <speedControl+0x184>
 800631a:	4b67      	ldr	r3, [pc, #412]	; (80064b8 <speedControl+0x318>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a68      	ldr	r2, [pc, #416]	; (80064c0 <speedControl+0x320>)
 8006320:	6013      	str	r3, [r2, #0]
 8006322:	e003      	b.n	800632c <speedControl+0x18c>
		  else								_omega_ref = omega_ref;
 8006324:	4b65      	ldr	r3, [pc, #404]	; (80064bc <speedControl+0x31c>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a65      	ldr	r2, [pc, #404]	; (80064c0 <speedControl+0x320>)
 800632a:	6013      	str	r3, [r2, #0]

		  omega_error = _omega_ref - omega;
 800632c:	4b64      	ldr	r3, [pc, #400]	; (80064c0 <speedControl+0x320>)
 800632e:	ed93 7a00 	vldr	s14, [r3]
 8006332:	4b5d      	ldr	r3, [pc, #372]	; (80064a8 <speedControl+0x308>)
 8006334:	edd3 7a00 	vldr	s15, [r3]
 8006338:	ee77 7a67 	vsub.f32	s15, s14, s15
 800633c:	4b61      	ldr	r3, [pc, #388]	; (80064c4 <speedControl+0x324>)
 800633e:	edc3 7a00 	vstr	s15, [r3]

		  // integral
		  omega_error_integ_temp1 = omega_error + omega_error_integ_temp2;
 8006342:	4b60      	ldr	r3, [pc, #384]	; (80064c4 <speedControl+0x324>)
 8006344:	ed93 7a00 	vldr	s14, [r3]
 8006348:	4b5f      	ldr	r3, [pc, #380]	; (80064c8 <speedControl+0x328>)
 800634a:	edd3 7a00 	vldr	s15, [r3]
 800634e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006352:	4b5e      	ldr	r3, [pc, #376]	; (80064cc <speedControl+0x32c>)
 8006354:	edc3 7a00 	vstr	s15, [r3]
		  if(omega_error_integ_temp1 < -6.0 / ASR_cycleTime)
 8006358:	4b5c      	ldr	r3, [pc, #368]	; (80064cc <speedControl+0x32c>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4618      	mov	r0, r3
 800635e:	f7fa f8b7 	bl	80004d0 <__aeabi_f2d>
 8006362:	4604      	mov	r4, r0
 8006364:	460d      	mov	r5, r1
 8006366:	4b52      	ldr	r3, [pc, #328]	; (80064b0 <speedControl+0x310>)
 8006368:	4618      	mov	r0, r3
 800636a:	f7fa f8b1 	bl	80004d0 <__aeabi_f2d>
 800636e:	4602      	mov	r2, r0
 8006370:	460b      	mov	r3, r1
 8006372:	f04f 0000 	mov.w	r0, #0
 8006376:	4956      	ldr	r1, [pc, #344]	; (80064d0 <speedControl+0x330>)
 8006378:	f7fa fa2c 	bl	80007d4 <__aeabi_ddiv>
 800637c:	4602      	mov	r2, r0
 800637e:	460b      	mov	r3, r1
 8006380:	4620      	mov	r0, r4
 8006382:	4629      	mov	r1, r5
 8006384:	f7fa fb6e 	bl	8000a64 <__aeabi_dcmplt>
 8006388:	4603      	mov	r3, r0
 800638a:	2b00      	cmp	r3, #0
 800638c:	d009      	beq.n	80063a2 <speedControl+0x202>
		  {
			  omega_error_integ_temp1 = -6.0 / ASR_cycleTime;
 800638e:	ed9f 7a51 	vldr	s14, [pc, #324]	; 80064d4 <speedControl+0x334>
 8006392:	eef9 6a08 	vmov.f32	s13, #152	; 0xc0c00000 -6.0
 8006396:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800639a:	4b4c      	ldr	r3, [pc, #304]	; (80064cc <speedControl+0x32c>)
 800639c:	edc3 7a00 	vstr	s15, [r3]
 80063a0:	e023      	b.n	80063ea <speedControl+0x24a>
		  }
		  else if(omega_error_integ_temp1 > 6.0 / ASR_cycleTime)
 80063a2:	4b4a      	ldr	r3, [pc, #296]	; (80064cc <speedControl+0x32c>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4618      	mov	r0, r3
 80063a8:	f7fa f892 	bl	80004d0 <__aeabi_f2d>
 80063ac:	4604      	mov	r4, r0
 80063ae:	460d      	mov	r5, r1
 80063b0:	4b3f      	ldr	r3, [pc, #252]	; (80064b0 <speedControl+0x310>)
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7fa f88c 	bl	80004d0 <__aeabi_f2d>
 80063b8:	4602      	mov	r2, r0
 80063ba:	460b      	mov	r3, r1
 80063bc:	f04f 0000 	mov.w	r0, #0
 80063c0:	4945      	ldr	r1, [pc, #276]	; (80064d8 <speedControl+0x338>)
 80063c2:	f7fa fa07 	bl	80007d4 <__aeabi_ddiv>
 80063c6:	4602      	mov	r2, r0
 80063c8:	460b      	mov	r3, r1
 80063ca:	4620      	mov	r0, r4
 80063cc:	4629      	mov	r1, r5
 80063ce:	f7fa fb67 	bl	8000aa0 <__aeabi_dcmpgt>
 80063d2:	4603      	mov	r3, r0
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d008      	beq.n	80063ea <speedControl+0x24a>
		  {
			  omega_error_integ_temp1 = 6.0 / ASR_cycleTime;
 80063d8:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80064d4 <speedControl+0x334>
 80063dc:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80063e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063e4:	4b39      	ldr	r3, [pc, #228]	; (80064cc <speedControl+0x32c>)
 80063e6:	edc3 7a00 	vstr	s15, [r3]
		  }
		  omega_error_integ = ASR_cycleTime * 0.5f * (omega_error_integ_temp1 + omega_error_integ_temp2);
 80063ea:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80064d4 <speedControl+0x334>
 80063ee:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80063f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80063f6:	4b35      	ldr	r3, [pc, #212]	; (80064cc <speedControl+0x32c>)
 80063f8:	edd3 6a00 	vldr	s13, [r3]
 80063fc:	4b32      	ldr	r3, [pc, #200]	; (80064c8 <speedControl+0x328>)
 80063fe:	edd3 7a00 	vldr	s15, [r3]
 8006402:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800640a:	4b34      	ldr	r3, [pc, #208]	; (80064dc <speedControl+0x33c>)
 800640c:	edc3 7a00 	vstr	s15, [r3]
		  omega_error_integ_temp2 = omega_error_integ_temp1;
 8006410:	4b2e      	ldr	r3, [pc, #184]	; (80064cc <speedControl+0x32c>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a2c      	ldr	r2, [pc, #176]	; (80064c8 <speedControl+0x328>)
 8006416:	6013      	str	r3, [r2, #0]


		  torque_ref = Kp_ASR * omega_error + Ki_ASR * omega_error_integ;
 8006418:	4b31      	ldr	r3, [pc, #196]	; (80064e0 <speedControl+0x340>)
 800641a:	ed93 7a00 	vldr	s14, [r3]
 800641e:	4b29      	ldr	r3, [pc, #164]	; (80064c4 <speedControl+0x324>)
 8006420:	edd3 7a00 	vldr	s15, [r3]
 8006424:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006428:	4b2e      	ldr	r3, [pc, #184]	; (80064e4 <speedControl+0x344>)
 800642a:	edd3 6a00 	vldr	s13, [r3]
 800642e:	4b2b      	ldr	r3, [pc, #172]	; (80064dc <speedControl+0x33c>)
 8006430:	edd3 7a00 	vldr	s15, [r3]
 8006434:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006438:	ee77 7a27 	vadd.f32	s15, s14, s15
 800643c:	4b2a      	ldr	r3, [pc, #168]	; (80064e8 <speedControl+0x348>)
 800643e:	edc3 7a00 	vstr	s15, [r3]

		  Id_ref = 0.0f;
 8006442:	4b2a      	ldr	r3, [pc, #168]	; (80064ec <speedControl+0x34c>)
 8006444:	f04f 0200 	mov.w	r2, #0
 8006448:	601a      	str	r2, [r3, #0]
		  Iq_ref = KT * torque_ref;
 800644a:	4b27      	ldr	r3, [pc, #156]	; (80064e8 <speedControl+0x348>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4618      	mov	r0, r3
 8006450:	f7fa f83e 	bl	80004d0 <__aeabi_f2d>
 8006454:	a30e      	add	r3, pc, #56	; (adr r3, 8006490 <speedControl+0x2f0>)
 8006456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800645a:	f7fa f891 	bl	8000580 <__aeabi_dmul>
 800645e:	4603      	mov	r3, r0
 8006460:	460c      	mov	r4, r1
 8006462:	4618      	mov	r0, r3
 8006464:	4621      	mov	r1, r4
 8006466:	f7fa fb25 	bl	8000ab4 <__aeabi_d2f>
 800646a:	4602      	mov	r2, r0
 800646c:	4b20      	ldr	r3, [pc, #128]	; (80064f0 <speedControl+0x350>)
 800646e:	601a      	str	r2, [r3, #0]
	  }




	return;
 8006470:	bf00      	nop
 8006472:	bf00      	nop
}
 8006474:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006478:	54442d18 	.word	0x54442d18
 800647c:	c00921fb 	.word	0xc00921fb
 8006480:	54442d18 	.word	0x54442d18
 8006484:	401921fb 	.word	0x401921fb
 8006488:	54442d18 	.word	0x54442d18
 800648c:	400921fb 	.word	0x400921fb
 8006490:	8b6ec798 	.word	0x8b6ec798
 8006494:	3fd22b62 	.word	0x3fd22b62
 8006498:	20000110 	.word	0x20000110
 800649c:	20000214 	.word	0x20000214
 80064a0:	200001d8 	.word	0x200001d8
 80064a4:	20000120 	.word	0x20000120
 80064a8:	2000011c 	.word	0x2000011c
 80064ac:	3fe00000 	.word	0x3fe00000
 80064b0:	3a83126f 	.word	0x3a83126f
 80064b4:	200000fc 	.word	0x200000fc
 80064b8:	20000020 	.word	0x20000020
 80064bc:	20000100 	.word	0x20000100
 80064c0:	20000218 	.word	0x20000218
 80064c4:	20000104 	.word	0x20000104
 80064c8:	20000128 	.word	0x20000128
 80064cc:	20000124 	.word	0x20000124
 80064d0:	c0180000 	.word	0xc0180000
 80064d4:	3a83126f 	.word	0x3a83126f
 80064d8:	40180000 	.word	0x40180000
 80064dc:	20000108 	.word	0x20000108
 80064e0:	20000018 	.word	0x20000018
 80064e4:	2000001c 	.word	0x2000001c
 80064e8:	2000010c 	.word	0x2000010c
 80064ec:	200000c4 	.word	0x200000c4
 80064f0:	200000c8 	.word	0x200000c8

080064f4 <ASR_Reset>:



inline void ASR_Reset()
{
 80064f4:	b480      	push	{r7}
 80064f6:	af00      	add	r7, sp, #0

	p_theta = 0.0f;
 80064f8:	4b0c      	ldr	r3, [pc, #48]	; (800652c <ASR_Reset+0x38>)
 80064fa:	f04f 0200 	mov.w	r2, #0
 80064fe:	601a      	str	r2, [r3, #0]

	omega_error_integ_temp1 = 0.0f;
 8006500:	4b0b      	ldr	r3, [pc, #44]	; (8006530 <ASR_Reset+0x3c>)
 8006502:	f04f 0200 	mov.w	r2, #0
 8006506:	601a      	str	r2, [r3, #0]
	omega_error_integ_temp2 = 0.0f;
 8006508:	4b0a      	ldr	r3, [pc, #40]	; (8006534 <ASR_Reset+0x40>)
 800650a:	f04f 0200 	mov.w	r2, #0
 800650e:	601a      	str	r2, [r3, #0]

	omega = omega_ref = 0.0f;
 8006510:	f04f 0300 	mov.w	r3, #0
 8006514:	4a08      	ldr	r2, [pc, #32]	; (8006538 <ASR_Reset+0x44>)
 8006516:	6013      	str	r3, [r2, #0]
 8006518:	4a08      	ldr	r2, [pc, #32]	; (800653c <ASR_Reset+0x48>)
 800651a:	6013      	str	r3, [r2, #0]

	ASR_steps = 0;
 800651c:	4b08      	ldr	r3, [pc, #32]	; (8006540 <ASR_Reset+0x4c>)
 800651e:	2200      	movs	r2, #0
 8006520:	601a      	str	r2, [r3, #0]

}
 8006522:	bf00      	nop
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr
 800652c:	20000120 	.word	0x20000120
 8006530:	20000124 	.word	0x20000124
 8006534:	20000128 	.word	0x20000128
 8006538:	20000100 	.word	0x20000100
 800653c:	2000011c 	.word	0x2000011c
 8006540:	20000110 	.word	0x20000110

08006544 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc2;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b084      	sub	sp, #16
 8006548:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800654a:	463b      	mov	r3, r7
 800654c:	2200      	movs	r2, #0
 800654e:	601a      	str	r2, [r3, #0]
 8006550:	605a      	str	r2, [r3, #4]
 8006552:	609a      	str	r2, [r3, #8]
 8006554:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8006556:	4b22      	ldr	r3, [pc, #136]	; (80065e0 <MX_ADC1_Init+0x9c>)
 8006558:	4a22      	ldr	r2, [pc, #136]	; (80065e4 <MX_ADC1_Init+0xa0>)
 800655a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800655c:	4b20      	ldr	r3, [pc, #128]	; (80065e0 <MX_ADC1_Init+0x9c>)
 800655e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006562:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006564:	4b1e      	ldr	r3, [pc, #120]	; (80065e0 <MX_ADC1_Init+0x9c>)
 8006566:	2200      	movs	r2, #0
 8006568:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800656a:	4b1d      	ldr	r3, [pc, #116]	; (80065e0 <MX_ADC1_Init+0x9c>)
 800656c:	2201      	movs	r2, #1
 800656e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8006570:	4b1b      	ldr	r3, [pc, #108]	; (80065e0 <MX_ADC1_Init+0x9c>)
 8006572:	2201      	movs	r2, #1
 8006574:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006576:	4b1a      	ldr	r3, [pc, #104]	; (80065e0 <MX_ADC1_Init+0x9c>)
 8006578:	2200      	movs	r2, #0
 800657a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800657e:	4b18      	ldr	r3, [pc, #96]	; (80065e0 <MX_ADC1_Init+0x9c>)
 8006580:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006584:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8006586:	4b16      	ldr	r3, [pc, #88]	; (80065e0 <MX_ADC1_Init+0x9c>)
 8006588:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800658c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800658e:	4b14      	ldr	r3, [pc, #80]	; (80065e0 <MX_ADC1_Init+0x9c>)
 8006590:	2200      	movs	r2, #0
 8006592:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8006594:	4b12      	ldr	r3, [pc, #72]	; (80065e0 <MX_ADC1_Init+0x9c>)
 8006596:	2201      	movs	r2, #1
 8006598:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800659a:	4b11      	ldr	r3, [pc, #68]	; (80065e0 <MX_ADC1_Init+0x9c>)
 800659c:	2201      	movs	r2, #1
 800659e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80065a2:	4b0f      	ldr	r3, [pc, #60]	; (80065e0 <MX_ADC1_Init+0x9c>)
 80065a4:	2200      	movs	r2, #0
 80065a6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80065a8:	480d      	ldr	r0, [pc, #52]	; (80065e0 <MX_ADC1_Init+0x9c>)
 80065aa:	f7fa fce7 	bl	8000f7c <HAL_ADC_Init>
 80065ae:	4603      	mov	r3, r0
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d001      	beq.n	80065b8 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80065b4:	f001 f8d2 	bl	800775c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80065b8:	2300      	movs	r3, #0
 80065ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80065bc:	2301      	movs	r3, #1
 80065be:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80065c0:	2300      	movs	r3, #0
 80065c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80065c4:	463b      	mov	r3, r7
 80065c6:	4619      	mov	r1, r3
 80065c8:	4805      	ldr	r0, [pc, #20]	; (80065e0 <MX_ADC1_Init+0x9c>)
 80065ca:	f7fa fe2b 	bl	8001224 <HAL_ADC_ConfigChannel>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d001      	beq.n	80065d8 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80065d4:	f001 f8c2 	bl	800775c <Error_Handler>
  }

}
 80065d8:	bf00      	nop
 80065da:	3710      	adds	r7, #16
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}
 80065e0:	200002c4 	.word	0x200002c4
 80065e4:	40012000 	.word	0x40012000

080065e8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80065ee:	463b      	mov	r3, r7
 80065f0:	2200      	movs	r2, #0
 80065f2:	601a      	str	r2, [r3, #0]
 80065f4:	605a      	str	r2, [r3, #4]
 80065f6:	609a      	str	r2, [r3, #8]
 80065f8:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 80065fa:	4b22      	ldr	r3, [pc, #136]	; (8006684 <MX_ADC2_Init+0x9c>)
 80065fc:	4a22      	ldr	r2, [pc, #136]	; (8006688 <MX_ADC2_Init+0xa0>)
 80065fe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8006600:	4b20      	ldr	r3, [pc, #128]	; (8006684 <MX_ADC2_Init+0x9c>)
 8006602:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006606:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8006608:	4b1e      	ldr	r3, [pc, #120]	; (8006684 <MX_ADC2_Init+0x9c>)
 800660a:	2200      	movs	r2, #0
 800660c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800660e:	4b1d      	ldr	r3, [pc, #116]	; (8006684 <MX_ADC2_Init+0x9c>)
 8006610:	2200      	movs	r2, #0
 8006612:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8006614:	4b1b      	ldr	r3, [pc, #108]	; (8006684 <MX_ADC2_Init+0x9c>)
 8006616:	2200      	movs	r2, #0
 8006618:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800661a:	4b1a      	ldr	r3, [pc, #104]	; (8006684 <MX_ADC2_Init+0x9c>)
 800661c:	2200      	movs	r2, #0
 800661e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8006622:	4b18      	ldr	r3, [pc, #96]	; (8006684 <MX_ADC2_Init+0x9c>)
 8006624:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006628:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 800662a:	4b16      	ldr	r3, [pc, #88]	; (8006684 <MX_ADC2_Init+0x9c>)
 800662c:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8006630:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006632:	4b14      	ldr	r3, [pc, #80]	; (8006684 <MX_ADC2_Init+0x9c>)
 8006634:	2200      	movs	r2, #0
 8006636:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8006638:	4b12      	ldr	r3, [pc, #72]	; (8006684 <MX_ADC2_Init+0x9c>)
 800663a:	2201      	movs	r2, #1
 800663c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800663e:	4b11      	ldr	r3, [pc, #68]	; (8006684 <MX_ADC2_Init+0x9c>)
 8006640:	2201      	movs	r2, #1
 8006642:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006646:	4b0f      	ldr	r3, [pc, #60]	; (8006684 <MX_ADC2_Init+0x9c>)
 8006648:	2201      	movs	r2, #1
 800664a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800664c:	480d      	ldr	r0, [pc, #52]	; (8006684 <MX_ADC2_Init+0x9c>)
 800664e:	f7fa fc95 	bl	8000f7c <HAL_ADC_Init>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d001      	beq.n	800665c <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8006658:	f001 f880 	bl	800775c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800665c:	2304      	movs	r3, #4
 800665e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8006660:	2301      	movs	r3, #1
 8006662:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8006664:	2300      	movs	r3, #0
 8006666:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006668:	463b      	mov	r3, r7
 800666a:	4619      	mov	r1, r3
 800666c:	4805      	ldr	r0, [pc, #20]	; (8006684 <MX_ADC2_Init+0x9c>)
 800666e:	f7fa fdd9 	bl	8001224 <HAL_ADC_ConfigChannel>
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	d001      	beq.n	800667c <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 8006678:	f001 f870 	bl	800775c <Error_Handler>
  }

}
 800667c:	bf00      	nop
 800667e:	3710      	adds	r7, #16
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}
 8006684:	2000021c 	.word	0x2000021c
 8006688:	40012100 	.word	0x40012100

0800668c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8006692:	463b      	mov	r3, r7
 8006694:	2200      	movs	r2, #0
 8006696:	601a      	str	r2, [r3, #0]
 8006698:	605a      	str	r2, [r3, #4]
 800669a:	609a      	str	r2, [r3, #8]
 800669c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 800669e:	4b22      	ldr	r3, [pc, #136]	; (8006728 <MX_ADC3_Init+0x9c>)
 80066a0:	4a22      	ldr	r2, [pc, #136]	; (800672c <MX_ADC3_Init+0xa0>)
 80066a2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 80066a4:	4b20      	ldr	r3, [pc, #128]	; (8006728 <MX_ADC3_Init+0x9c>)
 80066a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80066aa:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80066ac:	4b1e      	ldr	r3, [pc, #120]	; (8006728 <MX_ADC3_Init+0x9c>)
 80066ae:	2200      	movs	r2, #0
 80066b0:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80066b2:	4b1d      	ldr	r3, [pc, #116]	; (8006728 <MX_ADC3_Init+0x9c>)
 80066b4:	2200      	movs	r2, #0
 80066b6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80066b8:	4b1b      	ldr	r3, [pc, #108]	; (8006728 <MX_ADC3_Init+0x9c>)
 80066ba:	2200      	movs	r2, #0
 80066bc:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80066be:	4b1a      	ldr	r3, [pc, #104]	; (8006728 <MX_ADC3_Init+0x9c>)
 80066c0:	2200      	movs	r2, #0
 80066c2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80066c6:	4b18      	ldr	r3, [pc, #96]	; (8006728 <MX_ADC3_Init+0x9c>)
 80066c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 80066ce:	4b16      	ldr	r3, [pc, #88]	; (8006728 <MX_ADC3_Init+0x9c>)
 80066d0:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80066d4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80066d6:	4b14      	ldr	r3, [pc, #80]	; (8006728 <MX_ADC3_Init+0x9c>)
 80066d8:	2200      	movs	r2, #0
 80066da:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80066dc:	4b12      	ldr	r3, [pc, #72]	; (8006728 <MX_ADC3_Init+0x9c>)
 80066de:	2201      	movs	r2, #1
 80066e0:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80066e2:	4b11      	ldr	r3, [pc, #68]	; (8006728 <MX_ADC3_Init+0x9c>)
 80066e4:	2201      	movs	r2, #1
 80066e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80066ea:	4b0f      	ldr	r3, [pc, #60]	; (8006728 <MX_ADC3_Init+0x9c>)
 80066ec:	2201      	movs	r2, #1
 80066ee:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80066f0:	480d      	ldr	r0, [pc, #52]	; (8006728 <MX_ADC3_Init+0x9c>)
 80066f2:	f7fa fc43 	bl	8000f7c <HAL_ADC_Init>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d001      	beq.n	8006700 <MX_ADC3_Init+0x74>
  {
    Error_Handler();
 80066fc:	f001 f82e 	bl	800775c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8006700:	2301      	movs	r3, #1
 8006702:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8006704:	2301      	movs	r3, #1
 8006706:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8006708:	2300      	movs	r3, #0
 800670a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800670c:	463b      	mov	r3, r7
 800670e:	4619      	mov	r1, r3
 8006710:	4805      	ldr	r0, [pc, #20]	; (8006728 <MX_ADC3_Init+0x9c>)
 8006712:	f7fa fd87 	bl	8001224 <HAL_ADC_ConfigChannel>
 8006716:	4603      	mov	r3, r0
 8006718:	2b00      	cmp	r3, #0
 800671a:	d001      	beq.n	8006720 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 800671c:	f001 f81e 	bl	800775c <Error_Handler>
  }

}
 8006720:	bf00      	nop
 8006722:	3710      	adds	r7, #16
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}
 8006728:	2000030c 	.word	0x2000030c
 800672c:	40012200 	.word	0x40012200

08006730 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b08e      	sub	sp, #56	; 0x38
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800673c:	2200      	movs	r2, #0
 800673e:	601a      	str	r2, [r3, #0]
 8006740:	605a      	str	r2, [r3, #4]
 8006742:	609a      	str	r2, [r3, #8]
 8006744:	60da      	str	r2, [r3, #12]
 8006746:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a9b      	ldr	r2, [pc, #620]	; (80069bc <HAL_ADC_MspInit+0x28c>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d172      	bne.n	8006838 <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8006752:	2300      	movs	r3, #0
 8006754:	623b      	str	r3, [r7, #32]
 8006756:	4b9a      	ldr	r3, [pc, #616]	; (80069c0 <HAL_ADC_MspInit+0x290>)
 8006758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800675a:	4a99      	ldr	r2, [pc, #612]	; (80069c0 <HAL_ADC_MspInit+0x290>)
 800675c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006760:	6453      	str	r3, [r2, #68]	; 0x44
 8006762:	4b97      	ldr	r3, [pc, #604]	; (80069c0 <HAL_ADC_MspInit+0x290>)
 8006764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800676a:	623b      	str	r3, [r7, #32]
 800676c:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800676e:	2300      	movs	r3, #0
 8006770:	61fb      	str	r3, [r7, #28]
 8006772:	4b93      	ldr	r3, [pc, #588]	; (80069c0 <HAL_ADC_MspInit+0x290>)
 8006774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006776:	4a92      	ldr	r2, [pc, #584]	; (80069c0 <HAL_ADC_MspInit+0x290>)
 8006778:	f043 0304 	orr.w	r3, r3, #4
 800677c:	6313      	str	r3, [r2, #48]	; 0x30
 800677e:	4b90      	ldr	r3, [pc, #576]	; (80069c0 <HAL_ADC_MspInit+0x290>)
 8006780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006782:	f003 0304 	and.w	r3, r3, #4
 8006786:	61fb      	str	r3, [r7, #28]
 8006788:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800678a:	2300      	movs	r3, #0
 800678c:	61bb      	str	r3, [r7, #24]
 800678e:	4b8c      	ldr	r3, [pc, #560]	; (80069c0 <HAL_ADC_MspInit+0x290>)
 8006790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006792:	4a8b      	ldr	r2, [pc, #556]	; (80069c0 <HAL_ADC_MspInit+0x290>)
 8006794:	f043 0301 	orr.w	r3, r3, #1
 8006798:	6313      	str	r3, [r2, #48]	; 0x30
 800679a:	4b89      	ldr	r3, [pc, #548]	; (80069c0 <HAL_ADC_MspInit+0x290>)
 800679c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800679e:	f003 0301 	and.w	r3, r3, #1
 80067a2:	61bb      	str	r3, [r7, #24]
 80067a4:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN10
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80067a6:	2301      	movs	r3, #1
 80067a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80067aa:	2303      	movs	r3, #3
 80067ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067ae:	2300      	movs	r3, #0
 80067b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80067b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067b6:	4619      	mov	r1, r3
 80067b8:	4882      	ldr	r0, [pc, #520]	; (80069c4 <HAL_ADC_MspInit+0x294>)
 80067ba:	f7fc f9f1 	bl	8002ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80067be:	2301      	movs	r3, #1
 80067c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80067c2:	2303      	movs	r3, #3
 80067c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067c6:	2300      	movs	r3, #0
 80067c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80067ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80067ce:	4619      	mov	r1, r3
 80067d0:	487d      	ldr	r0, [pc, #500]	; (80069c8 <HAL_ADC_MspInit+0x298>)
 80067d2:	f7fc f9e5 	bl	8002ba0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80067d6:	4b7d      	ldr	r3, [pc, #500]	; (80069cc <HAL_ADC_MspInit+0x29c>)
 80067d8:	4a7d      	ldr	r2, [pc, #500]	; (80069d0 <HAL_ADC_MspInit+0x2a0>)
 80067da:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80067dc:	4b7b      	ldr	r3, [pc, #492]	; (80069cc <HAL_ADC_MspInit+0x29c>)
 80067de:	2200      	movs	r2, #0
 80067e0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80067e2:	4b7a      	ldr	r3, [pc, #488]	; (80069cc <HAL_ADC_MspInit+0x29c>)
 80067e4:	2200      	movs	r2, #0
 80067e6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80067e8:	4b78      	ldr	r3, [pc, #480]	; (80069cc <HAL_ADC_MspInit+0x29c>)
 80067ea:	2200      	movs	r2, #0
 80067ec:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80067ee:	4b77      	ldr	r3, [pc, #476]	; (80069cc <HAL_ADC_MspInit+0x29c>)
 80067f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80067f4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80067f6:	4b75      	ldr	r3, [pc, #468]	; (80069cc <HAL_ADC_MspInit+0x29c>)
 80067f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067fc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80067fe:	4b73      	ldr	r3, [pc, #460]	; (80069cc <HAL_ADC_MspInit+0x29c>)
 8006800:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006804:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8006806:	4b71      	ldr	r3, [pc, #452]	; (80069cc <HAL_ADC_MspInit+0x29c>)
 8006808:	2200      	movs	r2, #0
 800680a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800680c:	4b6f      	ldr	r3, [pc, #444]	; (80069cc <HAL_ADC_MspInit+0x29c>)
 800680e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006812:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006814:	4b6d      	ldr	r3, [pc, #436]	; (80069cc <HAL_ADC_MspInit+0x29c>)
 8006816:	2200      	movs	r2, #0
 8006818:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800681a:	486c      	ldr	r0, [pc, #432]	; (80069cc <HAL_ADC_MspInit+0x29c>)
 800681c:	f7fb fe28 	bl	8002470 <HAL_DMA_Init>
 8006820:	4603      	mov	r3, r0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d001      	beq.n	800682a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8006826:	f000 ff99 	bl	800775c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a67      	ldr	r2, [pc, #412]	; (80069cc <HAL_ADC_MspInit+0x29c>)
 800682e:	639a      	str	r2, [r3, #56]	; 0x38
 8006830:	4a66      	ldr	r2, [pc, #408]	; (80069cc <HAL_ADC_MspInit+0x29c>)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8006836:	e0bc      	b.n	80069b2 <HAL_ADC_MspInit+0x282>
  else if(adcHandle->Instance==ADC2)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a65      	ldr	r2, [pc, #404]	; (80069d4 <HAL_ADC_MspInit+0x2a4>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d159      	bne.n	80068f6 <HAL_ADC_MspInit+0x1c6>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006842:	2300      	movs	r3, #0
 8006844:	617b      	str	r3, [r7, #20]
 8006846:	4b5e      	ldr	r3, [pc, #376]	; (80069c0 <HAL_ADC_MspInit+0x290>)
 8006848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800684a:	4a5d      	ldr	r2, [pc, #372]	; (80069c0 <HAL_ADC_MspInit+0x290>)
 800684c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006850:	6453      	str	r3, [r2, #68]	; 0x44
 8006852:	4b5b      	ldr	r3, [pc, #364]	; (80069c0 <HAL_ADC_MspInit+0x290>)
 8006854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006856:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800685a:	617b      	str	r3, [r7, #20]
 800685c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800685e:	2300      	movs	r3, #0
 8006860:	613b      	str	r3, [r7, #16]
 8006862:	4b57      	ldr	r3, [pc, #348]	; (80069c0 <HAL_ADC_MspInit+0x290>)
 8006864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006866:	4a56      	ldr	r2, [pc, #344]	; (80069c0 <HAL_ADC_MspInit+0x290>)
 8006868:	f043 0301 	orr.w	r3, r3, #1
 800686c:	6313      	str	r3, [r2, #48]	; 0x30
 800686e:	4b54      	ldr	r3, [pc, #336]	; (80069c0 <HAL_ADC_MspInit+0x290>)
 8006870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006872:	f003 0301 	and.w	r3, r3, #1
 8006876:	613b      	str	r3, [r7, #16]
 8006878:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800687a:	2310      	movs	r3, #16
 800687c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800687e:	2303      	movs	r3, #3
 8006880:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006882:	2300      	movs	r3, #0
 8006884:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006886:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800688a:	4619      	mov	r1, r3
 800688c:	484e      	ldr	r0, [pc, #312]	; (80069c8 <HAL_ADC_MspInit+0x298>)
 800688e:	f7fc f987 	bl	8002ba0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 8006892:	4b51      	ldr	r3, [pc, #324]	; (80069d8 <HAL_ADC_MspInit+0x2a8>)
 8006894:	4a51      	ldr	r2, [pc, #324]	; (80069dc <HAL_ADC_MspInit+0x2ac>)
 8006896:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8006898:	4b4f      	ldr	r3, [pc, #316]	; (80069d8 <HAL_ADC_MspInit+0x2a8>)
 800689a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800689e:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80068a0:	4b4d      	ldr	r3, [pc, #308]	; (80069d8 <HAL_ADC_MspInit+0x2a8>)
 80068a2:	2200      	movs	r2, #0
 80068a4:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80068a6:	4b4c      	ldr	r3, [pc, #304]	; (80069d8 <HAL_ADC_MspInit+0x2a8>)
 80068a8:	2200      	movs	r2, #0
 80068aa:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80068ac:	4b4a      	ldr	r3, [pc, #296]	; (80069d8 <HAL_ADC_MspInit+0x2a8>)
 80068ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80068b2:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80068b4:	4b48      	ldr	r3, [pc, #288]	; (80069d8 <HAL_ADC_MspInit+0x2a8>)
 80068b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068ba:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80068bc:	4b46      	ldr	r3, [pc, #280]	; (80069d8 <HAL_ADC_MspInit+0x2a8>)
 80068be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80068c2:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 80068c4:	4b44      	ldr	r3, [pc, #272]	; (80069d8 <HAL_ADC_MspInit+0x2a8>)
 80068c6:	2200      	movs	r2, #0
 80068c8:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 80068ca:	4b43      	ldr	r3, [pc, #268]	; (80069d8 <HAL_ADC_MspInit+0x2a8>)
 80068cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80068d0:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80068d2:	4b41      	ldr	r3, [pc, #260]	; (80069d8 <HAL_ADC_MspInit+0x2a8>)
 80068d4:	2200      	movs	r2, #0
 80068d6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80068d8:	483f      	ldr	r0, [pc, #252]	; (80069d8 <HAL_ADC_MspInit+0x2a8>)
 80068da:	f7fb fdc9 	bl	8002470 <HAL_DMA_Init>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d001      	beq.n	80068e8 <HAL_ADC_MspInit+0x1b8>
      Error_Handler();
 80068e4:	f000 ff3a 	bl	800775c <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	4a3b      	ldr	r2, [pc, #236]	; (80069d8 <HAL_ADC_MspInit+0x2a8>)
 80068ec:	639a      	str	r2, [r3, #56]	; 0x38
 80068ee:	4a3a      	ldr	r2, [pc, #232]	; (80069d8 <HAL_ADC_MspInit+0x2a8>)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6393      	str	r3, [r2, #56]	; 0x38
}
 80068f4:	e05d      	b.n	80069b2 <HAL_ADC_MspInit+0x282>
  else if(adcHandle->Instance==ADC3)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a39      	ldr	r2, [pc, #228]	; (80069e0 <HAL_ADC_MspInit+0x2b0>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d158      	bne.n	80069b2 <HAL_ADC_MspInit+0x282>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8006900:	2300      	movs	r3, #0
 8006902:	60fb      	str	r3, [r7, #12]
 8006904:	4b2e      	ldr	r3, [pc, #184]	; (80069c0 <HAL_ADC_MspInit+0x290>)
 8006906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006908:	4a2d      	ldr	r2, [pc, #180]	; (80069c0 <HAL_ADC_MspInit+0x290>)
 800690a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800690e:	6453      	str	r3, [r2, #68]	; 0x44
 8006910:	4b2b      	ldr	r3, [pc, #172]	; (80069c0 <HAL_ADC_MspInit+0x290>)
 8006912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006918:	60fb      	str	r3, [r7, #12]
 800691a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800691c:	2300      	movs	r3, #0
 800691e:	60bb      	str	r3, [r7, #8]
 8006920:	4b27      	ldr	r3, [pc, #156]	; (80069c0 <HAL_ADC_MspInit+0x290>)
 8006922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006924:	4a26      	ldr	r2, [pc, #152]	; (80069c0 <HAL_ADC_MspInit+0x290>)
 8006926:	f043 0301 	orr.w	r3, r3, #1
 800692a:	6313      	str	r3, [r2, #48]	; 0x30
 800692c:	4b24      	ldr	r3, [pc, #144]	; (80069c0 <HAL_ADC_MspInit+0x290>)
 800692e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006930:	f003 0301 	and.w	r3, r3, #1
 8006934:	60bb      	str	r3, [r7, #8]
 8006936:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006938:	2302      	movs	r3, #2
 800693a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800693c:	2303      	movs	r3, #3
 800693e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006940:	2300      	movs	r3, #0
 8006942:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006944:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006948:	4619      	mov	r1, r3
 800694a:	481f      	ldr	r0, [pc, #124]	; (80069c8 <HAL_ADC_MspInit+0x298>)
 800694c:	f7fc f928 	bl	8002ba0 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8006950:	4b24      	ldr	r3, [pc, #144]	; (80069e4 <HAL_ADC_MspInit+0x2b4>)
 8006952:	4a25      	ldr	r2, [pc, #148]	; (80069e8 <HAL_ADC_MspInit+0x2b8>)
 8006954:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8006956:	4b23      	ldr	r3, [pc, #140]	; (80069e4 <HAL_ADC_MspInit+0x2b4>)
 8006958:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800695c:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800695e:	4b21      	ldr	r3, [pc, #132]	; (80069e4 <HAL_ADC_MspInit+0x2b4>)
 8006960:	2200      	movs	r2, #0
 8006962:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8006964:	4b1f      	ldr	r3, [pc, #124]	; (80069e4 <HAL_ADC_MspInit+0x2b4>)
 8006966:	2200      	movs	r2, #0
 8006968:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800696a:	4b1e      	ldr	r3, [pc, #120]	; (80069e4 <HAL_ADC_MspInit+0x2b4>)
 800696c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006970:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006972:	4b1c      	ldr	r3, [pc, #112]	; (80069e4 <HAL_ADC_MspInit+0x2b4>)
 8006974:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006978:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800697a:	4b1a      	ldr	r3, [pc, #104]	; (80069e4 <HAL_ADC_MspInit+0x2b4>)
 800697c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006980:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8006982:	4b18      	ldr	r3, [pc, #96]	; (80069e4 <HAL_ADC_MspInit+0x2b4>)
 8006984:	2200      	movs	r2, #0
 8006986:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 8006988:	4b16      	ldr	r3, [pc, #88]	; (80069e4 <HAL_ADC_MspInit+0x2b4>)
 800698a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800698e:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006990:	4b14      	ldr	r3, [pc, #80]	; (80069e4 <HAL_ADC_MspInit+0x2b4>)
 8006992:	2200      	movs	r2, #0
 8006994:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8006996:	4813      	ldr	r0, [pc, #76]	; (80069e4 <HAL_ADC_MspInit+0x2b4>)
 8006998:	f7fb fd6a 	bl	8002470 <HAL_DMA_Init>
 800699c:	4603      	mov	r3, r0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d001      	beq.n	80069a6 <HAL_ADC_MspInit+0x276>
      Error_Handler();
 80069a2:	f000 fedb 	bl	800775c <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	4a0e      	ldr	r2, [pc, #56]	; (80069e4 <HAL_ADC_MspInit+0x2b4>)
 80069aa:	639a      	str	r2, [r3, #56]	; 0x38
 80069ac:	4a0d      	ldr	r2, [pc, #52]	; (80069e4 <HAL_ADC_MspInit+0x2b4>)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6393      	str	r3, [r2, #56]	; 0x38
}
 80069b2:	bf00      	nop
 80069b4:	3738      	adds	r7, #56	; 0x38
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	40012000 	.word	0x40012000
 80069c0:	40023800 	.word	0x40023800
 80069c4:	40020800 	.word	0x40020800
 80069c8:	40020000 	.word	0x40020000
 80069cc:	20000354 	.word	0x20000354
 80069d0:	40026410 	.word	0x40026410
 80069d4:	40012100 	.word	0x40012100
 80069d8:	200003b4 	.word	0x200003b4
 80069dc:	40026440 	.word	0x40026440
 80069e0:	40012200 	.word	0x40012200
 80069e4:	20000264 	.word	0x20000264
 80069e8:	40026428 	.word	0x40026428

080069ec <ADC_Init>:

/* USER CODE BEGIN 1 */


void ADC_Init(void)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	af00      	add	r7, sp, #0

	  // ADC Starting
	  HAL_ADC_Start_DMA(&hadc1, AD_Iu, 2);
 80069f0:	2202      	movs	r2, #2
 80069f2:	4908      	ldr	r1, [pc, #32]	; (8006a14 <ADC_Init+0x28>)
 80069f4:	4808      	ldr	r0, [pc, #32]	; (8006a18 <ADC_Init+0x2c>)
 80069f6:	f7fa fb05 	bl	8001004 <HAL_ADC_Start_DMA>
	  HAL_ADC_Start_DMA(&hadc2, AD_Iv, 1);
 80069fa:	2201      	movs	r2, #1
 80069fc:	4907      	ldr	r1, [pc, #28]	; (8006a1c <ADC_Init+0x30>)
 80069fe:	4808      	ldr	r0, [pc, #32]	; (8006a20 <ADC_Init+0x34>)
 8006a00:	f7fa fb00 	bl	8001004 <HAL_ADC_Start_DMA>
	  HAL_ADC_Start_DMA(&hadc3, AD_Iw, 1);
 8006a04:	2201      	movs	r2, #1
 8006a06:	4907      	ldr	r1, [pc, #28]	; (8006a24 <ADC_Init+0x38>)
 8006a08:	4807      	ldr	r0, [pc, #28]	; (8006a28 <ADC_Init+0x3c>)
 8006a0a:	f7fa fafb 	bl	8001004 <HAL_ADC_Start_DMA>

}
 8006a0e:	bf00      	nop
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	2000012c 	.word	0x2000012c
 8006a18:	200002c4 	.word	0x200002c4
 8006a1c:	20000130 	.word	0x20000130
 8006a20:	2000021c 	.word	0x2000021c
 8006a24:	20000134 	.word	0x20000134
 8006a28:	2000030c 	.word	0x2000030c

08006a2c <get_current_dq>:


void get_current_dq(float *Id, float *Iq, int SVM_sector, float cos_theta_re, float sin_theta_re)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b086      	sub	sp, #24
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6178      	str	r0, [r7, #20]
 8006a34:	6139      	str	r1, [r7, #16]
 8006a36:	60fa      	str	r2, [r7, #12]
 8006a38:	ed87 0a02 	vstr	s0, [r7, #8]
 8006a3c:	edc7 0a01 	vstr	s1, [r7, #4]
	AD_Iu = HAL_ADC_GetValue(&hadc1);
	AD_Iv = HAL_ADC_GetValue(&hadc2);
	AD_Iw = HAL_ADC_GetValue(&hadc3);
	*/

	HAL_ADC_Start_DMA(&hadc1, AD_Iu, 2);
 8006a40:	2202      	movs	r2, #2
 8006a42:	49be      	ldr	r1, [pc, #760]	; (8006d3c <get_current_dq+0x310>)
 8006a44:	48be      	ldr	r0, [pc, #760]	; (8006d40 <get_current_dq+0x314>)
 8006a46:	f7fa fadd 	bl	8001004 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, AD_Iv, 1);
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	49bd      	ldr	r1, [pc, #756]	; (8006d44 <get_current_dq+0x318>)
 8006a4e:	48be      	ldr	r0, [pc, #760]	; (8006d48 <get_current_dq+0x31c>)
 8006a50:	f7fa fad8 	bl	8001004 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc3, AD_Iw, 1);
 8006a54:	2201      	movs	r2, #1
 8006a56:	49bd      	ldr	r1, [pc, #756]	; (8006d4c <get_current_dq+0x320>)
 8006a58:	48bd      	ldr	r0, [pc, #756]	; (8006d50 <get_current_dq+0x324>)
 8006a5a:	f7fa fad3 	bl	8001004 <HAL_ADC_Start_DMA>

#endif

#if _MEDF_ENABLE_

	AD_Iu_buf[pos_MEDF_I] = (int32_t)AD_Iu[0];
 8006a5e:	4bb7      	ldr	r3, [pc, #732]	; (8006d3c <get_current_dq+0x310>)
 8006a60:	881b      	ldrh	r3, [r3, #0]
 8006a62:	b29a      	uxth	r2, r3
 8006a64:	4bbb      	ldr	r3, [pc, #748]	; (8006d54 <get_current_dq+0x328>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4611      	mov	r1, r2
 8006a6a:	4abb      	ldr	r2, [pc, #748]	; (8006d58 <get_current_dq+0x32c>)
 8006a6c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	AD_Iv_buf[pos_MEDF_I] = (int32_t)AD_Iv[0];
 8006a70:	4bb4      	ldr	r3, [pc, #720]	; (8006d44 <get_current_dq+0x318>)
 8006a72:	881b      	ldrh	r3, [r3, #0]
 8006a74:	b29a      	uxth	r2, r3
 8006a76:	4bb7      	ldr	r3, [pc, #732]	; (8006d54 <get_current_dq+0x328>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4611      	mov	r1, r2
 8006a7c:	4ab7      	ldr	r2, [pc, #732]	; (8006d5c <get_current_dq+0x330>)
 8006a7e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	AD_Iw_buf[pos_MEDF_I] = (int32_t)AD_Iw[0];
 8006a82:	4bb2      	ldr	r3, [pc, #712]	; (8006d4c <get_current_dq+0x320>)
 8006a84:	881b      	ldrh	r3, [r3, #0]
 8006a86:	b29a      	uxth	r2, r3
 8006a88:	4bb2      	ldr	r3, [pc, #712]	; (8006d54 <get_current_dq+0x328>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4611      	mov	r1, r2
 8006a8e:	4ab4      	ldr	r2, [pc, #720]	; (8006d60 <get_current_dq+0x334>)
 8006a90:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	pos_MEDF_I += 1;
 8006a94:	4baf      	ldr	r3, [pc, #700]	; (8006d54 <get_current_dq+0x328>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	3301      	adds	r3, #1
 8006a9a:	4aae      	ldr	r2, [pc, #696]	; (8006d54 <get_current_dq+0x328>)
 8006a9c:	6013      	str	r3, [r2, #0]
	if(pos_MEDF_I >= N_MEDF_I)
 8006a9e:	4bad      	ldr	r3, [pc, #692]	; (8006d54 <get_current_dq+0x328>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	2b02      	cmp	r3, #2
 8006aa4:	dd02      	ble.n	8006aac <get_current_dq+0x80>
	{
		pos_MEDF_I = 0;
 8006aa6:	4bab      	ldr	r3, [pc, #684]	; (8006d54 <get_current_dq+0x328>)
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	601a      	str	r2, [r3, #0]
	}

	AD_Iu_MEDF = median3(AD_Iu_buf);
 8006aac:	48aa      	ldr	r0, [pc, #680]	; (8006d58 <get_current_dq+0x32c>)
 8006aae:	f000 f979 	bl	8006da4 <median3>
 8006ab2:	4602      	mov	r2, r0
 8006ab4:	4bab      	ldr	r3, [pc, #684]	; (8006d64 <get_current_dq+0x338>)
 8006ab6:	601a      	str	r2, [r3, #0]
	AD_Iv_MEDF = median3(AD_Iv_buf);
 8006ab8:	48a8      	ldr	r0, [pc, #672]	; (8006d5c <get_current_dq+0x330>)
 8006aba:	f000 f973 	bl	8006da4 <median3>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	4ba9      	ldr	r3, [pc, #676]	; (8006d68 <get_current_dq+0x33c>)
 8006ac2:	601a      	str	r2, [r3, #0]
	AD_Iw_MEDF = median3(AD_Iw_buf);
 8006ac4:	48a6      	ldr	r0, [pc, #664]	; (8006d60 <get_current_dq+0x334>)
 8006ac6:	f000 f96d 	bl	8006da4 <median3>
 8006aca:	4602      	mov	r2, r0
 8006acc:	4ba7      	ldr	r3, [pc, #668]	; (8006d6c <get_current_dq+0x340>)
 8006ace:	601a      	str	r2, [r3, #0]

	V_Iu = (float)AD_Iu_MEDF / AD_Range * Vref_AD - V_Iu_offset;
 8006ad0:	4ba4      	ldr	r3, [pc, #656]	; (8006d64 <get_current_dq+0x338>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	ee07 3a90 	vmov	s15, r3
 8006ad8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006adc:	eddf 7aa4 	vldr	s15, [pc, #656]	; 8006d70 <get_current_dq+0x344>
 8006ae0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ae4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ae8:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8006d74 <get_current_dq+0x348>
 8006aec:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006af0:	4ba1      	ldr	r3, [pc, #644]	; (8006d78 <get_current_dq+0x34c>)
 8006af2:	edd3 7a00 	vldr	s15, [r3]
 8006af6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006afa:	4ba0      	ldr	r3, [pc, #640]	; (8006d7c <get_current_dq+0x350>)
 8006afc:	edc3 7a00 	vstr	s15, [r3]
	V_Iv = (float)AD_Iv_MEDF / AD_Range * Vref_AD - V_Iv_offset;
 8006b00:	4b99      	ldr	r3, [pc, #612]	; (8006d68 <get_current_dq+0x33c>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	ee07 3a90 	vmov	s15, r3
 8006b08:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006b0c:	eddf 7a98 	vldr	s15, [pc, #608]	; 8006d70 <get_current_dq+0x344>
 8006b10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b18:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8006d74 <get_current_dq+0x348>
 8006b1c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006b20:	4b97      	ldr	r3, [pc, #604]	; (8006d80 <get_current_dq+0x354>)
 8006b22:	edd3 7a00 	vldr	s15, [r3]
 8006b26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b2a:	4b96      	ldr	r3, [pc, #600]	; (8006d84 <get_current_dq+0x358>)
 8006b2c:	edc3 7a00 	vstr	s15, [r3]
	V_Iw = (float)AD_Iw_MEDF / AD_Range * Vref_AD - V_Iw_offset;
 8006b30:	4b8e      	ldr	r3, [pc, #568]	; (8006d6c <get_current_dq+0x340>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	ee07 3a90 	vmov	s15, r3
 8006b38:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006b3c:	eddf 7a8c 	vldr	s15, [pc, #560]	; 8006d70 <get_current_dq+0x344>
 8006b40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b48:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8006d74 <get_current_dq+0x348>
 8006b4c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006b50:	4b8d      	ldr	r3, [pc, #564]	; (8006d88 <get_current_dq+0x35c>)
 8006b52:	edd3 7a00 	vldr	s15, [r3]
 8006b56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b5a:	4b8c      	ldr	r3, [pc, #560]	; (8006d8c <get_current_dq+0x360>)
 8006b5c:	edc3 7a00 	vstr	s15, [r3]

#endif

	//Vdc = Vdc * 0.9 + 0.1 * (float)AD_Iu[1] / AD_Range * Vref_AD * Gain_Vdc_sense;

	switch(SVM_sector)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2b05      	cmp	r3, #5
 8006b64:	d874      	bhi.n	8006c50 <get_current_dq+0x224>
 8006b66:	a201      	add	r2, pc, #4	; (adr r2, 8006b6c <get_current_dq+0x140>)
 8006b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b6c:	08006b85 	.word	0x08006b85
 8006b70:	08006bc9 	.word	0x08006bc9
 8006b74:	08006bc9 	.word	0x08006bc9
 8006b78:	08006c0d 	.word	0x08006c0d
 8006b7c:	08006c0d 	.word	0x08006c0d
 8006b80:	08006b85 	.word	0x08006b85
	{
	case 0: case 5:
		Iv = V_Iv * Gain_currentSense;
 8006b84:	4b7f      	ldr	r3, [pc, #508]	; (8006d84 <get_current_dq+0x358>)
 8006b86:	edd3 7a00 	vldr	s15, [r3]
 8006b8a:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8006b8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006b92:	4b7f      	ldr	r3, [pc, #508]	; (8006d90 <get_current_dq+0x364>)
 8006b94:	edc3 7a00 	vstr	s15, [r3]
		Iw = V_Iw * Gain_currentSense;
 8006b98:	4b7c      	ldr	r3, [pc, #496]	; (8006d8c <get_current_dq+0x360>)
 8006b9a:	edd3 7a00 	vldr	s15, [r3]
 8006b9e:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8006ba2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006ba6:	4b7b      	ldr	r3, [pc, #492]	; (8006d94 <get_current_dq+0x368>)
 8006ba8:	edc3 7a00 	vstr	s15, [r3]
		Iu = - Iv - Iw;
 8006bac:	4b78      	ldr	r3, [pc, #480]	; (8006d90 <get_current_dq+0x364>)
 8006bae:	edd3 7a00 	vldr	s15, [r3]
 8006bb2:	eeb1 7a67 	vneg.f32	s14, s15
 8006bb6:	4b77      	ldr	r3, [pc, #476]	; (8006d94 <get_current_dq+0x368>)
 8006bb8:	edd3 7a00 	vldr	s15, [r3]
 8006bbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006bc0:	4b75      	ldr	r3, [pc, #468]	; (8006d98 <get_current_dq+0x36c>)
 8006bc2:	edc3 7a00 	vstr	s15, [r3]
		break;
 8006bc6:	e043      	b.n	8006c50 <get_current_dq+0x224>

	case 1: case 2:
		Iw = V_Iw * Gain_currentSense;
 8006bc8:	4b70      	ldr	r3, [pc, #448]	; (8006d8c <get_current_dq+0x360>)
 8006bca:	edd3 7a00 	vldr	s15, [r3]
 8006bce:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8006bd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006bd6:	4b6f      	ldr	r3, [pc, #444]	; (8006d94 <get_current_dq+0x368>)
 8006bd8:	edc3 7a00 	vstr	s15, [r3]
		Iu = V_Iu * Gain_currentSense;
 8006bdc:	4b67      	ldr	r3, [pc, #412]	; (8006d7c <get_current_dq+0x350>)
 8006bde:	edd3 7a00 	vldr	s15, [r3]
 8006be2:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8006be6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006bea:	4b6b      	ldr	r3, [pc, #428]	; (8006d98 <get_current_dq+0x36c>)
 8006bec:	edc3 7a00 	vstr	s15, [r3]
		Iv = - Iw - Iu;
 8006bf0:	4b68      	ldr	r3, [pc, #416]	; (8006d94 <get_current_dq+0x368>)
 8006bf2:	edd3 7a00 	vldr	s15, [r3]
 8006bf6:	eeb1 7a67 	vneg.f32	s14, s15
 8006bfa:	4b67      	ldr	r3, [pc, #412]	; (8006d98 <get_current_dq+0x36c>)
 8006bfc:	edd3 7a00 	vldr	s15, [r3]
 8006c00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006c04:	4b62      	ldr	r3, [pc, #392]	; (8006d90 <get_current_dq+0x364>)
 8006c06:	edc3 7a00 	vstr	s15, [r3]
		break;
 8006c0a:	e021      	b.n	8006c50 <get_current_dq+0x224>

	case 3: case 4:
		Iu = V_Iu * Gain_currentSense;
 8006c0c:	4b5b      	ldr	r3, [pc, #364]	; (8006d7c <get_current_dq+0x350>)
 8006c0e:	edd3 7a00 	vldr	s15, [r3]
 8006c12:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8006c16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006c1a:	4b5f      	ldr	r3, [pc, #380]	; (8006d98 <get_current_dq+0x36c>)
 8006c1c:	edc3 7a00 	vstr	s15, [r3]
		Iv = V_Iv * Gain_currentSense;
 8006c20:	4b58      	ldr	r3, [pc, #352]	; (8006d84 <get_current_dq+0x358>)
 8006c22:	edd3 7a00 	vldr	s15, [r3]
 8006c26:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8006c2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006c2e:	4b58      	ldr	r3, [pc, #352]	; (8006d90 <get_current_dq+0x364>)
 8006c30:	edc3 7a00 	vstr	s15, [r3]
		Iw = - Iu - Iv;
 8006c34:	4b58      	ldr	r3, [pc, #352]	; (8006d98 <get_current_dq+0x36c>)
 8006c36:	edd3 7a00 	vldr	s15, [r3]
 8006c3a:	eeb1 7a67 	vneg.f32	s14, s15
 8006c3e:	4b54      	ldr	r3, [pc, #336]	; (8006d90 <get_current_dq+0x364>)
 8006c40:	edd3 7a00 	vldr	s15, [r3]
 8006c44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006c48:	4b52      	ldr	r3, [pc, #328]	; (8006d94 <get_current_dq+0x368>)
 8006c4a:	edc3 7a00 	vstr	s15, [r3]
		break;
 8006c4e:	bf00      	nop
	}

	*Id = 0.8165f * (Iu * cos_theta_re + Iv * (-0.5f * cos_theta_re + 0.855f * sin_theta_re) + Iw * (-0.5f * cos_theta_re - 0.855f * sin_theta_re));
 8006c50:	4b51      	ldr	r3, [pc, #324]	; (8006d98 <get_current_dq+0x36c>)
 8006c52:	ed93 7a00 	vldr	s14, [r3]
 8006c56:	edd7 7a02 	vldr	s15, [r7, #8]
 8006c5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006c5e:	edd7 7a02 	vldr	s15, [r7, #8]
 8006c62:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 8006c66:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006c6a:	edd7 7a01 	vldr	s15, [r7, #4]
 8006c6e:	ed9f 6a4b 	vldr	s12, [pc, #300]	; 8006d9c <get_current_dq+0x370>
 8006c72:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006c76:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8006c7a:	4b45      	ldr	r3, [pc, #276]	; (8006d90 <get_current_dq+0x364>)
 8006c7c:	edd3 7a00 	vldr	s15, [r3]
 8006c80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006c84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006c88:	edd7 7a02 	vldr	s15, [r7, #8]
 8006c8c:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 8006c90:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006c94:	edd7 7a01 	vldr	s15, [r7, #4]
 8006c98:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8006d9c <get_current_dq+0x370>
 8006c9c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006ca0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006ca4:	4b3b      	ldr	r3, [pc, #236]	; (8006d94 <get_current_dq+0x368>)
 8006ca6:	edd3 7a00 	vldr	s15, [r3]
 8006caa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006cae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006cb2:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8006da0 <get_current_dq+0x374>
 8006cb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	edc3 7a00 	vstr	s15, [r3]
	*Iq = 0.8165f * (-Iu * sin_theta_re + Iv * (0.5f * sin_theta_re + 0.855f * cos_theta_re) + Iw * (0.5f * sin_theta_re - 0.855f * cos_theta_re));
 8006cc0:	4b35      	ldr	r3, [pc, #212]	; (8006d98 <get_current_dq+0x36c>)
 8006cc2:	edd3 7a00 	vldr	s15, [r3]
 8006cc6:	eeb1 7a67 	vneg.f32	s14, s15
 8006cca:	edd7 7a01 	vldr	s15, [r7, #4]
 8006cce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006cd2:	edd7 7a01 	vldr	s15, [r7, #4]
 8006cd6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8006cda:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006cde:	edd7 7a02 	vldr	s15, [r7, #8]
 8006ce2:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 8006d9c <get_current_dq+0x370>
 8006ce6:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006cea:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8006cee:	4b28      	ldr	r3, [pc, #160]	; (8006d90 <get_current_dq+0x364>)
 8006cf0:	edd3 7a00 	vldr	s15, [r3]
 8006cf4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006cf8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006cfc:	edd7 7a01 	vldr	s15, [r7, #4]
 8006d00:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8006d04:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006d08:	edd7 7a02 	vldr	s15, [r7, #8]
 8006d0c:	ed9f 6a23 	vldr	s12, [pc, #140]	; 8006d9c <get_current_dq+0x370>
 8006d10:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006d14:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006d18:	4b1e      	ldr	r3, [pc, #120]	; (8006d94 <get_current_dq+0x368>)
 8006d1a:	edd3 7a00 	vldr	s15, [r3]
 8006d1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006d22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d26:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8006da0 <get_current_dq+0x374>
 8006d2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	edc3 7a00 	vstr	s15, [r3]


	return;
 8006d34:	bf00      	nop

}
 8006d36:	3718      	adds	r7, #24
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}
 8006d3c:	2000012c 	.word	0x2000012c
 8006d40:	200002c4 	.word	0x200002c4
 8006d44:	20000130 	.word	0x20000130
 8006d48:	2000021c 	.word	0x2000021c
 8006d4c:	20000134 	.word	0x20000134
 8006d50:	2000030c 	.word	0x2000030c
 8006d54:	20000150 	.word	0x20000150
 8006d58:	20000154 	.word	0x20000154
 8006d5c:	20000160 	.word	0x20000160
 8006d60:	2000016c 	.word	0x2000016c
 8006d64:	20000178 	.word	0x20000178
 8006d68:	2000017c 	.word	0x2000017c
 8006d6c:	20000180 	.word	0x20000180
 8006d70:	00001000 	.word	0x00001000
 8006d74:	40533333 	.word	0x40533333
 8006d78:	20000024 	.word	0x20000024
 8006d7c:	20000138 	.word	0x20000138
 8006d80:	20000028 	.word	0x20000028
 8006d84:	2000013c 	.word	0x2000013c
 8006d88:	2000002c 	.word	0x2000002c
 8006d8c:	20000140 	.word	0x20000140
 8006d90:	20000148 	.word	0x20000148
 8006d94:	2000014c 	.word	0x2000014c
 8006d98:	20000144 	.word	0x20000144
 8006d9c:	3f5ae148 	.word	0x3f5ae148
 8006da0:	3f510625 	.word	0x3f510625

08006da4 <median3>:



extern int32_t median3(int32_t *buf)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b083      	sub	sp, #12
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]

	if(buf[0] < buf[1])
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	3304      	adds	r3, #4
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	429a      	cmp	r2, r3
 8006db8:	da17      	bge.n	8006dea <median3+0x46>
	{
		if(buf[2] < buf[0])			return buf[0];
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	3308      	adds	r3, #8
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	da02      	bge.n	8006dce <median3+0x2a>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	e025      	b.n	8006e1a <median3+0x76>
		else if(buf[2] < buf[1])	return buf[2];
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	3308      	adds	r3, #8
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	3304      	adds	r3, #4
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	da02      	bge.n	8006de4 <median3+0x40>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	e01a      	b.n	8006e1a <median3+0x76>
		else						return buf[1];
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	e017      	b.n	8006e1a <median3+0x76>
	}
	else
	{
		if(buf[2] < buf[1])			return buf[1];
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	3308      	adds	r3, #8
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	3304      	adds	r3, #4
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	429a      	cmp	r2, r3
 8006df8:	da02      	bge.n	8006e00 <median3+0x5c>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	e00c      	b.n	8006e1a <median3+0x76>
		else if(buf[2] < buf[1])	return buf[2];
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	3308      	adds	r3, #8
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	3304      	adds	r3, #4
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	da02      	bge.n	8006e16 <median3+0x72>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	e001      	b.n	8006e1a <median3+0x76>
		else						return buf[0];
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
	}

	return 0;
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	370c      	adds	r7, #12
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr
	...

08006e28 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8006e2c:	4b18      	ldr	r3, [pc, #96]	; (8006e90 <MX_CAN1_Init+0x68>)
 8006e2e:	4a19      	ldr	r2, [pc, #100]	; (8006e94 <MX_CAN1_Init+0x6c>)
 8006e30:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8006e32:	4b17      	ldr	r3, [pc, #92]	; (8006e90 <MX_CAN1_Init+0x68>)
 8006e34:	2204      	movs	r2, #4
 8006e36:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8006e38:	4b15      	ldr	r3, [pc, #84]	; (8006e90 <MX_CAN1_Init+0x68>)
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8006e3e:	4b14      	ldr	r3, [pc, #80]	; (8006e90 <MX_CAN1_Init+0x68>)
 8006e40:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006e44:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8006e46:	4b12      	ldr	r3, [pc, #72]	; (8006e90 <MX_CAN1_Init+0x68>)
 8006e48:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8006e4c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8006e4e:	4b10      	ldr	r3, [pc, #64]	; (8006e90 <MX_CAN1_Init+0x68>)
 8006e50:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006e54:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8006e56:	4b0e      	ldr	r3, [pc, #56]	; (8006e90 <MX_CAN1_Init+0x68>)
 8006e58:	2200      	movs	r2, #0
 8006e5a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8006e5c:	4b0c      	ldr	r3, [pc, #48]	; (8006e90 <MX_CAN1_Init+0x68>)
 8006e5e:	2200      	movs	r2, #0
 8006e60:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8006e62:	4b0b      	ldr	r3, [pc, #44]	; (8006e90 <MX_CAN1_Init+0x68>)
 8006e64:	2200      	movs	r2, #0
 8006e66:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8006e68:	4b09      	ldr	r3, [pc, #36]	; (8006e90 <MX_CAN1_Init+0x68>)
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8006e6e:	4b08      	ldr	r3, [pc, #32]	; (8006e90 <MX_CAN1_Init+0x68>)
 8006e70:	2200      	movs	r2, #0
 8006e72:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8006e74:	4b06      	ldr	r3, [pc, #24]	; (8006e90 <MX_CAN1_Init+0x68>)
 8006e76:	2200      	movs	r2, #0
 8006e78:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8006e7a:	4805      	ldr	r0, [pc, #20]	; (8006e90 <MX_CAN1_Init+0x68>)
 8006e7c:	f7fa fc82 	bl	8001784 <HAL_CAN_Init>
 8006e80:	4603      	mov	r3, r0
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d001      	beq.n	8006e8a <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8006e86:	f000 fc69 	bl	800775c <Error_Handler>
  }

}
 8006e8a:	bf00      	nop
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	20000460 	.word	0x20000460
 8006e94:	40006400 	.word	0x40006400

08006e98 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b08a      	sub	sp, #40	; 0x28
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ea0:	f107 0314 	add.w	r3, r7, #20
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	601a      	str	r2, [r3, #0]
 8006ea8:	605a      	str	r2, [r3, #4]
 8006eaa:	609a      	str	r2, [r3, #8]
 8006eac:	60da      	str	r2, [r3, #12]
 8006eae:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a21      	ldr	r2, [pc, #132]	; (8006f3c <HAL_CAN_MspInit+0xa4>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d13c      	bne.n	8006f34 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8006eba:	2300      	movs	r3, #0
 8006ebc:	613b      	str	r3, [r7, #16]
 8006ebe:	4b20      	ldr	r3, [pc, #128]	; (8006f40 <HAL_CAN_MspInit+0xa8>)
 8006ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec2:	4a1f      	ldr	r2, [pc, #124]	; (8006f40 <HAL_CAN_MspInit+0xa8>)
 8006ec4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8006eca:	4b1d      	ldr	r3, [pc, #116]	; (8006f40 <HAL_CAN_MspInit+0xa8>)
 8006ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ed2:	613b      	str	r3, [r7, #16]
 8006ed4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	60fb      	str	r3, [r7, #12]
 8006eda:	4b19      	ldr	r3, [pc, #100]	; (8006f40 <HAL_CAN_MspInit+0xa8>)
 8006edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ede:	4a18      	ldr	r2, [pc, #96]	; (8006f40 <HAL_CAN_MspInit+0xa8>)
 8006ee0:	f043 0301 	orr.w	r3, r3, #1
 8006ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8006ee6:	4b16      	ldr	r3, [pc, #88]	; (8006f40 <HAL_CAN_MspInit+0xa8>)
 8006ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eea:	f003 0301 	and.w	r3, r3, #1
 8006eee:	60fb      	str	r3, [r7, #12]
 8006ef0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006ef2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006ef6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ef8:	2302      	movs	r3, #2
 8006efa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006efc:	2300      	movs	r3, #0
 8006efe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f00:	2303      	movs	r3, #3
 8006f02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8006f04:	2309      	movs	r3, #9
 8006f06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f08:	f107 0314 	add.w	r3, r7, #20
 8006f0c:	4619      	mov	r1, r3
 8006f0e:	480d      	ldr	r0, [pc, #52]	; (8006f44 <HAL_CAN_MspInit+0xac>)
 8006f10:	f7fb fe46 	bl	8002ba0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8006f14:	2200      	movs	r2, #0
 8006f16:	2100      	movs	r1, #0
 8006f18:	2013      	movs	r0, #19
 8006f1a:	f7fb fa72 	bl	8002402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8006f1e:	2013      	movs	r0, #19
 8006f20:	f7fb fa8b 	bl	800243a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8006f24:	2200      	movs	r2, #0
 8006f26:	2100      	movs	r1, #0
 8006f28:	2014      	movs	r0, #20
 8006f2a:	f7fb fa6a 	bl	8002402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8006f2e:	2014      	movs	r0, #20
 8006f30:	f7fb fa83 	bl	800243a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8006f34:	bf00      	nop
 8006f36:	3728      	adds	r7, #40	; 0x28
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}
 8006f3c:	40006400 	.word	0x40006400
 8006f40:	40023800 	.word	0x40023800
 8006f44:	40020000 	.word	0x40020000

08006f48 <CAN_Init>:

/* USER CODE BEGIN 1 */


void CAN_Init()
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	af00      	add	r7, sp, #0

	motorChannel = getChannel();
 8006f4c:	f000 f84a 	bl	8006fe4 <getChannel>
 8006f50:	4603      	mov	r3, r0
 8006f52:	461a      	mov	r2, r3
 8006f54:	4b20      	ldr	r3, [pc, #128]	; (8006fd8 <CAN_Init+0x90>)
 8006f56:	701a      	strb	r2, [r3, #0]


	sFilterConfig.FilterBank = 0;
 8006f58:	4b20      	ldr	r3, [pc, #128]	; (8006fdc <CAN_Init+0x94>)
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8006f5e:	4b1f      	ldr	r3, [pc, #124]	; (8006fdc <CAN_Init+0x94>)
 8006f60:	2200      	movs	r2, #0
 8006f62:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8006f64:	4b1d      	ldr	r3, [pc, #116]	; (8006fdc <CAN_Init+0x94>)
 8006f66:	2201      	movs	r2, #1
 8006f68:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = 0x2000 | motorChannel << 10;
 8006f6a:	4b1b      	ldr	r3, [pc, #108]	; (8006fd8 <CAN_Init+0x90>)
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	029b      	lsls	r3, r3, #10
 8006f70:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006f74:	461a      	mov	r2, r3
 8006f76:	4b19      	ldr	r3, [pc, #100]	; (8006fdc <CAN_Init+0x94>)
 8006f78:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8006f7a:	4b18      	ldr	r3, [pc, #96]	; (8006fdc <CAN_Init+0x94>)
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0xfc00;
 8006f80:	4b16      	ldr	r3, [pc, #88]	; (8006fdc <CAN_Init+0x94>)
 8006f82:	f44f 427c 	mov.w	r2, #64512	; 0xfc00
 8006f86:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0006;
 8006f88:	4b14      	ldr	r3, [pc, #80]	; (8006fdc <CAN_Init+0x94>)
 8006f8a:	2206      	movs	r2, #6
 8006f8c:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8006f8e:	4b13      	ldr	r3, [pc, #76]	; (8006fdc <CAN_Init+0x94>)
 8006f90:	2200      	movs	r2, #0
 8006f92:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8006f94:	4b11      	ldr	r3, [pc, #68]	; (8006fdc <CAN_Init+0x94>)
 8006f96:	2201      	movs	r2, #1
 8006f98:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8006f9a:	4b10      	ldr	r3, [pc, #64]	; (8006fdc <CAN_Init+0x94>)
 8006f9c:	220e      	movs	r2, #14
 8006f9e:	625a      	str	r2, [r3, #36]	; 0x24

	if(HAL_CAN_ConfigFilter(&hcan1,&sFilterConfig) != HAL_OK)
 8006fa0:	490e      	ldr	r1, [pc, #56]	; (8006fdc <CAN_Init+0x94>)
 8006fa2:	480f      	ldr	r0, [pc, #60]	; (8006fe0 <CAN_Init+0x98>)
 8006fa4:	f7fa fcea 	bl	800197c <HAL_CAN_ConfigFilter>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d001      	beq.n	8006fb2 <CAN_Init+0x6a>
	{
	  Error_Handler();
 8006fae:	f000 fbd5 	bl	800775c <Error_Handler>
	}

	if(HAL_CAN_Start(&hcan1) != HAL_OK)
 8006fb2:	480b      	ldr	r0, [pc, #44]	; (8006fe0 <CAN_Init+0x98>)
 8006fb4:	f7fa fdc2 	bl	8001b3c <HAL_CAN_Start>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d001      	beq.n	8006fc2 <CAN_Init+0x7a>
	{
	  Error_Handler();
 8006fbe:	f000 fbcd 	bl	800775c <Error_Handler>
	}

	if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 8006fc2:	2103      	movs	r1, #3
 8006fc4:	4806      	ldr	r0, [pc, #24]	; (8006fe0 <CAN_Init+0x98>)
 8006fc6:	f7fa ff10 	bl	8001dea <HAL_CAN_ActivateNotification>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d001      	beq.n	8006fd4 <CAN_Init+0x8c>
	{
	  Error_Handler();
 8006fd0:	f000 fbc4 	bl	800775c <Error_Handler>
	}


}
 8006fd4:	bf00      	nop
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	20000184 	.word	0x20000184
 8006fdc:	20000414 	.word	0x20000414
 8006fe0:	20000460 	.word	0x20000460

08006fe4 <getChannel>:


uint8_t getChannel()
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b082      	sub	sp, #8
 8006fe8:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 8006fea:	2300      	movs	r3, #0
 8006fec:	71fb      	strb	r3, [r7, #7]

	ch |= !HAL_GPIO_ReadPin(CH_b0_GPIO_Port, CH_b0_Pin) << 0;
 8006fee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006ff2:	481b      	ldr	r0, [pc, #108]	; (8007060 <getChannel+0x7c>)
 8006ff4:	f7fb ff66 	bl	8002ec4 <HAL_GPIO_ReadPin>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	bf0c      	ite	eq
 8006ffe:	2301      	moveq	r3, #1
 8007000:	2300      	movne	r3, #0
 8007002:	b2db      	uxtb	r3, r3
 8007004:	b25a      	sxtb	r2, r3
 8007006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800700a:	4313      	orrs	r3, r2
 800700c:	b25b      	sxtb	r3, r3
 800700e:	71fb      	strb	r3, [r7, #7]
	ch |= !HAL_GPIO_ReadPin(CH_b1_GPIO_Port, CH_b1_Pin) << 1;
 8007010:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007014:	4812      	ldr	r0, [pc, #72]	; (8007060 <getChannel+0x7c>)
 8007016:	f7fb ff55 	bl	8002ec4 <HAL_GPIO_ReadPin>
 800701a:	4603      	mov	r3, r0
 800701c:	2b00      	cmp	r3, #0
 800701e:	d101      	bne.n	8007024 <getChannel+0x40>
 8007020:	2302      	movs	r3, #2
 8007022:	e000      	b.n	8007026 <getChannel+0x42>
 8007024:	2300      	movs	r3, #0
 8007026:	b25a      	sxtb	r2, r3
 8007028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800702c:	4313      	orrs	r3, r2
 800702e:	b25b      	sxtb	r3, r3
 8007030:	71fb      	strb	r3, [r7, #7]
	ch |= !HAL_GPIO_ReadPin(CH_b2_GPIO_Port, CH_b2_Pin) << 2;
 8007032:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007036:	480a      	ldr	r0, [pc, #40]	; (8007060 <getChannel+0x7c>)
 8007038:	f7fb ff44 	bl	8002ec4 <HAL_GPIO_ReadPin>
 800703c:	4603      	mov	r3, r0
 800703e:	2b00      	cmp	r3, #0
 8007040:	d101      	bne.n	8007046 <getChannel+0x62>
 8007042:	2304      	movs	r3, #4
 8007044:	e000      	b.n	8007048 <getChannel+0x64>
 8007046:	2300      	movs	r3, #0
 8007048:	b25a      	sxtb	r2, r3
 800704a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800704e:	4313      	orrs	r3, r2
 8007050:	b25b      	sxtb	r3, r3
 8007052:	71fb      	strb	r3, [r7, #7]

	return ch;
 8007054:	79fb      	ldrb	r3, [r7, #7]
}
 8007056:	4618      	mov	r0, r3
 8007058:	3708      	adds	r7, #8
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	40020400 	.word	0x40020400

08007064 <HAL_CAN_TxMailbox0CompleteCallback>:




void HAL_CAN_TxMailbox0CompleteCallback (CAN_HandleTypeDef * hcan)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b082      	sub	sp, #8
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
	{
	}
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 800706c:	2200      	movs	r2, #0
 800706e:	2140      	movs	r1, #64	; 0x40
 8007070:	4803      	ldr	r0, [pc, #12]	; (8007080 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 8007072:	f7fb ff3f 	bl	8002ef4 <HAL_GPIO_WritePin>

}
 8007076:	bf00      	nop
 8007078:	3708      	adds	r7, #8
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
 800707e:	bf00      	nop
 8007080:	40020400 	.word	0x40020400

08007084 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback (CAN_HandleTypeDef * hcan)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b082      	sub	sp, #8
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
	{
	}
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 800708c:	2200      	movs	r2, #0
 800708e:	2140      	movs	r1, #64	; 0x40
 8007090:	4803      	ldr	r0, [pc, #12]	; (80070a0 <HAL_CAN_TxMailbox1CompleteCallback+0x1c>)
 8007092:	f7fb ff2f 	bl	8002ef4 <HAL_GPIO_WritePin>

}
 8007096:	bf00      	nop
 8007098:	3708      	adds	r7, #8
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
 800709e:	bf00      	nop
 80070a0:	40020400 	.word	0x40020400

080070a4 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback (CAN_HandleTypeDef * hcan)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b082      	sub	sp, #8
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
	{
	}
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 80070ac:	2200      	movs	r2, #0
 80070ae:	2140      	movs	r1, #64	; 0x40
 80070b0:	4803      	ldr	r0, [pc, #12]	; (80070c0 <HAL_CAN_TxMailbox2CompleteCallback+0x1c>)
 80070b2:	f7fb ff1f 	bl	8002ef4 <HAL_GPIO_WritePin>

}
 80070b6:	bf00      	nop
 80070b8:	3708      	adds	r7, #8
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop
 80070c0:	40020400 	.word	0x40020400

080070c4 <HAL_CAN_RxFifo0MsgPendingCallback>:



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b084      	sub	sp, #16
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
			uint8_t byte[4];
		};
	}controlRef;


	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can1RxHeader, can1RxData);
 80070cc:	4b16      	ldr	r3, [pc, #88]	; (8007128 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 80070ce:	4a17      	ldr	r2, [pc, #92]	; (800712c <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 80070d0:	2100      	movs	r1, #0
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f7fa fd76 	bl	8001bc4 <HAL_CAN_GetRxMessage>

	can1RxFlg = 1;
 80070d8:	4b15      	ldr	r3, [pc, #84]	; (8007130 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 80070da:	2201      	movs	r2, #1
 80070dc:	701a      	strb	r2, [r3, #0]

	if(((can1RxHeader.StdId & 0x1c) >> 2) == 0x01 && can1RxHeader.DLC == 0x4)
 80070de:	4b13      	ldr	r3, [pc, #76]	; (800712c <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	089b      	lsrs	r3, r3, #2
 80070e4:	f003 0307 	and.w	r3, r3, #7
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d114      	bne.n	8007116 <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
 80070ec:	4b0f      	ldr	r3, [pc, #60]	; (800712c <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 80070ee:	691b      	ldr	r3, [r3, #16]
 80070f0:	2b04      	cmp	r3, #4
 80070f2:	d110      	bne.n	8007116 <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
	{
		controlRef.byte[0] = can1RxData[0];
 80070f4:	4b0c      	ldr	r3, [pc, #48]	; (8007128 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	733b      	strb	r3, [r7, #12]
		controlRef.byte[1] = can1RxData[1];
 80070fa:	4b0b      	ldr	r3, [pc, #44]	; (8007128 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 80070fc:	785b      	ldrb	r3, [r3, #1]
 80070fe:	737b      	strb	r3, [r7, #13]
		controlRef.byte[2] = can1RxData[2];
 8007100:	4b09      	ldr	r3, [pc, #36]	; (8007128 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8007102:	789b      	ldrb	r3, [r3, #2]
 8007104:	73bb      	strb	r3, [r7, #14]
		controlRef.byte[3] = can1RxData[3];
 8007106:	4b08      	ldr	r3, [pc, #32]	; (8007128 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 8007108:	78db      	ldrb	r3, [r3, #3]
 800710a:	73fb      	strb	r3, [r7, #15]

		omega_ref = controlRef.fval;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	4a09      	ldr	r2, [pc, #36]	; (8007134 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 8007110:	6013      	str	r3, [r2, #0]

		timeoutReset();
 8007112:	f001 fceb 	bl	8008aec <timeoutReset>
		theta_ref = controlRef.fval;
	}
#endif


	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_SET);
 8007116:	2201      	movs	r2, #1
 8007118:	2140      	movs	r1, #64	; 0x40
 800711a:	4807      	ldr	r0, [pc, #28]	; (8007138 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 800711c:	f7fb feea 	bl	8002ef4 <HAL_GPIO_WritePin>

}
 8007120:	bf00      	nop
 8007122:	3710      	adds	r7, #16
 8007124:	46bd      	mov	sp, r7
 8007126:	bd80      	pop	{r7, pc}
 8007128:	20000458 	.word	0x20000458
 800712c:	2000043c 	.word	0x2000043c
 8007130:	20000185 	.word	0x20000185
 8007134:	20000100 	.word	0x20000100
 8007138:	40020000 	.word	0x40020000

0800713c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8007142:	2300      	movs	r3, #0
 8007144:	607b      	str	r3, [r7, #4]
 8007146:	4b14      	ldr	r3, [pc, #80]	; (8007198 <MX_DMA_Init+0x5c>)
 8007148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800714a:	4a13      	ldr	r2, [pc, #76]	; (8007198 <MX_DMA_Init+0x5c>)
 800714c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007150:	6313      	str	r3, [r2, #48]	; 0x30
 8007152:	4b11      	ldr	r3, [pc, #68]	; (8007198 <MX_DMA_Init+0x5c>)
 8007154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800715a:	607b      	str	r3, [r7, #4]
 800715c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800715e:	2200      	movs	r2, #0
 8007160:	2100      	movs	r1, #0
 8007162:	2038      	movs	r0, #56	; 0x38
 8007164:	f7fb f94d 	bl	8002402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8007168:	2038      	movs	r0, #56	; 0x38
 800716a:	f7fb f966 	bl	800243a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800716e:	2200      	movs	r2, #0
 8007170:	2100      	movs	r1, #0
 8007172:	2039      	movs	r0, #57	; 0x39
 8007174:	f7fb f945 	bl	8002402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8007178:	2039      	movs	r0, #57	; 0x39
 800717a:	f7fb f95e 	bl	800243a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800717e:	2200      	movs	r2, #0
 8007180:	2100      	movs	r1, #0
 8007182:	203a      	movs	r0, #58	; 0x3a
 8007184:	f7fb f93d 	bl	8002402 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8007188:	203a      	movs	r0, #58	; 0x3a
 800718a:	f7fb f956 	bl	800243a <HAL_NVIC_EnableIRQ>

}
 800718e:	bf00      	nop
 8007190:	3708      	adds	r7, #8
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	40023800 	.word	0x40023800

0800719c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b08a      	sub	sp, #40	; 0x28
 80071a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071a2:	f107 0314 	add.w	r3, r7, #20
 80071a6:	2200      	movs	r2, #0
 80071a8:	601a      	str	r2, [r3, #0]
 80071aa:	605a      	str	r2, [r3, #4]
 80071ac:	609a      	str	r2, [r3, #8]
 80071ae:	60da      	str	r2, [r3, #12]
 80071b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80071b2:	2300      	movs	r3, #0
 80071b4:	613b      	str	r3, [r7, #16]
 80071b6:	4b45      	ldr	r3, [pc, #276]	; (80072cc <MX_GPIO_Init+0x130>)
 80071b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ba:	4a44      	ldr	r2, [pc, #272]	; (80072cc <MX_GPIO_Init+0x130>)
 80071bc:	f043 0304 	orr.w	r3, r3, #4
 80071c0:	6313      	str	r3, [r2, #48]	; 0x30
 80071c2:	4b42      	ldr	r3, [pc, #264]	; (80072cc <MX_GPIO_Init+0x130>)
 80071c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071c6:	f003 0304 	and.w	r3, r3, #4
 80071ca:	613b      	str	r3, [r7, #16]
 80071cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80071ce:	2300      	movs	r3, #0
 80071d0:	60fb      	str	r3, [r7, #12]
 80071d2:	4b3e      	ldr	r3, [pc, #248]	; (80072cc <MX_GPIO_Init+0x130>)
 80071d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d6:	4a3d      	ldr	r2, [pc, #244]	; (80072cc <MX_GPIO_Init+0x130>)
 80071d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071dc:	6313      	str	r3, [r2, #48]	; 0x30
 80071de:	4b3b      	ldr	r3, [pc, #236]	; (80072cc <MX_GPIO_Init+0x130>)
 80071e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071e6:	60fb      	str	r3, [r7, #12]
 80071e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80071ea:	2300      	movs	r3, #0
 80071ec:	60bb      	str	r3, [r7, #8]
 80071ee:	4b37      	ldr	r3, [pc, #220]	; (80072cc <MX_GPIO_Init+0x130>)
 80071f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f2:	4a36      	ldr	r2, [pc, #216]	; (80072cc <MX_GPIO_Init+0x130>)
 80071f4:	f043 0301 	orr.w	r3, r3, #1
 80071f8:	6313      	str	r3, [r2, #48]	; 0x30
 80071fa:	4b34      	ldr	r3, [pc, #208]	; (80072cc <MX_GPIO_Init+0x130>)
 80071fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071fe:	f003 0301 	and.w	r3, r3, #1
 8007202:	60bb      	str	r3, [r7, #8]
 8007204:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007206:	2300      	movs	r3, #0
 8007208:	607b      	str	r3, [r7, #4]
 800720a:	4b30      	ldr	r3, [pc, #192]	; (80072cc <MX_GPIO_Init+0x130>)
 800720c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800720e:	4a2f      	ldr	r2, [pc, #188]	; (80072cc <MX_GPIO_Init+0x130>)
 8007210:	f043 0302 	orr.w	r3, r3, #2
 8007214:	6313      	str	r3, [r2, #48]	; 0x30
 8007216:	4b2d      	ldr	r3, [pc, #180]	; (80072cc <MX_GPIO_Init+0x130>)
 8007218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800721a:	f003 0302 	and.w	r3, r3, #2
 800721e:	607b      	str	r3, [r7, #4]
 8007220:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DB1_Pin|OP_CAL_Pin|GATE_EN_Pin, GPIO_PIN_RESET);
 8007222:	2200      	movs	r2, #0
 8007224:	f44f 61cc 	mov.w	r1, #1632	; 0x660
 8007228:	4829      	ldr	r0, [pc, #164]	; (80072d0 <MX_GPIO_Init+0x134>)
 800722a:	f7fb fe63 	bl	8002ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_NSS_Pin|DB2_Pin|DB0_Pin, GPIO_PIN_RESET);
 800722e:	2200      	movs	r2, #0
 8007230:	f241 0150 	movw	r1, #4176	; 0x1050
 8007234:	4827      	ldr	r0, [pc, #156]	; (80072d4 <MX_GPIO_Init+0x138>)
 8007236:	f7fb fe5d 	bl	8002ef4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800723a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800723e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8007240:	4b25      	ldr	r3, [pc, #148]	; (80072d8 <MX_GPIO_Init+0x13c>)
 8007242:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007244:	2300      	movs	r3, #0
 8007246:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8007248:	f107 0314 	add.w	r3, r7, #20
 800724c:	4619      	mov	r1, r3
 800724e:	4823      	ldr	r0, [pc, #140]	; (80072dc <MX_GPIO_Init+0x140>)
 8007250:	f7fb fca6 	bl	8002ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|DB1_Pin|OP_CAL_Pin|GATE_EN_Pin;
 8007254:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 8007258:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800725a:	2301      	movs	r3, #1
 800725c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800725e:	2300      	movs	r3, #0
 8007260:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007262:	2300      	movs	r3, #0
 8007264:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007266:	f107 0314 	add.w	r3, r7, #20
 800726a:	4619      	mov	r1, r3
 800726c:	4818      	ldr	r0, [pc, #96]	; (80072d0 <MX_GPIO_Init+0x134>)
 800726e:	f7fb fc97 	bl	8002ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|DB2_Pin|DB0_Pin;
 8007272:	f241 0350 	movw	r3, #4176	; 0x1050
 8007276:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007278:	2301      	movs	r3, #1
 800727a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800727c:	2300      	movs	r3, #0
 800727e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007280:	2300      	movs	r3, #0
 8007282:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007284:	f107 0314 	add.w	r3, r7, #20
 8007288:	4619      	mov	r1, r3
 800728a:	4812      	ldr	r0, [pc, #72]	; (80072d4 <MX_GPIO_Init+0x138>)
 800728c:	f7fb fc88 	bl	8002ba0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CH_b0_Pin|CH_b1_Pin|CH_b2_Pin;
 8007290:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8007294:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007296:	2300      	movs	r3, #0
 8007298:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800729a:	2301      	movs	r3, #1
 800729c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800729e:	f107 0314 	add.w	r3, r7, #20
 80072a2:	4619      	mov	r1, r3
 80072a4:	480b      	ldr	r0, [pc, #44]	; (80072d4 <MX_GPIO_Init+0x138>)
 80072a6:	f7fb fc7b 	bl	8002ba0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BR_FLT_Pin;
 80072aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80072b0:	2300      	movs	r3, #0
 80072b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072b4:	2300      	movs	r3, #0
 80072b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BR_FLT_GPIO_Port, &GPIO_InitStruct);
 80072b8:	f107 0314 	add.w	r3, r7, #20
 80072bc:	4619      	mov	r1, r3
 80072be:	4804      	ldr	r0, [pc, #16]	; (80072d0 <MX_GPIO_Init+0x134>)
 80072c0:	f7fb fc6e 	bl	8002ba0 <HAL_GPIO_Init>

}
 80072c4:	bf00      	nop
 80072c6:	3728      	adds	r7, #40	; 0x28
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}
 80072cc:	40023800 	.word	0x40023800
 80072d0:	40020000 	.word	0x40020000
 80072d4:	40020400 	.word	0x40020400
 80072d8:	10210000 	.word	0x10210000
 80072dc:	40020800 	.word	0x40020800

080072e0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b083      	sub	sp, #12
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80072e8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80072ec:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80072f0:	f003 0301 	and.w	r3, r3, #1
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d013      	beq.n	8007320 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80072f8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80072fc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8007300:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8007304:	2b00      	cmp	r3, #0
 8007306:	d00b      	beq.n	8007320 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8007308:	e000      	b.n	800730c <ITM_SendChar+0x2c>
    {
      __NOP();
 800730a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800730c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d0f9      	beq.n	800730a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8007316:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	b2d2      	uxtb	r2, r2
 800731e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8007320:	687b      	ldr	r3, [r7, #4]
}
 8007322:	4618      	mov	r0, r3
 8007324:	370c      	adds	r7, #12
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr

0800732e <_write>:
#endif



int _write(int file, char *ptr, int len)
{
 800732e:	b580      	push	{r7, lr}
 8007330:	b086      	sub	sp, #24
 8007332:	af00      	add	r7, sp, #0
 8007334:	60f8      	str	r0, [r7, #12]
 8007336:	60b9      	str	r1, [r7, #8]
 8007338:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 800733a:	2300      	movs	r3, #0
 800733c:	617b      	str	r3, [r7, #20]
 800733e:	e009      	b.n	8007354 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	1c5a      	adds	r2, r3, #1
 8007344:	60ba      	str	r2, [r7, #8]
 8007346:	781b      	ldrb	r3, [r3, #0]
 8007348:	4618      	mov	r0, r3
 800734a:	f7ff ffc9 	bl	80072e0 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	3301      	adds	r3, #1
 8007352:	617b      	str	r3, [r7, #20]
 8007354:	697a      	ldr	r2, [r7, #20]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	429a      	cmp	r2, r3
 800735a:	dbf1      	blt.n	8007340 <_write+0x12>
  }
  return len;
 800735c:	687b      	ldr	r3, [r7, #4]
}
 800735e:	4618      	mov	r0, r3
 8007360:	3718      	adds	r7, #24
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
	...

08007368 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007368:	b590      	push	{r4, r7, lr}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */


	int count = 0;
 800736e:	2300      	movs	r3, #0
 8007370:	607b      	str	r3, [r7, #4]

	volatile float forced_theta_re = 0.0f;
 8007372:	f04f 0300 	mov.w	r3, #0
 8007376:	603b      	str	r3, [r7, #0]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007378:	f7f9 fd6c 	bl	8000e54 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800737c:	f000 f982 	bl	8007684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007380:	f7ff ff0c 	bl	800719c <MX_GPIO_Init>
  MX_DMA_Init();
 8007384:	f7ff feda 	bl	800713c <MX_DMA_Init>
  MX_ADC1_Init();
 8007388:	f7ff f8dc 	bl	8006544 <MX_ADC1_Init>
  MX_ADC2_Init();
 800738c:	f7ff f92c 	bl	80065e8 <MX_ADC2_Init>
  MX_ADC3_Init();
 8007390:	f7ff f97c 	bl	800668c <MX_ADC3_Init>
  MX_CAN1_Init();
 8007394:	f7ff fd48 	bl	8006e28 <MX_CAN1_Init>
  MX_SPI2_Init();
 8007398:	f000 fd96 	bl	8007ec8 <MX_SPI2_Init>
  MX_SPI3_Init();
 800739c:	f000 fdcc 	bl	8007f38 <MX_SPI3_Init>
  MX_TIM8_Init();
 80073a0:	f001 f9ca 	bl	8008738 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 80073a4:	f001 fbbc 	bl	8008b20 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  ADC_Init();
 80073a8:	f7ff fb20 	bl	80069ec <ADC_Init>

  /********** CAN Setting **********/


  CAN_Init();
 80073ac:	f7ff fdcc 	bl	8006f48 <CAN_Init>


  //UartPrintf(&huart2, "Hello world\n");

  printf("Hello\n");
 80073b0:	48a7      	ldr	r0, [pc, #668]	; (8007650 <main+0x2e8>)
 80073b2:	f001 fce7 	bl	8008d84 <puts>

  // Gate Enable
  HAL_GPIO_WritePin(GATE_EN_GPIO_Port, GATE_EN_Pin, GPIO_PIN_SET);
 80073b6:	2201      	movs	r2, #1
 80073b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80073bc:	48a5      	ldr	r0, [pc, #660]	; (8007654 <main+0x2ec>)
 80073be:	f7fb fd99 	bl	8002ef4 <HAL_GPIO_WritePin>


  // Current Sensing Auto Offset Calibration
  HAL_GPIO_WritePin(OP_CAL_GPIO_Port, OP_CAL_Pin, GPIO_PIN_SET);
 80073c2:	2201      	movs	r2, #1
 80073c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80073c8:	48a2      	ldr	r0, [pc, #648]	; (8007654 <main+0x2ec>)
 80073ca:	f7fb fd93 	bl	8002ef4 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80073ce:	200a      	movs	r0, #10
 80073d0:	f7f9 fdb2 	bl	8000f38 <HAL_Delay>
  HAL_GPIO_WritePin(OP_CAL_GPIO_Port, OP_CAL_Pin, GPIO_PIN_RESET);
 80073d4:	2200      	movs	r2, #0
 80073d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80073da:	489e      	ldr	r0, [pc, #632]	; (8007654 <main+0x2ec>)
 80073dc:	f7fb fd8a 	bl	8002ef4 <HAL_GPIO_WritePin>


  /******** DEBUG ********/

  HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_RESET);
 80073e0:	2200      	movs	r2, #0
 80073e2:	2140      	movs	r1, #64	; 0x40
 80073e4:	489b      	ldr	r0, [pc, #620]	; (8007654 <main+0x2ec>)
 80073e6:	f7fb fd85 	bl	8002ef4 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, GPIO_PIN_RESET);
 80073ea:	2200      	movs	r2, #0
 80073ec:	2110      	movs	r1, #16
 80073ee:	489a      	ldr	r0, [pc, #616]	; (8007658 <main+0x2f0>)
 80073f0:	f7fb fd80 	bl	8002ef4 <HAL_GPIO_WritePin>


  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 80073f4:	2201      	movs	r2, #1
 80073f6:	2120      	movs	r1, #32
 80073f8:	4896      	ldr	r0, [pc, #600]	; (8007654 <main+0x2ec>)
 80073fa:	f7fb fd7b 	bl	8002ef4 <HAL_GPIO_WritePin>
 80073fe:	2064      	movs	r0, #100	; 0x64
 8007400:	f7f9 fd9a 	bl	8000f38 <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 8007404:	2200      	movs	r2, #0
 8007406:	2120      	movs	r1, #32
 8007408:	4892      	ldr	r0, [pc, #584]	; (8007654 <main+0x2ec>)
 800740a:	f7fb fd73 	bl	8002ef4 <HAL_GPIO_WritePin>
 800740e:	2064      	movs	r0, #100	; 0x64
 8007410:	f7f9 fd92 	bl	8000f38 <HAL_Delay>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 8007414:	2201      	movs	r2, #1
 8007416:	2120      	movs	r1, #32
 8007418:	488e      	ldr	r0, [pc, #568]	; (8007654 <main+0x2ec>)
 800741a:	f7fb fd6b 	bl	8002ef4 <HAL_GPIO_WritePin>
 800741e:	2064      	movs	r0, #100	; 0x64
 8007420:	f7f9 fd8a 	bl	8000f38 <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 8007424:	2200      	movs	r2, #0
 8007426:	2120      	movs	r1, #32
 8007428:	488a      	ldr	r0, [pc, #552]	; (8007654 <main+0x2ec>)
 800742a:	f7fb fd63 	bl	8002ef4 <HAL_GPIO_WritePin>
 800742e:	2064      	movs	r0, #100	; 0x64
 8007430:	f7f9 fd82 	bl	8000f38 <HAL_Delay>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 8007434:	2201      	movs	r2, #1
 8007436:	2120      	movs	r1, #32
 8007438:	4886      	ldr	r0, [pc, #536]	; (8007654 <main+0x2ec>)
 800743a:	f7fb fd5b 	bl	8002ef4 <HAL_GPIO_WritePin>
 800743e:	2064      	movs	r0, #100	; 0x64
 8007440:	f7f9 fd7a 	bl	8000f38 <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 8007444:	2200      	movs	r2, #0
 8007446:	2120      	movs	r1, #32
 8007448:	4882      	ldr	r0, [pc, #520]	; (8007654 <main+0x2ec>)
 800744a:	f7fb fd53 	bl	8002ef4 <HAL_GPIO_WritePin>
 800744e:	2064      	movs	r0, #100	; 0x64
 8007450:	f7f9 fd72 	bl	8000f38 <HAL_Delay>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 8007454:	2201      	movs	r2, #1
 8007456:	2120      	movs	r1, #32
 8007458:	487e      	ldr	r0, [pc, #504]	; (8007654 <main+0x2ec>)
 800745a:	f7fb fd4b 	bl	8002ef4 <HAL_GPIO_WritePin>
 800745e:	2064      	movs	r0, #100	; 0x64
 8007460:	f7f9 fd6a 	bl	8000f38 <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 8007464:	2200      	movs	r2, #0
 8007466:	2120      	movs	r1, #32
 8007468:	487a      	ldr	r0, [pc, #488]	; (8007654 <main+0x2ec>)
 800746a:	f7fb fd43 	bl	8002ef4 <HAL_GPIO_WritePin>
 800746e:	2064      	movs	r0, #100	; 0x64
 8007470:	f7f9 fd62 	bl	8000f38 <HAL_Delay>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 8007474:	2201      	movs	r2, #1
 8007476:	2120      	movs	r1, #32
 8007478:	4876      	ldr	r0, [pc, #472]	; (8007654 <main+0x2ec>)
 800747a:	f7fb fd3b 	bl	8002ef4 <HAL_GPIO_WritePin>
 800747e:	2064      	movs	r0, #100	; 0x64
 8007480:	f7f9 fd5a 	bl	8000f38 <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 8007484:	2200      	movs	r2, #0
 8007486:	2120      	movs	r1, #32
 8007488:	4872      	ldr	r0, [pc, #456]	; (8007654 <main+0x2ec>)
 800748a:	f7fb fd33 	bl	8002ef4 <HAL_GPIO_WritePin>
 800748e:	2064      	movs	r0, #100	; 0x64
 8007490:	f7f9 fd52 	bl	8000f38 <HAL_Delay>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 8007494:	2201      	movs	r2, #1
 8007496:	2120      	movs	r1, #32
 8007498:	486e      	ldr	r0, [pc, #440]	; (8007654 <main+0x2ec>)
 800749a:	f7fb fd2b 	bl	8002ef4 <HAL_GPIO_WritePin>
 800749e:	2064      	movs	r0, #100	; 0x64
 80074a0:	f7f9 fd4a 	bl	8000f38 <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 80074a4:	2200      	movs	r2, #0
 80074a6:	2120      	movs	r1, #32
 80074a8:	486a      	ldr	r0, [pc, #424]	; (8007654 <main+0x2ec>)
 80074aa:	f7fb fd23 	bl	8002ef4 <HAL_GPIO_WritePin>
 80074ae:	2064      	movs	r0, #100	; 0x64
 80074b0:	f7f9 fd42 	bl	8000f38 <HAL_Delay>



  TIM_Init();
 80074b4:	f001 fa9a 	bl	80089ec <TIM_Init>

  SPI_Init();
 80074b8:	f000 fe68 	bl	800818c <SPI_Init>

  startPWM();
 80074bc:	f001 faac 	bl	8008a18 <startPWM>

  Vd_ref = 1.0f;
 80074c0:	4b66      	ldr	r3, [pc, #408]	; (800765c <main+0x2f4>)
 80074c2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80074c6:	601a      	str	r2, [r3, #0]
  Vq_ref = 0;
 80074c8:	4b65      	ldr	r3, [pc, #404]	; (8007660 <main+0x2f8>)
 80074ca:	f04f 0200 	mov.w	r2, #0
 80074ce:	601a      	str	r2, [r3, #0]

  for(count = 0; count < POLES / 2; count++)
 80074d0:	2300      	movs	r3, #0
 80074d2:	607b      	str	r3, [r7, #4]
 80074d4:	e050      	b.n	8007578 <main+0x210>
  {
	  for(forced_theta_re = 0.0f; forced_theta_re < 2 * M_PI; forced_theta_re += 0.05)
 80074d6:	f04f 0300 	mov.w	r3, #0
 80074da:	603b      	str	r3, [r7, #0]
 80074dc:	e03d      	b.n	800755a <main+0x1f2>
	  {
		  HAL_Delay(1);
 80074de:	2001      	movs	r0, #1
 80074e0:	f7f9 fd2a 	bl	8000f38 <HAL_Delay>
		  cos_theta_re = sin_table2[(int)((forced_theta_re * 0.3183f + 0.5f) * 5000.0f)];
 80074e4:	edd7 7a00 	vldr	s15, [r7]
 80074e8:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8007664 <main+0x2fc>
 80074ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80074f0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80074f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80074f8:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8007668 <main+0x300>
 80074fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007500:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007504:	ee17 3a90 	vmov	r3, s15
 8007508:	4a58      	ldr	r2, [pc, #352]	; (800766c <main+0x304>)
 800750a:	009b      	lsls	r3, r3, #2
 800750c:	4413      	add	r3, r2
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a57      	ldr	r2, [pc, #348]	; (8007670 <main+0x308>)
 8007512:	6013      	str	r3, [r2, #0]
		  sin_theta_re = sin_table2[(int)(forced_theta_re * 1591.54943f)];
 8007514:	edd7 7a00 	vldr	s15, [r7]
 8007518:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8007674 <main+0x30c>
 800751c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007520:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007524:	ee17 3a90 	vmov	r3, s15
 8007528:	4a50      	ldr	r2, [pc, #320]	; (800766c <main+0x304>)
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	4413      	add	r3, r2
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a51      	ldr	r2, [pc, #324]	; (8007678 <main+0x310>)
 8007532:	6013      	str	r3, [r2, #0]
		  setSVM_dq();
 8007534:	f000 f91a 	bl	800776c <setSVM_dq>
	  for(forced_theta_re = 0.0f; forced_theta_re < 2 * M_PI; forced_theta_re += 0.05)
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	4618      	mov	r0, r3
 800753c:	f7f8 ffc8 	bl	80004d0 <__aeabi_f2d>
 8007540:	a33f      	add	r3, pc, #252	; (adr r3, 8007640 <main+0x2d8>)
 8007542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007546:	f7f8 fe65 	bl	8000214 <__adddf3>
 800754a:	4603      	mov	r3, r0
 800754c:	460c      	mov	r4, r1
 800754e:	4618      	mov	r0, r3
 8007550:	4621      	mov	r1, r4
 8007552:	f7f9 faaf 	bl	8000ab4 <__aeabi_d2f>
 8007556:	4603      	mov	r3, r0
 8007558:	603b      	str	r3, [r7, #0]
 800755a:	683b      	ldr	r3, [r7, #0]
 800755c:	4618      	mov	r0, r3
 800755e:	f7f8 ffb7 	bl	80004d0 <__aeabi_f2d>
 8007562:	a339      	add	r3, pc, #228	; (adr r3, 8007648 <main+0x2e0>)
 8007564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007568:	f7f9 fa7c 	bl	8000a64 <__aeabi_dcmplt>
 800756c:	4603      	mov	r3, r0
 800756e:	2b00      	cmp	r3, #0
 8007570:	d1b5      	bne.n	80074de <main+0x176>
  for(count = 0; count < POLES / 2; count++)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	3301      	adds	r3, #1
 8007576:	607b      	str	r3, [r7, #4]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2b0a      	cmp	r3, #10
 800757c:	ddab      	ble.n	80074d6 <main+0x16e>
	  }
  }

  for(count = 0; count < POLES / 2; count++)
 800757e:	2300      	movs	r3, #0
 8007580:	607b      	str	r3, [r7, #4]
 8007582:	e04a      	b.n	800761a <main+0x2b2>
	{
	  for(forced_theta_re = 2 * M_PI; forced_theta_re > 0.0f; forced_theta_re -= 0.05)
 8007584:	4b3d      	ldr	r3, [pc, #244]	; (800767c <main+0x314>)
 8007586:	603b      	str	r3, [r7, #0]
 8007588:	e03d      	b.n	8007606 <main+0x29e>
	  {
		  HAL_Delay(1);
 800758a:	2001      	movs	r0, #1
 800758c:	f7f9 fcd4 	bl	8000f38 <HAL_Delay>
		  cos_theta_re = sin_table2[(int)((forced_theta_re * 0.3183f + 0.5f) * 5000.0f)];
 8007590:	edd7 7a00 	vldr	s15, [r7]
 8007594:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8007664 <main+0x2fc>
 8007598:	ee67 7a87 	vmul.f32	s15, s15, s14
 800759c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80075a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80075a4:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8007668 <main+0x300>
 80075a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80075ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80075b0:	ee17 3a90 	vmov	r3, s15
 80075b4:	4a2d      	ldr	r2, [pc, #180]	; (800766c <main+0x304>)
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	4413      	add	r3, r2
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	4a2c      	ldr	r2, [pc, #176]	; (8007670 <main+0x308>)
 80075be:	6013      	str	r3, [r2, #0]
		  sin_theta_re = sin_table2[(int)(forced_theta_re * 1591.54943f)];
 80075c0:	edd7 7a00 	vldr	s15, [r7]
 80075c4:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8007674 <main+0x30c>
 80075c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80075cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80075d0:	ee17 3a90 	vmov	r3, s15
 80075d4:	4a25      	ldr	r2, [pc, #148]	; (800766c <main+0x304>)
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	4413      	add	r3, r2
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a26      	ldr	r2, [pc, #152]	; (8007678 <main+0x310>)
 80075de:	6013      	str	r3, [r2, #0]
		  setSVM_dq();
 80075e0:	f000 f8c4 	bl	800776c <setSVM_dq>
	  for(forced_theta_re = 2 * M_PI; forced_theta_re > 0.0f; forced_theta_re -= 0.05)
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	4618      	mov	r0, r3
 80075e8:	f7f8 ff72 	bl	80004d0 <__aeabi_f2d>
 80075ec:	a314      	add	r3, pc, #80	; (adr r3, 8007640 <main+0x2d8>)
 80075ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f2:	f7f8 fe0d 	bl	8000210 <__aeabi_dsub>
 80075f6:	4603      	mov	r3, r0
 80075f8:	460c      	mov	r4, r1
 80075fa:	4618      	mov	r0, r3
 80075fc:	4621      	mov	r1, r4
 80075fe:	f7f9 fa59 	bl	8000ab4 <__aeabi_d2f>
 8007602:	4603      	mov	r3, r0
 8007604:	603b      	str	r3, [r7, #0]
 8007606:	edd7 7a00 	vldr	s15, [r7]
 800760a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800760e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007612:	dcba      	bgt.n	800758a <main+0x222>
  for(count = 0; count < POLES / 2; count++)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	3301      	adds	r3, #1
 8007618:	607b      	str	r3, [r7, #4]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2b0a      	cmp	r3, #10
 800761e:	ddb1      	ble.n	8007584 <main+0x21c>
	  }
	}


  stopPWM();
 8007620:	f001 fa18 	bl	8008a54 <stopPWM>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  if(ASR_flg == 1)
 8007624:	4b16      	ldr	r3, [pc, #88]	; (8007680 <main+0x318>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	2b01      	cmp	r3, #1
 800762a:	d1fb      	bne.n	8007624 <main+0x2bc>
	  {
		  HAL_GPIO_TogglePin(DB2_GPIO_Port, DB2_Pin);
 800762c:	2110      	movs	r1, #16
 800762e:	480a      	ldr	r0, [pc, #40]	; (8007658 <main+0x2f0>)
 8007630:	f7fb fc79 	bl	8002f26 <HAL_GPIO_TogglePin>
#endif

		  /********** ASR (Auto Speed Regulator) **********/


		  speedControl();
 8007634:	f7fe fdb4 	bl	80061a0 <speedControl>


		  /********** end of ASR **********/


		  ASR_flg = 0;
 8007638:	4b11      	ldr	r3, [pc, #68]	; (8007680 <main+0x318>)
 800763a:	2200      	movs	r2, #0
 800763c:	601a      	str	r2, [r3, #0]
	  if(ASR_flg == 1)
 800763e:	e7f1      	b.n	8007624 <main+0x2bc>
 8007640:	9999999a 	.word	0x9999999a
 8007644:	3fa99999 	.word	0x3fa99999
 8007648:	54442d18 	.word	0x54442d18
 800764c:	401921fb 	.word	0x401921fb
 8007650:	08009780 	.word	0x08009780
 8007654:	40020000 	.word	0x40020000
 8007658:	40020400 	.word	0x40020400
 800765c:	20000188 	.word	0x20000188
 8007660:	2000018c 	.word	0x2000018c
 8007664:	3ea2f838 	.word	0x3ea2f838
 8007668:	459c4000 	.word	0x459c4000
 800766c:	080097c8 	.word	0x080097c8
 8007670:	20000034 	.word	0x20000034
 8007674:	44c6f195 	.word	0x44c6f195
 8007678:	200001e0 	.word	0x200001e0
 800767c:	40c90fdb 	.word	0x40c90fdb
 8007680:	20000114 	.word	0x20000114

08007684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b094      	sub	sp, #80	; 0x50
 8007688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800768a:	f107 031c 	add.w	r3, r7, #28
 800768e:	2234      	movs	r2, #52	; 0x34
 8007690:	2100      	movs	r1, #0
 8007692:	4618      	mov	r0, r3
 8007694:	f001 fb12 	bl	8008cbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007698:	f107 0308 	add.w	r3, r7, #8
 800769c:	2200      	movs	r2, #0
 800769e:	601a      	str	r2, [r3, #0]
 80076a0:	605a      	str	r2, [r3, #4]
 80076a2:	609a      	str	r2, [r3, #8]
 80076a4:	60da      	str	r2, [r3, #12]
 80076a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80076a8:	2300      	movs	r3, #0
 80076aa:	607b      	str	r3, [r7, #4]
 80076ac:	4b29      	ldr	r3, [pc, #164]	; (8007754 <SystemClock_Config+0xd0>)
 80076ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b0:	4a28      	ldr	r2, [pc, #160]	; (8007754 <SystemClock_Config+0xd0>)
 80076b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076b6:	6413      	str	r3, [r2, #64]	; 0x40
 80076b8:	4b26      	ldr	r3, [pc, #152]	; (8007754 <SystemClock_Config+0xd0>)
 80076ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076c0:	607b      	str	r3, [r7, #4]
 80076c2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80076c4:	2300      	movs	r3, #0
 80076c6:	603b      	str	r3, [r7, #0]
 80076c8:	4b23      	ldr	r3, [pc, #140]	; (8007758 <SystemClock_Config+0xd4>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	4a22      	ldr	r2, [pc, #136]	; (8007758 <SystemClock_Config+0xd4>)
 80076ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80076d2:	6013      	str	r3, [r2, #0]
 80076d4:	4b20      	ldr	r3, [pc, #128]	; (8007758 <SystemClock_Config+0xd4>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80076dc:	603b      	str	r3, [r7, #0]
 80076de:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80076e0:	2302      	movs	r3, #2
 80076e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80076e4:	2301      	movs	r3, #1
 80076e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80076e8:	2310      	movs	r3, #16
 80076ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80076ec:	2302      	movs	r3, #2
 80076ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80076f0:	2300      	movs	r3, #0
 80076f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80076f4:	2310      	movs	r3, #16
 80076f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 320;
 80076f8:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80076fc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80076fe:	2302      	movs	r3, #2
 8007700:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8007702:	2302      	movs	r3, #2
 8007704:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8007706:	2302      	movs	r3, #2
 8007708:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800770a:	f107 031c 	add.w	r3, r7, #28
 800770e:	4618      	mov	r0, r3
 8007710:	f7fb feda 	bl	80034c8 <HAL_RCC_OscConfig>
 8007714:	4603      	mov	r3, r0
 8007716:	2b00      	cmp	r3, #0
 8007718:	d001      	beq.n	800771e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800771a:	f000 f81f 	bl	800775c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800771e:	230f      	movs	r3, #15
 8007720:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007722:	2302      	movs	r3, #2
 8007724:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007726:	2300      	movs	r3, #0
 8007728:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800772a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800772e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007730:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007734:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007736:	f107 0308 	add.w	r3, r7, #8
 800773a:	2105      	movs	r1, #5
 800773c:	4618      	mov	r0, r3
 800773e:	f7fb fc0d 	bl	8002f5c <HAL_RCC_ClockConfig>
 8007742:	4603      	mov	r3, r0
 8007744:	2b00      	cmp	r3, #0
 8007746:	d001      	beq.n	800774c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8007748:	f000 f808 	bl	800775c <Error_Handler>
  }
}
 800774c:	bf00      	nop
 800774e:	3750      	adds	r7, #80	; 0x50
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}
 8007754:	40023800 	.word	0x40023800
 8007758:	40007000 	.word	0x40007000

0800775c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800775c:	b480      	push	{r7}
 800775e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007760:	bf00      	nop
 8007762:	46bd      	mov	sp, r7
 8007764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007768:	4770      	bx	lr
	...

0800776c <setSVM_dq>:
volatile int sector_SVM = 0;



inline void setSVM_dq()
{
 800776c:	b5b0      	push	{r4, r5, r7, lr}
 800776e:	af00      	add	r7, sp, #0
	static float vect1, vect2;




	x = Vd_ref * cos_theta_re - Vq_ref * sin_theta_re;
 8007770:	4bb8      	ldr	r3, [pc, #736]	; (8007a54 <setSVM_dq+0x2e8>)
 8007772:	ed93 7a00 	vldr	s14, [r3]
 8007776:	4bb8      	ldr	r3, [pc, #736]	; (8007a58 <setSVM_dq+0x2ec>)
 8007778:	edd3 7a00 	vldr	s15, [r3]
 800777c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007780:	4bb6      	ldr	r3, [pc, #728]	; (8007a5c <setSVM_dq+0x2f0>)
 8007782:	edd3 6a00 	vldr	s13, [r3]
 8007786:	4bb6      	ldr	r3, [pc, #728]	; (8007a60 <setSVM_dq+0x2f4>)
 8007788:	edd3 7a00 	vldr	s15, [r3]
 800778c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007790:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007794:	4bb3      	ldr	r3, [pc, #716]	; (8007a64 <setSVM_dq+0x2f8>)
 8007796:	edc3 7a00 	vstr	s15, [r3]
	y = Vd_ref * sin_theta_re + Vq_ref * cos_theta_re;
 800779a:	4bae      	ldr	r3, [pc, #696]	; (8007a54 <setSVM_dq+0x2e8>)
 800779c:	ed93 7a00 	vldr	s14, [r3]
 80077a0:	4baf      	ldr	r3, [pc, #700]	; (8007a60 <setSVM_dq+0x2f4>)
 80077a2:	edd3 7a00 	vldr	s15, [r3]
 80077a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80077aa:	4bac      	ldr	r3, [pc, #688]	; (8007a5c <setSVM_dq+0x2f0>)
 80077ac:	edd3 6a00 	vldr	s13, [r3]
 80077b0:	4ba9      	ldr	r3, [pc, #676]	; (8007a58 <setSVM_dq+0x2ec>)
 80077b2:	edd3 7a00 	vldr	s15, [r3]
 80077b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80077ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80077be:	4baa      	ldr	r3, [pc, #680]	; (8007a68 <setSVM_dq+0x2fc>)
 80077c0:	edc3 7a00 	vstr	s15, [r3]

	cross0 = refVector[0][0] * y - refVector[0][1] * x;
 80077c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077c8:	4ba7      	ldr	r3, [pc, #668]	; (8007a68 <setSVM_dq+0x2fc>)
 80077ca:	edd3 7a00 	vldr	s15, [r3]
 80077ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80077d2:	eddf 6aa6 	vldr	s13, [pc, #664]	; 8007a6c <setSVM_dq+0x300>
 80077d6:	4ba3      	ldr	r3, [pc, #652]	; (8007a64 <setSVM_dq+0x2f8>)
 80077d8:	edd3 7a00 	vldr	s15, [r3]
 80077dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80077e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80077e4:	4ba2      	ldr	r3, [pc, #648]	; (8007a70 <setSVM_dq+0x304>)
 80077e6:	edc3 7a00 	vstr	s15, [r3]
	cross1 = refVector[1][0] * y - refVector[1][1] * x;
 80077ea:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80077ee:	4b9e      	ldr	r3, [pc, #632]	; (8007a68 <setSVM_dq+0x2fc>)
 80077f0:	edd3 7a00 	vldr	s15, [r3]
 80077f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80077f8:	eddf 6a9e 	vldr	s13, [pc, #632]	; 8007a74 <setSVM_dq+0x308>
 80077fc:	4b99      	ldr	r3, [pc, #612]	; (8007a64 <setSVM_dq+0x2f8>)
 80077fe:	edd3 7a00 	vldr	s15, [r3]
 8007802:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007806:	ee77 7a67 	vsub.f32	s15, s14, s15
 800780a:	4b9b      	ldr	r3, [pc, #620]	; (8007a78 <setSVM_dq+0x30c>)
 800780c:	edc3 7a00 	vstr	s15, [r3]

	if(cross0 >= 0)
 8007810:	4b97      	ldr	r3, [pc, #604]	; (8007a70 <setSVM_dq+0x304>)
 8007812:	edd3 7a00 	vldr	s15, [r3]
 8007816:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800781a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800781e:	db1e      	blt.n	800785e <setSVM_dq+0xf2>
	{
		if(cross1 <= 0)				sector_SVM = 0;
 8007820:	4b95      	ldr	r3, [pc, #596]	; (8007a78 <setSVM_dq+0x30c>)
 8007822:	edd3 7a00 	vldr	s15, [r3]
 8007826:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800782a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800782e:	d803      	bhi.n	8007838 <setSVM_dq+0xcc>
 8007830:	4b92      	ldr	r3, [pc, #584]	; (8007a7c <setSVM_dq+0x310>)
 8007832:	2200      	movs	r2, #0
 8007834:	601a      	str	r2, [r3, #0]
 8007836:	e030      	b.n	800789a <setSVM_dq+0x12e>
		else if(cross0 >= cross1)	sector_SVM = 1;
 8007838:	4b8d      	ldr	r3, [pc, #564]	; (8007a70 <setSVM_dq+0x304>)
 800783a:	ed93 7a00 	vldr	s14, [r3]
 800783e:	4b8e      	ldr	r3, [pc, #568]	; (8007a78 <setSVM_dq+0x30c>)
 8007840:	edd3 7a00 	vldr	s15, [r3]
 8007844:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800784c:	db03      	blt.n	8007856 <setSVM_dq+0xea>
 800784e:	4b8b      	ldr	r3, [pc, #556]	; (8007a7c <setSVM_dq+0x310>)
 8007850:	2201      	movs	r2, #1
 8007852:	601a      	str	r2, [r3, #0]
 8007854:	e021      	b.n	800789a <setSVM_dq+0x12e>
		else						sector_SVM = 2;
 8007856:	4b89      	ldr	r3, [pc, #548]	; (8007a7c <setSVM_dq+0x310>)
 8007858:	2202      	movs	r2, #2
 800785a:	601a      	str	r2, [r3, #0]
 800785c:	e01d      	b.n	800789a <setSVM_dq+0x12e>
	}
	else
	{
		if(cross1 >= 0)				sector_SVM = 3;
 800785e:	4b86      	ldr	r3, [pc, #536]	; (8007a78 <setSVM_dq+0x30c>)
 8007860:	edd3 7a00 	vldr	s15, [r3]
 8007864:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800786c:	db03      	blt.n	8007876 <setSVM_dq+0x10a>
 800786e:	4b83      	ldr	r3, [pc, #524]	; (8007a7c <setSVM_dq+0x310>)
 8007870:	2203      	movs	r2, #3
 8007872:	601a      	str	r2, [r3, #0]
 8007874:	e011      	b.n	800789a <setSVM_dq+0x12e>
		else if(cross0 <= cross1)	sector_SVM = 4;
 8007876:	4b7e      	ldr	r3, [pc, #504]	; (8007a70 <setSVM_dq+0x304>)
 8007878:	ed93 7a00 	vldr	s14, [r3]
 800787c:	4b7e      	ldr	r3, [pc, #504]	; (8007a78 <setSVM_dq+0x30c>)
 800787e:	edd3 7a00 	vldr	s15, [r3]
 8007882:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800788a:	d803      	bhi.n	8007894 <setSVM_dq+0x128>
 800788c:	4b7b      	ldr	r3, [pc, #492]	; (8007a7c <setSVM_dq+0x310>)
 800788e:	2204      	movs	r2, #4
 8007890:	601a      	str	r2, [r3, #0]
 8007892:	e002      	b.n	800789a <setSVM_dq+0x12e>
		else						sector_SVM = 5;
 8007894:	4b79      	ldr	r3, [pc, #484]	; (8007a7c <setSVM_dq+0x310>)
 8007896:	2205      	movs	r2, #5
 8007898:	601a      	str	r2, [r3, #0]
	}

	x1 = refVector[sector_SVM][0];
 800789a:	4b78      	ldr	r3, [pc, #480]	; (8007a7c <setSVM_dq+0x310>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a78      	ldr	r2, [pc, #480]	; (8007a80 <setSVM_dq+0x314>)
 80078a0:	00db      	lsls	r3, r3, #3
 80078a2:	4413      	add	r3, r2
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a77      	ldr	r2, [pc, #476]	; (8007a84 <setSVM_dq+0x318>)
 80078a8:	6013      	str	r3, [r2, #0]
	y1 = refVector[sector_SVM][1];
 80078aa:	4b74      	ldr	r3, [pc, #464]	; (8007a7c <setSVM_dq+0x310>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a74      	ldr	r2, [pc, #464]	; (8007a80 <setSVM_dq+0x314>)
 80078b0:	00db      	lsls	r3, r3, #3
 80078b2:	4413      	add	r3, r2
 80078b4:	3304      	adds	r3, #4
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a73      	ldr	r2, [pc, #460]	; (8007a88 <setSVM_dq+0x31c>)
 80078ba:	6013      	str	r3, [r2, #0]
	x2 = refVector[sector_SVM + 1][0];
 80078bc:	4b6f      	ldr	r3, [pc, #444]	; (8007a7c <setSVM_dq+0x310>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	3301      	adds	r3, #1
 80078c2:	4a6f      	ldr	r2, [pc, #444]	; (8007a80 <setSVM_dq+0x314>)
 80078c4:	00db      	lsls	r3, r3, #3
 80078c6:	4413      	add	r3, r2
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a70      	ldr	r2, [pc, #448]	; (8007a8c <setSVM_dq+0x320>)
 80078cc:	6013      	str	r3, [r2, #0]
	y2 = refVector[sector_SVM + 1][1];
 80078ce:	4b6b      	ldr	r3, [pc, #428]	; (8007a7c <setSVM_dq+0x310>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	3301      	adds	r3, #1
 80078d4:	4a6a      	ldr	r2, [pc, #424]	; (8007a80 <setSVM_dq+0x314>)
 80078d6:	00db      	lsls	r3, r3, #3
 80078d8:	4413      	add	r3, r2
 80078da:	3304      	adds	r3, #4
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a6c      	ldr	r2, [pc, #432]	; (8007a90 <setSVM_dq+0x324>)
 80078e0:	6013      	str	r3, [r2, #0]

	vect1 = (y2 * x - x2 * y) / ((x1 * y2 - y1 * x2) * Vdc);
 80078e2:	4b6b      	ldr	r3, [pc, #428]	; (8007a90 <setSVM_dq+0x324>)
 80078e4:	ed93 7a00 	vldr	s14, [r3]
 80078e8:	4b5e      	ldr	r3, [pc, #376]	; (8007a64 <setSVM_dq+0x2f8>)
 80078ea:	edd3 7a00 	vldr	s15, [r3]
 80078ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80078f2:	4b66      	ldr	r3, [pc, #408]	; (8007a8c <setSVM_dq+0x320>)
 80078f4:	edd3 6a00 	vldr	s13, [r3]
 80078f8:	4b5b      	ldr	r3, [pc, #364]	; (8007a68 <setSVM_dq+0x2fc>)
 80078fa:	edd3 7a00 	vldr	s15, [r3]
 80078fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007902:	ee77 6a67 	vsub.f32	s13, s14, s15
 8007906:	4b5f      	ldr	r3, [pc, #380]	; (8007a84 <setSVM_dq+0x318>)
 8007908:	ed93 7a00 	vldr	s14, [r3]
 800790c:	4b60      	ldr	r3, [pc, #384]	; (8007a90 <setSVM_dq+0x324>)
 800790e:	edd3 7a00 	vldr	s15, [r3]
 8007912:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007916:	4b5c      	ldr	r3, [pc, #368]	; (8007a88 <setSVM_dq+0x31c>)
 8007918:	ed93 6a00 	vldr	s12, [r3]
 800791c:	4b5b      	ldr	r3, [pc, #364]	; (8007a8c <setSVM_dq+0x320>)
 800791e:	edd3 7a00 	vldr	s15, [r3]
 8007922:	ee66 7a27 	vmul.f32	s15, s12, s15
 8007926:	ee37 7a67 	vsub.f32	s14, s14, s15
 800792a:	4b5a      	ldr	r3, [pc, #360]	; (8007a94 <setSVM_dq+0x328>)
 800792c:	edd3 7a00 	vldr	s15, [r3]
 8007930:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007934:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007938:	4b57      	ldr	r3, [pc, #348]	; (8007a98 <setSVM_dq+0x32c>)
 800793a:	edc3 7a00 	vstr	s15, [r3]
	vect2 = (-y1 * x + x1 * y) / ((x1 * y2 - y1 * x2) * Vdc);
 800793e:	4b52      	ldr	r3, [pc, #328]	; (8007a88 <setSVM_dq+0x31c>)
 8007940:	edd3 7a00 	vldr	s15, [r3]
 8007944:	eeb1 7a67 	vneg.f32	s14, s15
 8007948:	4b46      	ldr	r3, [pc, #280]	; (8007a64 <setSVM_dq+0x2f8>)
 800794a:	edd3 7a00 	vldr	s15, [r3]
 800794e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007952:	4b4c      	ldr	r3, [pc, #304]	; (8007a84 <setSVM_dq+0x318>)
 8007954:	edd3 6a00 	vldr	s13, [r3]
 8007958:	4b43      	ldr	r3, [pc, #268]	; (8007a68 <setSVM_dq+0x2fc>)
 800795a:	edd3 7a00 	vldr	s15, [r3]
 800795e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007962:	ee77 6a27 	vadd.f32	s13, s14, s15
 8007966:	4b47      	ldr	r3, [pc, #284]	; (8007a84 <setSVM_dq+0x318>)
 8007968:	ed93 7a00 	vldr	s14, [r3]
 800796c:	4b48      	ldr	r3, [pc, #288]	; (8007a90 <setSVM_dq+0x324>)
 800796e:	edd3 7a00 	vldr	s15, [r3]
 8007972:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007976:	4b44      	ldr	r3, [pc, #272]	; (8007a88 <setSVM_dq+0x31c>)
 8007978:	ed93 6a00 	vldr	s12, [r3]
 800797c:	4b43      	ldr	r3, [pc, #268]	; (8007a8c <setSVM_dq+0x320>)
 800797e:	edd3 7a00 	vldr	s15, [r3]
 8007982:	ee66 7a27 	vmul.f32	s15, s12, s15
 8007986:	ee37 7a67 	vsub.f32	s14, s14, s15
 800798a:	4b42      	ldr	r3, [pc, #264]	; (8007a94 <setSVM_dq+0x328>)
 800798c:	edd3 7a00 	vldr	s15, [r3]
 8007990:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007994:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007998:	4b40      	ldr	r3, [pc, #256]	; (8007a9c <setSVM_dq+0x330>)
 800799a:	edc3 7a00 	vstr	s15, [r3]

	switch(sector_SVM)
 800799e:	4b37      	ldr	r3, [pc, #220]	; (8007a7c <setSVM_dq+0x310>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	2b05      	cmp	r3, #5
 80079a4:	f200 81e0 	bhi.w	8007d68 <setSVM_dq+0x5fc>
 80079a8:	a201      	add	r2, pc, #4	; (adr r2, 80079b0 <setSVM_dq+0x244>)
 80079aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ae:	bf00      	nop
 80079b0:	080079c9 	.word	0x080079c9
 80079b4:	08007aad 	.word	0x08007aad
 80079b8:	08007b39 	.word	0x08007b39
 80079bc:	08007bc5 	.word	0x08007bc5
 80079c0:	08007c51 	.word	0x08007c51
 80079c4:	08007cdd 	.word	0x08007cdd
	{
	case 0: duty[2] = (1.0 - vect1 - vect2) * 0.5f; 	duty[1] = duty[2] + vect2; 	duty[0] = duty[1] + vect1;  break;
 80079c8:	4b33      	ldr	r3, [pc, #204]	; (8007a98 <setSVM_dq+0x32c>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4618      	mov	r0, r3
 80079ce:	f7f8 fd7f 	bl	80004d0 <__aeabi_f2d>
 80079d2:	4603      	mov	r3, r0
 80079d4:	460c      	mov	r4, r1
 80079d6:	461a      	mov	r2, r3
 80079d8:	4623      	mov	r3, r4
 80079da:	f04f 0000 	mov.w	r0, #0
 80079de:	4930      	ldr	r1, [pc, #192]	; (8007aa0 <setSVM_dq+0x334>)
 80079e0:	f7f8 fc16 	bl	8000210 <__aeabi_dsub>
 80079e4:	4603      	mov	r3, r0
 80079e6:	460c      	mov	r4, r1
 80079e8:	4625      	mov	r5, r4
 80079ea:	461c      	mov	r4, r3
 80079ec:	4b2b      	ldr	r3, [pc, #172]	; (8007a9c <setSVM_dq+0x330>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4618      	mov	r0, r3
 80079f2:	f7f8 fd6d 	bl	80004d0 <__aeabi_f2d>
 80079f6:	4602      	mov	r2, r0
 80079f8:	460b      	mov	r3, r1
 80079fa:	4620      	mov	r0, r4
 80079fc:	4629      	mov	r1, r5
 80079fe:	f7f8 fc07 	bl	8000210 <__aeabi_dsub>
 8007a02:	4603      	mov	r3, r0
 8007a04:	460c      	mov	r4, r1
 8007a06:	4618      	mov	r0, r3
 8007a08:	4621      	mov	r1, r4
 8007a0a:	f04f 0200 	mov.w	r2, #0
 8007a0e:	4b25      	ldr	r3, [pc, #148]	; (8007aa4 <setSVM_dq+0x338>)
 8007a10:	f7f8 fdb6 	bl	8000580 <__aeabi_dmul>
 8007a14:	4603      	mov	r3, r0
 8007a16:	460c      	mov	r4, r1
 8007a18:	4618      	mov	r0, r3
 8007a1a:	4621      	mov	r1, r4
 8007a1c:	f7f9 f84a 	bl	8000ab4 <__aeabi_d2f>
 8007a20:	4602      	mov	r2, r0
 8007a22:	4b21      	ldr	r3, [pc, #132]	; (8007aa8 <setSVM_dq+0x33c>)
 8007a24:	609a      	str	r2, [r3, #8]
 8007a26:	4b20      	ldr	r3, [pc, #128]	; (8007aa8 <setSVM_dq+0x33c>)
 8007a28:	ed93 7a02 	vldr	s14, [r3, #8]
 8007a2c:	4b1b      	ldr	r3, [pc, #108]	; (8007a9c <setSVM_dq+0x330>)
 8007a2e:	edd3 7a00 	vldr	s15, [r3]
 8007a32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007a36:	4b1c      	ldr	r3, [pc, #112]	; (8007aa8 <setSVM_dq+0x33c>)
 8007a38:	edc3 7a01 	vstr	s15, [r3, #4]
 8007a3c:	4b1a      	ldr	r3, [pc, #104]	; (8007aa8 <setSVM_dq+0x33c>)
 8007a3e:	ed93 7a01 	vldr	s14, [r3, #4]
 8007a42:	4b15      	ldr	r3, [pc, #84]	; (8007a98 <setSVM_dq+0x32c>)
 8007a44:	edd3 7a00 	vldr	s15, [r3]
 8007a48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007a4c:	4b16      	ldr	r3, [pc, #88]	; (8007aa8 <setSVM_dq+0x33c>)
 8007a4e:	edc3 7a00 	vstr	s15, [r3]
 8007a52:	e189      	b.n	8007d68 <setSVM_dq+0x5fc>
 8007a54:	20000188 	.word	0x20000188
 8007a58:	20000034 	.word	0x20000034
 8007a5c:	2000018c 	.word	0x2000018c
 8007a60:	200001e0 	.word	0x200001e0
 8007a64:	20000194 	.word	0x20000194
 8007a68:	20000198 	.word	0x20000198
 8007a6c:	00000000 	.word	0x00000000
 8007a70:	2000019c 	.word	0x2000019c
 8007a74:	3f5db22d 	.word	0x3f5db22d
 8007a78:	200001a0 	.word	0x200001a0
 8007a7c:	20000190 	.word	0x20000190
 8007a80:	08009790 	.word	0x08009790
 8007a84:	200001a4 	.word	0x200001a4
 8007a88:	200001a8 	.word	0x200001a8
 8007a8c:	200001ac 	.word	0x200001ac
 8007a90:	200001b0 	.word	0x200001b0
 8007a94:	20000030 	.word	0x20000030
 8007a98:	200001b4 	.word	0x200001b4
 8007a9c:	200001b8 	.word	0x200001b8
 8007aa0:	3ff00000 	.word	0x3ff00000
 8007aa4:	3fe00000 	.word	0x3fe00000
 8007aa8:	200001bc 	.word	0x200001bc
	case 1: duty[2] = (1.0 - vect1 - vect2) * 0.5f; 	duty[0] = duty[2] + vect1; 	duty[1] = duty[0] + vect2; 	break;
 8007aac:	4bc3      	ldr	r3, [pc, #780]	; (8007dbc <setSVM_dq+0x650>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f7f8 fd0d 	bl	80004d0 <__aeabi_f2d>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	460c      	mov	r4, r1
 8007aba:	461a      	mov	r2, r3
 8007abc:	4623      	mov	r3, r4
 8007abe:	f04f 0000 	mov.w	r0, #0
 8007ac2:	49bf      	ldr	r1, [pc, #764]	; (8007dc0 <setSVM_dq+0x654>)
 8007ac4:	f7f8 fba4 	bl	8000210 <__aeabi_dsub>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	460c      	mov	r4, r1
 8007acc:	4625      	mov	r5, r4
 8007ace:	461c      	mov	r4, r3
 8007ad0:	4bbc      	ldr	r3, [pc, #752]	; (8007dc4 <setSVM_dq+0x658>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f7f8 fcfb 	bl	80004d0 <__aeabi_f2d>
 8007ada:	4602      	mov	r2, r0
 8007adc:	460b      	mov	r3, r1
 8007ade:	4620      	mov	r0, r4
 8007ae0:	4629      	mov	r1, r5
 8007ae2:	f7f8 fb95 	bl	8000210 <__aeabi_dsub>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	460c      	mov	r4, r1
 8007aea:	4618      	mov	r0, r3
 8007aec:	4621      	mov	r1, r4
 8007aee:	f04f 0200 	mov.w	r2, #0
 8007af2:	4bb5      	ldr	r3, [pc, #724]	; (8007dc8 <setSVM_dq+0x65c>)
 8007af4:	f7f8 fd44 	bl	8000580 <__aeabi_dmul>
 8007af8:	4603      	mov	r3, r0
 8007afa:	460c      	mov	r4, r1
 8007afc:	4618      	mov	r0, r3
 8007afe:	4621      	mov	r1, r4
 8007b00:	f7f8 ffd8 	bl	8000ab4 <__aeabi_d2f>
 8007b04:	4602      	mov	r2, r0
 8007b06:	4bb1      	ldr	r3, [pc, #708]	; (8007dcc <setSVM_dq+0x660>)
 8007b08:	609a      	str	r2, [r3, #8]
 8007b0a:	4bb0      	ldr	r3, [pc, #704]	; (8007dcc <setSVM_dq+0x660>)
 8007b0c:	ed93 7a02 	vldr	s14, [r3, #8]
 8007b10:	4baa      	ldr	r3, [pc, #680]	; (8007dbc <setSVM_dq+0x650>)
 8007b12:	edd3 7a00 	vldr	s15, [r3]
 8007b16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007b1a:	4bac      	ldr	r3, [pc, #688]	; (8007dcc <setSVM_dq+0x660>)
 8007b1c:	edc3 7a00 	vstr	s15, [r3]
 8007b20:	4baa      	ldr	r3, [pc, #680]	; (8007dcc <setSVM_dq+0x660>)
 8007b22:	ed93 7a00 	vldr	s14, [r3]
 8007b26:	4ba7      	ldr	r3, [pc, #668]	; (8007dc4 <setSVM_dq+0x658>)
 8007b28:	edd3 7a00 	vldr	s15, [r3]
 8007b2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007b30:	4ba6      	ldr	r3, [pc, #664]	; (8007dcc <setSVM_dq+0x660>)
 8007b32:	edc3 7a01 	vstr	s15, [r3, #4]
 8007b36:	e117      	b.n	8007d68 <setSVM_dq+0x5fc>
	case 2: duty[0] = (1.0 - vect1 - vect2) * 0.5f; 	duty[2] = duty[0] + vect2; 	duty[1] = duty[2] + vect1; 	break;
 8007b38:	4ba0      	ldr	r3, [pc, #640]	; (8007dbc <setSVM_dq+0x650>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f7f8 fcc7 	bl	80004d0 <__aeabi_f2d>
 8007b42:	4603      	mov	r3, r0
 8007b44:	460c      	mov	r4, r1
 8007b46:	461a      	mov	r2, r3
 8007b48:	4623      	mov	r3, r4
 8007b4a:	f04f 0000 	mov.w	r0, #0
 8007b4e:	499c      	ldr	r1, [pc, #624]	; (8007dc0 <setSVM_dq+0x654>)
 8007b50:	f7f8 fb5e 	bl	8000210 <__aeabi_dsub>
 8007b54:	4603      	mov	r3, r0
 8007b56:	460c      	mov	r4, r1
 8007b58:	4625      	mov	r5, r4
 8007b5a:	461c      	mov	r4, r3
 8007b5c:	4b99      	ldr	r3, [pc, #612]	; (8007dc4 <setSVM_dq+0x658>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4618      	mov	r0, r3
 8007b62:	f7f8 fcb5 	bl	80004d0 <__aeabi_f2d>
 8007b66:	4602      	mov	r2, r0
 8007b68:	460b      	mov	r3, r1
 8007b6a:	4620      	mov	r0, r4
 8007b6c:	4629      	mov	r1, r5
 8007b6e:	f7f8 fb4f 	bl	8000210 <__aeabi_dsub>
 8007b72:	4603      	mov	r3, r0
 8007b74:	460c      	mov	r4, r1
 8007b76:	4618      	mov	r0, r3
 8007b78:	4621      	mov	r1, r4
 8007b7a:	f04f 0200 	mov.w	r2, #0
 8007b7e:	4b92      	ldr	r3, [pc, #584]	; (8007dc8 <setSVM_dq+0x65c>)
 8007b80:	f7f8 fcfe 	bl	8000580 <__aeabi_dmul>
 8007b84:	4603      	mov	r3, r0
 8007b86:	460c      	mov	r4, r1
 8007b88:	4618      	mov	r0, r3
 8007b8a:	4621      	mov	r1, r4
 8007b8c:	f7f8 ff92 	bl	8000ab4 <__aeabi_d2f>
 8007b90:	4602      	mov	r2, r0
 8007b92:	4b8e      	ldr	r3, [pc, #568]	; (8007dcc <setSVM_dq+0x660>)
 8007b94:	601a      	str	r2, [r3, #0]
 8007b96:	4b8d      	ldr	r3, [pc, #564]	; (8007dcc <setSVM_dq+0x660>)
 8007b98:	ed93 7a00 	vldr	s14, [r3]
 8007b9c:	4b89      	ldr	r3, [pc, #548]	; (8007dc4 <setSVM_dq+0x658>)
 8007b9e:	edd3 7a00 	vldr	s15, [r3]
 8007ba2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007ba6:	4b89      	ldr	r3, [pc, #548]	; (8007dcc <setSVM_dq+0x660>)
 8007ba8:	edc3 7a02 	vstr	s15, [r3, #8]
 8007bac:	4b87      	ldr	r3, [pc, #540]	; (8007dcc <setSVM_dq+0x660>)
 8007bae:	ed93 7a02 	vldr	s14, [r3, #8]
 8007bb2:	4b82      	ldr	r3, [pc, #520]	; (8007dbc <setSVM_dq+0x650>)
 8007bb4:	edd3 7a00 	vldr	s15, [r3]
 8007bb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007bbc:	4b83      	ldr	r3, [pc, #524]	; (8007dcc <setSVM_dq+0x660>)
 8007bbe:	edc3 7a01 	vstr	s15, [r3, #4]
 8007bc2:	e0d1      	b.n	8007d68 <setSVM_dq+0x5fc>
	case 3: duty[0] = (1.0 - vect1 - vect2) * 0.5f; 	duty[1] = duty[0] + vect1; 	duty[2] = duty[1] + vect2; 	break;
 8007bc4:	4b7d      	ldr	r3, [pc, #500]	; (8007dbc <setSVM_dq+0x650>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4618      	mov	r0, r3
 8007bca:	f7f8 fc81 	bl	80004d0 <__aeabi_f2d>
 8007bce:	4603      	mov	r3, r0
 8007bd0:	460c      	mov	r4, r1
 8007bd2:	461a      	mov	r2, r3
 8007bd4:	4623      	mov	r3, r4
 8007bd6:	f04f 0000 	mov.w	r0, #0
 8007bda:	4979      	ldr	r1, [pc, #484]	; (8007dc0 <setSVM_dq+0x654>)
 8007bdc:	f7f8 fb18 	bl	8000210 <__aeabi_dsub>
 8007be0:	4603      	mov	r3, r0
 8007be2:	460c      	mov	r4, r1
 8007be4:	4625      	mov	r5, r4
 8007be6:	461c      	mov	r4, r3
 8007be8:	4b76      	ldr	r3, [pc, #472]	; (8007dc4 <setSVM_dq+0x658>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4618      	mov	r0, r3
 8007bee:	f7f8 fc6f 	bl	80004d0 <__aeabi_f2d>
 8007bf2:	4602      	mov	r2, r0
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	4620      	mov	r0, r4
 8007bf8:	4629      	mov	r1, r5
 8007bfa:	f7f8 fb09 	bl	8000210 <__aeabi_dsub>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	460c      	mov	r4, r1
 8007c02:	4618      	mov	r0, r3
 8007c04:	4621      	mov	r1, r4
 8007c06:	f04f 0200 	mov.w	r2, #0
 8007c0a:	4b6f      	ldr	r3, [pc, #444]	; (8007dc8 <setSVM_dq+0x65c>)
 8007c0c:	f7f8 fcb8 	bl	8000580 <__aeabi_dmul>
 8007c10:	4603      	mov	r3, r0
 8007c12:	460c      	mov	r4, r1
 8007c14:	4618      	mov	r0, r3
 8007c16:	4621      	mov	r1, r4
 8007c18:	f7f8 ff4c 	bl	8000ab4 <__aeabi_d2f>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	4b6b      	ldr	r3, [pc, #428]	; (8007dcc <setSVM_dq+0x660>)
 8007c20:	601a      	str	r2, [r3, #0]
 8007c22:	4b6a      	ldr	r3, [pc, #424]	; (8007dcc <setSVM_dq+0x660>)
 8007c24:	ed93 7a00 	vldr	s14, [r3]
 8007c28:	4b64      	ldr	r3, [pc, #400]	; (8007dbc <setSVM_dq+0x650>)
 8007c2a:	edd3 7a00 	vldr	s15, [r3]
 8007c2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007c32:	4b66      	ldr	r3, [pc, #408]	; (8007dcc <setSVM_dq+0x660>)
 8007c34:	edc3 7a01 	vstr	s15, [r3, #4]
 8007c38:	4b64      	ldr	r3, [pc, #400]	; (8007dcc <setSVM_dq+0x660>)
 8007c3a:	ed93 7a01 	vldr	s14, [r3, #4]
 8007c3e:	4b61      	ldr	r3, [pc, #388]	; (8007dc4 <setSVM_dq+0x658>)
 8007c40:	edd3 7a00 	vldr	s15, [r3]
 8007c44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007c48:	4b60      	ldr	r3, [pc, #384]	; (8007dcc <setSVM_dq+0x660>)
 8007c4a:	edc3 7a02 	vstr	s15, [r3, #8]
 8007c4e:	e08b      	b.n	8007d68 <setSVM_dq+0x5fc>
	case 4: duty[1] = (1.0 - vect1 - vect2) * 0.5f; 	duty[0] = duty[1] + vect2; 	duty[2] = duty[0] + vect1; 	break;
 8007c50:	4b5a      	ldr	r3, [pc, #360]	; (8007dbc <setSVM_dq+0x650>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4618      	mov	r0, r3
 8007c56:	f7f8 fc3b 	bl	80004d0 <__aeabi_f2d>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	460c      	mov	r4, r1
 8007c5e:	461a      	mov	r2, r3
 8007c60:	4623      	mov	r3, r4
 8007c62:	f04f 0000 	mov.w	r0, #0
 8007c66:	4956      	ldr	r1, [pc, #344]	; (8007dc0 <setSVM_dq+0x654>)
 8007c68:	f7f8 fad2 	bl	8000210 <__aeabi_dsub>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	460c      	mov	r4, r1
 8007c70:	4625      	mov	r5, r4
 8007c72:	461c      	mov	r4, r3
 8007c74:	4b53      	ldr	r3, [pc, #332]	; (8007dc4 <setSVM_dq+0x658>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f7f8 fc29 	bl	80004d0 <__aeabi_f2d>
 8007c7e:	4602      	mov	r2, r0
 8007c80:	460b      	mov	r3, r1
 8007c82:	4620      	mov	r0, r4
 8007c84:	4629      	mov	r1, r5
 8007c86:	f7f8 fac3 	bl	8000210 <__aeabi_dsub>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	460c      	mov	r4, r1
 8007c8e:	4618      	mov	r0, r3
 8007c90:	4621      	mov	r1, r4
 8007c92:	f04f 0200 	mov.w	r2, #0
 8007c96:	4b4c      	ldr	r3, [pc, #304]	; (8007dc8 <setSVM_dq+0x65c>)
 8007c98:	f7f8 fc72 	bl	8000580 <__aeabi_dmul>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	460c      	mov	r4, r1
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	4621      	mov	r1, r4
 8007ca4:	f7f8 ff06 	bl	8000ab4 <__aeabi_d2f>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	4b48      	ldr	r3, [pc, #288]	; (8007dcc <setSVM_dq+0x660>)
 8007cac:	605a      	str	r2, [r3, #4]
 8007cae:	4b47      	ldr	r3, [pc, #284]	; (8007dcc <setSVM_dq+0x660>)
 8007cb0:	ed93 7a01 	vldr	s14, [r3, #4]
 8007cb4:	4b43      	ldr	r3, [pc, #268]	; (8007dc4 <setSVM_dq+0x658>)
 8007cb6:	edd3 7a00 	vldr	s15, [r3]
 8007cba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007cbe:	4b43      	ldr	r3, [pc, #268]	; (8007dcc <setSVM_dq+0x660>)
 8007cc0:	edc3 7a00 	vstr	s15, [r3]
 8007cc4:	4b41      	ldr	r3, [pc, #260]	; (8007dcc <setSVM_dq+0x660>)
 8007cc6:	ed93 7a00 	vldr	s14, [r3]
 8007cca:	4b3c      	ldr	r3, [pc, #240]	; (8007dbc <setSVM_dq+0x650>)
 8007ccc:	edd3 7a00 	vldr	s15, [r3]
 8007cd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007cd4:	4b3d      	ldr	r3, [pc, #244]	; (8007dcc <setSVM_dq+0x660>)
 8007cd6:	edc3 7a02 	vstr	s15, [r3, #8]
 8007cda:	e045      	b.n	8007d68 <setSVM_dq+0x5fc>
	case 5: duty[1] = (1.0 - vect1 - vect2) * 0.5f; 	duty[2] = duty[1] + vect1; 	duty[0] = duty[2] + vect2; 	break;
 8007cdc:	4b37      	ldr	r3, [pc, #220]	; (8007dbc <setSVM_dq+0x650>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f7f8 fbf5 	bl	80004d0 <__aeabi_f2d>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	460c      	mov	r4, r1
 8007cea:	461a      	mov	r2, r3
 8007cec:	4623      	mov	r3, r4
 8007cee:	f04f 0000 	mov.w	r0, #0
 8007cf2:	4933      	ldr	r1, [pc, #204]	; (8007dc0 <setSVM_dq+0x654>)
 8007cf4:	f7f8 fa8c 	bl	8000210 <__aeabi_dsub>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	460c      	mov	r4, r1
 8007cfc:	4625      	mov	r5, r4
 8007cfe:	461c      	mov	r4, r3
 8007d00:	4b30      	ldr	r3, [pc, #192]	; (8007dc4 <setSVM_dq+0x658>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4618      	mov	r0, r3
 8007d06:	f7f8 fbe3 	bl	80004d0 <__aeabi_f2d>
 8007d0a:	4602      	mov	r2, r0
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	4620      	mov	r0, r4
 8007d10:	4629      	mov	r1, r5
 8007d12:	f7f8 fa7d 	bl	8000210 <__aeabi_dsub>
 8007d16:	4603      	mov	r3, r0
 8007d18:	460c      	mov	r4, r1
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	4621      	mov	r1, r4
 8007d1e:	f04f 0200 	mov.w	r2, #0
 8007d22:	4b29      	ldr	r3, [pc, #164]	; (8007dc8 <setSVM_dq+0x65c>)
 8007d24:	f7f8 fc2c 	bl	8000580 <__aeabi_dmul>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	460c      	mov	r4, r1
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	4621      	mov	r1, r4
 8007d30:	f7f8 fec0 	bl	8000ab4 <__aeabi_d2f>
 8007d34:	4602      	mov	r2, r0
 8007d36:	4b25      	ldr	r3, [pc, #148]	; (8007dcc <setSVM_dq+0x660>)
 8007d38:	605a      	str	r2, [r3, #4]
 8007d3a:	4b24      	ldr	r3, [pc, #144]	; (8007dcc <setSVM_dq+0x660>)
 8007d3c:	ed93 7a01 	vldr	s14, [r3, #4]
 8007d40:	4b1e      	ldr	r3, [pc, #120]	; (8007dbc <setSVM_dq+0x650>)
 8007d42:	edd3 7a00 	vldr	s15, [r3]
 8007d46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d4a:	4b20      	ldr	r3, [pc, #128]	; (8007dcc <setSVM_dq+0x660>)
 8007d4c:	edc3 7a02 	vstr	s15, [r3, #8]
 8007d50:	4b1e      	ldr	r3, [pc, #120]	; (8007dcc <setSVM_dq+0x660>)
 8007d52:	ed93 7a02 	vldr	s14, [r3, #8]
 8007d56:	4b1b      	ldr	r3, [pc, #108]	; (8007dc4 <setSVM_dq+0x658>)
 8007d58:	edd3 7a00 	vldr	s15, [r3]
 8007d5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007d60:	4b1a      	ldr	r3, [pc, #104]	; (8007dcc <setSVM_dq+0x660>)
 8007d62:	edc3 7a00 	vstr	s15, [r3]
 8007d66:	bf00      	nop
	}


	if(duty[0] < -1.0f) duty[0] = -1.0f; else if (duty[0] > 1.0f) duty[0] = 1.0f;
 8007d68:	4b18      	ldr	r3, [pc, #96]	; (8007dcc <setSVM_dq+0x660>)
 8007d6a:	edd3 7a00 	vldr	s15, [r3]
 8007d6e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007d72:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d7a:	d503      	bpl.n	8007d84 <setSVM_dq+0x618>
 8007d7c:	4b13      	ldr	r3, [pc, #76]	; (8007dcc <setSVM_dq+0x660>)
 8007d7e:	4a14      	ldr	r2, [pc, #80]	; (8007dd0 <setSVM_dq+0x664>)
 8007d80:	601a      	str	r2, [r3, #0]
 8007d82:	e00d      	b.n	8007da0 <setSVM_dq+0x634>
 8007d84:	4b11      	ldr	r3, [pc, #68]	; (8007dcc <setSVM_dq+0x660>)
 8007d86:	edd3 7a00 	vldr	s15, [r3]
 8007d8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d96:	dd03      	ble.n	8007da0 <setSVM_dq+0x634>
 8007d98:	4b0c      	ldr	r3, [pc, #48]	; (8007dcc <setSVM_dq+0x660>)
 8007d9a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007d9e:	601a      	str	r2, [r3, #0]
	if(duty[1] < -1.0f) duty[1] = -1.0f; else if (duty[1] > 1.0f) duty[1] = 1.0f;
 8007da0:	4b0a      	ldr	r3, [pc, #40]	; (8007dcc <setSVM_dq+0x660>)
 8007da2:	edd3 7a01 	vldr	s15, [r3, #4]
 8007da6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007daa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007db2:	d50f      	bpl.n	8007dd4 <setSVM_dq+0x668>
 8007db4:	4b05      	ldr	r3, [pc, #20]	; (8007dcc <setSVM_dq+0x660>)
 8007db6:	4a06      	ldr	r2, [pc, #24]	; (8007dd0 <setSVM_dq+0x664>)
 8007db8:	605a      	str	r2, [r3, #4]
 8007dba:	e019      	b.n	8007df0 <setSVM_dq+0x684>
 8007dbc:	200001b4 	.word	0x200001b4
 8007dc0:	3ff00000 	.word	0x3ff00000
 8007dc4:	200001b8 	.word	0x200001b8
 8007dc8:	3fe00000 	.word	0x3fe00000
 8007dcc:	200001bc 	.word	0x200001bc
 8007dd0:	bf800000 	.word	0xbf800000
 8007dd4:	4b35      	ldr	r3, [pc, #212]	; (8007eac <setSVM_dq+0x740>)
 8007dd6:	edd3 7a01 	vldr	s15, [r3, #4]
 8007dda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007dde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007de6:	dd03      	ble.n	8007df0 <setSVM_dq+0x684>
 8007de8:	4b30      	ldr	r3, [pc, #192]	; (8007eac <setSVM_dq+0x740>)
 8007dea:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007dee:	605a      	str	r2, [r3, #4]
	if(duty[2] < -1.0f) duty[2] = -1.0f; else if (duty[2] > 1.0f) duty[2] = 1.0f;
 8007df0:	4b2e      	ldr	r3, [pc, #184]	; (8007eac <setSVM_dq+0x740>)
 8007df2:	edd3 7a02 	vldr	s15, [r3, #8]
 8007df6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007dfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e02:	d503      	bpl.n	8007e0c <setSVM_dq+0x6a0>
 8007e04:	4b29      	ldr	r3, [pc, #164]	; (8007eac <setSVM_dq+0x740>)
 8007e06:	4a2a      	ldr	r2, [pc, #168]	; (8007eb0 <setSVM_dq+0x744>)
 8007e08:	609a      	str	r2, [r3, #8]
 8007e0a:	e00d      	b.n	8007e28 <setSVM_dq+0x6bc>
 8007e0c:	4b27      	ldr	r3, [pc, #156]	; (8007eac <setSVM_dq+0x740>)
 8007e0e:	edd3 7a02 	vldr	s15, [r3, #8]
 8007e12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e1e:	dd03      	ble.n	8007e28 <setSVM_dq+0x6bc>
 8007e20:	4b22      	ldr	r3, [pc, #136]	; (8007eac <setSVM_dq+0x740>)
 8007e22:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007e26:	609a      	str	r2, [r3, #8]

	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, PWM_RESOL * (1.0f - (amp_u = duty[0])));
 8007e28:	4b20      	ldr	r3, [pc, #128]	; (8007eac <setSVM_dq+0x740>)
 8007e2a:	edd3 7a00 	vldr	s15, [r3]
 8007e2e:	4b21      	ldr	r3, [pc, #132]	; (8007eb4 <setSVM_dq+0x748>)
 8007e30:	edc3 7a00 	vstr	s15, [r3]
 8007e34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e3c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8007eb8 <setSVM_dq+0x74c>
 8007e40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007e44:	4b1d      	ldr	r3, [pc, #116]	; (8007ebc <setSVM_dq+0x750>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e4c:	ee17 2a90 	vmov	r2, s15
 8007e50:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, PWM_RESOL * (1.0f - (amp_v = duty[1])));
 8007e52:	4b16      	ldr	r3, [pc, #88]	; (8007eac <setSVM_dq+0x740>)
 8007e54:	edd3 7a01 	vldr	s15, [r3, #4]
 8007e58:	4b19      	ldr	r3, [pc, #100]	; (8007ec0 <setSVM_dq+0x754>)
 8007e5a:	edc3 7a00 	vstr	s15, [r3]
 8007e5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e66:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8007eb8 <setSVM_dq+0x74c>
 8007e6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007e6e:	4b13      	ldr	r3, [pc, #76]	; (8007ebc <setSVM_dq+0x750>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007e76:	ee17 2a90 	vmov	r2, s15
 8007e7a:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, PWM_RESOL * (1.0f - (amp_w = duty[2])));
 8007e7c:	4b0b      	ldr	r3, [pc, #44]	; (8007eac <setSVM_dq+0x740>)
 8007e7e:	edd3 7a02 	vldr	s15, [r3, #8]
 8007e82:	4b10      	ldr	r3, [pc, #64]	; (8007ec4 <setSVM_dq+0x758>)
 8007e84:	edc3 7a00 	vstr	s15, [r3]
 8007e88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007e8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007e90:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8007eb8 <setSVM_dq+0x74c>
 8007e94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007e98:	4b08      	ldr	r3, [pc, #32]	; (8007ebc <setSVM_dq+0x750>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ea0:	ee17 2a90 	vmov	r2, s15
 8007ea4:	63da      	str	r2, [r3, #60]	; 0x3c


	return;
 8007ea6:	bf00      	nop
}
 8007ea8:	bdb0      	pop	{r4, r5, r7, pc}
 8007eaa:	bf00      	nop
 8007eac:	200001bc 	.word	0x200001bc
 8007eb0:	bf800000 	.word	0xbf800000
 8007eb4:	200001ec 	.word	0x200001ec
 8007eb8:	45fa0000 	.word	0x45fa0000
 8007ebc:	20000538 	.word	0x20000538
 8007ec0:	200001f0 	.word	0x200001f0
 8007ec4:	200001f4 	.word	0x200001f4

08007ec8 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8007ecc:	4b18      	ldr	r3, [pc, #96]	; (8007f30 <MX_SPI2_Init+0x68>)
 8007ece:	4a19      	ldr	r2, [pc, #100]	; (8007f34 <MX_SPI2_Init+0x6c>)
 8007ed0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8007ed2:	4b17      	ldr	r3, [pc, #92]	; (8007f30 <MX_SPI2_Init+0x68>)
 8007ed4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007ed8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8007eda:	4b15      	ldr	r3, [pc, #84]	; (8007f30 <MX_SPI2_Init+0x68>)
 8007edc:	2200      	movs	r2, #0
 8007ede:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8007ee0:	4b13      	ldr	r3, [pc, #76]	; (8007f30 <MX_SPI2_Init+0x68>)
 8007ee2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ee6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007ee8:	4b11      	ldr	r3, [pc, #68]	; (8007f30 <MX_SPI2_Init+0x68>)
 8007eea:	2200      	movs	r2, #0
 8007eec:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8007eee:	4b10      	ldr	r3, [pc, #64]	; (8007f30 <MX_SPI2_Init+0x68>)
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8007ef4:	4b0e      	ldr	r3, [pc, #56]	; (8007f30 <MX_SPI2_Init+0x68>)
 8007ef6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007efa:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8007efc:	4b0c      	ldr	r3, [pc, #48]	; (8007f30 <MX_SPI2_Init+0x68>)
 8007efe:	2218      	movs	r2, #24
 8007f00:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007f02:	4b0b      	ldr	r3, [pc, #44]	; (8007f30 <MX_SPI2_Init+0x68>)
 8007f04:	2200      	movs	r2, #0
 8007f06:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8007f08:	4b09      	ldr	r3, [pc, #36]	; (8007f30 <MX_SPI2_Init+0x68>)
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f0e:	4b08      	ldr	r3, [pc, #32]	; (8007f30 <MX_SPI2_Init+0x68>)
 8007f10:	2200      	movs	r2, #0
 8007f12:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8007f14:	4b06      	ldr	r3, [pc, #24]	; (8007f30 <MX_SPI2_Init+0x68>)
 8007f16:	220a      	movs	r2, #10
 8007f18:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8007f1a:	4805      	ldr	r0, [pc, #20]	; (8007f30 <MX_SPI2_Init+0x68>)
 8007f1c:	f7fb fd2e 	bl	800397c <HAL_SPI_Init>
 8007f20:	4603      	mov	r3, r0
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d001      	beq.n	8007f2a <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8007f26:	f7ff fc19 	bl	800775c <Error_Handler>
  }

}
 8007f2a:	bf00      	nop
 8007f2c:	bd80      	pop	{r7, pc}
 8007f2e:	bf00      	nop
 8007f30:	20000488 	.word	0x20000488
 8007f34:	40003800 	.word	0x40003800

08007f38 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8007f3c:	4b17      	ldr	r3, [pc, #92]	; (8007f9c <MX_SPI3_Init+0x64>)
 8007f3e:	4a18      	ldr	r2, [pc, #96]	; (8007fa0 <MX_SPI3_Init+0x68>)
 8007f40:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8007f42:	4b16      	ldr	r3, [pc, #88]	; (8007f9c <MX_SPI3_Init+0x64>)
 8007f44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007f48:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8007f4a:	4b14      	ldr	r3, [pc, #80]	; (8007f9c <MX_SPI3_Init+0x64>)
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8007f50:	4b12      	ldr	r3, [pc, #72]	; (8007f9c <MX_SPI3_Init+0x64>)
 8007f52:	2200      	movs	r2, #0
 8007f54:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007f56:	4b11      	ldr	r3, [pc, #68]	; (8007f9c <MX_SPI3_Init+0x64>)
 8007f58:	2200      	movs	r2, #0
 8007f5a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007f5c:	4b0f      	ldr	r3, [pc, #60]	; (8007f9c <MX_SPI3_Init+0x64>)
 8007f5e:	2200      	movs	r2, #0
 8007f60:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8007f62:	4b0e      	ldr	r3, [pc, #56]	; (8007f9c <MX_SPI3_Init+0x64>)
 8007f64:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007f68:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007f6a:	4b0c      	ldr	r3, [pc, #48]	; (8007f9c <MX_SPI3_Init+0x64>)
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007f70:	4b0a      	ldr	r3, [pc, #40]	; (8007f9c <MX_SPI3_Init+0x64>)
 8007f72:	2200      	movs	r2, #0
 8007f74:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8007f76:	4b09      	ldr	r3, [pc, #36]	; (8007f9c <MX_SPI3_Init+0x64>)
 8007f78:	2200      	movs	r2, #0
 8007f7a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f7c:	4b07      	ldr	r3, [pc, #28]	; (8007f9c <MX_SPI3_Init+0x64>)
 8007f7e:	2200      	movs	r2, #0
 8007f80:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8007f82:	4b06      	ldr	r3, [pc, #24]	; (8007f9c <MX_SPI3_Init+0x64>)
 8007f84:	220a      	movs	r2, #10
 8007f86:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8007f88:	4804      	ldr	r0, [pc, #16]	; (8007f9c <MX_SPI3_Init+0x64>)
 8007f8a:	f7fb fcf7 	bl	800397c <HAL_SPI_Init>
 8007f8e:	4603      	mov	r3, r0
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d001      	beq.n	8007f98 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8007f94:	f7ff fbe2 	bl	800775c <Error_Handler>
  }

}
 8007f98:	bf00      	nop
 8007f9a:	bd80      	pop	{r7, pc}
 8007f9c:	200004e0 	.word	0x200004e0
 8007fa0:	40003c00 	.word	0x40003c00

08007fa4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b08e      	sub	sp, #56	; 0x38
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007fac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	601a      	str	r2, [r3, #0]
 8007fb4:	605a      	str	r2, [r3, #4]
 8007fb6:	609a      	str	r2, [r3, #8]
 8007fb8:	60da      	str	r2, [r3, #12]
 8007fba:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a6c      	ldr	r2, [pc, #432]	; (8008174 <HAL_SPI_MspInit+0x1d0>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d163      	bne.n	800808e <HAL_SPI_MspInit+0xea>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	623b      	str	r3, [r7, #32]
 8007fca:	4b6b      	ldr	r3, [pc, #428]	; (8008178 <HAL_SPI_MspInit+0x1d4>)
 8007fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fce:	4a6a      	ldr	r2, [pc, #424]	; (8008178 <HAL_SPI_MspInit+0x1d4>)
 8007fd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8007fd6:	4b68      	ldr	r3, [pc, #416]	; (8008178 <HAL_SPI_MspInit+0x1d4>)
 8007fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fde:	623b      	str	r3, [r7, #32]
 8007fe0:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	61fb      	str	r3, [r7, #28]
 8007fe6:	4b64      	ldr	r3, [pc, #400]	; (8008178 <HAL_SPI_MspInit+0x1d4>)
 8007fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fea:	4a63      	ldr	r2, [pc, #396]	; (8008178 <HAL_SPI_MspInit+0x1d4>)
 8007fec:	f043 0304 	orr.w	r3, r3, #4
 8007ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8007ff2:	4b61      	ldr	r3, [pc, #388]	; (8008178 <HAL_SPI_MspInit+0x1d4>)
 8007ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ff6:	f003 0304 	and.w	r3, r3, #4
 8007ffa:	61fb      	str	r3, [r7, #28]
 8007ffc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ffe:	2300      	movs	r3, #0
 8008000:	61bb      	str	r3, [r7, #24]
 8008002:	4b5d      	ldr	r3, [pc, #372]	; (8008178 <HAL_SPI_MspInit+0x1d4>)
 8008004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008006:	4a5c      	ldr	r2, [pc, #368]	; (8008178 <HAL_SPI_MspInit+0x1d4>)
 8008008:	f043 0302 	orr.w	r3, r3, #2
 800800c:	6313      	str	r3, [r2, #48]	; 0x30
 800800e:	4b5a      	ldr	r3, [pc, #360]	; (8008178 <HAL_SPI_MspInit+0x1d4>)
 8008010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008012:	f003 0302 	and.w	r3, r3, #2
 8008016:	61bb      	str	r3, [r7, #24]
 8008018:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration    
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800801a:	2302      	movs	r3, #2
 800801c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800801e:	2302      	movs	r3, #2
 8008020:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008022:	2300      	movs	r3, #0
 8008024:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008026:	2303      	movs	r3, #3
 8008028:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800802a:	2307      	movs	r3, #7
 800802c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800802e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008032:	4619      	mov	r1, r3
 8008034:	4851      	ldr	r0, [pc, #324]	; (800817c <HAL_SPI_MspInit+0x1d8>)
 8008036:	f7fa fdb3 	bl	8002ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800803a:	2304      	movs	r3, #4
 800803c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800803e:	2302      	movs	r3, #2
 8008040:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008042:	2300      	movs	r3, #0
 8008044:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008046:	2303      	movs	r3, #3
 8008048:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800804a:	2305      	movs	r3, #5
 800804c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800804e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008052:	4619      	mov	r1, r3
 8008054:	4849      	ldr	r0, [pc, #292]	; (800817c <HAL_SPI_MspInit+0x1d8>)
 8008056:	f7fa fda3 	bl	8002ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800805a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800805e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008060:	2302      	movs	r3, #2
 8008062:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008064:	2300      	movs	r3, #0
 8008066:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008068:	2303      	movs	r3, #3
 800806a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800806c:	2305      	movs	r3, #5
 800806e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008070:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008074:	4619      	mov	r1, r3
 8008076:	4842      	ldr	r0, [pc, #264]	; (8008180 <HAL_SPI_MspInit+0x1dc>)
 8008078:	f7fa fd92 	bl	8002ba0 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800807c:	2200      	movs	r2, #0
 800807e:	2100      	movs	r1, #0
 8008080:	2024      	movs	r0, #36	; 0x24
 8008082:	f7fa f9be 	bl	8002402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8008086:	2024      	movs	r0, #36	; 0x24
 8008088:	f7fa f9d7 	bl	800243a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800808c:	e06e      	b.n	800816c <HAL_SPI_MspInit+0x1c8>
  else if(spiHandle->Instance==SPI3)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a3c      	ldr	r2, [pc, #240]	; (8008184 <HAL_SPI_MspInit+0x1e0>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d169      	bne.n	800816c <HAL_SPI_MspInit+0x1c8>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8008098:	2300      	movs	r3, #0
 800809a:	617b      	str	r3, [r7, #20]
 800809c:	4b36      	ldr	r3, [pc, #216]	; (8008178 <HAL_SPI_MspInit+0x1d4>)
 800809e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080a0:	4a35      	ldr	r2, [pc, #212]	; (8008178 <HAL_SPI_MspInit+0x1d4>)
 80080a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080a6:	6413      	str	r3, [r2, #64]	; 0x40
 80080a8:	4b33      	ldr	r3, [pc, #204]	; (8008178 <HAL_SPI_MspInit+0x1d4>)
 80080aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80080b0:	617b      	str	r3, [r7, #20]
 80080b2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80080b4:	2300      	movs	r3, #0
 80080b6:	613b      	str	r3, [r7, #16]
 80080b8:	4b2f      	ldr	r3, [pc, #188]	; (8008178 <HAL_SPI_MspInit+0x1d4>)
 80080ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080bc:	4a2e      	ldr	r2, [pc, #184]	; (8008178 <HAL_SPI_MspInit+0x1d4>)
 80080be:	f043 0302 	orr.w	r3, r3, #2
 80080c2:	6313      	str	r3, [r2, #48]	; 0x30
 80080c4:	4b2c      	ldr	r3, [pc, #176]	; (8008178 <HAL_SPI_MspInit+0x1d4>)
 80080c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080c8:	f003 0302 	and.w	r3, r3, #2
 80080cc:	613b      	str	r3, [r7, #16]
 80080ce:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80080d0:	2300      	movs	r3, #0
 80080d2:	60fb      	str	r3, [r7, #12]
 80080d4:	4b28      	ldr	r3, [pc, #160]	; (8008178 <HAL_SPI_MspInit+0x1d4>)
 80080d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080d8:	4a27      	ldr	r2, [pc, #156]	; (8008178 <HAL_SPI_MspInit+0x1d4>)
 80080da:	f043 0301 	orr.w	r3, r3, #1
 80080de:	6313      	str	r3, [r2, #48]	; 0x30
 80080e0:	4b25      	ldr	r3, [pc, #148]	; (8008178 <HAL_SPI_MspInit+0x1d4>)
 80080e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080e4:	f003 0301 	and.w	r3, r3, #1
 80080e8:	60fb      	str	r3, [r7, #12]
 80080ea:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80080ec:	2300      	movs	r3, #0
 80080ee:	60bb      	str	r3, [r7, #8]
 80080f0:	4b21      	ldr	r3, [pc, #132]	; (8008178 <HAL_SPI_MspInit+0x1d4>)
 80080f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080f4:	4a20      	ldr	r2, [pc, #128]	; (8008178 <HAL_SPI_MspInit+0x1d4>)
 80080f6:	f043 0304 	orr.w	r3, r3, #4
 80080fa:	6313      	str	r3, [r2, #48]	; 0x30
 80080fc:	4b1e      	ldr	r3, [pc, #120]	; (8008178 <HAL_SPI_MspInit+0x1d4>)
 80080fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008100:	f003 0304 	and.w	r3, r3, #4
 8008104:	60bb      	str	r3, [r7, #8]
 8008106:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8008108:	2304      	movs	r3, #4
 800810a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800810c:	2302      	movs	r3, #2
 800810e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008110:	2300      	movs	r3, #0
 8008112:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008114:	2303      	movs	r3, #3
 8008116:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8008118:	2307      	movs	r3, #7
 800811a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800811c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008120:	4619      	mov	r1, r3
 8008122:	4817      	ldr	r0, [pc, #92]	; (8008180 <HAL_SPI_MspInit+0x1dc>)
 8008124:	f7fa fd3c 	bl	8002ba0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8008128:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800812c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800812e:	2302      	movs	r3, #2
 8008130:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008132:	2300      	movs	r3, #0
 8008134:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008136:	2303      	movs	r3, #3
 8008138:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800813a:	2306      	movs	r3, #6
 800813c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800813e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008142:	4619      	mov	r1, r3
 8008144:	4810      	ldr	r0, [pc, #64]	; (8008188 <HAL_SPI_MspInit+0x1e4>)
 8008146:	f7fa fd2b 	bl	8002ba0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800814a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800814e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008150:	2302      	movs	r3, #2
 8008152:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008154:	2300      	movs	r3, #0
 8008156:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008158:	2303      	movs	r3, #3
 800815a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800815c:	2306      	movs	r3, #6
 800815e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008160:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008164:	4619      	mov	r1, r3
 8008166:	4805      	ldr	r0, [pc, #20]	; (800817c <HAL_SPI_MspInit+0x1d8>)
 8008168:	f7fa fd1a 	bl	8002ba0 <HAL_GPIO_Init>
}
 800816c:	bf00      	nop
 800816e:	3738      	adds	r7, #56	; 0x38
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}
 8008174:	40003800 	.word	0x40003800
 8008178:	40023800 	.word	0x40023800
 800817c:	40020800 	.word	0x40020800
 8008180:	40020400 	.word	0x40020400
 8008184:	40003c00 	.word	0x40003c00
 8008188:	40020000 	.word	0x40020000

0800818c <SPI_Init>:
} 

/* USER CODE BEGIN 1 */

void SPI_Init()
{
 800818c:	b480      	push	{r7}
 800818e:	af00      	add	r7, sp, #0


	  // SPI Interrupt Setting
	  __HAL_SPI_ENABLE_IT(&hspi2, SPI_IT_TXE | SPI_IT_RXNE);
 8008190:	4b06      	ldr	r3, [pc, #24]	; (80081ac <SPI_Init+0x20>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	685a      	ldr	r2, [r3, #4]
 8008196:	4b05      	ldr	r3, [pc, #20]	; (80081ac <SPI_Init+0x20>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800819e:	605a      	str	r2, [r3, #4]

}
 80081a0:	bf00      	nop
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr
 80081aa:	bf00      	nop
 80081ac:	20000488 	.word	0x20000488

080081b0 <requestEncoder>:




inline void requestEncoder()
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	af00      	add	r7, sp, #0


	// Reading Encoder for next sampling
	spi2txBuf[0] = 0xff;
 80081b4:	4b09      	ldr	r3, [pc, #36]	; (80081dc <requestEncoder+0x2c>)
 80081b6:	22ff      	movs	r2, #255	; 0xff
 80081b8:	701a      	strb	r2, [r3, #0]
	spi2txBuf[1] = 0xff;
 80081ba:	4b08      	ldr	r3, [pc, #32]	; (80081dc <requestEncoder+0x2c>)
 80081bc:	22ff      	movs	r2, #255	; 0xff
 80081be:	705a      	strb	r2, [r3, #1]
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 80081c0:	2200      	movs	r2, #0
 80081c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80081c6:	4806      	ldr	r0, [pc, #24]	; (80081e0 <requestEncoder+0x30>)
 80081c8:	f7fa fe94 	bl	8002ef4 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_IT(&hspi2, spi2txBuf, spi2rxBuf, 1);
 80081cc:	2301      	movs	r3, #1
 80081ce:	4a05      	ldr	r2, [pc, #20]	; (80081e4 <requestEncoder+0x34>)
 80081d0:	4902      	ldr	r1, [pc, #8]	; (80081dc <requestEncoder+0x2c>)
 80081d2:	4805      	ldr	r0, [pc, #20]	; (80081e8 <requestEncoder+0x38>)
 80081d4:	f7fb fc36 	bl	8003a44 <HAL_SPI_TransmitReceive_IT>


}
 80081d8:	bf00      	nop
 80081da:	bd80      	pop	{r7, pc}
 80081dc:	200001c8 	.word	0x200001c8
 80081e0:	40020400 	.word	0x40020400
 80081e4:	200001cc 	.word	0x200001cc
 80081e8:	20000488 	.word	0x20000488
 80081ec:	00000000 	.word	0x00000000

080081f0 <refreshEncoder>:


inline int refreshEncoder()
{
 80081f0:	b5b0      	push	{r4, r5, r7, lr}
 80081f2:	b084      	sub	sp, #16
 80081f4:	af00      	add	r7, sp, #0

	uint16_t angle_raw = 0;
 80081f6:	2300      	movs	r3, #0
 80081f8:	81fb      	strh	r3, [r7, #14]
	float _theta;
	float _theta_re;

	// Reading RX Data from SPI Encoder
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 80081fa:	2201      	movs	r2, #1
 80081fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008200:	4891      	ldr	r0, [pc, #580]	; (8008448 <refreshEncoder+0x258>)
 8008202:	f7fa fe77 	bl	8002ef4 <HAL_GPIO_WritePin>
	angle_raw = (spi2rxBuf[1] & 0x3f) << 8 | spi2rxBuf[0];
 8008206:	4b91      	ldr	r3, [pc, #580]	; (800844c <refreshEncoder+0x25c>)
 8008208:	785b      	ldrb	r3, [r3, #1]
 800820a:	b2db      	uxtb	r3, r3
 800820c:	021b      	lsls	r3, r3, #8
 800820e:	b21b      	sxth	r3, r3
 8008210:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8008214:	b21a      	sxth	r2, r3
 8008216:	4b8d      	ldr	r3, [pc, #564]	; (800844c <refreshEncoder+0x25c>)
 8008218:	781b      	ldrb	r3, [r3, #0]
 800821a:	b2db      	uxtb	r3, r3
 800821c:	b21b      	sxth	r3, r3
 800821e:	4313      	orrs	r3, r2
 8008220:	b21b      	sxth	r3, r3
 8008222:	81fb      	strh	r3, [r7, #14]

	_theta = (float)angle_raw / (float)ENCODER_RESOL * 2.0f * M_PI + theta_offset;
 8008224:	89fb      	ldrh	r3, [r7, #14]
 8008226:	ee07 3a90 	vmov	s15, r3
 800822a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800822e:	eddf 6a88 	vldr	s13, [pc, #544]	; 8008450 <refreshEncoder+0x260>
 8008232:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008236:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800823a:	ee17 0a90 	vmov	r0, s15
 800823e:	f7f8 f947 	bl	80004d0 <__aeabi_f2d>
 8008242:	a37d      	add	r3, pc, #500	; (adr r3, 8008438 <refreshEncoder+0x248>)
 8008244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008248:	f7f8 f99a 	bl	8000580 <__aeabi_dmul>
 800824c:	4603      	mov	r3, r0
 800824e:	460c      	mov	r4, r1
 8008250:	4625      	mov	r5, r4
 8008252:	461c      	mov	r4, r3
 8008254:	4b7f      	ldr	r3, [pc, #508]	; (8008454 <refreshEncoder+0x264>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4618      	mov	r0, r3
 800825a:	f7f8 f939 	bl	80004d0 <__aeabi_f2d>
 800825e:	4602      	mov	r2, r0
 8008260:	460b      	mov	r3, r1
 8008262:	4620      	mov	r0, r4
 8008264:	4629      	mov	r1, r5
 8008266:	f7f7 ffd5 	bl	8000214 <__adddf3>
 800826a:	4603      	mov	r3, r0
 800826c:	460c      	mov	r4, r1
 800826e:	4618      	mov	r0, r3
 8008270:	4621      	mov	r1, r4
 8008272:	f7f8 fc1f 	bl	8000ab4 <__aeabi_d2f>
 8008276:	4603      	mov	r3, r0
 8008278:	60bb      	str	r3, [r7, #8]

	if(_theta < 0.0f)			theta = _theta + 2 * M_PI;
 800827a:	edd7 7a02 	vldr	s15, [r7, #8]
 800827e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008286:	d511      	bpl.n	80082ac <refreshEncoder+0xbc>
 8008288:	68b8      	ldr	r0, [r7, #8]
 800828a:	f7f8 f921 	bl	80004d0 <__aeabi_f2d>
 800828e:	a36c      	add	r3, pc, #432	; (adr r3, 8008440 <refreshEncoder+0x250>)
 8008290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008294:	f7f7 ffbe 	bl	8000214 <__adddf3>
 8008298:	4603      	mov	r3, r0
 800829a:	460c      	mov	r4, r1
 800829c:	4618      	mov	r0, r3
 800829e:	4621      	mov	r1, r4
 80082a0:	f7f8 fc08 	bl	8000ab4 <__aeabi_d2f>
 80082a4:	4602      	mov	r2, r0
 80082a6:	4b6c      	ldr	r3, [pc, #432]	; (8008458 <refreshEncoder+0x268>)
 80082a8:	601a      	str	r2, [r3, #0]
 80082aa:	e01f      	b.n	80082ec <refreshEncoder+0xfc>
	else if(_theta >= 2 * M_PI)	theta = _theta - 2 * M_PI;
 80082ac:	68b8      	ldr	r0, [r7, #8]
 80082ae:	f7f8 f90f 	bl	80004d0 <__aeabi_f2d>
 80082b2:	a363      	add	r3, pc, #396	; (adr r3, 8008440 <refreshEncoder+0x250>)
 80082b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082b8:	f7f8 fbe8 	bl	8000a8c <__aeabi_dcmpge>
 80082bc:	4603      	mov	r3, r0
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d011      	beq.n	80082e6 <refreshEncoder+0xf6>
 80082c2:	68b8      	ldr	r0, [r7, #8]
 80082c4:	f7f8 f904 	bl	80004d0 <__aeabi_f2d>
 80082c8:	a35d      	add	r3, pc, #372	; (adr r3, 8008440 <refreshEncoder+0x250>)
 80082ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ce:	f7f7 ff9f 	bl	8000210 <__aeabi_dsub>
 80082d2:	4603      	mov	r3, r0
 80082d4:	460c      	mov	r4, r1
 80082d6:	4618      	mov	r0, r3
 80082d8:	4621      	mov	r1, r4
 80082da:	f7f8 fbeb 	bl	8000ab4 <__aeabi_d2f>
 80082de:	4602      	mov	r2, r0
 80082e0:	4b5d      	ldr	r3, [pc, #372]	; (8008458 <refreshEncoder+0x268>)
 80082e2:	601a      	str	r2, [r3, #0]
 80082e4:	e002      	b.n	80082ec <refreshEncoder+0xfc>
	else						theta = _theta;
 80082e6:	4a5c      	ldr	r2, [pc, #368]	; (8008458 <refreshEncoder+0x268>)
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	6013      	str	r3, [r2, #0]

	_theta_re = fmodf((float)angle_raw / (float)ENCODER_RESOL * 2.0f * M_PI * POLES / 2, 2.0f * M_PI) + theta_re_offset;
 80082ec:	89fb      	ldrh	r3, [r7, #14]
 80082ee:	ee07 3a90 	vmov	s15, r3
 80082f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80082f6:	eddf 6a56 	vldr	s13, [pc, #344]	; 8008450 <refreshEncoder+0x260>
 80082fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80082fe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008302:	ee17 0a90 	vmov	r0, s15
 8008306:	f7f8 f8e3 	bl	80004d0 <__aeabi_f2d>
 800830a:	a34b      	add	r3, pc, #300	; (adr r3, 8008438 <refreshEncoder+0x248>)
 800830c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008310:	f7f8 f936 	bl	8000580 <__aeabi_dmul>
 8008314:	4603      	mov	r3, r0
 8008316:	460c      	mov	r4, r1
 8008318:	4618      	mov	r0, r3
 800831a:	4621      	mov	r1, r4
 800831c:	f04f 0200 	mov.w	r2, #0
 8008320:	4b4e      	ldr	r3, [pc, #312]	; (800845c <refreshEncoder+0x26c>)
 8008322:	f7f8 f92d 	bl	8000580 <__aeabi_dmul>
 8008326:	4603      	mov	r3, r0
 8008328:	460c      	mov	r4, r1
 800832a:	4618      	mov	r0, r3
 800832c:	4621      	mov	r1, r4
 800832e:	f04f 0200 	mov.w	r2, #0
 8008332:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008336:	f7f8 fa4d 	bl	80007d4 <__aeabi_ddiv>
 800833a:	4603      	mov	r3, r0
 800833c:	460c      	mov	r4, r1
 800833e:	4618      	mov	r0, r3
 8008340:	4621      	mov	r1, r4
 8008342:	f7f8 fbb7 	bl	8000ab4 <__aeabi_d2f>
 8008346:	4603      	mov	r3, r0
 8008348:	eddf 0a45 	vldr	s1, [pc, #276]	; 8008460 <refreshEncoder+0x270>
 800834c:	ee00 3a10 	vmov	s0, r3
 8008350:	f001 f924 	bl	800959c <fmodf>
 8008354:	eeb0 7a40 	vmov.f32	s14, s0
 8008358:	4b42      	ldr	r3, [pc, #264]	; (8008464 <refreshEncoder+0x274>)
 800835a:	edd3 7a00 	vldr	s15, [r3]
 800835e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008362:	edc7 7a01 	vstr	s15, [r7, #4]

	if(_theta_re < 0.0f)			theta_re = _theta_re + 2 * M_PI;
 8008366:	edd7 7a01 	vldr	s15, [r7, #4]
 800836a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800836e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008372:	d511      	bpl.n	8008398 <refreshEncoder+0x1a8>
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f7f8 f8ab 	bl	80004d0 <__aeabi_f2d>
 800837a:	a331      	add	r3, pc, #196	; (adr r3, 8008440 <refreshEncoder+0x250>)
 800837c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008380:	f7f7 ff48 	bl	8000214 <__adddf3>
 8008384:	4603      	mov	r3, r0
 8008386:	460c      	mov	r4, r1
 8008388:	4618      	mov	r0, r3
 800838a:	4621      	mov	r1, r4
 800838c:	f7f8 fb92 	bl	8000ab4 <__aeabi_d2f>
 8008390:	4602      	mov	r2, r0
 8008392:	4b35      	ldr	r3, [pc, #212]	; (8008468 <refreshEncoder+0x278>)
 8008394:	601a      	str	r2, [r3, #0]
 8008396:	e01f      	b.n	80083d8 <refreshEncoder+0x1e8>
	else if(_theta_re >= 2 * M_PI)	theta_re = _theta_re - 2 * M_PI;
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f7f8 f899 	bl	80004d0 <__aeabi_f2d>
 800839e:	a328      	add	r3, pc, #160	; (adr r3, 8008440 <refreshEncoder+0x250>)
 80083a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a4:	f7f8 fb72 	bl	8000a8c <__aeabi_dcmpge>
 80083a8:	4603      	mov	r3, r0
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d011      	beq.n	80083d2 <refreshEncoder+0x1e2>
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f7f8 f88e 	bl	80004d0 <__aeabi_f2d>
 80083b4:	a322      	add	r3, pc, #136	; (adr r3, 8008440 <refreshEncoder+0x250>)
 80083b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ba:	f7f7 ff29 	bl	8000210 <__aeabi_dsub>
 80083be:	4603      	mov	r3, r0
 80083c0:	460c      	mov	r4, r1
 80083c2:	4618      	mov	r0, r3
 80083c4:	4621      	mov	r1, r4
 80083c6:	f7f8 fb75 	bl	8000ab4 <__aeabi_d2f>
 80083ca:	4602      	mov	r2, r0
 80083cc:	4b26      	ldr	r3, [pc, #152]	; (8008468 <refreshEncoder+0x278>)
 80083ce:	601a      	str	r2, [r3, #0]
 80083d0:	e002      	b.n	80083d8 <refreshEncoder+0x1e8>
	else							theta_re = _theta_re;
 80083d2:	4a25      	ldr	r2, [pc, #148]	; (8008468 <refreshEncoder+0x278>)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6013      	str	r3, [r2, #0]

	cos_theta_re = sin_table2[(int)((theta_re * 0.3183f + 0.5f) * 5000.0f)];
 80083d8:	4b23      	ldr	r3, [pc, #140]	; (8008468 <refreshEncoder+0x278>)
 80083da:	edd3 7a00 	vldr	s15, [r3]
 80083de:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800846c <refreshEncoder+0x27c>
 80083e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80083e6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80083ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80083ee:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8008470 <refreshEncoder+0x280>
 80083f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80083f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80083fa:	ee17 3a90 	vmov	r3, s15
 80083fe:	4a1d      	ldr	r2, [pc, #116]	; (8008474 <refreshEncoder+0x284>)
 8008400:	009b      	lsls	r3, r3, #2
 8008402:	4413      	add	r3, r2
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a1c      	ldr	r2, [pc, #112]	; (8008478 <refreshEncoder+0x288>)
 8008408:	6013      	str	r3, [r2, #0]
	sin_theta_re = sin_table2[(int)(theta_re * 1591.54943f)];
 800840a:	4b17      	ldr	r3, [pc, #92]	; (8008468 <refreshEncoder+0x278>)
 800840c:	edd3 7a00 	vldr	s15, [r3]
 8008410:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800847c <refreshEncoder+0x28c>
 8008414:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008418:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800841c:	ee17 3a90 	vmov	r3, s15
 8008420:	4a14      	ldr	r2, [pc, #80]	; (8008474 <refreshEncoder+0x284>)
 8008422:	009b      	lsls	r3, r3, #2
 8008424:	4413      	add	r3, r2
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a15      	ldr	r2, [pc, #84]	; (8008480 <refreshEncoder+0x290>)
 800842a:	6013      	str	r3, [r2, #0]


	return 0;
 800842c:	2300      	movs	r3, #0

}
 800842e:	4618      	mov	r0, r3
 8008430:	3710      	adds	r7, #16
 8008432:	46bd      	mov	sp, r7
 8008434:	bdb0      	pop	{r4, r5, r7, pc}
 8008436:	bf00      	nop
 8008438:	54442d18 	.word	0x54442d18
 800843c:	400921fb 	.word	0x400921fb
 8008440:	54442d18 	.word	0x54442d18
 8008444:	401921fb 	.word	0x401921fb
 8008448:	40020400 	.word	0x40020400
 800844c:	200001cc 	.word	0x200001cc
 8008450:	46800000 	.word	0x46800000
 8008454:	200001d0 	.word	0x200001d0
 8008458:	200001d8 	.word	0x200001d8
 800845c:	40360000 	.word	0x40360000
 8008460:	40c90fdb 	.word	0x40c90fdb
 8008464:	200001d4 	.word	0x200001d4
 8008468:	200001dc 	.word	0x200001dc
 800846c:	3ea2f838 	.word	0x3ea2f838
 8008470:	459c4000 	.word	0x459c4000
 8008474:	080097c8 	.word	0x080097c8
 8008478:	20000034 	.word	0x20000034
 800847c:	44c6f195 	.word	0x44c6f195
 8008480:	200001e0 	.word	0x200001e0

08008484 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b082      	sub	sp, #8
 8008488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800848a:	2300      	movs	r3, #0
 800848c:	607b      	str	r3, [r7, #4]
 800848e:	4b10      	ldr	r3, [pc, #64]	; (80084d0 <HAL_MspInit+0x4c>)
 8008490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008492:	4a0f      	ldr	r2, [pc, #60]	; (80084d0 <HAL_MspInit+0x4c>)
 8008494:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008498:	6453      	str	r3, [r2, #68]	; 0x44
 800849a:	4b0d      	ldr	r3, [pc, #52]	; (80084d0 <HAL_MspInit+0x4c>)
 800849c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800849e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084a2:	607b      	str	r3, [r7, #4]
 80084a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80084a6:	2300      	movs	r3, #0
 80084a8:	603b      	str	r3, [r7, #0]
 80084aa:	4b09      	ldr	r3, [pc, #36]	; (80084d0 <HAL_MspInit+0x4c>)
 80084ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ae:	4a08      	ldr	r2, [pc, #32]	; (80084d0 <HAL_MspInit+0x4c>)
 80084b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084b4:	6413      	str	r3, [r2, #64]	; 0x40
 80084b6:	4b06      	ldr	r3, [pc, #24]	; (80084d0 <HAL_MspInit+0x4c>)
 80084b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084be:	603b      	str	r3, [r7, #0]
 80084c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80084c2:	2007      	movs	r0, #7
 80084c4:	f7f9 ff92 	bl	80023ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80084c8:	bf00      	nop
 80084ca:	3708      	adds	r7, #8
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}
 80084d0:	40023800 	.word	0x40023800

080084d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80084d4:	b480      	push	{r7}
 80084d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80084d8:	bf00      	nop
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr

080084e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80084e2:	b480      	push	{r7}
 80084e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80084e6:	e7fe      	b.n	80084e6 <HardFault_Handler+0x4>

080084e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80084e8:	b480      	push	{r7}
 80084ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80084ec:	e7fe      	b.n	80084ec <MemManage_Handler+0x4>

080084ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80084ee:	b480      	push	{r7}
 80084f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80084f2:	e7fe      	b.n	80084f2 <BusFault_Handler+0x4>

080084f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80084f4:	b480      	push	{r7}
 80084f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80084f8:	e7fe      	b.n	80084f8 <UsageFault_Handler+0x4>

080084fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80084fa:	b480      	push	{r7}
 80084fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80084fe:	bf00      	nop
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr

08008508 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008508:	b480      	push	{r7}
 800850a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800850c:	bf00      	nop
 800850e:	46bd      	mov	sp, r7
 8008510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008514:	4770      	bx	lr

08008516 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008516:	b480      	push	{r7}
 8008518:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800851a:	bf00      	nop
 800851c:	46bd      	mov	sp, r7
 800851e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008522:	4770      	bx	lr

08008524 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008528:	f7f8 fce6 	bl	8000ef8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800852c:	bf00      	nop
 800852e:	bd80      	pop	{r7, pc}

08008530 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8008534:	4802      	ldr	r0, [pc, #8]	; (8008540 <CAN1_TX_IRQHandler+0x10>)
 8008536:	f7f9 fc7e 	bl	8001e36 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800853a:	bf00      	nop
 800853c:	bd80      	pop	{r7, pc}
 800853e:	bf00      	nop
 8008540:	20000460 	.word	0x20000460

08008544 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8008548:	4802      	ldr	r0, [pc, #8]	; (8008554 <CAN1_RX0_IRQHandler+0x10>)
 800854a:	f7f9 fc74 	bl	8001e36 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800854e:	bf00      	nop
 8008550:	bd80      	pop	{r7, pc}
 8008552:	bf00      	nop
 8008554:	20000460 	.word	0x20000460

08008558 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800855c:	4802      	ldr	r0, [pc, #8]	; (8008568 <SPI2_IRQHandler+0x10>)
 800855e:	f7fb fb05 	bl	8003b6c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8008562:	bf00      	nop
 8008564:	bd80      	pop	{r7, pc}
 8008566:	bf00      	nop
 8008568:	20000488 	.word	0x20000488

0800856c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8008570:	4802      	ldr	r0, [pc, #8]	; (800857c <USART2_IRQHandler+0x10>)
 8008572:	f7fc ff33 	bl	80053dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8008576:	bf00      	nop
 8008578:	bd80      	pop	{r7, pc}
 800857a:	bf00      	nop
 800857c:	20000578 	.word	0x20000578

08008580 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8008584:	4802      	ldr	r0, [pc, #8]	; (8008590 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8008586:	f7fb ff83 	bl	8004490 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800858a:	bf00      	nop
 800858c:	bd80      	pop	{r7, pc}
 800858e:	bf00      	nop
 8008590:	20000538 	.word	0x20000538

08008594 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8008598:	4802      	ldr	r0, [pc, #8]	; (80085a4 <DMA2_Stream0_IRQHandler+0x10>)
 800859a:	f7fa f899 	bl	80026d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800859e:	bf00      	nop
 80085a0:	bd80      	pop	{r7, pc}
 80085a2:	bf00      	nop
 80085a4:	20000354 	.word	0x20000354

080085a8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80085ac:	4802      	ldr	r0, [pc, #8]	; (80085b8 <DMA2_Stream1_IRQHandler+0x10>)
 80085ae:	f7fa f88f 	bl	80026d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80085b2:	bf00      	nop
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop
 80085b8:	20000264 	.word	0x20000264

080085bc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80085c0:	4802      	ldr	r0, [pc, #8]	; (80085cc <DMA2_Stream2_IRQHandler+0x10>)
 80085c2:	f7fa f885 	bl	80026d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80085c6:	bf00      	nop
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	bf00      	nop
 80085cc:	200003b4 	.word	0x200003b4

080085d0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b086      	sub	sp, #24
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	60f8      	str	r0, [r7, #12]
 80085d8:	60b9      	str	r1, [r7, #8]
 80085da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80085dc:	2300      	movs	r3, #0
 80085de:	617b      	str	r3, [r7, #20]
 80085e0:	e00a      	b.n	80085f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80085e2:	f3af 8000 	nop.w
 80085e6:	4601      	mov	r1, r0
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	1c5a      	adds	r2, r3, #1
 80085ec:	60ba      	str	r2, [r7, #8]
 80085ee:	b2ca      	uxtb	r2, r1
 80085f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	3301      	adds	r3, #1
 80085f6:	617b      	str	r3, [r7, #20]
 80085f8:	697a      	ldr	r2, [r7, #20]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	429a      	cmp	r2, r3
 80085fe:	dbf0      	blt.n	80085e2 <_read+0x12>
	}

return len;
 8008600:	687b      	ldr	r3, [r7, #4]
}
 8008602:	4618      	mov	r0, r3
 8008604:	3718      	adds	r7, #24
 8008606:	46bd      	mov	sp, r7
 8008608:	bd80      	pop	{r7, pc}

0800860a <_close>:
	}
	return len;
}

int _close(int file)
{
 800860a:	b480      	push	{r7}
 800860c:	b083      	sub	sp, #12
 800860e:	af00      	add	r7, sp, #0
 8008610:	6078      	str	r0, [r7, #4]
	return -1;
 8008612:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008616:	4618      	mov	r0, r3
 8008618:	370c      	adds	r7, #12
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr

08008622 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008622:	b480      	push	{r7}
 8008624:	b083      	sub	sp, #12
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
 800862a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008632:	605a      	str	r2, [r3, #4]
	return 0;
 8008634:	2300      	movs	r3, #0
}
 8008636:	4618      	mov	r0, r3
 8008638:	370c      	adds	r7, #12
 800863a:	46bd      	mov	sp, r7
 800863c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008640:	4770      	bx	lr

08008642 <_isatty>:

int _isatty(int file)
{
 8008642:	b480      	push	{r7}
 8008644:	b083      	sub	sp, #12
 8008646:	af00      	add	r7, sp, #0
 8008648:	6078      	str	r0, [r7, #4]
	return 1;
 800864a:	2301      	movs	r3, #1
}
 800864c:	4618      	mov	r0, r3
 800864e:	370c      	adds	r7, #12
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr

08008658 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008658:	b480      	push	{r7}
 800865a:	b085      	sub	sp, #20
 800865c:	af00      	add	r7, sp, #0
 800865e:	60f8      	str	r0, [r7, #12]
 8008660:	60b9      	str	r1, [r7, #8]
 8008662:	607a      	str	r2, [r7, #4]
	return 0;
 8008664:	2300      	movs	r3, #0
}
 8008666:	4618      	mov	r0, r3
 8008668:	3714      	adds	r7, #20
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr
	...

08008674 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800867c:	4b11      	ldr	r3, [pc, #68]	; (80086c4 <_sbrk+0x50>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d102      	bne.n	800868a <_sbrk+0x16>
		heap_end = &end;
 8008684:	4b0f      	ldr	r3, [pc, #60]	; (80086c4 <_sbrk+0x50>)
 8008686:	4a10      	ldr	r2, [pc, #64]	; (80086c8 <_sbrk+0x54>)
 8008688:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800868a:	4b0e      	ldr	r3, [pc, #56]	; (80086c4 <_sbrk+0x50>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008690:	4b0c      	ldr	r3, [pc, #48]	; (80086c4 <_sbrk+0x50>)
 8008692:	681a      	ldr	r2, [r3, #0]
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	4413      	add	r3, r2
 8008698:	466a      	mov	r2, sp
 800869a:	4293      	cmp	r3, r2
 800869c:	d907      	bls.n	80086ae <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800869e:	f000 fae3 	bl	8008c68 <__errno>
 80086a2:	4602      	mov	r2, r0
 80086a4:	230c      	movs	r3, #12
 80086a6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80086a8:	f04f 33ff 	mov.w	r3, #4294967295
 80086ac:	e006      	b.n	80086bc <_sbrk+0x48>
	}

	heap_end += incr;
 80086ae:	4b05      	ldr	r3, [pc, #20]	; (80086c4 <_sbrk+0x50>)
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	4413      	add	r3, r2
 80086b6:	4a03      	ldr	r2, [pc, #12]	; (80086c4 <_sbrk+0x50>)
 80086b8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80086ba:	68fb      	ldr	r3, [r7, #12]
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3710      	adds	r7, #16
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}
 80086c4:	200001e8 	.word	0x200001e8
 80086c8:	200005c0 	.word	0x200005c0

080086cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80086cc:	b480      	push	{r7}
 80086ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80086d0:	4b16      	ldr	r3, [pc, #88]	; (800872c <SystemInit+0x60>)
 80086d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086d6:	4a15      	ldr	r2, [pc, #84]	; (800872c <SystemInit+0x60>)
 80086d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80086dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80086e0:	4b13      	ldr	r3, [pc, #76]	; (8008730 <SystemInit+0x64>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4a12      	ldr	r2, [pc, #72]	; (8008730 <SystemInit+0x64>)
 80086e6:	f043 0301 	orr.w	r3, r3, #1
 80086ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80086ec:	4b10      	ldr	r3, [pc, #64]	; (8008730 <SystemInit+0x64>)
 80086ee:	2200      	movs	r2, #0
 80086f0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80086f2:	4b0f      	ldr	r3, [pc, #60]	; (8008730 <SystemInit+0x64>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a0e      	ldr	r2, [pc, #56]	; (8008730 <SystemInit+0x64>)
 80086f8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80086fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008700:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8008702:	4b0b      	ldr	r3, [pc, #44]	; (8008730 <SystemInit+0x64>)
 8008704:	4a0b      	ldr	r2, [pc, #44]	; (8008734 <SystemInit+0x68>)
 8008706:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8008708:	4b09      	ldr	r3, [pc, #36]	; (8008730 <SystemInit+0x64>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a08      	ldr	r2, [pc, #32]	; (8008730 <SystemInit+0x64>)
 800870e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008712:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8008714:	4b06      	ldr	r3, [pc, #24]	; (8008730 <SystemInit+0x64>)
 8008716:	2200      	movs	r2, #0
 8008718:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800871a:	4b04      	ldr	r3, [pc, #16]	; (800872c <SystemInit+0x60>)
 800871c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008720:	609a      	str	r2, [r3, #8]
#endif
}
 8008722:	bf00      	nop
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr
 800872c:	e000ed00 	.word	0xe000ed00
 8008730:	40023800 	.word	0x40023800
 8008734:	24003010 	.word	0x24003010

08008738 <MX_TIM8_Init>:

TIM_HandleTypeDef htim8;

/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b096      	sub	sp, #88	; 0x58
 800873c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800873e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008742:	2200      	movs	r2, #0
 8008744:	601a      	str	r2, [r3, #0]
 8008746:	605a      	str	r2, [r3, #4]
 8008748:	609a      	str	r2, [r3, #8]
 800874a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800874c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008750:	2200      	movs	r2, #0
 8008752:	601a      	str	r2, [r3, #0]
 8008754:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008756:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800875a:	2200      	movs	r2, #0
 800875c:	601a      	str	r2, [r3, #0]
 800875e:	605a      	str	r2, [r3, #4]
 8008760:	609a      	str	r2, [r3, #8]
 8008762:	60da      	str	r2, [r3, #12]
 8008764:	611a      	str	r2, [r3, #16]
 8008766:	615a      	str	r2, [r3, #20]
 8008768:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800876a:	1d3b      	adds	r3, r7, #4
 800876c:	2220      	movs	r2, #32
 800876e:	2100      	movs	r1, #0
 8008770:	4618      	mov	r0, r3
 8008772:	f000 faa3 	bl	8008cbc <memset>

  htim8.Instance = TIM8;
 8008776:	4b4a      	ldr	r3, [pc, #296]	; (80088a0 <MX_TIM8_Init+0x168>)
 8008778:	4a4a      	ldr	r2, [pc, #296]	; (80088a4 <MX_TIM8_Init+0x16c>)
 800877a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800877c:	4b48      	ldr	r3, [pc, #288]	; (80088a0 <MX_TIM8_Init+0x168>)
 800877e:	2200      	movs	r2, #0
 8008780:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8008782:	4b47      	ldr	r3, [pc, #284]	; (80088a0 <MX_TIM8_Init+0x168>)
 8008784:	2220      	movs	r2, #32
 8008786:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 8000;
 8008788:	4b45      	ldr	r3, [pc, #276]	; (80088a0 <MX_TIM8_Init+0x168>)
 800878a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800878e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008790:	4b43      	ldr	r3, [pc, #268]	; (80088a0 <MX_TIM8_Init+0x168>)
 8008792:	2200      	movs	r2, #0
 8008794:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8008796:	4b42      	ldr	r3, [pc, #264]	; (80088a0 <MX_TIM8_Init+0x168>)
 8008798:	2200      	movs	r2, #0
 800879a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800879c:	4b40      	ldr	r3, [pc, #256]	; (80088a0 <MX_TIM8_Init+0x168>)
 800879e:	2280      	movs	r2, #128	; 0x80
 80087a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80087a2:	483f      	ldr	r0, [pc, #252]	; (80088a0 <MX_TIM8_Init+0x168>)
 80087a4:	f7fb fcf6 	bl	8004194 <HAL_TIM_Base_Init>
 80087a8:	4603      	mov	r3, r0
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d001      	beq.n	80087b2 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80087ae:	f7fe ffd5 	bl	800775c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80087b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80087b6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80087b8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80087bc:	4619      	mov	r1, r3
 80087be:	4838      	ldr	r0, [pc, #224]	; (80088a0 <MX_TIM8_Init+0x168>)
 80087c0:	f7fc f834 	bl	800482c <HAL_TIM_ConfigClockSource>
 80087c4:	4603      	mov	r3, r0
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d001      	beq.n	80087ce <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80087ca:	f7fe ffc7 	bl	800775c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80087ce:	4834      	ldr	r0, [pc, #208]	; (80088a0 <MX_TIM8_Init+0x168>)
 80087d0:	f7fb fd0b 	bl	80041ea <HAL_TIM_PWM_Init>
 80087d4:	4603      	mov	r3, r0
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d001      	beq.n	80087de <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80087da:	f7fe ffbf 	bl	800775c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80087de:	2320      	movs	r3, #32
 80087e0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80087e2:	2300      	movs	r3, #0
 80087e4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80087e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80087ea:	4619      	mov	r1, r3
 80087ec:	482c      	ldr	r0, [pc, #176]	; (80088a0 <MX_TIM8_Init+0x168>)
 80087ee:	f7fc fcd7 	bl	80051a0 <HAL_TIMEx_MasterConfigSynchronization>
 80087f2:	4603      	mov	r3, r0
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d001      	beq.n	80087fc <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80087f8:	f7fe ffb0 	bl	800775c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80087fc:	2360      	movs	r3, #96	; 0x60
 80087fe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 4000;
 8008800:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8008804:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008806:	2300      	movs	r3, #0
 8008808:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800880a:	2300      	movs	r3, #0
 800880c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800880e:	2300      	movs	r3, #0
 8008810:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008812:	2300      	movs	r3, #0
 8008814:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008816:	2300      	movs	r3, #0
 8008818:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800881a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800881e:	2200      	movs	r2, #0
 8008820:	4619      	mov	r1, r3
 8008822:	481f      	ldr	r0, [pc, #124]	; (80088a0 <MX_TIM8_Init+0x168>)
 8008824:	f7fb ff3c 	bl	80046a0 <HAL_TIM_PWM_ConfigChannel>
 8008828:	4603      	mov	r3, r0
 800882a:	2b00      	cmp	r3, #0
 800882c:	d001      	beq.n	8008832 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 800882e:	f7fe ff95 	bl	800775c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008832:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008836:	2204      	movs	r2, #4
 8008838:	4619      	mov	r1, r3
 800883a:	4819      	ldr	r0, [pc, #100]	; (80088a0 <MX_TIM8_Init+0x168>)
 800883c:	f7fb ff30 	bl	80046a0 <HAL_TIM_PWM_ConfigChannel>
 8008840:	4603      	mov	r3, r0
 8008842:	2b00      	cmp	r3, #0
 8008844:	d001      	beq.n	800884a <MX_TIM8_Init+0x112>
  {
    Error_Handler();
 8008846:	f7fe ff89 	bl	800775c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800884a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800884e:	2208      	movs	r2, #8
 8008850:	4619      	mov	r1, r3
 8008852:	4813      	ldr	r0, [pc, #76]	; (80088a0 <MX_TIM8_Init+0x168>)
 8008854:	f7fb ff24 	bl	80046a0 <HAL_TIM_PWM_ConfigChannel>
 8008858:	4603      	mov	r3, r0
 800885a:	2b00      	cmp	r3, #0
 800885c:	d001      	beq.n	8008862 <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 800885e:	f7fe ff7d 	bl	800775c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8008862:	2300      	movs	r3, #0
 8008864:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8008866:	2300      	movs	r3, #0
 8008868:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800886a:	2300      	movs	r3, #0
 800886c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 40;
 800886e:	2328      	movs	r3, #40	; 0x28
 8008870:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8008872:	2300      	movs	r3, #0
 8008874:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 8008876:	2300      	movs	r3, #0
 8008878:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800887a:	2300      	movs	r3, #0
 800887c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800887e:	1d3b      	adds	r3, r7, #4
 8008880:	4619      	mov	r1, r3
 8008882:	4807      	ldr	r0, [pc, #28]	; (80088a0 <MX_TIM8_Init+0x168>)
 8008884:	f7fc fcd1 	bl	800522a <HAL_TIMEx_ConfigBreakDeadTime>
 8008888:	4603      	mov	r3, r0
 800888a:	2b00      	cmp	r3, #0
 800888c:	d001      	beq.n	8008892 <MX_TIM8_Init+0x15a>
  {
    Error_Handler();
 800888e:	f7fe ff65 	bl	800775c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8008892:	4803      	ldr	r0, [pc, #12]	; (80088a0 <MX_TIM8_Init+0x168>)
 8008894:	f000 f830 	bl	80088f8 <HAL_TIM_MspPostInit>

}
 8008898:	bf00      	nop
 800889a:	3758      	adds	r7, #88	; 0x58
 800889c:	46bd      	mov	sp, r7
 800889e:	bd80      	pop	{r7, pc}
 80088a0:	20000538 	.word	0x20000538
 80088a4:	40010400 	.word	0x40010400

080088a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a0e      	ldr	r2, [pc, #56]	; (80088f0 <HAL_TIM_Base_MspInit+0x48>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d115      	bne.n	80088e6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80088ba:	2300      	movs	r3, #0
 80088bc:	60fb      	str	r3, [r7, #12]
 80088be:	4b0d      	ldr	r3, [pc, #52]	; (80088f4 <HAL_TIM_Base_MspInit+0x4c>)
 80088c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088c2:	4a0c      	ldr	r2, [pc, #48]	; (80088f4 <HAL_TIM_Base_MspInit+0x4c>)
 80088c4:	f043 0302 	orr.w	r3, r3, #2
 80088c8:	6453      	str	r3, [r2, #68]	; 0x44
 80088ca:	4b0a      	ldr	r3, [pc, #40]	; (80088f4 <HAL_TIM_Base_MspInit+0x4c>)
 80088cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088ce:	f003 0302 	and.w	r3, r3, #2
 80088d2:	60fb      	str	r3, [r7, #12]
 80088d4:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80088d6:	2200      	movs	r2, #0
 80088d8:	2100      	movs	r1, #0
 80088da:	202c      	movs	r0, #44	; 0x2c
 80088dc:	f7f9 fd91 	bl	8002402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80088e0:	202c      	movs	r0, #44	; 0x2c
 80088e2:	f7f9 fdaa 	bl	800243a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80088e6:	bf00      	nop
 80088e8:	3710      	adds	r7, #16
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
 80088ee:	bf00      	nop
 80088f0:	40010400 	.word	0x40010400
 80088f4:	40023800 	.word	0x40023800

080088f8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b08a      	sub	sp, #40	; 0x28
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008900:	f107 0314 	add.w	r3, r7, #20
 8008904:	2200      	movs	r2, #0
 8008906:	601a      	str	r2, [r3, #0]
 8008908:	605a      	str	r2, [r3, #4]
 800890a:	609a      	str	r2, [r3, #8]
 800890c:	60da      	str	r2, [r3, #12]
 800890e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a30      	ldr	r2, [pc, #192]	; (80089d8 <HAL_TIM_MspPostInit+0xe0>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d15a      	bne.n	80089d0 <HAL_TIM_MspPostInit+0xd8>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800891a:	2300      	movs	r3, #0
 800891c:	613b      	str	r3, [r7, #16]
 800891e:	4b2f      	ldr	r3, [pc, #188]	; (80089dc <HAL_TIM_MspPostInit+0xe4>)
 8008920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008922:	4a2e      	ldr	r2, [pc, #184]	; (80089dc <HAL_TIM_MspPostInit+0xe4>)
 8008924:	f043 0301 	orr.w	r3, r3, #1
 8008928:	6313      	str	r3, [r2, #48]	; 0x30
 800892a:	4b2c      	ldr	r3, [pc, #176]	; (80089dc <HAL_TIM_MspPostInit+0xe4>)
 800892c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800892e:	f003 0301 	and.w	r3, r3, #1
 8008932:	613b      	str	r3, [r7, #16]
 8008934:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008936:	2300      	movs	r3, #0
 8008938:	60fb      	str	r3, [r7, #12]
 800893a:	4b28      	ldr	r3, [pc, #160]	; (80089dc <HAL_TIM_MspPostInit+0xe4>)
 800893c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800893e:	4a27      	ldr	r2, [pc, #156]	; (80089dc <HAL_TIM_MspPostInit+0xe4>)
 8008940:	f043 0302 	orr.w	r3, r3, #2
 8008944:	6313      	str	r3, [r2, #48]	; 0x30
 8008946:	4b25      	ldr	r3, [pc, #148]	; (80089dc <HAL_TIM_MspPostInit+0xe4>)
 8008948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800894a:	f003 0302 	and.w	r3, r3, #2
 800894e:	60fb      	str	r3, [r7, #12]
 8008950:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008952:	2300      	movs	r3, #0
 8008954:	60bb      	str	r3, [r7, #8]
 8008956:	4b21      	ldr	r3, [pc, #132]	; (80089dc <HAL_TIM_MspPostInit+0xe4>)
 8008958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800895a:	4a20      	ldr	r2, [pc, #128]	; (80089dc <HAL_TIM_MspPostInit+0xe4>)
 800895c:	f043 0304 	orr.w	r3, r3, #4
 8008960:	6313      	str	r3, [r2, #48]	; 0x30
 8008962:	4b1e      	ldr	r3, [pc, #120]	; (80089dc <HAL_TIM_MspPostInit+0xe4>)
 8008964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008966:	f003 0304 	and.w	r3, r3, #4
 800896a:	60bb      	str	r3, [r7, #8]
 800896c:	68bb      	ldr	r3, [r7, #8]
    PB1     ------> TIM8_CH3N
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800896e:	2380      	movs	r3, #128	; 0x80
 8008970:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008972:	2302      	movs	r3, #2
 8008974:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008976:	2300      	movs	r3, #0
 8008978:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800897a:	2300      	movs	r3, #0
 800897c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800897e:	2303      	movs	r3, #3
 8008980:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008982:	f107 0314 	add.w	r3, r7, #20
 8008986:	4619      	mov	r1, r3
 8008988:	4815      	ldr	r0, [pc, #84]	; (80089e0 <HAL_TIM_MspPostInit+0xe8>)
 800898a:	f7fa f909 	bl	8002ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800898e:	2303      	movs	r3, #3
 8008990:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008992:	2302      	movs	r3, #2
 8008994:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008996:	2300      	movs	r3, #0
 8008998:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800899a:	2300      	movs	r3, #0
 800899c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800899e:	2303      	movs	r3, #3
 80089a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80089a2:	f107 0314 	add.w	r3, r7, #20
 80089a6:	4619      	mov	r1, r3
 80089a8:	480e      	ldr	r0, [pc, #56]	; (80089e4 <HAL_TIM_MspPostInit+0xec>)
 80089aa:	f7fa f8f9 	bl	8002ba0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80089ae:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80089b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80089b4:	2302      	movs	r3, #2
 80089b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089b8:	2300      	movs	r3, #0
 80089ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80089bc:	2300      	movs	r3, #0
 80089be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80089c0:	2303      	movs	r3, #3
 80089c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80089c4:	f107 0314 	add.w	r3, r7, #20
 80089c8:	4619      	mov	r1, r3
 80089ca:	4807      	ldr	r0, [pc, #28]	; (80089e8 <HAL_TIM_MspPostInit+0xf0>)
 80089cc:	f7fa f8e8 	bl	8002ba0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80089d0:	bf00      	nop
 80089d2:	3728      	adds	r7, #40	; 0x28
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}
 80089d8:	40010400 	.word	0x40010400
 80089dc:	40023800 	.word	0x40023800
 80089e0:	40020000 	.word	0x40020000
 80089e4:	40020400 	.word	0x40020400
 80089e8:	40020800 	.word	0x40020800

080089ec <TIM_Init>:
/* USER CODE BEGIN 1 */



void TIM_Init()
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	af00      	add	r7, sp, #0
	  __HAL_TIM_DISABLE_IT(&htim8, TIM_IT_CC2);
	  __HAL_TIM_DISABLE_IT(&htim8, TIM_IT_CC3);
	  __HAL_TIM_DISABLE_IT(&htim8, TIM_IT_CC4);
	  __HAL_TIM_DISABLE_IT(&htim8, TIM_IT_COM);
	  __HAL_TIM_DISABLE_IT(&htim8, TIM_IT_BREAK);*/
	  __HAL_TIM_CLEAR_FLAG(&htim8, TIM_FLAG_UPDATE);
 80089f0:	4b08      	ldr	r3, [pc, #32]	; (8008a14 <TIM_Init+0x28>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f06f 0201 	mvn.w	r2, #1
 80089f8:	611a      	str	r2, [r3, #16]
	  __HAL_TIM_ENABLE_IT(&htim8, TIM_IT_UPDATE);
 80089fa:	4b06      	ldr	r3, [pc, #24]	; (8008a14 <TIM_Init+0x28>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	68da      	ldr	r2, [r3, #12]
 8008a00:	4b04      	ldr	r3, [pc, #16]	; (8008a14 <TIM_Init+0x28>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f042 0201 	orr.w	r2, r2, #1
 8008a08:	60da      	str	r2, [r3, #12]


	  startPWM();
 8008a0a:	f000 f805 	bl	8008a18 <startPWM>


}
 8008a0e:	bf00      	nop
 8008a10:	bd80      	pop	{r7, pc}
 8008a12:	bf00      	nop
 8008a14:	20000538 	.word	0x20000538

08008a18 <startPWM>:



inline void startPWM()
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	af00      	add	r7, sp, #0


	// 3phase PWM Starting
	HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_1);
 8008a1c:	2100      	movs	r1, #0
 8008a1e:	480c      	ldr	r0, [pc, #48]	; (8008a50 <startPWM+0x38>)
 8008a20:	f7fb fc18 	bl	8004254 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_2);
 8008a24:	2104      	movs	r1, #4
 8008a26:	480a      	ldr	r0, [pc, #40]	; (8008a50 <startPWM+0x38>)
 8008a28:	f7fb fc14 	bl	8004254 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_3);
 8008a2c:	2108      	movs	r1, #8
 8008a2e:	4808      	ldr	r0, [pc, #32]	; (8008a50 <startPWM+0x38>)
 8008a30:	f7fb fc10 	bl	8004254 <HAL_TIM_PWM_Start_IT>

	HAL_TIMEx_PWMN_Start_IT(&htim8, TIM_CHANNEL_1);
 8008a34:	2100      	movs	r1, #0
 8008a36:	4806      	ldr	r0, [pc, #24]	; (8008a50 <startPWM+0x38>)
 8008a38:	f7fc fae7 	bl	800500a <HAL_TIMEx_PWMN_Start_IT>
	HAL_TIMEx_PWMN_Start_IT(&htim8, TIM_CHANNEL_2);
 8008a3c:	2104      	movs	r1, #4
 8008a3e:	4804      	ldr	r0, [pc, #16]	; (8008a50 <startPWM+0x38>)
 8008a40:	f7fc fae3 	bl	800500a <HAL_TIMEx_PWMN_Start_IT>
	HAL_TIMEx_PWMN_Start_IT(&htim8, TIM_CHANNEL_3);
 8008a44:	2108      	movs	r1, #8
 8008a46:	4802      	ldr	r0, [pc, #8]	; (8008a50 <startPWM+0x38>)
 8008a48:	f7fc fadf 	bl	800500a <HAL_TIMEx_PWMN_Start_IT>

}
 8008a4c:	bf00      	nop
 8008a4e:	bd80      	pop	{r7, pc}
 8008a50:	20000538 	.word	0x20000538

08008a54 <stopPWM>:



inline void stopPWM()
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	af00      	add	r7, sp, #0

	// 3phase PWM Stopping
	HAL_TIM_PWM_Stop_IT(&htim8, TIM_CHANNEL_1);
 8008a58:	2100      	movs	r1, #0
 8008a5a:	480c      	ldr	r0, [pc, #48]	; (8008a8c <stopPWM+0x38>)
 8008a5c:	f7fb fc7e 	bl	800435c <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&htim8, TIM_CHANNEL_2);
 8008a60:	2104      	movs	r1, #4
 8008a62:	480a      	ldr	r0, [pc, #40]	; (8008a8c <stopPWM+0x38>)
 8008a64:	f7fb fc7a 	bl	800435c <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&htim8, TIM_CHANNEL_3);
 8008a68:	2108      	movs	r1, #8
 8008a6a:	4808      	ldr	r0, [pc, #32]	; (8008a8c <stopPWM+0x38>)
 8008a6c:	f7fb fc76 	bl	800435c <HAL_TIM_PWM_Stop_IT>

	HAL_TIMEx_PWMN_Stop_IT(&htim8, TIM_CHANNEL_1);
 8008a70:	2100      	movs	r1, #0
 8008a72:	4806      	ldr	r0, [pc, #24]	; (8008a8c <stopPWM+0x38>)
 8008a74:	f7fc fb1e 	bl	80050b4 <HAL_TIMEx_PWMN_Stop_IT>
	HAL_TIMEx_PWMN_Stop_IT(&htim8, TIM_CHANNEL_2);
 8008a78:	2104      	movs	r1, #4
 8008a7a:	4804      	ldr	r0, [pc, #16]	; (8008a8c <stopPWM+0x38>)
 8008a7c:	f7fc fb1a 	bl	80050b4 <HAL_TIMEx_PWMN_Stop_IT>
	HAL_TIMEx_PWMN_Stop_IT(&htim8, TIM_CHANNEL_3);
 8008a80:	2108      	movs	r1, #8
 8008a82:	4802      	ldr	r0, [pc, #8]	; (8008a8c <stopPWM+0x38>)
 8008a84:	f7fc fb16 	bl	80050b4 <HAL_TIMEx_PWMN_Stop_IT>

}
 8008a88:	bf00      	nop
 8008a8a:	bd80      	pop	{r7, pc}
 8008a8c:	20000538 	.word	0x20000538

08008a90 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim)
{
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b082      	sub	sp, #8
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM8)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a10      	ldr	r2, [pc, #64]	; (8008ae0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d119      	bne.n	8008ad6 <HAL_TIM_PeriodElapsedCallback+0x46>
	{

		if(!__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	f003 0310 	and.w	r3, r3, #16
 8008aac:	2b10      	cmp	r3, #16
 8008aae:	d012      	beq.n	8008ad6 <HAL_TIM_PeriodElapsedCallback+0x46>
		{

			currentControl();
 8008ab0:	f7fd f8da 	bl	8005c68 <currentControl>

			// timeout control
			if(timeoutCount < TIMEOUT_MS * PWM_FREQ / 1000)
 8008ab4:	4b0b      	ldr	r3, [pc, #44]	; (8008ae4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008abc:	d205      	bcs.n	8008aca <HAL_TIM_PeriodElapsedCallback+0x3a>
			{
				timeoutCount += 1;
 8008abe:	4b09      	ldr	r3, [pc, #36]	; (8008ae4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	4a07      	ldr	r2, [pc, #28]	; (8008ae4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8008ac6:	6013      	str	r3, [r2, #0]
		}


	}

}
 8008ac8:	e005      	b.n	8008ad6 <HAL_TIM_PeriodElapsedCallback+0x46>
				timeoutCount = 0;
 8008aca:	4b06      	ldr	r3, [pc, #24]	; (8008ae4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8008acc:	2200      	movs	r2, #0
 8008ace:	601a      	str	r2, [r3, #0]
				timeoutState = 1;
 8008ad0:	4b05      	ldr	r3, [pc, #20]	; (8008ae8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	701a      	strb	r2, [r3, #0]
}
 8008ad6:	bf00      	nop
 8008ad8:	3708      	adds	r7, #8
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}
 8008ade:	bf00      	nop
 8008ae0:	40010400 	.word	0x40010400
 8008ae4:	200001f8 	.word	0x200001f8
 8008ae8:	200001fc 	.word	0x200001fc

08008aec <timeoutReset>:


inline void timeoutReset()
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	af00      	add	r7, sp, #0
	timeoutCount = 0;
 8008af0:	4b09      	ldr	r3, [pc, #36]	; (8008b18 <timeoutReset+0x2c>)
 8008af2:	2200      	movs	r2, #0
 8008af4:	601a      	str	r2, [r3, #0]
	if(timeoutState == 1)
 8008af6:	4b09      	ldr	r3, [pc, #36]	; (8008b1c <timeoutReset+0x30>)
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	b2db      	uxtb	r3, r3
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d108      	bne.n	8008b12 <timeoutReset+0x26>
	{
		timeoutState = 0;
 8008b00:	4b06      	ldr	r3, [pc, #24]	; (8008b1c <timeoutReset+0x30>)
 8008b02:	2200      	movs	r2, #0
 8008b04:	701a      	strb	r2, [r3, #0]
		ASR_Reset();
 8008b06:	f7fd fcf5 	bl	80064f4 <ASR_Reset>
		ACR_Reset();
 8008b0a:	f7fd fb07 	bl	800611c <ACR_Reset>
		startPWM();
 8008b0e:	f7ff ff83 	bl	8008a18 <startPWM>
	}
}
 8008b12:	bf00      	nop
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop
 8008b18:	200001f8 	.word	0x200001f8
 8008b1c:	200001fc 	.word	0x200001fc

08008b20 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8008b24:	4b11      	ldr	r3, [pc, #68]	; (8008b6c <MX_USART2_UART_Init+0x4c>)
 8008b26:	4a12      	ldr	r2, [pc, #72]	; (8008b70 <MX_USART2_UART_Init+0x50>)
 8008b28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8008b2a:	4b10      	ldr	r3, [pc, #64]	; (8008b6c <MX_USART2_UART_Init+0x4c>)
 8008b2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008b30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008b32:	4b0e      	ldr	r3, [pc, #56]	; (8008b6c <MX_USART2_UART_Init+0x4c>)
 8008b34:	2200      	movs	r2, #0
 8008b36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008b38:	4b0c      	ldr	r3, [pc, #48]	; (8008b6c <MX_USART2_UART_Init+0x4c>)
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008b3e:	4b0b      	ldr	r3, [pc, #44]	; (8008b6c <MX_USART2_UART_Init+0x4c>)
 8008b40:	2200      	movs	r2, #0
 8008b42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008b44:	4b09      	ldr	r3, [pc, #36]	; (8008b6c <MX_USART2_UART_Init+0x4c>)
 8008b46:	220c      	movs	r2, #12
 8008b48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008b4a:	4b08      	ldr	r3, [pc, #32]	; (8008b6c <MX_USART2_UART_Init+0x4c>)
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008b50:	4b06      	ldr	r3, [pc, #24]	; (8008b6c <MX_USART2_UART_Init+0x4c>)
 8008b52:	2200      	movs	r2, #0
 8008b54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008b56:	4805      	ldr	r0, [pc, #20]	; (8008b6c <MX_USART2_UART_Init+0x4c>)
 8008b58:	f7fc fbf2 	bl	8005340 <HAL_UART_Init>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d001      	beq.n	8008b66 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8008b62:	f7fe fdfb 	bl	800775c <Error_Handler>
  }

}
 8008b66:	bf00      	nop
 8008b68:	bd80      	pop	{r7, pc}
 8008b6a:	bf00      	nop
 8008b6c:	20000578 	.word	0x20000578
 8008b70:	40004400 	.word	0x40004400

08008b74 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b08a      	sub	sp, #40	; 0x28
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b7c:	f107 0314 	add.w	r3, r7, #20
 8008b80:	2200      	movs	r2, #0
 8008b82:	601a      	str	r2, [r3, #0]
 8008b84:	605a      	str	r2, [r3, #4]
 8008b86:	609a      	str	r2, [r3, #8]
 8008b88:	60da      	str	r2, [r3, #12]
 8008b8a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	4a1d      	ldr	r2, [pc, #116]	; (8008c08 <HAL_UART_MspInit+0x94>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d133      	bne.n	8008bfe <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8008b96:	2300      	movs	r3, #0
 8008b98:	613b      	str	r3, [r7, #16]
 8008b9a:	4b1c      	ldr	r3, [pc, #112]	; (8008c0c <HAL_UART_MspInit+0x98>)
 8008b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b9e:	4a1b      	ldr	r2, [pc, #108]	; (8008c0c <HAL_UART_MspInit+0x98>)
 8008ba0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8008ba6:	4b19      	ldr	r3, [pc, #100]	; (8008c0c <HAL_UART_MspInit+0x98>)
 8008ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bae:	613b      	str	r3, [r7, #16]
 8008bb0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	60fb      	str	r3, [r7, #12]
 8008bb6:	4b15      	ldr	r3, [pc, #84]	; (8008c0c <HAL_UART_MspInit+0x98>)
 8008bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bba:	4a14      	ldr	r2, [pc, #80]	; (8008c0c <HAL_UART_MspInit+0x98>)
 8008bbc:	f043 0301 	orr.w	r3, r3, #1
 8008bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8008bc2:	4b12      	ldr	r3, [pc, #72]	; (8008c0c <HAL_UART_MspInit+0x98>)
 8008bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bc6:	f003 0301 	and.w	r3, r3, #1
 8008bca:	60fb      	str	r3, [r7, #12]
 8008bcc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8008bce:	230c      	movs	r3, #12
 8008bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008bd2:	2302      	movs	r3, #2
 8008bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008bda:	2303      	movs	r3, #3
 8008bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008bde:	2307      	movs	r3, #7
 8008be0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008be2:	f107 0314 	add.w	r3, r7, #20
 8008be6:	4619      	mov	r1, r3
 8008be8:	4809      	ldr	r0, [pc, #36]	; (8008c10 <HAL_UART_MspInit+0x9c>)
 8008bea:	f7f9 ffd9 	bl	8002ba0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8008bee:	2200      	movs	r2, #0
 8008bf0:	2100      	movs	r1, #0
 8008bf2:	2026      	movs	r0, #38	; 0x26
 8008bf4:	f7f9 fc05 	bl	8002402 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8008bf8:	2026      	movs	r0, #38	; 0x26
 8008bfa:	f7f9 fc1e 	bl	800243a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8008bfe:	bf00      	nop
 8008c00:	3728      	adds	r7, #40	; 0x28
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}
 8008c06:	bf00      	nop
 8008c08:	40004400 	.word	0x40004400
 8008c0c:	40023800 	.word	0x40023800
 8008c10:	40020000 	.word	0x40020000

08008c14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8008c14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008c4c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008c18:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008c1a:	e003      	b.n	8008c24 <LoopCopyDataInit>

08008c1c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008c1c:	4b0c      	ldr	r3, [pc, #48]	; (8008c50 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008c1e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008c20:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008c22:	3104      	adds	r1, #4

08008c24 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008c24:	480b      	ldr	r0, [pc, #44]	; (8008c54 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008c26:	4b0c      	ldr	r3, [pc, #48]	; (8008c58 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008c28:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008c2a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008c2c:	d3f6      	bcc.n	8008c1c <CopyDataInit>
  ldr  r2, =_sbss
 8008c2e:	4a0b      	ldr	r2, [pc, #44]	; (8008c5c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008c30:	e002      	b.n	8008c38 <LoopFillZerobss>

08008c32 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008c32:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008c34:	f842 3b04 	str.w	r3, [r2], #4

08008c38 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008c38:	4b09      	ldr	r3, [pc, #36]	; (8008c60 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008c3a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008c3c:	d3f9      	bcc.n	8008c32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008c3e:	f7ff fd45 	bl	80086cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008c42:	f000 f817 	bl	8008c74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008c46:	f7fe fb8f 	bl	8007368 <main>
  bx  lr    
 8008c4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008c4c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8008c50:	0801d0e4 	.word	0x0801d0e4
  ldr  r0, =_sdata
 8008c54:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008c58:	200000a4 	.word	0x200000a4
  ldr  r2, =_sbss
 8008c5c:	200000a4 	.word	0x200000a4
  ldr  r3, = _ebss
 8008c60:	200005bc 	.word	0x200005bc

08008c64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008c64:	e7fe      	b.n	8008c64 <ADC_IRQHandler>
	...

08008c68 <__errno>:
 8008c68:	4b01      	ldr	r3, [pc, #4]	; (8008c70 <__errno+0x8>)
 8008c6a:	6818      	ldr	r0, [r3, #0]
 8008c6c:	4770      	bx	lr
 8008c6e:	bf00      	nop
 8008c70:	2000003c 	.word	0x2000003c

08008c74 <__libc_init_array>:
 8008c74:	b570      	push	{r4, r5, r6, lr}
 8008c76:	4e0d      	ldr	r6, [pc, #52]	; (8008cac <__libc_init_array+0x38>)
 8008c78:	4c0d      	ldr	r4, [pc, #52]	; (8008cb0 <__libc_init_array+0x3c>)
 8008c7a:	1ba4      	subs	r4, r4, r6
 8008c7c:	10a4      	asrs	r4, r4, #2
 8008c7e:	2500      	movs	r5, #0
 8008c80:	42a5      	cmp	r5, r4
 8008c82:	d109      	bne.n	8008c98 <__libc_init_array+0x24>
 8008c84:	4e0b      	ldr	r6, [pc, #44]	; (8008cb4 <__libc_init_array+0x40>)
 8008c86:	4c0c      	ldr	r4, [pc, #48]	; (8008cb8 <__libc_init_array+0x44>)
 8008c88:	f000 fd6e 	bl	8009768 <_init>
 8008c8c:	1ba4      	subs	r4, r4, r6
 8008c8e:	10a4      	asrs	r4, r4, #2
 8008c90:	2500      	movs	r5, #0
 8008c92:	42a5      	cmp	r5, r4
 8008c94:	d105      	bne.n	8008ca2 <__libc_init_array+0x2e>
 8008c96:	bd70      	pop	{r4, r5, r6, pc}
 8008c98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008c9c:	4798      	blx	r3
 8008c9e:	3501      	adds	r5, #1
 8008ca0:	e7ee      	b.n	8008c80 <__libc_init_array+0xc>
 8008ca2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008ca6:	4798      	blx	r3
 8008ca8:	3501      	adds	r5, #1
 8008caa:	e7f2      	b.n	8008c92 <__libc_init_array+0x1e>
 8008cac:	0801d0dc 	.word	0x0801d0dc
 8008cb0:	0801d0dc 	.word	0x0801d0dc
 8008cb4:	0801d0dc 	.word	0x0801d0dc
 8008cb8:	0801d0e0 	.word	0x0801d0e0

08008cbc <memset>:
 8008cbc:	4402      	add	r2, r0
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d100      	bne.n	8008cc6 <memset+0xa>
 8008cc4:	4770      	bx	lr
 8008cc6:	f803 1b01 	strb.w	r1, [r3], #1
 8008cca:	e7f9      	b.n	8008cc0 <memset+0x4>

08008ccc <_puts_r>:
 8008ccc:	b570      	push	{r4, r5, r6, lr}
 8008cce:	460e      	mov	r6, r1
 8008cd0:	4605      	mov	r5, r0
 8008cd2:	b118      	cbz	r0, 8008cdc <_puts_r+0x10>
 8008cd4:	6983      	ldr	r3, [r0, #24]
 8008cd6:	b90b      	cbnz	r3, 8008cdc <_puts_r+0x10>
 8008cd8:	f000 fa0c 	bl	80090f4 <__sinit>
 8008cdc:	69ab      	ldr	r3, [r5, #24]
 8008cde:	68ac      	ldr	r4, [r5, #8]
 8008ce0:	b913      	cbnz	r3, 8008ce8 <_puts_r+0x1c>
 8008ce2:	4628      	mov	r0, r5
 8008ce4:	f000 fa06 	bl	80090f4 <__sinit>
 8008ce8:	4b23      	ldr	r3, [pc, #140]	; (8008d78 <_puts_r+0xac>)
 8008cea:	429c      	cmp	r4, r3
 8008cec:	d117      	bne.n	8008d1e <_puts_r+0x52>
 8008cee:	686c      	ldr	r4, [r5, #4]
 8008cf0:	89a3      	ldrh	r3, [r4, #12]
 8008cf2:	071b      	lsls	r3, r3, #28
 8008cf4:	d51d      	bpl.n	8008d32 <_puts_r+0x66>
 8008cf6:	6923      	ldr	r3, [r4, #16]
 8008cf8:	b1db      	cbz	r3, 8008d32 <_puts_r+0x66>
 8008cfa:	3e01      	subs	r6, #1
 8008cfc:	68a3      	ldr	r3, [r4, #8]
 8008cfe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008d02:	3b01      	subs	r3, #1
 8008d04:	60a3      	str	r3, [r4, #8]
 8008d06:	b9e9      	cbnz	r1, 8008d44 <_puts_r+0x78>
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	da2e      	bge.n	8008d6a <_puts_r+0x9e>
 8008d0c:	4622      	mov	r2, r4
 8008d0e:	210a      	movs	r1, #10
 8008d10:	4628      	mov	r0, r5
 8008d12:	f000 f83f 	bl	8008d94 <__swbuf_r>
 8008d16:	3001      	adds	r0, #1
 8008d18:	d011      	beq.n	8008d3e <_puts_r+0x72>
 8008d1a:	200a      	movs	r0, #10
 8008d1c:	e011      	b.n	8008d42 <_puts_r+0x76>
 8008d1e:	4b17      	ldr	r3, [pc, #92]	; (8008d7c <_puts_r+0xb0>)
 8008d20:	429c      	cmp	r4, r3
 8008d22:	d101      	bne.n	8008d28 <_puts_r+0x5c>
 8008d24:	68ac      	ldr	r4, [r5, #8]
 8008d26:	e7e3      	b.n	8008cf0 <_puts_r+0x24>
 8008d28:	4b15      	ldr	r3, [pc, #84]	; (8008d80 <_puts_r+0xb4>)
 8008d2a:	429c      	cmp	r4, r3
 8008d2c:	bf08      	it	eq
 8008d2e:	68ec      	ldreq	r4, [r5, #12]
 8008d30:	e7de      	b.n	8008cf0 <_puts_r+0x24>
 8008d32:	4621      	mov	r1, r4
 8008d34:	4628      	mov	r0, r5
 8008d36:	f000 f87f 	bl	8008e38 <__swsetup_r>
 8008d3a:	2800      	cmp	r0, #0
 8008d3c:	d0dd      	beq.n	8008cfa <_puts_r+0x2e>
 8008d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8008d42:	bd70      	pop	{r4, r5, r6, pc}
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	da04      	bge.n	8008d52 <_puts_r+0x86>
 8008d48:	69a2      	ldr	r2, [r4, #24]
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	dc06      	bgt.n	8008d5c <_puts_r+0x90>
 8008d4e:	290a      	cmp	r1, #10
 8008d50:	d004      	beq.n	8008d5c <_puts_r+0x90>
 8008d52:	6823      	ldr	r3, [r4, #0]
 8008d54:	1c5a      	adds	r2, r3, #1
 8008d56:	6022      	str	r2, [r4, #0]
 8008d58:	7019      	strb	r1, [r3, #0]
 8008d5a:	e7cf      	b.n	8008cfc <_puts_r+0x30>
 8008d5c:	4622      	mov	r2, r4
 8008d5e:	4628      	mov	r0, r5
 8008d60:	f000 f818 	bl	8008d94 <__swbuf_r>
 8008d64:	3001      	adds	r0, #1
 8008d66:	d1c9      	bne.n	8008cfc <_puts_r+0x30>
 8008d68:	e7e9      	b.n	8008d3e <_puts_r+0x72>
 8008d6a:	6823      	ldr	r3, [r4, #0]
 8008d6c:	200a      	movs	r0, #10
 8008d6e:	1c5a      	adds	r2, r3, #1
 8008d70:	6022      	str	r2, [r4, #0]
 8008d72:	7018      	strb	r0, [r3, #0]
 8008d74:	e7e5      	b.n	8008d42 <_puts_r+0x76>
 8008d76:	bf00      	nop
 8008d78:	0801d084 	.word	0x0801d084
 8008d7c:	0801d0a4 	.word	0x0801d0a4
 8008d80:	0801d064 	.word	0x0801d064

08008d84 <puts>:
 8008d84:	4b02      	ldr	r3, [pc, #8]	; (8008d90 <puts+0xc>)
 8008d86:	4601      	mov	r1, r0
 8008d88:	6818      	ldr	r0, [r3, #0]
 8008d8a:	f7ff bf9f 	b.w	8008ccc <_puts_r>
 8008d8e:	bf00      	nop
 8008d90:	2000003c 	.word	0x2000003c

08008d94 <__swbuf_r>:
 8008d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d96:	460e      	mov	r6, r1
 8008d98:	4614      	mov	r4, r2
 8008d9a:	4605      	mov	r5, r0
 8008d9c:	b118      	cbz	r0, 8008da6 <__swbuf_r+0x12>
 8008d9e:	6983      	ldr	r3, [r0, #24]
 8008da0:	b90b      	cbnz	r3, 8008da6 <__swbuf_r+0x12>
 8008da2:	f000 f9a7 	bl	80090f4 <__sinit>
 8008da6:	4b21      	ldr	r3, [pc, #132]	; (8008e2c <__swbuf_r+0x98>)
 8008da8:	429c      	cmp	r4, r3
 8008daa:	d12a      	bne.n	8008e02 <__swbuf_r+0x6e>
 8008dac:	686c      	ldr	r4, [r5, #4]
 8008dae:	69a3      	ldr	r3, [r4, #24]
 8008db0:	60a3      	str	r3, [r4, #8]
 8008db2:	89a3      	ldrh	r3, [r4, #12]
 8008db4:	071a      	lsls	r2, r3, #28
 8008db6:	d52e      	bpl.n	8008e16 <__swbuf_r+0x82>
 8008db8:	6923      	ldr	r3, [r4, #16]
 8008dba:	b363      	cbz	r3, 8008e16 <__swbuf_r+0x82>
 8008dbc:	6923      	ldr	r3, [r4, #16]
 8008dbe:	6820      	ldr	r0, [r4, #0]
 8008dc0:	1ac0      	subs	r0, r0, r3
 8008dc2:	6963      	ldr	r3, [r4, #20]
 8008dc4:	b2f6      	uxtb	r6, r6
 8008dc6:	4283      	cmp	r3, r0
 8008dc8:	4637      	mov	r7, r6
 8008dca:	dc04      	bgt.n	8008dd6 <__swbuf_r+0x42>
 8008dcc:	4621      	mov	r1, r4
 8008dce:	4628      	mov	r0, r5
 8008dd0:	f000 f926 	bl	8009020 <_fflush_r>
 8008dd4:	bb28      	cbnz	r0, 8008e22 <__swbuf_r+0x8e>
 8008dd6:	68a3      	ldr	r3, [r4, #8]
 8008dd8:	3b01      	subs	r3, #1
 8008dda:	60a3      	str	r3, [r4, #8]
 8008ddc:	6823      	ldr	r3, [r4, #0]
 8008dde:	1c5a      	adds	r2, r3, #1
 8008de0:	6022      	str	r2, [r4, #0]
 8008de2:	701e      	strb	r6, [r3, #0]
 8008de4:	6963      	ldr	r3, [r4, #20]
 8008de6:	3001      	adds	r0, #1
 8008de8:	4283      	cmp	r3, r0
 8008dea:	d004      	beq.n	8008df6 <__swbuf_r+0x62>
 8008dec:	89a3      	ldrh	r3, [r4, #12]
 8008dee:	07db      	lsls	r3, r3, #31
 8008df0:	d519      	bpl.n	8008e26 <__swbuf_r+0x92>
 8008df2:	2e0a      	cmp	r6, #10
 8008df4:	d117      	bne.n	8008e26 <__swbuf_r+0x92>
 8008df6:	4621      	mov	r1, r4
 8008df8:	4628      	mov	r0, r5
 8008dfa:	f000 f911 	bl	8009020 <_fflush_r>
 8008dfe:	b190      	cbz	r0, 8008e26 <__swbuf_r+0x92>
 8008e00:	e00f      	b.n	8008e22 <__swbuf_r+0x8e>
 8008e02:	4b0b      	ldr	r3, [pc, #44]	; (8008e30 <__swbuf_r+0x9c>)
 8008e04:	429c      	cmp	r4, r3
 8008e06:	d101      	bne.n	8008e0c <__swbuf_r+0x78>
 8008e08:	68ac      	ldr	r4, [r5, #8]
 8008e0a:	e7d0      	b.n	8008dae <__swbuf_r+0x1a>
 8008e0c:	4b09      	ldr	r3, [pc, #36]	; (8008e34 <__swbuf_r+0xa0>)
 8008e0e:	429c      	cmp	r4, r3
 8008e10:	bf08      	it	eq
 8008e12:	68ec      	ldreq	r4, [r5, #12]
 8008e14:	e7cb      	b.n	8008dae <__swbuf_r+0x1a>
 8008e16:	4621      	mov	r1, r4
 8008e18:	4628      	mov	r0, r5
 8008e1a:	f000 f80d 	bl	8008e38 <__swsetup_r>
 8008e1e:	2800      	cmp	r0, #0
 8008e20:	d0cc      	beq.n	8008dbc <__swbuf_r+0x28>
 8008e22:	f04f 37ff 	mov.w	r7, #4294967295
 8008e26:	4638      	mov	r0, r7
 8008e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e2a:	bf00      	nop
 8008e2c:	0801d084 	.word	0x0801d084
 8008e30:	0801d0a4 	.word	0x0801d0a4
 8008e34:	0801d064 	.word	0x0801d064

08008e38 <__swsetup_r>:
 8008e38:	4b32      	ldr	r3, [pc, #200]	; (8008f04 <__swsetup_r+0xcc>)
 8008e3a:	b570      	push	{r4, r5, r6, lr}
 8008e3c:	681d      	ldr	r5, [r3, #0]
 8008e3e:	4606      	mov	r6, r0
 8008e40:	460c      	mov	r4, r1
 8008e42:	b125      	cbz	r5, 8008e4e <__swsetup_r+0x16>
 8008e44:	69ab      	ldr	r3, [r5, #24]
 8008e46:	b913      	cbnz	r3, 8008e4e <__swsetup_r+0x16>
 8008e48:	4628      	mov	r0, r5
 8008e4a:	f000 f953 	bl	80090f4 <__sinit>
 8008e4e:	4b2e      	ldr	r3, [pc, #184]	; (8008f08 <__swsetup_r+0xd0>)
 8008e50:	429c      	cmp	r4, r3
 8008e52:	d10f      	bne.n	8008e74 <__swsetup_r+0x3c>
 8008e54:	686c      	ldr	r4, [r5, #4]
 8008e56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e5a:	b29a      	uxth	r2, r3
 8008e5c:	0715      	lsls	r5, r2, #28
 8008e5e:	d42c      	bmi.n	8008eba <__swsetup_r+0x82>
 8008e60:	06d0      	lsls	r0, r2, #27
 8008e62:	d411      	bmi.n	8008e88 <__swsetup_r+0x50>
 8008e64:	2209      	movs	r2, #9
 8008e66:	6032      	str	r2, [r6, #0]
 8008e68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e6c:	81a3      	strh	r3, [r4, #12]
 8008e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e72:	e03e      	b.n	8008ef2 <__swsetup_r+0xba>
 8008e74:	4b25      	ldr	r3, [pc, #148]	; (8008f0c <__swsetup_r+0xd4>)
 8008e76:	429c      	cmp	r4, r3
 8008e78:	d101      	bne.n	8008e7e <__swsetup_r+0x46>
 8008e7a:	68ac      	ldr	r4, [r5, #8]
 8008e7c:	e7eb      	b.n	8008e56 <__swsetup_r+0x1e>
 8008e7e:	4b24      	ldr	r3, [pc, #144]	; (8008f10 <__swsetup_r+0xd8>)
 8008e80:	429c      	cmp	r4, r3
 8008e82:	bf08      	it	eq
 8008e84:	68ec      	ldreq	r4, [r5, #12]
 8008e86:	e7e6      	b.n	8008e56 <__swsetup_r+0x1e>
 8008e88:	0751      	lsls	r1, r2, #29
 8008e8a:	d512      	bpl.n	8008eb2 <__swsetup_r+0x7a>
 8008e8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e8e:	b141      	cbz	r1, 8008ea2 <__swsetup_r+0x6a>
 8008e90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e94:	4299      	cmp	r1, r3
 8008e96:	d002      	beq.n	8008e9e <__swsetup_r+0x66>
 8008e98:	4630      	mov	r0, r6
 8008e9a:	f000 fa19 	bl	80092d0 <_free_r>
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	6363      	str	r3, [r4, #52]	; 0x34
 8008ea2:	89a3      	ldrh	r3, [r4, #12]
 8008ea4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008ea8:	81a3      	strh	r3, [r4, #12]
 8008eaa:	2300      	movs	r3, #0
 8008eac:	6063      	str	r3, [r4, #4]
 8008eae:	6923      	ldr	r3, [r4, #16]
 8008eb0:	6023      	str	r3, [r4, #0]
 8008eb2:	89a3      	ldrh	r3, [r4, #12]
 8008eb4:	f043 0308 	orr.w	r3, r3, #8
 8008eb8:	81a3      	strh	r3, [r4, #12]
 8008eba:	6923      	ldr	r3, [r4, #16]
 8008ebc:	b94b      	cbnz	r3, 8008ed2 <__swsetup_r+0x9a>
 8008ebe:	89a3      	ldrh	r3, [r4, #12]
 8008ec0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008ec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008ec8:	d003      	beq.n	8008ed2 <__swsetup_r+0x9a>
 8008eca:	4621      	mov	r1, r4
 8008ecc:	4630      	mov	r0, r6
 8008ece:	f000 f9bf 	bl	8009250 <__smakebuf_r>
 8008ed2:	89a2      	ldrh	r2, [r4, #12]
 8008ed4:	f012 0301 	ands.w	r3, r2, #1
 8008ed8:	d00c      	beq.n	8008ef4 <__swsetup_r+0xbc>
 8008eda:	2300      	movs	r3, #0
 8008edc:	60a3      	str	r3, [r4, #8]
 8008ede:	6963      	ldr	r3, [r4, #20]
 8008ee0:	425b      	negs	r3, r3
 8008ee2:	61a3      	str	r3, [r4, #24]
 8008ee4:	6923      	ldr	r3, [r4, #16]
 8008ee6:	b953      	cbnz	r3, 8008efe <__swsetup_r+0xc6>
 8008ee8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008eec:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008ef0:	d1ba      	bne.n	8008e68 <__swsetup_r+0x30>
 8008ef2:	bd70      	pop	{r4, r5, r6, pc}
 8008ef4:	0792      	lsls	r2, r2, #30
 8008ef6:	bf58      	it	pl
 8008ef8:	6963      	ldrpl	r3, [r4, #20]
 8008efa:	60a3      	str	r3, [r4, #8]
 8008efc:	e7f2      	b.n	8008ee4 <__swsetup_r+0xac>
 8008efe:	2000      	movs	r0, #0
 8008f00:	e7f7      	b.n	8008ef2 <__swsetup_r+0xba>
 8008f02:	bf00      	nop
 8008f04:	2000003c 	.word	0x2000003c
 8008f08:	0801d084 	.word	0x0801d084
 8008f0c:	0801d0a4 	.word	0x0801d0a4
 8008f10:	0801d064 	.word	0x0801d064

08008f14 <__sflush_r>:
 8008f14:	898a      	ldrh	r2, [r1, #12]
 8008f16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f1a:	4605      	mov	r5, r0
 8008f1c:	0710      	lsls	r0, r2, #28
 8008f1e:	460c      	mov	r4, r1
 8008f20:	d458      	bmi.n	8008fd4 <__sflush_r+0xc0>
 8008f22:	684b      	ldr	r3, [r1, #4]
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	dc05      	bgt.n	8008f34 <__sflush_r+0x20>
 8008f28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	dc02      	bgt.n	8008f34 <__sflush_r+0x20>
 8008f2e:	2000      	movs	r0, #0
 8008f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f36:	2e00      	cmp	r6, #0
 8008f38:	d0f9      	beq.n	8008f2e <__sflush_r+0x1a>
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f40:	682f      	ldr	r7, [r5, #0]
 8008f42:	6a21      	ldr	r1, [r4, #32]
 8008f44:	602b      	str	r3, [r5, #0]
 8008f46:	d032      	beq.n	8008fae <__sflush_r+0x9a>
 8008f48:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f4a:	89a3      	ldrh	r3, [r4, #12]
 8008f4c:	075a      	lsls	r2, r3, #29
 8008f4e:	d505      	bpl.n	8008f5c <__sflush_r+0x48>
 8008f50:	6863      	ldr	r3, [r4, #4]
 8008f52:	1ac0      	subs	r0, r0, r3
 8008f54:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f56:	b10b      	cbz	r3, 8008f5c <__sflush_r+0x48>
 8008f58:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f5a:	1ac0      	subs	r0, r0, r3
 8008f5c:	2300      	movs	r3, #0
 8008f5e:	4602      	mov	r2, r0
 8008f60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f62:	6a21      	ldr	r1, [r4, #32]
 8008f64:	4628      	mov	r0, r5
 8008f66:	47b0      	blx	r6
 8008f68:	1c43      	adds	r3, r0, #1
 8008f6a:	89a3      	ldrh	r3, [r4, #12]
 8008f6c:	d106      	bne.n	8008f7c <__sflush_r+0x68>
 8008f6e:	6829      	ldr	r1, [r5, #0]
 8008f70:	291d      	cmp	r1, #29
 8008f72:	d848      	bhi.n	8009006 <__sflush_r+0xf2>
 8008f74:	4a29      	ldr	r2, [pc, #164]	; (800901c <__sflush_r+0x108>)
 8008f76:	40ca      	lsrs	r2, r1
 8008f78:	07d6      	lsls	r6, r2, #31
 8008f7a:	d544      	bpl.n	8009006 <__sflush_r+0xf2>
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	6062      	str	r2, [r4, #4]
 8008f80:	04d9      	lsls	r1, r3, #19
 8008f82:	6922      	ldr	r2, [r4, #16]
 8008f84:	6022      	str	r2, [r4, #0]
 8008f86:	d504      	bpl.n	8008f92 <__sflush_r+0x7e>
 8008f88:	1c42      	adds	r2, r0, #1
 8008f8a:	d101      	bne.n	8008f90 <__sflush_r+0x7c>
 8008f8c:	682b      	ldr	r3, [r5, #0]
 8008f8e:	b903      	cbnz	r3, 8008f92 <__sflush_r+0x7e>
 8008f90:	6560      	str	r0, [r4, #84]	; 0x54
 8008f92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f94:	602f      	str	r7, [r5, #0]
 8008f96:	2900      	cmp	r1, #0
 8008f98:	d0c9      	beq.n	8008f2e <__sflush_r+0x1a>
 8008f9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f9e:	4299      	cmp	r1, r3
 8008fa0:	d002      	beq.n	8008fa8 <__sflush_r+0x94>
 8008fa2:	4628      	mov	r0, r5
 8008fa4:	f000 f994 	bl	80092d0 <_free_r>
 8008fa8:	2000      	movs	r0, #0
 8008faa:	6360      	str	r0, [r4, #52]	; 0x34
 8008fac:	e7c0      	b.n	8008f30 <__sflush_r+0x1c>
 8008fae:	2301      	movs	r3, #1
 8008fb0:	4628      	mov	r0, r5
 8008fb2:	47b0      	blx	r6
 8008fb4:	1c41      	adds	r1, r0, #1
 8008fb6:	d1c8      	bne.n	8008f4a <__sflush_r+0x36>
 8008fb8:	682b      	ldr	r3, [r5, #0]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d0c5      	beq.n	8008f4a <__sflush_r+0x36>
 8008fbe:	2b1d      	cmp	r3, #29
 8008fc0:	d001      	beq.n	8008fc6 <__sflush_r+0xb2>
 8008fc2:	2b16      	cmp	r3, #22
 8008fc4:	d101      	bne.n	8008fca <__sflush_r+0xb6>
 8008fc6:	602f      	str	r7, [r5, #0]
 8008fc8:	e7b1      	b.n	8008f2e <__sflush_r+0x1a>
 8008fca:	89a3      	ldrh	r3, [r4, #12]
 8008fcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fd0:	81a3      	strh	r3, [r4, #12]
 8008fd2:	e7ad      	b.n	8008f30 <__sflush_r+0x1c>
 8008fd4:	690f      	ldr	r7, [r1, #16]
 8008fd6:	2f00      	cmp	r7, #0
 8008fd8:	d0a9      	beq.n	8008f2e <__sflush_r+0x1a>
 8008fda:	0793      	lsls	r3, r2, #30
 8008fdc:	680e      	ldr	r6, [r1, #0]
 8008fde:	bf08      	it	eq
 8008fe0:	694b      	ldreq	r3, [r1, #20]
 8008fe2:	600f      	str	r7, [r1, #0]
 8008fe4:	bf18      	it	ne
 8008fe6:	2300      	movne	r3, #0
 8008fe8:	eba6 0807 	sub.w	r8, r6, r7
 8008fec:	608b      	str	r3, [r1, #8]
 8008fee:	f1b8 0f00 	cmp.w	r8, #0
 8008ff2:	dd9c      	ble.n	8008f2e <__sflush_r+0x1a>
 8008ff4:	4643      	mov	r3, r8
 8008ff6:	463a      	mov	r2, r7
 8008ff8:	6a21      	ldr	r1, [r4, #32]
 8008ffa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008ffc:	4628      	mov	r0, r5
 8008ffe:	47b0      	blx	r6
 8009000:	2800      	cmp	r0, #0
 8009002:	dc06      	bgt.n	8009012 <__sflush_r+0xfe>
 8009004:	89a3      	ldrh	r3, [r4, #12]
 8009006:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800900a:	81a3      	strh	r3, [r4, #12]
 800900c:	f04f 30ff 	mov.w	r0, #4294967295
 8009010:	e78e      	b.n	8008f30 <__sflush_r+0x1c>
 8009012:	4407      	add	r7, r0
 8009014:	eba8 0800 	sub.w	r8, r8, r0
 8009018:	e7e9      	b.n	8008fee <__sflush_r+0xda>
 800901a:	bf00      	nop
 800901c:	20400001 	.word	0x20400001

08009020 <_fflush_r>:
 8009020:	b538      	push	{r3, r4, r5, lr}
 8009022:	690b      	ldr	r3, [r1, #16]
 8009024:	4605      	mov	r5, r0
 8009026:	460c      	mov	r4, r1
 8009028:	b1db      	cbz	r3, 8009062 <_fflush_r+0x42>
 800902a:	b118      	cbz	r0, 8009034 <_fflush_r+0x14>
 800902c:	6983      	ldr	r3, [r0, #24]
 800902e:	b90b      	cbnz	r3, 8009034 <_fflush_r+0x14>
 8009030:	f000 f860 	bl	80090f4 <__sinit>
 8009034:	4b0c      	ldr	r3, [pc, #48]	; (8009068 <_fflush_r+0x48>)
 8009036:	429c      	cmp	r4, r3
 8009038:	d109      	bne.n	800904e <_fflush_r+0x2e>
 800903a:	686c      	ldr	r4, [r5, #4]
 800903c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009040:	b17b      	cbz	r3, 8009062 <_fflush_r+0x42>
 8009042:	4621      	mov	r1, r4
 8009044:	4628      	mov	r0, r5
 8009046:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800904a:	f7ff bf63 	b.w	8008f14 <__sflush_r>
 800904e:	4b07      	ldr	r3, [pc, #28]	; (800906c <_fflush_r+0x4c>)
 8009050:	429c      	cmp	r4, r3
 8009052:	d101      	bne.n	8009058 <_fflush_r+0x38>
 8009054:	68ac      	ldr	r4, [r5, #8]
 8009056:	e7f1      	b.n	800903c <_fflush_r+0x1c>
 8009058:	4b05      	ldr	r3, [pc, #20]	; (8009070 <_fflush_r+0x50>)
 800905a:	429c      	cmp	r4, r3
 800905c:	bf08      	it	eq
 800905e:	68ec      	ldreq	r4, [r5, #12]
 8009060:	e7ec      	b.n	800903c <_fflush_r+0x1c>
 8009062:	2000      	movs	r0, #0
 8009064:	bd38      	pop	{r3, r4, r5, pc}
 8009066:	bf00      	nop
 8009068:	0801d084 	.word	0x0801d084
 800906c:	0801d0a4 	.word	0x0801d0a4
 8009070:	0801d064 	.word	0x0801d064

08009074 <std>:
 8009074:	2300      	movs	r3, #0
 8009076:	b510      	push	{r4, lr}
 8009078:	4604      	mov	r4, r0
 800907a:	e9c0 3300 	strd	r3, r3, [r0]
 800907e:	6083      	str	r3, [r0, #8]
 8009080:	8181      	strh	r1, [r0, #12]
 8009082:	6643      	str	r3, [r0, #100]	; 0x64
 8009084:	81c2      	strh	r2, [r0, #14]
 8009086:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800908a:	6183      	str	r3, [r0, #24]
 800908c:	4619      	mov	r1, r3
 800908e:	2208      	movs	r2, #8
 8009090:	305c      	adds	r0, #92	; 0x5c
 8009092:	f7ff fe13 	bl	8008cbc <memset>
 8009096:	4b05      	ldr	r3, [pc, #20]	; (80090ac <std+0x38>)
 8009098:	6263      	str	r3, [r4, #36]	; 0x24
 800909a:	4b05      	ldr	r3, [pc, #20]	; (80090b0 <std+0x3c>)
 800909c:	62a3      	str	r3, [r4, #40]	; 0x28
 800909e:	4b05      	ldr	r3, [pc, #20]	; (80090b4 <std+0x40>)
 80090a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80090a2:	4b05      	ldr	r3, [pc, #20]	; (80090b8 <std+0x44>)
 80090a4:	6224      	str	r4, [r4, #32]
 80090a6:	6323      	str	r3, [r4, #48]	; 0x30
 80090a8:	bd10      	pop	{r4, pc}
 80090aa:	bf00      	nop
 80090ac:	08009441 	.word	0x08009441
 80090b0:	08009463 	.word	0x08009463
 80090b4:	0800949b 	.word	0x0800949b
 80090b8:	080094bf 	.word	0x080094bf

080090bc <_cleanup_r>:
 80090bc:	4901      	ldr	r1, [pc, #4]	; (80090c4 <_cleanup_r+0x8>)
 80090be:	f000 b885 	b.w	80091cc <_fwalk_reent>
 80090c2:	bf00      	nop
 80090c4:	08009021 	.word	0x08009021

080090c8 <__sfmoreglue>:
 80090c8:	b570      	push	{r4, r5, r6, lr}
 80090ca:	1e4a      	subs	r2, r1, #1
 80090cc:	2568      	movs	r5, #104	; 0x68
 80090ce:	4355      	muls	r5, r2
 80090d0:	460e      	mov	r6, r1
 80090d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80090d6:	f000 f949 	bl	800936c <_malloc_r>
 80090da:	4604      	mov	r4, r0
 80090dc:	b140      	cbz	r0, 80090f0 <__sfmoreglue+0x28>
 80090de:	2100      	movs	r1, #0
 80090e0:	e9c0 1600 	strd	r1, r6, [r0]
 80090e4:	300c      	adds	r0, #12
 80090e6:	60a0      	str	r0, [r4, #8]
 80090e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80090ec:	f7ff fde6 	bl	8008cbc <memset>
 80090f0:	4620      	mov	r0, r4
 80090f2:	bd70      	pop	{r4, r5, r6, pc}

080090f4 <__sinit>:
 80090f4:	6983      	ldr	r3, [r0, #24]
 80090f6:	b510      	push	{r4, lr}
 80090f8:	4604      	mov	r4, r0
 80090fa:	bb33      	cbnz	r3, 800914a <__sinit+0x56>
 80090fc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8009100:	6503      	str	r3, [r0, #80]	; 0x50
 8009102:	4b12      	ldr	r3, [pc, #72]	; (800914c <__sinit+0x58>)
 8009104:	4a12      	ldr	r2, [pc, #72]	; (8009150 <__sinit+0x5c>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	6282      	str	r2, [r0, #40]	; 0x28
 800910a:	4298      	cmp	r0, r3
 800910c:	bf04      	itt	eq
 800910e:	2301      	moveq	r3, #1
 8009110:	6183      	streq	r3, [r0, #24]
 8009112:	f000 f81f 	bl	8009154 <__sfp>
 8009116:	6060      	str	r0, [r4, #4]
 8009118:	4620      	mov	r0, r4
 800911a:	f000 f81b 	bl	8009154 <__sfp>
 800911e:	60a0      	str	r0, [r4, #8]
 8009120:	4620      	mov	r0, r4
 8009122:	f000 f817 	bl	8009154 <__sfp>
 8009126:	2200      	movs	r2, #0
 8009128:	60e0      	str	r0, [r4, #12]
 800912a:	2104      	movs	r1, #4
 800912c:	6860      	ldr	r0, [r4, #4]
 800912e:	f7ff ffa1 	bl	8009074 <std>
 8009132:	2201      	movs	r2, #1
 8009134:	2109      	movs	r1, #9
 8009136:	68a0      	ldr	r0, [r4, #8]
 8009138:	f7ff ff9c 	bl	8009074 <std>
 800913c:	2202      	movs	r2, #2
 800913e:	2112      	movs	r1, #18
 8009140:	68e0      	ldr	r0, [r4, #12]
 8009142:	f7ff ff97 	bl	8009074 <std>
 8009146:	2301      	movs	r3, #1
 8009148:	61a3      	str	r3, [r4, #24]
 800914a:	bd10      	pop	{r4, pc}
 800914c:	0801d060 	.word	0x0801d060
 8009150:	080090bd 	.word	0x080090bd

08009154 <__sfp>:
 8009154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009156:	4b1b      	ldr	r3, [pc, #108]	; (80091c4 <__sfp+0x70>)
 8009158:	681e      	ldr	r6, [r3, #0]
 800915a:	69b3      	ldr	r3, [r6, #24]
 800915c:	4607      	mov	r7, r0
 800915e:	b913      	cbnz	r3, 8009166 <__sfp+0x12>
 8009160:	4630      	mov	r0, r6
 8009162:	f7ff ffc7 	bl	80090f4 <__sinit>
 8009166:	3648      	adds	r6, #72	; 0x48
 8009168:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800916c:	3b01      	subs	r3, #1
 800916e:	d503      	bpl.n	8009178 <__sfp+0x24>
 8009170:	6833      	ldr	r3, [r6, #0]
 8009172:	b133      	cbz	r3, 8009182 <__sfp+0x2e>
 8009174:	6836      	ldr	r6, [r6, #0]
 8009176:	e7f7      	b.n	8009168 <__sfp+0x14>
 8009178:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800917c:	b16d      	cbz	r5, 800919a <__sfp+0x46>
 800917e:	3468      	adds	r4, #104	; 0x68
 8009180:	e7f4      	b.n	800916c <__sfp+0x18>
 8009182:	2104      	movs	r1, #4
 8009184:	4638      	mov	r0, r7
 8009186:	f7ff ff9f 	bl	80090c8 <__sfmoreglue>
 800918a:	6030      	str	r0, [r6, #0]
 800918c:	2800      	cmp	r0, #0
 800918e:	d1f1      	bne.n	8009174 <__sfp+0x20>
 8009190:	230c      	movs	r3, #12
 8009192:	603b      	str	r3, [r7, #0]
 8009194:	4604      	mov	r4, r0
 8009196:	4620      	mov	r0, r4
 8009198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800919a:	4b0b      	ldr	r3, [pc, #44]	; (80091c8 <__sfp+0x74>)
 800919c:	6665      	str	r5, [r4, #100]	; 0x64
 800919e:	e9c4 5500 	strd	r5, r5, [r4]
 80091a2:	60a5      	str	r5, [r4, #8]
 80091a4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80091a8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80091ac:	2208      	movs	r2, #8
 80091ae:	4629      	mov	r1, r5
 80091b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80091b4:	f7ff fd82 	bl	8008cbc <memset>
 80091b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80091bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80091c0:	e7e9      	b.n	8009196 <__sfp+0x42>
 80091c2:	bf00      	nop
 80091c4:	0801d060 	.word	0x0801d060
 80091c8:	ffff0001 	.word	0xffff0001

080091cc <_fwalk_reent>:
 80091cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091d0:	4680      	mov	r8, r0
 80091d2:	4689      	mov	r9, r1
 80091d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80091d8:	2600      	movs	r6, #0
 80091da:	b914      	cbnz	r4, 80091e2 <_fwalk_reent+0x16>
 80091dc:	4630      	mov	r0, r6
 80091de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091e2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80091e6:	3f01      	subs	r7, #1
 80091e8:	d501      	bpl.n	80091ee <_fwalk_reent+0x22>
 80091ea:	6824      	ldr	r4, [r4, #0]
 80091ec:	e7f5      	b.n	80091da <_fwalk_reent+0xe>
 80091ee:	89ab      	ldrh	r3, [r5, #12]
 80091f0:	2b01      	cmp	r3, #1
 80091f2:	d907      	bls.n	8009204 <_fwalk_reent+0x38>
 80091f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80091f8:	3301      	adds	r3, #1
 80091fa:	d003      	beq.n	8009204 <_fwalk_reent+0x38>
 80091fc:	4629      	mov	r1, r5
 80091fe:	4640      	mov	r0, r8
 8009200:	47c8      	blx	r9
 8009202:	4306      	orrs	r6, r0
 8009204:	3568      	adds	r5, #104	; 0x68
 8009206:	e7ee      	b.n	80091e6 <_fwalk_reent+0x1a>

08009208 <__swhatbuf_r>:
 8009208:	b570      	push	{r4, r5, r6, lr}
 800920a:	460e      	mov	r6, r1
 800920c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009210:	2900      	cmp	r1, #0
 8009212:	b096      	sub	sp, #88	; 0x58
 8009214:	4614      	mov	r4, r2
 8009216:	461d      	mov	r5, r3
 8009218:	da07      	bge.n	800922a <__swhatbuf_r+0x22>
 800921a:	2300      	movs	r3, #0
 800921c:	602b      	str	r3, [r5, #0]
 800921e:	89b3      	ldrh	r3, [r6, #12]
 8009220:	061a      	lsls	r2, r3, #24
 8009222:	d410      	bmi.n	8009246 <__swhatbuf_r+0x3e>
 8009224:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009228:	e00e      	b.n	8009248 <__swhatbuf_r+0x40>
 800922a:	466a      	mov	r2, sp
 800922c:	f000 f96e 	bl	800950c <_fstat_r>
 8009230:	2800      	cmp	r0, #0
 8009232:	dbf2      	blt.n	800921a <__swhatbuf_r+0x12>
 8009234:	9a01      	ldr	r2, [sp, #4]
 8009236:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800923a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800923e:	425a      	negs	r2, r3
 8009240:	415a      	adcs	r2, r3
 8009242:	602a      	str	r2, [r5, #0]
 8009244:	e7ee      	b.n	8009224 <__swhatbuf_r+0x1c>
 8009246:	2340      	movs	r3, #64	; 0x40
 8009248:	2000      	movs	r0, #0
 800924a:	6023      	str	r3, [r4, #0]
 800924c:	b016      	add	sp, #88	; 0x58
 800924e:	bd70      	pop	{r4, r5, r6, pc}

08009250 <__smakebuf_r>:
 8009250:	898b      	ldrh	r3, [r1, #12]
 8009252:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009254:	079d      	lsls	r5, r3, #30
 8009256:	4606      	mov	r6, r0
 8009258:	460c      	mov	r4, r1
 800925a:	d507      	bpl.n	800926c <__smakebuf_r+0x1c>
 800925c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009260:	6023      	str	r3, [r4, #0]
 8009262:	6123      	str	r3, [r4, #16]
 8009264:	2301      	movs	r3, #1
 8009266:	6163      	str	r3, [r4, #20]
 8009268:	b002      	add	sp, #8
 800926a:	bd70      	pop	{r4, r5, r6, pc}
 800926c:	ab01      	add	r3, sp, #4
 800926e:	466a      	mov	r2, sp
 8009270:	f7ff ffca 	bl	8009208 <__swhatbuf_r>
 8009274:	9900      	ldr	r1, [sp, #0]
 8009276:	4605      	mov	r5, r0
 8009278:	4630      	mov	r0, r6
 800927a:	f000 f877 	bl	800936c <_malloc_r>
 800927e:	b948      	cbnz	r0, 8009294 <__smakebuf_r+0x44>
 8009280:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009284:	059a      	lsls	r2, r3, #22
 8009286:	d4ef      	bmi.n	8009268 <__smakebuf_r+0x18>
 8009288:	f023 0303 	bic.w	r3, r3, #3
 800928c:	f043 0302 	orr.w	r3, r3, #2
 8009290:	81a3      	strh	r3, [r4, #12]
 8009292:	e7e3      	b.n	800925c <__smakebuf_r+0xc>
 8009294:	4b0d      	ldr	r3, [pc, #52]	; (80092cc <__smakebuf_r+0x7c>)
 8009296:	62b3      	str	r3, [r6, #40]	; 0x28
 8009298:	89a3      	ldrh	r3, [r4, #12]
 800929a:	6020      	str	r0, [r4, #0]
 800929c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092a0:	81a3      	strh	r3, [r4, #12]
 80092a2:	9b00      	ldr	r3, [sp, #0]
 80092a4:	6163      	str	r3, [r4, #20]
 80092a6:	9b01      	ldr	r3, [sp, #4]
 80092a8:	6120      	str	r0, [r4, #16]
 80092aa:	b15b      	cbz	r3, 80092c4 <__smakebuf_r+0x74>
 80092ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092b0:	4630      	mov	r0, r6
 80092b2:	f000 f93d 	bl	8009530 <_isatty_r>
 80092b6:	b128      	cbz	r0, 80092c4 <__smakebuf_r+0x74>
 80092b8:	89a3      	ldrh	r3, [r4, #12]
 80092ba:	f023 0303 	bic.w	r3, r3, #3
 80092be:	f043 0301 	orr.w	r3, r3, #1
 80092c2:	81a3      	strh	r3, [r4, #12]
 80092c4:	89a3      	ldrh	r3, [r4, #12]
 80092c6:	431d      	orrs	r5, r3
 80092c8:	81a5      	strh	r5, [r4, #12]
 80092ca:	e7cd      	b.n	8009268 <__smakebuf_r+0x18>
 80092cc:	080090bd 	.word	0x080090bd

080092d0 <_free_r>:
 80092d0:	b538      	push	{r3, r4, r5, lr}
 80092d2:	4605      	mov	r5, r0
 80092d4:	2900      	cmp	r1, #0
 80092d6:	d045      	beq.n	8009364 <_free_r+0x94>
 80092d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092dc:	1f0c      	subs	r4, r1, #4
 80092de:	2b00      	cmp	r3, #0
 80092e0:	bfb8      	it	lt
 80092e2:	18e4      	addlt	r4, r4, r3
 80092e4:	f000 f946 	bl	8009574 <__malloc_lock>
 80092e8:	4a1f      	ldr	r2, [pc, #124]	; (8009368 <_free_r+0x98>)
 80092ea:	6813      	ldr	r3, [r2, #0]
 80092ec:	4610      	mov	r0, r2
 80092ee:	b933      	cbnz	r3, 80092fe <_free_r+0x2e>
 80092f0:	6063      	str	r3, [r4, #4]
 80092f2:	6014      	str	r4, [r2, #0]
 80092f4:	4628      	mov	r0, r5
 80092f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092fa:	f000 b93c 	b.w	8009576 <__malloc_unlock>
 80092fe:	42a3      	cmp	r3, r4
 8009300:	d90c      	bls.n	800931c <_free_r+0x4c>
 8009302:	6821      	ldr	r1, [r4, #0]
 8009304:	1862      	adds	r2, r4, r1
 8009306:	4293      	cmp	r3, r2
 8009308:	bf04      	itt	eq
 800930a:	681a      	ldreq	r2, [r3, #0]
 800930c:	685b      	ldreq	r3, [r3, #4]
 800930e:	6063      	str	r3, [r4, #4]
 8009310:	bf04      	itt	eq
 8009312:	1852      	addeq	r2, r2, r1
 8009314:	6022      	streq	r2, [r4, #0]
 8009316:	6004      	str	r4, [r0, #0]
 8009318:	e7ec      	b.n	80092f4 <_free_r+0x24>
 800931a:	4613      	mov	r3, r2
 800931c:	685a      	ldr	r2, [r3, #4]
 800931e:	b10a      	cbz	r2, 8009324 <_free_r+0x54>
 8009320:	42a2      	cmp	r2, r4
 8009322:	d9fa      	bls.n	800931a <_free_r+0x4a>
 8009324:	6819      	ldr	r1, [r3, #0]
 8009326:	1858      	adds	r0, r3, r1
 8009328:	42a0      	cmp	r0, r4
 800932a:	d10b      	bne.n	8009344 <_free_r+0x74>
 800932c:	6820      	ldr	r0, [r4, #0]
 800932e:	4401      	add	r1, r0
 8009330:	1858      	adds	r0, r3, r1
 8009332:	4282      	cmp	r2, r0
 8009334:	6019      	str	r1, [r3, #0]
 8009336:	d1dd      	bne.n	80092f4 <_free_r+0x24>
 8009338:	6810      	ldr	r0, [r2, #0]
 800933a:	6852      	ldr	r2, [r2, #4]
 800933c:	605a      	str	r2, [r3, #4]
 800933e:	4401      	add	r1, r0
 8009340:	6019      	str	r1, [r3, #0]
 8009342:	e7d7      	b.n	80092f4 <_free_r+0x24>
 8009344:	d902      	bls.n	800934c <_free_r+0x7c>
 8009346:	230c      	movs	r3, #12
 8009348:	602b      	str	r3, [r5, #0]
 800934a:	e7d3      	b.n	80092f4 <_free_r+0x24>
 800934c:	6820      	ldr	r0, [r4, #0]
 800934e:	1821      	adds	r1, r4, r0
 8009350:	428a      	cmp	r2, r1
 8009352:	bf04      	itt	eq
 8009354:	6811      	ldreq	r1, [r2, #0]
 8009356:	6852      	ldreq	r2, [r2, #4]
 8009358:	6062      	str	r2, [r4, #4]
 800935a:	bf04      	itt	eq
 800935c:	1809      	addeq	r1, r1, r0
 800935e:	6021      	streq	r1, [r4, #0]
 8009360:	605c      	str	r4, [r3, #4]
 8009362:	e7c7      	b.n	80092f4 <_free_r+0x24>
 8009364:	bd38      	pop	{r3, r4, r5, pc}
 8009366:	bf00      	nop
 8009368:	20000200 	.word	0x20000200

0800936c <_malloc_r>:
 800936c:	b570      	push	{r4, r5, r6, lr}
 800936e:	1ccd      	adds	r5, r1, #3
 8009370:	f025 0503 	bic.w	r5, r5, #3
 8009374:	3508      	adds	r5, #8
 8009376:	2d0c      	cmp	r5, #12
 8009378:	bf38      	it	cc
 800937a:	250c      	movcc	r5, #12
 800937c:	2d00      	cmp	r5, #0
 800937e:	4606      	mov	r6, r0
 8009380:	db01      	blt.n	8009386 <_malloc_r+0x1a>
 8009382:	42a9      	cmp	r1, r5
 8009384:	d903      	bls.n	800938e <_malloc_r+0x22>
 8009386:	230c      	movs	r3, #12
 8009388:	6033      	str	r3, [r6, #0]
 800938a:	2000      	movs	r0, #0
 800938c:	bd70      	pop	{r4, r5, r6, pc}
 800938e:	f000 f8f1 	bl	8009574 <__malloc_lock>
 8009392:	4a21      	ldr	r2, [pc, #132]	; (8009418 <_malloc_r+0xac>)
 8009394:	6814      	ldr	r4, [r2, #0]
 8009396:	4621      	mov	r1, r4
 8009398:	b991      	cbnz	r1, 80093c0 <_malloc_r+0x54>
 800939a:	4c20      	ldr	r4, [pc, #128]	; (800941c <_malloc_r+0xb0>)
 800939c:	6823      	ldr	r3, [r4, #0]
 800939e:	b91b      	cbnz	r3, 80093a8 <_malloc_r+0x3c>
 80093a0:	4630      	mov	r0, r6
 80093a2:	f000 f83d 	bl	8009420 <_sbrk_r>
 80093a6:	6020      	str	r0, [r4, #0]
 80093a8:	4629      	mov	r1, r5
 80093aa:	4630      	mov	r0, r6
 80093ac:	f000 f838 	bl	8009420 <_sbrk_r>
 80093b0:	1c43      	adds	r3, r0, #1
 80093b2:	d124      	bne.n	80093fe <_malloc_r+0x92>
 80093b4:	230c      	movs	r3, #12
 80093b6:	6033      	str	r3, [r6, #0]
 80093b8:	4630      	mov	r0, r6
 80093ba:	f000 f8dc 	bl	8009576 <__malloc_unlock>
 80093be:	e7e4      	b.n	800938a <_malloc_r+0x1e>
 80093c0:	680b      	ldr	r3, [r1, #0]
 80093c2:	1b5b      	subs	r3, r3, r5
 80093c4:	d418      	bmi.n	80093f8 <_malloc_r+0x8c>
 80093c6:	2b0b      	cmp	r3, #11
 80093c8:	d90f      	bls.n	80093ea <_malloc_r+0x7e>
 80093ca:	600b      	str	r3, [r1, #0]
 80093cc:	50cd      	str	r5, [r1, r3]
 80093ce:	18cc      	adds	r4, r1, r3
 80093d0:	4630      	mov	r0, r6
 80093d2:	f000 f8d0 	bl	8009576 <__malloc_unlock>
 80093d6:	f104 000b 	add.w	r0, r4, #11
 80093da:	1d23      	adds	r3, r4, #4
 80093dc:	f020 0007 	bic.w	r0, r0, #7
 80093e0:	1ac3      	subs	r3, r0, r3
 80093e2:	d0d3      	beq.n	800938c <_malloc_r+0x20>
 80093e4:	425a      	negs	r2, r3
 80093e6:	50e2      	str	r2, [r4, r3]
 80093e8:	e7d0      	b.n	800938c <_malloc_r+0x20>
 80093ea:	428c      	cmp	r4, r1
 80093ec:	684b      	ldr	r3, [r1, #4]
 80093ee:	bf16      	itet	ne
 80093f0:	6063      	strne	r3, [r4, #4]
 80093f2:	6013      	streq	r3, [r2, #0]
 80093f4:	460c      	movne	r4, r1
 80093f6:	e7eb      	b.n	80093d0 <_malloc_r+0x64>
 80093f8:	460c      	mov	r4, r1
 80093fa:	6849      	ldr	r1, [r1, #4]
 80093fc:	e7cc      	b.n	8009398 <_malloc_r+0x2c>
 80093fe:	1cc4      	adds	r4, r0, #3
 8009400:	f024 0403 	bic.w	r4, r4, #3
 8009404:	42a0      	cmp	r0, r4
 8009406:	d005      	beq.n	8009414 <_malloc_r+0xa8>
 8009408:	1a21      	subs	r1, r4, r0
 800940a:	4630      	mov	r0, r6
 800940c:	f000 f808 	bl	8009420 <_sbrk_r>
 8009410:	3001      	adds	r0, #1
 8009412:	d0cf      	beq.n	80093b4 <_malloc_r+0x48>
 8009414:	6025      	str	r5, [r4, #0]
 8009416:	e7db      	b.n	80093d0 <_malloc_r+0x64>
 8009418:	20000200 	.word	0x20000200
 800941c:	20000204 	.word	0x20000204

08009420 <_sbrk_r>:
 8009420:	b538      	push	{r3, r4, r5, lr}
 8009422:	4c06      	ldr	r4, [pc, #24]	; (800943c <_sbrk_r+0x1c>)
 8009424:	2300      	movs	r3, #0
 8009426:	4605      	mov	r5, r0
 8009428:	4608      	mov	r0, r1
 800942a:	6023      	str	r3, [r4, #0]
 800942c:	f7ff f922 	bl	8008674 <_sbrk>
 8009430:	1c43      	adds	r3, r0, #1
 8009432:	d102      	bne.n	800943a <_sbrk_r+0x1a>
 8009434:	6823      	ldr	r3, [r4, #0]
 8009436:	b103      	cbz	r3, 800943a <_sbrk_r+0x1a>
 8009438:	602b      	str	r3, [r5, #0]
 800943a:	bd38      	pop	{r3, r4, r5, pc}
 800943c:	200005b8 	.word	0x200005b8

08009440 <__sread>:
 8009440:	b510      	push	{r4, lr}
 8009442:	460c      	mov	r4, r1
 8009444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009448:	f000 f896 	bl	8009578 <_read_r>
 800944c:	2800      	cmp	r0, #0
 800944e:	bfab      	itete	ge
 8009450:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009452:	89a3      	ldrhlt	r3, [r4, #12]
 8009454:	181b      	addge	r3, r3, r0
 8009456:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800945a:	bfac      	ite	ge
 800945c:	6563      	strge	r3, [r4, #84]	; 0x54
 800945e:	81a3      	strhlt	r3, [r4, #12]
 8009460:	bd10      	pop	{r4, pc}

08009462 <__swrite>:
 8009462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009466:	461f      	mov	r7, r3
 8009468:	898b      	ldrh	r3, [r1, #12]
 800946a:	05db      	lsls	r3, r3, #23
 800946c:	4605      	mov	r5, r0
 800946e:	460c      	mov	r4, r1
 8009470:	4616      	mov	r6, r2
 8009472:	d505      	bpl.n	8009480 <__swrite+0x1e>
 8009474:	2302      	movs	r3, #2
 8009476:	2200      	movs	r2, #0
 8009478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800947c:	f000 f868 	bl	8009550 <_lseek_r>
 8009480:	89a3      	ldrh	r3, [r4, #12]
 8009482:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009486:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800948a:	81a3      	strh	r3, [r4, #12]
 800948c:	4632      	mov	r2, r6
 800948e:	463b      	mov	r3, r7
 8009490:	4628      	mov	r0, r5
 8009492:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009496:	f000 b817 	b.w	80094c8 <_write_r>

0800949a <__sseek>:
 800949a:	b510      	push	{r4, lr}
 800949c:	460c      	mov	r4, r1
 800949e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094a2:	f000 f855 	bl	8009550 <_lseek_r>
 80094a6:	1c43      	adds	r3, r0, #1
 80094a8:	89a3      	ldrh	r3, [r4, #12]
 80094aa:	bf15      	itete	ne
 80094ac:	6560      	strne	r0, [r4, #84]	; 0x54
 80094ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80094b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80094b6:	81a3      	strheq	r3, [r4, #12]
 80094b8:	bf18      	it	ne
 80094ba:	81a3      	strhne	r3, [r4, #12]
 80094bc:	bd10      	pop	{r4, pc}

080094be <__sclose>:
 80094be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094c2:	f000 b813 	b.w	80094ec <_close_r>
	...

080094c8 <_write_r>:
 80094c8:	b538      	push	{r3, r4, r5, lr}
 80094ca:	4c07      	ldr	r4, [pc, #28]	; (80094e8 <_write_r+0x20>)
 80094cc:	4605      	mov	r5, r0
 80094ce:	4608      	mov	r0, r1
 80094d0:	4611      	mov	r1, r2
 80094d2:	2200      	movs	r2, #0
 80094d4:	6022      	str	r2, [r4, #0]
 80094d6:	461a      	mov	r2, r3
 80094d8:	f7fd ff29 	bl	800732e <_write>
 80094dc:	1c43      	adds	r3, r0, #1
 80094de:	d102      	bne.n	80094e6 <_write_r+0x1e>
 80094e0:	6823      	ldr	r3, [r4, #0]
 80094e2:	b103      	cbz	r3, 80094e6 <_write_r+0x1e>
 80094e4:	602b      	str	r3, [r5, #0]
 80094e6:	bd38      	pop	{r3, r4, r5, pc}
 80094e8:	200005b8 	.word	0x200005b8

080094ec <_close_r>:
 80094ec:	b538      	push	{r3, r4, r5, lr}
 80094ee:	4c06      	ldr	r4, [pc, #24]	; (8009508 <_close_r+0x1c>)
 80094f0:	2300      	movs	r3, #0
 80094f2:	4605      	mov	r5, r0
 80094f4:	4608      	mov	r0, r1
 80094f6:	6023      	str	r3, [r4, #0]
 80094f8:	f7ff f887 	bl	800860a <_close>
 80094fc:	1c43      	adds	r3, r0, #1
 80094fe:	d102      	bne.n	8009506 <_close_r+0x1a>
 8009500:	6823      	ldr	r3, [r4, #0]
 8009502:	b103      	cbz	r3, 8009506 <_close_r+0x1a>
 8009504:	602b      	str	r3, [r5, #0]
 8009506:	bd38      	pop	{r3, r4, r5, pc}
 8009508:	200005b8 	.word	0x200005b8

0800950c <_fstat_r>:
 800950c:	b538      	push	{r3, r4, r5, lr}
 800950e:	4c07      	ldr	r4, [pc, #28]	; (800952c <_fstat_r+0x20>)
 8009510:	2300      	movs	r3, #0
 8009512:	4605      	mov	r5, r0
 8009514:	4608      	mov	r0, r1
 8009516:	4611      	mov	r1, r2
 8009518:	6023      	str	r3, [r4, #0]
 800951a:	f7ff f882 	bl	8008622 <_fstat>
 800951e:	1c43      	adds	r3, r0, #1
 8009520:	d102      	bne.n	8009528 <_fstat_r+0x1c>
 8009522:	6823      	ldr	r3, [r4, #0]
 8009524:	b103      	cbz	r3, 8009528 <_fstat_r+0x1c>
 8009526:	602b      	str	r3, [r5, #0]
 8009528:	bd38      	pop	{r3, r4, r5, pc}
 800952a:	bf00      	nop
 800952c:	200005b8 	.word	0x200005b8

08009530 <_isatty_r>:
 8009530:	b538      	push	{r3, r4, r5, lr}
 8009532:	4c06      	ldr	r4, [pc, #24]	; (800954c <_isatty_r+0x1c>)
 8009534:	2300      	movs	r3, #0
 8009536:	4605      	mov	r5, r0
 8009538:	4608      	mov	r0, r1
 800953a:	6023      	str	r3, [r4, #0]
 800953c:	f7ff f881 	bl	8008642 <_isatty>
 8009540:	1c43      	adds	r3, r0, #1
 8009542:	d102      	bne.n	800954a <_isatty_r+0x1a>
 8009544:	6823      	ldr	r3, [r4, #0]
 8009546:	b103      	cbz	r3, 800954a <_isatty_r+0x1a>
 8009548:	602b      	str	r3, [r5, #0]
 800954a:	bd38      	pop	{r3, r4, r5, pc}
 800954c:	200005b8 	.word	0x200005b8

08009550 <_lseek_r>:
 8009550:	b538      	push	{r3, r4, r5, lr}
 8009552:	4c07      	ldr	r4, [pc, #28]	; (8009570 <_lseek_r+0x20>)
 8009554:	4605      	mov	r5, r0
 8009556:	4608      	mov	r0, r1
 8009558:	4611      	mov	r1, r2
 800955a:	2200      	movs	r2, #0
 800955c:	6022      	str	r2, [r4, #0]
 800955e:	461a      	mov	r2, r3
 8009560:	f7ff f87a 	bl	8008658 <_lseek>
 8009564:	1c43      	adds	r3, r0, #1
 8009566:	d102      	bne.n	800956e <_lseek_r+0x1e>
 8009568:	6823      	ldr	r3, [r4, #0]
 800956a:	b103      	cbz	r3, 800956e <_lseek_r+0x1e>
 800956c:	602b      	str	r3, [r5, #0]
 800956e:	bd38      	pop	{r3, r4, r5, pc}
 8009570:	200005b8 	.word	0x200005b8

08009574 <__malloc_lock>:
 8009574:	4770      	bx	lr

08009576 <__malloc_unlock>:
 8009576:	4770      	bx	lr

08009578 <_read_r>:
 8009578:	b538      	push	{r3, r4, r5, lr}
 800957a:	4c07      	ldr	r4, [pc, #28]	; (8009598 <_read_r+0x20>)
 800957c:	4605      	mov	r5, r0
 800957e:	4608      	mov	r0, r1
 8009580:	4611      	mov	r1, r2
 8009582:	2200      	movs	r2, #0
 8009584:	6022      	str	r2, [r4, #0]
 8009586:	461a      	mov	r2, r3
 8009588:	f7ff f822 	bl	80085d0 <_read>
 800958c:	1c43      	adds	r3, r0, #1
 800958e:	d102      	bne.n	8009596 <_read_r+0x1e>
 8009590:	6823      	ldr	r3, [r4, #0]
 8009592:	b103      	cbz	r3, 8009596 <_read_r+0x1e>
 8009594:	602b      	str	r3, [r5, #0]
 8009596:	bd38      	pop	{r3, r4, r5, pc}
 8009598:	200005b8 	.word	0x200005b8

0800959c <fmodf>:
 800959c:	b5d0      	push	{r4, r6, r7, lr}
 800959e:	ed2d 8b02 	vpush	{d8}
 80095a2:	b08a      	sub	sp, #40	; 0x28
 80095a4:	eef0 8a40 	vmov.f32	s17, s0
 80095a8:	eeb0 8a60 	vmov.f32	s16, s1
 80095ac:	f000 f852 	bl	8009654 <__ieee754_fmodf>
 80095b0:	4b26      	ldr	r3, [pc, #152]	; (800964c <fmodf+0xb0>)
 80095b2:	f993 4000 	ldrsb.w	r4, [r3]
 80095b6:	1c63      	adds	r3, r4, #1
 80095b8:	d035      	beq.n	8009626 <fmodf+0x8a>
 80095ba:	eeb4 8a48 	vcmp.f32	s16, s16
 80095be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095c2:	d630      	bvs.n	8009626 <fmodf+0x8a>
 80095c4:	eef4 8a68 	vcmp.f32	s17, s17
 80095c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095cc:	d62b      	bvs.n	8009626 <fmodf+0x8a>
 80095ce:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80095d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095d6:	d126      	bne.n	8009626 <fmodf+0x8a>
 80095d8:	2301      	movs	r3, #1
 80095da:	9300      	str	r3, [sp, #0]
 80095dc:	4b1c      	ldr	r3, [pc, #112]	; (8009650 <fmodf+0xb4>)
 80095de:	9301      	str	r3, [sp, #4]
 80095e0:	ee18 0a90 	vmov	r0, s17
 80095e4:	2300      	movs	r3, #0
 80095e6:	9308      	str	r3, [sp, #32]
 80095e8:	f7f6 ff72 	bl	80004d0 <__aeabi_f2d>
 80095ec:	4606      	mov	r6, r0
 80095ee:	460f      	mov	r7, r1
 80095f0:	ee18 0a10 	vmov	r0, s16
 80095f4:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80095f8:	f7f6 ff6a 	bl	80004d0 <__aeabi_f2d>
 80095fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009600:	b9ac      	cbnz	r4, 800962e <fmodf+0x92>
 8009602:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009606:	4668      	mov	r0, sp
 8009608:	f000 f8ac 	bl	8009764 <matherr>
 800960c:	b1c8      	cbz	r0, 8009642 <fmodf+0xa6>
 800960e:	9b08      	ldr	r3, [sp, #32]
 8009610:	b11b      	cbz	r3, 800961a <fmodf+0x7e>
 8009612:	f7ff fb29 	bl	8008c68 <__errno>
 8009616:	9b08      	ldr	r3, [sp, #32]
 8009618:	6003      	str	r3, [r0, #0]
 800961a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800961e:	f7f7 fa49 	bl	8000ab4 <__aeabi_d2f>
 8009622:	ee00 0a10 	vmov	s0, r0
 8009626:	b00a      	add	sp, #40	; 0x28
 8009628:	ecbd 8b02 	vpop	{d8}
 800962c:	bdd0      	pop	{r4, r6, r7, pc}
 800962e:	2200      	movs	r2, #0
 8009630:	2300      	movs	r3, #0
 8009632:	4610      	mov	r0, r2
 8009634:	4619      	mov	r1, r3
 8009636:	f7f7 f8cd 	bl	80007d4 <__aeabi_ddiv>
 800963a:	2c02      	cmp	r4, #2
 800963c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009640:	d1e1      	bne.n	8009606 <fmodf+0x6a>
 8009642:	f7ff fb11 	bl	8008c68 <__errno>
 8009646:	2321      	movs	r3, #33	; 0x21
 8009648:	6003      	str	r3, [r0, #0]
 800964a:	e7e0      	b.n	800960e <fmodf+0x72>
 800964c:	200000a0 	.word	0x200000a0
 8009650:	0801d0c4 	.word	0x0801d0c4

08009654 <__ieee754_fmodf>:
 8009654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009656:	ee10 6a90 	vmov	r6, s1
 800965a:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 800965e:	ee10 3a10 	vmov	r3, s0
 8009662:	d009      	beq.n	8009678 <__ieee754_fmodf+0x24>
 8009664:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009668:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800966c:	ee10 7a10 	vmov	r7, s0
 8009670:	da02      	bge.n	8009678 <__ieee754_fmodf+0x24>
 8009672:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8009676:	dd0a      	ble.n	800968e <__ieee754_fmodf+0x3a>
 8009678:	ee07 3a90 	vmov	s15, r3
 800967c:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8009680:	eec0 7aa0 	vdiv.f32	s15, s1, s1
 8009684:	ee17 3a90 	vmov	r3, s15
 8009688:	ee00 3a10 	vmov	s0, r3
 800968c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800968e:	42a9      	cmp	r1, r5
 8009690:	dbfa      	blt.n	8009688 <__ieee754_fmodf+0x34>
 8009692:	f003 4400 	and.w	r4, r3, #2147483648	; 0x80000000
 8009696:	d105      	bne.n	80096a4 <__ieee754_fmodf+0x50>
 8009698:	4a30      	ldr	r2, [pc, #192]	; (800975c <__ieee754_fmodf+0x108>)
 800969a:	0fe3      	lsrs	r3, r4, #31
 800969c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	e7f1      	b.n	8009688 <__ieee754_fmodf+0x34>
 80096a4:	4b2e      	ldr	r3, [pc, #184]	; (8009760 <__ieee754_fmodf+0x10c>)
 80096a6:	4299      	cmp	r1, r3
 80096a8:	dc3e      	bgt.n	8009728 <__ieee754_fmodf+0xd4>
 80096aa:	020a      	lsls	r2, r1, #8
 80096ac:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 80096b0:	2a00      	cmp	r2, #0
 80096b2:	dc36      	bgt.n	8009722 <__ieee754_fmodf+0xce>
 80096b4:	429d      	cmp	r5, r3
 80096b6:	dc3a      	bgt.n	800972e <__ieee754_fmodf+0xda>
 80096b8:	022b      	lsls	r3, r5, #8
 80096ba:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 80096be:	005b      	lsls	r3, r3, #1
 80096c0:	f102 32ff 	add.w	r2, r2, #4294967295
 80096c4:	d5fb      	bpl.n	80096be <__ieee754_fmodf+0x6a>
 80096c6:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 80096ca:	bfbb      	ittet	lt
 80096cc:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 80096d0:	1a1b      	sublt	r3, r3, r0
 80096d2:	f3c7 0116 	ubfxge	r1, r7, #0, #23
 80096d6:	4099      	lsllt	r1, r3
 80096d8:	bfa8      	it	ge
 80096da:	f441 0100 	orrge.w	r1, r1, #8388608	; 0x800000
 80096de:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 80096e2:	bfb5      	itete	lt
 80096e4:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 80096e8:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 80096ec:	1a9b      	sublt	r3, r3, r2
 80096ee:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 80096f2:	bfb8      	it	lt
 80096f4:	409d      	lsllt	r5, r3
 80096f6:	1a80      	subs	r0, r0, r2
 80096f8:	1b4b      	subs	r3, r1, r5
 80096fa:	b9d8      	cbnz	r0, 8009734 <__ieee754_fmodf+0xe0>
 80096fc:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 8009700:	bf28      	it	cs
 8009702:	460b      	movcs	r3, r1
 8009704:	2b00      	cmp	r3, #0
 8009706:	d0c7      	beq.n	8009698 <__ieee754_fmodf+0x44>
 8009708:	4915      	ldr	r1, [pc, #84]	; (8009760 <__ieee754_fmodf+0x10c>)
 800970a:	428b      	cmp	r3, r1
 800970c:	dd1a      	ble.n	8009744 <__ieee754_fmodf+0xf0>
 800970e:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 8009712:	db1a      	blt.n	800974a <__ieee754_fmodf+0xf6>
 8009714:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8009718:	4323      	orrs	r3, r4
 800971a:	327f      	adds	r2, #127	; 0x7f
 800971c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8009720:	e7b2      	b.n	8009688 <__ieee754_fmodf+0x34>
 8009722:	3801      	subs	r0, #1
 8009724:	0052      	lsls	r2, r2, #1
 8009726:	e7c3      	b.n	80096b0 <__ieee754_fmodf+0x5c>
 8009728:	15c8      	asrs	r0, r1, #23
 800972a:	387f      	subs	r0, #127	; 0x7f
 800972c:	e7c2      	b.n	80096b4 <__ieee754_fmodf+0x60>
 800972e:	15ea      	asrs	r2, r5, #23
 8009730:	3a7f      	subs	r2, #127	; 0x7f
 8009732:	e7c8      	b.n	80096c6 <__ieee754_fmodf+0x72>
 8009734:	2b00      	cmp	r3, #0
 8009736:	da02      	bge.n	800973e <__ieee754_fmodf+0xea>
 8009738:	0049      	lsls	r1, r1, #1
 800973a:	3801      	subs	r0, #1
 800973c:	e7dc      	b.n	80096f8 <__ieee754_fmodf+0xa4>
 800973e:	d0ab      	beq.n	8009698 <__ieee754_fmodf+0x44>
 8009740:	0059      	lsls	r1, r3, #1
 8009742:	e7fa      	b.n	800973a <__ieee754_fmodf+0xe6>
 8009744:	005b      	lsls	r3, r3, #1
 8009746:	3a01      	subs	r2, #1
 8009748:	e7df      	b.n	800970a <__ieee754_fmodf+0xb6>
 800974a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800974e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009752:	3282      	adds	r2, #130	; 0x82
 8009754:	4113      	asrs	r3, r2
 8009756:	4323      	orrs	r3, r4
 8009758:	e796      	b.n	8009688 <__ieee754_fmodf+0x34>
 800975a:	bf00      	nop
 800975c:	0801d0cc 	.word	0x0801d0cc
 8009760:	007fffff 	.word	0x007fffff

08009764 <matherr>:
 8009764:	2000      	movs	r0, #0
 8009766:	4770      	bx	lr

08009768 <_init>:
 8009768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800976a:	bf00      	nop
 800976c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800976e:	bc08      	pop	{r3}
 8009770:	469e      	mov	lr, r3
 8009772:	4770      	bx	lr

08009774 <_fini>:
 8009774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009776:	bf00      	nop
 8009778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800977a:	bc08      	pop	{r3}
 800977c:	469e      	mov	lr, r3
 800977e:	4770      	bx	lr
