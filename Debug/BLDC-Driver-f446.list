
BLDC-Driver-f446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c64  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000139bc  08009e34  08009e34  00019e34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d7f0  0801d7f0  000300a4  2**0
                  CONTENTS
  4 .ARM          00000008  0801d7f0  0801d7f0  0002d7f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d7f8  0801d7f8  000300a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d7f8  0801d7f8  0002d7f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d7fc  0801d7fc  0002d7fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  0801d800  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000518  200000a4  0801d8a4  000300a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005bc  0801d8a4  000305bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a061  00000000  00000000  000300d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000039c2  00000000  00000000  0004a135  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001360  00000000  00000000  0004daf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001188  00000000  00000000  0004ee58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025bce  00000000  00000000  0004ffe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011e8f  00000000  00000000  00075bae  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d9e69  00000000  00000000  00087a3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001618a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000580c  00000000  00000000  00161924  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000a4 	.word	0x200000a4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009e1c 	.word	0x08009e1c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a8 	.word	0x200000a8
 800020c:	08009e1c 	.word	0x08009e1c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2f>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b64:	bf24      	itt	cs
 8000b66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6e:	d90d      	bls.n	8000b8c <__aeabi_d2f+0x30>
 8000b70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b84:	bf08      	it	eq
 8000b86:	f020 0001 	biceq.w	r0, r0, #1
 8000b8a:	4770      	bx	lr
 8000b8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b90:	d121      	bne.n	8000bd6 <__aeabi_d2f+0x7a>
 8000b92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b96:	bfbc      	itt	lt
 8000b98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	4770      	bxlt	lr
 8000b9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba6:	f1c2 0218 	rsb	r2, r2, #24
 8000baa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	f040 0001 	orrne.w	r0, r0, #1
 8000bbc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc8:	ea40 000c 	orr.w	r0, r0, ip
 8000bcc:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd4:	e7cc      	b.n	8000b70 <__aeabi_d2f+0x14>
 8000bd6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bda:	d107      	bne.n	8000bec <__aeabi_d2f+0x90>
 8000bdc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be0:	bf1e      	ittt	ne
 8000be2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bea:	4770      	bxne	lr
 8000bec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <__aeabi_uldivmod>:
 8000bfc:	b953      	cbnz	r3, 8000c14 <__aeabi_uldivmod+0x18>
 8000bfe:	b94a      	cbnz	r2, 8000c14 <__aeabi_uldivmod+0x18>
 8000c00:	2900      	cmp	r1, #0
 8000c02:	bf08      	it	eq
 8000c04:	2800      	cmpeq	r0, #0
 8000c06:	bf1c      	itt	ne
 8000c08:	f04f 31ff 	movne.w	r1, #4294967295
 8000c0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c10:	f000 b972 	b.w	8000ef8 <__aeabi_idiv0>
 8000c14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c1c:	f000 f806 	bl	8000c2c <__udivmoddi4>
 8000c20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c28:	b004      	add	sp, #16
 8000c2a:	4770      	bx	lr

08000c2c <__udivmoddi4>:
 8000c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c30:	9e08      	ldr	r6, [sp, #32]
 8000c32:	4604      	mov	r4, r0
 8000c34:	4688      	mov	r8, r1
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d14b      	bne.n	8000cd2 <__udivmoddi4+0xa6>
 8000c3a:	428a      	cmp	r2, r1
 8000c3c:	4615      	mov	r5, r2
 8000c3e:	d967      	bls.n	8000d10 <__udivmoddi4+0xe4>
 8000c40:	fab2 f282 	clz	r2, r2
 8000c44:	b14a      	cbz	r2, 8000c5a <__udivmoddi4+0x2e>
 8000c46:	f1c2 0720 	rsb	r7, r2, #32
 8000c4a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c4e:	fa20 f707 	lsr.w	r7, r0, r7
 8000c52:	4095      	lsls	r5, r2
 8000c54:	ea47 0803 	orr.w	r8, r7, r3
 8000c58:	4094      	lsls	r4, r2
 8000c5a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c5e:	0c23      	lsrs	r3, r4, #16
 8000c60:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c64:	fa1f fc85 	uxth.w	ip, r5
 8000c68:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c6c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c70:	fb07 f10c 	mul.w	r1, r7, ip
 8000c74:	4299      	cmp	r1, r3
 8000c76:	d909      	bls.n	8000c8c <__udivmoddi4+0x60>
 8000c78:	18eb      	adds	r3, r5, r3
 8000c7a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c7e:	f080 811b 	bcs.w	8000eb8 <__udivmoddi4+0x28c>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 8118 	bls.w	8000eb8 <__udivmoddi4+0x28c>
 8000c88:	3f02      	subs	r7, #2
 8000c8a:	442b      	add	r3, r5
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c94:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ca0:	45a4      	cmp	ip, r4
 8000ca2:	d909      	bls.n	8000cb8 <__udivmoddi4+0x8c>
 8000ca4:	192c      	adds	r4, r5, r4
 8000ca6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x290>
 8000cae:	45a4      	cmp	ip, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x290>
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	442c      	add	r4, r5
 8000cb8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cbc:	eba4 040c 	sub.w	r4, r4, ip
 8000cc0:	2700      	movs	r7, #0
 8000cc2:	b11e      	cbz	r6, 8000ccc <__udivmoddi4+0xa0>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c6 4300 	strd	r4, r3, [r6]
 8000ccc:	4639      	mov	r1, r7
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xbe>
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	f000 80eb 	beq.w	8000eb2 <__udivmoddi4+0x286>
 8000cdc:	2700      	movs	r7, #0
 8000cde:	e9c6 0100 	strd	r0, r1, [r6]
 8000ce2:	4638      	mov	r0, r7
 8000ce4:	4639      	mov	r1, r7
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f783 	clz	r7, r3
 8000cee:	2f00      	cmp	r7, #0
 8000cf0:	d147      	bne.n	8000d82 <__udivmoddi4+0x156>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd0>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80fa 	bhi.w	8000ef0 <__udivmoddi4+0x2c4>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	4698      	mov	r8, r3
 8000d06:	2e00      	cmp	r6, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa0>
 8000d0a:	e9c6 4800 	strd	r4, r8, [r6]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa0>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xe8>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 808f 	bne.w	8000e3c <__udivmoddi4+0x210>
 8000d1e:	1b49      	subs	r1, r1, r5
 8000d20:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d24:	fa1f f885 	uxth.w	r8, r5
 8000d28:	2701      	movs	r7, #1
 8000d2a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d2e:	0c23      	lsrs	r3, r4, #16
 8000d30:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d38:	fb08 f10c 	mul.w	r1, r8, ip
 8000d3c:	4299      	cmp	r1, r3
 8000d3e:	d907      	bls.n	8000d50 <__udivmoddi4+0x124>
 8000d40:	18eb      	adds	r3, r5, r3
 8000d42:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x122>
 8000d48:	4299      	cmp	r1, r3
 8000d4a:	f200 80cd 	bhi.w	8000ee8 <__udivmoddi4+0x2bc>
 8000d4e:	4684      	mov	ip, r0
 8000d50:	1a59      	subs	r1, r3, r1
 8000d52:	b2a3      	uxth	r3, r4
 8000d54:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d58:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d5c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d60:	fb08 f800 	mul.w	r8, r8, r0
 8000d64:	45a0      	cmp	r8, r4
 8000d66:	d907      	bls.n	8000d78 <__udivmoddi4+0x14c>
 8000d68:	192c      	adds	r4, r5, r4
 8000d6a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d6e:	d202      	bcs.n	8000d76 <__udivmoddi4+0x14a>
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	f200 80b6 	bhi.w	8000ee2 <__udivmoddi4+0x2b6>
 8000d76:	4618      	mov	r0, r3
 8000d78:	eba4 0408 	sub.w	r4, r4, r8
 8000d7c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d80:	e79f      	b.n	8000cc2 <__udivmoddi4+0x96>
 8000d82:	f1c7 0c20 	rsb	ip, r7, #32
 8000d86:	40bb      	lsls	r3, r7
 8000d88:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d8c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d90:	fa01 f407 	lsl.w	r4, r1, r7
 8000d94:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d98:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d9c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000da0:	4325      	orrs	r5, r4
 8000da2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000da6:	0c2c      	lsrs	r4, r5, #16
 8000da8:	fb08 3319 	mls	r3, r8, r9, r3
 8000dac:	fa1f fa8e 	uxth.w	sl, lr
 8000db0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000db4:	fb09 f40a 	mul.w	r4, r9, sl
 8000db8:	429c      	cmp	r4, r3
 8000dba:	fa02 f207 	lsl.w	r2, r2, r7
 8000dbe:	fa00 f107 	lsl.w	r1, r0, r7
 8000dc2:	d90b      	bls.n	8000ddc <__udivmoddi4+0x1b0>
 8000dc4:	eb1e 0303 	adds.w	r3, lr, r3
 8000dc8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dcc:	f080 8087 	bcs.w	8000ede <__udivmoddi4+0x2b2>
 8000dd0:	429c      	cmp	r4, r3
 8000dd2:	f240 8084 	bls.w	8000ede <__udivmoddi4+0x2b2>
 8000dd6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dda:	4473      	add	r3, lr
 8000ddc:	1b1b      	subs	r3, r3, r4
 8000dde:	b2ad      	uxth	r5, r5
 8000de0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de4:	fb08 3310 	mls	r3, r8, r0, r3
 8000de8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dec:	fb00 fa0a 	mul.w	sl, r0, sl
 8000df0:	45a2      	cmp	sl, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x1da>
 8000df4:	eb1e 0404 	adds.w	r4, lr, r4
 8000df8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dfc:	d26b      	bcs.n	8000ed6 <__udivmoddi4+0x2aa>
 8000dfe:	45a2      	cmp	sl, r4
 8000e00:	d969      	bls.n	8000ed6 <__udivmoddi4+0x2aa>
 8000e02:	3802      	subs	r0, #2
 8000e04:	4474      	add	r4, lr
 8000e06:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e0e:	eba4 040a 	sub.w	r4, r4, sl
 8000e12:	454c      	cmp	r4, r9
 8000e14:	46c2      	mov	sl, r8
 8000e16:	464b      	mov	r3, r9
 8000e18:	d354      	bcc.n	8000ec4 <__udivmoddi4+0x298>
 8000e1a:	d051      	beq.n	8000ec0 <__udivmoddi4+0x294>
 8000e1c:	2e00      	cmp	r6, #0
 8000e1e:	d069      	beq.n	8000ef4 <__udivmoddi4+0x2c8>
 8000e20:	ebb1 050a 	subs.w	r5, r1, sl
 8000e24:	eb64 0403 	sbc.w	r4, r4, r3
 8000e28:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e2c:	40fd      	lsrs	r5, r7
 8000e2e:	40fc      	lsrs	r4, r7
 8000e30:	ea4c 0505 	orr.w	r5, ip, r5
 8000e34:	e9c6 5400 	strd	r5, r4, [r6]
 8000e38:	2700      	movs	r7, #0
 8000e3a:	e747      	b.n	8000ccc <__udivmoddi4+0xa0>
 8000e3c:	f1c2 0320 	rsb	r3, r2, #32
 8000e40:	fa20 f703 	lsr.w	r7, r0, r3
 8000e44:	4095      	lsls	r5, r2
 8000e46:	fa01 f002 	lsl.w	r0, r1, r2
 8000e4a:	fa21 f303 	lsr.w	r3, r1, r3
 8000e4e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e52:	4338      	orrs	r0, r7
 8000e54:	0c01      	lsrs	r1, r0, #16
 8000e56:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e5a:	fa1f f885 	uxth.w	r8, r5
 8000e5e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e62:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e66:	fb07 f308 	mul.w	r3, r7, r8
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x256>
 8000e72:	1869      	adds	r1, r5, r1
 8000e74:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e78:	d22f      	bcs.n	8000eda <__udivmoddi4+0x2ae>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d92d      	bls.n	8000eda <__udivmoddi4+0x2ae>
 8000e7e:	3f02      	subs	r7, #2
 8000e80:	4429      	add	r1, r5
 8000e82:	1acb      	subs	r3, r1, r3
 8000e84:	b281      	uxth	r1, r0
 8000e86:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e8a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e92:	fb00 f308 	mul.w	r3, r0, r8
 8000e96:	428b      	cmp	r3, r1
 8000e98:	d907      	bls.n	8000eaa <__udivmoddi4+0x27e>
 8000e9a:	1869      	adds	r1, r5, r1
 8000e9c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ea0:	d217      	bcs.n	8000ed2 <__udivmoddi4+0x2a6>
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	d915      	bls.n	8000ed2 <__udivmoddi4+0x2a6>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4429      	add	r1, r5
 8000eaa:	1ac9      	subs	r1, r1, r3
 8000eac:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000eb0:	e73b      	b.n	8000d2a <__udivmoddi4+0xfe>
 8000eb2:	4637      	mov	r7, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e709      	b.n	8000ccc <__udivmoddi4+0xa0>
 8000eb8:	4607      	mov	r7, r0
 8000eba:	e6e7      	b.n	8000c8c <__udivmoddi4+0x60>
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x8c>
 8000ec0:	4541      	cmp	r1, r8
 8000ec2:	d2ab      	bcs.n	8000e1c <__udivmoddi4+0x1f0>
 8000ec4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ec8:	eb69 020e 	sbc.w	r2, r9, lr
 8000ecc:	3801      	subs	r0, #1
 8000ece:	4613      	mov	r3, r2
 8000ed0:	e7a4      	b.n	8000e1c <__udivmoddi4+0x1f0>
 8000ed2:	4660      	mov	r0, ip
 8000ed4:	e7e9      	b.n	8000eaa <__udivmoddi4+0x27e>
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	e795      	b.n	8000e06 <__udivmoddi4+0x1da>
 8000eda:	4667      	mov	r7, ip
 8000edc:	e7d1      	b.n	8000e82 <__udivmoddi4+0x256>
 8000ede:	4681      	mov	r9, r0
 8000ee0:	e77c      	b.n	8000ddc <__udivmoddi4+0x1b0>
 8000ee2:	3802      	subs	r0, #2
 8000ee4:	442c      	add	r4, r5
 8000ee6:	e747      	b.n	8000d78 <__udivmoddi4+0x14c>
 8000ee8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eec:	442b      	add	r3, r5
 8000eee:	e72f      	b.n	8000d50 <__udivmoddi4+0x124>
 8000ef0:	4638      	mov	r0, r7
 8000ef2:	e708      	b.n	8000d06 <__udivmoddi4+0xda>
 8000ef4:	4637      	mov	r7, r6
 8000ef6:	e6e9      	b.n	8000ccc <__udivmoddi4+0xa0>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f00:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <HAL_Init+0x40>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a0d      	ldr	r2, [pc, #52]	; (8000f3c <HAL_Init+0x40>)
 8000f06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f0c:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <HAL_Init+0x40>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a0a      	ldr	r2, [pc, #40]	; (8000f3c <HAL_Init+0x40>)
 8000f12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f18:	4b08      	ldr	r3, [pc, #32]	; (8000f3c <HAL_Init+0x40>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a07      	ldr	r2, [pc, #28]	; (8000f3c <HAL_Init+0x40>)
 8000f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f24:	2003      	movs	r0, #3
 8000f26:	f001 fab5 	bl	8002494 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	f000 f808 	bl	8000f40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f30:	f007 fb20 	bl	8008574 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f34:	2300      	movs	r3, #0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	40023c00 	.word	0x40023c00

08000f40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f48:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <HAL_InitTick+0x54>)
 8000f4a:	681a      	ldr	r2, [r3, #0]
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <HAL_InitTick+0x58>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	4619      	mov	r1, r3
 8000f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f001 facd 	bl	80024fe <HAL_SYSTICK_Config>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e00e      	b.n	8000f8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2b0f      	cmp	r3, #15
 8000f72:	d80a      	bhi.n	8000f8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f74:	2200      	movs	r2, #0
 8000f76:	6879      	ldr	r1, [r7, #4]
 8000f78:	f04f 30ff 	mov.w	r0, #4294967295
 8000f7c:	f001 fa95 	bl	80024aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f80:	4a06      	ldr	r2, [pc, #24]	; (8000f9c <HAL_InitTick+0x5c>)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f86:	2300      	movs	r3, #0
 8000f88:	e000      	b.n	8000f8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000038 	.word	0x20000038
 8000f98:	20000004 	.word	0x20000004
 8000f9c:	20000000 	.word	0x20000000

08000fa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <HAL_IncTick+0x20>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <HAL_IncTick+0x24>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4413      	add	r3, r2
 8000fb0:	4a04      	ldr	r2, [pc, #16]	; (8000fc4 <HAL_IncTick+0x24>)
 8000fb2:	6013      	str	r3, [r2, #0]
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	20000004 	.word	0x20000004
 8000fc4:	20000208 	.word	0x20000208

08000fc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  return uwTick;
 8000fcc:	4b03      	ldr	r3, [pc, #12]	; (8000fdc <HAL_GetTick+0x14>)
 8000fce:	681b      	ldr	r3, [r3, #0]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	20000208 	.word	0x20000208

08000fe0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fe8:	f7ff ffee 	bl	8000fc8 <HAL_GetTick>
 8000fec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff8:	d005      	beq.n	8001006 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ffa:	4b09      	ldr	r3, [pc, #36]	; (8001020 <HAL_Delay+0x40>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	461a      	mov	r2, r3
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4413      	add	r3, r2
 8001004:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001006:	bf00      	nop
 8001008:	f7ff ffde 	bl	8000fc8 <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	68fa      	ldr	r2, [r7, #12]
 8001014:	429a      	cmp	r2, r3
 8001016:	d8f7      	bhi.n	8001008 <HAL_Delay+0x28>
  {
  }
}
 8001018:	bf00      	nop
 800101a:	3710      	adds	r7, #16
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000004 	.word	0x20000004

08001024 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b084      	sub	sp, #16
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800102c:	2300      	movs	r3, #0
 800102e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d101      	bne.n	800103a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e033      	b.n	80010a2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103e:	2b00      	cmp	r3, #0
 8001040:	d109      	bne.n	8001056 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f005 fbe0 	bl	8006808 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2200      	movs	r2, #0
 800104c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2200      	movs	r2, #0
 8001052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105a:	f003 0310 	and.w	r3, r3, #16
 800105e:	2b00      	cmp	r3, #0
 8001060:	d118      	bne.n	8001094 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001066:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800106a:	f023 0302 	bic.w	r3, r3, #2
 800106e:	f043 0202 	orr.w	r2, r3, #2
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f000 fa5a 	bl	8001530 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001086:	f023 0303 	bic.w	r3, r3, #3
 800108a:	f043 0201 	orr.w	r2, r3, #1
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	641a      	str	r2, [r3, #64]	; 0x40
 8001092:	e001      	b.n	8001098 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2200      	movs	r2, #0
 800109c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3710      	adds	r7, #16
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
	...

080010ac <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80010b8:	2300      	movs	r3, #0
 80010ba:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d101      	bne.n	80010ca <HAL_ADC_Start_DMA+0x1e>
 80010c6:	2302      	movs	r3, #2
 80010c8:	e0cc      	b.n	8001264 <HAL_ADC_Start_DMA+0x1b8>
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	2201      	movs	r2, #1
 80010ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	f003 0301 	and.w	r3, r3, #1
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d018      	beq.n	8001112 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	689a      	ldr	r2, [r3, #8]
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f042 0201 	orr.w	r2, r2, #1
 80010ee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010f0:	4b5e      	ldr	r3, [pc, #376]	; (800126c <HAL_ADC_Start_DMA+0x1c0>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a5e      	ldr	r2, [pc, #376]	; (8001270 <HAL_ADC_Start_DMA+0x1c4>)
 80010f6:	fba2 2303 	umull	r2, r3, r2, r3
 80010fa:	0c9a      	lsrs	r2, r3, #18
 80010fc:	4613      	mov	r3, r2
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	4413      	add	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001104:	e002      	b.n	800110c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	3b01      	subs	r3, #1
 800110a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d1f9      	bne.n	8001106 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	f003 0301 	and.w	r3, r3, #1
 800111c:	2b01      	cmp	r3, #1
 800111e:	f040 80a0 	bne.w	8001262 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001126:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800112a:	f023 0301 	bic.w	r3, r3, #1
 800112e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001140:	2b00      	cmp	r3, #0
 8001142:	d007      	beq.n	8001154 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001148:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800114c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001158:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800115c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001160:	d106      	bne.n	8001170 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001166:	f023 0206 	bic.w	r2, r3, #6
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	645a      	str	r2, [r3, #68]	; 0x44
 800116e:	e002      	b.n	8001176 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	2200      	movs	r2, #0
 8001174:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	2200      	movs	r2, #0
 800117a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800117e:	4b3d      	ldr	r3, [pc, #244]	; (8001274 <HAL_ADC_Start_DMA+0x1c8>)
 8001180:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001186:	4a3c      	ldr	r2, [pc, #240]	; (8001278 <HAL_ADC_Start_DMA+0x1cc>)
 8001188:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800118e:	4a3b      	ldr	r2, [pc, #236]	; (800127c <HAL_ADC_Start_DMA+0x1d0>)
 8001190:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001196:	4a3a      	ldr	r2, [pc, #232]	; (8001280 <HAL_ADC_Start_DMA+0x1d4>)
 8001198:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80011a2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	685a      	ldr	r2, [r3, #4]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80011b2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	689a      	ldr	r2, [r3, #8]
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80011c2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	334c      	adds	r3, #76	; 0x4c
 80011ce:	4619      	mov	r1, r3
 80011d0:	68ba      	ldr	r2, [r7, #8]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f001 fa4e 	bl	8002674 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f003 031f 	and.w	r3, r3, #31
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d12a      	bne.n	800123a <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a26      	ldr	r2, [pc, #152]	; (8001284 <HAL_ADC_Start_DMA+0x1d8>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d015      	beq.n	800121a <HAL_ADC_Start_DMA+0x16e>
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a25      	ldr	r2, [pc, #148]	; (8001288 <HAL_ADC_Start_DMA+0x1dc>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d105      	bne.n	8001204 <HAL_ADC_Start_DMA+0x158>
 80011f8:	4b1e      	ldr	r3, [pc, #120]	; (8001274 <HAL_ADC_Start_DMA+0x1c8>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 031f 	and.w	r3, r3, #31
 8001200:	2b00      	cmp	r3, #0
 8001202:	d00a      	beq.n	800121a <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a20      	ldr	r2, [pc, #128]	; (800128c <HAL_ADC_Start_DMA+0x1e0>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d129      	bne.n	8001262 <HAL_ADC_Start_DMA+0x1b6>
 800120e:	4b19      	ldr	r3, [pc, #100]	; (8001274 <HAL_ADC_Start_DMA+0x1c8>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f003 031f 	and.w	r3, r3, #31
 8001216:	2b0f      	cmp	r3, #15
 8001218:	d823      	bhi.n	8001262 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d11c      	bne.n	8001262 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	689a      	ldr	r2, [r3, #8]
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	e013      	b.n	8001262 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a11      	ldr	r2, [pc, #68]	; (8001284 <HAL_ADC_Start_DMA+0x1d8>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d10e      	bne.n	8001262 <HAL_ADC_Start_DMA+0x1b6>
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d107      	bne.n	8001262 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	689a      	ldr	r2, [r3, #8]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001260:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001262:	2300      	movs	r3, #0
}
 8001264:	4618      	mov	r0, r3
 8001266:	3718      	adds	r7, #24
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000038 	.word	0x20000038
 8001270:	431bde83 	.word	0x431bde83
 8001274:	40012300 	.word	0x40012300
 8001278:	08001729 	.word	0x08001729
 800127c:	080017e3 	.word	0x080017e3
 8001280:	080017ff 	.word	0x080017ff
 8001284:	40012000 	.word	0x40012000
 8001288:	40012100 	.word	0x40012100
 800128c:	40012200 	.word	0x40012200

08001290 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr

080012b8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d101      	bne.n	80012e8 <HAL_ADC_ConfigChannel+0x1c>
 80012e4:	2302      	movs	r3, #2
 80012e6:	e113      	b.n	8001510 <HAL_ADC_ConfigChannel+0x244>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2201      	movs	r2, #1
 80012ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2b09      	cmp	r3, #9
 80012f6:	d925      	bls.n	8001344 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	68d9      	ldr	r1, [r3, #12]
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	b29b      	uxth	r3, r3
 8001304:	461a      	mov	r2, r3
 8001306:	4613      	mov	r3, r2
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	4413      	add	r3, r2
 800130c:	3b1e      	subs	r3, #30
 800130e:	2207      	movs	r2, #7
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	43da      	mvns	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	400a      	ands	r2, r1
 800131c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	68d9      	ldr	r1, [r3, #12]
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	689a      	ldr	r2, [r3, #8]
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	b29b      	uxth	r3, r3
 800132e:	4618      	mov	r0, r3
 8001330:	4603      	mov	r3, r0
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	4403      	add	r3, r0
 8001336:	3b1e      	subs	r3, #30
 8001338:	409a      	lsls	r2, r3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	430a      	orrs	r2, r1
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	e022      	b.n	800138a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	6919      	ldr	r1, [r3, #16]
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	b29b      	uxth	r3, r3
 8001350:	461a      	mov	r2, r3
 8001352:	4613      	mov	r3, r2
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	4413      	add	r3, r2
 8001358:	2207      	movs	r2, #7
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	43da      	mvns	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	400a      	ands	r2, r1
 8001366:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	6919      	ldr	r1, [r3, #16]
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	689a      	ldr	r2, [r3, #8]
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	b29b      	uxth	r3, r3
 8001378:	4618      	mov	r0, r3
 800137a:	4603      	mov	r3, r0
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	4403      	add	r3, r0
 8001380:	409a      	lsls	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	430a      	orrs	r2, r1
 8001388:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	2b06      	cmp	r3, #6
 8001390:	d824      	bhi.n	80013dc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685a      	ldr	r2, [r3, #4]
 800139c:	4613      	mov	r3, r2
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	4413      	add	r3, r2
 80013a2:	3b05      	subs	r3, #5
 80013a4:	221f      	movs	r2, #31
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43da      	mvns	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	400a      	ands	r2, r1
 80013b2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	b29b      	uxth	r3, r3
 80013c0:	4618      	mov	r0, r3
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685a      	ldr	r2, [r3, #4]
 80013c6:	4613      	mov	r3, r2
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	4413      	add	r3, r2
 80013cc:	3b05      	subs	r3, #5
 80013ce:	fa00 f203 	lsl.w	r2, r0, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	430a      	orrs	r2, r1
 80013d8:	635a      	str	r2, [r3, #52]	; 0x34
 80013da:	e04c      	b.n	8001476 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	2b0c      	cmp	r3, #12
 80013e2:	d824      	bhi.n	800142e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685a      	ldr	r2, [r3, #4]
 80013ee:	4613      	mov	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	4413      	add	r3, r2
 80013f4:	3b23      	subs	r3, #35	; 0x23
 80013f6:	221f      	movs	r2, #31
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	43da      	mvns	r2, r3
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	400a      	ands	r2, r1
 8001404:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	b29b      	uxth	r3, r3
 8001412:	4618      	mov	r0, r3
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685a      	ldr	r2, [r3, #4]
 8001418:	4613      	mov	r3, r2
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	4413      	add	r3, r2
 800141e:	3b23      	subs	r3, #35	; 0x23
 8001420:	fa00 f203 	lsl.w	r2, r0, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	430a      	orrs	r2, r1
 800142a:	631a      	str	r2, [r3, #48]	; 0x30
 800142c:	e023      	b.n	8001476 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685a      	ldr	r2, [r3, #4]
 8001438:	4613      	mov	r3, r2
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	4413      	add	r3, r2
 800143e:	3b41      	subs	r3, #65	; 0x41
 8001440:	221f      	movs	r2, #31
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43da      	mvns	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	400a      	ands	r2, r1
 800144e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	b29b      	uxth	r3, r3
 800145c:	4618      	mov	r0, r3
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685a      	ldr	r2, [r3, #4]
 8001462:	4613      	mov	r3, r2
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	4413      	add	r3, r2
 8001468:	3b41      	subs	r3, #65	; 0x41
 800146a:	fa00 f203 	lsl.w	r2, r0, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	430a      	orrs	r2, r1
 8001474:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001476:	4b29      	ldr	r3, [pc, #164]	; (800151c <HAL_ADC_ConfigChannel+0x250>)
 8001478:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a28      	ldr	r2, [pc, #160]	; (8001520 <HAL_ADC_ConfigChannel+0x254>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d10f      	bne.n	80014a4 <HAL_ADC_ConfigChannel+0x1d8>
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b12      	cmp	r3, #18
 800148a:	d10b      	bne.n	80014a4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a1d      	ldr	r2, [pc, #116]	; (8001520 <HAL_ADC_ConfigChannel+0x254>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d12b      	bne.n	8001506 <HAL_ADC_ConfigChannel+0x23a>
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a1c      	ldr	r2, [pc, #112]	; (8001524 <HAL_ADC_ConfigChannel+0x258>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d003      	beq.n	80014c0 <HAL_ADC_ConfigChannel+0x1f4>
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2b11      	cmp	r3, #17
 80014be:	d122      	bne.n	8001506 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a11      	ldr	r2, [pc, #68]	; (8001524 <HAL_ADC_ConfigChannel+0x258>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d111      	bne.n	8001506 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014e2:	4b11      	ldr	r3, [pc, #68]	; (8001528 <HAL_ADC_ConfigChannel+0x25c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a11      	ldr	r2, [pc, #68]	; (800152c <HAL_ADC_ConfigChannel+0x260>)
 80014e8:	fba2 2303 	umull	r2, r3, r2, r3
 80014ec:	0c9a      	lsrs	r2, r3, #18
 80014ee:	4613      	mov	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	4413      	add	r3, r2
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80014f8:	e002      	b.n	8001500 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80014fa:	68bb      	ldr	r3, [r7, #8]
 80014fc:	3b01      	subs	r3, #1
 80014fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1f9      	bne.n	80014fa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2200      	movs	r2, #0
 800150a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800150e:	2300      	movs	r3, #0
}
 8001510:	4618      	mov	r0, r3
 8001512:	3714      	adds	r7, #20
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr
 800151c:	40012300 	.word	0x40012300
 8001520:	40012000 	.word	0x40012000
 8001524:	10000012 	.word	0x10000012
 8001528:	20000038 	.word	0x20000038
 800152c:	431bde83 	.word	0x431bde83

08001530 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001538:	4b79      	ldr	r3, [pc, #484]	; (8001720 <ADC_Init+0x1f0>)
 800153a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	685a      	ldr	r2, [r3, #4]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	431a      	orrs	r2, r3
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	685a      	ldr	r2, [r3, #4]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001564:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	6859      	ldr	r1, [r3, #4]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	691b      	ldr	r3, [r3, #16]
 8001570:	021a      	lsls	r2, r3, #8
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	430a      	orrs	r2, r1
 8001578:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	685a      	ldr	r2, [r3, #4]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001588:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	6859      	ldr	r1, [r3, #4]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689a      	ldr	r2, [r3, #8]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	430a      	orrs	r2, r1
 800159a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	689a      	ldr	r2, [r3, #8]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	6899      	ldr	r1, [r3, #8]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	68da      	ldr	r2, [r3, #12]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	430a      	orrs	r2, r1
 80015bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c2:	4a58      	ldr	r2, [pc, #352]	; (8001724 <ADC_Init+0x1f4>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d022      	beq.n	800160e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	689a      	ldr	r2, [r3, #8]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015d6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6899      	ldr	r1, [r3, #8]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	430a      	orrs	r2, r1
 80015e8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	689a      	ldr	r2, [r3, #8]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	6899      	ldr	r1, [r3, #8]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	430a      	orrs	r2, r1
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	e00f      	b.n	800162e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800161c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	689a      	ldr	r2, [r3, #8]
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800162c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	689a      	ldr	r2, [r3, #8]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f022 0202 	bic.w	r2, r2, #2
 800163c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	6899      	ldr	r1, [r3, #8]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	7e1b      	ldrb	r3, [r3, #24]
 8001648:	005a      	lsls	r2, r3, #1
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	430a      	orrs	r2, r1
 8001650:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d01b      	beq.n	8001694 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	685a      	ldr	r2, [r3, #4]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800166a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	685a      	ldr	r2, [r3, #4]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800167a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	6859      	ldr	r1, [r3, #4]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001686:	3b01      	subs	r3, #1
 8001688:	035a      	lsls	r2, r3, #13
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	430a      	orrs	r2, r1
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	e007      	b.n	80016a4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	685a      	ldr	r2, [r3, #4]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016a2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80016b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	69db      	ldr	r3, [r3, #28]
 80016be:	3b01      	subs	r3, #1
 80016c0:	051a      	lsls	r2, r3, #20
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	430a      	orrs	r2, r1
 80016c8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80016d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	6899      	ldr	r1, [r3, #8]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016e6:	025a      	lsls	r2, r3, #9
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	430a      	orrs	r2, r1
 80016ee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	689a      	ldr	r2, [r3, #8]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6899      	ldr	r1, [r3, #8]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	695b      	ldr	r3, [r3, #20]
 800170a:	029a      	lsls	r2, r3, #10
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	430a      	orrs	r2, r1
 8001712:	609a      	str	r2, [r3, #8]
}
 8001714:	bf00      	nop
 8001716:	3714      	adds	r7, #20
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr
 8001720:	40012300 	.word	0x40012300
 8001724:	0f000001 	.word	0x0f000001

08001728 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001734:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800173e:	2b00      	cmp	r3, #0
 8001740:	d13c      	bne.n	80017bc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001746:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d12b      	bne.n	80017b4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001760:	2b00      	cmp	r3, #0
 8001762:	d127      	bne.n	80017b4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800176e:	2b00      	cmp	r3, #0
 8001770:	d006      	beq.n	8001780 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800177c:	2b00      	cmp	r3, #0
 800177e:	d119      	bne.n	80017b4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	685a      	ldr	r2, [r3, #4]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f022 0220 	bic.w	r2, r2, #32
 800178e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001794:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d105      	bne.n	80017b4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ac:	f043 0201 	orr.w	r2, r3, #1
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80017b4:	68f8      	ldr	r0, [r7, #12]
 80017b6:	f7ff fd6b 	bl	8001290 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80017ba:	e00e      	b.n	80017da <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c0:	f003 0310 	and.w	r3, r3, #16
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d003      	beq.n	80017d0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80017c8:	68f8      	ldr	r0, [r7, #12]
 80017ca:	f7ff fd75 	bl	80012b8 <HAL_ADC_ErrorCallback>
}
 80017ce:	e004      	b.n	80017da <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	4798      	blx	r3
}
 80017da:	bf00      	nop
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b084      	sub	sp, #16
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017ee:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80017f0:	68f8      	ldr	r0, [r7, #12]
 80017f2:	f7ff fd57 	bl	80012a4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80017f6:	bf00      	nop
 80017f8:	3710      	adds	r7, #16
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}

080017fe <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b084      	sub	sp, #16
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800180a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2240      	movs	r2, #64	; 0x40
 8001810:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001816:	f043 0204 	orr.w	r2, r3, #4
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800181e:	68f8      	ldr	r0, [r7, #12]
 8001820:	f7ff fd4a 	bl	80012b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001824:	bf00      	nop
 8001826:	3710      	adds	r7, #16
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e0ed      	b.n	8001a1a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001844:	b2db      	uxtb	r3, r3
 8001846:	2b00      	cmp	r3, #0
 8001848:	d102      	bne.n	8001850 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f005 fb90 	bl	8006f70 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f022 0202 	bic.w	r2, r2, #2
 800185e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001860:	f7ff fbb2 	bl	8000fc8 <HAL_GetTick>
 8001864:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001866:	e012      	b.n	800188e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001868:	f7ff fbae 	bl	8000fc8 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b0a      	cmp	r3, #10
 8001874:	d90b      	bls.n	800188e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2205      	movs	r2, #5
 8001886:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e0c5      	b.n	8001a1a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f003 0302 	and.w	r3, r3, #2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1e5      	bne.n	8001868 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f042 0201 	orr.w	r2, r2, #1
 80018aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018ac:	f7ff fb8c 	bl	8000fc8 <HAL_GetTick>
 80018b0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80018b2:	e012      	b.n	80018da <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80018b4:	f7ff fb88 	bl	8000fc8 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b0a      	cmp	r3, #10
 80018c0:	d90b      	bls.n	80018da <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2205      	movs	r2, #5
 80018d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e09f      	b.n	8001a1a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f003 0301 	and.w	r3, r3, #1
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d0e5      	beq.n	80018b4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	7e1b      	ldrb	r3, [r3, #24]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d108      	bne.n	8001902 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	e007      	b.n	8001912 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001910:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	7e5b      	ldrb	r3, [r3, #25]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d108      	bne.n	800192c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	e007      	b.n	800193c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800193a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	7e9b      	ldrb	r3, [r3, #26]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d108      	bne.n	8001956 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f042 0220 	orr.w	r2, r2, #32
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	e007      	b.n	8001966 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f022 0220 	bic.w	r2, r2, #32
 8001964:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	7edb      	ldrb	r3, [r3, #27]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d108      	bne.n	8001980 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f022 0210 	bic.w	r2, r2, #16
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	e007      	b.n	8001990 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f042 0210 	orr.w	r2, r2, #16
 800198e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	7f1b      	ldrb	r3, [r3, #28]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d108      	bne.n	80019aa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f042 0208 	orr.w	r2, r2, #8
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	e007      	b.n	80019ba <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f022 0208 	bic.w	r2, r2, #8
 80019b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	7f5b      	ldrb	r3, [r3, #29]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d108      	bne.n	80019d4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f042 0204 	orr.w	r2, r2, #4
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	e007      	b.n	80019e4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f022 0204 	bic.w	r2, r2, #4
 80019e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	689a      	ldr	r2, [r3, #8]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	431a      	orrs	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	431a      	orrs	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	695b      	ldr	r3, [r3, #20]
 80019f8:	ea42 0103 	orr.w	r1, r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	1e5a      	subs	r2, r3, #1
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	430a      	orrs	r2, r1
 8001a08:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
	...

08001a24 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b087      	sub	sp, #28
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a3a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001a3c:	7cfb      	ldrb	r3, [r7, #19]
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d003      	beq.n	8001a4a <HAL_CAN_ConfigFilter+0x26>
 8001a42:	7cfb      	ldrb	r3, [r7, #19]
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	f040 80be 	bne.w	8001bc6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001a4a:	4b65      	ldr	r3, [pc, #404]	; (8001be0 <HAL_CAN_ConfigFilter+0x1bc>)
 8001a4c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a54:	f043 0201 	orr.w	r2, r3, #1
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001a64:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a78:	021b      	lsls	r3, r3, #8
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	f003 031f 	and.w	r3, r3, #31
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	401a      	ands	r2, r3
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	69db      	ldr	r3, [r3, #28]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d123      	bne.n	8001af4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	401a      	ands	r2, r3
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001aca:	683a      	ldr	r2, [r7, #0]
 8001acc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001ace:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	3248      	adds	r2, #72	; 0x48
 8001ad4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ae8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001aea:	6979      	ldr	r1, [r7, #20]
 8001aec:	3348      	adds	r3, #72	; 0x48
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	440b      	add	r3, r1
 8001af2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	69db      	ldr	r3, [r3, #28]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d122      	bne.n	8001b42 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	431a      	orrs	r2, r3
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001b1c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	3248      	adds	r2, #72	; 0x48
 8001b22:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001b36:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001b38:	6979      	ldr	r1, [r7, #20]
 8001b3a:	3348      	adds	r3, #72	; 0x48
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	440b      	add	r3, r1
 8001b40:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d109      	bne.n	8001b5e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	43db      	mvns	r3, r3
 8001b54:	401a      	ands	r2, r3
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001b5c:	e007      	b.n	8001b6e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	431a      	orrs	r2, r3
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	691b      	ldr	r3, [r3, #16]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d109      	bne.n	8001b8a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	401a      	ands	r2, r3
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001b88:	e007      	b.n	8001b9a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	431a      	orrs	r2, r3
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	6a1b      	ldr	r3, [r3, #32]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d107      	bne.n	8001bb2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	431a      	orrs	r2, r3
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001bb8:	f023 0201 	bic.w	r2, r3, #1
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	e006      	b.n	8001bd4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
  }
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	371c      	adds	r7, #28
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	40006400 	.word	0x40006400

08001be4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d12e      	bne.n	8001c56 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2202      	movs	r2, #2
 8001bfc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f022 0201 	bic.w	r2, r2, #1
 8001c0e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001c10:	f7ff f9da 	bl	8000fc8 <HAL_GetTick>
 8001c14:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c16:	e012      	b.n	8001c3e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c18:	f7ff f9d6 	bl	8000fc8 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b0a      	cmp	r3, #10
 8001c24:	d90b      	bls.n	8001c3e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2205      	movs	r2, #5
 8001c36:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e012      	b.n	8001c64 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d1e5      	bne.n	8001c18 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001c52:	2300      	movs	r3, #0
 8001c54:	e006      	b.n	8001c64 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
  }
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3710      	adds	r7, #16
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b087      	sub	sp, #28
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
 8001c78:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c80:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c82:	7dfb      	ldrb	r3, [r7, #23]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d003      	beq.n	8001c90 <HAL_CAN_GetRxMessage+0x24>
 8001c88:	7dfb      	ldrb	r3, [r7, #23]
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	f040 80f4 	bne.w	8001e78 <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d10e      	bne.n	8001cb4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	f003 0303 	and.w	r3, r3, #3
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d116      	bne.n	8001cd2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e0e8      	b.n	8001e86 <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	f003 0303 	and.w	r3, r3, #3
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d107      	bne.n	8001cd2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e0d9      	b.n	8001e86 <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	331b      	adds	r3, #27
 8001cda:	011b      	lsls	r3, r3, #4
 8001cdc:	4413      	add	r3, r2
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0204 	and.w	r2, r3, #4
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	689b      	ldr	r3, [r3, #8]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d10c      	bne.n	8001d0a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	331b      	adds	r3, #27
 8001cf8:	011b      	lsls	r3, r3, #4
 8001cfa:	4413      	add	r3, r2
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	0d5b      	lsrs	r3, r3, #21
 8001d00:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	e00b      	b.n	8001d22 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	331b      	adds	r3, #27
 8001d12:	011b      	lsls	r3, r3, #4
 8001d14:	4413      	add	r3, r2
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	08db      	lsrs	r3, r3, #3
 8001d1a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	331b      	adds	r3, #27
 8001d2a:	011b      	lsls	r3, r3, #4
 8001d2c:	4413      	add	r3, r2
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	085b      	lsrs	r3, r3, #1
 8001d32:	f003 0201 	and.w	r2, r3, #1
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	331b      	adds	r3, #27
 8001d42:	011b      	lsls	r3, r3, #4
 8001d44:	4413      	add	r3, r2
 8001d46:	3304      	adds	r3, #4
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 020f 	and.w	r2, r3, #15
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	331b      	adds	r3, #27
 8001d5a:	011b      	lsls	r3, r3, #4
 8001d5c:	4413      	add	r3, r2
 8001d5e:	3304      	adds	r3, #4
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	0a1b      	lsrs	r3, r3, #8
 8001d64:	b2da      	uxtb	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	331b      	adds	r3, #27
 8001d72:	011b      	lsls	r3, r3, #4
 8001d74:	4413      	add	r3, r2
 8001d76:	3304      	adds	r3, #4
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	0c1b      	lsrs	r3, r3, #16
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	011b      	lsls	r3, r3, #4
 8001d8a:	4413      	add	r3, r2
 8001d8c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	b2da      	uxtb	r2, r3
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	011b      	lsls	r3, r3, #4
 8001da0:	4413      	add	r3, r2
 8001da2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	0a1a      	lsrs	r2, r3, #8
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	3301      	adds	r3, #1
 8001dae:	b2d2      	uxtb	r2, r2
 8001db0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	011b      	lsls	r3, r3, #4
 8001dba:	4413      	add	r3, r2
 8001dbc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	0c1a      	lsrs	r2, r3, #16
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	3302      	adds	r3, #2
 8001dc8:	b2d2      	uxtb	r2, r2
 8001dca:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	011b      	lsls	r3, r3, #4
 8001dd4:	4413      	add	r3, r2
 8001dd6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	0e1a      	lsrs	r2, r3, #24
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	3303      	adds	r3, #3
 8001de2:	b2d2      	uxtb	r2, r2
 8001de4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	011b      	lsls	r3, r3, #4
 8001dee:	4413      	add	r3, r2
 8001df0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	3304      	adds	r3, #4
 8001dfa:	b2d2      	uxtb	r2, r2
 8001dfc:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	011b      	lsls	r3, r3, #4
 8001e06:	4413      	add	r3, r2
 8001e08:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	0a1a      	lsrs	r2, r3, #8
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	3305      	adds	r3, #5
 8001e14:	b2d2      	uxtb	r2, r2
 8001e16:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	011b      	lsls	r3, r3, #4
 8001e20:	4413      	add	r3, r2
 8001e22:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	0c1a      	lsrs	r2, r3, #16
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	3306      	adds	r3, #6
 8001e2e:	b2d2      	uxtb	r2, r2
 8001e30:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	68bb      	ldr	r3, [r7, #8]
 8001e38:	011b      	lsls	r3, r3, #4
 8001e3a:	4413      	add	r3, r2
 8001e3c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	0e1a      	lsrs	r2, r3, #24
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	3307      	adds	r3, #7
 8001e48:	b2d2      	uxtb	r2, r2
 8001e4a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d108      	bne.n	8001e64 <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68da      	ldr	r2, [r3, #12]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f042 0220 	orr.w	r2, r2, #32
 8001e60:	60da      	str	r2, [r3, #12]
 8001e62:	e007      	b.n	8001e74 <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	691a      	ldr	r2, [r3, #16]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f042 0220 	orr.w	r2, r2, #32
 8001e72:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001e74:	2300      	movs	r3, #0
 8001e76:	e006      	b.n	8001e86 <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
  }
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	371c      	adds	r7, #28
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b085      	sub	sp, #20
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
 8001e9a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ea2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ea4:	7bfb      	ldrb	r3, [r7, #15]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d002      	beq.n	8001eb0 <HAL_CAN_ActivateNotification+0x1e>
 8001eaa:	7bfb      	ldrb	r3, [r7, #15]
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d109      	bne.n	8001ec4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6959      	ldr	r1, [r3, #20]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	683a      	ldr	r2, [r7, #0]
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	e006      	b.n	8001ed2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
  }
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3714      	adds	r7, #20
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr

08001ede <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b08a      	sub	sp, #40	; 0x28
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	695b      	ldr	r3, [r3, #20]
 8001ef0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001f1a:	6a3b      	ldr	r3, [r7, #32]
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d07c      	beq.n	800201e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d023      	beq.n	8001f76 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2201      	movs	r2, #1
 8001f34:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d003      	beq.n	8001f48 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f005 f8fb 	bl	800713c <HAL_CAN_TxMailbox0CompleteCallback>
 8001f46:	e016      	b.n	8001f76 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	f003 0304 	and.w	r3, r3, #4
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d004      	beq.n	8001f5c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
 8001f5a:	e00c      	b.n	8001f76 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	f003 0308 	and.w	r3, r3, #8
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d004      	beq.n	8001f70 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f6e:	e002      	b.n	8001f76 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f000 f965 	bl	8002240 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d024      	beq.n	8001fca <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f88:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d003      	beq.n	8001f9c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f005 f8e1 	bl	800715c <HAL_CAN_TxMailbox1CompleteCallback>
 8001f9a:	e016      	b.n	8001fca <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d004      	beq.n	8001fb0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001fac:	627b      	str	r3, [r7, #36]	; 0x24
 8001fae:	e00c      	b.n	8001fca <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d004      	beq.n	8001fc4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fc0:	627b      	str	r3, [r7, #36]	; 0x24
 8001fc2:	e002      	b.n	8001fca <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f000 f945 	bl	8002254 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d024      	beq.n	800201e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001fdc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001fde:	69bb      	ldr	r3, [r7, #24]
 8001fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d003      	beq.n	8001ff0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f005 f8c7 	bl	800717c <HAL_CAN_TxMailbox2CompleteCallback>
 8001fee:	e016      	b.n	800201e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d004      	beq.n	8002004 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002000:	627b      	str	r3, [r7, #36]	; 0x24
 8002002:	e00c      	b.n	800201e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d004      	beq.n	8002018 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002014:	627b      	str	r3, [r7, #36]	; 0x24
 8002016:	e002      	b.n	800201e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f000 f925 	bl	8002268 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800201e:	6a3b      	ldr	r3, [r7, #32]
 8002020:	f003 0308 	and.w	r3, r3, #8
 8002024:	2b00      	cmp	r3, #0
 8002026:	d00c      	beq.n	8002042 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	f003 0310 	and.w	r3, r3, #16
 800202e:	2b00      	cmp	r3, #0
 8002030:	d007      	beq.n	8002042 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002034:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002038:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2210      	movs	r2, #16
 8002040:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002042:	6a3b      	ldr	r3, [r7, #32]
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	2b00      	cmp	r3, #0
 800204a:	d00b      	beq.n	8002064 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	f003 0308 	and.w	r3, r3, #8
 8002052:	2b00      	cmp	r3, #0
 8002054:	d006      	beq.n	8002064 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2208      	movs	r2, #8
 800205c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 f90c 	bl	800227c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002064:	6a3b      	ldr	r3, [r7, #32]
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d009      	beq.n	8002082 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	f003 0303 	and.w	r3, r3, #3
 8002078:	2b00      	cmp	r3, #0
 800207a:	d002      	beq.n	8002082 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f005 f88d 	bl	800719c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002082:	6a3b      	ldr	r3, [r7, #32]
 8002084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002088:	2b00      	cmp	r3, #0
 800208a:	d00c      	beq.n	80020a6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	f003 0310 	and.w	r3, r3, #16
 8002092:	2b00      	cmp	r3, #0
 8002094:	d007      	beq.n	80020a6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800209c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2210      	movs	r2, #16
 80020a4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80020a6:	6a3b      	ldr	r3, [r7, #32]
 80020a8:	f003 0320 	and.w	r3, r3, #32
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d00b      	beq.n	80020c8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	f003 0308 	and.w	r3, r3, #8
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d006      	beq.n	80020c8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2208      	movs	r2, #8
 80020c0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 f8ee 	bl	80022a4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80020c8:	6a3b      	ldr	r3, [r7, #32]
 80020ca:	f003 0310 	and.w	r3, r3, #16
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d009      	beq.n	80020e6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	f003 0303 	and.w	r3, r3, #3
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d002      	beq.n	80020e6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f000 f8d5 	bl	8002290 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80020e6:	6a3b      	ldr	r3, [r7, #32]
 80020e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d00b      	beq.n	8002108 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	f003 0310 	and.w	r3, r3, #16
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d006      	beq.n	8002108 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2210      	movs	r2, #16
 8002100:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 f8d8 	bl	80022b8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002108:	6a3b      	ldr	r3, [r7, #32]
 800210a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00b      	beq.n	800212a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	f003 0308 	and.w	r3, r3, #8
 8002118:	2b00      	cmp	r3, #0
 800211a:	d006      	beq.n	800212a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2208      	movs	r2, #8
 8002122:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f000 f8d1 	bl	80022cc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800212a:	6a3b      	ldr	r3, [r7, #32]
 800212c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d075      	beq.n	8002220 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	f003 0304 	and.w	r3, r3, #4
 800213a:	2b00      	cmp	r3, #0
 800213c:	d06c      	beq.n	8002218 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800213e:	6a3b      	ldr	r3, [r7, #32]
 8002140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002144:	2b00      	cmp	r3, #0
 8002146:	d008      	beq.n	800215a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002154:	f043 0301 	orr.w	r3, r3, #1
 8002158:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800215a:	6a3b      	ldr	r3, [r7, #32]
 800215c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002160:	2b00      	cmp	r3, #0
 8002162:	d008      	beq.n	8002176 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800216e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002170:	f043 0302 	orr.w	r3, r3, #2
 8002174:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002176:	6a3b      	ldr	r3, [r7, #32]
 8002178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800217c:	2b00      	cmp	r3, #0
 800217e:	d008      	beq.n	8002192 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218c:	f043 0304 	orr.w	r3, r3, #4
 8002190:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002192:	6a3b      	ldr	r3, [r7, #32]
 8002194:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002198:	2b00      	cmp	r3, #0
 800219a:	d03d      	beq.n	8002218 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d038      	beq.n	8002218 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021ac:	2b30      	cmp	r3, #48	; 0x30
 80021ae:	d017      	beq.n	80021e0 <HAL_CAN_IRQHandler+0x302>
 80021b0:	2b30      	cmp	r3, #48	; 0x30
 80021b2:	d804      	bhi.n	80021be <HAL_CAN_IRQHandler+0x2e0>
 80021b4:	2b10      	cmp	r3, #16
 80021b6:	d009      	beq.n	80021cc <HAL_CAN_IRQHandler+0x2ee>
 80021b8:	2b20      	cmp	r3, #32
 80021ba:	d00c      	beq.n	80021d6 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80021bc:	e024      	b.n	8002208 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 80021be:	2b50      	cmp	r3, #80	; 0x50
 80021c0:	d018      	beq.n	80021f4 <HAL_CAN_IRQHandler+0x316>
 80021c2:	2b60      	cmp	r3, #96	; 0x60
 80021c4:	d01b      	beq.n	80021fe <HAL_CAN_IRQHandler+0x320>
 80021c6:	2b40      	cmp	r3, #64	; 0x40
 80021c8:	d00f      	beq.n	80021ea <HAL_CAN_IRQHandler+0x30c>
            break;
 80021ca:	e01d      	b.n	8002208 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 80021cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ce:	f043 0308 	orr.w	r3, r3, #8
 80021d2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80021d4:	e018      	b.n	8002208 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 80021d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d8:	f043 0310 	orr.w	r3, r3, #16
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80021de:	e013      	b.n	8002208 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 80021e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e2:	f043 0320 	orr.w	r3, r3, #32
 80021e6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80021e8:	e00e      	b.n	8002208 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 80021ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021f0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80021f2:	e009      	b.n	8002208 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021fa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80021fc:	e004      	b.n	8002208 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002204:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002206:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	699a      	ldr	r2, [r3, #24]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002216:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	2204      	movs	r2, #4
 800221e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002222:	2b00      	cmp	r3, #0
 8002224:	d008      	beq.n	8002238 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800222a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222c:	431a      	orrs	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 f854 	bl	80022e0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002238:	bf00      	nop
 800223a:	3728      	adds	r7, #40	; 0x28
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002304:	4b0c      	ldr	r3, [pc, #48]	; (8002338 <__NVIC_SetPriorityGrouping+0x44>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800230a:	68ba      	ldr	r2, [r7, #8]
 800230c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002310:	4013      	ands	r3, r2
 8002312:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800231c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002324:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002326:	4a04      	ldr	r2, [pc, #16]	; (8002338 <__NVIC_SetPriorityGrouping+0x44>)
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	60d3      	str	r3, [r2, #12]
}
 800232c:	bf00      	nop
 800232e:	3714      	adds	r7, #20
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	e000ed00 	.word	0xe000ed00

0800233c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002340:	4b04      	ldr	r3, [pc, #16]	; (8002354 <__NVIC_GetPriorityGrouping+0x18>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	0a1b      	lsrs	r3, r3, #8
 8002346:	f003 0307 	and.w	r3, r3, #7
}
 800234a:	4618      	mov	r0, r3
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	e000ed00 	.word	0xe000ed00

08002358 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002366:	2b00      	cmp	r3, #0
 8002368:	db0b      	blt.n	8002382 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800236a:	79fb      	ldrb	r3, [r7, #7]
 800236c:	f003 021f 	and.w	r2, r3, #31
 8002370:	4907      	ldr	r1, [pc, #28]	; (8002390 <__NVIC_EnableIRQ+0x38>)
 8002372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002376:	095b      	lsrs	r3, r3, #5
 8002378:	2001      	movs	r0, #1
 800237a:	fa00 f202 	lsl.w	r2, r0, r2
 800237e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	e000e100 	.word	0xe000e100

08002394 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	6039      	str	r1, [r7, #0]
 800239e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	db0a      	blt.n	80023be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	490c      	ldr	r1, [pc, #48]	; (80023e0 <__NVIC_SetPriority+0x4c>)
 80023ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b2:	0112      	lsls	r2, r2, #4
 80023b4:	b2d2      	uxtb	r2, r2
 80023b6:	440b      	add	r3, r1
 80023b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023bc:	e00a      	b.n	80023d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	b2da      	uxtb	r2, r3
 80023c2:	4908      	ldr	r1, [pc, #32]	; (80023e4 <__NVIC_SetPriority+0x50>)
 80023c4:	79fb      	ldrb	r3, [r7, #7]
 80023c6:	f003 030f 	and.w	r3, r3, #15
 80023ca:	3b04      	subs	r3, #4
 80023cc:	0112      	lsls	r2, r2, #4
 80023ce:	b2d2      	uxtb	r2, r2
 80023d0:	440b      	add	r3, r1
 80023d2:	761a      	strb	r2, [r3, #24]
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	e000e100 	.word	0xe000e100
 80023e4:	e000ed00 	.word	0xe000ed00

080023e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b089      	sub	sp, #36	; 0x24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	f1c3 0307 	rsb	r3, r3, #7
 8002402:	2b04      	cmp	r3, #4
 8002404:	bf28      	it	cs
 8002406:	2304      	movcs	r3, #4
 8002408:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	3304      	adds	r3, #4
 800240e:	2b06      	cmp	r3, #6
 8002410:	d902      	bls.n	8002418 <NVIC_EncodePriority+0x30>
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	3b03      	subs	r3, #3
 8002416:	e000      	b.n	800241a <NVIC_EncodePriority+0x32>
 8002418:	2300      	movs	r3, #0
 800241a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800241c:	f04f 32ff 	mov.w	r2, #4294967295
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43da      	mvns	r2, r3
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	401a      	ands	r2, r3
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002430:	f04f 31ff 	mov.w	r1, #4294967295
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	fa01 f303 	lsl.w	r3, r1, r3
 800243a:	43d9      	mvns	r1, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002440:	4313      	orrs	r3, r2
         );
}
 8002442:	4618      	mov	r0, r3
 8002444:	3724      	adds	r7, #36	; 0x24
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
	...

08002450 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3b01      	subs	r3, #1
 800245c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002460:	d301      	bcc.n	8002466 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002462:	2301      	movs	r3, #1
 8002464:	e00f      	b.n	8002486 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002466:	4a0a      	ldr	r2, [pc, #40]	; (8002490 <SysTick_Config+0x40>)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	3b01      	subs	r3, #1
 800246c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800246e:	210f      	movs	r1, #15
 8002470:	f04f 30ff 	mov.w	r0, #4294967295
 8002474:	f7ff ff8e 	bl	8002394 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002478:	4b05      	ldr	r3, [pc, #20]	; (8002490 <SysTick_Config+0x40>)
 800247a:	2200      	movs	r2, #0
 800247c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800247e:	4b04      	ldr	r3, [pc, #16]	; (8002490 <SysTick_Config+0x40>)
 8002480:	2207      	movs	r2, #7
 8002482:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	e000e010 	.word	0xe000e010

08002494 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f7ff ff29 	bl	80022f4 <__NVIC_SetPriorityGrouping>
}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b086      	sub	sp, #24
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	4603      	mov	r3, r0
 80024b2:	60b9      	str	r1, [r7, #8]
 80024b4:	607a      	str	r2, [r7, #4]
 80024b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024b8:	2300      	movs	r3, #0
 80024ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024bc:	f7ff ff3e 	bl	800233c <__NVIC_GetPriorityGrouping>
 80024c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	68b9      	ldr	r1, [r7, #8]
 80024c6:	6978      	ldr	r0, [r7, #20]
 80024c8:	f7ff ff8e 	bl	80023e8 <NVIC_EncodePriority>
 80024cc:	4602      	mov	r2, r0
 80024ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024d2:	4611      	mov	r1, r2
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff ff5d 	bl	8002394 <__NVIC_SetPriority>
}
 80024da:	bf00      	nop
 80024dc:	3718      	adds	r7, #24
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b082      	sub	sp, #8
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	4603      	mov	r3, r0
 80024ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff ff31 	bl	8002358 <__NVIC_EnableIRQ>
}
 80024f6:	bf00      	nop
 80024f8:	3708      	adds	r7, #8
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b082      	sub	sp, #8
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f7ff ffa2 	bl	8002450 <SysTick_Config>
 800250c:	4603      	mov	r3, r0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
	...

08002518 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002520:	2300      	movs	r3, #0
 8002522:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002524:	f7fe fd50 	bl	8000fc8 <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e099      	b.n	8002668 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2202      	movs	r2, #2
 8002540:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f022 0201 	bic.w	r2, r2, #1
 8002552:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002554:	e00f      	b.n	8002576 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002556:	f7fe fd37 	bl	8000fc8 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b05      	cmp	r3, #5
 8002562:	d908      	bls.n	8002576 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2220      	movs	r2, #32
 8002568:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2203      	movs	r2, #3
 800256e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e078      	b.n	8002668 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1e8      	bne.n	8002556 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800258c:	697a      	ldr	r2, [r7, #20]
 800258e:	4b38      	ldr	r3, [pc, #224]	; (8002670 <HAL_DMA_Init+0x158>)
 8002590:	4013      	ands	r3, r2
 8002592:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685a      	ldr	r2, [r3, #4]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	691b      	ldr	r3, [r3, #16]
 80025a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80025ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80025ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a1b      	ldr	r3, [r3, #32]
 80025c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80025c2:	697a      	ldr	r2, [r7, #20]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025cc:	2b04      	cmp	r3, #4
 80025ce:	d107      	bne.n	80025e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d8:	4313      	orrs	r3, r2
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	4313      	orrs	r3, r2
 80025de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	697a      	ldr	r2, [r7, #20]
 80025e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	695b      	ldr	r3, [r3, #20]
 80025ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	f023 0307 	bic.w	r3, r3, #7
 80025f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fc:	697a      	ldr	r2, [r7, #20]
 80025fe:	4313      	orrs	r3, r2
 8002600:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002606:	2b04      	cmp	r3, #4
 8002608:	d117      	bne.n	800263a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	4313      	orrs	r3, r2
 8002612:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00e      	beq.n	800263a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 fa99 	bl	8002b54 <DMA_CheckFifoParam>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d008      	beq.n	800263a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2240      	movs	r2, #64	; 0x40
 800262c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002636:	2301      	movs	r3, #1
 8002638:	e016      	b.n	8002668 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 fa50 	bl	8002ae8 <DMA_CalcBaseAndBitshift>
 8002648:	4603      	mov	r3, r0
 800264a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002650:	223f      	movs	r2, #63	; 0x3f
 8002652:	409a      	lsls	r2, r3
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2201      	movs	r2, #1
 8002662:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002666:	2300      	movs	r3, #0
}
 8002668:	4618      	mov	r0, r3
 800266a:	3718      	adds	r7, #24
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	f010803f 	.word	0xf010803f

08002674 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
 8002680:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002682:	2300      	movs	r3, #0
 8002684:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002692:	2b01      	cmp	r3, #1
 8002694:	d101      	bne.n	800269a <HAL_DMA_Start_IT+0x26>
 8002696:	2302      	movs	r3, #2
 8002698:	e048      	b.n	800272c <HAL_DMA_Start_IT+0xb8>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2201      	movs	r2, #1
 800269e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d137      	bne.n	800271e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2202      	movs	r2, #2
 80026b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	68b9      	ldr	r1, [r7, #8]
 80026c2:	68f8      	ldr	r0, [r7, #12]
 80026c4:	f000 f9e2 	bl	8002a8c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026cc:	223f      	movs	r2, #63	; 0x3f
 80026ce:	409a      	lsls	r2, r3
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f042 0216 	orr.w	r2, r2, #22
 80026e2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	695a      	ldr	r2, [r3, #20]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026f2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d007      	beq.n	800270c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f042 0208 	orr.w	r2, r2, #8
 800270a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f042 0201 	orr.w	r2, r2, #1
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	e005      	b.n	800272a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002726:	2302      	movs	r3, #2
 8002728:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800272a:	7dfb      	ldrb	r3, [r7, #23]
}
 800272c:	4618      	mov	r0, r3
 800272e:	3718      	adds	r7, #24
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d004      	beq.n	8002752 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2280      	movs	r2, #128	; 0x80
 800274c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e00c      	b.n	800276c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2205      	movs	r2, #5
 8002756:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f022 0201 	bic.w	r2, r2, #1
 8002768:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002780:	2300      	movs	r3, #0
 8002782:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002784:	4b92      	ldr	r3, [pc, #584]	; (80029d0 <HAL_DMA_IRQHandler+0x258>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a92      	ldr	r2, [pc, #584]	; (80029d4 <HAL_DMA_IRQHandler+0x25c>)
 800278a:	fba2 2303 	umull	r2, r3, r2, r3
 800278e:	0a9b      	lsrs	r3, r3, #10
 8002790:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002796:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a2:	2208      	movs	r2, #8
 80027a4:	409a      	lsls	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	4013      	ands	r3, r2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d01a      	beq.n	80027e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d013      	beq.n	80027e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f022 0204 	bic.w	r2, r2, #4
 80027ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d0:	2208      	movs	r2, #8
 80027d2:	409a      	lsls	r2, r3
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027dc:	f043 0201 	orr.w	r2, r3, #1
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e8:	2201      	movs	r2, #1
 80027ea:	409a      	lsls	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	4013      	ands	r3, r2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d012      	beq.n	800281a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00b      	beq.n	800281a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002806:	2201      	movs	r2, #1
 8002808:	409a      	lsls	r2, r3
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002812:	f043 0202 	orr.w	r2, r3, #2
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281e:	2204      	movs	r2, #4
 8002820:	409a      	lsls	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	4013      	ands	r3, r2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d012      	beq.n	8002850 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00b      	beq.n	8002850 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800283c:	2204      	movs	r2, #4
 800283e:	409a      	lsls	r2, r3
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002848:	f043 0204 	orr.w	r2, r3, #4
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002854:	2210      	movs	r2, #16
 8002856:	409a      	lsls	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	4013      	ands	r3, r2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d043      	beq.n	80028e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0308 	and.w	r3, r3, #8
 800286a:	2b00      	cmp	r3, #0
 800286c:	d03c      	beq.n	80028e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002872:	2210      	movs	r2, #16
 8002874:	409a      	lsls	r2, r3
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d018      	beq.n	80028ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d108      	bne.n	80028a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	2b00      	cmp	r3, #0
 800289c:	d024      	beq.n	80028e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	4798      	blx	r3
 80028a6:	e01f      	b.n	80028e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d01b      	beq.n	80028e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	4798      	blx	r3
 80028b8:	e016      	b.n	80028e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d107      	bne.n	80028d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 0208 	bic.w	r2, r2, #8
 80028d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d003      	beq.n	80028e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ec:	2220      	movs	r2, #32
 80028ee:	409a      	lsls	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	4013      	ands	r3, r2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f000 808e 	beq.w	8002a16 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0310 	and.w	r3, r3, #16
 8002904:	2b00      	cmp	r3, #0
 8002906:	f000 8086 	beq.w	8002a16 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800290e:	2220      	movs	r2, #32
 8002910:	409a      	lsls	r2, r3
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b05      	cmp	r3, #5
 8002920:	d136      	bne.n	8002990 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f022 0216 	bic.w	r2, r2, #22
 8002930:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	695a      	ldr	r2, [r3, #20]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002940:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	2b00      	cmp	r3, #0
 8002948:	d103      	bne.n	8002952 <HAL_DMA_IRQHandler+0x1da>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800294e:	2b00      	cmp	r3, #0
 8002950:	d007      	beq.n	8002962 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f022 0208 	bic.w	r2, r2, #8
 8002960:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002966:	223f      	movs	r2, #63	; 0x3f
 8002968:	409a      	lsls	r2, r3
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002982:	2b00      	cmp	r3, #0
 8002984:	d07d      	beq.n	8002a82 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	4798      	blx	r3
        }
        return;
 800298e:	e078      	b.n	8002a82 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d01c      	beq.n	80029d8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d108      	bne.n	80029be <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d030      	beq.n	8002a16 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	4798      	blx	r3
 80029bc:	e02b      	b.n	8002a16 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d027      	beq.n	8002a16 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	4798      	blx	r3
 80029ce:	e022      	b.n	8002a16 <HAL_DMA_IRQHandler+0x29e>
 80029d0:	20000038 	.word	0x20000038
 80029d4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10f      	bne.n	8002a06 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f022 0210 	bic.w	r2, r2, #16
 80029f4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d003      	beq.n	8002a16 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d032      	beq.n	8002a84 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d022      	beq.n	8002a70 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2205      	movs	r2, #5
 8002a2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f022 0201 	bic.w	r2, r2, #1
 8002a40:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	3301      	adds	r3, #1
 8002a46:	60bb      	str	r3, [r7, #8]
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d307      	bcc.n	8002a5e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d1f2      	bne.n	8002a42 <HAL_DMA_IRQHandler+0x2ca>
 8002a5c:	e000      	b.n	8002a60 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002a5e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d005      	beq.n	8002a84 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	4798      	blx	r3
 8002a80:	e000      	b.n	8002a84 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002a82:	bf00      	nop
    }
  }
}
 8002a84:	3718      	adds	r7, #24
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop

08002a8c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
 8002a98:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002aa8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	2b40      	cmp	r3, #64	; 0x40
 8002ab8:	d108      	bne.n	8002acc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68ba      	ldr	r2, [r7, #8]
 8002ac8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002aca:	e007      	b.n	8002adc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68ba      	ldr	r2, [r7, #8]
 8002ad2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	60da      	str	r2, [r3, #12]
}
 8002adc:	bf00      	nop
 8002ade:	3714      	adds	r7, #20
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	3b10      	subs	r3, #16
 8002af8:	4a14      	ldr	r2, [pc, #80]	; (8002b4c <DMA_CalcBaseAndBitshift+0x64>)
 8002afa:	fba2 2303 	umull	r2, r3, r2, r3
 8002afe:	091b      	lsrs	r3, r3, #4
 8002b00:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b02:	4a13      	ldr	r2, [pc, #76]	; (8002b50 <DMA_CalcBaseAndBitshift+0x68>)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	4413      	add	r3, r2
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2b03      	cmp	r3, #3
 8002b14:	d909      	bls.n	8002b2a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b1e:	f023 0303 	bic.w	r3, r3, #3
 8002b22:	1d1a      	adds	r2, r3, #4
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	659a      	str	r2, [r3, #88]	; 0x58
 8002b28:	e007      	b.n	8002b3a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b32:	f023 0303 	bic.w	r3, r3, #3
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3714      	adds	r7, #20
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	aaaaaaab 	.word	0xaaaaaaab
 8002b50:	08009e70 	.word	0x08009e70

08002b54 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b64:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	699b      	ldr	r3, [r3, #24]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d11f      	bne.n	8002bae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	2b03      	cmp	r3, #3
 8002b72:	d855      	bhi.n	8002c20 <DMA_CheckFifoParam+0xcc>
 8002b74:	a201      	add	r2, pc, #4	; (adr r2, 8002b7c <DMA_CheckFifoParam+0x28>)
 8002b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b7a:	bf00      	nop
 8002b7c:	08002b8d 	.word	0x08002b8d
 8002b80:	08002b9f 	.word	0x08002b9f
 8002b84:	08002b8d 	.word	0x08002b8d
 8002b88:	08002c21 	.word	0x08002c21
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d045      	beq.n	8002c24 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b9c:	e042      	b.n	8002c24 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ba6:	d13f      	bne.n	8002c28 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bac:	e03c      	b.n	8002c28 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bb6:	d121      	bne.n	8002bfc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	2b03      	cmp	r3, #3
 8002bbc:	d836      	bhi.n	8002c2c <DMA_CheckFifoParam+0xd8>
 8002bbe:	a201      	add	r2, pc, #4	; (adr r2, 8002bc4 <DMA_CheckFifoParam+0x70>)
 8002bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc4:	08002bd5 	.word	0x08002bd5
 8002bc8:	08002bdb 	.word	0x08002bdb
 8002bcc:	08002bd5 	.word	0x08002bd5
 8002bd0:	08002bed 	.word	0x08002bed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	73fb      	strb	r3, [r7, #15]
      break;
 8002bd8:	e02f      	b.n	8002c3a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d024      	beq.n	8002c30 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bea:	e021      	b.n	8002c30 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002bf4:	d11e      	bne.n	8002c34 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002bfa:	e01b      	b.n	8002c34 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d902      	bls.n	8002c08 <DMA_CheckFifoParam+0xb4>
 8002c02:	2b03      	cmp	r3, #3
 8002c04:	d003      	beq.n	8002c0e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c06:	e018      	b.n	8002c3a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c0c:	e015      	b.n	8002c3a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00e      	beq.n	8002c38 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	73fb      	strb	r3, [r7, #15]
      break;
 8002c1e:	e00b      	b.n	8002c38 <DMA_CheckFifoParam+0xe4>
      break;
 8002c20:	bf00      	nop
 8002c22:	e00a      	b.n	8002c3a <DMA_CheckFifoParam+0xe6>
      break;
 8002c24:	bf00      	nop
 8002c26:	e008      	b.n	8002c3a <DMA_CheckFifoParam+0xe6>
      break;
 8002c28:	bf00      	nop
 8002c2a:	e006      	b.n	8002c3a <DMA_CheckFifoParam+0xe6>
      break;
 8002c2c:	bf00      	nop
 8002c2e:	e004      	b.n	8002c3a <DMA_CheckFifoParam+0xe6>
      break;
 8002c30:	bf00      	nop
 8002c32:	e002      	b.n	8002c3a <DMA_CheckFifoParam+0xe6>
      break;   
 8002c34:	bf00      	nop
 8002c36:	e000      	b.n	8002c3a <DMA_CheckFifoParam+0xe6>
      break;
 8002c38:	bf00      	nop
    }
  } 
  
  return status; 
 8002c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3714      	adds	r7, #20
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b089      	sub	sp, #36	; 0x24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c52:	2300      	movs	r3, #0
 8002c54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c56:	2300      	movs	r3, #0
 8002c58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c5e:	2300      	movs	r3, #0
 8002c60:	61fb      	str	r3, [r7, #28]
 8002c62:	e165      	b.n	8002f30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c64:	2201      	movs	r2, #1
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	4013      	ands	r3, r2
 8002c76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c78:	693a      	ldr	r2, [r7, #16]
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	f040 8154 	bne.w	8002f2a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d003      	beq.n	8002c92 <HAL_GPIO_Init+0x4a>
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	2b12      	cmp	r3, #18
 8002c90:	d123      	bne.n	8002cda <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	08da      	lsrs	r2, r3, #3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	3208      	adds	r2, #8
 8002c9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	f003 0307 	and.w	r3, r3, #7
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	220f      	movs	r2, #15
 8002caa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cae:	43db      	mvns	r3, r3
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	691a      	ldr	r2, [r3, #16]
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	f003 0307 	and.w	r3, r3, #7
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	08da      	lsrs	r2, r3, #3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	3208      	adds	r2, #8
 8002cd4:	69b9      	ldr	r1, [r7, #24]
 8002cd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	2203      	movs	r2, #3
 8002ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cea:	43db      	mvns	r3, r3
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f003 0203 	and.w	r2, r3, #3
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d00b      	beq.n	8002d2e <HAL_GPIO_Init+0xe6>
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d007      	beq.n	8002d2e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d22:	2b11      	cmp	r3, #17
 8002d24:	d003      	beq.n	8002d2e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	2b12      	cmp	r3, #18
 8002d2c:	d130      	bne.n	8002d90 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d34:	69fb      	ldr	r3, [r7, #28]
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	2203      	movs	r2, #3
 8002d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	4013      	ands	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	68da      	ldr	r2, [r3, #12]
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d64:	2201      	movs	r2, #1
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	4013      	ands	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	091b      	lsrs	r3, r3, #4
 8002d7a:	f003 0201 	and.w	r2, r3, #1
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	2203      	movs	r2, #3
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	43db      	mvns	r3, r3
 8002da2:	69ba      	ldr	r2, [r7, #24]
 8002da4:	4013      	ands	r3, r2
 8002da6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 80ae 	beq.w	8002f2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dce:	2300      	movs	r3, #0
 8002dd0:	60fb      	str	r3, [r7, #12]
 8002dd2:	4b5c      	ldr	r3, [pc, #368]	; (8002f44 <HAL_GPIO_Init+0x2fc>)
 8002dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd6:	4a5b      	ldr	r2, [pc, #364]	; (8002f44 <HAL_GPIO_Init+0x2fc>)
 8002dd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ddc:	6453      	str	r3, [r2, #68]	; 0x44
 8002dde:	4b59      	ldr	r3, [pc, #356]	; (8002f44 <HAL_GPIO_Init+0x2fc>)
 8002de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dea:	4a57      	ldr	r2, [pc, #348]	; (8002f48 <HAL_GPIO_Init+0x300>)
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	089b      	lsrs	r3, r3, #2
 8002df0:	3302      	adds	r3, #2
 8002df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	f003 0303 	and.w	r3, r3, #3
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	220f      	movs	r2, #15
 8002e02:	fa02 f303 	lsl.w	r3, r2, r3
 8002e06:	43db      	mvns	r3, r3
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a4e      	ldr	r2, [pc, #312]	; (8002f4c <HAL_GPIO_Init+0x304>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d025      	beq.n	8002e62 <HAL_GPIO_Init+0x21a>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a4d      	ldr	r2, [pc, #308]	; (8002f50 <HAL_GPIO_Init+0x308>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d01f      	beq.n	8002e5e <HAL_GPIO_Init+0x216>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a4c      	ldr	r2, [pc, #304]	; (8002f54 <HAL_GPIO_Init+0x30c>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d019      	beq.n	8002e5a <HAL_GPIO_Init+0x212>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a4b      	ldr	r2, [pc, #300]	; (8002f58 <HAL_GPIO_Init+0x310>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d013      	beq.n	8002e56 <HAL_GPIO_Init+0x20e>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a4a      	ldr	r2, [pc, #296]	; (8002f5c <HAL_GPIO_Init+0x314>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d00d      	beq.n	8002e52 <HAL_GPIO_Init+0x20a>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a49      	ldr	r2, [pc, #292]	; (8002f60 <HAL_GPIO_Init+0x318>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d007      	beq.n	8002e4e <HAL_GPIO_Init+0x206>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a48      	ldr	r2, [pc, #288]	; (8002f64 <HAL_GPIO_Init+0x31c>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d101      	bne.n	8002e4a <HAL_GPIO_Init+0x202>
 8002e46:	2306      	movs	r3, #6
 8002e48:	e00c      	b.n	8002e64 <HAL_GPIO_Init+0x21c>
 8002e4a:	2307      	movs	r3, #7
 8002e4c:	e00a      	b.n	8002e64 <HAL_GPIO_Init+0x21c>
 8002e4e:	2305      	movs	r3, #5
 8002e50:	e008      	b.n	8002e64 <HAL_GPIO_Init+0x21c>
 8002e52:	2304      	movs	r3, #4
 8002e54:	e006      	b.n	8002e64 <HAL_GPIO_Init+0x21c>
 8002e56:	2303      	movs	r3, #3
 8002e58:	e004      	b.n	8002e64 <HAL_GPIO_Init+0x21c>
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	e002      	b.n	8002e64 <HAL_GPIO_Init+0x21c>
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e000      	b.n	8002e64 <HAL_GPIO_Init+0x21c>
 8002e62:	2300      	movs	r3, #0
 8002e64:	69fa      	ldr	r2, [r7, #28]
 8002e66:	f002 0203 	and.w	r2, r2, #3
 8002e6a:	0092      	lsls	r2, r2, #2
 8002e6c:	4093      	lsls	r3, r2
 8002e6e:	69ba      	ldr	r2, [r7, #24]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e74:	4934      	ldr	r1, [pc, #208]	; (8002f48 <HAL_GPIO_Init+0x300>)
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	089b      	lsrs	r3, r3, #2
 8002e7a:	3302      	adds	r3, #2
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e82:	4b39      	ldr	r3, [pc, #228]	; (8002f68 <HAL_GPIO_Init+0x320>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	43db      	mvns	r3, r3
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d003      	beq.n	8002ea6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ea6:	4a30      	ldr	r2, [pc, #192]	; (8002f68 <HAL_GPIO_Init+0x320>)
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002eac:	4b2e      	ldr	r3, [pc, #184]	; (8002f68 <HAL_GPIO_Init+0x320>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d003      	beq.n	8002ed0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ed0:	4a25      	ldr	r2, [pc, #148]	; (8002f68 <HAL_GPIO_Init+0x320>)
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ed6:	4b24      	ldr	r3, [pc, #144]	; (8002f68 <HAL_GPIO_Init+0x320>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	43db      	mvns	r3, r3
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d003      	beq.n	8002efa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002efa:	4a1b      	ldr	r2, [pc, #108]	; (8002f68 <HAL_GPIO_Init+0x320>)
 8002efc:	69bb      	ldr	r3, [r7, #24]
 8002efe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f00:	4b19      	ldr	r3, [pc, #100]	; (8002f68 <HAL_GPIO_Init+0x320>)
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	43db      	mvns	r3, r3
 8002f0a:	69ba      	ldr	r2, [r7, #24]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d003      	beq.n	8002f24 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f24:	4a10      	ldr	r2, [pc, #64]	; (8002f68 <HAL_GPIO_Init+0x320>)
 8002f26:	69bb      	ldr	r3, [r7, #24]
 8002f28:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	61fb      	str	r3, [r7, #28]
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	2b0f      	cmp	r3, #15
 8002f34:	f67f ae96 	bls.w	8002c64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f38:	bf00      	nop
 8002f3a:	3724      	adds	r7, #36	; 0x24
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr
 8002f44:	40023800 	.word	0x40023800
 8002f48:	40013800 	.word	0x40013800
 8002f4c:	40020000 	.word	0x40020000
 8002f50:	40020400 	.word	0x40020400
 8002f54:	40020800 	.word	0x40020800
 8002f58:	40020c00 	.word	0x40020c00
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	40021400 	.word	0x40021400
 8002f64:	40021800 	.word	0x40021800
 8002f68:	40013c00 	.word	0x40013c00

08002f6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	460b      	mov	r3, r1
 8002f76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	691a      	ldr	r2, [r3, #16]
 8002f7c:	887b      	ldrh	r3, [r7, #2]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d002      	beq.n	8002f8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f84:	2301      	movs	r3, #1
 8002f86:	73fb      	strb	r3, [r7, #15]
 8002f88:	e001      	b.n	8002f8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3714      	adds	r7, #20
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	807b      	strh	r3, [r7, #2]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fac:	787b      	ldrb	r3, [r7, #1]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d003      	beq.n	8002fba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fb2:	887a      	ldrh	r2, [r7, #2]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fb8:	e003      	b.n	8002fc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fba:	887b      	ldrh	r3, [r7, #2]
 8002fbc:	041a      	lsls	r2, r3, #16
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	619a      	str	r2, [r3, #24]
}
 8002fc2:	bf00      	nop
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr

08002fce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	b083      	sub	sp, #12
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	695a      	ldr	r2, [r3, #20]
 8002fde:	887b      	ldrh	r3, [r7, #2]
 8002fe0:	401a      	ands	r2, r3
 8002fe2:	887b      	ldrh	r3, [r7, #2]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d104      	bne.n	8002ff2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002fe8:	887b      	ldrh	r3, [r7, #2]
 8002fea:	041a      	lsls	r2, r3, #16
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002ff0:	e002      	b.n	8002ff8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002ff2:	887a      	ldrh	r2, [r7, #2]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	619a      	str	r2, [r3, #24]
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d101      	bne.n	8003018 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e0ca      	b.n	80031ae <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003018:	4b67      	ldr	r3, [pc, #412]	; (80031b8 <HAL_RCC_ClockConfig+0x1b4>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 030f 	and.w	r3, r3, #15
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	429a      	cmp	r2, r3
 8003024:	d90c      	bls.n	8003040 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003026:	4b64      	ldr	r3, [pc, #400]	; (80031b8 <HAL_RCC_ClockConfig+0x1b4>)
 8003028:	683a      	ldr	r2, [r7, #0]
 800302a:	b2d2      	uxtb	r2, r2
 800302c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800302e:	4b62      	ldr	r3, [pc, #392]	; (80031b8 <HAL_RCC_ClockConfig+0x1b4>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 030f 	and.w	r3, r3, #15
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	429a      	cmp	r2, r3
 800303a:	d001      	beq.n	8003040 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e0b6      	b.n	80031ae <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d020      	beq.n	800308e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0304 	and.w	r3, r3, #4
 8003054:	2b00      	cmp	r3, #0
 8003056:	d005      	beq.n	8003064 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003058:	4b58      	ldr	r3, [pc, #352]	; (80031bc <HAL_RCC_ClockConfig+0x1b8>)
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	4a57      	ldr	r2, [pc, #348]	; (80031bc <HAL_RCC_ClockConfig+0x1b8>)
 800305e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003062:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0308 	and.w	r3, r3, #8
 800306c:	2b00      	cmp	r3, #0
 800306e:	d005      	beq.n	800307c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003070:	4b52      	ldr	r3, [pc, #328]	; (80031bc <HAL_RCC_ClockConfig+0x1b8>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	4a51      	ldr	r2, [pc, #324]	; (80031bc <HAL_RCC_ClockConfig+0x1b8>)
 8003076:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800307a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800307c:	4b4f      	ldr	r3, [pc, #316]	; (80031bc <HAL_RCC_ClockConfig+0x1b8>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	494c      	ldr	r1, [pc, #304]	; (80031bc <HAL_RCC_ClockConfig+0x1b8>)
 800308a:	4313      	orrs	r3, r2
 800308c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b00      	cmp	r3, #0
 8003098:	d044      	beq.n	8003124 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d107      	bne.n	80030b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030a2:	4b46      	ldr	r3, [pc, #280]	; (80031bc <HAL_RCC_ClockConfig+0x1b8>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d119      	bne.n	80030e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e07d      	b.n	80031ae <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d003      	beq.n	80030c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030be:	2b03      	cmp	r3, #3
 80030c0:	d107      	bne.n	80030d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030c2:	4b3e      	ldr	r3, [pc, #248]	; (80031bc <HAL_RCC_ClockConfig+0x1b8>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d109      	bne.n	80030e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e06d      	b.n	80031ae <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030d2:	4b3a      	ldr	r3, [pc, #232]	; (80031bc <HAL_RCC_ClockConfig+0x1b8>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e065      	b.n	80031ae <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030e2:	4b36      	ldr	r3, [pc, #216]	; (80031bc <HAL_RCC_ClockConfig+0x1b8>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f023 0203 	bic.w	r2, r3, #3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	4933      	ldr	r1, [pc, #204]	; (80031bc <HAL_RCC_ClockConfig+0x1b8>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030f4:	f7fd ff68 	bl	8000fc8 <HAL_GetTick>
 80030f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030fa:	e00a      	b.n	8003112 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030fc:	f7fd ff64 	bl	8000fc8 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	f241 3288 	movw	r2, #5000	; 0x1388
 800310a:	4293      	cmp	r3, r2
 800310c:	d901      	bls.n	8003112 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e04d      	b.n	80031ae <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003112:	4b2a      	ldr	r3, [pc, #168]	; (80031bc <HAL_RCC_ClockConfig+0x1b8>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f003 020c 	and.w	r2, r3, #12
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	429a      	cmp	r2, r3
 8003122:	d1eb      	bne.n	80030fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003124:	4b24      	ldr	r3, [pc, #144]	; (80031b8 <HAL_RCC_ClockConfig+0x1b4>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 030f 	and.w	r3, r3, #15
 800312c:	683a      	ldr	r2, [r7, #0]
 800312e:	429a      	cmp	r2, r3
 8003130:	d20c      	bcs.n	800314c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003132:	4b21      	ldr	r3, [pc, #132]	; (80031b8 <HAL_RCC_ClockConfig+0x1b4>)
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	b2d2      	uxtb	r2, r2
 8003138:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800313a:	4b1f      	ldr	r3, [pc, #124]	; (80031b8 <HAL_RCC_ClockConfig+0x1b4>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 030f 	and.w	r3, r3, #15
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	429a      	cmp	r2, r3
 8003146:	d001      	beq.n	800314c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e030      	b.n	80031ae <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	2b00      	cmp	r3, #0
 8003156:	d008      	beq.n	800316a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003158:	4b18      	ldr	r3, [pc, #96]	; (80031bc <HAL_RCC_ClockConfig+0x1b8>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	4915      	ldr	r1, [pc, #84]	; (80031bc <HAL_RCC_ClockConfig+0x1b8>)
 8003166:	4313      	orrs	r3, r2
 8003168:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0308 	and.w	r3, r3, #8
 8003172:	2b00      	cmp	r3, #0
 8003174:	d009      	beq.n	800318a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003176:	4b11      	ldr	r3, [pc, #68]	; (80031bc <HAL_RCC_ClockConfig+0x1b8>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	490d      	ldr	r1, [pc, #52]	; (80031bc <HAL_RCC_ClockConfig+0x1b8>)
 8003186:	4313      	orrs	r3, r2
 8003188:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800318a:	f000 f851 	bl	8003230 <HAL_RCC_GetSysClockFreq>
 800318e:	4601      	mov	r1, r0
 8003190:	4b0a      	ldr	r3, [pc, #40]	; (80031bc <HAL_RCC_ClockConfig+0x1b8>)
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	091b      	lsrs	r3, r3, #4
 8003196:	f003 030f 	and.w	r3, r3, #15
 800319a:	4a09      	ldr	r2, [pc, #36]	; (80031c0 <HAL_RCC_ClockConfig+0x1bc>)
 800319c:	5cd3      	ldrb	r3, [r2, r3]
 800319e:	fa21 f303 	lsr.w	r3, r1, r3
 80031a2:	4a08      	ldr	r2, [pc, #32]	; (80031c4 <HAL_RCC_ClockConfig+0x1c0>)
 80031a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80031a6:	2000      	movs	r0, #0
 80031a8:	f7fd feca 	bl	8000f40 <HAL_InitTick>

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	40023c00 	.word	0x40023c00
 80031bc:	40023800 	.word	0x40023800
 80031c0:	0801d730 	.word	0x0801d730
 80031c4:	20000038 	.word	0x20000038

080031c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031cc:	4b03      	ldr	r3, [pc, #12]	; (80031dc <HAL_RCC_GetHCLKFreq+0x14>)
 80031ce:	681b      	ldr	r3, [r3, #0]
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	20000038 	.word	0x20000038

080031e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031e4:	f7ff fff0 	bl	80031c8 <HAL_RCC_GetHCLKFreq>
 80031e8:	4601      	mov	r1, r0
 80031ea:	4b05      	ldr	r3, [pc, #20]	; (8003200 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	0a9b      	lsrs	r3, r3, #10
 80031f0:	f003 0307 	and.w	r3, r3, #7
 80031f4:	4a03      	ldr	r2, [pc, #12]	; (8003204 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031f6:	5cd3      	ldrb	r3, [r2, r3]
 80031f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	40023800 	.word	0x40023800
 8003204:	0801d740 	.word	0x0801d740

08003208 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800320c:	f7ff ffdc 	bl	80031c8 <HAL_RCC_GetHCLKFreq>
 8003210:	4601      	mov	r1, r0
 8003212:	4b05      	ldr	r3, [pc, #20]	; (8003228 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	0b5b      	lsrs	r3, r3, #13
 8003218:	f003 0307 	and.w	r3, r3, #7
 800321c:	4a03      	ldr	r2, [pc, #12]	; (800322c <HAL_RCC_GetPCLK2Freq+0x24>)
 800321e:	5cd3      	ldrb	r3, [r2, r3]
 8003220:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003224:	4618      	mov	r0, r3
 8003226:	bd80      	pop	{r7, pc}
 8003228:	40023800 	.word	0x40023800
 800322c:	0801d740 	.word	0x0801d740

08003230 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003230:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003232:	b087      	sub	sp, #28
 8003234:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003236:	2300      	movs	r3, #0
 8003238:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800323a:	2300      	movs	r3, #0
 800323c:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800323e:	2300      	movs	r3, #0
 8003240:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8003242:	2300      	movs	r3, #0
 8003244:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003246:	2300      	movs	r3, #0
 8003248:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800324a:	4bc6      	ldr	r3, [pc, #792]	; (8003564 <HAL_RCC_GetSysClockFreq+0x334>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f003 030c 	and.w	r3, r3, #12
 8003252:	2b0c      	cmp	r3, #12
 8003254:	f200 817e 	bhi.w	8003554 <HAL_RCC_GetSysClockFreq+0x324>
 8003258:	a201      	add	r2, pc, #4	; (adr r2, 8003260 <HAL_RCC_GetSysClockFreq+0x30>)
 800325a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800325e:	bf00      	nop
 8003260:	08003295 	.word	0x08003295
 8003264:	08003555 	.word	0x08003555
 8003268:	08003555 	.word	0x08003555
 800326c:	08003555 	.word	0x08003555
 8003270:	0800329b 	.word	0x0800329b
 8003274:	08003555 	.word	0x08003555
 8003278:	08003555 	.word	0x08003555
 800327c:	08003555 	.word	0x08003555
 8003280:	080032a1 	.word	0x080032a1
 8003284:	08003555 	.word	0x08003555
 8003288:	08003555 	.word	0x08003555
 800328c:	08003555 	.word	0x08003555
 8003290:	080033fd 	.word	0x080033fd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003294:	4bb4      	ldr	r3, [pc, #720]	; (8003568 <HAL_RCC_GetSysClockFreq+0x338>)
 8003296:	613b      	str	r3, [r7, #16]
       break;
 8003298:	e15f      	b.n	800355a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800329a:	4bb4      	ldr	r3, [pc, #720]	; (800356c <HAL_RCC_GetSysClockFreq+0x33c>)
 800329c:	613b      	str	r3, [r7, #16]
      break;
 800329e:	e15c      	b.n	800355a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032a0:	4bb0      	ldr	r3, [pc, #704]	; (8003564 <HAL_RCC_GetSysClockFreq+0x334>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032a8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032aa:	4bae      	ldr	r3, [pc, #696]	; (8003564 <HAL_RCC_GetSysClockFreq+0x334>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d04a      	beq.n	800334c <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032b6:	4bab      	ldr	r3, [pc, #684]	; (8003564 <HAL_RCC_GetSysClockFreq+0x334>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	099b      	lsrs	r3, r3, #6
 80032bc:	f04f 0400 	mov.w	r4, #0
 80032c0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80032c4:	f04f 0200 	mov.w	r2, #0
 80032c8:	ea03 0501 	and.w	r5, r3, r1
 80032cc:	ea04 0602 	and.w	r6, r4, r2
 80032d0:	4629      	mov	r1, r5
 80032d2:	4632      	mov	r2, r6
 80032d4:	f04f 0300 	mov.w	r3, #0
 80032d8:	f04f 0400 	mov.w	r4, #0
 80032dc:	0154      	lsls	r4, r2, #5
 80032de:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80032e2:	014b      	lsls	r3, r1, #5
 80032e4:	4619      	mov	r1, r3
 80032e6:	4622      	mov	r2, r4
 80032e8:	1b49      	subs	r1, r1, r5
 80032ea:	eb62 0206 	sbc.w	r2, r2, r6
 80032ee:	f04f 0300 	mov.w	r3, #0
 80032f2:	f04f 0400 	mov.w	r4, #0
 80032f6:	0194      	lsls	r4, r2, #6
 80032f8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80032fc:	018b      	lsls	r3, r1, #6
 80032fe:	1a5b      	subs	r3, r3, r1
 8003300:	eb64 0402 	sbc.w	r4, r4, r2
 8003304:	f04f 0100 	mov.w	r1, #0
 8003308:	f04f 0200 	mov.w	r2, #0
 800330c:	00e2      	lsls	r2, r4, #3
 800330e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003312:	00d9      	lsls	r1, r3, #3
 8003314:	460b      	mov	r3, r1
 8003316:	4614      	mov	r4, r2
 8003318:	195b      	adds	r3, r3, r5
 800331a:	eb44 0406 	adc.w	r4, r4, r6
 800331e:	f04f 0100 	mov.w	r1, #0
 8003322:	f04f 0200 	mov.w	r2, #0
 8003326:	0262      	lsls	r2, r4, #9
 8003328:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800332c:	0259      	lsls	r1, r3, #9
 800332e:	460b      	mov	r3, r1
 8003330:	4614      	mov	r4, r2
 8003332:	4618      	mov	r0, r3
 8003334:	4621      	mov	r1, r4
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f04f 0400 	mov.w	r4, #0
 800333c:	461a      	mov	r2, r3
 800333e:	4623      	mov	r3, r4
 8003340:	f7fd fc5c 	bl	8000bfc <__aeabi_uldivmod>
 8003344:	4603      	mov	r3, r0
 8003346:	460c      	mov	r4, r1
 8003348:	617b      	str	r3, [r7, #20]
 800334a:	e049      	b.n	80033e0 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800334c:	4b85      	ldr	r3, [pc, #532]	; (8003564 <HAL_RCC_GetSysClockFreq+0x334>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	099b      	lsrs	r3, r3, #6
 8003352:	f04f 0400 	mov.w	r4, #0
 8003356:	f240 11ff 	movw	r1, #511	; 0x1ff
 800335a:	f04f 0200 	mov.w	r2, #0
 800335e:	ea03 0501 	and.w	r5, r3, r1
 8003362:	ea04 0602 	and.w	r6, r4, r2
 8003366:	4629      	mov	r1, r5
 8003368:	4632      	mov	r2, r6
 800336a:	f04f 0300 	mov.w	r3, #0
 800336e:	f04f 0400 	mov.w	r4, #0
 8003372:	0154      	lsls	r4, r2, #5
 8003374:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003378:	014b      	lsls	r3, r1, #5
 800337a:	4619      	mov	r1, r3
 800337c:	4622      	mov	r2, r4
 800337e:	1b49      	subs	r1, r1, r5
 8003380:	eb62 0206 	sbc.w	r2, r2, r6
 8003384:	f04f 0300 	mov.w	r3, #0
 8003388:	f04f 0400 	mov.w	r4, #0
 800338c:	0194      	lsls	r4, r2, #6
 800338e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003392:	018b      	lsls	r3, r1, #6
 8003394:	1a5b      	subs	r3, r3, r1
 8003396:	eb64 0402 	sbc.w	r4, r4, r2
 800339a:	f04f 0100 	mov.w	r1, #0
 800339e:	f04f 0200 	mov.w	r2, #0
 80033a2:	00e2      	lsls	r2, r4, #3
 80033a4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80033a8:	00d9      	lsls	r1, r3, #3
 80033aa:	460b      	mov	r3, r1
 80033ac:	4614      	mov	r4, r2
 80033ae:	195b      	adds	r3, r3, r5
 80033b0:	eb44 0406 	adc.w	r4, r4, r6
 80033b4:	f04f 0100 	mov.w	r1, #0
 80033b8:	f04f 0200 	mov.w	r2, #0
 80033bc:	02a2      	lsls	r2, r4, #10
 80033be:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80033c2:	0299      	lsls	r1, r3, #10
 80033c4:	460b      	mov	r3, r1
 80033c6:	4614      	mov	r4, r2
 80033c8:	4618      	mov	r0, r3
 80033ca:	4621      	mov	r1, r4
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f04f 0400 	mov.w	r4, #0
 80033d2:	461a      	mov	r2, r3
 80033d4:	4623      	mov	r3, r4
 80033d6:	f7fd fc11 	bl	8000bfc <__aeabi_uldivmod>
 80033da:	4603      	mov	r3, r0
 80033dc:	460c      	mov	r4, r1
 80033de:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033e0:	4b60      	ldr	r3, [pc, #384]	; (8003564 <HAL_RCC_GetSysClockFreq+0x334>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	0c1b      	lsrs	r3, r3, #16
 80033e6:	f003 0303 	and.w	r3, r3, #3
 80033ea:	3301      	adds	r3, #1
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80033f0:	697a      	ldr	r2, [r7, #20]
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f8:	613b      	str	r3, [r7, #16]
      break;
 80033fa:	e0ae      	b.n	800355a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033fc:	4b59      	ldr	r3, [pc, #356]	; (8003564 <HAL_RCC_GetSysClockFreq+0x334>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003404:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003406:	4b57      	ldr	r3, [pc, #348]	; (8003564 <HAL_RCC_GetSysClockFreq+0x334>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d04a      	beq.n	80034a8 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003412:	4b54      	ldr	r3, [pc, #336]	; (8003564 <HAL_RCC_GetSysClockFreq+0x334>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	099b      	lsrs	r3, r3, #6
 8003418:	f04f 0400 	mov.w	r4, #0
 800341c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003420:	f04f 0200 	mov.w	r2, #0
 8003424:	ea03 0501 	and.w	r5, r3, r1
 8003428:	ea04 0602 	and.w	r6, r4, r2
 800342c:	4629      	mov	r1, r5
 800342e:	4632      	mov	r2, r6
 8003430:	f04f 0300 	mov.w	r3, #0
 8003434:	f04f 0400 	mov.w	r4, #0
 8003438:	0154      	lsls	r4, r2, #5
 800343a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800343e:	014b      	lsls	r3, r1, #5
 8003440:	4619      	mov	r1, r3
 8003442:	4622      	mov	r2, r4
 8003444:	1b49      	subs	r1, r1, r5
 8003446:	eb62 0206 	sbc.w	r2, r2, r6
 800344a:	f04f 0300 	mov.w	r3, #0
 800344e:	f04f 0400 	mov.w	r4, #0
 8003452:	0194      	lsls	r4, r2, #6
 8003454:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003458:	018b      	lsls	r3, r1, #6
 800345a:	1a5b      	subs	r3, r3, r1
 800345c:	eb64 0402 	sbc.w	r4, r4, r2
 8003460:	f04f 0100 	mov.w	r1, #0
 8003464:	f04f 0200 	mov.w	r2, #0
 8003468:	00e2      	lsls	r2, r4, #3
 800346a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800346e:	00d9      	lsls	r1, r3, #3
 8003470:	460b      	mov	r3, r1
 8003472:	4614      	mov	r4, r2
 8003474:	195b      	adds	r3, r3, r5
 8003476:	eb44 0406 	adc.w	r4, r4, r6
 800347a:	f04f 0100 	mov.w	r1, #0
 800347e:	f04f 0200 	mov.w	r2, #0
 8003482:	0262      	lsls	r2, r4, #9
 8003484:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003488:	0259      	lsls	r1, r3, #9
 800348a:	460b      	mov	r3, r1
 800348c:	4614      	mov	r4, r2
 800348e:	4618      	mov	r0, r3
 8003490:	4621      	mov	r1, r4
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f04f 0400 	mov.w	r4, #0
 8003498:	461a      	mov	r2, r3
 800349a:	4623      	mov	r3, r4
 800349c:	f7fd fbae 	bl	8000bfc <__aeabi_uldivmod>
 80034a0:	4603      	mov	r3, r0
 80034a2:	460c      	mov	r4, r1
 80034a4:	617b      	str	r3, [r7, #20]
 80034a6:	e049      	b.n	800353c <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034a8:	4b2e      	ldr	r3, [pc, #184]	; (8003564 <HAL_RCC_GetSysClockFreq+0x334>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	099b      	lsrs	r3, r3, #6
 80034ae:	f04f 0400 	mov.w	r4, #0
 80034b2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80034b6:	f04f 0200 	mov.w	r2, #0
 80034ba:	ea03 0501 	and.w	r5, r3, r1
 80034be:	ea04 0602 	and.w	r6, r4, r2
 80034c2:	4629      	mov	r1, r5
 80034c4:	4632      	mov	r2, r6
 80034c6:	f04f 0300 	mov.w	r3, #0
 80034ca:	f04f 0400 	mov.w	r4, #0
 80034ce:	0154      	lsls	r4, r2, #5
 80034d0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80034d4:	014b      	lsls	r3, r1, #5
 80034d6:	4619      	mov	r1, r3
 80034d8:	4622      	mov	r2, r4
 80034da:	1b49      	subs	r1, r1, r5
 80034dc:	eb62 0206 	sbc.w	r2, r2, r6
 80034e0:	f04f 0300 	mov.w	r3, #0
 80034e4:	f04f 0400 	mov.w	r4, #0
 80034e8:	0194      	lsls	r4, r2, #6
 80034ea:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80034ee:	018b      	lsls	r3, r1, #6
 80034f0:	1a5b      	subs	r3, r3, r1
 80034f2:	eb64 0402 	sbc.w	r4, r4, r2
 80034f6:	f04f 0100 	mov.w	r1, #0
 80034fa:	f04f 0200 	mov.w	r2, #0
 80034fe:	00e2      	lsls	r2, r4, #3
 8003500:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003504:	00d9      	lsls	r1, r3, #3
 8003506:	460b      	mov	r3, r1
 8003508:	4614      	mov	r4, r2
 800350a:	195b      	adds	r3, r3, r5
 800350c:	eb44 0406 	adc.w	r4, r4, r6
 8003510:	f04f 0100 	mov.w	r1, #0
 8003514:	f04f 0200 	mov.w	r2, #0
 8003518:	02a2      	lsls	r2, r4, #10
 800351a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800351e:	0299      	lsls	r1, r3, #10
 8003520:	460b      	mov	r3, r1
 8003522:	4614      	mov	r4, r2
 8003524:	4618      	mov	r0, r3
 8003526:	4621      	mov	r1, r4
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f04f 0400 	mov.w	r4, #0
 800352e:	461a      	mov	r2, r3
 8003530:	4623      	mov	r3, r4
 8003532:	f7fd fb63 	bl	8000bfc <__aeabi_uldivmod>
 8003536:	4603      	mov	r3, r0
 8003538:	460c      	mov	r4, r1
 800353a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800353c:	4b09      	ldr	r3, [pc, #36]	; (8003564 <HAL_RCC_GetSysClockFreq+0x334>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	0f1b      	lsrs	r3, r3, #28
 8003542:	f003 0307 	and.w	r3, r3, #7
 8003546:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003550:	613b      	str	r3, [r7, #16]
      break;
 8003552:	e002      	b.n	800355a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003554:	4b04      	ldr	r3, [pc, #16]	; (8003568 <HAL_RCC_GetSysClockFreq+0x338>)
 8003556:	613b      	str	r3, [r7, #16]
      break;
 8003558:	bf00      	nop
    }
  }
  return sysclockfreq;
 800355a:	693b      	ldr	r3, [r7, #16]
}
 800355c:	4618      	mov	r0, r3
 800355e:	371c      	adds	r7, #28
 8003560:	46bd      	mov	sp, r7
 8003562:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003564:	40023800 	.word	0x40023800
 8003568:	00f42400 	.word	0x00f42400
 800356c:	007a1200 	.word	0x007a1200

08003570 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b086      	sub	sp, #24
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003578:	2300      	movs	r3, #0
 800357a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0301 	and.w	r3, r3, #1
 8003584:	2b00      	cmp	r3, #0
 8003586:	f000 8083 	beq.w	8003690 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800358a:	4b95      	ldr	r3, [pc, #596]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f003 030c 	and.w	r3, r3, #12
 8003592:	2b04      	cmp	r3, #4
 8003594:	d019      	beq.n	80035ca <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003596:	4b92      	ldr	r3, [pc, #584]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800359e:	2b08      	cmp	r3, #8
 80035a0:	d106      	bne.n	80035b0 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80035a2:	4b8f      	ldr	r3, [pc, #572]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035ae:	d00c      	beq.n	80035ca <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035b0:	4b8b      	ldr	r3, [pc, #556]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80035b8:	2b0c      	cmp	r3, #12
 80035ba:	d112      	bne.n	80035e2 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035bc:	4b88      	ldr	r3, [pc, #544]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035c8:	d10b      	bne.n	80035e2 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ca:	4b85      	ldr	r3, [pc, #532]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d05b      	beq.n	800368e <HAL_RCC_OscConfig+0x11e>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d157      	bne.n	800368e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e216      	b.n	8003a10 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035ea:	d106      	bne.n	80035fa <HAL_RCC_OscConfig+0x8a>
 80035ec:	4b7c      	ldr	r3, [pc, #496]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a7b      	ldr	r2, [pc, #492]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 80035f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035f6:	6013      	str	r3, [r2, #0]
 80035f8:	e01d      	b.n	8003636 <HAL_RCC_OscConfig+0xc6>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003602:	d10c      	bne.n	800361e <HAL_RCC_OscConfig+0xae>
 8003604:	4b76      	ldr	r3, [pc, #472]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a75      	ldr	r2, [pc, #468]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 800360a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800360e:	6013      	str	r3, [r2, #0]
 8003610:	4b73      	ldr	r3, [pc, #460]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a72      	ldr	r2, [pc, #456]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 8003616:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800361a:	6013      	str	r3, [r2, #0]
 800361c:	e00b      	b.n	8003636 <HAL_RCC_OscConfig+0xc6>
 800361e:	4b70      	ldr	r3, [pc, #448]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a6f      	ldr	r2, [pc, #444]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 8003624:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003628:	6013      	str	r3, [r2, #0]
 800362a:	4b6d      	ldr	r3, [pc, #436]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a6c      	ldr	r2, [pc, #432]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 8003630:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003634:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d013      	beq.n	8003666 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800363e:	f7fd fcc3 	bl	8000fc8 <HAL_GetTick>
 8003642:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003644:	e008      	b.n	8003658 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003646:	f7fd fcbf 	bl	8000fc8 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	2b64      	cmp	r3, #100	; 0x64
 8003652:	d901      	bls.n	8003658 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e1db      	b.n	8003a10 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003658:	4b61      	ldr	r3, [pc, #388]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d0f0      	beq.n	8003646 <HAL_RCC_OscConfig+0xd6>
 8003664:	e014      	b.n	8003690 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003666:	f7fd fcaf 	bl	8000fc8 <HAL_GetTick>
 800366a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800366c:	e008      	b.n	8003680 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800366e:	f7fd fcab 	bl	8000fc8 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b64      	cmp	r3, #100	; 0x64
 800367a:	d901      	bls.n	8003680 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e1c7      	b.n	8003a10 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003680:	4b57      	ldr	r3, [pc, #348]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1f0      	bne.n	800366e <HAL_RCC_OscConfig+0xfe>
 800368c:	e000      	b.n	8003690 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800368e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d06f      	beq.n	800377c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800369c:	4b50      	ldr	r3, [pc, #320]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f003 030c 	and.w	r3, r3, #12
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d017      	beq.n	80036d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80036a8:	4b4d      	ldr	r3, [pc, #308]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80036b0:	2b08      	cmp	r3, #8
 80036b2:	d105      	bne.n	80036c0 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80036b4:	4b4a      	ldr	r3, [pc, #296]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00b      	beq.n	80036d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036c0:	4b47      	ldr	r3, [pc, #284]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80036c8:	2b0c      	cmp	r3, #12
 80036ca:	d11c      	bne.n	8003706 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036cc:	4b44      	ldr	r3, [pc, #272]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d116      	bne.n	8003706 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036d8:	4b41      	ldr	r3, [pc, #260]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d005      	beq.n	80036f0 <HAL_RCC_OscConfig+0x180>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	68db      	ldr	r3, [r3, #12]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d001      	beq.n	80036f0 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e18f      	b.n	8003a10 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036f0:	4b3b      	ldr	r3, [pc, #236]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	691b      	ldr	r3, [r3, #16]
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	4938      	ldr	r1, [pc, #224]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 8003700:	4313      	orrs	r3, r2
 8003702:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003704:	e03a      	b.n	800377c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d020      	beq.n	8003750 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800370e:	4b35      	ldr	r3, [pc, #212]	; (80037e4 <HAL_RCC_OscConfig+0x274>)
 8003710:	2201      	movs	r2, #1
 8003712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003714:	f7fd fc58 	bl	8000fc8 <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800371c:	f7fd fc54 	bl	8000fc8 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b02      	cmp	r3, #2
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e170      	b.n	8003a10 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800372e:	4b2c      	ldr	r3, [pc, #176]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d0f0      	beq.n	800371c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800373a:	4b29      	ldr	r3, [pc, #164]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	4925      	ldr	r1, [pc, #148]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 800374a:	4313      	orrs	r3, r2
 800374c:	600b      	str	r3, [r1, #0]
 800374e:	e015      	b.n	800377c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003750:	4b24      	ldr	r3, [pc, #144]	; (80037e4 <HAL_RCC_OscConfig+0x274>)
 8003752:	2200      	movs	r2, #0
 8003754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003756:	f7fd fc37 	bl	8000fc8 <HAL_GetTick>
 800375a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800375c:	e008      	b.n	8003770 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800375e:	f7fd fc33 	bl	8000fc8 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d901      	bls.n	8003770 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e14f      	b.n	8003a10 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003770:	4b1b      	ldr	r3, [pc, #108]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1f0      	bne.n	800375e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0308 	and.w	r3, r3, #8
 8003784:	2b00      	cmp	r3, #0
 8003786:	d037      	beq.n	80037f8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	695b      	ldr	r3, [r3, #20]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d016      	beq.n	80037be <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003790:	4b15      	ldr	r3, [pc, #84]	; (80037e8 <HAL_RCC_OscConfig+0x278>)
 8003792:	2201      	movs	r2, #1
 8003794:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003796:	f7fd fc17 	bl	8000fc8 <HAL_GetTick>
 800379a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800379c:	e008      	b.n	80037b0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800379e:	f7fd fc13 	bl	8000fc8 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d901      	bls.n	80037b0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e12f      	b.n	8003a10 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037b0:	4b0b      	ldr	r3, [pc, #44]	; (80037e0 <HAL_RCC_OscConfig+0x270>)
 80037b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d0f0      	beq.n	800379e <HAL_RCC_OscConfig+0x22e>
 80037bc:	e01c      	b.n	80037f8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037be:	4b0a      	ldr	r3, [pc, #40]	; (80037e8 <HAL_RCC_OscConfig+0x278>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c4:	f7fd fc00 	bl	8000fc8 <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037ca:	e00f      	b.n	80037ec <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037cc:	f7fd fbfc 	bl	8000fc8 <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d908      	bls.n	80037ec <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e118      	b.n	8003a10 <HAL_RCC_OscConfig+0x4a0>
 80037de:	bf00      	nop
 80037e0:	40023800 	.word	0x40023800
 80037e4:	42470000 	.word	0x42470000
 80037e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037ec:	4b8a      	ldr	r3, [pc, #552]	; (8003a18 <HAL_RCC_OscConfig+0x4a8>)
 80037ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1e9      	bne.n	80037cc <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0304 	and.w	r3, r3, #4
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 8097 	beq.w	8003934 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003806:	2300      	movs	r3, #0
 8003808:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800380a:	4b83      	ldr	r3, [pc, #524]	; (8003a18 <HAL_RCC_OscConfig+0x4a8>)
 800380c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d10f      	bne.n	8003836 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003816:	2300      	movs	r3, #0
 8003818:	60fb      	str	r3, [r7, #12]
 800381a:	4b7f      	ldr	r3, [pc, #508]	; (8003a18 <HAL_RCC_OscConfig+0x4a8>)
 800381c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381e:	4a7e      	ldr	r2, [pc, #504]	; (8003a18 <HAL_RCC_OscConfig+0x4a8>)
 8003820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003824:	6413      	str	r3, [r2, #64]	; 0x40
 8003826:	4b7c      	ldr	r3, [pc, #496]	; (8003a18 <HAL_RCC_OscConfig+0x4a8>)
 8003828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800382e:	60fb      	str	r3, [r7, #12]
 8003830:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003832:	2301      	movs	r3, #1
 8003834:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003836:	4b79      	ldr	r3, [pc, #484]	; (8003a1c <HAL_RCC_OscConfig+0x4ac>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800383e:	2b00      	cmp	r3, #0
 8003840:	d118      	bne.n	8003874 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003842:	4b76      	ldr	r3, [pc, #472]	; (8003a1c <HAL_RCC_OscConfig+0x4ac>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a75      	ldr	r2, [pc, #468]	; (8003a1c <HAL_RCC_OscConfig+0x4ac>)
 8003848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800384c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800384e:	f7fd fbbb 	bl	8000fc8 <HAL_GetTick>
 8003852:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003854:	e008      	b.n	8003868 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003856:	f7fd fbb7 	bl	8000fc8 <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	2b02      	cmp	r3, #2
 8003862:	d901      	bls.n	8003868 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e0d3      	b.n	8003a10 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003868:	4b6c      	ldr	r3, [pc, #432]	; (8003a1c <HAL_RCC_OscConfig+0x4ac>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003870:	2b00      	cmp	r3, #0
 8003872:	d0f0      	beq.n	8003856 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d106      	bne.n	800388a <HAL_RCC_OscConfig+0x31a>
 800387c:	4b66      	ldr	r3, [pc, #408]	; (8003a18 <HAL_RCC_OscConfig+0x4a8>)
 800387e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003880:	4a65      	ldr	r2, [pc, #404]	; (8003a18 <HAL_RCC_OscConfig+0x4a8>)
 8003882:	f043 0301 	orr.w	r3, r3, #1
 8003886:	6713      	str	r3, [r2, #112]	; 0x70
 8003888:	e01c      	b.n	80038c4 <HAL_RCC_OscConfig+0x354>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	2b05      	cmp	r3, #5
 8003890:	d10c      	bne.n	80038ac <HAL_RCC_OscConfig+0x33c>
 8003892:	4b61      	ldr	r3, [pc, #388]	; (8003a18 <HAL_RCC_OscConfig+0x4a8>)
 8003894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003896:	4a60      	ldr	r2, [pc, #384]	; (8003a18 <HAL_RCC_OscConfig+0x4a8>)
 8003898:	f043 0304 	orr.w	r3, r3, #4
 800389c:	6713      	str	r3, [r2, #112]	; 0x70
 800389e:	4b5e      	ldr	r3, [pc, #376]	; (8003a18 <HAL_RCC_OscConfig+0x4a8>)
 80038a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a2:	4a5d      	ldr	r2, [pc, #372]	; (8003a18 <HAL_RCC_OscConfig+0x4a8>)
 80038a4:	f043 0301 	orr.w	r3, r3, #1
 80038a8:	6713      	str	r3, [r2, #112]	; 0x70
 80038aa:	e00b      	b.n	80038c4 <HAL_RCC_OscConfig+0x354>
 80038ac:	4b5a      	ldr	r3, [pc, #360]	; (8003a18 <HAL_RCC_OscConfig+0x4a8>)
 80038ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b0:	4a59      	ldr	r2, [pc, #356]	; (8003a18 <HAL_RCC_OscConfig+0x4a8>)
 80038b2:	f023 0301 	bic.w	r3, r3, #1
 80038b6:	6713      	str	r3, [r2, #112]	; 0x70
 80038b8:	4b57      	ldr	r3, [pc, #348]	; (8003a18 <HAL_RCC_OscConfig+0x4a8>)
 80038ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038bc:	4a56      	ldr	r2, [pc, #344]	; (8003a18 <HAL_RCC_OscConfig+0x4a8>)
 80038be:	f023 0304 	bic.w	r3, r3, #4
 80038c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d015      	beq.n	80038f8 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038cc:	f7fd fb7c 	bl	8000fc8 <HAL_GetTick>
 80038d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038d2:	e00a      	b.n	80038ea <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038d4:	f7fd fb78 	bl	8000fc8 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e092      	b.n	8003a10 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ea:	4b4b      	ldr	r3, [pc, #300]	; (8003a18 <HAL_RCC_OscConfig+0x4a8>)
 80038ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d0ee      	beq.n	80038d4 <HAL_RCC_OscConfig+0x364>
 80038f6:	e014      	b.n	8003922 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f8:	f7fd fb66 	bl	8000fc8 <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038fe:	e00a      	b.n	8003916 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003900:	f7fd fb62 	bl	8000fc8 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	f241 3288 	movw	r2, #5000	; 0x1388
 800390e:	4293      	cmp	r3, r2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e07c      	b.n	8003a10 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003916:	4b40      	ldr	r3, [pc, #256]	; (8003a18 <HAL_RCC_OscConfig+0x4a8>)
 8003918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1ee      	bne.n	8003900 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003922:	7dfb      	ldrb	r3, [r7, #23]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d105      	bne.n	8003934 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003928:	4b3b      	ldr	r3, [pc, #236]	; (8003a18 <HAL_RCC_OscConfig+0x4a8>)
 800392a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392c:	4a3a      	ldr	r2, [pc, #232]	; (8003a18 <HAL_RCC_OscConfig+0x4a8>)
 800392e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003932:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d068      	beq.n	8003a0e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800393c:	4b36      	ldr	r3, [pc, #216]	; (8003a18 <HAL_RCC_OscConfig+0x4a8>)
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	f003 030c 	and.w	r3, r3, #12
 8003944:	2b08      	cmp	r3, #8
 8003946:	d060      	beq.n	8003a0a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	699b      	ldr	r3, [r3, #24]
 800394c:	2b02      	cmp	r3, #2
 800394e:	d145      	bne.n	80039dc <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003950:	4b33      	ldr	r3, [pc, #204]	; (8003a20 <HAL_RCC_OscConfig+0x4b0>)
 8003952:	2200      	movs	r2, #0
 8003954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003956:	f7fd fb37 	bl	8000fc8 <HAL_GetTick>
 800395a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800395c:	e008      	b.n	8003970 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800395e:	f7fd fb33 	bl	8000fc8 <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	2b02      	cmp	r3, #2
 800396a:	d901      	bls.n	8003970 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e04f      	b.n	8003a10 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003970:	4b29      	ldr	r3, [pc, #164]	; (8003a18 <HAL_RCC_OscConfig+0x4a8>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1f0      	bne.n	800395e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	69da      	ldr	r2, [r3, #28]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6a1b      	ldr	r3, [r3, #32]
 8003984:	431a      	orrs	r2, r3
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398a:	019b      	lsls	r3, r3, #6
 800398c:	431a      	orrs	r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003992:	085b      	lsrs	r3, r3, #1
 8003994:	3b01      	subs	r3, #1
 8003996:	041b      	lsls	r3, r3, #16
 8003998:	431a      	orrs	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399e:	061b      	lsls	r3, r3, #24
 80039a0:	431a      	orrs	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a6:	071b      	lsls	r3, r3, #28
 80039a8:	491b      	ldr	r1, [pc, #108]	; (8003a18 <HAL_RCC_OscConfig+0x4a8>)
 80039aa:	4313      	orrs	r3, r2
 80039ac:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039ae:	4b1c      	ldr	r3, [pc, #112]	; (8003a20 <HAL_RCC_OscConfig+0x4b0>)
 80039b0:	2201      	movs	r2, #1
 80039b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b4:	f7fd fb08 	bl	8000fc8 <HAL_GetTick>
 80039b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ba:	e008      	b.n	80039ce <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039bc:	f7fd fb04 	bl	8000fc8 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e020      	b.n	8003a10 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ce:	4b12      	ldr	r3, [pc, #72]	; (8003a18 <HAL_RCC_OscConfig+0x4a8>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d0f0      	beq.n	80039bc <HAL_RCC_OscConfig+0x44c>
 80039da:	e018      	b.n	8003a0e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039dc:	4b10      	ldr	r3, [pc, #64]	; (8003a20 <HAL_RCC_OscConfig+0x4b0>)
 80039de:	2200      	movs	r2, #0
 80039e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e2:	f7fd faf1 	bl	8000fc8 <HAL_GetTick>
 80039e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039e8:	e008      	b.n	80039fc <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039ea:	f7fd faed 	bl	8000fc8 <HAL_GetTick>
 80039ee:	4602      	mov	r2, r0
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	1ad3      	subs	r3, r2, r3
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d901      	bls.n	80039fc <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e009      	b.n	8003a10 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039fc:	4b06      	ldr	r3, [pc, #24]	; (8003a18 <HAL_RCC_OscConfig+0x4a8>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1f0      	bne.n	80039ea <HAL_RCC_OscConfig+0x47a>
 8003a08:	e001      	b.n	8003a0e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e000      	b.n	8003a10 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3718      	adds	r7, #24
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	40023800 	.word	0x40023800
 8003a1c:	40007000 	.word	0x40007000
 8003a20:	42470060 	.word	0x42470060

08003a24 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b082      	sub	sp, #8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e056      	b.n	8003ae4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d106      	bne.n	8003a56 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f004 fa4b 	bl	8007eec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2202      	movs	r2, #2
 8003a5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a6c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685a      	ldr	r2, [r3, #4]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	431a      	orrs	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	431a      	orrs	r2, r3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	431a      	orrs	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	695b      	ldr	r3, [r3, #20]
 8003a88:	431a      	orrs	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a92:	431a      	orrs	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	69db      	ldr	r3, [r3, #28]
 8003a98:	431a      	orrs	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a1b      	ldr	r3, [r3, #32]
 8003a9e:	ea42 0103 	orr.w	r1, r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	430a      	orrs	r2, r1
 8003aac:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	0c1b      	lsrs	r3, r3, #16
 8003ab4:	f003 0104 	and.w	r1, r3, #4
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	69da      	ldr	r2, [r3, #28]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ad2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003ae2:	2300      	movs	r3, #0
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3708      	adds	r7, #8
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b087      	sub	sp, #28
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
 8003af8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003afa:	2300      	movs	r3, #0
 8003afc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d101      	bne.n	8003b0c <HAL_SPI_TransmitReceive_IT+0x20>
 8003b08:	2302      	movs	r3, #2
 8003b0a:	e075      	b.n	8003bf8 <HAL_SPI_TransmitReceive_IT+0x10c>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b1a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003b22:	7dbb      	ldrb	r3, [r7, #22]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d00d      	beq.n	8003b44 <HAL_SPI_TransmitReceive_IT+0x58>
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b2e:	d106      	bne.n	8003b3e <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d102      	bne.n	8003b3e <HAL_SPI_TransmitReceive_IT+0x52>
 8003b38:	7dbb      	ldrb	r3, [r7, #22]
 8003b3a:	2b04      	cmp	r3, #4
 8003b3c:	d002      	beq.n	8003b44 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8003b3e:	2302      	movs	r3, #2
 8003b40:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b42:	e054      	b.n	8003bee <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d005      	beq.n	8003b56 <HAL_SPI_TransmitReceive_IT+0x6a>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d002      	beq.n	8003b56 <HAL_SPI_TransmitReceive_IT+0x6a>
 8003b50:	887b      	ldrh	r3, [r7, #2]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d102      	bne.n	8003b5c <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003b5a:	e048      	b.n	8003bee <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2b04      	cmp	r3, #4
 8003b66:	d003      	beq.n	8003b70 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2205      	movs	r2, #5
 8003b6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	68ba      	ldr	r2, [r7, #8]
 8003b7a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	887a      	ldrh	r2, [r7, #2]
 8003b80:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	887a      	ldrh	r2, [r7, #2]
 8003b86:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	887a      	ldrh	r2, [r7, #2]
 8003b92:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	887a      	ldrh	r2, [r7, #2]
 8003b98:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d006      	beq.n	8003bb0 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	4a17      	ldr	r2, [pc, #92]	; (8003c04 <HAL_SPI_TransmitReceive_IT+0x118>)
 8003ba6:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	4a17      	ldr	r2, [pc, #92]	; (8003c08 <HAL_SPI_TransmitReceive_IT+0x11c>)
 8003bac:	645a      	str	r2, [r3, #68]	; 0x44
 8003bae:	e005      	b.n	8003bbc <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	4a16      	ldr	r2, [pc, #88]	; (8003c0c <HAL_SPI_TransmitReceive_IT+0x120>)
 8003bb4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	4a15      	ldr	r2, [pc, #84]	; (8003c10 <HAL_SPI_TransmitReceive_IT+0x124>)
 8003bba:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	685a      	ldr	r2, [r3, #4]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8003bca:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd6:	2b40      	cmp	r3, #64	; 0x40
 8003bd8:	d008      	beq.n	8003bec <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003be8:	601a      	str	r2, [r3, #0]
 8003bea:	e000      	b.n	8003bee <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8003bec:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	371c      	adds	r7, #28
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr
 8003c04:	08003f3d 	.word	0x08003f3d
 8003c08:	08003f9d 	.word	0x08003f9d
 8003c0c:	08003e79 	.word	0x08003e79
 8003c10:	08003edd 	.word	0x08003edd

08003c14 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b088      	sub	sp, #32
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	099b      	lsrs	r3, r3, #6
 8003c30:	f003 0301 	and.w	r3, r3, #1
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d10f      	bne.n	8003c58 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00a      	beq.n	8003c58 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	099b      	lsrs	r3, r3, #6
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d004      	beq.n	8003c58 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	4798      	blx	r3
    return;
 8003c56:	e0d8      	b.n	8003e0a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	085b      	lsrs	r3, r3, #1
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00a      	beq.n	8003c7a <HAL_SPI_IRQHandler+0x66>
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	09db      	lsrs	r3, r3, #7
 8003c68:	f003 0301 	and.w	r3, r3, #1
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d004      	beq.n	8003c7a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	4798      	blx	r3
    return;
 8003c78:	e0c7      	b.n	8003e0a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003c7a:	69bb      	ldr	r3, [r7, #24]
 8003c7c:	095b      	lsrs	r3, r3, #5
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10c      	bne.n	8003ca0 <HAL_SPI_IRQHandler+0x8c>
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	099b      	lsrs	r3, r3, #6
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d106      	bne.n	8003ca0 <HAL_SPI_IRQHandler+0x8c>
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	0a1b      	lsrs	r3, r3, #8
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f000 80b5 	beq.w	8003e0a <HAL_SPI_IRQHandler+0x1f6>
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	095b      	lsrs	r3, r3, #5
 8003ca4:	f003 0301 	and.w	r3, r3, #1
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f000 80ae 	beq.w	8003e0a <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	099b      	lsrs	r3, r3, #6
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d023      	beq.n	8003d02 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b03      	cmp	r3, #3
 8003cc4:	d011      	beq.n	8003cea <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cca:	f043 0204 	orr.w	r2, r3, #4
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	617b      	str	r3, [r7, #20]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	617b      	str	r3, [r7, #20]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	617b      	str	r3, [r7, #20]
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	e00b      	b.n	8003d02 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cea:	2300      	movs	r3, #0
 8003cec:	613b      	str	r3, [r7, #16]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	613b      	str	r3, [r7, #16]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	613b      	str	r3, [r7, #16]
 8003cfe:	693b      	ldr	r3, [r7, #16]
        return;
 8003d00:	e083      	b.n	8003e0a <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	095b      	lsrs	r3, r3, #5
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d014      	beq.n	8003d38 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d12:	f043 0201 	orr.w	r2, r3, #1
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	60fb      	str	r3, [r7, #12]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	60fb      	str	r3, [r7, #12]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d34:	601a      	str	r2, [r3, #0]
 8003d36:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	0a1b      	lsrs	r3, r3, #8
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00c      	beq.n	8003d5e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d48:	f043 0208 	orr.w	r2, r3, #8
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003d50:	2300      	movs	r3, #0
 8003d52:	60bb      	str	r3, [r7, #8]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	60bb      	str	r3, [r7, #8]
 8003d5c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d050      	beq.n	8003e08 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d74:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	f003 0302 	and.w	r3, r3, #2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d104      	bne.n	8003d92 <HAL_SPI_IRQHandler+0x17e>
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d034      	beq.n	8003dfc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	685a      	ldr	r2, [r3, #4]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f022 0203 	bic.w	r2, r2, #3
 8003da0:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d011      	beq.n	8003dce <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dae:	4a18      	ldr	r2, [pc, #96]	; (8003e10 <HAL_SPI_IRQHandler+0x1fc>)
 8003db0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7fe fcbc 	bl	8002734 <HAL_DMA_Abort_IT>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d005      	beq.n	8003dce <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d016      	beq.n	8003e04 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dda:	4a0d      	ldr	r2, [pc, #52]	; (8003e10 <HAL_SPI_IRQHandler+0x1fc>)
 8003ddc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7fe fca6 	bl	8002734 <HAL_DMA_Abort_IT>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00a      	beq.n	8003e04 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003dfa:	e003      	b.n	8003e04 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 f81d 	bl	8003e3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003e02:	e000      	b.n	8003e06 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003e04:	bf00      	nop
    return;
 8003e06:	bf00      	nop
 8003e08:	bf00      	nop
  }
}
 8003e0a:	3720      	adds	r7, #32
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}
 8003e10:	08003e51 	.word	0x08003e51

08003e14 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003e44:	bf00      	nop
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003e6a:	68f8      	ldr	r0, [r7, #12]
 8003e6c:	f7ff ffe6 	bl	8003e3c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003e70:	bf00      	nop
 8003e72:	3710      	adds	r7, #16
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f103 020c 	add.w	r2, r3, #12
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e8c:	7812      	ldrb	r2, [r2, #0]
 8003e8e:	b2d2      	uxtb	r2, r2
 8003e90:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e96:	1c5a      	adds	r2, r3, #1
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	3b01      	subs	r3, #1
 8003ea4:	b29a      	uxth	r2, r3
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d10f      	bne.n	8003ed4 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	685a      	ldr	r2, [r3, #4]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ec2:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d102      	bne.n	8003ed4 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 f940 	bl	8004154 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003ed4:	bf00      	nop
 8003ed6:	3708      	adds	r7, #8
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	330c      	adds	r3, #12
 8003eee:	7812      	ldrb	r2, [r2, #0]
 8003ef0:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef6:	1c5a      	adds	r2, r3, #1
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	3b01      	subs	r3, #1
 8003f04:	b29a      	uxth	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d10f      	bne.n	8003f34 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	685a      	ldr	r2, [r3, #4]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f22:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d102      	bne.n	8003f34 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 f910 	bl	8004154 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003f34:	bf00      	nop
 8003f36:	3708      	adds	r7, #8
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68da      	ldr	r2, [r3, #12]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f4e:	b292      	uxth	r2, r2
 8003f50:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f56:	1c9a      	adds	r2, r3, #2
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	3b01      	subs	r3, #1
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d10f      	bne.n	8003f94 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	685a      	ldr	r2, [r3, #4]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f82:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d102      	bne.n	8003f94 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f8e0 	bl	8004154 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003f94:	bf00      	nop
 8003f96:	3708      	adds	r7, #8
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa8:	881a      	ldrh	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb4:	1c9a      	adds	r2, r3, #2
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	3b01      	subs	r3, #1
 8003fc2:	b29a      	uxth	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10f      	bne.n	8003ff2 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	685a      	ldr	r2, [r3, #4]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fe0:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d102      	bne.n	8003ff2 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f000 f8b1 	bl	8004154 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003ff2:	bf00      	nop
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ffa:	b580      	push	{r7, lr}
 8003ffc:	b084      	sub	sp, #16
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	60f8      	str	r0, [r7, #12]
 8004002:	60b9      	str	r1, [r7, #8]
 8004004:	603b      	str	r3, [r7, #0]
 8004006:	4613      	mov	r3, r2
 8004008:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800400a:	e04c      	b.n	80040a6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004012:	d048      	beq.n	80040a6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004014:	f7fc ffd8 	bl	8000fc8 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	683a      	ldr	r2, [r7, #0]
 8004020:	429a      	cmp	r2, r3
 8004022:	d902      	bls.n	800402a <SPI_WaitFlagStateUntilTimeout+0x30>
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d13d      	bne.n	80040a6 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004038:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004042:	d111      	bne.n	8004068 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800404c:	d004      	beq.n	8004058 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004056:	d107      	bne.n	8004068 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004066:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004070:	d10f      	bne.n	8004092 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004080:	601a      	str	r2, [r3, #0]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004090:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2201      	movs	r2, #1
 8004096:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e00f      	b.n	80040c6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	689a      	ldr	r2, [r3, #8]
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	4013      	ands	r3, r2
 80040b0:	68ba      	ldr	r2, [r7, #8]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	bf0c      	ite	eq
 80040b6:	2301      	moveq	r3, #1
 80040b8:	2300      	movne	r3, #0
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	461a      	mov	r2, r3
 80040be:	79fb      	ldrb	r3, [r7, #7]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d1a3      	bne.n	800400c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3710      	adds	r7, #16
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
	...

080040d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b088      	sub	sp, #32
 80040d4:	af02      	add	r7, sp, #8
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80040dc:	4b1b      	ldr	r3, [pc, #108]	; (800414c <SPI_EndRxTxTransaction+0x7c>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a1b      	ldr	r2, [pc, #108]	; (8004150 <SPI_EndRxTxTransaction+0x80>)
 80040e2:	fba2 2303 	umull	r2, r3, r2, r3
 80040e6:	0d5b      	lsrs	r3, r3, #21
 80040e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80040ec:	fb02 f303 	mul.w	r3, r2, r3
 80040f0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040fa:	d112      	bne.n	8004122 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	9300      	str	r3, [sp, #0]
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	2200      	movs	r2, #0
 8004104:	2180      	movs	r1, #128	; 0x80
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f7ff ff77 	bl	8003ffa <SPI_WaitFlagStateUntilTimeout>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d016      	beq.n	8004140 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004116:	f043 0220 	orr.w	r2, r3, #32
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e00f      	b.n	8004142 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00a      	beq.n	800413e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	3b01      	subs	r3, #1
 800412c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004138:	2b80      	cmp	r3, #128	; 0x80
 800413a:	d0f2      	beq.n	8004122 <SPI_EndRxTxTransaction+0x52>
 800413c:	e000      	b.n	8004140 <SPI_EndRxTxTransaction+0x70>
        break;
 800413e:	bf00      	nop
  }

  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3718      	adds	r7, #24
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	20000038 	.word	0x20000038
 8004150:	165e9f81 	.word	0x165e9f81

08004154 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b086      	sub	sp, #24
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800415c:	4b35      	ldr	r3, [pc, #212]	; (8004234 <SPI_CloseRxTx_ISR+0xe0>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a35      	ldr	r2, [pc, #212]	; (8004238 <SPI_CloseRxTx_ISR+0xe4>)
 8004162:	fba2 2303 	umull	r2, r3, r2, r3
 8004166:	0a5b      	lsrs	r3, r3, #9
 8004168:	2264      	movs	r2, #100	; 0x64
 800416a:	fb02 f303 	mul.w	r3, r2, r3
 800416e:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004170:	f7fc ff2a 	bl	8000fc8 <HAL_GetTick>
 8004174:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	685a      	ldr	r2, [r3, #4]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f022 0220 	bic.w	r2, r2, #32
 8004184:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d106      	bne.n	800419a <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004190:	f043 0220 	orr.w	r2, r3, #32
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004198:	e009      	b.n	80041ae <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	3b01      	subs	r3, #1
 800419e:	613b      	str	r3, [r7, #16]
  }
  while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d0eb      	beq.n	8004186 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	2164      	movs	r1, #100	; 0x64
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f7ff ff8c 	bl	80040d0 <SPI_EndRxTxTransaction>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d005      	beq.n	80041ca <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c2:	f043 0220 	orr.w	r2, r3, #32
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10a      	bne.n	80041e8 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041d2:	2300      	movs	r3, #0
 80041d4:	60fb      	str	r3, [r7, #12]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	60fb      	str	r3, [r7, #12]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	60fb      	str	r3, [r7, #12]
 80041e6:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d115      	bne.n	800421c <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	2b04      	cmp	r3, #4
 80041fa:	d107      	bne.n	800420c <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f7ff fe05 	bl	8003e14 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800420a:	e00e      	b.n	800422a <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f7ff fe07 	bl	8003e28 <HAL_SPI_TxRxCpltCallback>
}
 800421a:	e006      	b.n	800422a <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f7ff fe09 	bl	8003e3c <HAL_SPI_ErrorCallback>
}
 800422a:	bf00      	nop
 800422c:	3718      	adds	r7, #24
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	20000038 	.word	0x20000038
 8004238:	057619f1 	.word	0x057619f1

0800423c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e01d      	b.n	800428a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b00      	cmp	r3, #0
 8004258:	d106      	bne.n	8004268 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f004 fb98 	bl	8008998 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2202      	movs	r2, #2
 800426c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	3304      	adds	r3, #4
 8004278:	4619      	mov	r1, r3
 800427a:	4610      	mov	r0, r2
 800427c:	f000 fc0a 	bl	8004a94 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3708      	adds	r7, #8
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b082      	sub	sp, #8
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d101      	bne.n	80042a4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e01d      	b.n	80042e0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d106      	bne.n	80042be <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f000 f815 	bl	80042e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2202      	movs	r2, #2
 80042c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	3304      	adds	r3, #4
 80042ce:	4619      	mov	r1, r3
 80042d0:	4610      	mov	r0, r2
 80042d2:	f000 fbdf 	bl	8004a94 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2201      	movs	r2, #1
 80042da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3708      	adds	r7, #8
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80042f0:	bf00      	nop
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	2b0c      	cmp	r3, #12
 800430a:	d841      	bhi.n	8004390 <HAL_TIM_PWM_Start_IT+0x94>
 800430c:	a201      	add	r2, pc, #4	; (adr r2, 8004314 <HAL_TIM_PWM_Start_IT+0x18>)
 800430e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004312:	bf00      	nop
 8004314:	08004349 	.word	0x08004349
 8004318:	08004391 	.word	0x08004391
 800431c:	08004391 	.word	0x08004391
 8004320:	08004391 	.word	0x08004391
 8004324:	0800435b 	.word	0x0800435b
 8004328:	08004391 	.word	0x08004391
 800432c:	08004391 	.word	0x08004391
 8004330:	08004391 	.word	0x08004391
 8004334:	0800436d 	.word	0x0800436d
 8004338:	08004391 	.word	0x08004391
 800433c:	08004391 	.word	0x08004391
 8004340:	08004391 	.word	0x08004391
 8004344:	0800437f 	.word	0x0800437f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68da      	ldr	r2, [r3, #12]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f042 0202 	orr.w	r2, r2, #2
 8004356:	60da      	str	r2, [r3, #12]
      break;
 8004358:	e01b      	b.n	8004392 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68da      	ldr	r2, [r3, #12]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f042 0204 	orr.w	r2, r2, #4
 8004368:	60da      	str	r2, [r3, #12]
      break;
 800436a:	e012      	b.n	8004392 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68da      	ldr	r2, [r3, #12]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f042 0208 	orr.w	r2, r2, #8
 800437a:	60da      	str	r2, [r3, #12]
      break;
 800437c:	e009      	b.n	8004392 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68da      	ldr	r2, [r3, #12]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f042 0210 	orr.w	r2, r2, #16
 800438c:	60da      	str	r2, [r3, #12]
      break;
 800438e:	e000      	b.n	8004392 <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 8004390:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2201      	movs	r2, #1
 8004398:	6839      	ldr	r1, [r7, #0]
 800439a:	4618      	mov	r0, r3
 800439c:	f000 fe64 	bl	8005068 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a15      	ldr	r2, [pc, #84]	; (80043fc <HAL_TIM_PWM_Start_IT+0x100>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d004      	beq.n	80043b4 <HAL_TIM_PWM_Start_IT+0xb8>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a14      	ldr	r2, [pc, #80]	; (8004400 <HAL_TIM_PWM_Start_IT+0x104>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d101      	bne.n	80043b8 <HAL_TIM_PWM_Start_IT+0xbc>
 80043b4:	2301      	movs	r3, #1
 80043b6:	e000      	b.n	80043ba <HAL_TIM_PWM_Start_IT+0xbe>
 80043b8:	2300      	movs	r3, #0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d007      	beq.n	80043ce <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80043cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f003 0307 	and.w	r3, r3, #7
 80043d8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2b06      	cmp	r3, #6
 80043de:	d007      	beq.n	80043f0 <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f042 0201 	orr.w	r2, r2, #1
 80043ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3710      	adds	r7, #16
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	40010000 	.word	0x40010000
 8004400:	40010400 	.word	0x40010400

08004404 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	2b0c      	cmp	r3, #12
 8004412:	d841      	bhi.n	8004498 <HAL_TIM_PWM_Stop_IT+0x94>
 8004414:	a201      	add	r2, pc, #4	; (adr r2, 800441c <HAL_TIM_PWM_Stop_IT+0x18>)
 8004416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800441a:	bf00      	nop
 800441c:	08004451 	.word	0x08004451
 8004420:	08004499 	.word	0x08004499
 8004424:	08004499 	.word	0x08004499
 8004428:	08004499 	.word	0x08004499
 800442c:	08004463 	.word	0x08004463
 8004430:	08004499 	.word	0x08004499
 8004434:	08004499 	.word	0x08004499
 8004438:	08004499 	.word	0x08004499
 800443c:	08004475 	.word	0x08004475
 8004440:	08004499 	.word	0x08004499
 8004444:	08004499 	.word	0x08004499
 8004448:	08004499 	.word	0x08004499
 800444c:	08004487 	.word	0x08004487
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68da      	ldr	r2, [r3, #12]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f022 0202 	bic.w	r2, r2, #2
 800445e:	60da      	str	r2, [r3, #12]
      break;
 8004460:	e01b      	b.n	800449a <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68da      	ldr	r2, [r3, #12]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f022 0204 	bic.w	r2, r2, #4
 8004470:	60da      	str	r2, [r3, #12]
      break;
 8004472:	e012      	b.n	800449a <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68da      	ldr	r2, [r3, #12]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f022 0208 	bic.w	r2, r2, #8
 8004482:	60da      	str	r2, [r3, #12]
      break;
 8004484:	e009      	b.n	800449a <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68da      	ldr	r2, [r3, #12]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f022 0210 	bic.w	r2, r2, #16
 8004494:	60da      	str	r2, [r3, #12]
      break;
 8004496:	e000      	b.n	800449a <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 8004498:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2200      	movs	r2, #0
 80044a0:	6839      	ldr	r1, [r7, #0]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f000 fde0 	bl	8005068 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a20      	ldr	r2, [pc, #128]	; (8004530 <HAL_TIM_PWM_Stop_IT+0x12c>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d004      	beq.n	80044bc <HAL_TIM_PWM_Stop_IT+0xb8>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a1f      	ldr	r2, [pc, #124]	; (8004534 <HAL_TIM_PWM_Stop_IT+0x130>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d101      	bne.n	80044c0 <HAL_TIM_PWM_Stop_IT+0xbc>
 80044bc:	2301      	movs	r3, #1
 80044be:	e000      	b.n	80044c2 <HAL_TIM_PWM_Stop_IT+0xbe>
 80044c0:	2300      	movs	r3, #0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d017      	beq.n	80044f6 <HAL_TIM_PWM_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	6a1a      	ldr	r2, [r3, #32]
 80044cc:	f241 1311 	movw	r3, #4369	; 0x1111
 80044d0:	4013      	ands	r3, r2
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d10f      	bne.n	80044f6 <HAL_TIM_PWM_Stop_IT+0xf2>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	6a1a      	ldr	r2, [r3, #32]
 80044dc:	f240 4344 	movw	r3, #1092	; 0x444
 80044e0:	4013      	ands	r3, r2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d107      	bne.n	80044f6 <HAL_TIM_PWM_Stop_IT+0xf2>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	6a1a      	ldr	r2, [r3, #32]
 80044fc:	f241 1311 	movw	r3, #4369	; 0x1111
 8004500:	4013      	ands	r3, r2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10f      	bne.n	8004526 <HAL_TIM_PWM_Stop_IT+0x122>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	6a1a      	ldr	r2, [r3, #32]
 800450c:	f240 4344 	movw	r3, #1092	; 0x444
 8004510:	4013      	ands	r3, r2
 8004512:	2b00      	cmp	r3, #0
 8004514:	d107      	bne.n	8004526 <HAL_TIM_PWM_Stop_IT+0x122>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f022 0201 	bic.w	r2, r2, #1
 8004524:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3708      	adds	r7, #8
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	40010000 	.word	0x40010000
 8004534:	40010400 	.word	0x40010400

08004538 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b02      	cmp	r3, #2
 800454c:	d122      	bne.n	8004594 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	f003 0302 	and.w	r3, r3, #2
 8004558:	2b02      	cmp	r3, #2
 800455a:	d11b      	bne.n	8004594 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f06f 0202 	mvn.w	r2, #2
 8004564:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2201      	movs	r2, #1
 800456a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	f003 0303 	and.w	r3, r3, #3
 8004576:	2b00      	cmp	r3, #0
 8004578:	d003      	beq.n	8004582 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f000 fa6b 	bl	8004a56 <HAL_TIM_IC_CaptureCallback>
 8004580:	e005      	b.n	800458e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f000 fa5d 	bl	8004a42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f000 fa6e 	bl	8004a6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	f003 0304 	and.w	r3, r3, #4
 800459e:	2b04      	cmp	r3, #4
 80045a0:	d122      	bne.n	80045e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	f003 0304 	and.w	r3, r3, #4
 80045ac:	2b04      	cmp	r3, #4
 80045ae:	d11b      	bne.n	80045e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f06f 0204 	mvn.w	r2, #4
 80045b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2202      	movs	r2, #2
 80045be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d003      	beq.n	80045d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f000 fa41 	bl	8004a56 <HAL_TIM_IC_CaptureCallback>
 80045d4:	e005      	b.n	80045e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 fa33 	bl	8004a42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 fa44 	bl	8004a6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	f003 0308 	and.w	r3, r3, #8
 80045f2:	2b08      	cmp	r3, #8
 80045f4:	d122      	bne.n	800463c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68db      	ldr	r3, [r3, #12]
 80045fc:	f003 0308 	and.w	r3, r3, #8
 8004600:	2b08      	cmp	r3, #8
 8004602:	d11b      	bne.n	800463c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f06f 0208 	mvn.w	r2, #8
 800460c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2204      	movs	r2, #4
 8004612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	69db      	ldr	r3, [r3, #28]
 800461a:	f003 0303 	and.w	r3, r3, #3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 fa17 	bl	8004a56 <HAL_TIM_IC_CaptureCallback>
 8004628:	e005      	b.n	8004636 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 fa09 	bl	8004a42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 fa1a 	bl	8004a6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	691b      	ldr	r3, [r3, #16]
 8004642:	f003 0310 	and.w	r3, r3, #16
 8004646:	2b10      	cmp	r3, #16
 8004648:	d122      	bne.n	8004690 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68db      	ldr	r3, [r3, #12]
 8004650:	f003 0310 	and.w	r3, r3, #16
 8004654:	2b10      	cmp	r3, #16
 8004656:	d11b      	bne.n	8004690 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f06f 0210 	mvn.w	r2, #16
 8004660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2208      	movs	r2, #8
 8004666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	69db      	ldr	r3, [r3, #28]
 800466e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004672:	2b00      	cmp	r3, #0
 8004674:	d003      	beq.n	800467e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 f9ed 	bl	8004a56 <HAL_TIM_IC_CaptureCallback>
 800467c:	e005      	b.n	800468a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 f9df 	bl	8004a42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 f9f0 	bl	8004a6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	2b01      	cmp	r3, #1
 800469c:	d10e      	bne.n	80046bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	f003 0301 	and.w	r3, r3, #1
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d107      	bne.n	80046bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f06f 0201 	mvn.w	r2, #1
 80046b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f004 fa62 	bl	8008b80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046c6:	2b80      	cmp	r3, #128	; 0x80
 80046c8:	d10e      	bne.n	80046e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d4:	2b80      	cmp	r3, #128	; 0x80
 80046d6:	d107      	bne.n	80046e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80046e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 fe51 	bl	800538a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f2:	2b40      	cmp	r3, #64	; 0x40
 80046f4:	d10e      	bne.n	8004714 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004700:	2b40      	cmp	r3, #64	; 0x40
 8004702:	d107      	bne.n	8004714 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800470c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 f9b5 	bl	8004a7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	f003 0320 	and.w	r3, r3, #32
 800471e:	2b20      	cmp	r3, #32
 8004720:	d10e      	bne.n	8004740 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	f003 0320 	and.w	r3, r3, #32
 800472c:	2b20      	cmp	r3, #32
 800472e:	d107      	bne.n	8004740 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f06f 0220 	mvn.w	r2, #32
 8004738:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 fe1b 	bl	8005376 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004740:	bf00      	nop
 8004742:	3708      	adds	r7, #8
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800475a:	2b01      	cmp	r3, #1
 800475c:	d101      	bne.n	8004762 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800475e:	2302      	movs	r3, #2
 8004760:	e0b4      	b.n	80048cc <HAL_TIM_PWM_ConfigChannel+0x184>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2201      	movs	r2, #1
 8004766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2202      	movs	r2, #2
 800476e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2b0c      	cmp	r3, #12
 8004776:	f200 809f 	bhi.w	80048b8 <HAL_TIM_PWM_ConfigChannel+0x170>
 800477a:	a201      	add	r2, pc, #4	; (adr r2, 8004780 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800477c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004780:	080047b5 	.word	0x080047b5
 8004784:	080048b9 	.word	0x080048b9
 8004788:	080048b9 	.word	0x080048b9
 800478c:	080048b9 	.word	0x080048b9
 8004790:	080047f5 	.word	0x080047f5
 8004794:	080048b9 	.word	0x080048b9
 8004798:	080048b9 	.word	0x080048b9
 800479c:	080048b9 	.word	0x080048b9
 80047a0:	08004837 	.word	0x08004837
 80047a4:	080048b9 	.word	0x080048b9
 80047a8:	080048b9 	.word	0x080048b9
 80047ac:	080048b9 	.word	0x080048b9
 80047b0:	08004877 	.word	0x08004877
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68b9      	ldr	r1, [r7, #8]
 80047ba:	4618      	mov	r0, r3
 80047bc:	f000 fa0a 	bl	8004bd4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	699a      	ldr	r2, [r3, #24]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f042 0208 	orr.w	r2, r2, #8
 80047ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	699a      	ldr	r2, [r3, #24]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f022 0204 	bic.w	r2, r2, #4
 80047de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	6999      	ldr	r1, [r3, #24]
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	691a      	ldr	r2, [r3, #16]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	430a      	orrs	r2, r1
 80047f0:	619a      	str	r2, [r3, #24]
      break;
 80047f2:	e062      	b.n	80048ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68b9      	ldr	r1, [r7, #8]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f000 fa5a 	bl	8004cb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	699a      	ldr	r2, [r3, #24]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800480e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	699a      	ldr	r2, [r3, #24]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800481e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6999      	ldr	r1, [r3, #24]
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	021a      	lsls	r2, r3, #8
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	430a      	orrs	r2, r1
 8004832:	619a      	str	r2, [r3, #24]
      break;
 8004834:	e041      	b.n	80048ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68b9      	ldr	r1, [r7, #8]
 800483c:	4618      	mov	r0, r3
 800483e:	f000 faaf 	bl	8004da0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	69da      	ldr	r2, [r3, #28]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f042 0208 	orr.w	r2, r2, #8
 8004850:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	69da      	ldr	r2, [r3, #28]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f022 0204 	bic.w	r2, r2, #4
 8004860:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	69d9      	ldr	r1, [r3, #28]
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	691a      	ldr	r2, [r3, #16]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	430a      	orrs	r2, r1
 8004872:	61da      	str	r2, [r3, #28]
      break;
 8004874:	e021      	b.n	80048ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	68b9      	ldr	r1, [r7, #8]
 800487c:	4618      	mov	r0, r3
 800487e:	f000 fb03 	bl	8004e88 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	69da      	ldr	r2, [r3, #28]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004890:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	69da      	ldr	r2, [r3, #28]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	69d9      	ldr	r1, [r3, #28]
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	021a      	lsls	r2, r3, #8
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	430a      	orrs	r2, r1
 80048b4:	61da      	str	r2, [r3, #28]
      break;
 80048b6:	e000      	b.n	80048ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80048b8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3710      	adds	r7, #16
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d101      	bne.n	80048ec <HAL_TIM_ConfigClockSource+0x18>
 80048e8:	2302      	movs	r3, #2
 80048ea:	e0a6      	b.n	8004a3a <HAL_TIM_ConfigClockSource+0x166>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2202      	movs	r2, #2
 80048f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800490a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004912:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	68fa      	ldr	r2, [r7, #12]
 800491a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2b40      	cmp	r3, #64	; 0x40
 8004922:	d067      	beq.n	80049f4 <HAL_TIM_ConfigClockSource+0x120>
 8004924:	2b40      	cmp	r3, #64	; 0x40
 8004926:	d80b      	bhi.n	8004940 <HAL_TIM_ConfigClockSource+0x6c>
 8004928:	2b10      	cmp	r3, #16
 800492a:	d073      	beq.n	8004a14 <HAL_TIM_ConfigClockSource+0x140>
 800492c:	2b10      	cmp	r3, #16
 800492e:	d802      	bhi.n	8004936 <HAL_TIM_ConfigClockSource+0x62>
 8004930:	2b00      	cmp	r3, #0
 8004932:	d06f      	beq.n	8004a14 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004934:	e078      	b.n	8004a28 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004936:	2b20      	cmp	r3, #32
 8004938:	d06c      	beq.n	8004a14 <HAL_TIM_ConfigClockSource+0x140>
 800493a:	2b30      	cmp	r3, #48	; 0x30
 800493c:	d06a      	beq.n	8004a14 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800493e:	e073      	b.n	8004a28 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004940:	2b70      	cmp	r3, #112	; 0x70
 8004942:	d00d      	beq.n	8004960 <HAL_TIM_ConfigClockSource+0x8c>
 8004944:	2b70      	cmp	r3, #112	; 0x70
 8004946:	d804      	bhi.n	8004952 <HAL_TIM_ConfigClockSource+0x7e>
 8004948:	2b50      	cmp	r3, #80	; 0x50
 800494a:	d033      	beq.n	80049b4 <HAL_TIM_ConfigClockSource+0xe0>
 800494c:	2b60      	cmp	r3, #96	; 0x60
 800494e:	d041      	beq.n	80049d4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004950:	e06a      	b.n	8004a28 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004952:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004956:	d066      	beq.n	8004a26 <HAL_TIM_ConfigClockSource+0x152>
 8004958:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800495c:	d017      	beq.n	800498e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800495e:	e063      	b.n	8004a28 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6818      	ldr	r0, [r3, #0]
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	6899      	ldr	r1, [r3, #8]
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	685a      	ldr	r2, [r3, #4]
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	f000 fb5a 	bl	8005028 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004982:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	609a      	str	r2, [r3, #8]
      break;
 800498c:	e04c      	b.n	8004a28 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6818      	ldr	r0, [r3, #0]
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	6899      	ldr	r1, [r3, #8]
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	685a      	ldr	r2, [r3, #4]
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	f000 fb43 	bl	8005028 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	689a      	ldr	r2, [r3, #8]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80049b0:	609a      	str	r2, [r3, #8]
      break;
 80049b2:	e039      	b.n	8004a28 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6818      	ldr	r0, [r3, #0]
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	6859      	ldr	r1, [r3, #4]
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	461a      	mov	r2, r3
 80049c2:	f000 fab7 	bl	8004f34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2150      	movs	r1, #80	; 0x50
 80049cc:	4618      	mov	r0, r3
 80049ce:	f000 fb10 	bl	8004ff2 <TIM_ITRx_SetConfig>
      break;
 80049d2:	e029      	b.n	8004a28 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6818      	ldr	r0, [r3, #0]
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	6859      	ldr	r1, [r3, #4]
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	461a      	mov	r2, r3
 80049e2:	f000 fad6 	bl	8004f92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2160      	movs	r1, #96	; 0x60
 80049ec:	4618      	mov	r0, r3
 80049ee:	f000 fb00 	bl	8004ff2 <TIM_ITRx_SetConfig>
      break;
 80049f2:	e019      	b.n	8004a28 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6818      	ldr	r0, [r3, #0]
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	6859      	ldr	r1, [r3, #4]
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	461a      	mov	r2, r3
 8004a02:	f000 fa97 	bl	8004f34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2140      	movs	r1, #64	; 0x40
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f000 faf0 	bl	8004ff2 <TIM_ITRx_SetConfig>
      break;
 8004a12:	e009      	b.n	8004a28 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	4610      	mov	r0, r2
 8004a20:	f000 fae7 	bl	8004ff2 <TIM_ITRx_SetConfig>
      break;
 8004a24:	e000      	b.n	8004a28 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004a26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a42:	b480      	push	{r7}
 8004a44:	b083      	sub	sp, #12
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a4a:	bf00      	nop
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr

08004a56 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a56:	b480      	push	{r7}
 8004a58:	b083      	sub	sp, #12
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a5e:	bf00      	nop
 8004a60:	370c      	adds	r7, #12
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr

08004a6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	b083      	sub	sp, #12
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a72:	bf00      	nop
 8004a74:	370c      	adds	r7, #12
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr

08004a7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a7e:	b480      	push	{r7}
 8004a80:	b083      	sub	sp, #12
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a86:	bf00      	nop
 8004a88:	370c      	adds	r7, #12
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
	...

08004a94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b085      	sub	sp, #20
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a40      	ldr	r2, [pc, #256]	; (8004ba8 <TIM_Base_SetConfig+0x114>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d013      	beq.n	8004ad4 <TIM_Base_SetConfig+0x40>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ab2:	d00f      	beq.n	8004ad4 <TIM_Base_SetConfig+0x40>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a3d      	ldr	r2, [pc, #244]	; (8004bac <TIM_Base_SetConfig+0x118>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d00b      	beq.n	8004ad4 <TIM_Base_SetConfig+0x40>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a3c      	ldr	r2, [pc, #240]	; (8004bb0 <TIM_Base_SetConfig+0x11c>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d007      	beq.n	8004ad4 <TIM_Base_SetConfig+0x40>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a3b      	ldr	r2, [pc, #236]	; (8004bb4 <TIM_Base_SetConfig+0x120>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d003      	beq.n	8004ad4 <TIM_Base_SetConfig+0x40>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a3a      	ldr	r2, [pc, #232]	; (8004bb8 <TIM_Base_SetConfig+0x124>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d108      	bne.n	8004ae6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ada:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4a2f      	ldr	r2, [pc, #188]	; (8004ba8 <TIM_Base_SetConfig+0x114>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d02b      	beq.n	8004b46 <TIM_Base_SetConfig+0xb2>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004af4:	d027      	beq.n	8004b46 <TIM_Base_SetConfig+0xb2>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	4a2c      	ldr	r2, [pc, #176]	; (8004bac <TIM_Base_SetConfig+0x118>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d023      	beq.n	8004b46 <TIM_Base_SetConfig+0xb2>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	4a2b      	ldr	r2, [pc, #172]	; (8004bb0 <TIM_Base_SetConfig+0x11c>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d01f      	beq.n	8004b46 <TIM_Base_SetConfig+0xb2>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a2a      	ldr	r2, [pc, #168]	; (8004bb4 <TIM_Base_SetConfig+0x120>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d01b      	beq.n	8004b46 <TIM_Base_SetConfig+0xb2>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a29      	ldr	r2, [pc, #164]	; (8004bb8 <TIM_Base_SetConfig+0x124>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d017      	beq.n	8004b46 <TIM_Base_SetConfig+0xb2>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a28      	ldr	r2, [pc, #160]	; (8004bbc <TIM_Base_SetConfig+0x128>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d013      	beq.n	8004b46 <TIM_Base_SetConfig+0xb2>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a27      	ldr	r2, [pc, #156]	; (8004bc0 <TIM_Base_SetConfig+0x12c>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d00f      	beq.n	8004b46 <TIM_Base_SetConfig+0xb2>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a26      	ldr	r2, [pc, #152]	; (8004bc4 <TIM_Base_SetConfig+0x130>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d00b      	beq.n	8004b46 <TIM_Base_SetConfig+0xb2>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a25      	ldr	r2, [pc, #148]	; (8004bc8 <TIM_Base_SetConfig+0x134>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d007      	beq.n	8004b46 <TIM_Base_SetConfig+0xb2>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a24      	ldr	r2, [pc, #144]	; (8004bcc <TIM_Base_SetConfig+0x138>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d003      	beq.n	8004b46 <TIM_Base_SetConfig+0xb2>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a23      	ldr	r2, [pc, #140]	; (8004bd0 <TIM_Base_SetConfig+0x13c>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d108      	bne.n	8004b58 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	4313      	orrs	r3, r2
 8004b64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	689a      	ldr	r2, [r3, #8]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a0a      	ldr	r2, [pc, #40]	; (8004ba8 <TIM_Base_SetConfig+0x114>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d003      	beq.n	8004b8c <TIM_Base_SetConfig+0xf8>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a0c      	ldr	r2, [pc, #48]	; (8004bb8 <TIM_Base_SetConfig+0x124>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d103      	bne.n	8004b94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	691a      	ldr	r2, [r3, #16]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	615a      	str	r2, [r3, #20]
}
 8004b9a:	bf00      	nop
 8004b9c:	3714      	adds	r7, #20
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr
 8004ba6:	bf00      	nop
 8004ba8:	40010000 	.word	0x40010000
 8004bac:	40000400 	.word	0x40000400
 8004bb0:	40000800 	.word	0x40000800
 8004bb4:	40000c00 	.word	0x40000c00
 8004bb8:	40010400 	.word	0x40010400
 8004bbc:	40014000 	.word	0x40014000
 8004bc0:	40014400 	.word	0x40014400
 8004bc4:	40014800 	.word	0x40014800
 8004bc8:	40001800 	.word	0x40001800
 8004bcc:	40001c00 	.word	0x40001c00
 8004bd0:	40002000 	.word	0x40002000

08004bd4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b087      	sub	sp, #28
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a1b      	ldr	r3, [r3, #32]
 8004be2:	f023 0201 	bic.w	r2, r3, #1
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	699b      	ldr	r3, [r3, #24]
 8004bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f023 0303 	bic.w	r3, r3, #3
 8004c0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	f023 0302 	bic.w	r3, r3, #2
 8004c1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	697a      	ldr	r2, [r7, #20]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a20      	ldr	r2, [pc, #128]	; (8004cac <TIM_OC1_SetConfig+0xd8>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d003      	beq.n	8004c38 <TIM_OC1_SetConfig+0x64>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	4a1f      	ldr	r2, [pc, #124]	; (8004cb0 <TIM_OC1_SetConfig+0xdc>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d10c      	bne.n	8004c52 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	f023 0308 	bic.w	r3, r3, #8
 8004c3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	697a      	ldr	r2, [r7, #20]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	f023 0304 	bic.w	r3, r3, #4
 8004c50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a15      	ldr	r2, [pc, #84]	; (8004cac <TIM_OC1_SetConfig+0xd8>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d003      	beq.n	8004c62 <TIM_OC1_SetConfig+0x8e>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a14      	ldr	r2, [pc, #80]	; (8004cb0 <TIM_OC1_SetConfig+0xdc>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d111      	bne.n	8004c86 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	693a      	ldr	r2, [r7, #16]
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	699b      	ldr	r3, [r3, #24]
 8004c80:	693a      	ldr	r2, [r7, #16]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	685a      	ldr	r2, [r3, #4]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	697a      	ldr	r2, [r7, #20]
 8004c9e:	621a      	str	r2, [r3, #32]
}
 8004ca0:	bf00      	nop
 8004ca2:	371c      	adds	r7, #28
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr
 8004cac:	40010000 	.word	0x40010000
 8004cb0:	40010400 	.word	0x40010400

08004cb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b087      	sub	sp, #28
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	f023 0210 	bic.w	r2, r3, #16
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
 8004cce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	021b      	lsls	r3, r3, #8
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	f023 0320 	bic.w	r3, r3, #32
 8004cfe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	011b      	lsls	r3, r3, #4
 8004d06:	697a      	ldr	r2, [r7, #20]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a22      	ldr	r2, [pc, #136]	; (8004d98 <TIM_OC2_SetConfig+0xe4>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d003      	beq.n	8004d1c <TIM_OC2_SetConfig+0x68>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a21      	ldr	r2, [pc, #132]	; (8004d9c <TIM_OC2_SetConfig+0xe8>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d10d      	bne.n	8004d38 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	011b      	lsls	r3, r3, #4
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a17      	ldr	r2, [pc, #92]	; (8004d98 <TIM_OC2_SetConfig+0xe4>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d003      	beq.n	8004d48 <TIM_OC2_SetConfig+0x94>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a16      	ldr	r2, [pc, #88]	; (8004d9c <TIM_OC2_SetConfig+0xe8>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d113      	bne.n	8004d70 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	695b      	ldr	r3, [r3, #20]
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	693a      	ldr	r2, [r7, #16]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	699b      	ldr	r3, [r3, #24]
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	693a      	ldr	r2, [r7, #16]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	693a      	ldr	r2, [r7, #16]
 8004d74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	685a      	ldr	r2, [r3, #4]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	697a      	ldr	r2, [r7, #20]
 8004d88:	621a      	str	r2, [r3, #32]
}
 8004d8a:	bf00      	nop
 8004d8c:	371c      	adds	r7, #28
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	40010000 	.word	0x40010000
 8004d9c:	40010400 	.word	0x40010400

08004da0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b087      	sub	sp, #28
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	685b      	ldr	r3, [r3, #4]
 8004dc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	69db      	ldr	r3, [r3, #28]
 8004dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f023 0303 	bic.w	r3, r3, #3
 8004dd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68fa      	ldr	r2, [r7, #12]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004de8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	021b      	lsls	r3, r3, #8
 8004df0:	697a      	ldr	r2, [r7, #20]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a21      	ldr	r2, [pc, #132]	; (8004e80 <TIM_OC3_SetConfig+0xe0>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d003      	beq.n	8004e06 <TIM_OC3_SetConfig+0x66>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a20      	ldr	r2, [pc, #128]	; (8004e84 <TIM_OC3_SetConfig+0xe4>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d10d      	bne.n	8004e22 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	021b      	lsls	r3, r3, #8
 8004e14:	697a      	ldr	r2, [r7, #20]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a16      	ldr	r2, [pc, #88]	; (8004e80 <TIM_OC3_SetConfig+0xe0>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d003      	beq.n	8004e32 <TIM_OC3_SetConfig+0x92>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a15      	ldr	r2, [pc, #84]	; (8004e84 <TIM_OC3_SetConfig+0xe4>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d113      	bne.n	8004e5a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	695b      	ldr	r3, [r3, #20]
 8004e46:	011b      	lsls	r3, r3, #4
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	011b      	lsls	r3, r3, #4
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	685a      	ldr	r2, [r3, #4]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	697a      	ldr	r2, [r7, #20]
 8004e72:	621a      	str	r2, [r3, #32]
}
 8004e74:	bf00      	nop
 8004e76:	371c      	adds	r7, #28
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr
 8004e80:	40010000 	.word	0x40010000
 8004e84:	40010400 	.word	0x40010400

08004e88 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b087      	sub	sp, #28
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a1b      	ldr	r3, [r3, #32]
 8004ea2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	69db      	ldr	r3, [r3, #28]
 8004eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ebe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	021b      	lsls	r3, r3, #8
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004ed2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	031b      	lsls	r3, r3, #12
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a12      	ldr	r2, [pc, #72]	; (8004f2c <TIM_OC4_SetConfig+0xa4>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d003      	beq.n	8004ef0 <TIM_OC4_SetConfig+0x68>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a11      	ldr	r2, [pc, #68]	; (8004f30 <TIM_OC4_SetConfig+0xa8>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d109      	bne.n	8004f04 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ef6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	695b      	ldr	r3, [r3, #20]
 8004efc:	019b      	lsls	r3, r3, #6
 8004efe:	697a      	ldr	r2, [r7, #20]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	697a      	ldr	r2, [r7, #20]
 8004f08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	68fa      	ldr	r2, [r7, #12]
 8004f0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	685a      	ldr	r2, [r3, #4]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	693a      	ldr	r2, [r7, #16]
 8004f1c:	621a      	str	r2, [r3, #32]
}
 8004f1e:	bf00      	nop
 8004f20:	371c      	adds	r7, #28
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
 8004f2a:	bf00      	nop
 8004f2c:	40010000 	.word	0x40010000
 8004f30:	40010400 	.word	0x40010400

08004f34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b087      	sub	sp, #28
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6a1b      	ldr	r3, [r3, #32]
 8004f44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	f023 0201 	bic.w	r2, r3, #1
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	011b      	lsls	r3, r3, #4
 8004f64:	693a      	ldr	r2, [r7, #16]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	f023 030a 	bic.w	r3, r3, #10
 8004f70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f72:	697a      	ldr	r2, [r7, #20]
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	693a      	ldr	r2, [r7, #16]
 8004f7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	697a      	ldr	r2, [r7, #20]
 8004f84:	621a      	str	r2, [r3, #32]
}
 8004f86:	bf00      	nop
 8004f88:	371c      	adds	r7, #28
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr

08004f92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f92:	b480      	push	{r7}
 8004f94:	b087      	sub	sp, #28
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	60f8      	str	r0, [r7, #12]
 8004f9a:	60b9      	str	r1, [r7, #8]
 8004f9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	f023 0210 	bic.w	r2, r3, #16
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	699b      	ldr	r3, [r3, #24]
 8004fae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6a1b      	ldr	r3, [r3, #32]
 8004fb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fbc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	031b      	lsls	r3, r3, #12
 8004fc2:	697a      	ldr	r2, [r7, #20]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004fce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	011b      	lsls	r3, r3, #4
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	697a      	ldr	r2, [r7, #20]
 8004fde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	693a      	ldr	r2, [r7, #16]
 8004fe4:	621a      	str	r2, [r3, #32]
}
 8004fe6:	bf00      	nop
 8004fe8:	371c      	adds	r7, #28
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr

08004ff2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ff2:	b480      	push	{r7}
 8004ff4:	b085      	sub	sp, #20
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	6078      	str	r0, [r7, #4]
 8004ffa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005008:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800500a:	683a      	ldr	r2, [r7, #0]
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	4313      	orrs	r3, r2
 8005010:	f043 0307 	orr.w	r3, r3, #7
 8005014:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	609a      	str	r2, [r3, #8]
}
 800501c:	bf00      	nop
 800501e:	3714      	adds	r7, #20
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005028:	b480      	push	{r7}
 800502a:	b087      	sub	sp, #28
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	607a      	str	r2, [r7, #4]
 8005034:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005042:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	021a      	lsls	r2, r3, #8
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	431a      	orrs	r2, r3
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	4313      	orrs	r3, r2
 8005050:	697a      	ldr	r2, [r7, #20]
 8005052:	4313      	orrs	r3, r2
 8005054:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	697a      	ldr	r2, [r7, #20]
 800505a:	609a      	str	r2, [r3, #8]
}
 800505c:	bf00      	nop
 800505e:	371c      	adds	r7, #28
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005068:	b480      	push	{r7}
 800506a:	b087      	sub	sp, #28
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	f003 031f 	and.w	r3, r3, #31
 800507a:	2201      	movs	r2, #1
 800507c:	fa02 f303 	lsl.w	r3, r2, r3
 8005080:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	6a1a      	ldr	r2, [r3, #32]
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	43db      	mvns	r3, r3
 800508a:	401a      	ands	r2, r3
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6a1a      	ldr	r2, [r3, #32]
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	f003 031f 	and.w	r3, r3, #31
 800509a:	6879      	ldr	r1, [r7, #4]
 800509c:	fa01 f303 	lsl.w	r3, r1, r3
 80050a0:	431a      	orrs	r2, r3
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	621a      	str	r2, [r3, #32]
}
 80050a6:	bf00      	nop
 80050a8:	371c      	adds	r7, #28
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr

080050b2 <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050b2:	b580      	push	{r7, lr}
 80050b4:	b084      	sub	sp, #16
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
 80050ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	2b04      	cmp	r3, #4
 80050c0:	d00d      	beq.n	80050de <HAL_TIMEx_PWMN_Start_IT+0x2c>
 80050c2:	2b08      	cmp	r3, #8
 80050c4:	d014      	beq.n	80050f0 <HAL_TIMEx_PWMN_Start_IT+0x3e>
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d000      	beq.n	80050cc <HAL_TIMEx_PWMN_Start_IT+0x1a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 80050ca:	e01a      	b.n	8005102 <HAL_TIMEx_PWMN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	68da      	ldr	r2, [r3, #12]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f042 0202 	orr.w	r2, r2, #2
 80050da:	60da      	str	r2, [r3, #12]
      break;
 80050dc:	e011      	b.n	8005102 <HAL_TIMEx_PWMN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68da      	ldr	r2, [r3, #12]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f042 0204 	orr.w	r2, r2, #4
 80050ec:	60da      	str	r2, [r3, #12]
      break;
 80050ee:	e008      	b.n	8005102 <HAL_TIMEx_PWMN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68da      	ldr	r2, [r3, #12]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f042 0208 	orr.w	r2, r2, #8
 80050fe:	60da      	str	r2, [r3, #12]
      break;
 8005100:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68da      	ldr	r2, [r3, #12]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005110:	60da      	str	r2, [r3, #12]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2204      	movs	r2, #4
 8005118:	6839      	ldr	r1, [r7, #0]
 800511a:	4618      	mov	r0, r3
 800511c:	f000 f93f 	bl	800539e <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800512e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f003 0307 	and.w	r3, r3, #7
 800513a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2b06      	cmp	r3, #6
 8005140:	d007      	beq.n	8005152 <HAL_TIMEx_PWMN_Start_IT+0xa0>
  {
    __HAL_TIM_ENABLE(htim);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f042 0201 	orr.w	r2, r2, #1
 8005150:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	3710      	adds	r7, #16
 8005158:	46bd      	mov	sp, r7
 800515a:	bd80      	pop	{r7, pc}

0800515c <HAL_TIMEx_PWMN_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccer;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	2b04      	cmp	r3, #4
 800516a:	d00d      	beq.n	8005188 <HAL_TIMEx_PWMN_Stop_IT+0x2c>
 800516c:	2b08      	cmp	r3, #8
 800516e:	d014      	beq.n	800519a <HAL_TIMEx_PWMN_Stop_IT+0x3e>
 8005170:	2b00      	cmp	r3, #0
 8005172:	d000      	beq.n	8005176 <HAL_TIMEx_PWMN_Stop_IT+0x1a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 8005174:	e01a      	b.n	80051ac <HAL_TIMEx_PWMN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68da      	ldr	r2, [r3, #12]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f022 0202 	bic.w	r2, r2, #2
 8005184:	60da      	str	r2, [r3, #12]
      break;
 8005186:	e011      	b.n	80051ac <HAL_TIMEx_PWMN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68da      	ldr	r2, [r3, #12]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f022 0204 	bic.w	r2, r2, #4
 8005196:	60da      	str	r2, [r3, #12]
      break;
 8005198:	e008      	b.n	80051ac <HAL_TIMEx_PWMN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68da      	ldr	r2, [r3, #12]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f022 0208 	bic.w	r2, r2, #8
 80051a8:	60da      	str	r2, [r3, #12]
      break;
 80051aa:	bf00      	nop
  }

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2200      	movs	r2, #0
 80051b2:	6839      	ldr	r1, [r7, #0]
 80051b4:	4618      	mov	r0, r3
 80051b6:	f000 f8f2 	bl	800539e <TIM_CCxNChannelCmd>

  /* Disable the TIM Break interrupt (only if no more channel is active) */
  tmpccer = htim->Instance->CCER;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	6a1b      	ldr	r3, [r3, #32]
 80051c0:	60fb      	str	r3, [r7, #12]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	f240 4344 	movw	r3, #1092	; 0x444
 80051c8:	4013      	ands	r3, r2
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d107      	bne.n	80051de <HAL_TIMEx_PWMN_Stop_IT+0x82>
  {
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68da      	ldr	r2, [r3, #12]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80051dc:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	6a1a      	ldr	r2, [r3, #32]
 80051e4:	f241 1311 	movw	r3, #4369	; 0x1111
 80051e8:	4013      	ands	r3, r2
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d10f      	bne.n	800520e <HAL_TIMEx_PWMN_Stop_IT+0xb2>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	6a1a      	ldr	r2, [r3, #32]
 80051f4:	f240 4344 	movw	r3, #1092	; 0x444
 80051f8:	4013      	ands	r3, r2
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d107      	bne.n	800520e <HAL_TIMEx_PWMN_Stop_IT+0xb2>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800520c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	6a1a      	ldr	r2, [r3, #32]
 8005214:	f241 1311 	movw	r3, #4369	; 0x1111
 8005218:	4013      	ands	r3, r2
 800521a:	2b00      	cmp	r3, #0
 800521c:	d10f      	bne.n	800523e <HAL_TIMEx_PWMN_Stop_IT+0xe2>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	6a1a      	ldr	r2, [r3, #32]
 8005224:	f240 4344 	movw	r3, #1092	; 0x444
 8005228:	4013      	ands	r3, r2
 800522a:	2b00      	cmp	r3, #0
 800522c:	d107      	bne.n	800523e <HAL_TIMEx_PWMN_Stop_IT+0xe2>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f022 0201 	bic.w	r2, r2, #1
 800523c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800523e:	2300      	movs	r3, #0
}
 8005240:	4618      	mov	r0, r3
 8005242:	3710      	adds	r7, #16
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005258:	2b01      	cmp	r3, #1
 800525a:	d101      	bne.n	8005260 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800525c:	2302      	movs	r3, #2
 800525e:	e032      	b.n	80052c6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2202      	movs	r2, #2
 800526c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005286:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	4313      	orrs	r3, r2
 8005290:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005298:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	68ba      	ldr	r2, [r7, #8]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68ba      	ldr	r2, [r7, #8]
 80052b2:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3714      	adds	r7, #20
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr

080052d2 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80052d2:	b480      	push	{r7}
 80052d4:	b085      	sub	sp, #20
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
 80052da:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80052dc:	2300      	movs	r3, #0
 80052de:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d101      	bne.n	80052ee <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80052ea:	2302      	movs	r3, #2
 80052ec:	e03d      	b.n	800536a <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	4313      	orrs	r3, r2
 8005302:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	4313      	orrs	r3, r2
 8005310:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	4313      	orrs	r3, r2
 800531e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4313      	orrs	r3, r2
 800532c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	691b      	ldr	r3, [r3, #16]
 8005338:	4313      	orrs	r3, r2
 800533a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	4313      	orrs	r3, r2
 8005348:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	69db      	ldr	r3, [r3, #28]
 8005354:	4313      	orrs	r3, r2
 8005356:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3714      	adds	r7, #20
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr

08005376 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005376:	b480      	push	{r7}
 8005378:	b083      	sub	sp, #12
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800537e:	bf00      	nop
 8005380:	370c      	adds	r7, #12
 8005382:	46bd      	mov	sp, r7
 8005384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005388:	4770      	bx	lr

0800538a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800538a:	b480      	push	{r7}
 800538c:	b083      	sub	sp, #12
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005392:	bf00      	nop
 8005394:	370c      	adds	r7, #12
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr

0800539e <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800539e:	b480      	push	{r7}
 80053a0:	b087      	sub	sp, #28
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	60f8      	str	r0, [r7, #12]
 80053a6:	60b9      	str	r1, [r7, #8]
 80053a8:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	f003 031f 	and.w	r3, r3, #31
 80053b0:	2204      	movs	r2, #4
 80053b2:	fa02 f303 	lsl.w	r3, r2, r3
 80053b6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6a1a      	ldr	r2, [r3, #32]
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	43db      	mvns	r3, r3
 80053c0:	401a      	ands	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6a1a      	ldr	r2, [r3, #32]
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	f003 031f 	and.w	r3, r3, #31
 80053d0:	6879      	ldr	r1, [r7, #4]
 80053d2:	fa01 f303 	lsl.w	r3, r1, r3
 80053d6:	431a      	orrs	r2, r3
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	621a      	str	r2, [r3, #32]
}
 80053dc:	bf00      	nop
 80053de:	371c      	adds	r7, #28
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d101      	bne.n	80053fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e03f      	b.n	800547a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d106      	bne.n	8005414 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f003 fc2a 	bl	8008c68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2224      	movs	r2, #36	; 0x24
 8005418:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68da      	ldr	r2, [r3, #12]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800542a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 fa65 	bl	80058fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	691a      	ldr	r2, [r3, #16]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005440:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	695a      	ldr	r2, [r3, #20]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005450:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68da      	ldr	r2, [r3, #12]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005460:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2220      	movs	r2, #32
 800546c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2220      	movs	r2, #32
 8005474:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3708      	adds	r7, #8
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
	...

08005484 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b088      	sub	sp, #32
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80054a4:	2300      	movs	r3, #0
 80054a6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80054a8:	2300      	movs	r3, #0
 80054aa:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	f003 030f 	and.w	r3, r3, #15
 80054b2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d10d      	bne.n	80054d6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	f003 0320 	and.w	r3, r3, #32
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d008      	beq.n	80054d6 <HAL_UART_IRQHandler+0x52>
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	f003 0320 	and.w	r3, r3, #32
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d003      	beq.n	80054d6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 f992 	bl	80057f8 <UART_Receive_IT>
      return;
 80054d4:	e0cc      	b.n	8005670 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	f000 80ab 	beq.w	8005634 <HAL_UART_IRQHandler+0x1b0>
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f003 0301 	and.w	r3, r3, #1
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d105      	bne.n	80054f4 <HAL_UART_IRQHandler+0x70>
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	f000 80a0 	beq.w	8005634 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	f003 0301 	and.w	r3, r3, #1
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00a      	beq.n	8005514 <HAL_UART_IRQHandler+0x90>
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005504:	2b00      	cmp	r3, #0
 8005506:	d005      	beq.n	8005514 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800550c:	f043 0201 	orr.w	r2, r3, #1
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	f003 0304 	and.w	r3, r3, #4
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00a      	beq.n	8005534 <HAL_UART_IRQHandler+0xb0>
 800551e:	697b      	ldr	r3, [r7, #20]
 8005520:	f003 0301 	and.w	r3, r3, #1
 8005524:	2b00      	cmp	r3, #0
 8005526:	d005      	beq.n	8005534 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800552c:	f043 0202 	orr.w	r2, r3, #2
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	f003 0302 	and.w	r3, r3, #2
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00a      	beq.n	8005554 <HAL_UART_IRQHandler+0xd0>
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	f003 0301 	and.w	r3, r3, #1
 8005544:	2b00      	cmp	r3, #0
 8005546:	d005      	beq.n	8005554 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800554c:	f043 0204 	orr.w	r2, r3, #4
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	f003 0308 	and.w	r3, r3, #8
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00a      	beq.n	8005574 <HAL_UART_IRQHandler+0xf0>
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	f003 0301 	and.w	r3, r3, #1
 8005564:	2b00      	cmp	r3, #0
 8005566:	d005      	beq.n	8005574 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800556c:	f043 0208 	orr.w	r2, r3, #8
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005578:	2b00      	cmp	r3, #0
 800557a:	d078      	beq.n	800566e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800557c:	69fb      	ldr	r3, [r7, #28]
 800557e:	f003 0320 	and.w	r3, r3, #32
 8005582:	2b00      	cmp	r3, #0
 8005584:	d007      	beq.n	8005596 <HAL_UART_IRQHandler+0x112>
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	f003 0320 	and.w	r3, r3, #32
 800558c:	2b00      	cmp	r3, #0
 800558e:	d002      	beq.n	8005596 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f000 f931 	bl	80057f8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	695b      	ldr	r3, [r3, #20]
 800559c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a0:	2b40      	cmp	r3, #64	; 0x40
 80055a2:	bf0c      	ite	eq
 80055a4:	2301      	moveq	r3, #1
 80055a6:	2300      	movne	r3, #0
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055b0:	f003 0308 	and.w	r3, r3, #8
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d102      	bne.n	80055be <HAL_UART_IRQHandler+0x13a>
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d031      	beq.n	8005622 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 f87a 	bl	80056b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ce:	2b40      	cmp	r3, #64	; 0x40
 80055d0:	d123      	bne.n	800561a <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	695a      	ldr	r2, [r3, #20]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055e0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d013      	beq.n	8005612 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ee:	4a22      	ldr	r2, [pc, #136]	; (8005678 <HAL_UART_IRQHandler+0x1f4>)
 80055f0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055f6:	4618      	mov	r0, r3
 80055f8:	f7fd f89c 	bl	8002734 <HAL_DMA_Abort_IT>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d016      	beq.n	8005630 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005606:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800560c:	4610      	mov	r0, r2
 800560e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005610:	e00e      	b.n	8005630 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 f846 	bl	80056a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005618:	e00a      	b.n	8005630 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 f842 	bl	80056a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005620:	e006      	b.n	8005630 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 f83e 	bl	80056a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800562e:	e01e      	b.n	800566e <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005630:	bf00      	nop
    return;
 8005632:	e01c      	b.n	800566e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800563a:	2b00      	cmp	r3, #0
 800563c:	d008      	beq.n	8005650 <HAL_UART_IRQHandler+0x1cc>
 800563e:	69bb      	ldr	r3, [r7, #24]
 8005640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005644:	2b00      	cmp	r3, #0
 8005646:	d003      	beq.n	8005650 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f000 f867 	bl	800571c <UART_Transmit_IT>
    return;
 800564e:	e00f      	b.n	8005670 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00a      	beq.n	8005670 <HAL_UART_IRQHandler+0x1ec>
 800565a:	69bb      	ldr	r3, [r7, #24]
 800565c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005660:	2b00      	cmp	r3, #0
 8005662:	d005      	beq.n	8005670 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 f8af 	bl	80057c8 <UART_EndTransmit_IT>
    return;
 800566a:	bf00      	nop
 800566c:	e000      	b.n	8005670 <HAL_UART_IRQHandler+0x1ec>
    return;
 800566e:	bf00      	nop
  }
}
 8005670:	3720      	adds	r7, #32
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	080056f5 	.word	0x080056f5

0800567c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005684:	bf00      	nop
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005698:	bf00      	nop
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80056ac:	bf00      	nop
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68da      	ldr	r2, [r3, #12]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80056ce:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	695a      	ldr	r2, [r3, #20]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f022 0201 	bic.w	r2, r2, #1
 80056de:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2220      	movs	r2, #32
 80056e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80056e8:	bf00      	nop
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005700:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2200      	movs	r2, #0
 8005706:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2200      	movs	r2, #0
 800570c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800570e:	68f8      	ldr	r0, [r7, #12]
 8005710:	f7ff ffc8 	bl	80056a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005714:	bf00      	nop
 8005716:	3710      	adds	r7, #16
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800572a:	b2db      	uxtb	r3, r3
 800572c:	2b21      	cmp	r3, #33	; 0x21
 800572e:	d144      	bne.n	80057ba <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005738:	d11a      	bne.n	8005770 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6a1b      	ldr	r3, [r3, #32]
 800573e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	881b      	ldrh	r3, [r3, #0]
 8005744:	461a      	mov	r2, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800574e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d105      	bne.n	8005764 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a1b      	ldr	r3, [r3, #32]
 800575c:	1c9a      	adds	r2, r3, #2
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	621a      	str	r2, [r3, #32]
 8005762:	e00e      	b.n	8005782 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a1b      	ldr	r3, [r3, #32]
 8005768:	1c5a      	adds	r2, r3, #1
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	621a      	str	r2, [r3, #32]
 800576e:	e008      	b.n	8005782 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a1b      	ldr	r3, [r3, #32]
 8005774:	1c59      	adds	r1, r3, #1
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	6211      	str	r1, [r2, #32]
 800577a:	781a      	ldrb	r2, [r3, #0]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005786:	b29b      	uxth	r3, r3
 8005788:	3b01      	subs	r3, #1
 800578a:	b29b      	uxth	r3, r3
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	4619      	mov	r1, r3
 8005790:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005792:	2b00      	cmp	r3, #0
 8005794:	d10f      	bne.n	80057b6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68da      	ldr	r2, [r3, #12]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057a4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	68da      	ldr	r2, [r3, #12]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80057b4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80057b6:	2300      	movs	r3, #0
 80057b8:	e000      	b.n	80057bc <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80057ba:	2302      	movs	r3, #2
  }
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3714      	adds	r7, #20
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	68da      	ldr	r2, [r3, #12]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057de:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2220      	movs	r2, #32
 80057e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f7ff ff47 	bl	800567c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80057ee:	2300      	movs	r3, #0
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3708      	adds	r7, #8
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005806:	b2db      	uxtb	r3, r3
 8005808:	2b22      	cmp	r3, #34	; 0x22
 800580a:	d171      	bne.n	80058f0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005814:	d123      	bne.n	800585e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800581a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d10e      	bne.n	8005842 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	b29b      	uxth	r3, r3
 800582c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005830:	b29a      	uxth	r2, r3
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800583a:	1c9a      	adds	r2, r3, #2
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	629a      	str	r2, [r3, #40]	; 0x28
 8005840:	e029      	b.n	8005896 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	b29b      	uxth	r3, r3
 800584a:	b2db      	uxtb	r3, r3
 800584c:	b29a      	uxth	r2, r3
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005856:	1c5a      	adds	r2, r3, #1
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	629a      	str	r2, [r3, #40]	; 0x28
 800585c:	e01b      	b.n	8005896 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d10a      	bne.n	800587c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	6858      	ldr	r0, [r3, #4]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005870:	1c59      	adds	r1, r3, #1
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	6291      	str	r1, [r2, #40]	; 0x28
 8005876:	b2c2      	uxtb	r2, r0
 8005878:	701a      	strb	r2, [r3, #0]
 800587a:	e00c      	b.n	8005896 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	b2da      	uxtb	r2, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005888:	1c58      	adds	r0, r3, #1
 800588a:	6879      	ldr	r1, [r7, #4]
 800588c:	6288      	str	r0, [r1, #40]	; 0x28
 800588e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005892:	b2d2      	uxtb	r2, r2
 8005894:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800589a:	b29b      	uxth	r3, r3
 800589c:	3b01      	subs	r3, #1
 800589e:	b29b      	uxth	r3, r3
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	4619      	mov	r1, r3
 80058a4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d120      	bne.n	80058ec <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	68da      	ldr	r2, [r3, #12]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f022 0220 	bic.w	r2, r2, #32
 80058b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	68da      	ldr	r2, [r3, #12]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	695a      	ldr	r2, [r3, #20]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f022 0201 	bic.w	r2, r2, #1
 80058d8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2220      	movs	r2, #32
 80058de:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f7ff fed4 	bl	8005690 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80058e8:	2300      	movs	r3, #0
 80058ea:	e002      	b.n	80058f2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80058ec:	2300      	movs	r3, #0
 80058ee:	e000      	b.n	80058f2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80058f0:	2302      	movs	r3, #2
  }
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3710      	adds	r7, #16
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
	...

080058fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058fc:	b5b0      	push	{r4, r5, r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	68da      	ldr	r2, [r3, #12]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	430a      	orrs	r2, r1
 8005918:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	689a      	ldr	r2, [r3, #8]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	431a      	orrs	r2, r3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	695b      	ldr	r3, [r3, #20]
 8005928:	431a      	orrs	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	69db      	ldr	r3, [r3, #28]
 800592e:	4313      	orrs	r3, r2
 8005930:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800593c:	f023 030c 	bic.w	r3, r3, #12
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	6812      	ldr	r2, [r2, #0]
 8005944:	68f9      	ldr	r1, [r7, #12]
 8005946:	430b      	orrs	r3, r1
 8005948:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	695b      	ldr	r3, [r3, #20]
 8005950:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	699a      	ldr	r2, [r3, #24]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	430a      	orrs	r2, r1
 800595e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	69db      	ldr	r3, [r3, #28]
 8005964:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005968:	f040 80e4 	bne.w	8005b34 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4aab      	ldr	r2, [pc, #684]	; (8005c20 <UART_SetConfig+0x324>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d004      	beq.n	8005980 <UART_SetConfig+0x84>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4aaa      	ldr	r2, [pc, #680]	; (8005c24 <UART_SetConfig+0x328>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d16c      	bne.n	8005a5a <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005980:	f7fd fc42 	bl	8003208 <HAL_RCC_GetPCLK2Freq>
 8005984:	4602      	mov	r2, r0
 8005986:	4613      	mov	r3, r2
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	4413      	add	r3, r2
 800598c:	009a      	lsls	r2, r3, #2
 800598e:	441a      	add	r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	005b      	lsls	r3, r3, #1
 8005996:	fbb2 f3f3 	udiv	r3, r2, r3
 800599a:	4aa3      	ldr	r2, [pc, #652]	; (8005c28 <UART_SetConfig+0x32c>)
 800599c:	fba2 2303 	umull	r2, r3, r2, r3
 80059a0:	095b      	lsrs	r3, r3, #5
 80059a2:	011c      	lsls	r4, r3, #4
 80059a4:	f7fd fc30 	bl	8003208 <HAL_RCC_GetPCLK2Freq>
 80059a8:	4602      	mov	r2, r0
 80059aa:	4613      	mov	r3, r2
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	4413      	add	r3, r2
 80059b0:	009a      	lsls	r2, r3, #2
 80059b2:	441a      	add	r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	005b      	lsls	r3, r3, #1
 80059ba:	fbb2 f5f3 	udiv	r5, r2, r3
 80059be:	f7fd fc23 	bl	8003208 <HAL_RCC_GetPCLK2Freq>
 80059c2:	4602      	mov	r2, r0
 80059c4:	4613      	mov	r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	4413      	add	r3, r2
 80059ca:	009a      	lsls	r2, r3, #2
 80059cc:	441a      	add	r2, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	005b      	lsls	r3, r3, #1
 80059d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059d8:	4a93      	ldr	r2, [pc, #588]	; (8005c28 <UART_SetConfig+0x32c>)
 80059da:	fba2 2303 	umull	r2, r3, r2, r3
 80059de:	095b      	lsrs	r3, r3, #5
 80059e0:	2264      	movs	r2, #100	; 0x64
 80059e2:	fb02 f303 	mul.w	r3, r2, r3
 80059e6:	1aeb      	subs	r3, r5, r3
 80059e8:	00db      	lsls	r3, r3, #3
 80059ea:	3332      	adds	r3, #50	; 0x32
 80059ec:	4a8e      	ldr	r2, [pc, #568]	; (8005c28 <UART_SetConfig+0x32c>)
 80059ee:	fba2 2303 	umull	r2, r3, r2, r3
 80059f2:	095b      	lsrs	r3, r3, #5
 80059f4:	005b      	lsls	r3, r3, #1
 80059f6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80059fa:	441c      	add	r4, r3
 80059fc:	f7fd fc04 	bl	8003208 <HAL_RCC_GetPCLK2Freq>
 8005a00:	4602      	mov	r2, r0
 8005a02:	4613      	mov	r3, r2
 8005a04:	009b      	lsls	r3, r3, #2
 8005a06:	4413      	add	r3, r2
 8005a08:	009a      	lsls	r2, r3, #2
 8005a0a:	441a      	add	r2, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	005b      	lsls	r3, r3, #1
 8005a12:	fbb2 f5f3 	udiv	r5, r2, r3
 8005a16:	f7fd fbf7 	bl	8003208 <HAL_RCC_GetPCLK2Freq>
 8005a1a:	4602      	mov	r2, r0
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	4413      	add	r3, r2
 8005a22:	009a      	lsls	r2, r3, #2
 8005a24:	441a      	add	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	005b      	lsls	r3, r3, #1
 8005a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a30:	4a7d      	ldr	r2, [pc, #500]	; (8005c28 <UART_SetConfig+0x32c>)
 8005a32:	fba2 2303 	umull	r2, r3, r2, r3
 8005a36:	095b      	lsrs	r3, r3, #5
 8005a38:	2264      	movs	r2, #100	; 0x64
 8005a3a:	fb02 f303 	mul.w	r3, r2, r3
 8005a3e:	1aeb      	subs	r3, r5, r3
 8005a40:	00db      	lsls	r3, r3, #3
 8005a42:	3332      	adds	r3, #50	; 0x32
 8005a44:	4a78      	ldr	r2, [pc, #480]	; (8005c28 <UART_SetConfig+0x32c>)
 8005a46:	fba2 2303 	umull	r2, r3, r2, r3
 8005a4a:	095b      	lsrs	r3, r3, #5
 8005a4c:	f003 0207 	and.w	r2, r3, #7
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4422      	add	r2, r4
 8005a56:	609a      	str	r2, [r3, #8]
 8005a58:	e154      	b.n	8005d04 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005a5a:	f7fd fbc1 	bl	80031e0 <HAL_RCC_GetPCLK1Freq>
 8005a5e:	4602      	mov	r2, r0
 8005a60:	4613      	mov	r3, r2
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	4413      	add	r3, r2
 8005a66:	009a      	lsls	r2, r3, #2
 8005a68:	441a      	add	r2, r3
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	005b      	lsls	r3, r3, #1
 8005a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a74:	4a6c      	ldr	r2, [pc, #432]	; (8005c28 <UART_SetConfig+0x32c>)
 8005a76:	fba2 2303 	umull	r2, r3, r2, r3
 8005a7a:	095b      	lsrs	r3, r3, #5
 8005a7c:	011c      	lsls	r4, r3, #4
 8005a7e:	f7fd fbaf 	bl	80031e0 <HAL_RCC_GetPCLK1Freq>
 8005a82:	4602      	mov	r2, r0
 8005a84:	4613      	mov	r3, r2
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	4413      	add	r3, r2
 8005a8a:	009a      	lsls	r2, r3, #2
 8005a8c:	441a      	add	r2, r3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	685b      	ldr	r3, [r3, #4]
 8005a92:	005b      	lsls	r3, r3, #1
 8005a94:	fbb2 f5f3 	udiv	r5, r2, r3
 8005a98:	f7fd fba2 	bl	80031e0 <HAL_RCC_GetPCLK1Freq>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	4413      	add	r3, r2
 8005aa4:	009a      	lsls	r2, r3, #2
 8005aa6:	441a      	add	r2, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	005b      	lsls	r3, r3, #1
 8005aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ab2:	4a5d      	ldr	r2, [pc, #372]	; (8005c28 <UART_SetConfig+0x32c>)
 8005ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab8:	095b      	lsrs	r3, r3, #5
 8005aba:	2264      	movs	r2, #100	; 0x64
 8005abc:	fb02 f303 	mul.w	r3, r2, r3
 8005ac0:	1aeb      	subs	r3, r5, r3
 8005ac2:	00db      	lsls	r3, r3, #3
 8005ac4:	3332      	adds	r3, #50	; 0x32
 8005ac6:	4a58      	ldr	r2, [pc, #352]	; (8005c28 <UART_SetConfig+0x32c>)
 8005ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8005acc:	095b      	lsrs	r3, r3, #5
 8005ace:	005b      	lsls	r3, r3, #1
 8005ad0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ad4:	441c      	add	r4, r3
 8005ad6:	f7fd fb83 	bl	80031e0 <HAL_RCC_GetPCLK1Freq>
 8005ada:	4602      	mov	r2, r0
 8005adc:	4613      	mov	r3, r2
 8005ade:	009b      	lsls	r3, r3, #2
 8005ae0:	4413      	add	r3, r2
 8005ae2:	009a      	lsls	r2, r3, #2
 8005ae4:	441a      	add	r2, r3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	005b      	lsls	r3, r3, #1
 8005aec:	fbb2 f5f3 	udiv	r5, r2, r3
 8005af0:	f7fd fb76 	bl	80031e0 <HAL_RCC_GetPCLK1Freq>
 8005af4:	4602      	mov	r2, r0
 8005af6:	4613      	mov	r3, r2
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	4413      	add	r3, r2
 8005afc:	009a      	lsls	r2, r3, #2
 8005afe:	441a      	add	r2, r3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	005b      	lsls	r3, r3, #1
 8005b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b0a:	4a47      	ldr	r2, [pc, #284]	; (8005c28 <UART_SetConfig+0x32c>)
 8005b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b10:	095b      	lsrs	r3, r3, #5
 8005b12:	2264      	movs	r2, #100	; 0x64
 8005b14:	fb02 f303 	mul.w	r3, r2, r3
 8005b18:	1aeb      	subs	r3, r5, r3
 8005b1a:	00db      	lsls	r3, r3, #3
 8005b1c:	3332      	adds	r3, #50	; 0x32
 8005b1e:	4a42      	ldr	r2, [pc, #264]	; (8005c28 <UART_SetConfig+0x32c>)
 8005b20:	fba2 2303 	umull	r2, r3, r2, r3
 8005b24:	095b      	lsrs	r3, r3, #5
 8005b26:	f003 0207 	and.w	r2, r3, #7
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4422      	add	r2, r4
 8005b30:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8005b32:	e0e7      	b.n	8005d04 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a39      	ldr	r2, [pc, #228]	; (8005c20 <UART_SetConfig+0x324>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d004      	beq.n	8005b48 <UART_SetConfig+0x24c>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a38      	ldr	r2, [pc, #224]	; (8005c24 <UART_SetConfig+0x328>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d171      	bne.n	8005c2c <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005b48:	f7fd fb5e 	bl	8003208 <HAL_RCC_GetPCLK2Freq>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	4613      	mov	r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	4413      	add	r3, r2
 8005b54:	009a      	lsls	r2, r3, #2
 8005b56:	441a      	add	r2, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b62:	4a31      	ldr	r2, [pc, #196]	; (8005c28 <UART_SetConfig+0x32c>)
 8005b64:	fba2 2303 	umull	r2, r3, r2, r3
 8005b68:	095b      	lsrs	r3, r3, #5
 8005b6a:	011c      	lsls	r4, r3, #4
 8005b6c:	f7fd fb4c 	bl	8003208 <HAL_RCC_GetPCLK2Freq>
 8005b70:	4602      	mov	r2, r0
 8005b72:	4613      	mov	r3, r2
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	4413      	add	r3, r2
 8005b78:	009a      	lsls	r2, r3, #2
 8005b7a:	441a      	add	r2, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	fbb2 f5f3 	udiv	r5, r2, r3
 8005b86:	f7fd fb3f 	bl	8003208 <HAL_RCC_GetPCLK2Freq>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	4613      	mov	r3, r2
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	4413      	add	r3, r2
 8005b92:	009a      	lsls	r2, r3, #2
 8005b94:	441a      	add	r2, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ba0:	4a21      	ldr	r2, [pc, #132]	; (8005c28 <UART_SetConfig+0x32c>)
 8005ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba6:	095b      	lsrs	r3, r3, #5
 8005ba8:	2264      	movs	r2, #100	; 0x64
 8005baa:	fb02 f303 	mul.w	r3, r2, r3
 8005bae:	1aeb      	subs	r3, r5, r3
 8005bb0:	011b      	lsls	r3, r3, #4
 8005bb2:	3332      	adds	r3, #50	; 0x32
 8005bb4:	4a1c      	ldr	r2, [pc, #112]	; (8005c28 <UART_SetConfig+0x32c>)
 8005bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8005bba:	095b      	lsrs	r3, r3, #5
 8005bbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bc0:	441c      	add	r4, r3
 8005bc2:	f7fd fb21 	bl	8003208 <HAL_RCC_GetPCLK2Freq>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	4613      	mov	r3, r2
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	4413      	add	r3, r2
 8005bce:	009a      	lsls	r2, r3, #2
 8005bd0:	441a      	add	r2, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	fbb2 f5f3 	udiv	r5, r2, r3
 8005bdc:	f7fd fb14 	bl	8003208 <HAL_RCC_GetPCLK2Freq>
 8005be0:	4602      	mov	r2, r0
 8005be2:	4613      	mov	r3, r2
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	4413      	add	r3, r2
 8005be8:	009a      	lsls	r2, r3, #2
 8005bea:	441a      	add	r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bf6:	4a0c      	ldr	r2, [pc, #48]	; (8005c28 <UART_SetConfig+0x32c>)
 8005bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bfc:	095b      	lsrs	r3, r3, #5
 8005bfe:	2264      	movs	r2, #100	; 0x64
 8005c00:	fb02 f303 	mul.w	r3, r2, r3
 8005c04:	1aeb      	subs	r3, r5, r3
 8005c06:	011b      	lsls	r3, r3, #4
 8005c08:	3332      	adds	r3, #50	; 0x32
 8005c0a:	4a07      	ldr	r2, [pc, #28]	; (8005c28 <UART_SetConfig+0x32c>)
 8005c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c10:	095b      	lsrs	r3, r3, #5
 8005c12:	f003 020f 	and.w	r2, r3, #15
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4422      	add	r2, r4
 8005c1c:	609a      	str	r2, [r3, #8]
 8005c1e:	e071      	b.n	8005d04 <UART_SetConfig+0x408>
 8005c20:	40011000 	.word	0x40011000
 8005c24:	40011400 	.word	0x40011400
 8005c28:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005c2c:	f7fd fad8 	bl	80031e0 <HAL_RCC_GetPCLK1Freq>
 8005c30:	4602      	mov	r2, r0
 8005c32:	4613      	mov	r3, r2
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	4413      	add	r3, r2
 8005c38:	009a      	lsls	r2, r3, #2
 8005c3a:	441a      	add	r2, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	009b      	lsls	r3, r3, #2
 8005c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c46:	4a31      	ldr	r2, [pc, #196]	; (8005d0c <UART_SetConfig+0x410>)
 8005c48:	fba2 2303 	umull	r2, r3, r2, r3
 8005c4c:	095b      	lsrs	r3, r3, #5
 8005c4e:	011c      	lsls	r4, r3, #4
 8005c50:	f7fd fac6 	bl	80031e0 <HAL_RCC_GetPCLK1Freq>
 8005c54:	4602      	mov	r2, r0
 8005c56:	4613      	mov	r3, r2
 8005c58:	009b      	lsls	r3, r3, #2
 8005c5a:	4413      	add	r3, r2
 8005c5c:	009a      	lsls	r2, r3, #2
 8005c5e:	441a      	add	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	fbb2 f5f3 	udiv	r5, r2, r3
 8005c6a:	f7fd fab9 	bl	80031e0 <HAL_RCC_GetPCLK1Freq>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	4613      	mov	r3, r2
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	4413      	add	r3, r2
 8005c76:	009a      	lsls	r2, r3, #2
 8005c78:	441a      	add	r2, r3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c84:	4a21      	ldr	r2, [pc, #132]	; (8005d0c <UART_SetConfig+0x410>)
 8005c86:	fba2 2303 	umull	r2, r3, r2, r3
 8005c8a:	095b      	lsrs	r3, r3, #5
 8005c8c:	2264      	movs	r2, #100	; 0x64
 8005c8e:	fb02 f303 	mul.w	r3, r2, r3
 8005c92:	1aeb      	subs	r3, r5, r3
 8005c94:	011b      	lsls	r3, r3, #4
 8005c96:	3332      	adds	r3, #50	; 0x32
 8005c98:	4a1c      	ldr	r2, [pc, #112]	; (8005d0c <UART_SetConfig+0x410>)
 8005c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c9e:	095b      	lsrs	r3, r3, #5
 8005ca0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ca4:	441c      	add	r4, r3
 8005ca6:	f7fd fa9b 	bl	80031e0 <HAL_RCC_GetPCLK1Freq>
 8005caa:	4602      	mov	r2, r0
 8005cac:	4613      	mov	r3, r2
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	4413      	add	r3, r2
 8005cb2:	009a      	lsls	r2, r3, #2
 8005cb4:	441a      	add	r2, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	fbb2 f5f3 	udiv	r5, r2, r3
 8005cc0:	f7fd fa8e 	bl	80031e0 <HAL_RCC_GetPCLK1Freq>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	4613      	mov	r3, r2
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	4413      	add	r3, r2
 8005ccc:	009a      	lsls	r2, r3, #2
 8005cce:	441a      	add	r2, r3
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cda:	4a0c      	ldr	r2, [pc, #48]	; (8005d0c <UART_SetConfig+0x410>)
 8005cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce0:	095b      	lsrs	r3, r3, #5
 8005ce2:	2264      	movs	r2, #100	; 0x64
 8005ce4:	fb02 f303 	mul.w	r3, r2, r3
 8005ce8:	1aeb      	subs	r3, r5, r3
 8005cea:	011b      	lsls	r3, r3, #4
 8005cec:	3332      	adds	r3, #50	; 0x32
 8005cee:	4a07      	ldr	r2, [pc, #28]	; (8005d0c <UART_SetConfig+0x410>)
 8005cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf4:	095b      	lsrs	r3, r3, #5
 8005cf6:	f003 020f 	and.w	r2, r3, #15
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4422      	add	r2, r4
 8005d00:	609a      	str	r2, [r3, #8]
}
 8005d02:	e7ff      	b.n	8005d04 <UART_SetConfig+0x408>
 8005d04:	bf00      	nop
 8005d06:	3710      	adds	r7, #16
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bdb0      	pop	{r4, r5, r7, pc}
 8005d0c:	51eb851f 	.word	0x51eb851f

08005d10 <ACR_Start>:
volatile float forced_theta_re = 0.0f;



void ACR_Start()
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	af00      	add	r7, sp, #0

	ACR_enable = 1;
 8005d14:	4b03      	ldr	r3, [pc, #12]	; (8005d24 <ACR_Start+0x14>)
 8005d16:	2201      	movs	r2, #1
 8005d18:	701a      	strb	r2, [r3, #0]
	ACR_Reset();
 8005d1a:	f000 fa5f 	bl	80061dc <ACR_Reset>

}
 8005d1e:	bf00      	nop
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	200000c0 	.word	0x200000c0

08005d28 <currentControl>:
}



inline void currentControl(void)
{
 8005d28:	b590      	push	{r4, r7, lr}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0



	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_SET);
 8005d2e:	2201      	movs	r2, #1
 8005d30:	2140      	movs	r1, #64	; 0x40
 8005d32:	48bb      	ldr	r0, [pc, #748]	; (8006020 <currentControl+0x2f8>)
 8005d34:	f7fd f932 	bl	8002f9c <HAL_GPIO_WritePin>



	if(forced_commute_enable)
 8005d38:	4bba      	ldr	r3, [pc, #744]	; (8006024 <currentControl+0x2fc>)
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d076      	beq.n	8005e30 <currentControl+0x108>
	{
		float _forced_theta_re = fmodf(forced_theta * POLES / 2, 2.0f * M_PI);
 8005d42:	4bb9      	ldr	r3, [pc, #740]	; (8006028 <currentControl+0x300>)
 8005d44:	edd3 7a00 	vldr	s15, [r3]
 8005d48:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 8005d4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d50:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8005d54:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005d58:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800602c <currentControl+0x304>
 8005d5c:	eeb0 0a66 	vmov.f32	s0, s13
 8005d60:	f003 ff76 	bl	8009c50 <fmodf>
 8005d64:	ed87 0a01 	vstr	s0, [r7, #4]

		if(_forced_theta_re < 0.0f)				forced_theta_re = _forced_theta_re + 2 * M_PI;
 8005d68:	edd7 7a01 	vldr	s15, [r7, #4]
 8005d6c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d74:	d511      	bpl.n	8005d9a <currentControl+0x72>
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f7fa fbfe 	bl	8000578 <__aeabi_f2d>
 8005d7c:	a3a4      	add	r3, pc, #656	; (adr r3, 8006010 <currentControl+0x2e8>)
 8005d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d82:	f7fa fa9b 	bl	80002bc <__adddf3>
 8005d86:	4603      	mov	r3, r0
 8005d88:	460c      	mov	r4, r1
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	4621      	mov	r1, r4
 8005d8e:	f7fa fee5 	bl	8000b5c <__aeabi_d2f>
 8005d92:	4602      	mov	r2, r0
 8005d94:	4ba6      	ldr	r3, [pc, #664]	; (8006030 <currentControl+0x308>)
 8005d96:	601a      	str	r2, [r3, #0]
 8005d98:	e01f      	b.n	8005dda <currentControl+0xb2>
		else if(_forced_theta_re >= 2 * M_PI)	forced_theta_re = _forced_theta_re - 2 * M_PI;
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f7fa fbec 	bl	8000578 <__aeabi_f2d>
 8005da0:	a39b      	add	r3, pc, #620	; (adr r3, 8006010 <currentControl+0x2e8>)
 8005da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da6:	f7fa fec5 	bl	8000b34 <__aeabi_dcmpge>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d011      	beq.n	8005dd4 <currentControl+0xac>
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f7fa fbe1 	bl	8000578 <__aeabi_f2d>
 8005db6:	a396      	add	r3, pc, #600	; (adr r3, 8006010 <currentControl+0x2e8>)
 8005db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dbc:	f7fa fa7c 	bl	80002b8 <__aeabi_dsub>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	460c      	mov	r4, r1
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	4621      	mov	r1, r4
 8005dc8:	f7fa fec8 	bl	8000b5c <__aeabi_d2f>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	4b98      	ldr	r3, [pc, #608]	; (8006030 <currentControl+0x308>)
 8005dd0:	601a      	str	r2, [r3, #0]
 8005dd2:	e002      	b.n	8005dda <currentControl+0xb2>
		else									forced_theta_re = _forced_theta_re;
 8005dd4:	4a96      	ldr	r2, [pc, #600]	; (8006030 <currentControl+0x308>)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6013      	str	r3, [r2, #0]

		cos_theta_re = sin_table2[(int)((forced_theta_re * 0.3183f + 0.5f) * 5000.0f)];
 8005dda:	4b95      	ldr	r3, [pc, #596]	; (8006030 <currentControl+0x308>)
 8005ddc:	edd3 7a00 	vldr	s15, [r3]
 8005de0:	ed9f 7a94 	vldr	s14, [pc, #592]	; 8006034 <currentControl+0x30c>
 8005de4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005de8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005dec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005df0:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8006038 <currentControl+0x310>
 8005df4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005df8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005dfc:	ee17 3a90 	vmov	r3, s15
 8005e00:	4a8e      	ldr	r2, [pc, #568]	; (800603c <currentControl+0x314>)
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	4413      	add	r3, r2
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a8d      	ldr	r2, [pc, #564]	; (8006040 <currentControl+0x318>)
 8005e0a:	6013      	str	r3, [r2, #0]
		sin_theta_re = sin_table2[(int)(forced_theta_re * 1591.54943f)];
 8005e0c:	4b88      	ldr	r3, [pc, #544]	; (8006030 <currentControl+0x308>)
 8005e0e:	edd3 7a00 	vldr	s15, [r3]
 8005e12:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8006044 <currentControl+0x31c>
 8005e16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005e1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e1e:	ee17 3a90 	vmov	r3, s15
 8005e22:	4a86      	ldr	r2, [pc, #536]	; (800603c <currentControl+0x314>)
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	4413      	add	r3, r2
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a87      	ldr	r2, [pc, #540]	; (8006048 <currentControl+0x320>)
 8005e2c:	6013      	str	r3, [r2, #0]
 8005e2e:	e001      	b.n	8005e34 <currentControl+0x10c>
	}
	else
	{
		refreshEncoder();
 8005e30:	f002 fa56 	bl	80082e0 <refreshEncoder>
	}

	get_current_dq(&Id, &Iq, sector_SVM, cos_theta_re, sin_theta_re);
 8005e34:	4b85      	ldr	r3, [pc, #532]	; (800604c <currentControl+0x324>)
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	4b81      	ldr	r3, [pc, #516]	; (8006040 <currentControl+0x318>)
 8005e3a:	edd3 7a00 	vldr	s15, [r3]
 8005e3e:	4b82      	ldr	r3, [pc, #520]	; (8006048 <currentControl+0x320>)
 8005e40:	ed93 7a00 	vldr	s14, [r3]
 8005e44:	eef0 0a47 	vmov.f32	s1, s14
 8005e48:	eeb0 0a67 	vmov.f32	s0, s15
 8005e4c:	4980      	ldr	r1, [pc, #512]	; (8006050 <currentControl+0x328>)
 8005e4e:	4881      	ldr	r0, [pc, #516]	; (8006054 <currentControl+0x32c>)
 8005e50:	f000 fe58 	bl	8006b04 <get_current_dq>


	if(theta_re < M_PI)
 8005e54:	4b80      	ldr	r3, [pc, #512]	; (8006058 <currentControl+0x330>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f7fa fb8d 	bl	8000578 <__aeabi_f2d>
 8005e5e:	a36e      	add	r3, pc, #440	; (adr r3, 8006018 <currentControl+0x2f0>)
 8005e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e64:	f7fa fe52 	bl	8000b0c <__aeabi_dcmplt>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d005      	beq.n	8005e7a <currentControl+0x152>
		HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_RESET);
 8005e6e:	2200      	movs	r2, #0
 8005e70:	2140      	movs	r1, #64	; 0x40
 8005e72:	487a      	ldr	r0, [pc, #488]	; (800605c <currentControl+0x334>)
 8005e74:	f7fd f892 	bl	8002f9c <HAL_GPIO_WritePin>
 8005e78:	e004      	b.n	8005e84 <currentControl+0x15c>
	else
		HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_SET);
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	2140      	movs	r1, #64	; 0x40
 8005e7e:	4877      	ldr	r0, [pc, #476]	; (800605c <currentControl+0x334>)
 8005e80:	f7fd f88c 	bl	8002f9c <HAL_GPIO_WritePin>


	/********** ACR (Auto Current Regulator) **********/

	if(ACR_enable)
 8005e84:	4b76      	ldr	r3, [pc, #472]	; (8006060 <currentControl+0x338>)
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	f000 815c 	beq.w	8006148 <currentControl+0x420>
	{

		if(Id_ref < -Id_limit)		_Id_ref = -Id_limit;
 8005e90:	4b74      	ldr	r3, [pc, #464]	; (8006064 <currentControl+0x33c>)
 8005e92:	edd3 7a00 	vldr	s15, [r3]
 8005e96:	eeb1 7a67 	vneg.f32	s14, s15
 8005e9a:	4b73      	ldr	r3, [pc, #460]	; (8006068 <currentControl+0x340>)
 8005e9c:	edd3 7a00 	vldr	s15, [r3]
 8005ea0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ea8:	dd08      	ble.n	8005ebc <currentControl+0x194>
 8005eaa:	4b6e      	ldr	r3, [pc, #440]	; (8006064 <currentControl+0x33c>)
 8005eac:	edd3 7a00 	vldr	s15, [r3]
 8005eb0:	eef1 7a67 	vneg.f32	s15, s15
 8005eb4:	4b6d      	ldr	r3, [pc, #436]	; (800606c <currentControl+0x344>)
 8005eb6:	edc3 7a00 	vstr	s15, [r3]
 8005eba:	e013      	b.n	8005ee4 <currentControl+0x1bc>
		else if(Id_ref > Id_limit)	_Id_ref = Id_limit;
 8005ebc:	4b6a      	ldr	r3, [pc, #424]	; (8006068 <currentControl+0x340>)
 8005ebe:	ed93 7a00 	vldr	s14, [r3]
 8005ec2:	4b68      	ldr	r3, [pc, #416]	; (8006064 <currentControl+0x33c>)
 8005ec4:	edd3 7a00 	vldr	s15, [r3]
 8005ec8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ed0:	dd04      	ble.n	8005edc <currentControl+0x1b4>
 8005ed2:	4b64      	ldr	r3, [pc, #400]	; (8006064 <currentControl+0x33c>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a65      	ldr	r2, [pc, #404]	; (800606c <currentControl+0x344>)
 8005ed8:	6013      	str	r3, [r2, #0]
 8005eda:	e003      	b.n	8005ee4 <currentControl+0x1bc>
		else						_Id_ref = Id_ref;
 8005edc:	4b62      	ldr	r3, [pc, #392]	; (8006068 <currentControl+0x340>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a62      	ldr	r2, [pc, #392]	; (800606c <currentControl+0x344>)
 8005ee2:	6013      	str	r3, [r2, #0]

		if(Iq_ref < -Iq_limit)		_Iq_ref = -Iq_limit;
 8005ee4:	4b62      	ldr	r3, [pc, #392]	; (8006070 <currentControl+0x348>)
 8005ee6:	edd3 7a00 	vldr	s15, [r3]
 8005eea:	eeb1 7a67 	vneg.f32	s14, s15
 8005eee:	4b61      	ldr	r3, [pc, #388]	; (8006074 <currentControl+0x34c>)
 8005ef0:	edd3 7a00 	vldr	s15, [r3]
 8005ef4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005efc:	dd08      	ble.n	8005f10 <currentControl+0x1e8>
 8005efe:	4b5c      	ldr	r3, [pc, #368]	; (8006070 <currentControl+0x348>)
 8005f00:	edd3 7a00 	vldr	s15, [r3]
 8005f04:	eef1 7a67 	vneg.f32	s15, s15
 8005f08:	4b5b      	ldr	r3, [pc, #364]	; (8006078 <currentControl+0x350>)
 8005f0a:	edc3 7a00 	vstr	s15, [r3]
 8005f0e:	e013      	b.n	8005f38 <currentControl+0x210>
		else if(Iq_ref > Iq_limit)	_Iq_ref = Iq_limit;
 8005f10:	4b58      	ldr	r3, [pc, #352]	; (8006074 <currentControl+0x34c>)
 8005f12:	ed93 7a00 	vldr	s14, [r3]
 8005f16:	4b56      	ldr	r3, [pc, #344]	; (8006070 <currentControl+0x348>)
 8005f18:	edd3 7a00 	vldr	s15, [r3]
 8005f1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f24:	dd04      	ble.n	8005f30 <currentControl+0x208>
 8005f26:	4b52      	ldr	r3, [pc, #328]	; (8006070 <currentControl+0x348>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a53      	ldr	r2, [pc, #332]	; (8006078 <currentControl+0x350>)
 8005f2c:	6013      	str	r3, [r2, #0]
 8005f2e:	e003      	b.n	8005f38 <currentControl+0x210>
		else						_Iq_ref = Iq_ref;
 8005f30:	4b50      	ldr	r3, [pc, #320]	; (8006074 <currentControl+0x34c>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a50      	ldr	r2, [pc, #320]	; (8006078 <currentControl+0x350>)
 8005f36:	6013      	str	r3, [r2, #0]


		Id_error = _Id_ref - Id;
 8005f38:	4b4c      	ldr	r3, [pc, #304]	; (800606c <currentControl+0x344>)
 8005f3a:	ed93 7a00 	vldr	s14, [r3]
 8005f3e:	4b45      	ldr	r3, [pc, #276]	; (8006054 <currentControl+0x32c>)
 8005f40:	edd3 7a00 	vldr	s15, [r3]
 8005f44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f48:	4b4c      	ldr	r3, [pc, #304]	; (800607c <currentControl+0x354>)
 8005f4a:	edc3 7a00 	vstr	s15, [r3]
		Iq_error = _Iq_ref - Iq;
 8005f4e:	4b4a      	ldr	r3, [pc, #296]	; (8006078 <currentControl+0x350>)
 8005f50:	ed93 7a00 	vldr	s14, [r3]
 8005f54:	4b3e      	ldr	r3, [pc, #248]	; (8006050 <currentControl+0x328>)
 8005f56:	edd3 7a00 	vldr	s15, [r3]
 8005f5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f5e:	4b48      	ldr	r3, [pc, #288]	; (8006080 <currentControl+0x358>)
 8005f60:	edc3 7a00 	vstr	s15, [r3]


		// integral
		Id_error_integ_temp1 = Id_error + Id_error_integ_temp2;
 8005f64:	4b45      	ldr	r3, [pc, #276]	; (800607c <currentControl+0x354>)
 8005f66:	ed93 7a00 	vldr	s14, [r3]
 8005f6a:	4b46      	ldr	r3, [pc, #280]	; (8006084 <currentControl+0x35c>)
 8005f6c:	edd3 7a00 	vldr	s15, [r3]
 8005f70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f74:	4b44      	ldr	r3, [pc, #272]	; (8006088 <currentControl+0x360>)
 8005f76:	edc3 7a00 	vstr	s15, [r3]
		if(Id_error_integ_temp1 < -1000000.0) Id_error_integ_temp1 = -1000000.0;
 8005f7a:	4b43      	ldr	r3, [pc, #268]	; (8006088 <currentControl+0x360>)
 8005f7c:	edd3 7a00 	vldr	s15, [r3]
 8005f80:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800608c <currentControl+0x364>
 8005f84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f8c:	d503      	bpl.n	8005f96 <currentControl+0x26e>
 8005f8e:	4b3e      	ldr	r3, [pc, #248]	; (8006088 <currentControl+0x360>)
 8005f90:	4a3f      	ldr	r2, [pc, #252]	; (8006090 <currentControl+0x368>)
 8005f92:	601a      	str	r2, [r3, #0]
 8005f94:	e00c      	b.n	8005fb0 <currentControl+0x288>
		else if(Id_error_integ_temp1 > 1000000.0) Id_error_integ_temp1 = 1000000.0;
 8005f96:	4b3c      	ldr	r3, [pc, #240]	; (8006088 <currentControl+0x360>)
 8005f98:	edd3 7a00 	vldr	s15, [r3]
 8005f9c:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8006094 <currentControl+0x36c>
 8005fa0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fa8:	dd02      	ble.n	8005fb0 <currentControl+0x288>
 8005faa:	4b37      	ldr	r3, [pc, #220]	; (8006088 <currentControl+0x360>)
 8005fac:	4a3a      	ldr	r2, [pc, #232]	; (8006098 <currentControl+0x370>)
 8005fae:	601a      	str	r2, [r3, #0]
		Id_error_integ = ACR_cycleTime * 0.5f * (Id_error_integ_temp1 + Id_error_integ_temp2);
 8005fb0:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800609c <currentControl+0x374>
 8005fb4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8005fb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005fbc:	4b32      	ldr	r3, [pc, #200]	; (8006088 <currentControl+0x360>)
 8005fbe:	edd3 6a00 	vldr	s13, [r3]
 8005fc2:	4b30      	ldr	r3, [pc, #192]	; (8006084 <currentControl+0x35c>)
 8005fc4:	edd3 7a00 	vldr	s15, [r3]
 8005fc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fd0:	4b33      	ldr	r3, [pc, #204]	; (80060a0 <currentControl+0x378>)
 8005fd2:	edc3 7a00 	vstr	s15, [r3]
		Id_error_integ_temp2 = Id_error_integ_temp1;
 8005fd6:	4b2c      	ldr	r3, [pc, #176]	; (8006088 <currentControl+0x360>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a2a      	ldr	r2, [pc, #168]	; (8006084 <currentControl+0x35c>)
 8005fdc:	6013      	str	r3, [r2, #0]

		Iq_error_integ_temp1 = Iq_error + Iq_error_integ_temp2;
 8005fde:	4b28      	ldr	r3, [pc, #160]	; (8006080 <currentControl+0x358>)
 8005fe0:	ed93 7a00 	vldr	s14, [r3]
 8005fe4:	4b2f      	ldr	r3, [pc, #188]	; (80060a4 <currentControl+0x37c>)
 8005fe6:	edd3 7a00 	vldr	s15, [r3]
 8005fea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005fee:	4b2e      	ldr	r3, [pc, #184]	; (80060a8 <currentControl+0x380>)
 8005ff0:	edc3 7a00 	vstr	s15, [r3]
		if(Iq_error_integ_temp1 < -1000000.0) Iq_error_integ_temp1 = -1000000.0;
 8005ff4:	4b2c      	ldr	r3, [pc, #176]	; (80060a8 <currentControl+0x380>)
 8005ff6:	edd3 7a00 	vldr	s15, [r3]
 8005ffa:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800608c <currentControl+0x364>
 8005ffe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006006:	d551      	bpl.n	80060ac <currentControl+0x384>
 8006008:	4b27      	ldr	r3, [pc, #156]	; (80060a8 <currentControl+0x380>)
 800600a:	4a21      	ldr	r2, [pc, #132]	; (8006090 <currentControl+0x368>)
 800600c:	601a      	str	r2, [r3, #0]
 800600e:	e05a      	b.n	80060c6 <currentControl+0x39e>
 8006010:	54442d18 	.word	0x54442d18
 8006014:	401921fb 	.word	0x401921fb
 8006018:	54442d18 	.word	0x54442d18
 800601c:	400921fb 	.word	0x400921fb
 8006020:	40020400 	.word	0x40020400
 8006024:	200001e4 	.word	0x200001e4
 8006028:	200000f4 	.word	0x200000f4
 800602c:	40c90fdb 	.word	0x40c90fdb
 8006030:	200000f8 	.word	0x200000f8
 8006034:	3ea2f838 	.word	0x3ea2f838
 8006038:	459c4000 	.word	0x459c4000
 800603c:	08009eb0 	.word	0x08009eb0
 8006040:	20000034 	.word	0x20000034
 8006044:	44c6f195 	.word	0x44c6f195
 8006048:	200001e0 	.word	0x200001e0
 800604c:	20000190 	.word	0x20000190
 8006050:	200000d0 	.word	0x200000d0
 8006054:	200000cc 	.word	0x200000cc
 8006058:	200001dc 	.word	0x200001dc
 800605c:	40020000 	.word	0x40020000
 8006060:	200000c0 	.word	0x200000c0
 8006064:	20000010 	.word	0x20000010
 8006068:	200000c4 	.word	0x200000c4
 800606c:	2000020c 	.word	0x2000020c
 8006070:	20000014 	.word	0x20000014
 8006074:	200000c8 	.word	0x200000c8
 8006078:	20000210 	.word	0x20000210
 800607c:	200000d4 	.word	0x200000d4
 8006080:	200000d8 	.word	0x200000d8
 8006084:	200000e8 	.word	0x200000e8
 8006088:	200000e4 	.word	0x200000e4
 800608c:	c9742400 	.word	0xc9742400
 8006090:	c9742400 	.word	0xc9742400
 8006094:	49742400 	.word	0x49742400
 8006098:	49742400 	.word	0x49742400
 800609c:	38d1b717 	.word	0x38d1b717
 80060a0:	200000dc 	.word	0x200000dc
 80060a4:	200000f0 	.word	0x200000f0
 80060a8:	200000ec 	.word	0x200000ec
		else if(Iq_error_integ_temp1 > 1000000.0) Iq_error_integ_temp1 = 1000000.0;
 80060ac:	4b39      	ldr	r3, [pc, #228]	; (8006194 <currentControl+0x46c>)
 80060ae:	edd3 7a00 	vldr	s15, [r3]
 80060b2:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8006198 <currentControl+0x470>
 80060b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80060ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060be:	dd02      	ble.n	80060c6 <currentControl+0x39e>
 80060c0:	4b34      	ldr	r3, [pc, #208]	; (8006194 <currentControl+0x46c>)
 80060c2:	4a36      	ldr	r2, [pc, #216]	; (800619c <currentControl+0x474>)
 80060c4:	601a      	str	r2, [r3, #0]
		Iq_error_integ = ACR_cycleTime * 0.5f * (Iq_error_integ_temp1 + Iq_error_integ_temp2);
 80060c6:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80061a0 <currentControl+0x478>
 80060ca:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80060ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80060d2:	4b30      	ldr	r3, [pc, #192]	; (8006194 <currentControl+0x46c>)
 80060d4:	edd3 6a00 	vldr	s13, [r3]
 80060d8:	4b32      	ldr	r3, [pc, #200]	; (80061a4 <currentControl+0x47c>)
 80060da:	edd3 7a00 	vldr	s15, [r3]
 80060de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060e6:	4b30      	ldr	r3, [pc, #192]	; (80061a8 <currentControl+0x480>)
 80060e8:	edc3 7a00 	vstr	s15, [r3]
		Iq_error_integ_temp2 = Iq_error_integ_temp1;
 80060ec:	4b29      	ldr	r3, [pc, #164]	; (8006194 <currentControl+0x46c>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a2c      	ldr	r2, [pc, #176]	; (80061a4 <currentControl+0x47c>)
 80060f2:	6013      	str	r3, [r2, #0]


		Vd_ref = Kp_ACR * Id_error + Ki_ACR * Id_error_integ;
 80060f4:	4b2d      	ldr	r3, [pc, #180]	; (80061ac <currentControl+0x484>)
 80060f6:	ed93 7a00 	vldr	s14, [r3]
 80060fa:	4b2d      	ldr	r3, [pc, #180]	; (80061b0 <currentControl+0x488>)
 80060fc:	edd3 7a00 	vldr	s15, [r3]
 8006100:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006104:	4b2b      	ldr	r3, [pc, #172]	; (80061b4 <currentControl+0x48c>)
 8006106:	edd3 6a00 	vldr	s13, [r3]
 800610a:	4b2b      	ldr	r3, [pc, #172]	; (80061b8 <currentControl+0x490>)
 800610c:	edd3 7a00 	vldr	s15, [r3]
 8006110:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006114:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006118:	4b28      	ldr	r3, [pc, #160]	; (80061bc <currentControl+0x494>)
 800611a:	edc3 7a00 	vstr	s15, [r3]
		Vq_ref = Kp_ACR * Iq_error + Ki_ACR * Iq_error_integ;
 800611e:	4b23      	ldr	r3, [pc, #140]	; (80061ac <currentControl+0x484>)
 8006120:	ed93 7a00 	vldr	s14, [r3]
 8006124:	4b26      	ldr	r3, [pc, #152]	; (80061c0 <currentControl+0x498>)
 8006126:	edd3 7a00 	vldr	s15, [r3]
 800612a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800612e:	4b21      	ldr	r3, [pc, #132]	; (80061b4 <currentControl+0x48c>)
 8006130:	edd3 6a00 	vldr	s13, [r3]
 8006134:	4b1c      	ldr	r3, [pc, #112]	; (80061a8 <currentControl+0x480>)
 8006136:	edd3 7a00 	vldr	s15, [r3]
 800613a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800613e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006142:	4b20      	ldr	r3, [pc, #128]	; (80061c4 <currentControl+0x49c>)
 8006144:	edc3 7a00 	vstr	s15, [r3]
	}

	/********* end of ACR **********/


	if(HAL_GPIO_ReadPin(BR_FLT_GPIO_Port, BR_FLT_Pin) == GPIO_PIN_RESET)
 8006148:	f44f 7180 	mov.w	r1, #256	; 0x100
 800614c:	481e      	ldr	r0, [pc, #120]	; (80061c8 <currentControl+0x4a0>)
 800614e:	f7fc ff0d 	bl	8002f6c <HAL_GPIO_ReadPin>
	{
		//HAL_NVIC_SystemReset();
	}


	setSVM_dq();
 8006152:	f001 faaf 	bl	80076b4 <setSVM_dq>

#endif



	if(!forced_commute_enable)
 8006156:	4b1d      	ldr	r3, [pc, #116]	; (80061cc <currentControl+0x4a4>)
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	b2db      	uxtb	r3, r3
 800615c:	2b00      	cmp	r3, #0
 800615e:	d101      	bne.n	8006164 <currentControl+0x43c>
	{
		requestEncoder();
 8006160:	f002 f8a0 	bl	80082a4 <requestEncoder>
	}


	// Auto Speed Regulator launching
	ASR_prescalerCount += 1;
 8006164:	4b1a      	ldr	r3, [pc, #104]	; (80061d0 <currentControl+0x4a8>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	3301      	adds	r3, #1
 800616a:	4a19      	ldr	r2, [pc, #100]	; (80061d0 <currentControl+0x4a8>)
 800616c:	6013      	str	r3, [r2, #0]
	if(ASR_prescalerCount >= ASR_prescale)
 800616e:	4b18      	ldr	r3, [pc, #96]	; (80061d0 <currentControl+0x4a8>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2b09      	cmp	r3, #9
 8006174:	dd05      	ble.n	8006182 <currentControl+0x45a>
	{
		ASR_flg = 1;
 8006176:	4b17      	ldr	r3, [pc, #92]	; (80061d4 <currentControl+0x4ac>)
 8006178:	2201      	movs	r2, #1
 800617a:	601a      	str	r2, [r3, #0]
		ASR_prescalerCount = 0;
 800617c:	4b14      	ldr	r3, [pc, #80]	; (80061d0 <currentControl+0x4a8>)
 800617e:	2200      	movs	r2, #0
 8006180:	601a      	str	r2, [r3, #0]
	}



	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 8006182:	2200      	movs	r2, #0
 8006184:	2140      	movs	r1, #64	; 0x40
 8006186:	4814      	ldr	r0, [pc, #80]	; (80061d8 <currentControl+0x4b0>)
 8006188:	f7fc ff08 	bl	8002f9c <HAL_GPIO_WritePin>

	return;
 800618c:	bf00      	nop
}
 800618e:	370c      	adds	r7, #12
 8006190:	46bd      	mov	sp, r7
 8006192:	bd90      	pop	{r4, r7, pc}
 8006194:	200000ec 	.word	0x200000ec
 8006198:	49742400 	.word	0x49742400
 800619c:	49742400 	.word	0x49742400
 80061a0:	38d1b717 	.word	0x38d1b717
 80061a4:	200000f0 	.word	0x200000f0
 80061a8:	200000e0 	.word	0x200000e0
 80061ac:	20000008 	.word	0x20000008
 80061b0:	200000d4 	.word	0x200000d4
 80061b4:	2000000c 	.word	0x2000000c
 80061b8:	200000dc 	.word	0x200000dc
 80061bc:	20000188 	.word	0x20000188
 80061c0:	200000d8 	.word	0x200000d8
 80061c4:	2000018c 	.word	0x2000018c
 80061c8:	40020000 	.word	0x40020000
 80061cc:	200001e4 	.word	0x200001e4
 80061d0:	20000118 	.word	0x20000118
 80061d4:	20000114 	.word	0x20000114
 80061d8:	40020400 	.word	0x40020400

080061dc <ACR_Reset>:



inline void ACR_Reset()
{
 80061dc:	b480      	push	{r7}
 80061de:	af00      	add	r7, sp, #0

	Id_error_integ_temp1 = 0.0f;
 80061e0:	4b14      	ldr	r3, [pc, #80]	; (8006234 <ACR_Reset+0x58>)
 80061e2:	f04f 0200 	mov.w	r2, #0
 80061e6:	601a      	str	r2, [r3, #0]
	Id_error_integ_temp2 = 0.0f;
 80061e8:	4b13      	ldr	r3, [pc, #76]	; (8006238 <ACR_Reset+0x5c>)
 80061ea:	f04f 0200 	mov.w	r2, #0
 80061ee:	601a      	str	r2, [r3, #0]
	Iq_error_integ_temp1 = 0.0f;
 80061f0:	4b12      	ldr	r3, [pc, #72]	; (800623c <ACR_Reset+0x60>)
 80061f2:	f04f 0200 	mov.w	r2, #0
 80061f6:	601a      	str	r2, [r3, #0]
	Iq_error_integ_temp2 = 0.0f;
 80061f8:	4b11      	ldr	r3, [pc, #68]	; (8006240 <ACR_Reset+0x64>)
 80061fa:	f04f 0200 	mov.w	r2, #0
 80061fe:	601a      	str	r2, [r3, #0]


	Id = Id_ref = 0.0f;
 8006200:	f04f 0300 	mov.w	r3, #0
 8006204:	4a0f      	ldr	r2, [pc, #60]	; (8006244 <ACR_Reset+0x68>)
 8006206:	6013      	str	r3, [r2, #0]
 8006208:	4a0f      	ldr	r2, [pc, #60]	; (8006248 <ACR_Reset+0x6c>)
 800620a:	6013      	str	r3, [r2, #0]
	Iq = Iq_ref = 0.0f;
 800620c:	f04f 0300 	mov.w	r3, #0
 8006210:	4a0e      	ldr	r2, [pc, #56]	; (800624c <ACR_Reset+0x70>)
 8006212:	6013      	str	r3, [r2, #0]
 8006214:	4a0e      	ldr	r2, [pc, #56]	; (8006250 <ACR_Reset+0x74>)
 8006216:	6013      	str	r3, [r2, #0]

	Vd_ref = 0.0f;
 8006218:	4b0e      	ldr	r3, [pc, #56]	; (8006254 <ACR_Reset+0x78>)
 800621a:	f04f 0200 	mov.w	r2, #0
 800621e:	601a      	str	r2, [r3, #0]
	Vq_ref = 0.0f;
 8006220:	4b0d      	ldr	r3, [pc, #52]	; (8006258 <ACR_Reset+0x7c>)
 8006222:	f04f 0200 	mov.w	r2, #0
 8006226:	601a      	str	r2, [r3, #0]

}
 8006228:	bf00      	nop
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	200000e4 	.word	0x200000e4
 8006238:	200000e8 	.word	0x200000e8
 800623c:	200000ec 	.word	0x200000ec
 8006240:	200000f0 	.word	0x200000f0
 8006244:	200000c4 	.word	0x200000c4
 8006248:	200000cc 	.word	0x200000cc
 800624c:	200000c8 	.word	0x200000c8
 8006250:	200000d0 	.word	0x200000d0
 8006254:	20000188 	.word	0x20000188
 8006258:	2000018c 	.word	0x2000018c

0800625c <ASR_Start>:
float omega_error_integ_temp2 = 0.0f;



void ASR_Start()
{
 800625c:	b580      	push	{r7, lr}
 800625e:	af00      	add	r7, sp, #0

	ASR_enable = 1;
 8006260:	4b03      	ldr	r3, [pc, #12]	; (8006270 <ASR_Start+0x14>)
 8006262:	2201      	movs	r2, #1
 8006264:	701a      	strb	r2, [r3, #0]
	ASR_Reset();
 8006266:	f000 f9b1 	bl	80065cc <ASR_Reset>

}
 800626a:	bf00      	nop
 800626c:	bd80      	pop	{r7, pc}
 800626e:	bf00      	nop
 8006270:	200000fc 	.word	0x200000fc
 8006274:	00000000 	.word	0x00000000

08006278 <speedControl>:
}



inline void speedControl()
{
 8006278:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800627c:	af00      	add	r7, sp, #0



	  if(ASR_steps <= 0)
 800627e:	4bbc      	ldr	r3, [pc, #752]	; (8006570 <speedControl+0x2f8>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	2b00      	cmp	r3, #0
 8006284:	dc04      	bgt.n	8006290 <speedControl+0x18>
	  {
		  d_theta = 0.0f;
 8006286:	4bbb      	ldr	r3, [pc, #748]	; (8006574 <speedControl+0x2fc>)
 8006288:	f04f 0200 	mov.w	r2, #0
 800628c:	601a      	str	r2, [r3, #0]
 800628e:	e00a      	b.n	80062a6 <speedControl+0x2e>
	  }
	  else
	  {
		  d_theta = theta - p_theta;
 8006290:	4bb9      	ldr	r3, [pc, #740]	; (8006578 <speedControl+0x300>)
 8006292:	ed93 7a00 	vldr	s14, [r3]
 8006296:	4bb9      	ldr	r3, [pc, #740]	; (800657c <speedControl+0x304>)
 8006298:	edd3 7a00 	vldr	s15, [r3]
 800629c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062a0:	4bb4      	ldr	r3, [pc, #720]	; (8006574 <speedControl+0x2fc>)
 80062a2:	edc3 7a00 	vstr	s15, [r3]
	  }
	  ASR_steps += 1;
 80062a6:	4bb2      	ldr	r3, [pc, #712]	; (8006570 <speedControl+0x2f8>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	3301      	adds	r3, #1
 80062ac:	4ab0      	ldr	r2, [pc, #704]	; (8006570 <speedControl+0x2f8>)
 80062ae:	6013      	str	r3, [r2, #0]

	  p_theta = theta;
 80062b0:	4bb1      	ldr	r3, [pc, #708]	; (8006578 <speedControl+0x300>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4ab1      	ldr	r2, [pc, #708]	; (800657c <speedControl+0x304>)
 80062b6:	6013      	str	r3, [r2, #0]

	  if(d_theta < - M_PI)		d_theta += 2 * M_PI;
 80062b8:	4bae      	ldr	r3, [pc, #696]	; (8006574 <speedControl+0x2fc>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	4618      	mov	r0, r3
 80062be:	f7fa f95b 	bl	8000578 <__aeabi_f2d>
 80062c2:	a3a3      	add	r3, pc, #652	; (adr r3, 8006550 <speedControl+0x2d8>)
 80062c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c8:	f7fa fc20 	bl	8000b0c <__aeabi_dcmplt>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d013      	beq.n	80062fa <speedControl+0x82>
 80062d2:	4ba8      	ldr	r3, [pc, #672]	; (8006574 <speedControl+0x2fc>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4618      	mov	r0, r3
 80062d8:	f7fa f94e 	bl	8000578 <__aeabi_f2d>
 80062dc:	a39e      	add	r3, pc, #632	; (adr r3, 8006558 <speedControl+0x2e0>)
 80062de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e2:	f7f9 ffeb 	bl	80002bc <__adddf3>
 80062e6:	4603      	mov	r3, r0
 80062e8:	460c      	mov	r4, r1
 80062ea:	4618      	mov	r0, r3
 80062ec:	4621      	mov	r1, r4
 80062ee:	f7fa fc35 	bl	8000b5c <__aeabi_d2f>
 80062f2:	4602      	mov	r2, r0
 80062f4:	4b9f      	ldr	r3, [pc, #636]	; (8006574 <speedControl+0x2fc>)
 80062f6:	601a      	str	r2, [r3, #0]
 80062f8:	e01f      	b.n	800633a <speedControl+0xc2>
	  else if(d_theta > M_PI)	d_theta -= 2 * M_PI;
 80062fa:	4b9e      	ldr	r3, [pc, #632]	; (8006574 <speedControl+0x2fc>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4618      	mov	r0, r3
 8006300:	f7fa f93a 	bl	8000578 <__aeabi_f2d>
 8006304:	a396      	add	r3, pc, #600	; (adr r3, 8006560 <speedControl+0x2e8>)
 8006306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630a:	f7fa fc1d 	bl	8000b48 <__aeabi_dcmpgt>
 800630e:	4603      	mov	r3, r0
 8006310:	2b00      	cmp	r3, #0
 8006312:	d012      	beq.n	800633a <speedControl+0xc2>
 8006314:	4b97      	ldr	r3, [pc, #604]	; (8006574 <speedControl+0x2fc>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4618      	mov	r0, r3
 800631a:	f7fa f92d 	bl	8000578 <__aeabi_f2d>
 800631e:	a38e      	add	r3, pc, #568	; (adr r3, 8006558 <speedControl+0x2e0>)
 8006320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006324:	f7f9 ffc8 	bl	80002b8 <__aeabi_dsub>
 8006328:	4603      	mov	r3, r0
 800632a:	460c      	mov	r4, r1
 800632c:	4618      	mov	r0, r3
 800632e:	4621      	mov	r1, r4
 8006330:	f7fa fc14 	bl	8000b5c <__aeabi_d2f>
 8006334:	4602      	mov	r2, r0
 8006336:	4b8f      	ldr	r3, [pc, #572]	; (8006574 <speedControl+0x2fc>)
 8006338:	601a      	str	r2, [r3, #0]

	  omega = omega * 0.5 + 0.5 * d_theta / ASR_cycleTime;
 800633a:	4b91      	ldr	r3, [pc, #580]	; (8006580 <speedControl+0x308>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4618      	mov	r0, r3
 8006340:	f7fa f91a 	bl	8000578 <__aeabi_f2d>
 8006344:	f04f 0200 	mov.w	r2, #0
 8006348:	4b8e      	ldr	r3, [pc, #568]	; (8006584 <speedControl+0x30c>)
 800634a:	f7fa f96d 	bl	8000628 <__aeabi_dmul>
 800634e:	4603      	mov	r3, r0
 8006350:	460c      	mov	r4, r1
 8006352:	4625      	mov	r5, r4
 8006354:	461c      	mov	r4, r3
 8006356:	4b87      	ldr	r3, [pc, #540]	; (8006574 <speedControl+0x2fc>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4618      	mov	r0, r3
 800635c:	f7fa f90c 	bl	8000578 <__aeabi_f2d>
 8006360:	f04f 0200 	mov.w	r2, #0
 8006364:	4b87      	ldr	r3, [pc, #540]	; (8006584 <speedControl+0x30c>)
 8006366:	f7fa f95f 	bl	8000628 <__aeabi_dmul>
 800636a:	4602      	mov	r2, r0
 800636c:	460b      	mov	r3, r1
 800636e:	4690      	mov	r8, r2
 8006370:	4699      	mov	r9, r3
 8006372:	4b85      	ldr	r3, [pc, #532]	; (8006588 <speedControl+0x310>)
 8006374:	4618      	mov	r0, r3
 8006376:	f7fa f8ff 	bl	8000578 <__aeabi_f2d>
 800637a:	4602      	mov	r2, r0
 800637c:	460b      	mov	r3, r1
 800637e:	4640      	mov	r0, r8
 8006380:	4649      	mov	r1, r9
 8006382:	f7fa fa7b 	bl	800087c <__aeabi_ddiv>
 8006386:	4602      	mov	r2, r0
 8006388:	460b      	mov	r3, r1
 800638a:	4620      	mov	r0, r4
 800638c:	4629      	mov	r1, r5
 800638e:	f7f9 ff95 	bl	80002bc <__adddf3>
 8006392:	4603      	mov	r3, r0
 8006394:	460c      	mov	r4, r1
 8006396:	4618      	mov	r0, r3
 8006398:	4621      	mov	r1, r4
 800639a:	f7fa fbdf 	bl	8000b5c <__aeabi_d2f>
 800639e:	4602      	mov	r2, r0
 80063a0:	4b77      	ldr	r3, [pc, #476]	; (8006580 <speedControl+0x308>)
 80063a2:	601a      	str	r2, [r3, #0]


	  if(ASR_enable)
 80063a4:	4b79      	ldr	r3, [pc, #484]	; (800658c <speedControl+0x314>)
 80063a6:	781b      	ldrb	r3, [r3, #0]
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	f000 80cd 	beq.w	800654a <speedControl+0x2d2>
	  {

		  if(omega_ref < -omega_limit)		_omega_ref = -omega_limit;
 80063b0:	4b77      	ldr	r3, [pc, #476]	; (8006590 <speedControl+0x318>)
 80063b2:	edd3 7a00 	vldr	s15, [r3]
 80063b6:	eeb1 7a67 	vneg.f32	s14, s15
 80063ba:	4b76      	ldr	r3, [pc, #472]	; (8006594 <speedControl+0x31c>)
 80063bc:	edd3 7a00 	vldr	s15, [r3]
 80063c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80063c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063c8:	dd08      	ble.n	80063dc <speedControl+0x164>
 80063ca:	4b71      	ldr	r3, [pc, #452]	; (8006590 <speedControl+0x318>)
 80063cc:	edd3 7a00 	vldr	s15, [r3]
 80063d0:	eef1 7a67 	vneg.f32	s15, s15
 80063d4:	4b70      	ldr	r3, [pc, #448]	; (8006598 <speedControl+0x320>)
 80063d6:	edc3 7a00 	vstr	s15, [r3]
 80063da:	e013      	b.n	8006404 <speedControl+0x18c>
		  else if(omega_ref > omega_limit)	_omega_ref = omega_limit;
 80063dc:	4b6d      	ldr	r3, [pc, #436]	; (8006594 <speedControl+0x31c>)
 80063de:	ed93 7a00 	vldr	s14, [r3]
 80063e2:	4b6b      	ldr	r3, [pc, #428]	; (8006590 <speedControl+0x318>)
 80063e4:	edd3 7a00 	vldr	s15, [r3]
 80063e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80063ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063f0:	dd04      	ble.n	80063fc <speedControl+0x184>
 80063f2:	4b67      	ldr	r3, [pc, #412]	; (8006590 <speedControl+0x318>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4a68      	ldr	r2, [pc, #416]	; (8006598 <speedControl+0x320>)
 80063f8:	6013      	str	r3, [r2, #0]
 80063fa:	e003      	b.n	8006404 <speedControl+0x18c>
		  else								_omega_ref = omega_ref;
 80063fc:	4b65      	ldr	r3, [pc, #404]	; (8006594 <speedControl+0x31c>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a65      	ldr	r2, [pc, #404]	; (8006598 <speedControl+0x320>)
 8006402:	6013      	str	r3, [r2, #0]

		  omega_error = _omega_ref - omega;
 8006404:	4b64      	ldr	r3, [pc, #400]	; (8006598 <speedControl+0x320>)
 8006406:	ed93 7a00 	vldr	s14, [r3]
 800640a:	4b5d      	ldr	r3, [pc, #372]	; (8006580 <speedControl+0x308>)
 800640c:	edd3 7a00 	vldr	s15, [r3]
 8006410:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006414:	4b61      	ldr	r3, [pc, #388]	; (800659c <speedControl+0x324>)
 8006416:	edc3 7a00 	vstr	s15, [r3]

		  // integral
		  omega_error_integ_temp1 = omega_error + omega_error_integ_temp2;
 800641a:	4b60      	ldr	r3, [pc, #384]	; (800659c <speedControl+0x324>)
 800641c:	ed93 7a00 	vldr	s14, [r3]
 8006420:	4b5f      	ldr	r3, [pc, #380]	; (80065a0 <speedControl+0x328>)
 8006422:	edd3 7a00 	vldr	s15, [r3]
 8006426:	ee77 7a27 	vadd.f32	s15, s14, s15
 800642a:	4b5e      	ldr	r3, [pc, #376]	; (80065a4 <speedControl+0x32c>)
 800642c:	edc3 7a00 	vstr	s15, [r3]
		  if(omega_error_integ_temp1 < -6.0 / ASR_cycleTime)
 8006430:	4b5c      	ldr	r3, [pc, #368]	; (80065a4 <speedControl+0x32c>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4618      	mov	r0, r3
 8006436:	f7fa f89f 	bl	8000578 <__aeabi_f2d>
 800643a:	4604      	mov	r4, r0
 800643c:	460d      	mov	r5, r1
 800643e:	4b52      	ldr	r3, [pc, #328]	; (8006588 <speedControl+0x310>)
 8006440:	4618      	mov	r0, r3
 8006442:	f7fa f899 	bl	8000578 <__aeabi_f2d>
 8006446:	4602      	mov	r2, r0
 8006448:	460b      	mov	r3, r1
 800644a:	f04f 0000 	mov.w	r0, #0
 800644e:	4956      	ldr	r1, [pc, #344]	; (80065a8 <speedControl+0x330>)
 8006450:	f7fa fa14 	bl	800087c <__aeabi_ddiv>
 8006454:	4602      	mov	r2, r0
 8006456:	460b      	mov	r3, r1
 8006458:	4620      	mov	r0, r4
 800645a:	4629      	mov	r1, r5
 800645c:	f7fa fb56 	bl	8000b0c <__aeabi_dcmplt>
 8006460:	4603      	mov	r3, r0
 8006462:	2b00      	cmp	r3, #0
 8006464:	d009      	beq.n	800647a <speedControl+0x202>
		  {
			  omega_error_integ_temp1 = -6.0 / ASR_cycleTime;
 8006466:	ed9f 7a51 	vldr	s14, [pc, #324]	; 80065ac <speedControl+0x334>
 800646a:	eef9 6a08 	vmov.f32	s13, #152	; 0xc0c00000 -6.0
 800646e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006472:	4b4c      	ldr	r3, [pc, #304]	; (80065a4 <speedControl+0x32c>)
 8006474:	edc3 7a00 	vstr	s15, [r3]
 8006478:	e023      	b.n	80064c2 <speedControl+0x24a>
		  }
		  else if(omega_error_integ_temp1 > 6.0 / ASR_cycleTime)
 800647a:	4b4a      	ldr	r3, [pc, #296]	; (80065a4 <speedControl+0x32c>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4618      	mov	r0, r3
 8006480:	f7fa f87a 	bl	8000578 <__aeabi_f2d>
 8006484:	4604      	mov	r4, r0
 8006486:	460d      	mov	r5, r1
 8006488:	4b3f      	ldr	r3, [pc, #252]	; (8006588 <speedControl+0x310>)
 800648a:	4618      	mov	r0, r3
 800648c:	f7fa f874 	bl	8000578 <__aeabi_f2d>
 8006490:	4602      	mov	r2, r0
 8006492:	460b      	mov	r3, r1
 8006494:	f04f 0000 	mov.w	r0, #0
 8006498:	4945      	ldr	r1, [pc, #276]	; (80065b0 <speedControl+0x338>)
 800649a:	f7fa f9ef 	bl	800087c <__aeabi_ddiv>
 800649e:	4602      	mov	r2, r0
 80064a0:	460b      	mov	r3, r1
 80064a2:	4620      	mov	r0, r4
 80064a4:	4629      	mov	r1, r5
 80064a6:	f7fa fb4f 	bl	8000b48 <__aeabi_dcmpgt>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d008      	beq.n	80064c2 <speedControl+0x24a>
		  {
			  omega_error_integ_temp1 = 6.0 / ASR_cycleTime;
 80064b0:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 80065ac <speedControl+0x334>
 80064b4:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80064b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064bc:	4b39      	ldr	r3, [pc, #228]	; (80065a4 <speedControl+0x32c>)
 80064be:	edc3 7a00 	vstr	s15, [r3]
		  }
		  omega_error_integ = ASR_cycleTime * 0.5f * (omega_error_integ_temp1 + omega_error_integ_temp2);
 80064c2:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80065ac <speedControl+0x334>
 80064c6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80064ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80064ce:	4b35      	ldr	r3, [pc, #212]	; (80065a4 <speedControl+0x32c>)
 80064d0:	edd3 6a00 	vldr	s13, [r3]
 80064d4:	4b32      	ldr	r3, [pc, #200]	; (80065a0 <speedControl+0x328>)
 80064d6:	edd3 7a00 	vldr	s15, [r3]
 80064da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064e2:	4b34      	ldr	r3, [pc, #208]	; (80065b4 <speedControl+0x33c>)
 80064e4:	edc3 7a00 	vstr	s15, [r3]
		  omega_error_integ_temp2 = omega_error_integ_temp1;
 80064e8:	4b2e      	ldr	r3, [pc, #184]	; (80065a4 <speedControl+0x32c>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a2c      	ldr	r2, [pc, #176]	; (80065a0 <speedControl+0x328>)
 80064ee:	6013      	str	r3, [r2, #0]


		  torque_ref = Kp_ASR * omega_error + Ki_ASR * omega_error_integ;
 80064f0:	4b31      	ldr	r3, [pc, #196]	; (80065b8 <speedControl+0x340>)
 80064f2:	ed93 7a00 	vldr	s14, [r3]
 80064f6:	4b29      	ldr	r3, [pc, #164]	; (800659c <speedControl+0x324>)
 80064f8:	edd3 7a00 	vldr	s15, [r3]
 80064fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006500:	4b2e      	ldr	r3, [pc, #184]	; (80065bc <speedControl+0x344>)
 8006502:	edd3 6a00 	vldr	s13, [r3]
 8006506:	4b2b      	ldr	r3, [pc, #172]	; (80065b4 <speedControl+0x33c>)
 8006508:	edd3 7a00 	vldr	s15, [r3]
 800650c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006510:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006514:	4b2a      	ldr	r3, [pc, #168]	; (80065c0 <speedControl+0x348>)
 8006516:	edc3 7a00 	vstr	s15, [r3]

		  Id_ref = 0.0f;
 800651a:	4b2a      	ldr	r3, [pc, #168]	; (80065c4 <speedControl+0x34c>)
 800651c:	f04f 0200 	mov.w	r2, #0
 8006520:	601a      	str	r2, [r3, #0]
		  Iq_ref = KT * torque_ref;
 8006522:	4b27      	ldr	r3, [pc, #156]	; (80065c0 <speedControl+0x348>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4618      	mov	r0, r3
 8006528:	f7fa f826 	bl	8000578 <__aeabi_f2d>
 800652c:	a30e      	add	r3, pc, #56	; (adr r3, 8006568 <speedControl+0x2f0>)
 800652e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006532:	f7fa f879 	bl	8000628 <__aeabi_dmul>
 8006536:	4603      	mov	r3, r0
 8006538:	460c      	mov	r4, r1
 800653a:	4618      	mov	r0, r3
 800653c:	4621      	mov	r1, r4
 800653e:	f7fa fb0d 	bl	8000b5c <__aeabi_d2f>
 8006542:	4602      	mov	r2, r0
 8006544:	4b20      	ldr	r3, [pc, #128]	; (80065c8 <speedControl+0x350>)
 8006546:	601a      	str	r2, [r3, #0]
	  }




	return;
 8006548:	bf00      	nop
 800654a:	bf00      	nop
}
 800654c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006550:	54442d18 	.word	0x54442d18
 8006554:	c00921fb 	.word	0xc00921fb
 8006558:	54442d18 	.word	0x54442d18
 800655c:	401921fb 	.word	0x401921fb
 8006560:	54442d18 	.word	0x54442d18
 8006564:	400921fb 	.word	0x400921fb
 8006568:	8b6ec798 	.word	0x8b6ec798
 800656c:	3fd22b62 	.word	0x3fd22b62
 8006570:	20000110 	.word	0x20000110
 8006574:	20000214 	.word	0x20000214
 8006578:	200001d8 	.word	0x200001d8
 800657c:	20000120 	.word	0x20000120
 8006580:	2000011c 	.word	0x2000011c
 8006584:	3fe00000 	.word	0x3fe00000
 8006588:	3a83126f 	.word	0x3a83126f
 800658c:	200000fc 	.word	0x200000fc
 8006590:	20000020 	.word	0x20000020
 8006594:	20000100 	.word	0x20000100
 8006598:	20000218 	.word	0x20000218
 800659c:	20000104 	.word	0x20000104
 80065a0:	20000128 	.word	0x20000128
 80065a4:	20000124 	.word	0x20000124
 80065a8:	c0180000 	.word	0xc0180000
 80065ac:	3a83126f 	.word	0x3a83126f
 80065b0:	40180000 	.word	0x40180000
 80065b4:	20000108 	.word	0x20000108
 80065b8:	20000018 	.word	0x20000018
 80065bc:	2000001c 	.word	0x2000001c
 80065c0:	2000010c 	.word	0x2000010c
 80065c4:	200000c4 	.word	0x200000c4
 80065c8:	200000c8 	.word	0x200000c8

080065cc <ASR_Reset>:



inline void ASR_Reset()
{
 80065cc:	b480      	push	{r7}
 80065ce:	af00      	add	r7, sp, #0

	p_theta = 0.0f;
 80065d0:	4b0c      	ldr	r3, [pc, #48]	; (8006604 <ASR_Reset+0x38>)
 80065d2:	f04f 0200 	mov.w	r2, #0
 80065d6:	601a      	str	r2, [r3, #0]

	omega_error_integ_temp1 = 0.0f;
 80065d8:	4b0b      	ldr	r3, [pc, #44]	; (8006608 <ASR_Reset+0x3c>)
 80065da:	f04f 0200 	mov.w	r2, #0
 80065de:	601a      	str	r2, [r3, #0]
	omega_error_integ_temp2 = 0.0f;
 80065e0:	4b0a      	ldr	r3, [pc, #40]	; (800660c <ASR_Reset+0x40>)
 80065e2:	f04f 0200 	mov.w	r2, #0
 80065e6:	601a      	str	r2, [r3, #0]

	omega = omega_ref = 0.0f;
 80065e8:	f04f 0300 	mov.w	r3, #0
 80065ec:	4a08      	ldr	r2, [pc, #32]	; (8006610 <ASR_Reset+0x44>)
 80065ee:	6013      	str	r3, [r2, #0]
 80065f0:	4a08      	ldr	r2, [pc, #32]	; (8006614 <ASR_Reset+0x48>)
 80065f2:	6013      	str	r3, [r2, #0]

	ASR_steps = 0;
 80065f4:	4b08      	ldr	r3, [pc, #32]	; (8006618 <ASR_Reset+0x4c>)
 80065f6:	2200      	movs	r2, #0
 80065f8:	601a      	str	r2, [r3, #0]

}
 80065fa:	bf00      	nop
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr
 8006604:	20000120 	.word	0x20000120
 8006608:	20000124 	.word	0x20000124
 800660c:	20000128 	.word	0x20000128
 8006610:	20000100 	.word	0x20000100
 8006614:	2000011c 	.word	0x2000011c
 8006618:	20000110 	.word	0x20000110

0800661c <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc2;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8006622:	463b      	mov	r3, r7
 8006624:	2200      	movs	r2, #0
 8006626:	601a      	str	r2, [r3, #0]
 8006628:	605a      	str	r2, [r3, #4]
 800662a:	609a      	str	r2, [r3, #8]
 800662c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800662e:	4b22      	ldr	r3, [pc, #136]	; (80066b8 <MX_ADC1_Init+0x9c>)
 8006630:	4a22      	ldr	r2, [pc, #136]	; (80066bc <MX_ADC1_Init+0xa0>)
 8006632:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8006634:	4b20      	ldr	r3, [pc, #128]	; (80066b8 <MX_ADC1_Init+0x9c>)
 8006636:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800663a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800663c:	4b1e      	ldr	r3, [pc, #120]	; (80066b8 <MX_ADC1_Init+0x9c>)
 800663e:	2200      	movs	r2, #0
 8006640:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8006642:	4b1d      	ldr	r3, [pc, #116]	; (80066b8 <MX_ADC1_Init+0x9c>)
 8006644:	2201      	movs	r2, #1
 8006646:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8006648:	4b1b      	ldr	r3, [pc, #108]	; (80066b8 <MX_ADC1_Init+0x9c>)
 800664a:	2201      	movs	r2, #1
 800664c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800664e:	4b1a      	ldr	r3, [pc, #104]	; (80066b8 <MX_ADC1_Init+0x9c>)
 8006650:	2200      	movs	r2, #0
 8006652:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8006656:	4b18      	ldr	r3, [pc, #96]	; (80066b8 <MX_ADC1_Init+0x9c>)
 8006658:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800665c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 800665e:	4b16      	ldr	r3, [pc, #88]	; (80066b8 <MX_ADC1_Init+0x9c>)
 8006660:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8006664:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006666:	4b14      	ldr	r3, [pc, #80]	; (80066b8 <MX_ADC1_Init+0x9c>)
 8006668:	2200      	movs	r2, #0
 800666a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800666c:	4b12      	ldr	r3, [pc, #72]	; (80066b8 <MX_ADC1_Init+0x9c>)
 800666e:	2201      	movs	r2, #1
 8006670:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8006672:	4b11      	ldr	r3, [pc, #68]	; (80066b8 <MX_ADC1_Init+0x9c>)
 8006674:	2201      	movs	r2, #1
 8006676:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800667a:	4b0f      	ldr	r3, [pc, #60]	; (80066b8 <MX_ADC1_Init+0x9c>)
 800667c:	2200      	movs	r2, #0
 800667e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006680:	480d      	ldr	r0, [pc, #52]	; (80066b8 <MX_ADC1_Init+0x9c>)
 8006682:	f7fa fccf 	bl	8001024 <HAL_ADC_Init>
 8006686:	4603      	mov	r3, r0
 8006688:	2b00      	cmp	r3, #0
 800668a:	d001      	beq.n	8006690 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800668c:	f001 f80a 	bl	80076a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8006690:	2300      	movs	r3, #0
 8006692:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8006694:	2301      	movs	r3, #1
 8006696:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8006698:	2300      	movs	r3, #0
 800669a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800669c:	463b      	mov	r3, r7
 800669e:	4619      	mov	r1, r3
 80066a0:	4805      	ldr	r0, [pc, #20]	; (80066b8 <MX_ADC1_Init+0x9c>)
 80066a2:	f7fa fe13 	bl	80012cc <HAL_ADC_ConfigChannel>
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d001      	beq.n	80066b0 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80066ac:	f000 fffa 	bl	80076a4 <Error_Handler>
  }

}
 80066b0:	bf00      	nop
 80066b2:	3710      	adds	r7, #16
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}
 80066b8:	200002c4 	.word	0x200002c4
 80066bc:	40012000 	.word	0x40012000

080066c0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80066c6:	463b      	mov	r3, r7
 80066c8:	2200      	movs	r2, #0
 80066ca:	601a      	str	r2, [r3, #0]
 80066cc:	605a      	str	r2, [r3, #4]
 80066ce:	609a      	str	r2, [r3, #8]
 80066d0:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 80066d2:	4b22      	ldr	r3, [pc, #136]	; (800675c <MX_ADC2_Init+0x9c>)
 80066d4:	4a22      	ldr	r2, [pc, #136]	; (8006760 <MX_ADC2_Init+0xa0>)
 80066d6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 80066d8:	4b20      	ldr	r3, [pc, #128]	; (800675c <MX_ADC2_Init+0x9c>)
 80066da:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80066de:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80066e0:	4b1e      	ldr	r3, [pc, #120]	; (800675c <MX_ADC2_Init+0x9c>)
 80066e2:	2200      	movs	r2, #0
 80066e4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80066e6:	4b1d      	ldr	r3, [pc, #116]	; (800675c <MX_ADC2_Init+0x9c>)
 80066e8:	2200      	movs	r2, #0
 80066ea:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80066ec:	4b1b      	ldr	r3, [pc, #108]	; (800675c <MX_ADC2_Init+0x9c>)
 80066ee:	2200      	movs	r2, #0
 80066f0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80066f2:	4b1a      	ldr	r3, [pc, #104]	; (800675c <MX_ADC2_Init+0x9c>)
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80066fa:	4b18      	ldr	r3, [pc, #96]	; (800675c <MX_ADC2_Init+0x9c>)
 80066fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006700:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8006702:	4b16      	ldr	r3, [pc, #88]	; (800675c <MX_ADC2_Init+0x9c>)
 8006704:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8006708:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800670a:	4b14      	ldr	r3, [pc, #80]	; (800675c <MX_ADC2_Init+0x9c>)
 800670c:	2200      	movs	r2, #0
 800670e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8006710:	4b12      	ldr	r3, [pc, #72]	; (800675c <MX_ADC2_Init+0x9c>)
 8006712:	2201      	movs	r2, #1
 8006714:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8006716:	4b11      	ldr	r3, [pc, #68]	; (800675c <MX_ADC2_Init+0x9c>)
 8006718:	2201      	movs	r2, #1
 800671a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800671e:	4b0f      	ldr	r3, [pc, #60]	; (800675c <MX_ADC2_Init+0x9c>)
 8006720:	2201      	movs	r2, #1
 8006722:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8006724:	480d      	ldr	r0, [pc, #52]	; (800675c <MX_ADC2_Init+0x9c>)
 8006726:	f7fa fc7d 	bl	8001024 <HAL_ADC_Init>
 800672a:	4603      	mov	r3, r0
 800672c:	2b00      	cmp	r3, #0
 800672e:	d001      	beq.n	8006734 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 8006730:	f000 ffb8 	bl	80076a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8006734:	2304      	movs	r3, #4
 8006736:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8006738:	2301      	movs	r3, #1
 800673a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800673c:	2300      	movs	r3, #0
 800673e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006740:	463b      	mov	r3, r7
 8006742:	4619      	mov	r1, r3
 8006744:	4805      	ldr	r0, [pc, #20]	; (800675c <MX_ADC2_Init+0x9c>)
 8006746:	f7fa fdc1 	bl	80012cc <HAL_ADC_ConfigChannel>
 800674a:	4603      	mov	r3, r0
 800674c:	2b00      	cmp	r3, #0
 800674e:	d001      	beq.n	8006754 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 8006750:	f000 ffa8 	bl	80076a4 <Error_Handler>
  }

}
 8006754:	bf00      	nop
 8006756:	3710      	adds	r7, #16
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}
 800675c:	2000021c 	.word	0x2000021c
 8006760:	40012100 	.word	0x40012100

08006764 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800676a:	463b      	mov	r3, r7
 800676c:	2200      	movs	r2, #0
 800676e:	601a      	str	r2, [r3, #0]
 8006770:	605a      	str	r2, [r3, #4]
 8006772:	609a      	str	r2, [r3, #8]
 8006774:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 8006776:	4b22      	ldr	r3, [pc, #136]	; (8006800 <MX_ADC3_Init+0x9c>)
 8006778:	4a22      	ldr	r2, [pc, #136]	; (8006804 <MX_ADC3_Init+0xa0>)
 800677a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800677c:	4b20      	ldr	r3, [pc, #128]	; (8006800 <MX_ADC3_Init+0x9c>)
 800677e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006782:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8006784:	4b1e      	ldr	r3, [pc, #120]	; (8006800 <MX_ADC3_Init+0x9c>)
 8006786:	2200      	movs	r2, #0
 8006788:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 800678a:	4b1d      	ldr	r3, [pc, #116]	; (8006800 <MX_ADC3_Init+0x9c>)
 800678c:	2200      	movs	r2, #0
 800678e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8006790:	4b1b      	ldr	r3, [pc, #108]	; (8006800 <MX_ADC3_Init+0x9c>)
 8006792:	2200      	movs	r2, #0
 8006794:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8006796:	4b1a      	ldr	r3, [pc, #104]	; (8006800 <MX_ADC3_Init+0x9c>)
 8006798:	2200      	movs	r2, #0
 800679a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800679e:	4b18      	ldr	r3, [pc, #96]	; (8006800 <MX_ADC3_Init+0x9c>)
 80067a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 80067a6:	4b16      	ldr	r3, [pc, #88]	; (8006800 <MX_ADC3_Init+0x9c>)
 80067a8:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80067ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80067ae:	4b14      	ldr	r3, [pc, #80]	; (8006800 <MX_ADC3_Init+0x9c>)
 80067b0:	2200      	movs	r2, #0
 80067b2:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80067b4:	4b12      	ldr	r3, [pc, #72]	; (8006800 <MX_ADC3_Init+0x9c>)
 80067b6:	2201      	movs	r2, #1
 80067b8:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80067ba:	4b11      	ldr	r3, [pc, #68]	; (8006800 <MX_ADC3_Init+0x9c>)
 80067bc:	2201      	movs	r2, #1
 80067be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80067c2:	4b0f      	ldr	r3, [pc, #60]	; (8006800 <MX_ADC3_Init+0x9c>)
 80067c4:	2201      	movs	r2, #1
 80067c6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80067c8:	480d      	ldr	r0, [pc, #52]	; (8006800 <MX_ADC3_Init+0x9c>)
 80067ca:	f7fa fc2b 	bl	8001024 <HAL_ADC_Init>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d001      	beq.n	80067d8 <MX_ADC3_Init+0x74>
  {
    Error_Handler();
 80067d4:	f000 ff66 	bl	80076a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80067d8:	2301      	movs	r3, #1
 80067da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80067dc:	2301      	movs	r3, #1
 80067de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80067e0:	2300      	movs	r3, #0
 80067e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80067e4:	463b      	mov	r3, r7
 80067e6:	4619      	mov	r1, r3
 80067e8:	4805      	ldr	r0, [pc, #20]	; (8006800 <MX_ADC3_Init+0x9c>)
 80067ea:	f7fa fd6f 	bl	80012cc <HAL_ADC_ConfigChannel>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d001      	beq.n	80067f8 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 80067f4:	f000 ff56 	bl	80076a4 <Error_Handler>
  }

}
 80067f8:	bf00      	nop
 80067fa:	3710      	adds	r7, #16
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	2000030c 	.word	0x2000030c
 8006804:	40012200 	.word	0x40012200

08006808 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b08e      	sub	sp, #56	; 0x38
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006810:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006814:	2200      	movs	r2, #0
 8006816:	601a      	str	r2, [r3, #0]
 8006818:	605a      	str	r2, [r3, #4]
 800681a:	609a      	str	r2, [r3, #8]
 800681c:	60da      	str	r2, [r3, #12]
 800681e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a9b      	ldr	r2, [pc, #620]	; (8006a94 <HAL_ADC_MspInit+0x28c>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d172      	bne.n	8006910 <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800682a:	2300      	movs	r3, #0
 800682c:	623b      	str	r3, [r7, #32]
 800682e:	4b9a      	ldr	r3, [pc, #616]	; (8006a98 <HAL_ADC_MspInit+0x290>)
 8006830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006832:	4a99      	ldr	r2, [pc, #612]	; (8006a98 <HAL_ADC_MspInit+0x290>)
 8006834:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006838:	6453      	str	r3, [r2, #68]	; 0x44
 800683a:	4b97      	ldr	r3, [pc, #604]	; (8006a98 <HAL_ADC_MspInit+0x290>)
 800683c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800683e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006842:	623b      	str	r3, [r7, #32]
 8006844:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006846:	2300      	movs	r3, #0
 8006848:	61fb      	str	r3, [r7, #28]
 800684a:	4b93      	ldr	r3, [pc, #588]	; (8006a98 <HAL_ADC_MspInit+0x290>)
 800684c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800684e:	4a92      	ldr	r2, [pc, #584]	; (8006a98 <HAL_ADC_MspInit+0x290>)
 8006850:	f043 0304 	orr.w	r3, r3, #4
 8006854:	6313      	str	r3, [r2, #48]	; 0x30
 8006856:	4b90      	ldr	r3, [pc, #576]	; (8006a98 <HAL_ADC_MspInit+0x290>)
 8006858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800685a:	f003 0304 	and.w	r3, r3, #4
 800685e:	61fb      	str	r3, [r7, #28]
 8006860:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006862:	2300      	movs	r3, #0
 8006864:	61bb      	str	r3, [r7, #24]
 8006866:	4b8c      	ldr	r3, [pc, #560]	; (8006a98 <HAL_ADC_MspInit+0x290>)
 8006868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800686a:	4a8b      	ldr	r2, [pc, #556]	; (8006a98 <HAL_ADC_MspInit+0x290>)
 800686c:	f043 0301 	orr.w	r3, r3, #1
 8006870:	6313      	str	r3, [r2, #48]	; 0x30
 8006872:	4b89      	ldr	r3, [pc, #548]	; (8006a98 <HAL_ADC_MspInit+0x290>)
 8006874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006876:	f003 0301 	and.w	r3, r3, #1
 800687a:	61bb      	str	r3, [r7, #24]
 800687c:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN10
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800687e:	2301      	movs	r3, #1
 8006880:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006882:	2303      	movs	r3, #3
 8006884:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006886:	2300      	movs	r3, #0
 8006888:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800688a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800688e:	4619      	mov	r1, r3
 8006890:	4882      	ldr	r0, [pc, #520]	; (8006a9c <HAL_ADC_MspInit+0x294>)
 8006892:	f7fc f9d9 	bl	8002c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006896:	2301      	movs	r3, #1
 8006898:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800689a:	2303      	movs	r3, #3
 800689c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800689e:	2300      	movs	r3, #0
 80068a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80068a6:	4619      	mov	r1, r3
 80068a8:	487d      	ldr	r0, [pc, #500]	; (8006aa0 <HAL_ADC_MspInit+0x298>)
 80068aa:	f7fc f9cd 	bl	8002c48 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80068ae:	4b7d      	ldr	r3, [pc, #500]	; (8006aa4 <HAL_ADC_MspInit+0x29c>)
 80068b0:	4a7d      	ldr	r2, [pc, #500]	; (8006aa8 <HAL_ADC_MspInit+0x2a0>)
 80068b2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80068b4:	4b7b      	ldr	r3, [pc, #492]	; (8006aa4 <HAL_ADC_MspInit+0x29c>)
 80068b6:	2200      	movs	r2, #0
 80068b8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80068ba:	4b7a      	ldr	r3, [pc, #488]	; (8006aa4 <HAL_ADC_MspInit+0x29c>)
 80068bc:	2200      	movs	r2, #0
 80068be:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80068c0:	4b78      	ldr	r3, [pc, #480]	; (8006aa4 <HAL_ADC_MspInit+0x29c>)
 80068c2:	2200      	movs	r2, #0
 80068c4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80068c6:	4b77      	ldr	r3, [pc, #476]	; (8006aa4 <HAL_ADC_MspInit+0x29c>)
 80068c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80068cc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80068ce:	4b75      	ldr	r3, [pc, #468]	; (8006aa4 <HAL_ADC_MspInit+0x29c>)
 80068d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068d4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80068d6:	4b73      	ldr	r3, [pc, #460]	; (8006aa4 <HAL_ADC_MspInit+0x29c>)
 80068d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80068dc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80068de:	4b71      	ldr	r3, [pc, #452]	; (8006aa4 <HAL_ADC_MspInit+0x29c>)
 80068e0:	2200      	movs	r2, #0
 80068e2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80068e4:	4b6f      	ldr	r3, [pc, #444]	; (8006aa4 <HAL_ADC_MspInit+0x29c>)
 80068e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80068ea:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80068ec:	4b6d      	ldr	r3, [pc, #436]	; (8006aa4 <HAL_ADC_MspInit+0x29c>)
 80068ee:	2200      	movs	r2, #0
 80068f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80068f2:	486c      	ldr	r0, [pc, #432]	; (8006aa4 <HAL_ADC_MspInit+0x29c>)
 80068f4:	f7fb fe10 	bl	8002518 <HAL_DMA_Init>
 80068f8:	4603      	mov	r3, r0
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d001      	beq.n	8006902 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80068fe:	f000 fed1 	bl	80076a4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4a67      	ldr	r2, [pc, #412]	; (8006aa4 <HAL_ADC_MspInit+0x29c>)
 8006906:	639a      	str	r2, [r3, #56]	; 0x38
 8006908:	4a66      	ldr	r2, [pc, #408]	; (8006aa4 <HAL_ADC_MspInit+0x29c>)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800690e:	e0bc      	b.n	8006a8a <HAL_ADC_MspInit+0x282>
  else if(adcHandle->Instance==ADC2)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a65      	ldr	r2, [pc, #404]	; (8006aac <HAL_ADC_MspInit+0x2a4>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d159      	bne.n	80069ce <HAL_ADC_MspInit+0x1c6>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800691a:	2300      	movs	r3, #0
 800691c:	617b      	str	r3, [r7, #20]
 800691e:	4b5e      	ldr	r3, [pc, #376]	; (8006a98 <HAL_ADC_MspInit+0x290>)
 8006920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006922:	4a5d      	ldr	r2, [pc, #372]	; (8006a98 <HAL_ADC_MspInit+0x290>)
 8006924:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006928:	6453      	str	r3, [r2, #68]	; 0x44
 800692a:	4b5b      	ldr	r3, [pc, #364]	; (8006a98 <HAL_ADC_MspInit+0x290>)
 800692c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800692e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006932:	617b      	str	r3, [r7, #20]
 8006934:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006936:	2300      	movs	r3, #0
 8006938:	613b      	str	r3, [r7, #16]
 800693a:	4b57      	ldr	r3, [pc, #348]	; (8006a98 <HAL_ADC_MspInit+0x290>)
 800693c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800693e:	4a56      	ldr	r2, [pc, #344]	; (8006a98 <HAL_ADC_MspInit+0x290>)
 8006940:	f043 0301 	orr.w	r3, r3, #1
 8006944:	6313      	str	r3, [r2, #48]	; 0x30
 8006946:	4b54      	ldr	r3, [pc, #336]	; (8006a98 <HAL_ADC_MspInit+0x290>)
 8006948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800694a:	f003 0301 	and.w	r3, r3, #1
 800694e:	613b      	str	r3, [r7, #16]
 8006950:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006952:	2310      	movs	r3, #16
 8006954:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006956:	2303      	movs	r3, #3
 8006958:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800695a:	2300      	movs	r3, #0
 800695c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800695e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006962:	4619      	mov	r1, r3
 8006964:	484e      	ldr	r0, [pc, #312]	; (8006aa0 <HAL_ADC_MspInit+0x298>)
 8006966:	f7fc f96f 	bl	8002c48 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800696a:	4b51      	ldr	r3, [pc, #324]	; (8006ab0 <HAL_ADC_MspInit+0x2a8>)
 800696c:	4a51      	ldr	r2, [pc, #324]	; (8006ab4 <HAL_ADC_MspInit+0x2ac>)
 800696e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8006970:	4b4f      	ldr	r3, [pc, #316]	; (8006ab0 <HAL_ADC_MspInit+0x2a8>)
 8006972:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006976:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006978:	4b4d      	ldr	r3, [pc, #308]	; (8006ab0 <HAL_ADC_MspInit+0x2a8>)
 800697a:	2200      	movs	r2, #0
 800697c:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800697e:	4b4c      	ldr	r3, [pc, #304]	; (8006ab0 <HAL_ADC_MspInit+0x2a8>)
 8006980:	2200      	movs	r2, #0
 8006982:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8006984:	4b4a      	ldr	r3, [pc, #296]	; (8006ab0 <HAL_ADC_MspInit+0x2a8>)
 8006986:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800698a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800698c:	4b48      	ldr	r3, [pc, #288]	; (8006ab0 <HAL_ADC_MspInit+0x2a8>)
 800698e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006992:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006994:	4b46      	ldr	r3, [pc, #280]	; (8006ab0 <HAL_ADC_MspInit+0x2a8>)
 8006996:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800699a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 800699c:	4b44      	ldr	r3, [pc, #272]	; (8006ab0 <HAL_ADC_MspInit+0x2a8>)
 800699e:	2200      	movs	r2, #0
 80069a0:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 80069a2:	4b43      	ldr	r3, [pc, #268]	; (8006ab0 <HAL_ADC_MspInit+0x2a8>)
 80069a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80069a8:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80069aa:	4b41      	ldr	r3, [pc, #260]	; (8006ab0 <HAL_ADC_MspInit+0x2a8>)
 80069ac:	2200      	movs	r2, #0
 80069ae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80069b0:	483f      	ldr	r0, [pc, #252]	; (8006ab0 <HAL_ADC_MspInit+0x2a8>)
 80069b2:	f7fb fdb1 	bl	8002518 <HAL_DMA_Init>
 80069b6:	4603      	mov	r3, r0
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d001      	beq.n	80069c0 <HAL_ADC_MspInit+0x1b8>
      Error_Handler();
 80069bc:	f000 fe72 	bl	80076a4 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a3b      	ldr	r2, [pc, #236]	; (8006ab0 <HAL_ADC_MspInit+0x2a8>)
 80069c4:	639a      	str	r2, [r3, #56]	; 0x38
 80069c6:	4a3a      	ldr	r2, [pc, #232]	; (8006ab0 <HAL_ADC_MspInit+0x2a8>)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	6393      	str	r3, [r2, #56]	; 0x38
}
 80069cc:	e05d      	b.n	8006a8a <HAL_ADC_MspInit+0x282>
  else if(adcHandle->Instance==ADC3)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a39      	ldr	r2, [pc, #228]	; (8006ab8 <HAL_ADC_MspInit+0x2b0>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d158      	bne.n	8006a8a <HAL_ADC_MspInit+0x282>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80069d8:	2300      	movs	r3, #0
 80069da:	60fb      	str	r3, [r7, #12]
 80069dc:	4b2e      	ldr	r3, [pc, #184]	; (8006a98 <HAL_ADC_MspInit+0x290>)
 80069de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069e0:	4a2d      	ldr	r2, [pc, #180]	; (8006a98 <HAL_ADC_MspInit+0x290>)
 80069e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80069e6:	6453      	str	r3, [r2, #68]	; 0x44
 80069e8:	4b2b      	ldr	r3, [pc, #172]	; (8006a98 <HAL_ADC_MspInit+0x290>)
 80069ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069f0:	60fb      	str	r3, [r7, #12]
 80069f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80069f4:	2300      	movs	r3, #0
 80069f6:	60bb      	str	r3, [r7, #8]
 80069f8:	4b27      	ldr	r3, [pc, #156]	; (8006a98 <HAL_ADC_MspInit+0x290>)
 80069fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069fc:	4a26      	ldr	r2, [pc, #152]	; (8006a98 <HAL_ADC_MspInit+0x290>)
 80069fe:	f043 0301 	orr.w	r3, r3, #1
 8006a02:	6313      	str	r3, [r2, #48]	; 0x30
 8006a04:	4b24      	ldr	r3, [pc, #144]	; (8006a98 <HAL_ADC_MspInit+0x290>)
 8006a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a08:	f003 0301 	and.w	r3, r3, #1
 8006a0c:	60bb      	str	r3, [r7, #8]
 8006a0e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006a10:	2302      	movs	r3, #2
 8006a12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006a14:	2303      	movs	r3, #3
 8006a16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a20:	4619      	mov	r1, r3
 8006a22:	481f      	ldr	r0, [pc, #124]	; (8006aa0 <HAL_ADC_MspInit+0x298>)
 8006a24:	f7fc f910 	bl	8002c48 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8006a28:	4b24      	ldr	r3, [pc, #144]	; (8006abc <HAL_ADC_MspInit+0x2b4>)
 8006a2a:	4a25      	ldr	r2, [pc, #148]	; (8006ac0 <HAL_ADC_MspInit+0x2b8>)
 8006a2c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8006a2e:	4b23      	ldr	r3, [pc, #140]	; (8006abc <HAL_ADC_MspInit+0x2b4>)
 8006a30:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006a34:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006a36:	4b21      	ldr	r3, [pc, #132]	; (8006abc <HAL_ADC_MspInit+0x2b4>)
 8006a38:	2200      	movs	r2, #0
 8006a3a:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8006a3c:	4b1f      	ldr	r3, [pc, #124]	; (8006abc <HAL_ADC_MspInit+0x2b4>)
 8006a3e:	2200      	movs	r2, #0
 8006a40:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8006a42:	4b1e      	ldr	r3, [pc, #120]	; (8006abc <HAL_ADC_MspInit+0x2b4>)
 8006a44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a48:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006a4a:	4b1c      	ldr	r3, [pc, #112]	; (8006abc <HAL_ADC_MspInit+0x2b4>)
 8006a4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006a50:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006a52:	4b1a      	ldr	r3, [pc, #104]	; (8006abc <HAL_ADC_MspInit+0x2b4>)
 8006a54:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006a58:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8006a5a:	4b18      	ldr	r3, [pc, #96]	; (8006abc <HAL_ADC_MspInit+0x2b4>)
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 8006a60:	4b16      	ldr	r3, [pc, #88]	; (8006abc <HAL_ADC_MspInit+0x2b4>)
 8006a62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006a66:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006a68:	4b14      	ldr	r3, [pc, #80]	; (8006abc <HAL_ADC_MspInit+0x2b4>)
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8006a6e:	4813      	ldr	r0, [pc, #76]	; (8006abc <HAL_ADC_MspInit+0x2b4>)
 8006a70:	f7fb fd52 	bl	8002518 <HAL_DMA_Init>
 8006a74:	4603      	mov	r3, r0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d001      	beq.n	8006a7e <HAL_ADC_MspInit+0x276>
      Error_Handler();
 8006a7a:	f000 fe13 	bl	80076a4 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4a0e      	ldr	r2, [pc, #56]	; (8006abc <HAL_ADC_MspInit+0x2b4>)
 8006a82:	639a      	str	r2, [r3, #56]	; 0x38
 8006a84:	4a0d      	ldr	r2, [pc, #52]	; (8006abc <HAL_ADC_MspInit+0x2b4>)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6393      	str	r3, [r2, #56]	; 0x38
}
 8006a8a:	bf00      	nop
 8006a8c:	3738      	adds	r7, #56	; 0x38
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
 8006a92:	bf00      	nop
 8006a94:	40012000 	.word	0x40012000
 8006a98:	40023800 	.word	0x40023800
 8006a9c:	40020800 	.word	0x40020800
 8006aa0:	40020000 	.word	0x40020000
 8006aa4:	20000354 	.word	0x20000354
 8006aa8:	40026410 	.word	0x40026410
 8006aac:	40012100 	.word	0x40012100
 8006ab0:	200003b4 	.word	0x200003b4
 8006ab4:	40026440 	.word	0x40026440
 8006ab8:	40012200 	.word	0x40012200
 8006abc:	20000264 	.word	0x20000264
 8006ac0:	40026428 	.word	0x40026428

08006ac4 <ADC_Init>:

/* USER CODE BEGIN 1 */


void ADC_Init(void)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	af00      	add	r7, sp, #0

	  // ADC Starting
	  HAL_ADC_Start_DMA(&hadc1, AD_Iu, 2);
 8006ac8:	2202      	movs	r2, #2
 8006aca:	4908      	ldr	r1, [pc, #32]	; (8006aec <ADC_Init+0x28>)
 8006acc:	4808      	ldr	r0, [pc, #32]	; (8006af0 <ADC_Init+0x2c>)
 8006ace:	f7fa faed 	bl	80010ac <HAL_ADC_Start_DMA>
	  HAL_ADC_Start_DMA(&hadc2, AD_Iv, 1);
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	4907      	ldr	r1, [pc, #28]	; (8006af4 <ADC_Init+0x30>)
 8006ad6:	4808      	ldr	r0, [pc, #32]	; (8006af8 <ADC_Init+0x34>)
 8006ad8:	f7fa fae8 	bl	80010ac <HAL_ADC_Start_DMA>
	  HAL_ADC_Start_DMA(&hadc3, AD_Iw, 1);
 8006adc:	2201      	movs	r2, #1
 8006ade:	4907      	ldr	r1, [pc, #28]	; (8006afc <ADC_Init+0x38>)
 8006ae0:	4807      	ldr	r0, [pc, #28]	; (8006b00 <ADC_Init+0x3c>)
 8006ae2:	f7fa fae3 	bl	80010ac <HAL_ADC_Start_DMA>

}
 8006ae6:	bf00      	nop
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop
 8006aec:	2000012c 	.word	0x2000012c
 8006af0:	200002c4 	.word	0x200002c4
 8006af4:	20000130 	.word	0x20000130
 8006af8:	2000021c 	.word	0x2000021c
 8006afc:	20000134 	.word	0x20000134
 8006b00:	2000030c 	.word	0x2000030c

08006b04 <get_current_dq>:


void get_current_dq(float *Id, float *Iq, int SVM_sector, float cos_theta_re, float sin_theta_re)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b086      	sub	sp, #24
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6178      	str	r0, [r7, #20]
 8006b0c:	6139      	str	r1, [r7, #16]
 8006b0e:	60fa      	str	r2, [r7, #12]
 8006b10:	ed87 0a02 	vstr	s0, [r7, #8]
 8006b14:	edc7 0a01 	vstr	s1, [r7, #4]
	AD_Iu = HAL_ADC_GetValue(&hadc1);
	AD_Iv = HAL_ADC_GetValue(&hadc2);
	AD_Iw = HAL_ADC_GetValue(&hadc3);
	*/

	HAL_ADC_Start_DMA(&hadc1, AD_Iu, 2);
 8006b18:	2202      	movs	r2, #2
 8006b1a:	49be      	ldr	r1, [pc, #760]	; (8006e14 <get_current_dq+0x310>)
 8006b1c:	48be      	ldr	r0, [pc, #760]	; (8006e18 <get_current_dq+0x314>)
 8006b1e:	f7fa fac5 	bl	80010ac <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, AD_Iv, 1);
 8006b22:	2201      	movs	r2, #1
 8006b24:	49bd      	ldr	r1, [pc, #756]	; (8006e1c <get_current_dq+0x318>)
 8006b26:	48be      	ldr	r0, [pc, #760]	; (8006e20 <get_current_dq+0x31c>)
 8006b28:	f7fa fac0 	bl	80010ac <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc3, AD_Iw, 1);
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	49bd      	ldr	r1, [pc, #756]	; (8006e24 <get_current_dq+0x320>)
 8006b30:	48bd      	ldr	r0, [pc, #756]	; (8006e28 <get_current_dq+0x324>)
 8006b32:	f7fa fabb 	bl	80010ac <HAL_ADC_Start_DMA>

#endif

#if _MEDF_ENABLE_

	AD_Iu_buf[pos_MEDF_I] = (int32_t)AD_Iu[0];
 8006b36:	4bb7      	ldr	r3, [pc, #732]	; (8006e14 <get_current_dq+0x310>)
 8006b38:	881b      	ldrh	r3, [r3, #0]
 8006b3a:	b29a      	uxth	r2, r3
 8006b3c:	4bbb      	ldr	r3, [pc, #748]	; (8006e2c <get_current_dq+0x328>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4611      	mov	r1, r2
 8006b42:	4abb      	ldr	r2, [pc, #748]	; (8006e30 <get_current_dq+0x32c>)
 8006b44:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	AD_Iv_buf[pos_MEDF_I] = (int32_t)AD_Iv[0];
 8006b48:	4bb4      	ldr	r3, [pc, #720]	; (8006e1c <get_current_dq+0x318>)
 8006b4a:	881b      	ldrh	r3, [r3, #0]
 8006b4c:	b29a      	uxth	r2, r3
 8006b4e:	4bb7      	ldr	r3, [pc, #732]	; (8006e2c <get_current_dq+0x328>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4611      	mov	r1, r2
 8006b54:	4ab7      	ldr	r2, [pc, #732]	; (8006e34 <get_current_dq+0x330>)
 8006b56:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	AD_Iw_buf[pos_MEDF_I] = (int32_t)AD_Iw[0];
 8006b5a:	4bb2      	ldr	r3, [pc, #712]	; (8006e24 <get_current_dq+0x320>)
 8006b5c:	881b      	ldrh	r3, [r3, #0]
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	4bb2      	ldr	r3, [pc, #712]	; (8006e2c <get_current_dq+0x328>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4611      	mov	r1, r2
 8006b66:	4ab4      	ldr	r2, [pc, #720]	; (8006e38 <get_current_dq+0x334>)
 8006b68:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	pos_MEDF_I += 1;
 8006b6c:	4baf      	ldr	r3, [pc, #700]	; (8006e2c <get_current_dq+0x328>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	3301      	adds	r3, #1
 8006b72:	4aae      	ldr	r2, [pc, #696]	; (8006e2c <get_current_dq+0x328>)
 8006b74:	6013      	str	r3, [r2, #0]
	if(pos_MEDF_I >= N_MEDF_I)
 8006b76:	4bad      	ldr	r3, [pc, #692]	; (8006e2c <get_current_dq+0x328>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	2b02      	cmp	r3, #2
 8006b7c:	dd02      	ble.n	8006b84 <get_current_dq+0x80>
	{
		pos_MEDF_I = 0;
 8006b7e:	4bab      	ldr	r3, [pc, #684]	; (8006e2c <get_current_dq+0x328>)
 8006b80:	2200      	movs	r2, #0
 8006b82:	601a      	str	r2, [r3, #0]
	}

	AD_Iu_MEDF = median3(AD_Iu_buf);
 8006b84:	48aa      	ldr	r0, [pc, #680]	; (8006e30 <get_current_dq+0x32c>)
 8006b86:	f000 f979 	bl	8006e7c <median3>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	4bab      	ldr	r3, [pc, #684]	; (8006e3c <get_current_dq+0x338>)
 8006b8e:	601a      	str	r2, [r3, #0]
	AD_Iv_MEDF = median3(AD_Iv_buf);
 8006b90:	48a8      	ldr	r0, [pc, #672]	; (8006e34 <get_current_dq+0x330>)
 8006b92:	f000 f973 	bl	8006e7c <median3>
 8006b96:	4602      	mov	r2, r0
 8006b98:	4ba9      	ldr	r3, [pc, #676]	; (8006e40 <get_current_dq+0x33c>)
 8006b9a:	601a      	str	r2, [r3, #0]
	AD_Iw_MEDF = median3(AD_Iw_buf);
 8006b9c:	48a6      	ldr	r0, [pc, #664]	; (8006e38 <get_current_dq+0x334>)
 8006b9e:	f000 f96d 	bl	8006e7c <median3>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	4ba7      	ldr	r3, [pc, #668]	; (8006e44 <get_current_dq+0x340>)
 8006ba6:	601a      	str	r2, [r3, #0]

	V_Iu = (float)AD_Iu_MEDF / AD_Range * Vref_AD - V_Iu_offset;
 8006ba8:	4ba4      	ldr	r3, [pc, #656]	; (8006e3c <get_current_dq+0x338>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	ee07 3a90 	vmov	s15, r3
 8006bb0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006bb4:	eddf 7aa4 	vldr	s15, [pc, #656]	; 8006e48 <get_current_dq+0x344>
 8006bb8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006bbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bc0:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8006e4c <get_current_dq+0x348>
 8006bc4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006bc8:	4ba1      	ldr	r3, [pc, #644]	; (8006e50 <get_current_dq+0x34c>)
 8006bca:	edd3 7a00 	vldr	s15, [r3]
 8006bce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006bd2:	4ba0      	ldr	r3, [pc, #640]	; (8006e54 <get_current_dq+0x350>)
 8006bd4:	edc3 7a00 	vstr	s15, [r3]
	V_Iv = (float)AD_Iv_MEDF / AD_Range * Vref_AD - V_Iv_offset;
 8006bd8:	4b99      	ldr	r3, [pc, #612]	; (8006e40 <get_current_dq+0x33c>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	ee07 3a90 	vmov	s15, r3
 8006be0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006be4:	eddf 7a98 	vldr	s15, [pc, #608]	; 8006e48 <get_current_dq+0x344>
 8006be8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006bec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bf0:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8006e4c <get_current_dq+0x348>
 8006bf4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006bf8:	4b97      	ldr	r3, [pc, #604]	; (8006e58 <get_current_dq+0x354>)
 8006bfa:	edd3 7a00 	vldr	s15, [r3]
 8006bfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006c02:	4b96      	ldr	r3, [pc, #600]	; (8006e5c <get_current_dq+0x358>)
 8006c04:	edc3 7a00 	vstr	s15, [r3]
	V_Iw = (float)AD_Iw_MEDF / AD_Range * Vref_AD - V_Iw_offset;
 8006c08:	4b8e      	ldr	r3, [pc, #568]	; (8006e44 <get_current_dq+0x340>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	ee07 3a90 	vmov	s15, r3
 8006c10:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006c14:	eddf 7a8c 	vldr	s15, [pc, #560]	; 8006e48 <get_current_dq+0x344>
 8006c18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006c1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c20:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8006e4c <get_current_dq+0x348>
 8006c24:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006c28:	4b8d      	ldr	r3, [pc, #564]	; (8006e60 <get_current_dq+0x35c>)
 8006c2a:	edd3 7a00 	vldr	s15, [r3]
 8006c2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006c32:	4b8c      	ldr	r3, [pc, #560]	; (8006e64 <get_current_dq+0x360>)
 8006c34:	edc3 7a00 	vstr	s15, [r3]

#endif

	//Vdc = Vdc * 0.9 + 0.1 * (float)AD_Iu[1] / AD_Range * Vref_AD * Gain_Vdc_sense;

	switch(SVM_sector)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2b05      	cmp	r3, #5
 8006c3c:	d874      	bhi.n	8006d28 <get_current_dq+0x224>
 8006c3e:	a201      	add	r2, pc, #4	; (adr r2, 8006c44 <get_current_dq+0x140>)
 8006c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c44:	08006c5d 	.word	0x08006c5d
 8006c48:	08006ca1 	.word	0x08006ca1
 8006c4c:	08006ca1 	.word	0x08006ca1
 8006c50:	08006ce5 	.word	0x08006ce5
 8006c54:	08006ce5 	.word	0x08006ce5
 8006c58:	08006c5d 	.word	0x08006c5d
	{
	case 0: case 5:
		Iv = V_Iv * Gain_currentSense;
 8006c5c:	4b7f      	ldr	r3, [pc, #508]	; (8006e5c <get_current_dq+0x358>)
 8006c5e:	edd3 7a00 	vldr	s15, [r3]
 8006c62:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8006c66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006c6a:	4b7f      	ldr	r3, [pc, #508]	; (8006e68 <get_current_dq+0x364>)
 8006c6c:	edc3 7a00 	vstr	s15, [r3]
		Iw = V_Iw * Gain_currentSense;
 8006c70:	4b7c      	ldr	r3, [pc, #496]	; (8006e64 <get_current_dq+0x360>)
 8006c72:	edd3 7a00 	vldr	s15, [r3]
 8006c76:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8006c7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006c7e:	4b7b      	ldr	r3, [pc, #492]	; (8006e6c <get_current_dq+0x368>)
 8006c80:	edc3 7a00 	vstr	s15, [r3]
		Iu = - Iv - Iw;
 8006c84:	4b78      	ldr	r3, [pc, #480]	; (8006e68 <get_current_dq+0x364>)
 8006c86:	edd3 7a00 	vldr	s15, [r3]
 8006c8a:	eeb1 7a67 	vneg.f32	s14, s15
 8006c8e:	4b77      	ldr	r3, [pc, #476]	; (8006e6c <get_current_dq+0x368>)
 8006c90:	edd3 7a00 	vldr	s15, [r3]
 8006c94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006c98:	4b75      	ldr	r3, [pc, #468]	; (8006e70 <get_current_dq+0x36c>)
 8006c9a:	edc3 7a00 	vstr	s15, [r3]
		break;
 8006c9e:	e043      	b.n	8006d28 <get_current_dq+0x224>

	case 1: case 2:
		Iw = V_Iw * Gain_currentSense;
 8006ca0:	4b70      	ldr	r3, [pc, #448]	; (8006e64 <get_current_dq+0x360>)
 8006ca2:	edd3 7a00 	vldr	s15, [r3]
 8006ca6:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8006caa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006cae:	4b6f      	ldr	r3, [pc, #444]	; (8006e6c <get_current_dq+0x368>)
 8006cb0:	edc3 7a00 	vstr	s15, [r3]
		Iu = V_Iu * Gain_currentSense;
 8006cb4:	4b67      	ldr	r3, [pc, #412]	; (8006e54 <get_current_dq+0x350>)
 8006cb6:	edd3 7a00 	vldr	s15, [r3]
 8006cba:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8006cbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006cc2:	4b6b      	ldr	r3, [pc, #428]	; (8006e70 <get_current_dq+0x36c>)
 8006cc4:	edc3 7a00 	vstr	s15, [r3]
		Iv = - Iw - Iu;
 8006cc8:	4b68      	ldr	r3, [pc, #416]	; (8006e6c <get_current_dq+0x368>)
 8006cca:	edd3 7a00 	vldr	s15, [r3]
 8006cce:	eeb1 7a67 	vneg.f32	s14, s15
 8006cd2:	4b67      	ldr	r3, [pc, #412]	; (8006e70 <get_current_dq+0x36c>)
 8006cd4:	edd3 7a00 	vldr	s15, [r3]
 8006cd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006cdc:	4b62      	ldr	r3, [pc, #392]	; (8006e68 <get_current_dq+0x364>)
 8006cde:	edc3 7a00 	vstr	s15, [r3]
		break;
 8006ce2:	e021      	b.n	8006d28 <get_current_dq+0x224>

	case 3: case 4:
		Iu = V_Iu * Gain_currentSense;
 8006ce4:	4b5b      	ldr	r3, [pc, #364]	; (8006e54 <get_current_dq+0x350>)
 8006ce6:	edd3 7a00 	vldr	s15, [r3]
 8006cea:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8006cee:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006cf2:	4b5f      	ldr	r3, [pc, #380]	; (8006e70 <get_current_dq+0x36c>)
 8006cf4:	edc3 7a00 	vstr	s15, [r3]
		Iv = V_Iv * Gain_currentSense;
 8006cf8:	4b58      	ldr	r3, [pc, #352]	; (8006e5c <get_current_dq+0x358>)
 8006cfa:	edd3 7a00 	vldr	s15, [r3]
 8006cfe:	eeba 7a04 	vmov.f32	s14, #164	; 0xc1200000 -10.0
 8006d02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006d06:	4b58      	ldr	r3, [pc, #352]	; (8006e68 <get_current_dq+0x364>)
 8006d08:	edc3 7a00 	vstr	s15, [r3]
		Iw = - Iu - Iv;
 8006d0c:	4b58      	ldr	r3, [pc, #352]	; (8006e70 <get_current_dq+0x36c>)
 8006d0e:	edd3 7a00 	vldr	s15, [r3]
 8006d12:	eeb1 7a67 	vneg.f32	s14, s15
 8006d16:	4b54      	ldr	r3, [pc, #336]	; (8006e68 <get_current_dq+0x364>)
 8006d18:	edd3 7a00 	vldr	s15, [r3]
 8006d1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d20:	4b52      	ldr	r3, [pc, #328]	; (8006e6c <get_current_dq+0x368>)
 8006d22:	edc3 7a00 	vstr	s15, [r3]
		break;
 8006d26:	bf00      	nop
	}

	*Id = 0.8165f * (Iu * cos_theta_re + Iv * (-0.5f * cos_theta_re + 0.855f * sin_theta_re) + Iw * (-0.5f * cos_theta_re - 0.855f * sin_theta_re));
 8006d28:	4b51      	ldr	r3, [pc, #324]	; (8006e70 <get_current_dq+0x36c>)
 8006d2a:	ed93 7a00 	vldr	s14, [r3]
 8006d2e:	edd7 7a02 	vldr	s15, [r7, #8]
 8006d32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006d36:	edd7 7a02 	vldr	s15, [r7, #8]
 8006d3a:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 8006d3e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006d42:	edd7 7a01 	vldr	s15, [r7, #4]
 8006d46:	ed9f 6a4b 	vldr	s12, [pc, #300]	; 8006e74 <get_current_dq+0x370>
 8006d4a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006d4e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8006d52:	4b45      	ldr	r3, [pc, #276]	; (8006e68 <get_current_dq+0x364>)
 8006d54:	edd3 7a00 	vldr	s15, [r3]
 8006d58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006d5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006d60:	edd7 7a02 	vldr	s15, [r7, #8]
 8006d64:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 8006d68:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006d6c:	edd7 7a01 	vldr	s15, [r7, #4]
 8006d70:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8006e74 <get_current_dq+0x370>
 8006d74:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006d78:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006d7c:	4b3b      	ldr	r3, [pc, #236]	; (8006e6c <get_current_dq+0x368>)
 8006d7e:	edd3 7a00 	vldr	s15, [r3]
 8006d82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006d86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d8a:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8006e78 <get_current_dq+0x374>
 8006d8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	edc3 7a00 	vstr	s15, [r3]
	*Iq = 0.8165f * (-Iu * sin_theta_re + Iv * (0.5f * sin_theta_re + 0.855f * cos_theta_re) + Iw * (0.5f * sin_theta_re - 0.855f * cos_theta_re));
 8006d98:	4b35      	ldr	r3, [pc, #212]	; (8006e70 <get_current_dq+0x36c>)
 8006d9a:	edd3 7a00 	vldr	s15, [r3]
 8006d9e:	eeb1 7a67 	vneg.f32	s14, s15
 8006da2:	edd7 7a01 	vldr	s15, [r7, #4]
 8006da6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006daa:	edd7 7a01 	vldr	s15, [r7, #4]
 8006dae:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8006db2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006db6:	edd7 7a02 	vldr	s15, [r7, #8]
 8006dba:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 8006e74 <get_current_dq+0x370>
 8006dbe:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006dc2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8006dc6:	4b28      	ldr	r3, [pc, #160]	; (8006e68 <get_current_dq+0x364>)
 8006dc8:	edd3 7a00 	vldr	s15, [r3]
 8006dcc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006dd0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006dd4:	edd7 7a01 	vldr	s15, [r7, #4]
 8006dd8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8006ddc:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006de0:	edd7 7a02 	vldr	s15, [r7, #8]
 8006de4:	ed9f 6a23 	vldr	s12, [pc, #140]	; 8006e74 <get_current_dq+0x370>
 8006de8:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006dec:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8006df0:	4b1e      	ldr	r3, [pc, #120]	; (8006e6c <get_current_dq+0x368>)
 8006df2:	edd3 7a00 	vldr	s15, [r3]
 8006df6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006dfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006dfe:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8006e78 <get_current_dq+0x374>
 8006e02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	edc3 7a00 	vstr	s15, [r3]


	return;
 8006e0c:	bf00      	nop

}
 8006e0e:	3718      	adds	r7, #24
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	2000012c 	.word	0x2000012c
 8006e18:	200002c4 	.word	0x200002c4
 8006e1c:	20000130 	.word	0x20000130
 8006e20:	2000021c 	.word	0x2000021c
 8006e24:	20000134 	.word	0x20000134
 8006e28:	2000030c 	.word	0x2000030c
 8006e2c:	20000150 	.word	0x20000150
 8006e30:	20000154 	.word	0x20000154
 8006e34:	20000160 	.word	0x20000160
 8006e38:	2000016c 	.word	0x2000016c
 8006e3c:	20000178 	.word	0x20000178
 8006e40:	2000017c 	.word	0x2000017c
 8006e44:	20000180 	.word	0x20000180
 8006e48:	00001000 	.word	0x00001000
 8006e4c:	40533333 	.word	0x40533333
 8006e50:	20000024 	.word	0x20000024
 8006e54:	20000138 	.word	0x20000138
 8006e58:	20000028 	.word	0x20000028
 8006e5c:	2000013c 	.word	0x2000013c
 8006e60:	2000002c 	.word	0x2000002c
 8006e64:	20000140 	.word	0x20000140
 8006e68:	20000148 	.word	0x20000148
 8006e6c:	2000014c 	.word	0x2000014c
 8006e70:	20000144 	.word	0x20000144
 8006e74:	3f5ae148 	.word	0x3f5ae148
 8006e78:	3f510625 	.word	0x3f510625

08006e7c <median3>:



extern int32_t median3(int32_t *buf)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]

	if(buf[0] < buf[1])
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	3304      	adds	r3, #4
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	da17      	bge.n	8006ec2 <median3+0x46>
	{
		if(buf[2] < buf[0])			return buf[0];
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	3308      	adds	r3, #8
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	da02      	bge.n	8006ea6 <median3+0x2a>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	e025      	b.n	8006ef2 <median3+0x76>
		else if(buf[2] < buf[1])	return buf[2];
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	3308      	adds	r3, #8
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	3304      	adds	r3, #4
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	da02      	bge.n	8006ebc <median3+0x40>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	e01a      	b.n	8006ef2 <median3+0x76>
		else						return buf[1];
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	e017      	b.n	8006ef2 <median3+0x76>
	}
	else
	{
		if(buf[2] < buf[1])			return buf[1];
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	3308      	adds	r3, #8
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	3304      	adds	r3, #4
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	da02      	bge.n	8006ed8 <median3+0x5c>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	e00c      	b.n	8006ef2 <median3+0x76>
		else if(buf[2] < buf[1])	return buf[2];
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	3308      	adds	r3, #8
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	3304      	adds	r3, #4
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	da02      	bge.n	8006eee <median3+0x72>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	e001      	b.n	8006ef2 <median3+0x76>
		else						return buf[0];
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
	}

	return 0;
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	370c      	adds	r7, #12
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr
	...

08006f00 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 8006f04:	4b18      	ldr	r3, [pc, #96]	; (8006f68 <MX_CAN1_Init+0x68>)
 8006f06:	4a19      	ldr	r2, [pc, #100]	; (8006f6c <MX_CAN1_Init+0x6c>)
 8006f08:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 8006f0a:	4b17      	ldr	r3, [pc, #92]	; (8006f68 <MX_CAN1_Init+0x68>)
 8006f0c:	2204      	movs	r2, #4
 8006f0e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8006f10:	4b15      	ldr	r3, [pc, #84]	; (8006f68 <MX_CAN1_Init+0x68>)
 8006f12:	2200      	movs	r2, #0
 8006f14:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8006f16:	4b14      	ldr	r3, [pc, #80]	; (8006f68 <MX_CAN1_Init+0x68>)
 8006f18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006f1c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8006f1e:	4b12      	ldr	r3, [pc, #72]	; (8006f68 <MX_CAN1_Init+0x68>)
 8006f20:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8006f24:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8006f26:	4b10      	ldr	r3, [pc, #64]	; (8006f68 <MX_CAN1_Init+0x68>)
 8006f28:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006f2c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8006f2e:	4b0e      	ldr	r3, [pc, #56]	; (8006f68 <MX_CAN1_Init+0x68>)
 8006f30:	2200      	movs	r2, #0
 8006f32:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8006f34:	4b0c      	ldr	r3, [pc, #48]	; (8006f68 <MX_CAN1_Init+0x68>)
 8006f36:	2200      	movs	r2, #0
 8006f38:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8006f3a:	4b0b      	ldr	r3, [pc, #44]	; (8006f68 <MX_CAN1_Init+0x68>)
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8006f40:	4b09      	ldr	r3, [pc, #36]	; (8006f68 <MX_CAN1_Init+0x68>)
 8006f42:	2200      	movs	r2, #0
 8006f44:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8006f46:	4b08      	ldr	r3, [pc, #32]	; (8006f68 <MX_CAN1_Init+0x68>)
 8006f48:	2200      	movs	r2, #0
 8006f4a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8006f4c:	4b06      	ldr	r3, [pc, #24]	; (8006f68 <MX_CAN1_Init+0x68>)
 8006f4e:	2200      	movs	r2, #0
 8006f50:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8006f52:	4805      	ldr	r0, [pc, #20]	; (8006f68 <MX_CAN1_Init+0x68>)
 8006f54:	f7fa fc6a 	bl	800182c <HAL_CAN_Init>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d001      	beq.n	8006f62 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8006f5e:	f000 fba1 	bl	80076a4 <Error_Handler>
  }

}
 8006f62:	bf00      	nop
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	20000460 	.word	0x20000460
 8006f6c:	40006400 	.word	0x40006400

08006f70 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b08a      	sub	sp, #40	; 0x28
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f78:	f107 0314 	add.w	r3, r7, #20
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	601a      	str	r2, [r3, #0]
 8006f80:	605a      	str	r2, [r3, #4]
 8006f82:	609a      	str	r2, [r3, #8]
 8006f84:	60da      	str	r2, [r3, #12]
 8006f86:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a21      	ldr	r2, [pc, #132]	; (8007014 <HAL_CAN_MspInit+0xa4>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d13c      	bne.n	800700c <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8006f92:	2300      	movs	r3, #0
 8006f94:	613b      	str	r3, [r7, #16]
 8006f96:	4b20      	ldr	r3, [pc, #128]	; (8007018 <HAL_CAN_MspInit+0xa8>)
 8006f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f9a:	4a1f      	ldr	r2, [pc, #124]	; (8007018 <HAL_CAN_MspInit+0xa8>)
 8006f9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8006fa2:	4b1d      	ldr	r3, [pc, #116]	; (8007018 <HAL_CAN_MspInit+0xa8>)
 8006fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006faa:	613b      	str	r3, [r7, #16]
 8006fac:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006fae:	2300      	movs	r3, #0
 8006fb0:	60fb      	str	r3, [r7, #12]
 8006fb2:	4b19      	ldr	r3, [pc, #100]	; (8007018 <HAL_CAN_MspInit+0xa8>)
 8006fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fb6:	4a18      	ldr	r2, [pc, #96]	; (8007018 <HAL_CAN_MspInit+0xa8>)
 8006fb8:	f043 0301 	orr.w	r3, r3, #1
 8006fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8006fbe:	4b16      	ldr	r3, [pc, #88]	; (8007018 <HAL_CAN_MspInit+0xa8>)
 8006fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fc2:	f003 0301 	and.w	r3, r3, #1
 8006fc6:	60fb      	str	r3, [r7, #12]
 8006fc8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006fca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006fce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fd0:	2302      	movs	r3, #2
 8006fd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006fd8:	2303      	movs	r3, #3
 8006fda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8006fdc:	2309      	movs	r3, #9
 8006fde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006fe0:	f107 0314 	add.w	r3, r7, #20
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	480d      	ldr	r0, [pc, #52]	; (800701c <HAL_CAN_MspInit+0xac>)
 8006fe8:	f7fb fe2e 	bl	8002c48 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8006fec:	2200      	movs	r2, #0
 8006fee:	2100      	movs	r1, #0
 8006ff0:	2013      	movs	r0, #19
 8006ff2:	f7fb fa5a 	bl	80024aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8006ff6:	2013      	movs	r0, #19
 8006ff8:	f7fb fa73 	bl	80024e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	2100      	movs	r1, #0
 8007000:	2014      	movs	r0, #20
 8007002:	f7fb fa52 	bl	80024aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8007006:	2014      	movs	r0, #20
 8007008:	f7fb fa6b 	bl	80024e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800700c:	bf00      	nop
 800700e:	3728      	adds	r7, #40	; 0x28
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}
 8007014:	40006400 	.word	0x40006400
 8007018:	40023800 	.word	0x40023800
 800701c:	40020000 	.word	0x40020000

08007020 <CAN_Init>:

/* USER CODE BEGIN 1 */


void CAN_Init()
{
 8007020:	b580      	push	{r7, lr}
 8007022:	af00      	add	r7, sp, #0

	motorChannel = getChannel();
 8007024:	f000 f84a 	bl	80070bc <getChannel>
 8007028:	4603      	mov	r3, r0
 800702a:	461a      	mov	r2, r3
 800702c:	4b20      	ldr	r3, [pc, #128]	; (80070b0 <CAN_Init+0x90>)
 800702e:	701a      	strb	r2, [r3, #0]


	sFilterConfig.FilterBank = 0;
 8007030:	4b20      	ldr	r3, [pc, #128]	; (80070b4 <CAN_Init+0x94>)
 8007032:	2200      	movs	r2, #0
 8007034:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8007036:	4b1f      	ldr	r3, [pc, #124]	; (80070b4 <CAN_Init+0x94>)
 8007038:	2200      	movs	r2, #0
 800703a:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800703c:	4b1d      	ldr	r3, [pc, #116]	; (80070b4 <CAN_Init+0x94>)
 800703e:	2201      	movs	r2, #1
 8007040:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = 0x2000 | motorChannel << 10;
 8007042:	4b1b      	ldr	r3, [pc, #108]	; (80070b0 <CAN_Init+0x90>)
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	029b      	lsls	r3, r3, #10
 8007048:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800704c:	461a      	mov	r2, r3
 800704e:	4b19      	ldr	r3, [pc, #100]	; (80070b4 <CAN_Init+0x94>)
 8007050:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8007052:	4b18      	ldr	r3, [pc, #96]	; (80070b4 <CAN_Init+0x94>)
 8007054:	2200      	movs	r2, #0
 8007056:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0xfc00;
 8007058:	4b16      	ldr	r3, [pc, #88]	; (80070b4 <CAN_Init+0x94>)
 800705a:	f44f 427c 	mov.w	r2, #64512	; 0xfc00
 800705e:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0006;
 8007060:	4b14      	ldr	r3, [pc, #80]	; (80070b4 <CAN_Init+0x94>)
 8007062:	2206      	movs	r2, #6
 8007064:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8007066:	4b13      	ldr	r3, [pc, #76]	; (80070b4 <CAN_Init+0x94>)
 8007068:	2200      	movs	r2, #0
 800706a:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 800706c:	4b11      	ldr	r3, [pc, #68]	; (80070b4 <CAN_Init+0x94>)
 800706e:	2201      	movs	r2, #1
 8007070:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 8007072:	4b10      	ldr	r3, [pc, #64]	; (80070b4 <CAN_Init+0x94>)
 8007074:	220e      	movs	r2, #14
 8007076:	625a      	str	r2, [r3, #36]	; 0x24

	if(HAL_CAN_ConfigFilter(&hcan1,&sFilterConfig) != HAL_OK)
 8007078:	490e      	ldr	r1, [pc, #56]	; (80070b4 <CAN_Init+0x94>)
 800707a:	480f      	ldr	r0, [pc, #60]	; (80070b8 <CAN_Init+0x98>)
 800707c:	f7fa fcd2 	bl	8001a24 <HAL_CAN_ConfigFilter>
 8007080:	4603      	mov	r3, r0
 8007082:	2b00      	cmp	r3, #0
 8007084:	d001      	beq.n	800708a <CAN_Init+0x6a>
	{
	  Error_Handler();
 8007086:	f000 fb0d 	bl	80076a4 <Error_Handler>
	}

	if(HAL_CAN_Start(&hcan1) != HAL_OK)
 800708a:	480b      	ldr	r0, [pc, #44]	; (80070b8 <CAN_Init+0x98>)
 800708c:	f7fa fdaa 	bl	8001be4 <HAL_CAN_Start>
 8007090:	4603      	mov	r3, r0
 8007092:	2b00      	cmp	r3, #0
 8007094:	d001      	beq.n	800709a <CAN_Init+0x7a>
	{
	  Error_Handler();
 8007096:	f000 fb05 	bl	80076a4 <Error_Handler>
	}

	if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 800709a:	2103      	movs	r1, #3
 800709c:	4806      	ldr	r0, [pc, #24]	; (80070b8 <CAN_Init+0x98>)
 800709e:	f7fa fef8 	bl	8001e92 <HAL_CAN_ActivateNotification>
 80070a2:	4603      	mov	r3, r0
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d001      	beq.n	80070ac <CAN_Init+0x8c>
	{
	  Error_Handler();
 80070a8:	f000 fafc 	bl	80076a4 <Error_Handler>
	}


}
 80070ac:	bf00      	nop
 80070ae:	bd80      	pop	{r7, pc}
 80070b0:	20000184 	.word	0x20000184
 80070b4:	20000414 	.word	0x20000414
 80070b8:	20000460 	.word	0x20000460

080070bc <getChannel>:


uint8_t getChannel()
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 80070c2:	2300      	movs	r3, #0
 80070c4:	71fb      	strb	r3, [r7, #7]

	ch |= !HAL_GPIO_ReadPin(CH_b0_GPIO_Port, CH_b0_Pin) << 0;
 80070c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80070ca:	481b      	ldr	r0, [pc, #108]	; (8007138 <getChannel+0x7c>)
 80070cc:	f7fb ff4e 	bl	8002f6c <HAL_GPIO_ReadPin>
 80070d0:	4603      	mov	r3, r0
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	bf0c      	ite	eq
 80070d6:	2301      	moveq	r3, #1
 80070d8:	2300      	movne	r3, #0
 80070da:	b2db      	uxtb	r3, r3
 80070dc:	b25a      	sxtb	r2, r3
 80070de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070e2:	4313      	orrs	r3, r2
 80070e4:	b25b      	sxtb	r3, r3
 80070e6:	71fb      	strb	r3, [r7, #7]
	ch |= !HAL_GPIO_ReadPin(CH_b1_GPIO_Port, CH_b1_Pin) << 1;
 80070e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80070ec:	4812      	ldr	r0, [pc, #72]	; (8007138 <getChannel+0x7c>)
 80070ee:	f7fb ff3d 	bl	8002f6c <HAL_GPIO_ReadPin>
 80070f2:	4603      	mov	r3, r0
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d101      	bne.n	80070fc <getChannel+0x40>
 80070f8:	2302      	movs	r3, #2
 80070fa:	e000      	b.n	80070fe <getChannel+0x42>
 80070fc:	2300      	movs	r3, #0
 80070fe:	b25a      	sxtb	r2, r3
 8007100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007104:	4313      	orrs	r3, r2
 8007106:	b25b      	sxtb	r3, r3
 8007108:	71fb      	strb	r3, [r7, #7]
	ch |= !HAL_GPIO_ReadPin(CH_b2_GPIO_Port, CH_b2_Pin) << 2;
 800710a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800710e:	480a      	ldr	r0, [pc, #40]	; (8007138 <getChannel+0x7c>)
 8007110:	f7fb ff2c 	bl	8002f6c <HAL_GPIO_ReadPin>
 8007114:	4603      	mov	r3, r0
 8007116:	2b00      	cmp	r3, #0
 8007118:	d101      	bne.n	800711e <getChannel+0x62>
 800711a:	2304      	movs	r3, #4
 800711c:	e000      	b.n	8007120 <getChannel+0x64>
 800711e:	2300      	movs	r3, #0
 8007120:	b25a      	sxtb	r2, r3
 8007122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007126:	4313      	orrs	r3, r2
 8007128:	b25b      	sxtb	r3, r3
 800712a:	71fb      	strb	r3, [r7, #7]

	return ch;
 800712c:	79fb      	ldrb	r3, [r7, #7]
}
 800712e:	4618      	mov	r0, r3
 8007130:	3708      	adds	r7, #8
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	40020400 	.word	0x40020400

0800713c <HAL_CAN_TxMailbox0CompleteCallback>:




void HAL_CAN_TxMailbox0CompleteCallback (CAN_HandleTypeDef * hcan)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
	{
	}
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 8007144:	2200      	movs	r2, #0
 8007146:	2140      	movs	r1, #64	; 0x40
 8007148:	4803      	ldr	r0, [pc, #12]	; (8007158 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 800714a:	f7fb ff27 	bl	8002f9c <HAL_GPIO_WritePin>

}
 800714e:	bf00      	nop
 8007150:	3708      	adds	r7, #8
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
 8007156:	bf00      	nop
 8007158:	40020400 	.word	0x40020400

0800715c <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback (CAN_HandleTypeDef * hcan)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
	{
	}
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 8007164:	2200      	movs	r2, #0
 8007166:	2140      	movs	r1, #64	; 0x40
 8007168:	4803      	ldr	r0, [pc, #12]	; (8007178 <HAL_CAN_TxMailbox1CompleteCallback+0x1c>)
 800716a:	f7fb ff17 	bl	8002f9c <HAL_GPIO_WritePin>

}
 800716e:	bf00      	nop
 8007170:	3708      	adds	r7, #8
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	40020400 	.word	0x40020400

0800717c <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback (CAN_HandleTypeDef * hcan)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
	{
	}
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 8007184:	2200      	movs	r2, #0
 8007186:	2140      	movs	r1, #64	; 0x40
 8007188:	4803      	ldr	r0, [pc, #12]	; (8007198 <HAL_CAN_TxMailbox2CompleteCallback+0x1c>)
 800718a:	f7fb ff07 	bl	8002f9c <HAL_GPIO_WritePin>

}
 800718e:	bf00      	nop
 8007190:	3708      	adds	r7, #8
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	40020400 	.word	0x40020400

0800719c <HAL_CAN_RxFifo0MsgPendingCallback>:



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
			uint8_t byte[4];
		};
	}controlRef;


	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can1RxHeader, can1RxData);
 80071a4:	4b16      	ldr	r3, [pc, #88]	; (8007200 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 80071a6:	4a17      	ldr	r2, [pc, #92]	; (8007204 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 80071a8:	2100      	movs	r1, #0
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f7fa fd5e 	bl	8001c6c <HAL_CAN_GetRxMessage>

	can1RxFlg = 1;
 80071b0:	4b15      	ldr	r3, [pc, #84]	; (8007208 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 80071b2:	2201      	movs	r2, #1
 80071b4:	701a      	strb	r2, [r3, #0]

	if(((can1RxHeader.StdId & 0x1c) >> 2) == 0x01 && can1RxHeader.DLC == 0x4)
 80071b6:	4b13      	ldr	r3, [pc, #76]	; (8007204 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	089b      	lsrs	r3, r3, #2
 80071bc:	f003 0307 	and.w	r3, r3, #7
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d114      	bne.n	80071ee <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
 80071c4:	4b0f      	ldr	r3, [pc, #60]	; (8007204 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 80071c6:	691b      	ldr	r3, [r3, #16]
 80071c8:	2b04      	cmp	r3, #4
 80071ca:	d110      	bne.n	80071ee <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
	{
		controlRef.byte[0] = can1RxData[0];
 80071cc:	4b0c      	ldr	r3, [pc, #48]	; (8007200 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	733b      	strb	r3, [r7, #12]
		controlRef.byte[1] = can1RxData[1];
 80071d2:	4b0b      	ldr	r3, [pc, #44]	; (8007200 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 80071d4:	785b      	ldrb	r3, [r3, #1]
 80071d6:	737b      	strb	r3, [r7, #13]
		controlRef.byte[2] = can1RxData[2];
 80071d8:	4b09      	ldr	r3, [pc, #36]	; (8007200 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 80071da:	789b      	ldrb	r3, [r3, #2]
 80071dc:	73bb      	strb	r3, [r7, #14]
		controlRef.byte[3] = can1RxData[3];
 80071de:	4b08      	ldr	r3, [pc, #32]	; (8007200 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 80071e0:	78db      	ldrb	r3, [r3, #3]
 80071e2:	73fb      	strb	r3, [r7, #15]

		omega_ref = controlRef.fval;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	4a09      	ldr	r2, [pc, #36]	; (800720c <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 80071e8:	6013      	str	r3, [r2, #0]

		timeoutReset();
 80071ea:	f001 fcf9 	bl	8008be0 <timeoutReset>
		theta_ref = controlRef.fval;
	}
#endif


	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_SET);
 80071ee:	2201      	movs	r2, #1
 80071f0:	2140      	movs	r1, #64	; 0x40
 80071f2:	4807      	ldr	r0, [pc, #28]	; (8007210 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 80071f4:	f7fb fed2 	bl	8002f9c <HAL_GPIO_WritePin>

}
 80071f8:	bf00      	nop
 80071fa:	3710      	adds	r7, #16
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}
 8007200:	20000458 	.word	0x20000458
 8007204:	2000043c 	.word	0x2000043c
 8007208:	20000185 	.word	0x20000185
 800720c:	20000100 	.word	0x20000100
 8007210:	40020000 	.word	0x40020000

08007214 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b082      	sub	sp, #8
 8007218:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800721a:	2300      	movs	r3, #0
 800721c:	607b      	str	r3, [r7, #4]
 800721e:	4b14      	ldr	r3, [pc, #80]	; (8007270 <MX_DMA_Init+0x5c>)
 8007220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007222:	4a13      	ldr	r2, [pc, #76]	; (8007270 <MX_DMA_Init+0x5c>)
 8007224:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007228:	6313      	str	r3, [r2, #48]	; 0x30
 800722a:	4b11      	ldr	r3, [pc, #68]	; (8007270 <MX_DMA_Init+0x5c>)
 800722c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800722e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007232:	607b      	str	r3, [r7, #4]
 8007234:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8007236:	2200      	movs	r2, #0
 8007238:	2100      	movs	r1, #0
 800723a:	2038      	movs	r0, #56	; 0x38
 800723c:	f7fb f935 	bl	80024aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8007240:	2038      	movs	r0, #56	; 0x38
 8007242:	f7fb f94e 	bl	80024e2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8007246:	2200      	movs	r2, #0
 8007248:	2100      	movs	r1, #0
 800724a:	2039      	movs	r0, #57	; 0x39
 800724c:	f7fb f92d 	bl	80024aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8007250:	2039      	movs	r0, #57	; 0x39
 8007252:	f7fb f946 	bl	80024e2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8007256:	2200      	movs	r2, #0
 8007258:	2100      	movs	r1, #0
 800725a:	203a      	movs	r0, #58	; 0x3a
 800725c:	f7fb f925 	bl	80024aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8007260:	203a      	movs	r0, #58	; 0x3a
 8007262:	f7fb f93e 	bl	80024e2 <HAL_NVIC_EnableIRQ>

}
 8007266:	bf00      	nop
 8007268:	3708      	adds	r7, #8
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
 800726e:	bf00      	nop
 8007270:	40023800 	.word	0x40023800

08007274 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b08a      	sub	sp, #40	; 0x28
 8007278:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800727a:	f107 0314 	add.w	r3, r7, #20
 800727e:	2200      	movs	r2, #0
 8007280:	601a      	str	r2, [r3, #0]
 8007282:	605a      	str	r2, [r3, #4]
 8007284:	609a      	str	r2, [r3, #8]
 8007286:	60da      	str	r2, [r3, #12]
 8007288:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800728a:	2300      	movs	r3, #0
 800728c:	613b      	str	r3, [r7, #16]
 800728e:	4b45      	ldr	r3, [pc, #276]	; (80073a4 <MX_GPIO_Init+0x130>)
 8007290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007292:	4a44      	ldr	r2, [pc, #272]	; (80073a4 <MX_GPIO_Init+0x130>)
 8007294:	f043 0304 	orr.w	r3, r3, #4
 8007298:	6313      	str	r3, [r2, #48]	; 0x30
 800729a:	4b42      	ldr	r3, [pc, #264]	; (80073a4 <MX_GPIO_Init+0x130>)
 800729c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800729e:	f003 0304 	and.w	r3, r3, #4
 80072a2:	613b      	str	r3, [r7, #16]
 80072a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80072a6:	2300      	movs	r3, #0
 80072a8:	60fb      	str	r3, [r7, #12]
 80072aa:	4b3e      	ldr	r3, [pc, #248]	; (80073a4 <MX_GPIO_Init+0x130>)
 80072ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ae:	4a3d      	ldr	r2, [pc, #244]	; (80073a4 <MX_GPIO_Init+0x130>)
 80072b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072b4:	6313      	str	r3, [r2, #48]	; 0x30
 80072b6:	4b3b      	ldr	r3, [pc, #236]	; (80073a4 <MX_GPIO_Init+0x130>)
 80072b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072be:	60fb      	str	r3, [r7, #12]
 80072c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80072c2:	2300      	movs	r3, #0
 80072c4:	60bb      	str	r3, [r7, #8]
 80072c6:	4b37      	ldr	r3, [pc, #220]	; (80073a4 <MX_GPIO_Init+0x130>)
 80072c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ca:	4a36      	ldr	r2, [pc, #216]	; (80073a4 <MX_GPIO_Init+0x130>)
 80072cc:	f043 0301 	orr.w	r3, r3, #1
 80072d0:	6313      	str	r3, [r2, #48]	; 0x30
 80072d2:	4b34      	ldr	r3, [pc, #208]	; (80073a4 <MX_GPIO_Init+0x130>)
 80072d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d6:	f003 0301 	and.w	r3, r3, #1
 80072da:	60bb      	str	r3, [r7, #8]
 80072dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80072de:	2300      	movs	r3, #0
 80072e0:	607b      	str	r3, [r7, #4]
 80072e2:	4b30      	ldr	r3, [pc, #192]	; (80073a4 <MX_GPIO_Init+0x130>)
 80072e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072e6:	4a2f      	ldr	r2, [pc, #188]	; (80073a4 <MX_GPIO_Init+0x130>)
 80072e8:	f043 0302 	orr.w	r3, r3, #2
 80072ec:	6313      	str	r3, [r2, #48]	; 0x30
 80072ee:	4b2d      	ldr	r3, [pc, #180]	; (80073a4 <MX_GPIO_Init+0x130>)
 80072f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072f2:	f003 0302 	and.w	r3, r3, #2
 80072f6:	607b      	str	r3, [r7, #4]
 80072f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DB1_Pin|OP_CAL_Pin|GATE_EN_Pin, GPIO_PIN_RESET);
 80072fa:	2200      	movs	r2, #0
 80072fc:	f44f 61cc 	mov.w	r1, #1632	; 0x660
 8007300:	4829      	ldr	r0, [pc, #164]	; (80073a8 <MX_GPIO_Init+0x134>)
 8007302:	f7fb fe4b 	bl	8002f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_NSS_Pin|DB2_Pin|DB0_Pin, GPIO_PIN_RESET);
 8007306:	2200      	movs	r2, #0
 8007308:	f241 0150 	movw	r1, #4176	; 0x1050
 800730c:	4827      	ldr	r0, [pc, #156]	; (80073ac <MX_GPIO_Init+0x138>)
 800730e:	f7fb fe45 	bl	8002f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8007312:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007316:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8007318:	4b25      	ldr	r3, [pc, #148]	; (80073b0 <MX_GPIO_Init+0x13c>)
 800731a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800731c:	2300      	movs	r3, #0
 800731e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8007320:	f107 0314 	add.w	r3, r7, #20
 8007324:	4619      	mov	r1, r3
 8007326:	4823      	ldr	r0, [pc, #140]	; (80073b4 <MX_GPIO_Init+0x140>)
 8007328:	f7fb fc8e 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|DB1_Pin|OP_CAL_Pin|GATE_EN_Pin;
 800732c:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 8007330:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007332:	2301      	movs	r3, #1
 8007334:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007336:	2300      	movs	r3, #0
 8007338:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800733a:	2300      	movs	r3, #0
 800733c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800733e:	f107 0314 	add.w	r3, r7, #20
 8007342:	4619      	mov	r1, r3
 8007344:	4818      	ldr	r0, [pc, #96]	; (80073a8 <MX_GPIO_Init+0x134>)
 8007346:	f7fb fc7f 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|DB2_Pin|DB0_Pin;
 800734a:	f241 0350 	movw	r3, #4176	; 0x1050
 800734e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007350:	2301      	movs	r3, #1
 8007352:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007354:	2300      	movs	r3, #0
 8007356:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007358:	2300      	movs	r3, #0
 800735a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800735c:	f107 0314 	add.w	r3, r7, #20
 8007360:	4619      	mov	r1, r3
 8007362:	4812      	ldr	r0, [pc, #72]	; (80073ac <MX_GPIO_Init+0x138>)
 8007364:	f7fb fc70 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CH_b0_Pin|CH_b1_Pin|CH_b2_Pin;
 8007368:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800736c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800736e:	2300      	movs	r3, #0
 8007370:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007372:	2301      	movs	r3, #1
 8007374:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007376:	f107 0314 	add.w	r3, r7, #20
 800737a:	4619      	mov	r1, r3
 800737c:	480b      	ldr	r0, [pc, #44]	; (80073ac <MX_GPIO_Init+0x138>)
 800737e:	f7fb fc63 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BR_FLT_Pin;
 8007382:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007386:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007388:	2300      	movs	r3, #0
 800738a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800738c:	2300      	movs	r3, #0
 800738e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BR_FLT_GPIO_Port, &GPIO_InitStruct);
 8007390:	f107 0314 	add.w	r3, r7, #20
 8007394:	4619      	mov	r1, r3
 8007396:	4804      	ldr	r0, [pc, #16]	; (80073a8 <MX_GPIO_Init+0x134>)
 8007398:	f7fb fc56 	bl	8002c48 <HAL_GPIO_Init>

}
 800739c:	bf00      	nop
 800739e:	3728      	adds	r7, #40	; 0x28
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	40023800 	.word	0x40023800
 80073a8:	40020000 	.word	0x40020000
 80073ac:	40020400 	.word	0x40020400
 80073b0:	10210000 	.word	0x10210000
 80073b4:	40020800 	.word	0x40020800

080073b8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80073c0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80073c4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80073c8:	f003 0301 	and.w	r3, r3, #1
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d013      	beq.n	80073f8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80073d0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80073d4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80073d8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d00b      	beq.n	80073f8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80073e0:	e000      	b.n	80073e4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80073e2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80073e4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d0f9      	beq.n	80073e2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80073ee:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	b2d2      	uxtb	r2, r2
 80073f6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80073f8:	687b      	ldr	r3, [r7, #4]
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	370c      	adds	r7, #12
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr

08007406 <_write>:
#endif



int _write(int file, char *ptr, int len)
{
 8007406:	b580      	push	{r7, lr}
 8007408:	b086      	sub	sp, #24
 800740a:	af00      	add	r7, sp, #0
 800740c:	60f8      	str	r0, [r7, #12]
 800740e:	60b9      	str	r1, [r7, #8]
 8007410:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8007412:	2300      	movs	r3, #0
 8007414:	617b      	str	r3, [r7, #20]
 8007416:	e009      	b.n	800742c <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	1c5a      	adds	r2, r3, #1
 800741c:	60ba      	str	r2, [r7, #8]
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	4618      	mov	r0, r3
 8007422:	f7ff ffc9 	bl	80073b8 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	3301      	adds	r3, #1
 800742a:	617b      	str	r3, [r7, #20]
 800742c:	697a      	ldr	r2, [r7, #20]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	429a      	cmp	r2, r3
 8007432:	dbf1      	blt.n	8007418 <_write+0x12>
  }
  return len;
 8007434:	687b      	ldr	r3, [r7, #4]
}
 8007436:	4618      	mov	r0, r3
 8007438:	3718      	adds	r7, #24
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
	...

08007440 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */


	int count = 0;
 8007446:	2300      	movs	r3, #0
 8007448:	607b      	str	r3, [r7, #4]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800744a:	f7f9 fd57 	bl	8000efc <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800744e:	f000 f8bd 	bl	80075cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007452:	f7ff ff0f 	bl	8007274 <MX_GPIO_Init>
  MX_DMA_Init();
 8007456:	f7ff fedd 	bl	8007214 <MX_DMA_Init>
  MX_ADC1_Init();
 800745a:	f7ff f8df 	bl	800661c <MX_ADC1_Init>
  MX_ADC2_Init();
 800745e:	f7ff f92f 	bl	80066c0 <MX_ADC2_Init>
  MX_ADC3_Init();
 8007462:	f7ff f97f 	bl	8006764 <MX_ADC3_Init>
  MX_CAN1_Init();
 8007466:	f7ff fd4b 	bl	8006f00 <MX_CAN1_Init>
  MX_SPI2_Init();
 800746a:	f000 fcd1 	bl	8007e10 <MX_SPI2_Init>
  MX_SPI3_Init();
 800746e:	f000 fd07 	bl	8007e80 <MX_SPI3_Init>
  MX_TIM8_Init();
 8007472:	f001 f9d9 	bl	8008828 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8007476:	f001 fbcd 	bl	8008c14 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */


  ADC_Init();
 800747a:	f7ff fb23 	bl	8006ac4 <ADC_Init>

  /********** CAN Setting **********/


  CAN_Init();
 800747e:	f7ff fdcf 	bl	8007020 <CAN_Init>


  //UartPrintf(&huart2, "Hello world\n");

  printf("Hello\n");
 8007482:	484e      	ldr	r0, [pc, #312]	; (80075bc <main+0x17c>)
 8007484:	f001 fd10 	bl	8008ea8 <puts>

  // Gate Enable
  HAL_GPIO_WritePin(GATE_EN_GPIO_Port, GATE_EN_Pin, GPIO_PIN_SET);
 8007488:	2201      	movs	r2, #1
 800748a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800748e:	484c      	ldr	r0, [pc, #304]	; (80075c0 <main+0x180>)
 8007490:	f7fb fd84 	bl	8002f9c <HAL_GPIO_WritePin>


  // Current Sensing Auto Offset Calibration
  HAL_GPIO_WritePin(OP_CAL_GPIO_Port, OP_CAL_Pin, GPIO_PIN_SET);
 8007494:	2201      	movs	r2, #1
 8007496:	f44f 7100 	mov.w	r1, #512	; 0x200
 800749a:	4849      	ldr	r0, [pc, #292]	; (80075c0 <main+0x180>)
 800749c:	f7fb fd7e 	bl	8002f9c <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80074a0:	200a      	movs	r0, #10
 80074a2:	f7f9 fd9d 	bl	8000fe0 <HAL_Delay>
  HAL_GPIO_WritePin(OP_CAL_GPIO_Port, OP_CAL_Pin, GPIO_PIN_RESET);
 80074a6:	2200      	movs	r2, #0
 80074a8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80074ac:	4844      	ldr	r0, [pc, #272]	; (80075c0 <main+0x180>)
 80074ae:	f7fb fd75 	bl	8002f9c <HAL_GPIO_WritePin>


  /******** DEBUG ********/

  HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_RESET);
 80074b2:	2200      	movs	r2, #0
 80074b4:	2140      	movs	r1, #64	; 0x40
 80074b6:	4842      	ldr	r0, [pc, #264]	; (80075c0 <main+0x180>)
 80074b8:	f7fb fd70 	bl	8002f9c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, GPIO_PIN_RESET);
 80074bc:	2200      	movs	r2, #0
 80074be:	2110      	movs	r1, #16
 80074c0:	4840      	ldr	r0, [pc, #256]	; (80075c4 <main+0x184>)
 80074c2:	f7fb fd6b 	bl	8002f9c <HAL_GPIO_WritePin>


  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 80074c6:	2201      	movs	r2, #1
 80074c8:	2120      	movs	r1, #32
 80074ca:	483d      	ldr	r0, [pc, #244]	; (80075c0 <main+0x180>)
 80074cc:	f7fb fd66 	bl	8002f9c <HAL_GPIO_WritePin>
 80074d0:	2064      	movs	r0, #100	; 0x64
 80074d2:	f7f9 fd85 	bl	8000fe0 <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 80074d6:	2200      	movs	r2, #0
 80074d8:	2120      	movs	r1, #32
 80074da:	4839      	ldr	r0, [pc, #228]	; (80075c0 <main+0x180>)
 80074dc:	f7fb fd5e 	bl	8002f9c <HAL_GPIO_WritePin>
 80074e0:	2064      	movs	r0, #100	; 0x64
 80074e2:	f7f9 fd7d 	bl	8000fe0 <HAL_Delay>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 80074e6:	2201      	movs	r2, #1
 80074e8:	2120      	movs	r1, #32
 80074ea:	4835      	ldr	r0, [pc, #212]	; (80075c0 <main+0x180>)
 80074ec:	f7fb fd56 	bl	8002f9c <HAL_GPIO_WritePin>
 80074f0:	2064      	movs	r0, #100	; 0x64
 80074f2:	f7f9 fd75 	bl	8000fe0 <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 80074f6:	2200      	movs	r2, #0
 80074f8:	2120      	movs	r1, #32
 80074fa:	4831      	ldr	r0, [pc, #196]	; (80075c0 <main+0x180>)
 80074fc:	f7fb fd4e 	bl	8002f9c <HAL_GPIO_WritePin>
 8007500:	2064      	movs	r0, #100	; 0x64
 8007502:	f7f9 fd6d 	bl	8000fe0 <HAL_Delay>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 8007506:	2201      	movs	r2, #1
 8007508:	2120      	movs	r1, #32
 800750a:	482d      	ldr	r0, [pc, #180]	; (80075c0 <main+0x180>)
 800750c:	f7fb fd46 	bl	8002f9c <HAL_GPIO_WritePin>
 8007510:	2064      	movs	r0, #100	; 0x64
 8007512:	f7f9 fd65 	bl	8000fe0 <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 8007516:	2200      	movs	r2, #0
 8007518:	2120      	movs	r1, #32
 800751a:	4829      	ldr	r0, [pc, #164]	; (80075c0 <main+0x180>)
 800751c:	f7fb fd3e 	bl	8002f9c <HAL_GPIO_WritePin>
 8007520:	2064      	movs	r0, #100	; 0x64
 8007522:	f7f9 fd5d 	bl	8000fe0 <HAL_Delay>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 8007526:	2201      	movs	r2, #1
 8007528:	2120      	movs	r1, #32
 800752a:	4825      	ldr	r0, [pc, #148]	; (80075c0 <main+0x180>)
 800752c:	f7fb fd36 	bl	8002f9c <HAL_GPIO_WritePin>
 8007530:	2064      	movs	r0, #100	; 0x64
 8007532:	f7f9 fd55 	bl	8000fe0 <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 8007536:	2200      	movs	r2, #0
 8007538:	2120      	movs	r1, #32
 800753a:	4821      	ldr	r0, [pc, #132]	; (80075c0 <main+0x180>)
 800753c:	f7fb fd2e 	bl	8002f9c <HAL_GPIO_WritePin>
 8007540:	2064      	movs	r0, #100	; 0x64
 8007542:	f7f9 fd4d 	bl	8000fe0 <HAL_Delay>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 8007546:	2201      	movs	r2, #1
 8007548:	2120      	movs	r1, #32
 800754a:	481d      	ldr	r0, [pc, #116]	; (80075c0 <main+0x180>)
 800754c:	f7fb fd26 	bl	8002f9c <HAL_GPIO_WritePin>
 8007550:	2064      	movs	r0, #100	; 0x64
 8007552:	f7f9 fd45 	bl	8000fe0 <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 8007556:	2200      	movs	r2, #0
 8007558:	2120      	movs	r1, #32
 800755a:	4819      	ldr	r0, [pc, #100]	; (80075c0 <main+0x180>)
 800755c:	f7fb fd1e 	bl	8002f9c <HAL_GPIO_WritePin>
 8007560:	2064      	movs	r0, #100	; 0x64
 8007562:	f7f9 fd3d 	bl	8000fe0 <HAL_Delay>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 8007566:	2201      	movs	r2, #1
 8007568:	2120      	movs	r1, #32
 800756a:	4815      	ldr	r0, [pc, #84]	; (80075c0 <main+0x180>)
 800756c:	f7fb fd16 	bl	8002f9c <HAL_GPIO_WritePin>
 8007570:	2064      	movs	r0, #100	; 0x64
 8007572:	f7f9 fd35 	bl	8000fe0 <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 8007576:	2200      	movs	r2, #0
 8007578:	2120      	movs	r1, #32
 800757a:	4811      	ldr	r0, [pc, #68]	; (80075c0 <main+0x180>)
 800757c:	f7fb fd0e 	bl	8002f9c <HAL_GPIO_WritePin>
 8007580:	2064      	movs	r0, #100	; 0x64
 8007582:	f7f9 fd2d 	bl	8000fe0 <HAL_Delay>



  TIM_Init();
 8007586:	f001 faa9 	bl	8008adc <TIM_Init>

  SPI_Init();
 800758a:	f000 fda3 	bl	80080d4 <SPI_Init>


  ACR_Start();
 800758e:	f7fe fbbf 	bl	8005d10 <ACR_Start>


  setZeroEncoder();
 8007592:	f000 fdb1 	bl	80080f8 <setZeroEncoder>

  ACR_Start();
 8007596:	f7fe fbbb 	bl	8005d10 <ACR_Start>

  //while(1);

  ASR_Start();
 800759a:	f7fe fe5f 	bl	800625c <ASR_Start>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  if(ASR_flg == 1)
 800759e:	4b0a      	ldr	r3, [pc, #40]	; (80075c8 <main+0x188>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d1fb      	bne.n	800759e <main+0x15e>
	  {
		  HAL_GPIO_TogglePin(DB2_GPIO_Port, DB2_Pin);
 80075a6:	2110      	movs	r1, #16
 80075a8:	4806      	ldr	r0, [pc, #24]	; (80075c4 <main+0x184>)
 80075aa:	f7fb fd10 	bl	8002fce <HAL_GPIO_TogglePin>
#endif

		  /********** ASR (Auto Speed Regulator) **********/


		  speedControl();
 80075ae:	f7fe fe63 	bl	8006278 <speedControl>


		  /********** end of ASR **********/


		  ASR_flg = 0;
 80075b2:	4b05      	ldr	r3, [pc, #20]	; (80075c8 <main+0x188>)
 80075b4:	2200      	movs	r2, #0
 80075b6:	601a      	str	r2, [r3, #0]
	  if(ASR_flg == 1)
 80075b8:	e7f1      	b.n	800759e <main+0x15e>
 80075ba:	bf00      	nop
 80075bc:	08009e34 	.word	0x08009e34
 80075c0:	40020000 	.word	0x40020000
 80075c4:	40020400 	.word	0x40020400
 80075c8:	20000114 	.word	0x20000114

080075cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b094      	sub	sp, #80	; 0x50
 80075d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80075d2:	f107 031c 	add.w	r3, r7, #28
 80075d6:	2234      	movs	r2, #52	; 0x34
 80075d8:	2100      	movs	r1, #0
 80075da:	4618      	mov	r0, r3
 80075dc:	f001 fbe8 	bl	8008db0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80075e0:	f107 0308 	add.w	r3, r7, #8
 80075e4:	2200      	movs	r2, #0
 80075e6:	601a      	str	r2, [r3, #0]
 80075e8:	605a      	str	r2, [r3, #4]
 80075ea:	609a      	str	r2, [r3, #8]
 80075ec:	60da      	str	r2, [r3, #12]
 80075ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80075f0:	2300      	movs	r3, #0
 80075f2:	607b      	str	r3, [r7, #4]
 80075f4:	4b29      	ldr	r3, [pc, #164]	; (800769c <SystemClock_Config+0xd0>)
 80075f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f8:	4a28      	ldr	r2, [pc, #160]	; (800769c <SystemClock_Config+0xd0>)
 80075fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075fe:	6413      	str	r3, [r2, #64]	; 0x40
 8007600:	4b26      	ldr	r3, [pc, #152]	; (800769c <SystemClock_Config+0xd0>)
 8007602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007608:	607b      	str	r3, [r7, #4]
 800760a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800760c:	2300      	movs	r3, #0
 800760e:	603b      	str	r3, [r7, #0]
 8007610:	4b23      	ldr	r3, [pc, #140]	; (80076a0 <SystemClock_Config+0xd4>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a22      	ldr	r2, [pc, #136]	; (80076a0 <SystemClock_Config+0xd4>)
 8007616:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800761a:	6013      	str	r3, [r2, #0]
 800761c:	4b20      	ldr	r3, [pc, #128]	; (80076a0 <SystemClock_Config+0xd4>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007624:	603b      	str	r3, [r7, #0]
 8007626:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007628:	2302      	movs	r3, #2
 800762a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800762c:	2301      	movs	r3, #1
 800762e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007630:	2310      	movs	r3, #16
 8007632:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007634:	2302      	movs	r3, #2
 8007636:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007638:	2300      	movs	r3, #0
 800763a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800763c:	2310      	movs	r3, #16
 800763e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 320;
 8007640:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8007644:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007646:	2302      	movs	r3, #2
 8007648:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800764a:	2302      	movs	r3, #2
 800764c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800764e:	2302      	movs	r3, #2
 8007650:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007652:	f107 031c 	add.w	r3, r7, #28
 8007656:	4618      	mov	r0, r3
 8007658:	f7fb ff8a 	bl	8003570 <HAL_RCC_OscConfig>
 800765c:	4603      	mov	r3, r0
 800765e:	2b00      	cmp	r3, #0
 8007660:	d001      	beq.n	8007666 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8007662:	f000 f81f 	bl	80076a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007666:	230f      	movs	r3, #15
 8007668:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800766a:	2302      	movs	r3, #2
 800766c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800766e:	2300      	movs	r3, #0
 8007670:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007672:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007676:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007678:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800767c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800767e:	f107 0308 	add.w	r3, r7, #8
 8007682:	2105      	movs	r1, #5
 8007684:	4618      	mov	r0, r3
 8007686:	f7fb fcbd 	bl	8003004 <HAL_RCC_ClockConfig>
 800768a:	4603      	mov	r3, r0
 800768c:	2b00      	cmp	r3, #0
 800768e:	d001      	beq.n	8007694 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8007690:	f000 f808 	bl	80076a4 <Error_Handler>
  }
}
 8007694:	bf00      	nop
 8007696:	3750      	adds	r7, #80	; 0x50
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}
 800769c:	40023800 	.word	0x40023800
 80076a0:	40007000 	.word	0x40007000

080076a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80076a4:	b480      	push	{r7}
 80076a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80076a8:	bf00      	nop
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr
	...

080076b4 <setSVM_dq>:
volatile int sector_SVM = 0;



inline void setSVM_dq()
{
 80076b4:	b5b0      	push	{r4, r5, r7, lr}
 80076b6:	af00      	add	r7, sp, #0
	static float vect1, vect2;




	x = Vd_ref * cos_theta_re - Vq_ref * sin_theta_re;
 80076b8:	4bb8      	ldr	r3, [pc, #736]	; (800799c <setSVM_dq+0x2e8>)
 80076ba:	ed93 7a00 	vldr	s14, [r3]
 80076be:	4bb8      	ldr	r3, [pc, #736]	; (80079a0 <setSVM_dq+0x2ec>)
 80076c0:	edd3 7a00 	vldr	s15, [r3]
 80076c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80076c8:	4bb6      	ldr	r3, [pc, #728]	; (80079a4 <setSVM_dq+0x2f0>)
 80076ca:	edd3 6a00 	vldr	s13, [r3]
 80076ce:	4bb6      	ldr	r3, [pc, #728]	; (80079a8 <setSVM_dq+0x2f4>)
 80076d0:	edd3 7a00 	vldr	s15, [r3]
 80076d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80076d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80076dc:	4bb3      	ldr	r3, [pc, #716]	; (80079ac <setSVM_dq+0x2f8>)
 80076de:	edc3 7a00 	vstr	s15, [r3]
	y = Vd_ref * sin_theta_re + Vq_ref * cos_theta_re;
 80076e2:	4bae      	ldr	r3, [pc, #696]	; (800799c <setSVM_dq+0x2e8>)
 80076e4:	ed93 7a00 	vldr	s14, [r3]
 80076e8:	4baf      	ldr	r3, [pc, #700]	; (80079a8 <setSVM_dq+0x2f4>)
 80076ea:	edd3 7a00 	vldr	s15, [r3]
 80076ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80076f2:	4bac      	ldr	r3, [pc, #688]	; (80079a4 <setSVM_dq+0x2f0>)
 80076f4:	edd3 6a00 	vldr	s13, [r3]
 80076f8:	4ba9      	ldr	r3, [pc, #676]	; (80079a0 <setSVM_dq+0x2ec>)
 80076fa:	edd3 7a00 	vldr	s15, [r3]
 80076fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007702:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007706:	4baa      	ldr	r3, [pc, #680]	; (80079b0 <setSVM_dq+0x2fc>)
 8007708:	edc3 7a00 	vstr	s15, [r3]

	cross0 = refVector[0][0] * y - refVector[0][1] * x;
 800770c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007710:	4ba7      	ldr	r3, [pc, #668]	; (80079b0 <setSVM_dq+0x2fc>)
 8007712:	edd3 7a00 	vldr	s15, [r3]
 8007716:	ee27 7a27 	vmul.f32	s14, s14, s15
 800771a:	eddf 6aa6 	vldr	s13, [pc, #664]	; 80079b4 <setSVM_dq+0x300>
 800771e:	4ba3      	ldr	r3, [pc, #652]	; (80079ac <setSVM_dq+0x2f8>)
 8007720:	edd3 7a00 	vldr	s15, [r3]
 8007724:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007728:	ee77 7a67 	vsub.f32	s15, s14, s15
 800772c:	4ba2      	ldr	r3, [pc, #648]	; (80079b8 <setSVM_dq+0x304>)
 800772e:	edc3 7a00 	vstr	s15, [r3]
	cross1 = refVector[1][0] * y - refVector[1][1] * x;
 8007732:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8007736:	4b9e      	ldr	r3, [pc, #632]	; (80079b0 <setSVM_dq+0x2fc>)
 8007738:	edd3 7a00 	vldr	s15, [r3]
 800773c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007740:	eddf 6a9e 	vldr	s13, [pc, #632]	; 80079bc <setSVM_dq+0x308>
 8007744:	4b99      	ldr	r3, [pc, #612]	; (80079ac <setSVM_dq+0x2f8>)
 8007746:	edd3 7a00 	vldr	s15, [r3]
 800774a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800774e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007752:	4b9b      	ldr	r3, [pc, #620]	; (80079c0 <setSVM_dq+0x30c>)
 8007754:	edc3 7a00 	vstr	s15, [r3]

	if(cross0 >= 0)
 8007758:	4b97      	ldr	r3, [pc, #604]	; (80079b8 <setSVM_dq+0x304>)
 800775a:	edd3 7a00 	vldr	s15, [r3]
 800775e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007766:	db1e      	blt.n	80077a6 <setSVM_dq+0xf2>
	{
		if(cross1 <= 0)				sector_SVM = 0;
 8007768:	4b95      	ldr	r3, [pc, #596]	; (80079c0 <setSVM_dq+0x30c>)
 800776a:	edd3 7a00 	vldr	s15, [r3]
 800776e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007776:	d803      	bhi.n	8007780 <setSVM_dq+0xcc>
 8007778:	4b92      	ldr	r3, [pc, #584]	; (80079c4 <setSVM_dq+0x310>)
 800777a:	2200      	movs	r2, #0
 800777c:	601a      	str	r2, [r3, #0]
 800777e:	e030      	b.n	80077e2 <setSVM_dq+0x12e>
		else if(cross0 >= cross1)	sector_SVM = 1;
 8007780:	4b8d      	ldr	r3, [pc, #564]	; (80079b8 <setSVM_dq+0x304>)
 8007782:	ed93 7a00 	vldr	s14, [r3]
 8007786:	4b8e      	ldr	r3, [pc, #568]	; (80079c0 <setSVM_dq+0x30c>)
 8007788:	edd3 7a00 	vldr	s15, [r3]
 800778c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007794:	db03      	blt.n	800779e <setSVM_dq+0xea>
 8007796:	4b8b      	ldr	r3, [pc, #556]	; (80079c4 <setSVM_dq+0x310>)
 8007798:	2201      	movs	r2, #1
 800779a:	601a      	str	r2, [r3, #0]
 800779c:	e021      	b.n	80077e2 <setSVM_dq+0x12e>
		else						sector_SVM = 2;
 800779e:	4b89      	ldr	r3, [pc, #548]	; (80079c4 <setSVM_dq+0x310>)
 80077a0:	2202      	movs	r2, #2
 80077a2:	601a      	str	r2, [r3, #0]
 80077a4:	e01d      	b.n	80077e2 <setSVM_dq+0x12e>
	}
	else
	{
		if(cross1 >= 0)				sector_SVM = 3;
 80077a6:	4b86      	ldr	r3, [pc, #536]	; (80079c0 <setSVM_dq+0x30c>)
 80077a8:	edd3 7a00 	vldr	s15, [r3]
 80077ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80077b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077b4:	db03      	blt.n	80077be <setSVM_dq+0x10a>
 80077b6:	4b83      	ldr	r3, [pc, #524]	; (80079c4 <setSVM_dq+0x310>)
 80077b8:	2203      	movs	r2, #3
 80077ba:	601a      	str	r2, [r3, #0]
 80077bc:	e011      	b.n	80077e2 <setSVM_dq+0x12e>
		else if(cross0 <= cross1)	sector_SVM = 4;
 80077be:	4b7e      	ldr	r3, [pc, #504]	; (80079b8 <setSVM_dq+0x304>)
 80077c0:	ed93 7a00 	vldr	s14, [r3]
 80077c4:	4b7e      	ldr	r3, [pc, #504]	; (80079c0 <setSVM_dq+0x30c>)
 80077c6:	edd3 7a00 	vldr	s15, [r3]
 80077ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80077ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077d2:	d803      	bhi.n	80077dc <setSVM_dq+0x128>
 80077d4:	4b7b      	ldr	r3, [pc, #492]	; (80079c4 <setSVM_dq+0x310>)
 80077d6:	2204      	movs	r2, #4
 80077d8:	601a      	str	r2, [r3, #0]
 80077da:	e002      	b.n	80077e2 <setSVM_dq+0x12e>
		else						sector_SVM = 5;
 80077dc:	4b79      	ldr	r3, [pc, #484]	; (80079c4 <setSVM_dq+0x310>)
 80077de:	2205      	movs	r2, #5
 80077e0:	601a      	str	r2, [r3, #0]
	}

	x1 = refVector[sector_SVM][0];
 80077e2:	4b78      	ldr	r3, [pc, #480]	; (80079c4 <setSVM_dq+0x310>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a78      	ldr	r2, [pc, #480]	; (80079c8 <setSVM_dq+0x314>)
 80077e8:	00db      	lsls	r3, r3, #3
 80077ea:	4413      	add	r3, r2
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	4a77      	ldr	r2, [pc, #476]	; (80079cc <setSVM_dq+0x318>)
 80077f0:	6013      	str	r3, [r2, #0]
	y1 = refVector[sector_SVM][1];
 80077f2:	4b74      	ldr	r3, [pc, #464]	; (80079c4 <setSVM_dq+0x310>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a74      	ldr	r2, [pc, #464]	; (80079c8 <setSVM_dq+0x314>)
 80077f8:	00db      	lsls	r3, r3, #3
 80077fa:	4413      	add	r3, r2
 80077fc:	3304      	adds	r3, #4
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a73      	ldr	r2, [pc, #460]	; (80079d0 <setSVM_dq+0x31c>)
 8007802:	6013      	str	r3, [r2, #0]
	x2 = refVector[sector_SVM + 1][0];
 8007804:	4b6f      	ldr	r3, [pc, #444]	; (80079c4 <setSVM_dq+0x310>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	3301      	adds	r3, #1
 800780a:	4a6f      	ldr	r2, [pc, #444]	; (80079c8 <setSVM_dq+0x314>)
 800780c:	00db      	lsls	r3, r3, #3
 800780e:	4413      	add	r3, r2
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a70      	ldr	r2, [pc, #448]	; (80079d4 <setSVM_dq+0x320>)
 8007814:	6013      	str	r3, [r2, #0]
	y2 = refVector[sector_SVM + 1][1];
 8007816:	4b6b      	ldr	r3, [pc, #428]	; (80079c4 <setSVM_dq+0x310>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	3301      	adds	r3, #1
 800781c:	4a6a      	ldr	r2, [pc, #424]	; (80079c8 <setSVM_dq+0x314>)
 800781e:	00db      	lsls	r3, r3, #3
 8007820:	4413      	add	r3, r2
 8007822:	3304      	adds	r3, #4
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a6c      	ldr	r2, [pc, #432]	; (80079d8 <setSVM_dq+0x324>)
 8007828:	6013      	str	r3, [r2, #0]

	vect1 = (y2 * x - x2 * y) / ((x1 * y2 - y1 * x2) * Vdc);
 800782a:	4b6b      	ldr	r3, [pc, #428]	; (80079d8 <setSVM_dq+0x324>)
 800782c:	ed93 7a00 	vldr	s14, [r3]
 8007830:	4b5e      	ldr	r3, [pc, #376]	; (80079ac <setSVM_dq+0x2f8>)
 8007832:	edd3 7a00 	vldr	s15, [r3]
 8007836:	ee27 7a27 	vmul.f32	s14, s14, s15
 800783a:	4b66      	ldr	r3, [pc, #408]	; (80079d4 <setSVM_dq+0x320>)
 800783c:	edd3 6a00 	vldr	s13, [r3]
 8007840:	4b5b      	ldr	r3, [pc, #364]	; (80079b0 <setSVM_dq+0x2fc>)
 8007842:	edd3 7a00 	vldr	s15, [r3]
 8007846:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800784a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800784e:	4b5f      	ldr	r3, [pc, #380]	; (80079cc <setSVM_dq+0x318>)
 8007850:	ed93 7a00 	vldr	s14, [r3]
 8007854:	4b60      	ldr	r3, [pc, #384]	; (80079d8 <setSVM_dq+0x324>)
 8007856:	edd3 7a00 	vldr	s15, [r3]
 800785a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800785e:	4b5c      	ldr	r3, [pc, #368]	; (80079d0 <setSVM_dq+0x31c>)
 8007860:	ed93 6a00 	vldr	s12, [r3]
 8007864:	4b5b      	ldr	r3, [pc, #364]	; (80079d4 <setSVM_dq+0x320>)
 8007866:	edd3 7a00 	vldr	s15, [r3]
 800786a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800786e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007872:	4b5a      	ldr	r3, [pc, #360]	; (80079dc <setSVM_dq+0x328>)
 8007874:	edd3 7a00 	vldr	s15, [r3]
 8007878:	ee27 7a27 	vmul.f32	s14, s14, s15
 800787c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007880:	4b57      	ldr	r3, [pc, #348]	; (80079e0 <setSVM_dq+0x32c>)
 8007882:	edc3 7a00 	vstr	s15, [r3]
	vect2 = (-y1 * x + x1 * y) / ((x1 * y2 - y1 * x2) * Vdc);
 8007886:	4b52      	ldr	r3, [pc, #328]	; (80079d0 <setSVM_dq+0x31c>)
 8007888:	edd3 7a00 	vldr	s15, [r3]
 800788c:	eeb1 7a67 	vneg.f32	s14, s15
 8007890:	4b46      	ldr	r3, [pc, #280]	; (80079ac <setSVM_dq+0x2f8>)
 8007892:	edd3 7a00 	vldr	s15, [r3]
 8007896:	ee27 7a27 	vmul.f32	s14, s14, s15
 800789a:	4b4c      	ldr	r3, [pc, #304]	; (80079cc <setSVM_dq+0x318>)
 800789c:	edd3 6a00 	vldr	s13, [r3]
 80078a0:	4b43      	ldr	r3, [pc, #268]	; (80079b0 <setSVM_dq+0x2fc>)
 80078a2:	edd3 7a00 	vldr	s15, [r3]
 80078a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80078aa:	ee77 6a27 	vadd.f32	s13, s14, s15
 80078ae:	4b47      	ldr	r3, [pc, #284]	; (80079cc <setSVM_dq+0x318>)
 80078b0:	ed93 7a00 	vldr	s14, [r3]
 80078b4:	4b48      	ldr	r3, [pc, #288]	; (80079d8 <setSVM_dq+0x324>)
 80078b6:	edd3 7a00 	vldr	s15, [r3]
 80078ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80078be:	4b44      	ldr	r3, [pc, #272]	; (80079d0 <setSVM_dq+0x31c>)
 80078c0:	ed93 6a00 	vldr	s12, [r3]
 80078c4:	4b43      	ldr	r3, [pc, #268]	; (80079d4 <setSVM_dq+0x320>)
 80078c6:	edd3 7a00 	vldr	s15, [r3]
 80078ca:	ee66 7a27 	vmul.f32	s15, s12, s15
 80078ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80078d2:	4b42      	ldr	r3, [pc, #264]	; (80079dc <setSVM_dq+0x328>)
 80078d4:	edd3 7a00 	vldr	s15, [r3]
 80078d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80078dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078e0:	4b40      	ldr	r3, [pc, #256]	; (80079e4 <setSVM_dq+0x330>)
 80078e2:	edc3 7a00 	vstr	s15, [r3]

	switch(sector_SVM)
 80078e6:	4b37      	ldr	r3, [pc, #220]	; (80079c4 <setSVM_dq+0x310>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	2b05      	cmp	r3, #5
 80078ec:	f200 81e0 	bhi.w	8007cb0 <setSVM_dq+0x5fc>
 80078f0:	a201      	add	r2, pc, #4	; (adr r2, 80078f8 <setSVM_dq+0x244>)
 80078f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078f6:	bf00      	nop
 80078f8:	08007911 	.word	0x08007911
 80078fc:	080079f5 	.word	0x080079f5
 8007900:	08007a81 	.word	0x08007a81
 8007904:	08007b0d 	.word	0x08007b0d
 8007908:	08007b99 	.word	0x08007b99
 800790c:	08007c25 	.word	0x08007c25
	{
	case 0: duty[2] = (1.0 - vect1 - vect2) * 0.5f; 	duty[1] = duty[2] + vect2; 	duty[0] = duty[1] + vect1;  break;
 8007910:	4b33      	ldr	r3, [pc, #204]	; (80079e0 <setSVM_dq+0x32c>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4618      	mov	r0, r3
 8007916:	f7f8 fe2f 	bl	8000578 <__aeabi_f2d>
 800791a:	4603      	mov	r3, r0
 800791c:	460c      	mov	r4, r1
 800791e:	461a      	mov	r2, r3
 8007920:	4623      	mov	r3, r4
 8007922:	f04f 0000 	mov.w	r0, #0
 8007926:	4930      	ldr	r1, [pc, #192]	; (80079e8 <setSVM_dq+0x334>)
 8007928:	f7f8 fcc6 	bl	80002b8 <__aeabi_dsub>
 800792c:	4603      	mov	r3, r0
 800792e:	460c      	mov	r4, r1
 8007930:	4625      	mov	r5, r4
 8007932:	461c      	mov	r4, r3
 8007934:	4b2b      	ldr	r3, [pc, #172]	; (80079e4 <setSVM_dq+0x330>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4618      	mov	r0, r3
 800793a:	f7f8 fe1d 	bl	8000578 <__aeabi_f2d>
 800793e:	4602      	mov	r2, r0
 8007940:	460b      	mov	r3, r1
 8007942:	4620      	mov	r0, r4
 8007944:	4629      	mov	r1, r5
 8007946:	f7f8 fcb7 	bl	80002b8 <__aeabi_dsub>
 800794a:	4603      	mov	r3, r0
 800794c:	460c      	mov	r4, r1
 800794e:	4618      	mov	r0, r3
 8007950:	4621      	mov	r1, r4
 8007952:	f04f 0200 	mov.w	r2, #0
 8007956:	4b25      	ldr	r3, [pc, #148]	; (80079ec <setSVM_dq+0x338>)
 8007958:	f7f8 fe66 	bl	8000628 <__aeabi_dmul>
 800795c:	4603      	mov	r3, r0
 800795e:	460c      	mov	r4, r1
 8007960:	4618      	mov	r0, r3
 8007962:	4621      	mov	r1, r4
 8007964:	f7f9 f8fa 	bl	8000b5c <__aeabi_d2f>
 8007968:	4602      	mov	r2, r0
 800796a:	4b21      	ldr	r3, [pc, #132]	; (80079f0 <setSVM_dq+0x33c>)
 800796c:	609a      	str	r2, [r3, #8]
 800796e:	4b20      	ldr	r3, [pc, #128]	; (80079f0 <setSVM_dq+0x33c>)
 8007970:	ed93 7a02 	vldr	s14, [r3, #8]
 8007974:	4b1b      	ldr	r3, [pc, #108]	; (80079e4 <setSVM_dq+0x330>)
 8007976:	edd3 7a00 	vldr	s15, [r3]
 800797a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800797e:	4b1c      	ldr	r3, [pc, #112]	; (80079f0 <setSVM_dq+0x33c>)
 8007980:	edc3 7a01 	vstr	s15, [r3, #4]
 8007984:	4b1a      	ldr	r3, [pc, #104]	; (80079f0 <setSVM_dq+0x33c>)
 8007986:	ed93 7a01 	vldr	s14, [r3, #4]
 800798a:	4b15      	ldr	r3, [pc, #84]	; (80079e0 <setSVM_dq+0x32c>)
 800798c:	edd3 7a00 	vldr	s15, [r3]
 8007990:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007994:	4b16      	ldr	r3, [pc, #88]	; (80079f0 <setSVM_dq+0x33c>)
 8007996:	edc3 7a00 	vstr	s15, [r3]
 800799a:	e189      	b.n	8007cb0 <setSVM_dq+0x5fc>
 800799c:	20000188 	.word	0x20000188
 80079a0:	20000034 	.word	0x20000034
 80079a4:	2000018c 	.word	0x2000018c
 80079a8:	200001e0 	.word	0x200001e0
 80079ac:	20000194 	.word	0x20000194
 80079b0:	20000198 	.word	0x20000198
 80079b4:	00000000 	.word	0x00000000
 80079b8:	2000019c 	.word	0x2000019c
 80079bc:	3f5db22d 	.word	0x3f5db22d
 80079c0:	200001a0 	.word	0x200001a0
 80079c4:	20000190 	.word	0x20000190
 80079c8:	08009e78 	.word	0x08009e78
 80079cc:	200001a4 	.word	0x200001a4
 80079d0:	200001a8 	.word	0x200001a8
 80079d4:	200001ac 	.word	0x200001ac
 80079d8:	200001b0 	.word	0x200001b0
 80079dc:	20000030 	.word	0x20000030
 80079e0:	200001b4 	.word	0x200001b4
 80079e4:	200001b8 	.word	0x200001b8
 80079e8:	3ff00000 	.word	0x3ff00000
 80079ec:	3fe00000 	.word	0x3fe00000
 80079f0:	200001bc 	.word	0x200001bc
	case 1: duty[2] = (1.0 - vect1 - vect2) * 0.5f; 	duty[0] = duty[2] + vect1; 	duty[1] = duty[0] + vect2; 	break;
 80079f4:	4bc3      	ldr	r3, [pc, #780]	; (8007d04 <setSVM_dq+0x650>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4618      	mov	r0, r3
 80079fa:	f7f8 fdbd 	bl	8000578 <__aeabi_f2d>
 80079fe:	4603      	mov	r3, r0
 8007a00:	460c      	mov	r4, r1
 8007a02:	461a      	mov	r2, r3
 8007a04:	4623      	mov	r3, r4
 8007a06:	f04f 0000 	mov.w	r0, #0
 8007a0a:	49bf      	ldr	r1, [pc, #764]	; (8007d08 <setSVM_dq+0x654>)
 8007a0c:	f7f8 fc54 	bl	80002b8 <__aeabi_dsub>
 8007a10:	4603      	mov	r3, r0
 8007a12:	460c      	mov	r4, r1
 8007a14:	4625      	mov	r5, r4
 8007a16:	461c      	mov	r4, r3
 8007a18:	4bbc      	ldr	r3, [pc, #752]	; (8007d0c <setSVM_dq+0x658>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f7f8 fdab 	bl	8000578 <__aeabi_f2d>
 8007a22:	4602      	mov	r2, r0
 8007a24:	460b      	mov	r3, r1
 8007a26:	4620      	mov	r0, r4
 8007a28:	4629      	mov	r1, r5
 8007a2a:	f7f8 fc45 	bl	80002b8 <__aeabi_dsub>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	460c      	mov	r4, r1
 8007a32:	4618      	mov	r0, r3
 8007a34:	4621      	mov	r1, r4
 8007a36:	f04f 0200 	mov.w	r2, #0
 8007a3a:	4bb5      	ldr	r3, [pc, #724]	; (8007d10 <setSVM_dq+0x65c>)
 8007a3c:	f7f8 fdf4 	bl	8000628 <__aeabi_dmul>
 8007a40:	4603      	mov	r3, r0
 8007a42:	460c      	mov	r4, r1
 8007a44:	4618      	mov	r0, r3
 8007a46:	4621      	mov	r1, r4
 8007a48:	f7f9 f888 	bl	8000b5c <__aeabi_d2f>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	4bb1      	ldr	r3, [pc, #708]	; (8007d14 <setSVM_dq+0x660>)
 8007a50:	609a      	str	r2, [r3, #8]
 8007a52:	4bb0      	ldr	r3, [pc, #704]	; (8007d14 <setSVM_dq+0x660>)
 8007a54:	ed93 7a02 	vldr	s14, [r3, #8]
 8007a58:	4baa      	ldr	r3, [pc, #680]	; (8007d04 <setSVM_dq+0x650>)
 8007a5a:	edd3 7a00 	vldr	s15, [r3]
 8007a5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007a62:	4bac      	ldr	r3, [pc, #688]	; (8007d14 <setSVM_dq+0x660>)
 8007a64:	edc3 7a00 	vstr	s15, [r3]
 8007a68:	4baa      	ldr	r3, [pc, #680]	; (8007d14 <setSVM_dq+0x660>)
 8007a6a:	ed93 7a00 	vldr	s14, [r3]
 8007a6e:	4ba7      	ldr	r3, [pc, #668]	; (8007d0c <setSVM_dq+0x658>)
 8007a70:	edd3 7a00 	vldr	s15, [r3]
 8007a74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007a78:	4ba6      	ldr	r3, [pc, #664]	; (8007d14 <setSVM_dq+0x660>)
 8007a7a:	edc3 7a01 	vstr	s15, [r3, #4]
 8007a7e:	e117      	b.n	8007cb0 <setSVM_dq+0x5fc>
	case 2: duty[0] = (1.0 - vect1 - vect2) * 0.5f; 	duty[2] = duty[0] + vect2; 	duty[1] = duty[2] + vect1; 	break;
 8007a80:	4ba0      	ldr	r3, [pc, #640]	; (8007d04 <setSVM_dq+0x650>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4618      	mov	r0, r3
 8007a86:	f7f8 fd77 	bl	8000578 <__aeabi_f2d>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	460c      	mov	r4, r1
 8007a8e:	461a      	mov	r2, r3
 8007a90:	4623      	mov	r3, r4
 8007a92:	f04f 0000 	mov.w	r0, #0
 8007a96:	499c      	ldr	r1, [pc, #624]	; (8007d08 <setSVM_dq+0x654>)
 8007a98:	f7f8 fc0e 	bl	80002b8 <__aeabi_dsub>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	460c      	mov	r4, r1
 8007aa0:	4625      	mov	r5, r4
 8007aa2:	461c      	mov	r4, r3
 8007aa4:	4b99      	ldr	r3, [pc, #612]	; (8007d0c <setSVM_dq+0x658>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f7f8 fd65 	bl	8000578 <__aeabi_f2d>
 8007aae:	4602      	mov	r2, r0
 8007ab0:	460b      	mov	r3, r1
 8007ab2:	4620      	mov	r0, r4
 8007ab4:	4629      	mov	r1, r5
 8007ab6:	f7f8 fbff 	bl	80002b8 <__aeabi_dsub>
 8007aba:	4603      	mov	r3, r0
 8007abc:	460c      	mov	r4, r1
 8007abe:	4618      	mov	r0, r3
 8007ac0:	4621      	mov	r1, r4
 8007ac2:	f04f 0200 	mov.w	r2, #0
 8007ac6:	4b92      	ldr	r3, [pc, #584]	; (8007d10 <setSVM_dq+0x65c>)
 8007ac8:	f7f8 fdae 	bl	8000628 <__aeabi_dmul>
 8007acc:	4603      	mov	r3, r0
 8007ace:	460c      	mov	r4, r1
 8007ad0:	4618      	mov	r0, r3
 8007ad2:	4621      	mov	r1, r4
 8007ad4:	f7f9 f842 	bl	8000b5c <__aeabi_d2f>
 8007ad8:	4602      	mov	r2, r0
 8007ada:	4b8e      	ldr	r3, [pc, #568]	; (8007d14 <setSVM_dq+0x660>)
 8007adc:	601a      	str	r2, [r3, #0]
 8007ade:	4b8d      	ldr	r3, [pc, #564]	; (8007d14 <setSVM_dq+0x660>)
 8007ae0:	ed93 7a00 	vldr	s14, [r3]
 8007ae4:	4b89      	ldr	r3, [pc, #548]	; (8007d0c <setSVM_dq+0x658>)
 8007ae6:	edd3 7a00 	vldr	s15, [r3]
 8007aea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007aee:	4b89      	ldr	r3, [pc, #548]	; (8007d14 <setSVM_dq+0x660>)
 8007af0:	edc3 7a02 	vstr	s15, [r3, #8]
 8007af4:	4b87      	ldr	r3, [pc, #540]	; (8007d14 <setSVM_dq+0x660>)
 8007af6:	ed93 7a02 	vldr	s14, [r3, #8]
 8007afa:	4b82      	ldr	r3, [pc, #520]	; (8007d04 <setSVM_dq+0x650>)
 8007afc:	edd3 7a00 	vldr	s15, [r3]
 8007b00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007b04:	4b83      	ldr	r3, [pc, #524]	; (8007d14 <setSVM_dq+0x660>)
 8007b06:	edc3 7a01 	vstr	s15, [r3, #4]
 8007b0a:	e0d1      	b.n	8007cb0 <setSVM_dq+0x5fc>
	case 3: duty[0] = (1.0 - vect1 - vect2) * 0.5f; 	duty[1] = duty[0] + vect1; 	duty[2] = duty[1] + vect2; 	break;
 8007b0c:	4b7d      	ldr	r3, [pc, #500]	; (8007d04 <setSVM_dq+0x650>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4618      	mov	r0, r3
 8007b12:	f7f8 fd31 	bl	8000578 <__aeabi_f2d>
 8007b16:	4603      	mov	r3, r0
 8007b18:	460c      	mov	r4, r1
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	4623      	mov	r3, r4
 8007b1e:	f04f 0000 	mov.w	r0, #0
 8007b22:	4979      	ldr	r1, [pc, #484]	; (8007d08 <setSVM_dq+0x654>)
 8007b24:	f7f8 fbc8 	bl	80002b8 <__aeabi_dsub>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	460c      	mov	r4, r1
 8007b2c:	4625      	mov	r5, r4
 8007b2e:	461c      	mov	r4, r3
 8007b30:	4b76      	ldr	r3, [pc, #472]	; (8007d0c <setSVM_dq+0x658>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4618      	mov	r0, r3
 8007b36:	f7f8 fd1f 	bl	8000578 <__aeabi_f2d>
 8007b3a:	4602      	mov	r2, r0
 8007b3c:	460b      	mov	r3, r1
 8007b3e:	4620      	mov	r0, r4
 8007b40:	4629      	mov	r1, r5
 8007b42:	f7f8 fbb9 	bl	80002b8 <__aeabi_dsub>
 8007b46:	4603      	mov	r3, r0
 8007b48:	460c      	mov	r4, r1
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	4621      	mov	r1, r4
 8007b4e:	f04f 0200 	mov.w	r2, #0
 8007b52:	4b6f      	ldr	r3, [pc, #444]	; (8007d10 <setSVM_dq+0x65c>)
 8007b54:	f7f8 fd68 	bl	8000628 <__aeabi_dmul>
 8007b58:	4603      	mov	r3, r0
 8007b5a:	460c      	mov	r4, r1
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	4621      	mov	r1, r4
 8007b60:	f7f8 fffc 	bl	8000b5c <__aeabi_d2f>
 8007b64:	4602      	mov	r2, r0
 8007b66:	4b6b      	ldr	r3, [pc, #428]	; (8007d14 <setSVM_dq+0x660>)
 8007b68:	601a      	str	r2, [r3, #0]
 8007b6a:	4b6a      	ldr	r3, [pc, #424]	; (8007d14 <setSVM_dq+0x660>)
 8007b6c:	ed93 7a00 	vldr	s14, [r3]
 8007b70:	4b64      	ldr	r3, [pc, #400]	; (8007d04 <setSVM_dq+0x650>)
 8007b72:	edd3 7a00 	vldr	s15, [r3]
 8007b76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007b7a:	4b66      	ldr	r3, [pc, #408]	; (8007d14 <setSVM_dq+0x660>)
 8007b7c:	edc3 7a01 	vstr	s15, [r3, #4]
 8007b80:	4b64      	ldr	r3, [pc, #400]	; (8007d14 <setSVM_dq+0x660>)
 8007b82:	ed93 7a01 	vldr	s14, [r3, #4]
 8007b86:	4b61      	ldr	r3, [pc, #388]	; (8007d0c <setSVM_dq+0x658>)
 8007b88:	edd3 7a00 	vldr	s15, [r3]
 8007b8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007b90:	4b60      	ldr	r3, [pc, #384]	; (8007d14 <setSVM_dq+0x660>)
 8007b92:	edc3 7a02 	vstr	s15, [r3, #8]
 8007b96:	e08b      	b.n	8007cb0 <setSVM_dq+0x5fc>
	case 4: duty[1] = (1.0 - vect1 - vect2) * 0.5f; 	duty[0] = duty[1] + vect2; 	duty[2] = duty[0] + vect1; 	break;
 8007b98:	4b5a      	ldr	r3, [pc, #360]	; (8007d04 <setSVM_dq+0x650>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f7f8 fceb 	bl	8000578 <__aeabi_f2d>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	460c      	mov	r4, r1
 8007ba6:	461a      	mov	r2, r3
 8007ba8:	4623      	mov	r3, r4
 8007baa:	f04f 0000 	mov.w	r0, #0
 8007bae:	4956      	ldr	r1, [pc, #344]	; (8007d08 <setSVM_dq+0x654>)
 8007bb0:	f7f8 fb82 	bl	80002b8 <__aeabi_dsub>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	460c      	mov	r4, r1
 8007bb8:	4625      	mov	r5, r4
 8007bba:	461c      	mov	r4, r3
 8007bbc:	4b53      	ldr	r3, [pc, #332]	; (8007d0c <setSVM_dq+0x658>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f7f8 fcd9 	bl	8000578 <__aeabi_f2d>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	460b      	mov	r3, r1
 8007bca:	4620      	mov	r0, r4
 8007bcc:	4629      	mov	r1, r5
 8007bce:	f7f8 fb73 	bl	80002b8 <__aeabi_dsub>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	460c      	mov	r4, r1
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	4621      	mov	r1, r4
 8007bda:	f04f 0200 	mov.w	r2, #0
 8007bde:	4b4c      	ldr	r3, [pc, #304]	; (8007d10 <setSVM_dq+0x65c>)
 8007be0:	f7f8 fd22 	bl	8000628 <__aeabi_dmul>
 8007be4:	4603      	mov	r3, r0
 8007be6:	460c      	mov	r4, r1
 8007be8:	4618      	mov	r0, r3
 8007bea:	4621      	mov	r1, r4
 8007bec:	f7f8 ffb6 	bl	8000b5c <__aeabi_d2f>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	4b48      	ldr	r3, [pc, #288]	; (8007d14 <setSVM_dq+0x660>)
 8007bf4:	605a      	str	r2, [r3, #4]
 8007bf6:	4b47      	ldr	r3, [pc, #284]	; (8007d14 <setSVM_dq+0x660>)
 8007bf8:	ed93 7a01 	vldr	s14, [r3, #4]
 8007bfc:	4b43      	ldr	r3, [pc, #268]	; (8007d0c <setSVM_dq+0x658>)
 8007bfe:	edd3 7a00 	vldr	s15, [r3]
 8007c02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007c06:	4b43      	ldr	r3, [pc, #268]	; (8007d14 <setSVM_dq+0x660>)
 8007c08:	edc3 7a00 	vstr	s15, [r3]
 8007c0c:	4b41      	ldr	r3, [pc, #260]	; (8007d14 <setSVM_dq+0x660>)
 8007c0e:	ed93 7a00 	vldr	s14, [r3]
 8007c12:	4b3c      	ldr	r3, [pc, #240]	; (8007d04 <setSVM_dq+0x650>)
 8007c14:	edd3 7a00 	vldr	s15, [r3]
 8007c18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007c1c:	4b3d      	ldr	r3, [pc, #244]	; (8007d14 <setSVM_dq+0x660>)
 8007c1e:	edc3 7a02 	vstr	s15, [r3, #8]
 8007c22:	e045      	b.n	8007cb0 <setSVM_dq+0x5fc>
	case 5: duty[1] = (1.0 - vect1 - vect2) * 0.5f; 	duty[2] = duty[1] + vect1; 	duty[0] = duty[2] + vect2; 	break;
 8007c24:	4b37      	ldr	r3, [pc, #220]	; (8007d04 <setSVM_dq+0x650>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f7f8 fca5 	bl	8000578 <__aeabi_f2d>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	460c      	mov	r4, r1
 8007c32:	461a      	mov	r2, r3
 8007c34:	4623      	mov	r3, r4
 8007c36:	f04f 0000 	mov.w	r0, #0
 8007c3a:	4933      	ldr	r1, [pc, #204]	; (8007d08 <setSVM_dq+0x654>)
 8007c3c:	f7f8 fb3c 	bl	80002b8 <__aeabi_dsub>
 8007c40:	4603      	mov	r3, r0
 8007c42:	460c      	mov	r4, r1
 8007c44:	4625      	mov	r5, r4
 8007c46:	461c      	mov	r4, r3
 8007c48:	4b30      	ldr	r3, [pc, #192]	; (8007d0c <setSVM_dq+0x658>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f7f8 fc93 	bl	8000578 <__aeabi_f2d>
 8007c52:	4602      	mov	r2, r0
 8007c54:	460b      	mov	r3, r1
 8007c56:	4620      	mov	r0, r4
 8007c58:	4629      	mov	r1, r5
 8007c5a:	f7f8 fb2d 	bl	80002b8 <__aeabi_dsub>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	460c      	mov	r4, r1
 8007c62:	4618      	mov	r0, r3
 8007c64:	4621      	mov	r1, r4
 8007c66:	f04f 0200 	mov.w	r2, #0
 8007c6a:	4b29      	ldr	r3, [pc, #164]	; (8007d10 <setSVM_dq+0x65c>)
 8007c6c:	f7f8 fcdc 	bl	8000628 <__aeabi_dmul>
 8007c70:	4603      	mov	r3, r0
 8007c72:	460c      	mov	r4, r1
 8007c74:	4618      	mov	r0, r3
 8007c76:	4621      	mov	r1, r4
 8007c78:	f7f8 ff70 	bl	8000b5c <__aeabi_d2f>
 8007c7c:	4602      	mov	r2, r0
 8007c7e:	4b25      	ldr	r3, [pc, #148]	; (8007d14 <setSVM_dq+0x660>)
 8007c80:	605a      	str	r2, [r3, #4]
 8007c82:	4b24      	ldr	r3, [pc, #144]	; (8007d14 <setSVM_dq+0x660>)
 8007c84:	ed93 7a01 	vldr	s14, [r3, #4]
 8007c88:	4b1e      	ldr	r3, [pc, #120]	; (8007d04 <setSVM_dq+0x650>)
 8007c8a:	edd3 7a00 	vldr	s15, [r3]
 8007c8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007c92:	4b20      	ldr	r3, [pc, #128]	; (8007d14 <setSVM_dq+0x660>)
 8007c94:	edc3 7a02 	vstr	s15, [r3, #8]
 8007c98:	4b1e      	ldr	r3, [pc, #120]	; (8007d14 <setSVM_dq+0x660>)
 8007c9a:	ed93 7a02 	vldr	s14, [r3, #8]
 8007c9e:	4b1b      	ldr	r3, [pc, #108]	; (8007d0c <setSVM_dq+0x658>)
 8007ca0:	edd3 7a00 	vldr	s15, [r3]
 8007ca4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007ca8:	4b1a      	ldr	r3, [pc, #104]	; (8007d14 <setSVM_dq+0x660>)
 8007caa:	edc3 7a00 	vstr	s15, [r3]
 8007cae:	bf00      	nop
	}


	if(duty[0] < -1.0f) duty[0] = -1.0f; else if (duty[0] > 1.0f) duty[0] = 1.0f;
 8007cb0:	4b18      	ldr	r3, [pc, #96]	; (8007d14 <setSVM_dq+0x660>)
 8007cb2:	edd3 7a00 	vldr	s15, [r3]
 8007cb6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007cba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007cbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cc2:	d503      	bpl.n	8007ccc <setSVM_dq+0x618>
 8007cc4:	4b13      	ldr	r3, [pc, #76]	; (8007d14 <setSVM_dq+0x660>)
 8007cc6:	4a14      	ldr	r2, [pc, #80]	; (8007d18 <setSVM_dq+0x664>)
 8007cc8:	601a      	str	r2, [r3, #0]
 8007cca:	e00d      	b.n	8007ce8 <setSVM_dq+0x634>
 8007ccc:	4b11      	ldr	r3, [pc, #68]	; (8007d14 <setSVM_dq+0x660>)
 8007cce:	edd3 7a00 	vldr	s15, [r3]
 8007cd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007cd6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cde:	dd03      	ble.n	8007ce8 <setSVM_dq+0x634>
 8007ce0:	4b0c      	ldr	r3, [pc, #48]	; (8007d14 <setSVM_dq+0x660>)
 8007ce2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007ce6:	601a      	str	r2, [r3, #0]
	if(duty[1] < -1.0f) duty[1] = -1.0f; else if (duty[1] > 1.0f) duty[1] = 1.0f;
 8007ce8:	4b0a      	ldr	r3, [pc, #40]	; (8007d14 <setSVM_dq+0x660>)
 8007cea:	edd3 7a01 	vldr	s15, [r3, #4]
 8007cee:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007cf2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cfa:	d50f      	bpl.n	8007d1c <setSVM_dq+0x668>
 8007cfc:	4b05      	ldr	r3, [pc, #20]	; (8007d14 <setSVM_dq+0x660>)
 8007cfe:	4a06      	ldr	r2, [pc, #24]	; (8007d18 <setSVM_dq+0x664>)
 8007d00:	605a      	str	r2, [r3, #4]
 8007d02:	e019      	b.n	8007d38 <setSVM_dq+0x684>
 8007d04:	200001b4 	.word	0x200001b4
 8007d08:	3ff00000 	.word	0x3ff00000
 8007d0c:	200001b8 	.word	0x200001b8
 8007d10:	3fe00000 	.word	0x3fe00000
 8007d14:	200001bc 	.word	0x200001bc
 8007d18:	bf800000 	.word	0xbf800000
 8007d1c:	4b35      	ldr	r3, [pc, #212]	; (8007df4 <setSVM_dq+0x740>)
 8007d1e:	edd3 7a01 	vldr	s15, [r3, #4]
 8007d22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d2e:	dd03      	ble.n	8007d38 <setSVM_dq+0x684>
 8007d30:	4b30      	ldr	r3, [pc, #192]	; (8007df4 <setSVM_dq+0x740>)
 8007d32:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007d36:	605a      	str	r2, [r3, #4]
	if(duty[2] < -1.0f) duty[2] = -1.0f; else if (duty[2] > 1.0f) duty[2] = 1.0f;
 8007d38:	4b2e      	ldr	r3, [pc, #184]	; (8007df4 <setSVM_dq+0x740>)
 8007d3a:	edd3 7a02 	vldr	s15, [r3, #8]
 8007d3e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8007d42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d4a:	d503      	bpl.n	8007d54 <setSVM_dq+0x6a0>
 8007d4c:	4b29      	ldr	r3, [pc, #164]	; (8007df4 <setSVM_dq+0x740>)
 8007d4e:	4a2a      	ldr	r2, [pc, #168]	; (8007df8 <setSVM_dq+0x744>)
 8007d50:	609a      	str	r2, [r3, #8]
 8007d52:	e00d      	b.n	8007d70 <setSVM_dq+0x6bc>
 8007d54:	4b27      	ldr	r3, [pc, #156]	; (8007df4 <setSVM_dq+0x740>)
 8007d56:	edd3 7a02 	vldr	s15, [r3, #8]
 8007d5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d66:	dd03      	ble.n	8007d70 <setSVM_dq+0x6bc>
 8007d68:	4b22      	ldr	r3, [pc, #136]	; (8007df4 <setSVM_dq+0x740>)
 8007d6a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8007d6e:	609a      	str	r2, [r3, #8]

	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, PWM_RESOL * (1.0f - (amp_u = duty[0])));
 8007d70:	4b20      	ldr	r3, [pc, #128]	; (8007df4 <setSVM_dq+0x740>)
 8007d72:	edd3 7a00 	vldr	s15, [r3]
 8007d76:	4b21      	ldr	r3, [pc, #132]	; (8007dfc <setSVM_dq+0x748>)
 8007d78:	edc3 7a00 	vstr	s15, [r3]
 8007d7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d84:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8007e00 <setSVM_dq+0x74c>
 8007d88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007d8c:	4b1d      	ldr	r3, [pc, #116]	; (8007e04 <setSVM_dq+0x750>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d94:	ee17 2a90 	vmov	r2, s15
 8007d98:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, PWM_RESOL * (1.0f - (amp_v = duty[1])));
 8007d9a:	4b16      	ldr	r3, [pc, #88]	; (8007df4 <setSVM_dq+0x740>)
 8007d9c:	edd3 7a01 	vldr	s15, [r3, #4]
 8007da0:	4b19      	ldr	r3, [pc, #100]	; (8007e08 <setSVM_dq+0x754>)
 8007da2:	edc3 7a00 	vstr	s15, [r3]
 8007da6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007daa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007dae:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8007e00 <setSVM_dq+0x74c>
 8007db2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007db6:	4b13      	ldr	r3, [pc, #76]	; (8007e04 <setSVM_dq+0x750>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007dbe:	ee17 2a90 	vmov	r2, s15
 8007dc2:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, PWM_RESOL * (1.0f - (amp_w = duty[2])));
 8007dc4:	4b0b      	ldr	r3, [pc, #44]	; (8007df4 <setSVM_dq+0x740>)
 8007dc6:	edd3 7a02 	vldr	s15, [r3, #8]
 8007dca:	4b10      	ldr	r3, [pc, #64]	; (8007e0c <setSVM_dq+0x758>)
 8007dcc:	edc3 7a00 	vstr	s15, [r3]
 8007dd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007dd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007dd8:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8007e00 <setSVM_dq+0x74c>
 8007ddc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007de0:	4b08      	ldr	r3, [pc, #32]	; (8007e04 <setSVM_dq+0x750>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007de8:	ee17 2a90 	vmov	r2, s15
 8007dec:	63da      	str	r2, [r3, #60]	; 0x3c


	return;
 8007dee:	bf00      	nop
}
 8007df0:	bdb0      	pop	{r4, r5, r7, pc}
 8007df2:	bf00      	nop
 8007df4:	200001bc 	.word	0x200001bc
 8007df8:	bf800000 	.word	0xbf800000
 8007dfc:	200001ec 	.word	0x200001ec
 8007e00:	45fa0000 	.word	0x45fa0000
 8007e04:	20000538 	.word	0x20000538
 8007e08:	200001f0 	.word	0x200001f0
 8007e0c:	200001f4 	.word	0x200001f4

08007e10 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8007e14:	4b18      	ldr	r3, [pc, #96]	; (8007e78 <MX_SPI2_Init+0x68>)
 8007e16:	4a19      	ldr	r2, [pc, #100]	; (8007e7c <MX_SPI2_Init+0x6c>)
 8007e18:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8007e1a:	4b17      	ldr	r3, [pc, #92]	; (8007e78 <MX_SPI2_Init+0x68>)
 8007e1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007e20:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8007e22:	4b15      	ldr	r3, [pc, #84]	; (8007e78 <MX_SPI2_Init+0x68>)
 8007e24:	2200      	movs	r2, #0
 8007e26:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8007e28:	4b13      	ldr	r3, [pc, #76]	; (8007e78 <MX_SPI2_Init+0x68>)
 8007e2a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e2e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007e30:	4b11      	ldr	r3, [pc, #68]	; (8007e78 <MX_SPI2_Init+0x68>)
 8007e32:	2200      	movs	r2, #0
 8007e34:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8007e36:	4b10      	ldr	r3, [pc, #64]	; (8007e78 <MX_SPI2_Init+0x68>)
 8007e38:	2201      	movs	r2, #1
 8007e3a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8007e3c:	4b0e      	ldr	r3, [pc, #56]	; (8007e78 <MX_SPI2_Init+0x68>)
 8007e3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e42:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8007e44:	4b0c      	ldr	r3, [pc, #48]	; (8007e78 <MX_SPI2_Init+0x68>)
 8007e46:	2218      	movs	r2, #24
 8007e48:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007e4a:	4b0b      	ldr	r3, [pc, #44]	; (8007e78 <MX_SPI2_Init+0x68>)
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8007e50:	4b09      	ldr	r3, [pc, #36]	; (8007e78 <MX_SPI2_Init+0x68>)
 8007e52:	2200      	movs	r2, #0
 8007e54:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e56:	4b08      	ldr	r3, [pc, #32]	; (8007e78 <MX_SPI2_Init+0x68>)
 8007e58:	2200      	movs	r2, #0
 8007e5a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8007e5c:	4b06      	ldr	r3, [pc, #24]	; (8007e78 <MX_SPI2_Init+0x68>)
 8007e5e:	220a      	movs	r2, #10
 8007e60:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8007e62:	4805      	ldr	r0, [pc, #20]	; (8007e78 <MX_SPI2_Init+0x68>)
 8007e64:	f7fb fdde 	bl	8003a24 <HAL_SPI_Init>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d001      	beq.n	8007e72 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8007e6e:	f7ff fc19 	bl	80076a4 <Error_Handler>
  }

}
 8007e72:	bf00      	nop
 8007e74:	bd80      	pop	{r7, pc}
 8007e76:	bf00      	nop
 8007e78:	20000488 	.word	0x20000488
 8007e7c:	40003800 	.word	0x40003800

08007e80 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8007e84:	4b17      	ldr	r3, [pc, #92]	; (8007ee4 <MX_SPI3_Init+0x64>)
 8007e86:	4a18      	ldr	r2, [pc, #96]	; (8007ee8 <MX_SPI3_Init+0x68>)
 8007e88:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8007e8a:	4b16      	ldr	r3, [pc, #88]	; (8007ee4 <MX_SPI3_Init+0x64>)
 8007e8c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007e90:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8007e92:	4b14      	ldr	r3, [pc, #80]	; (8007ee4 <MX_SPI3_Init+0x64>)
 8007e94:	2200      	movs	r2, #0
 8007e96:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8007e98:	4b12      	ldr	r3, [pc, #72]	; (8007ee4 <MX_SPI3_Init+0x64>)
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007e9e:	4b11      	ldr	r3, [pc, #68]	; (8007ee4 <MX_SPI3_Init+0x64>)
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007ea4:	4b0f      	ldr	r3, [pc, #60]	; (8007ee4 <MX_SPI3_Init+0x64>)
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8007eaa:	4b0e      	ldr	r3, [pc, #56]	; (8007ee4 <MX_SPI3_Init+0x64>)
 8007eac:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007eb0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007eb2:	4b0c      	ldr	r3, [pc, #48]	; (8007ee4 <MX_SPI3_Init+0x64>)
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007eb8:	4b0a      	ldr	r3, [pc, #40]	; (8007ee4 <MX_SPI3_Init+0x64>)
 8007eba:	2200      	movs	r2, #0
 8007ebc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8007ebe:	4b09      	ldr	r3, [pc, #36]	; (8007ee4 <MX_SPI3_Init+0x64>)
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ec4:	4b07      	ldr	r3, [pc, #28]	; (8007ee4 <MX_SPI3_Init+0x64>)
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8007eca:	4b06      	ldr	r3, [pc, #24]	; (8007ee4 <MX_SPI3_Init+0x64>)
 8007ecc:	220a      	movs	r2, #10
 8007ece:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8007ed0:	4804      	ldr	r0, [pc, #16]	; (8007ee4 <MX_SPI3_Init+0x64>)
 8007ed2:	f7fb fda7 	bl	8003a24 <HAL_SPI_Init>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d001      	beq.n	8007ee0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8007edc:	f7ff fbe2 	bl	80076a4 <Error_Handler>
  }

}
 8007ee0:	bf00      	nop
 8007ee2:	bd80      	pop	{r7, pc}
 8007ee4:	200004e0 	.word	0x200004e0
 8007ee8:	40003c00 	.word	0x40003c00

08007eec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b08e      	sub	sp, #56	; 0x38
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ef4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ef8:	2200      	movs	r2, #0
 8007efa:	601a      	str	r2, [r3, #0]
 8007efc:	605a      	str	r2, [r3, #4]
 8007efe:	609a      	str	r2, [r3, #8]
 8007f00:	60da      	str	r2, [r3, #12]
 8007f02:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a6c      	ldr	r2, [pc, #432]	; (80080bc <HAL_SPI_MspInit+0x1d0>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d163      	bne.n	8007fd6 <HAL_SPI_MspInit+0xea>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007f0e:	2300      	movs	r3, #0
 8007f10:	623b      	str	r3, [r7, #32]
 8007f12:	4b6b      	ldr	r3, [pc, #428]	; (80080c0 <HAL_SPI_MspInit+0x1d4>)
 8007f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f16:	4a6a      	ldr	r2, [pc, #424]	; (80080c0 <HAL_SPI_MspInit+0x1d4>)
 8007f18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8007f1e:	4b68      	ldr	r3, [pc, #416]	; (80080c0 <HAL_SPI_MspInit+0x1d4>)
 8007f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f26:	623b      	str	r3, [r7, #32]
 8007f28:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	61fb      	str	r3, [r7, #28]
 8007f2e:	4b64      	ldr	r3, [pc, #400]	; (80080c0 <HAL_SPI_MspInit+0x1d4>)
 8007f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f32:	4a63      	ldr	r2, [pc, #396]	; (80080c0 <HAL_SPI_MspInit+0x1d4>)
 8007f34:	f043 0304 	orr.w	r3, r3, #4
 8007f38:	6313      	str	r3, [r2, #48]	; 0x30
 8007f3a:	4b61      	ldr	r3, [pc, #388]	; (80080c0 <HAL_SPI_MspInit+0x1d4>)
 8007f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f3e:	f003 0304 	and.w	r3, r3, #4
 8007f42:	61fb      	str	r3, [r7, #28]
 8007f44:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007f46:	2300      	movs	r3, #0
 8007f48:	61bb      	str	r3, [r7, #24]
 8007f4a:	4b5d      	ldr	r3, [pc, #372]	; (80080c0 <HAL_SPI_MspInit+0x1d4>)
 8007f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f4e:	4a5c      	ldr	r2, [pc, #368]	; (80080c0 <HAL_SPI_MspInit+0x1d4>)
 8007f50:	f043 0302 	orr.w	r3, r3, #2
 8007f54:	6313      	str	r3, [r2, #48]	; 0x30
 8007f56:	4b5a      	ldr	r3, [pc, #360]	; (80080c0 <HAL_SPI_MspInit+0x1d4>)
 8007f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f5a:	f003 0302 	and.w	r3, r3, #2
 8007f5e:	61bb      	str	r3, [r7, #24]
 8007f60:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration    
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8007f62:	2302      	movs	r3, #2
 8007f64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f66:	2302      	movs	r3, #2
 8007f68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f6e:	2303      	movs	r3, #3
 8007f70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8007f72:	2307      	movs	r3, #7
 8007f74:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007f76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f7a:	4619      	mov	r1, r3
 8007f7c:	4851      	ldr	r0, [pc, #324]	; (80080c4 <HAL_SPI_MspInit+0x1d8>)
 8007f7e:	f7fa fe63 	bl	8002c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007f82:	2304      	movs	r3, #4
 8007f84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f86:	2302      	movs	r3, #2
 8007f88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f8e:	2303      	movs	r3, #3
 8007f90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007f92:	2305      	movs	r3, #5
 8007f94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007f96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	4849      	ldr	r0, [pc, #292]	; (80080c4 <HAL_SPI_MspInit+0x1d8>)
 8007f9e:	f7fa fe53 	bl	8002c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007fa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007fa6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007fa8:	2302      	movs	r3, #2
 8007faa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fac:	2300      	movs	r3, #0
 8007fae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007fb0:	2303      	movs	r3, #3
 8007fb2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007fb4:	2305      	movs	r3, #5
 8007fb6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007fb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	4842      	ldr	r0, [pc, #264]	; (80080c8 <HAL_SPI_MspInit+0x1dc>)
 8007fc0:	f7fa fe42 	bl	8002c48 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	2100      	movs	r1, #0
 8007fc8:	2024      	movs	r0, #36	; 0x24
 8007fca:	f7fa fa6e 	bl	80024aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8007fce:	2024      	movs	r0, #36	; 0x24
 8007fd0:	f7fa fa87 	bl	80024e2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8007fd4:	e06e      	b.n	80080b4 <HAL_SPI_MspInit+0x1c8>
  else if(spiHandle->Instance==SPI3)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a3c      	ldr	r2, [pc, #240]	; (80080cc <HAL_SPI_MspInit+0x1e0>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d169      	bne.n	80080b4 <HAL_SPI_MspInit+0x1c8>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	617b      	str	r3, [r7, #20]
 8007fe4:	4b36      	ldr	r3, [pc, #216]	; (80080c0 <HAL_SPI_MspInit+0x1d4>)
 8007fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe8:	4a35      	ldr	r2, [pc, #212]	; (80080c0 <HAL_SPI_MspInit+0x1d4>)
 8007fea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fee:	6413      	str	r3, [r2, #64]	; 0x40
 8007ff0:	4b33      	ldr	r3, [pc, #204]	; (80080c0 <HAL_SPI_MspInit+0x1d4>)
 8007ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ff4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ff8:	617b      	str	r3, [r7, #20]
 8007ffa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	613b      	str	r3, [r7, #16]
 8008000:	4b2f      	ldr	r3, [pc, #188]	; (80080c0 <HAL_SPI_MspInit+0x1d4>)
 8008002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008004:	4a2e      	ldr	r2, [pc, #184]	; (80080c0 <HAL_SPI_MspInit+0x1d4>)
 8008006:	f043 0302 	orr.w	r3, r3, #2
 800800a:	6313      	str	r3, [r2, #48]	; 0x30
 800800c:	4b2c      	ldr	r3, [pc, #176]	; (80080c0 <HAL_SPI_MspInit+0x1d4>)
 800800e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008010:	f003 0302 	and.w	r3, r3, #2
 8008014:	613b      	str	r3, [r7, #16]
 8008016:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008018:	2300      	movs	r3, #0
 800801a:	60fb      	str	r3, [r7, #12]
 800801c:	4b28      	ldr	r3, [pc, #160]	; (80080c0 <HAL_SPI_MspInit+0x1d4>)
 800801e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008020:	4a27      	ldr	r2, [pc, #156]	; (80080c0 <HAL_SPI_MspInit+0x1d4>)
 8008022:	f043 0301 	orr.w	r3, r3, #1
 8008026:	6313      	str	r3, [r2, #48]	; 0x30
 8008028:	4b25      	ldr	r3, [pc, #148]	; (80080c0 <HAL_SPI_MspInit+0x1d4>)
 800802a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800802c:	f003 0301 	and.w	r3, r3, #1
 8008030:	60fb      	str	r3, [r7, #12]
 8008032:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008034:	2300      	movs	r3, #0
 8008036:	60bb      	str	r3, [r7, #8]
 8008038:	4b21      	ldr	r3, [pc, #132]	; (80080c0 <HAL_SPI_MspInit+0x1d4>)
 800803a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800803c:	4a20      	ldr	r2, [pc, #128]	; (80080c0 <HAL_SPI_MspInit+0x1d4>)
 800803e:	f043 0304 	orr.w	r3, r3, #4
 8008042:	6313      	str	r3, [r2, #48]	; 0x30
 8008044:	4b1e      	ldr	r3, [pc, #120]	; (80080c0 <HAL_SPI_MspInit+0x1d4>)
 8008046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008048:	f003 0304 	and.w	r3, r3, #4
 800804c:	60bb      	str	r3, [r7, #8]
 800804e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8008050:	2304      	movs	r3, #4
 8008052:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008054:	2302      	movs	r3, #2
 8008056:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008058:	2300      	movs	r3, #0
 800805a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800805c:	2303      	movs	r3, #3
 800805e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8008060:	2307      	movs	r3, #7
 8008062:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008064:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008068:	4619      	mov	r1, r3
 800806a:	4817      	ldr	r0, [pc, #92]	; (80080c8 <HAL_SPI_MspInit+0x1dc>)
 800806c:	f7fa fdec 	bl	8002c48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8008070:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008074:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008076:	2302      	movs	r3, #2
 8008078:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800807a:	2300      	movs	r3, #0
 800807c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800807e:	2303      	movs	r3, #3
 8008080:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8008082:	2306      	movs	r3, #6
 8008084:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008086:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800808a:	4619      	mov	r1, r3
 800808c:	4810      	ldr	r0, [pc, #64]	; (80080d0 <HAL_SPI_MspInit+0x1e4>)
 800808e:	f7fa fddb 	bl	8002c48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8008092:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008096:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008098:	2302      	movs	r3, #2
 800809a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800809c:	2300      	movs	r3, #0
 800809e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80080a0:	2303      	movs	r3, #3
 80080a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80080a4:	2306      	movs	r3, #6
 80080a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80080a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080ac:	4619      	mov	r1, r3
 80080ae:	4805      	ldr	r0, [pc, #20]	; (80080c4 <HAL_SPI_MspInit+0x1d8>)
 80080b0:	f7fa fdca 	bl	8002c48 <HAL_GPIO_Init>
}
 80080b4:	bf00      	nop
 80080b6:	3738      	adds	r7, #56	; 0x38
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}
 80080bc:	40003800 	.word	0x40003800
 80080c0:	40023800 	.word	0x40023800
 80080c4:	40020800 	.word	0x40020800
 80080c8:	40020400 	.word	0x40020400
 80080cc:	40003c00 	.word	0x40003c00
 80080d0:	40020000 	.word	0x40020000

080080d4 <SPI_Init>:
} 

/* USER CODE BEGIN 1 */

void SPI_Init()
{
 80080d4:	b480      	push	{r7}
 80080d6:	af00      	add	r7, sp, #0


	  // SPI Interrupt Setting
	  __HAL_SPI_ENABLE_IT(&hspi2, SPI_IT_TXE | SPI_IT_RXNE);
 80080d8:	4b06      	ldr	r3, [pc, #24]	; (80080f4 <SPI_Init+0x20>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	685a      	ldr	r2, [r3, #4]
 80080de:	4b05      	ldr	r3, [pc, #20]	; (80080f4 <SPI_Init+0x20>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80080e6:	605a      	str	r2, [r3, #4]

}
 80080e8:	bf00      	nop
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr
 80080f2:	bf00      	nop
 80080f4:	20000488 	.word	0x20000488

080080f8 <setZeroEncoder>:



void setZeroEncoder()
{
 80080f8:	b590      	push	{r4, r7, lr}
 80080fa:	b089      	sub	sp, #36	; 0x24
 80080fc:	af00      	add	r7, sp, #0

	const int32_t forced_commute_steps = 2000;
 80080fe:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8008102:	61fb      	str	r3, [r7, #28]



	volatile uint32_t forced_commute_count = 0;
 8008104:	2300      	movs	r3, #0
 8008106:	613b      	str	r3, [r7, #16]

	const float forced_I_gamma_ref = 8.0f;
 8008108:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 800810c:	61bb      	str	r3, [r7, #24]
	const float forced_I_delta_ref = 0.0f;
 800810e:	f04f 0300 	mov.w	r3, #0
 8008112:	617b      	str	r3, [r7, #20]

	volatile float sensed_theta_re_error;

	volatile float sensed_theta_error;
	volatile float sensed_theta_error_sum = 0.0f;
 8008114:	f04f 0300 	mov.w	r3, #0
 8008118:	607b      	str	r3, [r7, #4]
	volatile float sensed_theta_error_ave = 0.0f;
 800811a:	f04f 0300 	mov.w	r3, #0
 800811e:	603b      	str	r3, [r7, #0]


	Id_ref = forced_I_gamma_ref;
 8008120:	4a57      	ldr	r2, [pc, #348]	; (8008280 <setZeroEncoder+0x188>)
 8008122:	69bb      	ldr	r3, [r7, #24]
 8008124:	6013      	str	r3, [r2, #0]
	Iq_ref = forced_I_delta_ref;
 8008126:	4a57      	ldr	r2, [pc, #348]	; (8008284 <setZeroEncoder+0x18c>)
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	6013      	str	r3, [r2, #0]

	forced_commute_enable = 1;
 800812c:	4b56      	ldr	r3, [pc, #344]	; (8008288 <setZeroEncoder+0x190>)
 800812e:	2201      	movs	r2, #1
 8008130:	701a      	strb	r2, [r3, #0]


	timeoutReset();	HAL_Delay(100);
 8008132:	f000 fd55 	bl	8008be0 <timeoutReset>
 8008136:	2064      	movs	r0, #100	; 0x64
 8008138:	f7f8 ff52 	bl	8000fe0 <HAL_Delay>
	timeoutReset();	HAL_Delay(100);
 800813c:	f000 fd50 	bl	8008be0 <timeoutReset>
 8008140:	2064      	movs	r0, #100	; 0x64
 8008142:	f7f8 ff4d 	bl	8000fe0 <HAL_Delay>
	timeoutReset();	HAL_Delay(100);
 8008146:	f000 fd4b 	bl	8008be0 <timeoutReset>
 800814a:	2064      	movs	r0, #100	; 0x64
 800814c:	f7f8 ff48 	bl	8000fe0 <HAL_Delay>
	timeoutReset();	HAL_Delay(100);
 8008150:	f000 fd46 	bl	8008be0 <timeoutReset>
 8008154:	2064      	movs	r0, #100	; 0x64
 8008156:	f7f8 ff43 	bl	8000fe0 <HAL_Delay>
	timeoutReset();	HAL_Delay(100);
 800815a:	f000 fd41 	bl	8008be0 <timeoutReset>
 800815e:	2064      	movs	r0, #100	; 0x64
 8008160:	f7f8 ff3e 	bl	8000fe0 <HAL_Delay>

	requestEncoder();
 8008164:	f000 f89e 	bl	80082a4 <requestEncoder>
	HAL_Delay(5);
 8008168:	2005      	movs	r0, #5
 800816a:	f7f8 ff39 	bl	8000fe0 <HAL_Delay>
	refreshEncoder();
 800816e:	f000 f8b7 	bl	80082e0 <refreshEncoder>
	HAL_Delay(5);
 8008172:	2005      	movs	r0, #5
 8008174:	f7f8 ff34 	bl	8000fe0 <HAL_Delay>
	requestEncoder();
 8008178:	f000 f894 	bl	80082a4 <requestEncoder>
	HAL_Delay(5);
 800817c:	2005      	movs	r0, #5
 800817e:	f7f8 ff2f 	bl	8000fe0 <HAL_Delay>
	refreshEncoder();
 8008182:	f000 f8ad 	bl	80082e0 <refreshEncoder>
	theta_re_offset = 0.0f - theta_re;
 8008186:	4b41      	ldr	r3, [pc, #260]	; (800828c <setZeroEncoder+0x194>)
 8008188:	edd3 7a00 	vldr	s15, [r3]
 800818c:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8008290 <setZeroEncoder+0x198>
 8008190:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008194:	4b3f      	ldr	r3, [pc, #252]	; (8008294 <setZeroEncoder+0x19c>)
 8008196:	edc3 7a00 	vstr	s15, [r3]

	while(theta_re_offset < -M_PI)	theta_re_offset += 2.0f * M_PI;
 800819a:	e012      	b.n	80081c2 <setZeroEncoder+0xca>
 800819c:	4b3d      	ldr	r3, [pc, #244]	; (8008294 <setZeroEncoder+0x19c>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4618      	mov	r0, r3
 80081a2:	f7f8 f9e9 	bl	8000578 <__aeabi_f2d>
 80081a6:	a330      	add	r3, pc, #192	; (adr r3, 8008268 <setZeroEncoder+0x170>)
 80081a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ac:	f7f8 f886 	bl	80002bc <__adddf3>
 80081b0:	4603      	mov	r3, r0
 80081b2:	460c      	mov	r4, r1
 80081b4:	4618      	mov	r0, r3
 80081b6:	4621      	mov	r1, r4
 80081b8:	f7f8 fcd0 	bl	8000b5c <__aeabi_d2f>
 80081bc:	4602      	mov	r2, r0
 80081be:	4b35      	ldr	r3, [pc, #212]	; (8008294 <setZeroEncoder+0x19c>)
 80081c0:	601a      	str	r2, [r3, #0]
 80081c2:	4b34      	ldr	r3, [pc, #208]	; (8008294 <setZeroEncoder+0x19c>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	4618      	mov	r0, r3
 80081c8:	f7f8 f9d6 	bl	8000578 <__aeabi_f2d>
 80081cc:	a328      	add	r3, pc, #160	; (adr r3, 8008270 <setZeroEncoder+0x178>)
 80081ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d2:	f7f8 fc9b 	bl	8000b0c <__aeabi_dcmplt>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d1df      	bne.n	800819c <setZeroEncoder+0xa4>
	while(theta_re_offset > M_PI)	theta_re_offset -= 2.0f * M_PI;
 80081dc:	e012      	b.n	8008204 <setZeroEncoder+0x10c>
 80081de:	4b2d      	ldr	r3, [pc, #180]	; (8008294 <setZeroEncoder+0x19c>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4618      	mov	r0, r3
 80081e4:	f7f8 f9c8 	bl	8000578 <__aeabi_f2d>
 80081e8:	a31f      	add	r3, pc, #124	; (adr r3, 8008268 <setZeroEncoder+0x170>)
 80081ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ee:	f7f8 f863 	bl	80002b8 <__aeabi_dsub>
 80081f2:	4603      	mov	r3, r0
 80081f4:	460c      	mov	r4, r1
 80081f6:	4618      	mov	r0, r3
 80081f8:	4621      	mov	r1, r4
 80081fa:	f7f8 fcaf 	bl	8000b5c <__aeabi_d2f>
 80081fe:	4602      	mov	r2, r0
 8008200:	4b24      	ldr	r3, [pc, #144]	; (8008294 <setZeroEncoder+0x19c>)
 8008202:	601a      	str	r2, [r3, #0]
 8008204:	4b23      	ldr	r3, [pc, #140]	; (8008294 <setZeroEncoder+0x19c>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4618      	mov	r0, r3
 800820a:	f7f8 f9b5 	bl	8000578 <__aeabi_f2d>
 800820e:	a31a      	add	r3, pc, #104	; (adr r3, 8008278 <setZeroEncoder+0x180>)
 8008210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008214:	f7f8 fc98 	bl	8000b48 <__aeabi_dcmpgt>
 8008218:	4603      	mov	r3, r0
 800821a:	2b00      	cmp	r3, #0
 800821c:	d1df      	bne.n	80081de <setZeroEncoder+0xe6>


	printf(" theta_re_offset = %d -- ", (int)(theta_re_offset * 100000));
 800821e:	4b1d      	ldr	r3, [pc, #116]	; (8008294 <setZeroEncoder+0x19c>)
 8008220:	edd3 7a00 	vldr	s15, [r3]
 8008224:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8008298 <setZeroEncoder+0x1a0>
 8008228:	ee67 7a87 	vmul.f32	s15, s15, s14
 800822c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008230:	ee17 1a90 	vmov	r1, s15
 8008234:	4819      	ldr	r0, [pc, #100]	; (800829c <setZeroEncoder+0x1a4>)
 8008236:	f000 fdc3 	bl	8008dc0 <iprintf>
	printf(" theta_re_offset = %d\n", (int)(theta_re_offset * 100000));
 800823a:	4b16      	ldr	r3, [pc, #88]	; (8008294 <setZeroEncoder+0x19c>)
 800823c:	edd3 7a00 	vldr	s15, [r3]
 8008240:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8008298 <setZeroEncoder+0x1a0>
 8008244:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008248:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800824c:	ee17 1a90 	vmov	r1, s15
 8008250:	4813      	ldr	r0, [pc, #76]	; (80082a0 <setZeroEncoder+0x1a8>)
 8008252:	f000 fdb5 	bl	8008dc0 <iprintf>

	ACR_Reset();
 8008256:	f7fd ffc1 	bl	80061dc <ACR_Reset>

	forced_commute_enable = 0;
 800825a:	4b0b      	ldr	r3, [pc, #44]	; (8008288 <setZeroEncoder+0x190>)
 800825c:	2200      	movs	r2, #0
 800825e:	701a      	strb	r2, [r3, #0]


#endif


}
 8008260:	bf00      	nop
 8008262:	3724      	adds	r7, #36	; 0x24
 8008264:	46bd      	mov	sp, r7
 8008266:	bd90      	pop	{r4, r7, pc}
 8008268:	54442d18 	.word	0x54442d18
 800826c:	401921fb 	.word	0x401921fb
 8008270:	54442d18 	.word	0x54442d18
 8008274:	c00921fb 	.word	0xc00921fb
 8008278:	54442d18 	.word	0x54442d18
 800827c:	400921fb 	.word	0x400921fb
 8008280:	200000c4 	.word	0x200000c4
 8008284:	200000c8 	.word	0x200000c8
 8008288:	200001e4 	.word	0x200001e4
 800828c:	200001dc 	.word	0x200001dc
 8008290:	00000000 	.word	0x00000000
 8008294:	200001d4 	.word	0x200001d4
 8008298:	47c35000 	.word	0x47c35000
 800829c:	08009e3c 	.word	0x08009e3c
 80082a0:	08009e58 	.word	0x08009e58

080082a4 <requestEncoder>:




inline void requestEncoder()
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	af00      	add	r7, sp, #0


	// Reading Encoder for next sampling
	spi2txBuf[0] = 0xff;
 80082a8:	4b09      	ldr	r3, [pc, #36]	; (80082d0 <requestEncoder+0x2c>)
 80082aa:	22ff      	movs	r2, #255	; 0xff
 80082ac:	701a      	strb	r2, [r3, #0]
	spi2txBuf[1] = 0xff;
 80082ae:	4b08      	ldr	r3, [pc, #32]	; (80082d0 <requestEncoder+0x2c>)
 80082b0:	22ff      	movs	r2, #255	; 0xff
 80082b2:	705a      	strb	r2, [r3, #1]
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 80082b4:	2200      	movs	r2, #0
 80082b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80082ba:	4806      	ldr	r0, [pc, #24]	; (80082d4 <requestEncoder+0x30>)
 80082bc:	f7fa fe6e 	bl	8002f9c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_IT(&hspi2, spi2txBuf, spi2rxBuf, 1);
 80082c0:	2301      	movs	r3, #1
 80082c2:	4a05      	ldr	r2, [pc, #20]	; (80082d8 <requestEncoder+0x34>)
 80082c4:	4902      	ldr	r1, [pc, #8]	; (80082d0 <requestEncoder+0x2c>)
 80082c6:	4805      	ldr	r0, [pc, #20]	; (80082dc <requestEncoder+0x38>)
 80082c8:	f7fb fc10 	bl	8003aec <HAL_SPI_TransmitReceive_IT>


}
 80082cc:	bf00      	nop
 80082ce:	bd80      	pop	{r7, pc}
 80082d0:	200001c8 	.word	0x200001c8
 80082d4:	40020400 	.word	0x40020400
 80082d8:	200001cc 	.word	0x200001cc
 80082dc:	20000488 	.word	0x20000488

080082e0 <refreshEncoder>:


inline int refreshEncoder()
{
 80082e0:	b5b0      	push	{r4, r5, r7, lr}
 80082e2:	b084      	sub	sp, #16
 80082e4:	af00      	add	r7, sp, #0

	uint16_t angle_raw = 0;
 80082e6:	2300      	movs	r3, #0
 80082e8:	81fb      	strh	r3, [r7, #14]
	float _theta;
	float _theta_re;

	// Reading RX Data from SPI Encoder
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 80082ea:	2201      	movs	r2, #1
 80082ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80082f0:	4891      	ldr	r0, [pc, #580]	; (8008538 <refreshEncoder+0x258>)
 80082f2:	f7fa fe53 	bl	8002f9c <HAL_GPIO_WritePin>
	angle_raw = (spi2rxBuf[1] & 0x3f) << 8 | spi2rxBuf[0];
 80082f6:	4b91      	ldr	r3, [pc, #580]	; (800853c <refreshEncoder+0x25c>)
 80082f8:	785b      	ldrb	r3, [r3, #1]
 80082fa:	b2db      	uxtb	r3, r3
 80082fc:	021b      	lsls	r3, r3, #8
 80082fe:	b21b      	sxth	r3, r3
 8008300:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8008304:	b21a      	sxth	r2, r3
 8008306:	4b8d      	ldr	r3, [pc, #564]	; (800853c <refreshEncoder+0x25c>)
 8008308:	781b      	ldrb	r3, [r3, #0]
 800830a:	b2db      	uxtb	r3, r3
 800830c:	b21b      	sxth	r3, r3
 800830e:	4313      	orrs	r3, r2
 8008310:	b21b      	sxth	r3, r3
 8008312:	81fb      	strh	r3, [r7, #14]

	_theta = (float)angle_raw / (float)ENCODER_RESOL * 2.0f * M_PI + theta_offset;
 8008314:	89fb      	ldrh	r3, [r7, #14]
 8008316:	ee07 3a90 	vmov	s15, r3
 800831a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800831e:	eddf 6a88 	vldr	s13, [pc, #544]	; 8008540 <refreshEncoder+0x260>
 8008322:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008326:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800832a:	ee17 0a90 	vmov	r0, s15
 800832e:	f7f8 f923 	bl	8000578 <__aeabi_f2d>
 8008332:	a37d      	add	r3, pc, #500	; (adr r3, 8008528 <refreshEncoder+0x248>)
 8008334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008338:	f7f8 f976 	bl	8000628 <__aeabi_dmul>
 800833c:	4603      	mov	r3, r0
 800833e:	460c      	mov	r4, r1
 8008340:	4625      	mov	r5, r4
 8008342:	461c      	mov	r4, r3
 8008344:	4b7f      	ldr	r3, [pc, #508]	; (8008544 <refreshEncoder+0x264>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4618      	mov	r0, r3
 800834a:	f7f8 f915 	bl	8000578 <__aeabi_f2d>
 800834e:	4602      	mov	r2, r0
 8008350:	460b      	mov	r3, r1
 8008352:	4620      	mov	r0, r4
 8008354:	4629      	mov	r1, r5
 8008356:	f7f7 ffb1 	bl	80002bc <__adddf3>
 800835a:	4603      	mov	r3, r0
 800835c:	460c      	mov	r4, r1
 800835e:	4618      	mov	r0, r3
 8008360:	4621      	mov	r1, r4
 8008362:	f7f8 fbfb 	bl	8000b5c <__aeabi_d2f>
 8008366:	4603      	mov	r3, r0
 8008368:	60bb      	str	r3, [r7, #8]

	if(_theta < 0.0f)			theta = _theta + 2 * M_PI;
 800836a:	edd7 7a02 	vldr	s15, [r7, #8]
 800836e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008376:	d511      	bpl.n	800839c <refreshEncoder+0xbc>
 8008378:	68b8      	ldr	r0, [r7, #8]
 800837a:	f7f8 f8fd 	bl	8000578 <__aeabi_f2d>
 800837e:	a36c      	add	r3, pc, #432	; (adr r3, 8008530 <refreshEncoder+0x250>)
 8008380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008384:	f7f7 ff9a 	bl	80002bc <__adddf3>
 8008388:	4603      	mov	r3, r0
 800838a:	460c      	mov	r4, r1
 800838c:	4618      	mov	r0, r3
 800838e:	4621      	mov	r1, r4
 8008390:	f7f8 fbe4 	bl	8000b5c <__aeabi_d2f>
 8008394:	4602      	mov	r2, r0
 8008396:	4b6c      	ldr	r3, [pc, #432]	; (8008548 <refreshEncoder+0x268>)
 8008398:	601a      	str	r2, [r3, #0]
 800839a:	e01f      	b.n	80083dc <refreshEncoder+0xfc>
	else if(_theta >= 2 * M_PI)	theta = _theta - 2 * M_PI;
 800839c:	68b8      	ldr	r0, [r7, #8]
 800839e:	f7f8 f8eb 	bl	8000578 <__aeabi_f2d>
 80083a2:	a363      	add	r3, pc, #396	; (adr r3, 8008530 <refreshEncoder+0x250>)
 80083a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a8:	f7f8 fbc4 	bl	8000b34 <__aeabi_dcmpge>
 80083ac:	4603      	mov	r3, r0
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d011      	beq.n	80083d6 <refreshEncoder+0xf6>
 80083b2:	68b8      	ldr	r0, [r7, #8]
 80083b4:	f7f8 f8e0 	bl	8000578 <__aeabi_f2d>
 80083b8:	a35d      	add	r3, pc, #372	; (adr r3, 8008530 <refreshEncoder+0x250>)
 80083ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083be:	f7f7 ff7b 	bl	80002b8 <__aeabi_dsub>
 80083c2:	4603      	mov	r3, r0
 80083c4:	460c      	mov	r4, r1
 80083c6:	4618      	mov	r0, r3
 80083c8:	4621      	mov	r1, r4
 80083ca:	f7f8 fbc7 	bl	8000b5c <__aeabi_d2f>
 80083ce:	4602      	mov	r2, r0
 80083d0:	4b5d      	ldr	r3, [pc, #372]	; (8008548 <refreshEncoder+0x268>)
 80083d2:	601a      	str	r2, [r3, #0]
 80083d4:	e002      	b.n	80083dc <refreshEncoder+0xfc>
	else						theta = _theta;
 80083d6:	4a5c      	ldr	r2, [pc, #368]	; (8008548 <refreshEncoder+0x268>)
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	6013      	str	r3, [r2, #0]

	_theta_re = fmodf((float)angle_raw / (float)ENCODER_RESOL * 2.0f * M_PI * POLES / 2, 2.0f * M_PI) + theta_re_offset;
 80083dc:	89fb      	ldrh	r3, [r7, #14]
 80083de:	ee07 3a90 	vmov	s15, r3
 80083e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80083e6:	eddf 6a56 	vldr	s13, [pc, #344]	; 8008540 <refreshEncoder+0x260>
 80083ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80083ee:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80083f2:	ee17 0a90 	vmov	r0, s15
 80083f6:	f7f8 f8bf 	bl	8000578 <__aeabi_f2d>
 80083fa:	a34b      	add	r3, pc, #300	; (adr r3, 8008528 <refreshEncoder+0x248>)
 80083fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008400:	f7f8 f912 	bl	8000628 <__aeabi_dmul>
 8008404:	4603      	mov	r3, r0
 8008406:	460c      	mov	r4, r1
 8008408:	4618      	mov	r0, r3
 800840a:	4621      	mov	r1, r4
 800840c:	f04f 0200 	mov.w	r2, #0
 8008410:	4b4e      	ldr	r3, [pc, #312]	; (800854c <refreshEncoder+0x26c>)
 8008412:	f7f8 f909 	bl	8000628 <__aeabi_dmul>
 8008416:	4603      	mov	r3, r0
 8008418:	460c      	mov	r4, r1
 800841a:	4618      	mov	r0, r3
 800841c:	4621      	mov	r1, r4
 800841e:	f04f 0200 	mov.w	r2, #0
 8008422:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008426:	f7f8 fa29 	bl	800087c <__aeabi_ddiv>
 800842a:	4603      	mov	r3, r0
 800842c:	460c      	mov	r4, r1
 800842e:	4618      	mov	r0, r3
 8008430:	4621      	mov	r1, r4
 8008432:	f7f8 fb93 	bl	8000b5c <__aeabi_d2f>
 8008436:	4603      	mov	r3, r0
 8008438:	eddf 0a45 	vldr	s1, [pc, #276]	; 8008550 <refreshEncoder+0x270>
 800843c:	ee00 3a10 	vmov	s0, r3
 8008440:	f001 fc06 	bl	8009c50 <fmodf>
 8008444:	eeb0 7a40 	vmov.f32	s14, s0
 8008448:	4b42      	ldr	r3, [pc, #264]	; (8008554 <refreshEncoder+0x274>)
 800844a:	edd3 7a00 	vldr	s15, [r3]
 800844e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008452:	edc7 7a01 	vstr	s15, [r7, #4]

	if(_theta_re < 0.0f)			theta_re = _theta_re + 2 * M_PI;
 8008456:	edd7 7a01 	vldr	s15, [r7, #4]
 800845a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800845e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008462:	d511      	bpl.n	8008488 <refreshEncoder+0x1a8>
 8008464:	6878      	ldr	r0, [r7, #4]
 8008466:	f7f8 f887 	bl	8000578 <__aeabi_f2d>
 800846a:	a331      	add	r3, pc, #196	; (adr r3, 8008530 <refreshEncoder+0x250>)
 800846c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008470:	f7f7 ff24 	bl	80002bc <__adddf3>
 8008474:	4603      	mov	r3, r0
 8008476:	460c      	mov	r4, r1
 8008478:	4618      	mov	r0, r3
 800847a:	4621      	mov	r1, r4
 800847c:	f7f8 fb6e 	bl	8000b5c <__aeabi_d2f>
 8008480:	4602      	mov	r2, r0
 8008482:	4b35      	ldr	r3, [pc, #212]	; (8008558 <refreshEncoder+0x278>)
 8008484:	601a      	str	r2, [r3, #0]
 8008486:	e01f      	b.n	80084c8 <refreshEncoder+0x1e8>
	else if(_theta_re >= 2 * M_PI)	theta_re = _theta_re - 2 * M_PI;
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f7f8 f875 	bl	8000578 <__aeabi_f2d>
 800848e:	a328      	add	r3, pc, #160	; (adr r3, 8008530 <refreshEncoder+0x250>)
 8008490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008494:	f7f8 fb4e 	bl	8000b34 <__aeabi_dcmpge>
 8008498:	4603      	mov	r3, r0
 800849a:	2b00      	cmp	r3, #0
 800849c:	d011      	beq.n	80084c2 <refreshEncoder+0x1e2>
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f7f8 f86a 	bl	8000578 <__aeabi_f2d>
 80084a4:	a322      	add	r3, pc, #136	; (adr r3, 8008530 <refreshEncoder+0x250>)
 80084a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084aa:	f7f7 ff05 	bl	80002b8 <__aeabi_dsub>
 80084ae:	4603      	mov	r3, r0
 80084b0:	460c      	mov	r4, r1
 80084b2:	4618      	mov	r0, r3
 80084b4:	4621      	mov	r1, r4
 80084b6:	f7f8 fb51 	bl	8000b5c <__aeabi_d2f>
 80084ba:	4602      	mov	r2, r0
 80084bc:	4b26      	ldr	r3, [pc, #152]	; (8008558 <refreshEncoder+0x278>)
 80084be:	601a      	str	r2, [r3, #0]
 80084c0:	e002      	b.n	80084c8 <refreshEncoder+0x1e8>
	else							theta_re = _theta_re;
 80084c2:	4a25      	ldr	r2, [pc, #148]	; (8008558 <refreshEncoder+0x278>)
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6013      	str	r3, [r2, #0]

	cos_theta_re = sin_table2[(int)((theta_re * 0.3183f + 0.5f) * 5000.0f)];
 80084c8:	4b23      	ldr	r3, [pc, #140]	; (8008558 <refreshEncoder+0x278>)
 80084ca:	edd3 7a00 	vldr	s15, [r3]
 80084ce:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800855c <refreshEncoder+0x27c>
 80084d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80084d6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80084da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80084de:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8008560 <refreshEncoder+0x280>
 80084e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80084e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80084ea:	ee17 3a90 	vmov	r3, s15
 80084ee:	4a1d      	ldr	r2, [pc, #116]	; (8008564 <refreshEncoder+0x284>)
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	4413      	add	r3, r2
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a1c      	ldr	r2, [pc, #112]	; (8008568 <refreshEncoder+0x288>)
 80084f8:	6013      	str	r3, [r2, #0]
	sin_theta_re = sin_table2[(int)(theta_re * 1591.54943f)];
 80084fa:	4b17      	ldr	r3, [pc, #92]	; (8008558 <refreshEncoder+0x278>)
 80084fc:	edd3 7a00 	vldr	s15, [r3]
 8008500:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800856c <refreshEncoder+0x28c>
 8008504:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008508:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800850c:	ee17 3a90 	vmov	r3, s15
 8008510:	4a14      	ldr	r2, [pc, #80]	; (8008564 <refreshEncoder+0x284>)
 8008512:	009b      	lsls	r3, r3, #2
 8008514:	4413      	add	r3, r2
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a15      	ldr	r2, [pc, #84]	; (8008570 <refreshEncoder+0x290>)
 800851a:	6013      	str	r3, [r2, #0]


	return 0;
 800851c:	2300      	movs	r3, #0

}
 800851e:	4618      	mov	r0, r3
 8008520:	3710      	adds	r7, #16
 8008522:	46bd      	mov	sp, r7
 8008524:	bdb0      	pop	{r4, r5, r7, pc}
 8008526:	bf00      	nop
 8008528:	54442d18 	.word	0x54442d18
 800852c:	400921fb 	.word	0x400921fb
 8008530:	54442d18 	.word	0x54442d18
 8008534:	401921fb 	.word	0x401921fb
 8008538:	40020400 	.word	0x40020400
 800853c:	200001cc 	.word	0x200001cc
 8008540:	46800000 	.word	0x46800000
 8008544:	200001d0 	.word	0x200001d0
 8008548:	200001d8 	.word	0x200001d8
 800854c:	40360000 	.word	0x40360000
 8008550:	40c90fdb 	.word	0x40c90fdb
 8008554:	200001d4 	.word	0x200001d4
 8008558:	200001dc 	.word	0x200001dc
 800855c:	3ea2f838 	.word	0x3ea2f838
 8008560:	459c4000 	.word	0x459c4000
 8008564:	08009eb0 	.word	0x08009eb0
 8008568:	20000034 	.word	0x20000034
 800856c:	44c6f195 	.word	0x44c6f195
 8008570:	200001e0 	.word	0x200001e0

08008574 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b082      	sub	sp, #8
 8008578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800857a:	2300      	movs	r3, #0
 800857c:	607b      	str	r3, [r7, #4]
 800857e:	4b10      	ldr	r3, [pc, #64]	; (80085c0 <HAL_MspInit+0x4c>)
 8008580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008582:	4a0f      	ldr	r2, [pc, #60]	; (80085c0 <HAL_MspInit+0x4c>)
 8008584:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008588:	6453      	str	r3, [r2, #68]	; 0x44
 800858a:	4b0d      	ldr	r3, [pc, #52]	; (80085c0 <HAL_MspInit+0x4c>)
 800858c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800858e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008592:	607b      	str	r3, [r7, #4]
 8008594:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008596:	2300      	movs	r3, #0
 8008598:	603b      	str	r3, [r7, #0]
 800859a:	4b09      	ldr	r3, [pc, #36]	; (80085c0 <HAL_MspInit+0x4c>)
 800859c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800859e:	4a08      	ldr	r2, [pc, #32]	; (80085c0 <HAL_MspInit+0x4c>)
 80085a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085a4:	6413      	str	r3, [r2, #64]	; 0x40
 80085a6:	4b06      	ldr	r3, [pc, #24]	; (80085c0 <HAL_MspInit+0x4c>)
 80085a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085ae:	603b      	str	r3, [r7, #0]
 80085b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80085b2:	2007      	movs	r0, #7
 80085b4:	f7f9 ff6e 	bl	8002494 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80085b8:	bf00      	nop
 80085ba:	3708      	adds	r7, #8
 80085bc:	46bd      	mov	sp, r7
 80085be:	bd80      	pop	{r7, pc}
 80085c0:	40023800 	.word	0x40023800

080085c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80085c4:	b480      	push	{r7}
 80085c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80085c8:	bf00      	nop
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr

080085d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80085d2:	b480      	push	{r7}
 80085d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80085d6:	e7fe      	b.n	80085d6 <HardFault_Handler+0x4>

080085d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80085d8:	b480      	push	{r7}
 80085da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80085dc:	e7fe      	b.n	80085dc <MemManage_Handler+0x4>

080085de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80085de:	b480      	push	{r7}
 80085e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80085e2:	e7fe      	b.n	80085e2 <BusFault_Handler+0x4>

080085e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80085e4:	b480      	push	{r7}
 80085e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80085e8:	e7fe      	b.n	80085e8 <UsageFault_Handler+0x4>

080085ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80085ea:	b480      	push	{r7}
 80085ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80085ee:	bf00      	nop
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr

080085f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80085f8:	b480      	push	{r7}
 80085fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80085fc:	bf00      	nop
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr

08008606 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008606:	b480      	push	{r7}
 8008608:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800860a:	bf00      	nop
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr

08008614 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008618:	f7f8 fcc2 	bl	8000fa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800861c:	bf00      	nop
 800861e:	bd80      	pop	{r7, pc}

08008620 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8008624:	4802      	ldr	r0, [pc, #8]	; (8008630 <CAN1_TX_IRQHandler+0x10>)
 8008626:	f7f9 fc5a 	bl	8001ede <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800862a:	bf00      	nop
 800862c:	bd80      	pop	{r7, pc}
 800862e:	bf00      	nop
 8008630:	20000460 	.word	0x20000460

08008634 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8008638:	4802      	ldr	r0, [pc, #8]	; (8008644 <CAN1_RX0_IRQHandler+0x10>)
 800863a:	f7f9 fc50 	bl	8001ede <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800863e:	bf00      	nop
 8008640:	bd80      	pop	{r7, pc}
 8008642:	bf00      	nop
 8008644:	20000460 	.word	0x20000460

08008648 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800864c:	4802      	ldr	r0, [pc, #8]	; (8008658 <SPI2_IRQHandler+0x10>)
 800864e:	f7fb fae1 	bl	8003c14 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8008652:	bf00      	nop
 8008654:	bd80      	pop	{r7, pc}
 8008656:	bf00      	nop
 8008658:	20000488 	.word	0x20000488

0800865c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8008660:	4802      	ldr	r0, [pc, #8]	; (800866c <USART2_IRQHandler+0x10>)
 8008662:	f7fc ff0f 	bl	8005484 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8008666:	bf00      	nop
 8008668:	bd80      	pop	{r7, pc}
 800866a:	bf00      	nop
 800866c:	20000578 	.word	0x20000578

08008670 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8008674:	4802      	ldr	r0, [pc, #8]	; (8008680 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8008676:	f7fb ff5f 	bl	8004538 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800867a:	bf00      	nop
 800867c:	bd80      	pop	{r7, pc}
 800867e:	bf00      	nop
 8008680:	20000538 	.word	0x20000538

08008684 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8008688:	4802      	ldr	r0, [pc, #8]	; (8008694 <DMA2_Stream0_IRQHandler+0x10>)
 800868a:	f7fa f875 	bl	8002778 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800868e:	bf00      	nop
 8008690:	bd80      	pop	{r7, pc}
 8008692:	bf00      	nop
 8008694:	20000354 	.word	0x20000354

08008698 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800869c:	4802      	ldr	r0, [pc, #8]	; (80086a8 <DMA2_Stream1_IRQHandler+0x10>)
 800869e:	f7fa f86b 	bl	8002778 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80086a2:	bf00      	nop
 80086a4:	bd80      	pop	{r7, pc}
 80086a6:	bf00      	nop
 80086a8:	20000264 	.word	0x20000264

080086ac <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80086b0:	4802      	ldr	r0, [pc, #8]	; (80086bc <DMA2_Stream2_IRQHandler+0x10>)
 80086b2:	f7fa f861 	bl	8002778 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80086b6:	bf00      	nop
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	bf00      	nop
 80086bc:	200003b4 	.word	0x200003b4

080086c0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b086      	sub	sp, #24
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	60f8      	str	r0, [r7, #12]
 80086c8:	60b9      	str	r1, [r7, #8]
 80086ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80086cc:	2300      	movs	r3, #0
 80086ce:	617b      	str	r3, [r7, #20]
 80086d0:	e00a      	b.n	80086e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80086d2:	f3af 8000 	nop.w
 80086d6:	4601      	mov	r1, r0
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	1c5a      	adds	r2, r3, #1
 80086dc:	60ba      	str	r2, [r7, #8]
 80086de:	b2ca      	uxtb	r2, r1
 80086e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	3301      	adds	r3, #1
 80086e6:	617b      	str	r3, [r7, #20]
 80086e8:	697a      	ldr	r2, [r7, #20]
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	429a      	cmp	r2, r3
 80086ee:	dbf0      	blt.n	80086d2 <_read+0x12>
	}

return len;
 80086f0:	687b      	ldr	r3, [r7, #4]
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3718      	adds	r7, #24
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}

080086fa <_close>:
	}
	return len;
}

int _close(int file)
{
 80086fa:	b480      	push	{r7}
 80086fc:	b083      	sub	sp, #12
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
	return -1;
 8008702:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008706:	4618      	mov	r0, r3
 8008708:	370c      	adds	r7, #12
 800870a:	46bd      	mov	sp, r7
 800870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008710:	4770      	bx	lr

08008712 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008712:	b480      	push	{r7}
 8008714:	b083      	sub	sp, #12
 8008716:	af00      	add	r7, sp, #0
 8008718:	6078      	str	r0, [r7, #4]
 800871a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008722:	605a      	str	r2, [r3, #4]
	return 0;
 8008724:	2300      	movs	r3, #0
}
 8008726:	4618      	mov	r0, r3
 8008728:	370c      	adds	r7, #12
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr

08008732 <_isatty>:

int _isatty(int file)
{
 8008732:	b480      	push	{r7}
 8008734:	b083      	sub	sp, #12
 8008736:	af00      	add	r7, sp, #0
 8008738:	6078      	str	r0, [r7, #4]
	return 1;
 800873a:	2301      	movs	r3, #1
}
 800873c:	4618      	mov	r0, r3
 800873e:	370c      	adds	r7, #12
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr

08008748 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008748:	b480      	push	{r7}
 800874a:	b085      	sub	sp, #20
 800874c:	af00      	add	r7, sp, #0
 800874e:	60f8      	str	r0, [r7, #12]
 8008750:	60b9      	str	r1, [r7, #8]
 8008752:	607a      	str	r2, [r7, #4]
	return 0;
 8008754:	2300      	movs	r3, #0
}
 8008756:	4618      	mov	r0, r3
 8008758:	3714      	adds	r7, #20
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr
	...

08008764 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b084      	sub	sp, #16
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800876c:	4b11      	ldr	r3, [pc, #68]	; (80087b4 <_sbrk+0x50>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d102      	bne.n	800877a <_sbrk+0x16>
		heap_end = &end;
 8008774:	4b0f      	ldr	r3, [pc, #60]	; (80087b4 <_sbrk+0x50>)
 8008776:	4a10      	ldr	r2, [pc, #64]	; (80087b8 <_sbrk+0x54>)
 8008778:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800877a:	4b0e      	ldr	r3, [pc, #56]	; (80087b4 <_sbrk+0x50>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008780:	4b0c      	ldr	r3, [pc, #48]	; (80087b4 <_sbrk+0x50>)
 8008782:	681a      	ldr	r2, [r3, #0]
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	4413      	add	r3, r2
 8008788:	466a      	mov	r2, sp
 800878a:	4293      	cmp	r3, r2
 800878c:	d907      	bls.n	800879e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800878e:	f000 fae5 	bl	8008d5c <__errno>
 8008792:	4602      	mov	r2, r0
 8008794:	230c      	movs	r3, #12
 8008796:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8008798:	f04f 33ff 	mov.w	r3, #4294967295
 800879c:	e006      	b.n	80087ac <_sbrk+0x48>
	}

	heap_end += incr;
 800879e:	4b05      	ldr	r3, [pc, #20]	; (80087b4 <_sbrk+0x50>)
 80087a0:	681a      	ldr	r2, [r3, #0]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4413      	add	r3, r2
 80087a6:	4a03      	ldr	r2, [pc, #12]	; (80087b4 <_sbrk+0x50>)
 80087a8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80087aa:	68fb      	ldr	r3, [r7, #12]
}
 80087ac:	4618      	mov	r0, r3
 80087ae:	3710      	adds	r7, #16
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}
 80087b4:	200001e8 	.word	0x200001e8
 80087b8:	200005c0 	.word	0x200005c0

080087bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80087bc:	b480      	push	{r7}
 80087be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80087c0:	4b16      	ldr	r3, [pc, #88]	; (800881c <SystemInit+0x60>)
 80087c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087c6:	4a15      	ldr	r2, [pc, #84]	; (800881c <SystemInit+0x60>)
 80087c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80087cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80087d0:	4b13      	ldr	r3, [pc, #76]	; (8008820 <SystemInit+0x64>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a12      	ldr	r2, [pc, #72]	; (8008820 <SystemInit+0x64>)
 80087d6:	f043 0301 	orr.w	r3, r3, #1
 80087da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80087dc:	4b10      	ldr	r3, [pc, #64]	; (8008820 <SystemInit+0x64>)
 80087de:	2200      	movs	r2, #0
 80087e0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80087e2:	4b0f      	ldr	r3, [pc, #60]	; (8008820 <SystemInit+0x64>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a0e      	ldr	r2, [pc, #56]	; (8008820 <SystemInit+0x64>)
 80087e8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80087ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087f0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80087f2:	4b0b      	ldr	r3, [pc, #44]	; (8008820 <SystemInit+0x64>)
 80087f4:	4a0b      	ldr	r2, [pc, #44]	; (8008824 <SystemInit+0x68>)
 80087f6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80087f8:	4b09      	ldr	r3, [pc, #36]	; (8008820 <SystemInit+0x64>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a08      	ldr	r2, [pc, #32]	; (8008820 <SystemInit+0x64>)
 80087fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008802:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8008804:	4b06      	ldr	r3, [pc, #24]	; (8008820 <SystemInit+0x64>)
 8008806:	2200      	movs	r2, #0
 8008808:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800880a:	4b04      	ldr	r3, [pc, #16]	; (800881c <SystemInit+0x60>)
 800880c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008810:	609a      	str	r2, [r3, #8]
#endif
}
 8008812:	bf00      	nop
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr
 800881c:	e000ed00 	.word	0xe000ed00
 8008820:	40023800 	.word	0x40023800
 8008824:	24003010 	.word	0x24003010

08008828 <MX_TIM8_Init>:

TIM_HandleTypeDef htim8;

/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b096      	sub	sp, #88	; 0x58
 800882c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800882e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8008832:	2200      	movs	r2, #0
 8008834:	601a      	str	r2, [r3, #0]
 8008836:	605a      	str	r2, [r3, #4]
 8008838:	609a      	str	r2, [r3, #8]
 800883a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800883c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008840:	2200      	movs	r2, #0
 8008842:	601a      	str	r2, [r3, #0]
 8008844:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008846:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800884a:	2200      	movs	r2, #0
 800884c:	601a      	str	r2, [r3, #0]
 800884e:	605a      	str	r2, [r3, #4]
 8008850:	609a      	str	r2, [r3, #8]
 8008852:	60da      	str	r2, [r3, #12]
 8008854:	611a      	str	r2, [r3, #16]
 8008856:	615a      	str	r2, [r3, #20]
 8008858:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800885a:	1d3b      	adds	r3, r7, #4
 800885c:	2220      	movs	r2, #32
 800885e:	2100      	movs	r1, #0
 8008860:	4618      	mov	r0, r3
 8008862:	f000 faa5 	bl	8008db0 <memset>

  htim8.Instance = TIM8;
 8008866:	4b4a      	ldr	r3, [pc, #296]	; (8008990 <MX_TIM8_Init+0x168>)
 8008868:	4a4a      	ldr	r2, [pc, #296]	; (8008994 <MX_TIM8_Init+0x16c>)
 800886a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800886c:	4b48      	ldr	r3, [pc, #288]	; (8008990 <MX_TIM8_Init+0x168>)
 800886e:	2200      	movs	r2, #0
 8008870:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8008872:	4b47      	ldr	r3, [pc, #284]	; (8008990 <MX_TIM8_Init+0x168>)
 8008874:	2220      	movs	r2, #32
 8008876:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 8000;
 8008878:	4b45      	ldr	r3, [pc, #276]	; (8008990 <MX_TIM8_Init+0x168>)
 800887a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800887e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008880:	4b43      	ldr	r3, [pc, #268]	; (8008990 <MX_TIM8_Init+0x168>)
 8008882:	2200      	movs	r2, #0
 8008884:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8008886:	4b42      	ldr	r3, [pc, #264]	; (8008990 <MX_TIM8_Init+0x168>)
 8008888:	2200      	movs	r2, #0
 800888a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800888c:	4b40      	ldr	r3, [pc, #256]	; (8008990 <MX_TIM8_Init+0x168>)
 800888e:	2280      	movs	r2, #128	; 0x80
 8008890:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8008892:	483f      	ldr	r0, [pc, #252]	; (8008990 <MX_TIM8_Init+0x168>)
 8008894:	f7fb fcd2 	bl	800423c <HAL_TIM_Base_Init>
 8008898:	4603      	mov	r3, r0
 800889a:	2b00      	cmp	r3, #0
 800889c:	d001      	beq.n	80088a2 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800889e:	f7fe ff01 	bl	80076a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80088a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80088a6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80088a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80088ac:	4619      	mov	r1, r3
 80088ae:	4838      	ldr	r0, [pc, #224]	; (8008990 <MX_TIM8_Init+0x168>)
 80088b0:	f7fc f810 	bl	80048d4 <HAL_TIM_ConfigClockSource>
 80088b4:	4603      	mov	r3, r0
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d001      	beq.n	80088be <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80088ba:	f7fe fef3 	bl	80076a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80088be:	4834      	ldr	r0, [pc, #208]	; (8008990 <MX_TIM8_Init+0x168>)
 80088c0:	f7fb fce7 	bl	8004292 <HAL_TIM_PWM_Init>
 80088c4:	4603      	mov	r3, r0
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d001      	beq.n	80088ce <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80088ca:	f7fe feeb 	bl	80076a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80088ce:	2320      	movs	r3, #32
 80088d0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80088d2:	2300      	movs	r3, #0
 80088d4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80088d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80088da:	4619      	mov	r1, r3
 80088dc:	482c      	ldr	r0, [pc, #176]	; (8008990 <MX_TIM8_Init+0x168>)
 80088de:	f7fc fcb3 	bl	8005248 <HAL_TIMEx_MasterConfigSynchronization>
 80088e2:	4603      	mov	r3, r0
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d001      	beq.n	80088ec <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80088e8:	f7fe fedc 	bl	80076a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80088ec:	2360      	movs	r3, #96	; 0x60
 80088ee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 4000;
 80088f0:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80088f4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80088f6:	2300      	movs	r3, #0
 80088f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80088fa:	2300      	movs	r3, #0
 80088fc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80088fe:	2300      	movs	r3, #0
 8008900:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008902:	2300      	movs	r3, #0
 8008904:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008906:	2300      	movs	r3, #0
 8008908:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800890a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800890e:	2200      	movs	r2, #0
 8008910:	4619      	mov	r1, r3
 8008912:	481f      	ldr	r0, [pc, #124]	; (8008990 <MX_TIM8_Init+0x168>)
 8008914:	f7fb ff18 	bl	8004748 <HAL_TIM_PWM_ConfigChannel>
 8008918:	4603      	mov	r3, r0
 800891a:	2b00      	cmp	r3, #0
 800891c:	d001      	beq.n	8008922 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 800891e:	f7fe fec1 	bl	80076a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008922:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008926:	2204      	movs	r2, #4
 8008928:	4619      	mov	r1, r3
 800892a:	4819      	ldr	r0, [pc, #100]	; (8008990 <MX_TIM8_Init+0x168>)
 800892c:	f7fb ff0c 	bl	8004748 <HAL_TIM_PWM_ConfigChannel>
 8008930:	4603      	mov	r3, r0
 8008932:	2b00      	cmp	r3, #0
 8008934:	d001      	beq.n	800893a <MX_TIM8_Init+0x112>
  {
    Error_Handler();
 8008936:	f7fe feb5 	bl	80076a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800893a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800893e:	2208      	movs	r2, #8
 8008940:	4619      	mov	r1, r3
 8008942:	4813      	ldr	r0, [pc, #76]	; (8008990 <MX_TIM8_Init+0x168>)
 8008944:	f7fb ff00 	bl	8004748 <HAL_TIM_PWM_ConfigChannel>
 8008948:	4603      	mov	r3, r0
 800894a:	2b00      	cmp	r3, #0
 800894c:	d001      	beq.n	8008952 <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 800894e:	f7fe fea9 	bl	80076a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8008952:	2300      	movs	r3, #0
 8008954:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8008956:	2300      	movs	r3, #0
 8008958:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800895a:	2300      	movs	r3, #0
 800895c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 40;
 800895e:	2328      	movs	r3, #40	; 0x28
 8008960:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8008962:	2300      	movs	r3, #0
 8008964:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 8008966:	2300      	movs	r3, #0
 8008968:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800896a:	2300      	movs	r3, #0
 800896c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800896e:	1d3b      	adds	r3, r7, #4
 8008970:	4619      	mov	r1, r3
 8008972:	4807      	ldr	r0, [pc, #28]	; (8008990 <MX_TIM8_Init+0x168>)
 8008974:	f7fc fcad 	bl	80052d2 <HAL_TIMEx_ConfigBreakDeadTime>
 8008978:	4603      	mov	r3, r0
 800897a:	2b00      	cmp	r3, #0
 800897c:	d001      	beq.n	8008982 <MX_TIM8_Init+0x15a>
  {
    Error_Handler();
 800897e:	f7fe fe91 	bl	80076a4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8008982:	4803      	ldr	r0, [pc, #12]	; (8008990 <MX_TIM8_Init+0x168>)
 8008984:	f000 f830 	bl	80089e8 <HAL_TIM_MspPostInit>

}
 8008988:	bf00      	nop
 800898a:	3758      	adds	r7, #88	; 0x58
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}
 8008990:	20000538 	.word	0x20000538
 8008994:	40010400 	.word	0x40010400

08008998 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b084      	sub	sp, #16
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4a0e      	ldr	r2, [pc, #56]	; (80089e0 <HAL_TIM_Base_MspInit+0x48>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d115      	bne.n	80089d6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80089aa:	2300      	movs	r3, #0
 80089ac:	60fb      	str	r3, [r7, #12]
 80089ae:	4b0d      	ldr	r3, [pc, #52]	; (80089e4 <HAL_TIM_Base_MspInit+0x4c>)
 80089b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089b2:	4a0c      	ldr	r2, [pc, #48]	; (80089e4 <HAL_TIM_Base_MspInit+0x4c>)
 80089b4:	f043 0302 	orr.w	r3, r3, #2
 80089b8:	6453      	str	r3, [r2, #68]	; 0x44
 80089ba:	4b0a      	ldr	r3, [pc, #40]	; (80089e4 <HAL_TIM_Base_MspInit+0x4c>)
 80089bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089be:	f003 0302 	and.w	r3, r3, #2
 80089c2:	60fb      	str	r3, [r7, #12]
 80089c4:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80089c6:	2200      	movs	r2, #0
 80089c8:	2100      	movs	r1, #0
 80089ca:	202c      	movs	r0, #44	; 0x2c
 80089cc:	f7f9 fd6d 	bl	80024aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80089d0:	202c      	movs	r0, #44	; 0x2c
 80089d2:	f7f9 fd86 	bl	80024e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80089d6:	bf00      	nop
 80089d8:	3710      	adds	r7, #16
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}
 80089de:	bf00      	nop
 80089e0:	40010400 	.word	0x40010400
 80089e4:	40023800 	.word	0x40023800

080089e8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b08a      	sub	sp, #40	; 0x28
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80089f0:	f107 0314 	add.w	r3, r7, #20
 80089f4:	2200      	movs	r2, #0
 80089f6:	601a      	str	r2, [r3, #0]
 80089f8:	605a      	str	r2, [r3, #4]
 80089fa:	609a      	str	r2, [r3, #8]
 80089fc:	60da      	str	r2, [r3, #12]
 80089fe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a30      	ldr	r2, [pc, #192]	; (8008ac8 <HAL_TIM_MspPostInit+0xe0>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d15a      	bne.n	8008ac0 <HAL_TIM_MspPostInit+0xd8>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	613b      	str	r3, [r7, #16]
 8008a0e:	4b2f      	ldr	r3, [pc, #188]	; (8008acc <HAL_TIM_MspPostInit+0xe4>)
 8008a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a12:	4a2e      	ldr	r2, [pc, #184]	; (8008acc <HAL_TIM_MspPostInit+0xe4>)
 8008a14:	f043 0301 	orr.w	r3, r3, #1
 8008a18:	6313      	str	r3, [r2, #48]	; 0x30
 8008a1a:	4b2c      	ldr	r3, [pc, #176]	; (8008acc <HAL_TIM_MspPostInit+0xe4>)
 8008a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a1e:	f003 0301 	and.w	r3, r3, #1
 8008a22:	613b      	str	r3, [r7, #16]
 8008a24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008a26:	2300      	movs	r3, #0
 8008a28:	60fb      	str	r3, [r7, #12]
 8008a2a:	4b28      	ldr	r3, [pc, #160]	; (8008acc <HAL_TIM_MspPostInit+0xe4>)
 8008a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a2e:	4a27      	ldr	r2, [pc, #156]	; (8008acc <HAL_TIM_MspPostInit+0xe4>)
 8008a30:	f043 0302 	orr.w	r3, r3, #2
 8008a34:	6313      	str	r3, [r2, #48]	; 0x30
 8008a36:	4b25      	ldr	r3, [pc, #148]	; (8008acc <HAL_TIM_MspPostInit+0xe4>)
 8008a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a3a:	f003 0302 	and.w	r3, r3, #2
 8008a3e:	60fb      	str	r3, [r7, #12]
 8008a40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008a42:	2300      	movs	r3, #0
 8008a44:	60bb      	str	r3, [r7, #8]
 8008a46:	4b21      	ldr	r3, [pc, #132]	; (8008acc <HAL_TIM_MspPostInit+0xe4>)
 8008a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a4a:	4a20      	ldr	r2, [pc, #128]	; (8008acc <HAL_TIM_MspPostInit+0xe4>)
 8008a4c:	f043 0304 	orr.w	r3, r3, #4
 8008a50:	6313      	str	r3, [r2, #48]	; 0x30
 8008a52:	4b1e      	ldr	r3, [pc, #120]	; (8008acc <HAL_TIM_MspPostInit+0xe4>)
 8008a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a56:	f003 0304 	and.w	r3, r3, #4
 8008a5a:	60bb      	str	r3, [r7, #8]
 8008a5c:	68bb      	ldr	r3, [r7, #8]
    PB1     ------> TIM8_CH3N
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8008a5e:	2380      	movs	r3, #128	; 0x80
 8008a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a62:	2302      	movs	r3, #2
 8008a64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a66:	2300      	movs	r3, #0
 8008a68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8008a6e:	2303      	movs	r3, #3
 8008a70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a72:	f107 0314 	add.w	r3, r7, #20
 8008a76:	4619      	mov	r1, r3
 8008a78:	4815      	ldr	r0, [pc, #84]	; (8008ad0 <HAL_TIM_MspPostInit+0xe8>)
 8008a7a:	f7fa f8e5 	bl	8002c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8008a7e:	2303      	movs	r3, #3
 8008a80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a82:	2302      	movs	r3, #2
 8008a84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a86:	2300      	movs	r3, #0
 8008a88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8008a8e:	2303      	movs	r3, #3
 8008a90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008a92:	f107 0314 	add.w	r3, r7, #20
 8008a96:	4619      	mov	r1, r3
 8008a98:	480e      	ldr	r0, [pc, #56]	; (8008ad4 <HAL_TIM_MspPostInit+0xec>)
 8008a9a:	f7fa f8d5 	bl	8002c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8008a9e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8008aa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008aa4:	2302      	movs	r3, #2
 8008aa6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008aac:	2300      	movs	r3, #0
 8008aae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8008ab0:	2303      	movs	r3, #3
 8008ab2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008ab4:	f107 0314 	add.w	r3, r7, #20
 8008ab8:	4619      	mov	r1, r3
 8008aba:	4807      	ldr	r0, [pc, #28]	; (8008ad8 <HAL_TIM_MspPostInit+0xf0>)
 8008abc:	f7fa f8c4 	bl	8002c48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8008ac0:	bf00      	nop
 8008ac2:	3728      	adds	r7, #40	; 0x28
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}
 8008ac8:	40010400 	.word	0x40010400
 8008acc:	40023800 	.word	0x40023800
 8008ad0:	40020000 	.word	0x40020000
 8008ad4:	40020400 	.word	0x40020400
 8008ad8:	40020800 	.word	0x40020800

08008adc <TIM_Init>:
/* USER CODE BEGIN 1 */



void TIM_Init()
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	af00      	add	r7, sp, #0
	  __HAL_TIM_DISABLE_IT(&htim8, TIM_IT_CC2);
	  __HAL_TIM_DISABLE_IT(&htim8, TIM_IT_CC3);
	  __HAL_TIM_DISABLE_IT(&htim8, TIM_IT_CC4);
	  __HAL_TIM_DISABLE_IT(&htim8, TIM_IT_COM);
	  __HAL_TIM_DISABLE_IT(&htim8, TIM_IT_BREAK);*/
	  __HAL_TIM_CLEAR_FLAG(&htim8, TIM_FLAG_UPDATE);
 8008ae0:	4b08      	ldr	r3, [pc, #32]	; (8008b04 <TIM_Init+0x28>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	f06f 0201 	mvn.w	r2, #1
 8008ae8:	611a      	str	r2, [r3, #16]
	  __HAL_TIM_ENABLE_IT(&htim8, TIM_IT_UPDATE);
 8008aea:	4b06      	ldr	r3, [pc, #24]	; (8008b04 <TIM_Init+0x28>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	68da      	ldr	r2, [r3, #12]
 8008af0:	4b04      	ldr	r3, [pc, #16]	; (8008b04 <TIM_Init+0x28>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f042 0201 	orr.w	r2, r2, #1
 8008af8:	60da      	str	r2, [r3, #12]


	  startPWM();
 8008afa:	f000 f805 	bl	8008b08 <startPWM>


}
 8008afe:	bf00      	nop
 8008b00:	bd80      	pop	{r7, pc}
 8008b02:	bf00      	nop
 8008b04:	20000538 	.word	0x20000538

08008b08 <startPWM>:



inline void startPWM()
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	af00      	add	r7, sp, #0


	// 3phase PWM Starting
	HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_1);
 8008b0c:	2100      	movs	r1, #0
 8008b0e:	480c      	ldr	r0, [pc, #48]	; (8008b40 <startPWM+0x38>)
 8008b10:	f7fb fbf4 	bl	80042fc <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_2);
 8008b14:	2104      	movs	r1, #4
 8008b16:	480a      	ldr	r0, [pc, #40]	; (8008b40 <startPWM+0x38>)
 8008b18:	f7fb fbf0 	bl	80042fc <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_3);
 8008b1c:	2108      	movs	r1, #8
 8008b1e:	4808      	ldr	r0, [pc, #32]	; (8008b40 <startPWM+0x38>)
 8008b20:	f7fb fbec 	bl	80042fc <HAL_TIM_PWM_Start_IT>

	HAL_TIMEx_PWMN_Start_IT(&htim8, TIM_CHANNEL_1);
 8008b24:	2100      	movs	r1, #0
 8008b26:	4806      	ldr	r0, [pc, #24]	; (8008b40 <startPWM+0x38>)
 8008b28:	f7fc fac3 	bl	80050b2 <HAL_TIMEx_PWMN_Start_IT>
	HAL_TIMEx_PWMN_Start_IT(&htim8, TIM_CHANNEL_2);
 8008b2c:	2104      	movs	r1, #4
 8008b2e:	4804      	ldr	r0, [pc, #16]	; (8008b40 <startPWM+0x38>)
 8008b30:	f7fc fabf 	bl	80050b2 <HAL_TIMEx_PWMN_Start_IT>
	HAL_TIMEx_PWMN_Start_IT(&htim8, TIM_CHANNEL_3);
 8008b34:	2108      	movs	r1, #8
 8008b36:	4802      	ldr	r0, [pc, #8]	; (8008b40 <startPWM+0x38>)
 8008b38:	f7fc fabb 	bl	80050b2 <HAL_TIMEx_PWMN_Start_IT>

}
 8008b3c:	bf00      	nop
 8008b3e:	bd80      	pop	{r7, pc}
 8008b40:	20000538 	.word	0x20000538

08008b44 <stopPWM>:



inline void stopPWM()
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	af00      	add	r7, sp, #0

	// 3phase PWM Stopping
	HAL_TIM_PWM_Stop_IT(&htim8, TIM_CHANNEL_1);
 8008b48:	2100      	movs	r1, #0
 8008b4a:	480c      	ldr	r0, [pc, #48]	; (8008b7c <stopPWM+0x38>)
 8008b4c:	f7fb fc5a 	bl	8004404 <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&htim8, TIM_CHANNEL_2);
 8008b50:	2104      	movs	r1, #4
 8008b52:	480a      	ldr	r0, [pc, #40]	; (8008b7c <stopPWM+0x38>)
 8008b54:	f7fb fc56 	bl	8004404 <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&htim8, TIM_CHANNEL_3);
 8008b58:	2108      	movs	r1, #8
 8008b5a:	4808      	ldr	r0, [pc, #32]	; (8008b7c <stopPWM+0x38>)
 8008b5c:	f7fb fc52 	bl	8004404 <HAL_TIM_PWM_Stop_IT>

	HAL_TIMEx_PWMN_Stop_IT(&htim8, TIM_CHANNEL_1);
 8008b60:	2100      	movs	r1, #0
 8008b62:	4806      	ldr	r0, [pc, #24]	; (8008b7c <stopPWM+0x38>)
 8008b64:	f7fc fafa 	bl	800515c <HAL_TIMEx_PWMN_Stop_IT>
	HAL_TIMEx_PWMN_Stop_IT(&htim8, TIM_CHANNEL_2);
 8008b68:	2104      	movs	r1, #4
 8008b6a:	4804      	ldr	r0, [pc, #16]	; (8008b7c <stopPWM+0x38>)
 8008b6c:	f7fc faf6 	bl	800515c <HAL_TIMEx_PWMN_Stop_IT>
	HAL_TIMEx_PWMN_Stop_IT(&htim8, TIM_CHANNEL_3);
 8008b70:	2108      	movs	r1, #8
 8008b72:	4802      	ldr	r0, [pc, #8]	; (8008b7c <stopPWM+0x38>)
 8008b74:	f7fc faf2 	bl	800515c <HAL_TIMEx_PWMN_Stop_IT>

}
 8008b78:	bf00      	nop
 8008b7a:	bd80      	pop	{r7, pc}
 8008b7c:	20000538 	.word	0x20000538

08008b80 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim)
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b082      	sub	sp, #8
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM8)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a11      	ldr	r2, [pc, #68]	; (8008bd4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d11b      	bne.n	8008bca <HAL_TIM_PeriodElapsedCallback+0x4a>
	{

		if(!__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f003 0310 	and.w	r3, r3, #16
 8008b9c:	2b10      	cmp	r3, #16
 8008b9e:	d014      	beq.n	8008bca <HAL_TIM_PeriodElapsedCallback+0x4a>
		{

			currentControl();
 8008ba0:	f7fd f8c2 	bl	8005d28 <currentControl>

			// timeout control
			if(timeoutCount < TIMEOUT_MS * PWM_FREQ / 1000)
 8008ba4:	4b0c      	ldr	r3, [pc, #48]	; (8008bd8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8008bac:	d205      	bcs.n	8008bba <HAL_TIM_PeriodElapsedCallback+0x3a>
			{
				timeoutCount += 1;
 8008bae:	4b0a      	ldr	r3, [pc, #40]	; (8008bd8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	3301      	adds	r3, #1
 8008bb4:	4a08      	ldr	r2, [pc, #32]	; (8008bd8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8008bb6:	6013      	str	r3, [r2, #0]
		}


	}

}
 8008bb8:	e007      	b.n	8008bca <HAL_TIM_PeriodElapsedCallback+0x4a>
				stopPWM();
 8008bba:	f7ff ffc3 	bl	8008b44 <stopPWM>
				timeoutCount = 0;
 8008bbe:	4b06      	ldr	r3, [pc, #24]	; (8008bd8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	601a      	str	r2, [r3, #0]
				timeoutState = 1;
 8008bc4:	4b05      	ldr	r3, [pc, #20]	; (8008bdc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	701a      	strb	r2, [r3, #0]
}
 8008bca:	bf00      	nop
 8008bcc:	3708      	adds	r7, #8
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}
 8008bd2:	bf00      	nop
 8008bd4:	40010400 	.word	0x40010400
 8008bd8:	200001f8 	.word	0x200001f8
 8008bdc:	200001fc 	.word	0x200001fc

08008be0 <timeoutReset>:


inline void timeoutReset()
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	af00      	add	r7, sp, #0
	timeoutCount = 0;
 8008be4:	4b09      	ldr	r3, [pc, #36]	; (8008c0c <timeoutReset+0x2c>)
 8008be6:	2200      	movs	r2, #0
 8008be8:	601a      	str	r2, [r3, #0]
	if(timeoutState == 1)
 8008bea:	4b09      	ldr	r3, [pc, #36]	; (8008c10 <timeoutReset+0x30>)
 8008bec:	781b      	ldrb	r3, [r3, #0]
 8008bee:	b2db      	uxtb	r3, r3
 8008bf0:	2b01      	cmp	r3, #1
 8008bf2:	d108      	bne.n	8008c06 <timeoutReset+0x26>
	{
		timeoutState = 0;
 8008bf4:	4b06      	ldr	r3, [pc, #24]	; (8008c10 <timeoutReset+0x30>)
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	701a      	strb	r2, [r3, #0]
		ASR_Reset();
 8008bfa:	f7fd fce7 	bl	80065cc <ASR_Reset>
		ACR_Reset();
 8008bfe:	f7fd faed 	bl	80061dc <ACR_Reset>
		startPWM();
 8008c02:	f7ff ff81 	bl	8008b08 <startPWM>
	}
}
 8008c06:	bf00      	nop
 8008c08:	bd80      	pop	{r7, pc}
 8008c0a:	bf00      	nop
 8008c0c:	200001f8 	.word	0x200001f8
 8008c10:	200001fc 	.word	0x200001fc

08008c14 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8008c18:	4b11      	ldr	r3, [pc, #68]	; (8008c60 <MX_USART2_UART_Init+0x4c>)
 8008c1a:	4a12      	ldr	r2, [pc, #72]	; (8008c64 <MX_USART2_UART_Init+0x50>)
 8008c1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8008c1e:	4b10      	ldr	r3, [pc, #64]	; (8008c60 <MX_USART2_UART_Init+0x4c>)
 8008c20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008c24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008c26:	4b0e      	ldr	r3, [pc, #56]	; (8008c60 <MX_USART2_UART_Init+0x4c>)
 8008c28:	2200      	movs	r2, #0
 8008c2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008c2c:	4b0c      	ldr	r3, [pc, #48]	; (8008c60 <MX_USART2_UART_Init+0x4c>)
 8008c2e:	2200      	movs	r2, #0
 8008c30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008c32:	4b0b      	ldr	r3, [pc, #44]	; (8008c60 <MX_USART2_UART_Init+0x4c>)
 8008c34:	2200      	movs	r2, #0
 8008c36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008c38:	4b09      	ldr	r3, [pc, #36]	; (8008c60 <MX_USART2_UART_Init+0x4c>)
 8008c3a:	220c      	movs	r2, #12
 8008c3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008c3e:	4b08      	ldr	r3, [pc, #32]	; (8008c60 <MX_USART2_UART_Init+0x4c>)
 8008c40:	2200      	movs	r2, #0
 8008c42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008c44:	4b06      	ldr	r3, [pc, #24]	; (8008c60 <MX_USART2_UART_Init+0x4c>)
 8008c46:	2200      	movs	r2, #0
 8008c48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008c4a:	4805      	ldr	r0, [pc, #20]	; (8008c60 <MX_USART2_UART_Init+0x4c>)
 8008c4c:	f7fc fbcc 	bl	80053e8 <HAL_UART_Init>
 8008c50:	4603      	mov	r3, r0
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d001      	beq.n	8008c5a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8008c56:	f7fe fd25 	bl	80076a4 <Error_Handler>
  }

}
 8008c5a:	bf00      	nop
 8008c5c:	bd80      	pop	{r7, pc}
 8008c5e:	bf00      	nop
 8008c60:	20000578 	.word	0x20000578
 8008c64:	40004400 	.word	0x40004400

08008c68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b08a      	sub	sp, #40	; 0x28
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c70:	f107 0314 	add.w	r3, r7, #20
 8008c74:	2200      	movs	r2, #0
 8008c76:	601a      	str	r2, [r3, #0]
 8008c78:	605a      	str	r2, [r3, #4]
 8008c7a:	609a      	str	r2, [r3, #8]
 8008c7c:	60da      	str	r2, [r3, #12]
 8008c7e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	4a1d      	ldr	r2, [pc, #116]	; (8008cfc <HAL_UART_MspInit+0x94>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d133      	bne.n	8008cf2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	613b      	str	r3, [r7, #16]
 8008c8e:	4b1c      	ldr	r3, [pc, #112]	; (8008d00 <HAL_UART_MspInit+0x98>)
 8008c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c92:	4a1b      	ldr	r2, [pc, #108]	; (8008d00 <HAL_UART_MspInit+0x98>)
 8008c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c98:	6413      	str	r3, [r2, #64]	; 0x40
 8008c9a:	4b19      	ldr	r3, [pc, #100]	; (8008d00 <HAL_UART_MspInit+0x98>)
 8008c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ca2:	613b      	str	r3, [r7, #16]
 8008ca4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	60fb      	str	r3, [r7, #12]
 8008caa:	4b15      	ldr	r3, [pc, #84]	; (8008d00 <HAL_UART_MspInit+0x98>)
 8008cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cae:	4a14      	ldr	r2, [pc, #80]	; (8008d00 <HAL_UART_MspInit+0x98>)
 8008cb0:	f043 0301 	orr.w	r3, r3, #1
 8008cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8008cb6:	4b12      	ldr	r3, [pc, #72]	; (8008d00 <HAL_UART_MspInit+0x98>)
 8008cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cba:	f003 0301 	and.w	r3, r3, #1
 8008cbe:	60fb      	str	r3, [r7, #12]
 8008cc0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8008cc2:	230c      	movs	r3, #12
 8008cc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008cc6:	2302      	movs	r3, #2
 8008cc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008cca:	2301      	movs	r3, #1
 8008ccc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008cce:	2303      	movs	r3, #3
 8008cd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008cd2:	2307      	movs	r3, #7
 8008cd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008cd6:	f107 0314 	add.w	r3, r7, #20
 8008cda:	4619      	mov	r1, r3
 8008cdc:	4809      	ldr	r0, [pc, #36]	; (8008d04 <HAL_UART_MspInit+0x9c>)
 8008cde:	f7f9 ffb3 	bl	8002c48 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	2100      	movs	r1, #0
 8008ce6:	2026      	movs	r0, #38	; 0x26
 8008ce8:	f7f9 fbdf 	bl	80024aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8008cec:	2026      	movs	r0, #38	; 0x26
 8008cee:	f7f9 fbf8 	bl	80024e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8008cf2:	bf00      	nop
 8008cf4:	3728      	adds	r7, #40	; 0x28
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}
 8008cfa:	bf00      	nop
 8008cfc:	40004400 	.word	0x40004400
 8008d00:	40023800 	.word	0x40023800
 8008d04:	40020000 	.word	0x40020000

08008d08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8008d08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008d40 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008d0c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008d0e:	e003      	b.n	8008d18 <LoopCopyDataInit>

08008d10 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008d10:	4b0c      	ldr	r3, [pc, #48]	; (8008d44 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008d12:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008d14:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008d16:	3104      	adds	r1, #4

08008d18 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008d18:	480b      	ldr	r0, [pc, #44]	; (8008d48 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008d1a:	4b0c      	ldr	r3, [pc, #48]	; (8008d4c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008d1c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008d1e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008d20:	d3f6      	bcc.n	8008d10 <CopyDataInit>
  ldr  r2, =_sbss
 8008d22:	4a0b      	ldr	r2, [pc, #44]	; (8008d50 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008d24:	e002      	b.n	8008d2c <LoopFillZerobss>

08008d26 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008d26:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008d28:	f842 3b04 	str.w	r3, [r2], #4

08008d2c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008d2c:	4b09      	ldr	r3, [pc, #36]	; (8008d54 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008d2e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008d30:	d3f9      	bcc.n	8008d26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008d32:	f7ff fd43 	bl	80087bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008d36:	f000 f817 	bl	8008d68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008d3a:	f7fe fb81 	bl	8007440 <main>
  bx  lr    
 8008d3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008d40:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8008d44:	0801d800 	.word	0x0801d800
  ldr  r0, =_sdata
 8008d48:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008d4c:	200000a4 	.word	0x200000a4
  ldr  r2, =_sbss
 8008d50:	200000a4 	.word	0x200000a4
  ldr  r3, = _ebss
 8008d54:	200005bc 	.word	0x200005bc

08008d58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008d58:	e7fe      	b.n	8008d58 <ADC_IRQHandler>
	...

08008d5c <__errno>:
 8008d5c:	4b01      	ldr	r3, [pc, #4]	; (8008d64 <__errno+0x8>)
 8008d5e:	6818      	ldr	r0, [r3, #0]
 8008d60:	4770      	bx	lr
 8008d62:	bf00      	nop
 8008d64:	2000003c 	.word	0x2000003c

08008d68 <__libc_init_array>:
 8008d68:	b570      	push	{r4, r5, r6, lr}
 8008d6a:	4e0d      	ldr	r6, [pc, #52]	; (8008da0 <__libc_init_array+0x38>)
 8008d6c:	4c0d      	ldr	r4, [pc, #52]	; (8008da4 <__libc_init_array+0x3c>)
 8008d6e:	1ba4      	subs	r4, r4, r6
 8008d70:	10a4      	asrs	r4, r4, #2
 8008d72:	2500      	movs	r5, #0
 8008d74:	42a5      	cmp	r5, r4
 8008d76:	d109      	bne.n	8008d8c <__libc_init_array+0x24>
 8008d78:	4e0b      	ldr	r6, [pc, #44]	; (8008da8 <__libc_init_array+0x40>)
 8008d7a:	4c0c      	ldr	r4, [pc, #48]	; (8008dac <__libc_init_array+0x44>)
 8008d7c:	f001 f84e 	bl	8009e1c <_init>
 8008d80:	1ba4      	subs	r4, r4, r6
 8008d82:	10a4      	asrs	r4, r4, #2
 8008d84:	2500      	movs	r5, #0
 8008d86:	42a5      	cmp	r5, r4
 8008d88:	d105      	bne.n	8008d96 <__libc_init_array+0x2e>
 8008d8a:	bd70      	pop	{r4, r5, r6, pc}
 8008d8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008d90:	4798      	blx	r3
 8008d92:	3501      	adds	r5, #1
 8008d94:	e7ee      	b.n	8008d74 <__libc_init_array+0xc>
 8008d96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008d9a:	4798      	blx	r3
 8008d9c:	3501      	adds	r5, #1
 8008d9e:	e7f2      	b.n	8008d86 <__libc_init_array+0x1e>
 8008da0:	0801d7f8 	.word	0x0801d7f8
 8008da4:	0801d7f8 	.word	0x0801d7f8
 8008da8:	0801d7f8 	.word	0x0801d7f8
 8008dac:	0801d7fc 	.word	0x0801d7fc

08008db0 <memset>:
 8008db0:	4402      	add	r2, r0
 8008db2:	4603      	mov	r3, r0
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d100      	bne.n	8008dba <memset+0xa>
 8008db8:	4770      	bx	lr
 8008dba:	f803 1b01 	strb.w	r1, [r3], #1
 8008dbe:	e7f9      	b.n	8008db4 <memset+0x4>

08008dc0 <iprintf>:
 8008dc0:	b40f      	push	{r0, r1, r2, r3}
 8008dc2:	4b0a      	ldr	r3, [pc, #40]	; (8008dec <iprintf+0x2c>)
 8008dc4:	b513      	push	{r0, r1, r4, lr}
 8008dc6:	681c      	ldr	r4, [r3, #0]
 8008dc8:	b124      	cbz	r4, 8008dd4 <iprintf+0x14>
 8008dca:	69a3      	ldr	r3, [r4, #24]
 8008dcc:	b913      	cbnz	r3, 8008dd4 <iprintf+0x14>
 8008dce:	4620      	mov	r0, r4
 8008dd0:	f000 fa22 	bl	8009218 <__sinit>
 8008dd4:	ab05      	add	r3, sp, #20
 8008dd6:	9a04      	ldr	r2, [sp, #16]
 8008dd8:	68a1      	ldr	r1, [r4, #8]
 8008dda:	9301      	str	r3, [sp, #4]
 8008ddc:	4620      	mov	r0, r4
 8008dde:	f000 fbdb 	bl	8009598 <_vfiprintf_r>
 8008de2:	b002      	add	sp, #8
 8008de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008de8:	b004      	add	sp, #16
 8008dea:	4770      	bx	lr
 8008dec:	2000003c 	.word	0x2000003c

08008df0 <_puts_r>:
 8008df0:	b570      	push	{r4, r5, r6, lr}
 8008df2:	460e      	mov	r6, r1
 8008df4:	4605      	mov	r5, r0
 8008df6:	b118      	cbz	r0, 8008e00 <_puts_r+0x10>
 8008df8:	6983      	ldr	r3, [r0, #24]
 8008dfa:	b90b      	cbnz	r3, 8008e00 <_puts_r+0x10>
 8008dfc:	f000 fa0c 	bl	8009218 <__sinit>
 8008e00:	69ab      	ldr	r3, [r5, #24]
 8008e02:	68ac      	ldr	r4, [r5, #8]
 8008e04:	b913      	cbnz	r3, 8008e0c <_puts_r+0x1c>
 8008e06:	4628      	mov	r0, r5
 8008e08:	f000 fa06 	bl	8009218 <__sinit>
 8008e0c:	4b23      	ldr	r3, [pc, #140]	; (8008e9c <_puts_r+0xac>)
 8008e0e:	429c      	cmp	r4, r3
 8008e10:	d117      	bne.n	8008e42 <_puts_r+0x52>
 8008e12:	686c      	ldr	r4, [r5, #4]
 8008e14:	89a3      	ldrh	r3, [r4, #12]
 8008e16:	071b      	lsls	r3, r3, #28
 8008e18:	d51d      	bpl.n	8008e56 <_puts_r+0x66>
 8008e1a:	6923      	ldr	r3, [r4, #16]
 8008e1c:	b1db      	cbz	r3, 8008e56 <_puts_r+0x66>
 8008e1e:	3e01      	subs	r6, #1
 8008e20:	68a3      	ldr	r3, [r4, #8]
 8008e22:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008e26:	3b01      	subs	r3, #1
 8008e28:	60a3      	str	r3, [r4, #8]
 8008e2a:	b9e9      	cbnz	r1, 8008e68 <_puts_r+0x78>
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	da2e      	bge.n	8008e8e <_puts_r+0x9e>
 8008e30:	4622      	mov	r2, r4
 8008e32:	210a      	movs	r1, #10
 8008e34:	4628      	mov	r0, r5
 8008e36:	f000 f83f 	bl	8008eb8 <__swbuf_r>
 8008e3a:	3001      	adds	r0, #1
 8008e3c:	d011      	beq.n	8008e62 <_puts_r+0x72>
 8008e3e:	200a      	movs	r0, #10
 8008e40:	e011      	b.n	8008e66 <_puts_r+0x76>
 8008e42:	4b17      	ldr	r3, [pc, #92]	; (8008ea0 <_puts_r+0xb0>)
 8008e44:	429c      	cmp	r4, r3
 8008e46:	d101      	bne.n	8008e4c <_puts_r+0x5c>
 8008e48:	68ac      	ldr	r4, [r5, #8]
 8008e4a:	e7e3      	b.n	8008e14 <_puts_r+0x24>
 8008e4c:	4b15      	ldr	r3, [pc, #84]	; (8008ea4 <_puts_r+0xb4>)
 8008e4e:	429c      	cmp	r4, r3
 8008e50:	bf08      	it	eq
 8008e52:	68ec      	ldreq	r4, [r5, #12]
 8008e54:	e7de      	b.n	8008e14 <_puts_r+0x24>
 8008e56:	4621      	mov	r1, r4
 8008e58:	4628      	mov	r0, r5
 8008e5a:	f000 f87f 	bl	8008f5c <__swsetup_r>
 8008e5e:	2800      	cmp	r0, #0
 8008e60:	d0dd      	beq.n	8008e1e <_puts_r+0x2e>
 8008e62:	f04f 30ff 	mov.w	r0, #4294967295
 8008e66:	bd70      	pop	{r4, r5, r6, pc}
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	da04      	bge.n	8008e76 <_puts_r+0x86>
 8008e6c:	69a2      	ldr	r2, [r4, #24]
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	dc06      	bgt.n	8008e80 <_puts_r+0x90>
 8008e72:	290a      	cmp	r1, #10
 8008e74:	d004      	beq.n	8008e80 <_puts_r+0x90>
 8008e76:	6823      	ldr	r3, [r4, #0]
 8008e78:	1c5a      	adds	r2, r3, #1
 8008e7a:	6022      	str	r2, [r4, #0]
 8008e7c:	7019      	strb	r1, [r3, #0]
 8008e7e:	e7cf      	b.n	8008e20 <_puts_r+0x30>
 8008e80:	4622      	mov	r2, r4
 8008e82:	4628      	mov	r0, r5
 8008e84:	f000 f818 	bl	8008eb8 <__swbuf_r>
 8008e88:	3001      	adds	r0, #1
 8008e8a:	d1c9      	bne.n	8008e20 <_puts_r+0x30>
 8008e8c:	e7e9      	b.n	8008e62 <_puts_r+0x72>
 8008e8e:	6823      	ldr	r3, [r4, #0]
 8008e90:	200a      	movs	r0, #10
 8008e92:	1c5a      	adds	r2, r3, #1
 8008e94:	6022      	str	r2, [r4, #0]
 8008e96:	7018      	strb	r0, [r3, #0]
 8008e98:	e7e5      	b.n	8008e66 <_puts_r+0x76>
 8008e9a:	bf00      	nop
 8008e9c:	0801d76c 	.word	0x0801d76c
 8008ea0:	0801d78c 	.word	0x0801d78c
 8008ea4:	0801d74c 	.word	0x0801d74c

08008ea8 <puts>:
 8008ea8:	4b02      	ldr	r3, [pc, #8]	; (8008eb4 <puts+0xc>)
 8008eaa:	4601      	mov	r1, r0
 8008eac:	6818      	ldr	r0, [r3, #0]
 8008eae:	f7ff bf9f 	b.w	8008df0 <_puts_r>
 8008eb2:	bf00      	nop
 8008eb4:	2000003c 	.word	0x2000003c

08008eb8 <__swbuf_r>:
 8008eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eba:	460e      	mov	r6, r1
 8008ebc:	4614      	mov	r4, r2
 8008ebe:	4605      	mov	r5, r0
 8008ec0:	b118      	cbz	r0, 8008eca <__swbuf_r+0x12>
 8008ec2:	6983      	ldr	r3, [r0, #24]
 8008ec4:	b90b      	cbnz	r3, 8008eca <__swbuf_r+0x12>
 8008ec6:	f000 f9a7 	bl	8009218 <__sinit>
 8008eca:	4b21      	ldr	r3, [pc, #132]	; (8008f50 <__swbuf_r+0x98>)
 8008ecc:	429c      	cmp	r4, r3
 8008ece:	d12a      	bne.n	8008f26 <__swbuf_r+0x6e>
 8008ed0:	686c      	ldr	r4, [r5, #4]
 8008ed2:	69a3      	ldr	r3, [r4, #24]
 8008ed4:	60a3      	str	r3, [r4, #8]
 8008ed6:	89a3      	ldrh	r3, [r4, #12]
 8008ed8:	071a      	lsls	r2, r3, #28
 8008eda:	d52e      	bpl.n	8008f3a <__swbuf_r+0x82>
 8008edc:	6923      	ldr	r3, [r4, #16]
 8008ede:	b363      	cbz	r3, 8008f3a <__swbuf_r+0x82>
 8008ee0:	6923      	ldr	r3, [r4, #16]
 8008ee2:	6820      	ldr	r0, [r4, #0]
 8008ee4:	1ac0      	subs	r0, r0, r3
 8008ee6:	6963      	ldr	r3, [r4, #20]
 8008ee8:	b2f6      	uxtb	r6, r6
 8008eea:	4283      	cmp	r3, r0
 8008eec:	4637      	mov	r7, r6
 8008eee:	dc04      	bgt.n	8008efa <__swbuf_r+0x42>
 8008ef0:	4621      	mov	r1, r4
 8008ef2:	4628      	mov	r0, r5
 8008ef4:	f000 f926 	bl	8009144 <_fflush_r>
 8008ef8:	bb28      	cbnz	r0, 8008f46 <__swbuf_r+0x8e>
 8008efa:	68a3      	ldr	r3, [r4, #8]
 8008efc:	3b01      	subs	r3, #1
 8008efe:	60a3      	str	r3, [r4, #8]
 8008f00:	6823      	ldr	r3, [r4, #0]
 8008f02:	1c5a      	adds	r2, r3, #1
 8008f04:	6022      	str	r2, [r4, #0]
 8008f06:	701e      	strb	r6, [r3, #0]
 8008f08:	6963      	ldr	r3, [r4, #20]
 8008f0a:	3001      	adds	r0, #1
 8008f0c:	4283      	cmp	r3, r0
 8008f0e:	d004      	beq.n	8008f1a <__swbuf_r+0x62>
 8008f10:	89a3      	ldrh	r3, [r4, #12]
 8008f12:	07db      	lsls	r3, r3, #31
 8008f14:	d519      	bpl.n	8008f4a <__swbuf_r+0x92>
 8008f16:	2e0a      	cmp	r6, #10
 8008f18:	d117      	bne.n	8008f4a <__swbuf_r+0x92>
 8008f1a:	4621      	mov	r1, r4
 8008f1c:	4628      	mov	r0, r5
 8008f1e:	f000 f911 	bl	8009144 <_fflush_r>
 8008f22:	b190      	cbz	r0, 8008f4a <__swbuf_r+0x92>
 8008f24:	e00f      	b.n	8008f46 <__swbuf_r+0x8e>
 8008f26:	4b0b      	ldr	r3, [pc, #44]	; (8008f54 <__swbuf_r+0x9c>)
 8008f28:	429c      	cmp	r4, r3
 8008f2a:	d101      	bne.n	8008f30 <__swbuf_r+0x78>
 8008f2c:	68ac      	ldr	r4, [r5, #8]
 8008f2e:	e7d0      	b.n	8008ed2 <__swbuf_r+0x1a>
 8008f30:	4b09      	ldr	r3, [pc, #36]	; (8008f58 <__swbuf_r+0xa0>)
 8008f32:	429c      	cmp	r4, r3
 8008f34:	bf08      	it	eq
 8008f36:	68ec      	ldreq	r4, [r5, #12]
 8008f38:	e7cb      	b.n	8008ed2 <__swbuf_r+0x1a>
 8008f3a:	4621      	mov	r1, r4
 8008f3c:	4628      	mov	r0, r5
 8008f3e:	f000 f80d 	bl	8008f5c <__swsetup_r>
 8008f42:	2800      	cmp	r0, #0
 8008f44:	d0cc      	beq.n	8008ee0 <__swbuf_r+0x28>
 8008f46:	f04f 37ff 	mov.w	r7, #4294967295
 8008f4a:	4638      	mov	r0, r7
 8008f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f4e:	bf00      	nop
 8008f50:	0801d76c 	.word	0x0801d76c
 8008f54:	0801d78c 	.word	0x0801d78c
 8008f58:	0801d74c 	.word	0x0801d74c

08008f5c <__swsetup_r>:
 8008f5c:	4b32      	ldr	r3, [pc, #200]	; (8009028 <__swsetup_r+0xcc>)
 8008f5e:	b570      	push	{r4, r5, r6, lr}
 8008f60:	681d      	ldr	r5, [r3, #0]
 8008f62:	4606      	mov	r6, r0
 8008f64:	460c      	mov	r4, r1
 8008f66:	b125      	cbz	r5, 8008f72 <__swsetup_r+0x16>
 8008f68:	69ab      	ldr	r3, [r5, #24]
 8008f6a:	b913      	cbnz	r3, 8008f72 <__swsetup_r+0x16>
 8008f6c:	4628      	mov	r0, r5
 8008f6e:	f000 f953 	bl	8009218 <__sinit>
 8008f72:	4b2e      	ldr	r3, [pc, #184]	; (800902c <__swsetup_r+0xd0>)
 8008f74:	429c      	cmp	r4, r3
 8008f76:	d10f      	bne.n	8008f98 <__swsetup_r+0x3c>
 8008f78:	686c      	ldr	r4, [r5, #4]
 8008f7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f7e:	b29a      	uxth	r2, r3
 8008f80:	0715      	lsls	r5, r2, #28
 8008f82:	d42c      	bmi.n	8008fde <__swsetup_r+0x82>
 8008f84:	06d0      	lsls	r0, r2, #27
 8008f86:	d411      	bmi.n	8008fac <__swsetup_r+0x50>
 8008f88:	2209      	movs	r2, #9
 8008f8a:	6032      	str	r2, [r6, #0]
 8008f8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f90:	81a3      	strh	r3, [r4, #12]
 8008f92:	f04f 30ff 	mov.w	r0, #4294967295
 8008f96:	e03e      	b.n	8009016 <__swsetup_r+0xba>
 8008f98:	4b25      	ldr	r3, [pc, #148]	; (8009030 <__swsetup_r+0xd4>)
 8008f9a:	429c      	cmp	r4, r3
 8008f9c:	d101      	bne.n	8008fa2 <__swsetup_r+0x46>
 8008f9e:	68ac      	ldr	r4, [r5, #8]
 8008fa0:	e7eb      	b.n	8008f7a <__swsetup_r+0x1e>
 8008fa2:	4b24      	ldr	r3, [pc, #144]	; (8009034 <__swsetup_r+0xd8>)
 8008fa4:	429c      	cmp	r4, r3
 8008fa6:	bf08      	it	eq
 8008fa8:	68ec      	ldreq	r4, [r5, #12]
 8008faa:	e7e6      	b.n	8008f7a <__swsetup_r+0x1e>
 8008fac:	0751      	lsls	r1, r2, #29
 8008fae:	d512      	bpl.n	8008fd6 <__swsetup_r+0x7a>
 8008fb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fb2:	b141      	cbz	r1, 8008fc6 <__swsetup_r+0x6a>
 8008fb4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fb8:	4299      	cmp	r1, r3
 8008fba:	d002      	beq.n	8008fc2 <__swsetup_r+0x66>
 8008fbc:	4630      	mov	r0, r6
 8008fbe:	f000 fa19 	bl	80093f4 <_free_r>
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	6363      	str	r3, [r4, #52]	; 0x34
 8008fc6:	89a3      	ldrh	r3, [r4, #12]
 8008fc8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008fcc:	81a3      	strh	r3, [r4, #12]
 8008fce:	2300      	movs	r3, #0
 8008fd0:	6063      	str	r3, [r4, #4]
 8008fd2:	6923      	ldr	r3, [r4, #16]
 8008fd4:	6023      	str	r3, [r4, #0]
 8008fd6:	89a3      	ldrh	r3, [r4, #12]
 8008fd8:	f043 0308 	orr.w	r3, r3, #8
 8008fdc:	81a3      	strh	r3, [r4, #12]
 8008fde:	6923      	ldr	r3, [r4, #16]
 8008fe0:	b94b      	cbnz	r3, 8008ff6 <__swsetup_r+0x9a>
 8008fe2:	89a3      	ldrh	r3, [r4, #12]
 8008fe4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008fe8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fec:	d003      	beq.n	8008ff6 <__swsetup_r+0x9a>
 8008fee:	4621      	mov	r1, r4
 8008ff0:	4630      	mov	r0, r6
 8008ff2:	f000 f9bf 	bl	8009374 <__smakebuf_r>
 8008ff6:	89a2      	ldrh	r2, [r4, #12]
 8008ff8:	f012 0301 	ands.w	r3, r2, #1
 8008ffc:	d00c      	beq.n	8009018 <__swsetup_r+0xbc>
 8008ffe:	2300      	movs	r3, #0
 8009000:	60a3      	str	r3, [r4, #8]
 8009002:	6963      	ldr	r3, [r4, #20]
 8009004:	425b      	negs	r3, r3
 8009006:	61a3      	str	r3, [r4, #24]
 8009008:	6923      	ldr	r3, [r4, #16]
 800900a:	b953      	cbnz	r3, 8009022 <__swsetup_r+0xc6>
 800900c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009010:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009014:	d1ba      	bne.n	8008f8c <__swsetup_r+0x30>
 8009016:	bd70      	pop	{r4, r5, r6, pc}
 8009018:	0792      	lsls	r2, r2, #30
 800901a:	bf58      	it	pl
 800901c:	6963      	ldrpl	r3, [r4, #20]
 800901e:	60a3      	str	r3, [r4, #8]
 8009020:	e7f2      	b.n	8009008 <__swsetup_r+0xac>
 8009022:	2000      	movs	r0, #0
 8009024:	e7f7      	b.n	8009016 <__swsetup_r+0xba>
 8009026:	bf00      	nop
 8009028:	2000003c 	.word	0x2000003c
 800902c:	0801d76c 	.word	0x0801d76c
 8009030:	0801d78c 	.word	0x0801d78c
 8009034:	0801d74c 	.word	0x0801d74c

08009038 <__sflush_r>:
 8009038:	898a      	ldrh	r2, [r1, #12]
 800903a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800903e:	4605      	mov	r5, r0
 8009040:	0710      	lsls	r0, r2, #28
 8009042:	460c      	mov	r4, r1
 8009044:	d458      	bmi.n	80090f8 <__sflush_r+0xc0>
 8009046:	684b      	ldr	r3, [r1, #4]
 8009048:	2b00      	cmp	r3, #0
 800904a:	dc05      	bgt.n	8009058 <__sflush_r+0x20>
 800904c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800904e:	2b00      	cmp	r3, #0
 8009050:	dc02      	bgt.n	8009058 <__sflush_r+0x20>
 8009052:	2000      	movs	r0, #0
 8009054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009058:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800905a:	2e00      	cmp	r6, #0
 800905c:	d0f9      	beq.n	8009052 <__sflush_r+0x1a>
 800905e:	2300      	movs	r3, #0
 8009060:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009064:	682f      	ldr	r7, [r5, #0]
 8009066:	6a21      	ldr	r1, [r4, #32]
 8009068:	602b      	str	r3, [r5, #0]
 800906a:	d032      	beq.n	80090d2 <__sflush_r+0x9a>
 800906c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800906e:	89a3      	ldrh	r3, [r4, #12]
 8009070:	075a      	lsls	r2, r3, #29
 8009072:	d505      	bpl.n	8009080 <__sflush_r+0x48>
 8009074:	6863      	ldr	r3, [r4, #4]
 8009076:	1ac0      	subs	r0, r0, r3
 8009078:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800907a:	b10b      	cbz	r3, 8009080 <__sflush_r+0x48>
 800907c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800907e:	1ac0      	subs	r0, r0, r3
 8009080:	2300      	movs	r3, #0
 8009082:	4602      	mov	r2, r0
 8009084:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009086:	6a21      	ldr	r1, [r4, #32]
 8009088:	4628      	mov	r0, r5
 800908a:	47b0      	blx	r6
 800908c:	1c43      	adds	r3, r0, #1
 800908e:	89a3      	ldrh	r3, [r4, #12]
 8009090:	d106      	bne.n	80090a0 <__sflush_r+0x68>
 8009092:	6829      	ldr	r1, [r5, #0]
 8009094:	291d      	cmp	r1, #29
 8009096:	d848      	bhi.n	800912a <__sflush_r+0xf2>
 8009098:	4a29      	ldr	r2, [pc, #164]	; (8009140 <__sflush_r+0x108>)
 800909a:	40ca      	lsrs	r2, r1
 800909c:	07d6      	lsls	r6, r2, #31
 800909e:	d544      	bpl.n	800912a <__sflush_r+0xf2>
 80090a0:	2200      	movs	r2, #0
 80090a2:	6062      	str	r2, [r4, #4]
 80090a4:	04d9      	lsls	r1, r3, #19
 80090a6:	6922      	ldr	r2, [r4, #16]
 80090a8:	6022      	str	r2, [r4, #0]
 80090aa:	d504      	bpl.n	80090b6 <__sflush_r+0x7e>
 80090ac:	1c42      	adds	r2, r0, #1
 80090ae:	d101      	bne.n	80090b4 <__sflush_r+0x7c>
 80090b0:	682b      	ldr	r3, [r5, #0]
 80090b2:	b903      	cbnz	r3, 80090b6 <__sflush_r+0x7e>
 80090b4:	6560      	str	r0, [r4, #84]	; 0x54
 80090b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80090b8:	602f      	str	r7, [r5, #0]
 80090ba:	2900      	cmp	r1, #0
 80090bc:	d0c9      	beq.n	8009052 <__sflush_r+0x1a>
 80090be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090c2:	4299      	cmp	r1, r3
 80090c4:	d002      	beq.n	80090cc <__sflush_r+0x94>
 80090c6:	4628      	mov	r0, r5
 80090c8:	f000 f994 	bl	80093f4 <_free_r>
 80090cc:	2000      	movs	r0, #0
 80090ce:	6360      	str	r0, [r4, #52]	; 0x34
 80090d0:	e7c0      	b.n	8009054 <__sflush_r+0x1c>
 80090d2:	2301      	movs	r3, #1
 80090d4:	4628      	mov	r0, r5
 80090d6:	47b0      	blx	r6
 80090d8:	1c41      	adds	r1, r0, #1
 80090da:	d1c8      	bne.n	800906e <__sflush_r+0x36>
 80090dc:	682b      	ldr	r3, [r5, #0]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d0c5      	beq.n	800906e <__sflush_r+0x36>
 80090e2:	2b1d      	cmp	r3, #29
 80090e4:	d001      	beq.n	80090ea <__sflush_r+0xb2>
 80090e6:	2b16      	cmp	r3, #22
 80090e8:	d101      	bne.n	80090ee <__sflush_r+0xb6>
 80090ea:	602f      	str	r7, [r5, #0]
 80090ec:	e7b1      	b.n	8009052 <__sflush_r+0x1a>
 80090ee:	89a3      	ldrh	r3, [r4, #12]
 80090f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090f4:	81a3      	strh	r3, [r4, #12]
 80090f6:	e7ad      	b.n	8009054 <__sflush_r+0x1c>
 80090f8:	690f      	ldr	r7, [r1, #16]
 80090fa:	2f00      	cmp	r7, #0
 80090fc:	d0a9      	beq.n	8009052 <__sflush_r+0x1a>
 80090fe:	0793      	lsls	r3, r2, #30
 8009100:	680e      	ldr	r6, [r1, #0]
 8009102:	bf08      	it	eq
 8009104:	694b      	ldreq	r3, [r1, #20]
 8009106:	600f      	str	r7, [r1, #0]
 8009108:	bf18      	it	ne
 800910a:	2300      	movne	r3, #0
 800910c:	eba6 0807 	sub.w	r8, r6, r7
 8009110:	608b      	str	r3, [r1, #8]
 8009112:	f1b8 0f00 	cmp.w	r8, #0
 8009116:	dd9c      	ble.n	8009052 <__sflush_r+0x1a>
 8009118:	4643      	mov	r3, r8
 800911a:	463a      	mov	r2, r7
 800911c:	6a21      	ldr	r1, [r4, #32]
 800911e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009120:	4628      	mov	r0, r5
 8009122:	47b0      	blx	r6
 8009124:	2800      	cmp	r0, #0
 8009126:	dc06      	bgt.n	8009136 <__sflush_r+0xfe>
 8009128:	89a3      	ldrh	r3, [r4, #12]
 800912a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800912e:	81a3      	strh	r3, [r4, #12]
 8009130:	f04f 30ff 	mov.w	r0, #4294967295
 8009134:	e78e      	b.n	8009054 <__sflush_r+0x1c>
 8009136:	4407      	add	r7, r0
 8009138:	eba8 0800 	sub.w	r8, r8, r0
 800913c:	e7e9      	b.n	8009112 <__sflush_r+0xda>
 800913e:	bf00      	nop
 8009140:	20400001 	.word	0x20400001

08009144 <_fflush_r>:
 8009144:	b538      	push	{r3, r4, r5, lr}
 8009146:	690b      	ldr	r3, [r1, #16]
 8009148:	4605      	mov	r5, r0
 800914a:	460c      	mov	r4, r1
 800914c:	b1db      	cbz	r3, 8009186 <_fflush_r+0x42>
 800914e:	b118      	cbz	r0, 8009158 <_fflush_r+0x14>
 8009150:	6983      	ldr	r3, [r0, #24]
 8009152:	b90b      	cbnz	r3, 8009158 <_fflush_r+0x14>
 8009154:	f000 f860 	bl	8009218 <__sinit>
 8009158:	4b0c      	ldr	r3, [pc, #48]	; (800918c <_fflush_r+0x48>)
 800915a:	429c      	cmp	r4, r3
 800915c:	d109      	bne.n	8009172 <_fflush_r+0x2e>
 800915e:	686c      	ldr	r4, [r5, #4]
 8009160:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009164:	b17b      	cbz	r3, 8009186 <_fflush_r+0x42>
 8009166:	4621      	mov	r1, r4
 8009168:	4628      	mov	r0, r5
 800916a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800916e:	f7ff bf63 	b.w	8009038 <__sflush_r>
 8009172:	4b07      	ldr	r3, [pc, #28]	; (8009190 <_fflush_r+0x4c>)
 8009174:	429c      	cmp	r4, r3
 8009176:	d101      	bne.n	800917c <_fflush_r+0x38>
 8009178:	68ac      	ldr	r4, [r5, #8]
 800917a:	e7f1      	b.n	8009160 <_fflush_r+0x1c>
 800917c:	4b05      	ldr	r3, [pc, #20]	; (8009194 <_fflush_r+0x50>)
 800917e:	429c      	cmp	r4, r3
 8009180:	bf08      	it	eq
 8009182:	68ec      	ldreq	r4, [r5, #12]
 8009184:	e7ec      	b.n	8009160 <_fflush_r+0x1c>
 8009186:	2000      	movs	r0, #0
 8009188:	bd38      	pop	{r3, r4, r5, pc}
 800918a:	bf00      	nop
 800918c:	0801d76c 	.word	0x0801d76c
 8009190:	0801d78c 	.word	0x0801d78c
 8009194:	0801d74c 	.word	0x0801d74c

08009198 <std>:
 8009198:	2300      	movs	r3, #0
 800919a:	b510      	push	{r4, lr}
 800919c:	4604      	mov	r4, r0
 800919e:	e9c0 3300 	strd	r3, r3, [r0]
 80091a2:	6083      	str	r3, [r0, #8]
 80091a4:	8181      	strh	r1, [r0, #12]
 80091a6:	6643      	str	r3, [r0, #100]	; 0x64
 80091a8:	81c2      	strh	r2, [r0, #14]
 80091aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80091ae:	6183      	str	r3, [r0, #24]
 80091b0:	4619      	mov	r1, r3
 80091b2:	2208      	movs	r2, #8
 80091b4:	305c      	adds	r0, #92	; 0x5c
 80091b6:	f7ff fdfb 	bl	8008db0 <memset>
 80091ba:	4b05      	ldr	r3, [pc, #20]	; (80091d0 <std+0x38>)
 80091bc:	6263      	str	r3, [r4, #36]	; 0x24
 80091be:	4b05      	ldr	r3, [pc, #20]	; (80091d4 <std+0x3c>)
 80091c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80091c2:	4b05      	ldr	r3, [pc, #20]	; (80091d8 <std+0x40>)
 80091c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80091c6:	4b05      	ldr	r3, [pc, #20]	; (80091dc <std+0x44>)
 80091c8:	6224      	str	r4, [r4, #32]
 80091ca:	6323      	str	r3, [r4, #48]	; 0x30
 80091cc:	bd10      	pop	{r4, pc}
 80091ce:	bf00      	nop
 80091d0:	08009af5 	.word	0x08009af5
 80091d4:	08009b17 	.word	0x08009b17
 80091d8:	08009b4f 	.word	0x08009b4f
 80091dc:	08009b73 	.word	0x08009b73

080091e0 <_cleanup_r>:
 80091e0:	4901      	ldr	r1, [pc, #4]	; (80091e8 <_cleanup_r+0x8>)
 80091e2:	f000 b885 	b.w	80092f0 <_fwalk_reent>
 80091e6:	bf00      	nop
 80091e8:	08009145 	.word	0x08009145

080091ec <__sfmoreglue>:
 80091ec:	b570      	push	{r4, r5, r6, lr}
 80091ee:	1e4a      	subs	r2, r1, #1
 80091f0:	2568      	movs	r5, #104	; 0x68
 80091f2:	4355      	muls	r5, r2
 80091f4:	460e      	mov	r6, r1
 80091f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80091fa:	f000 f949 	bl	8009490 <_malloc_r>
 80091fe:	4604      	mov	r4, r0
 8009200:	b140      	cbz	r0, 8009214 <__sfmoreglue+0x28>
 8009202:	2100      	movs	r1, #0
 8009204:	e9c0 1600 	strd	r1, r6, [r0]
 8009208:	300c      	adds	r0, #12
 800920a:	60a0      	str	r0, [r4, #8]
 800920c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009210:	f7ff fdce 	bl	8008db0 <memset>
 8009214:	4620      	mov	r0, r4
 8009216:	bd70      	pop	{r4, r5, r6, pc}

08009218 <__sinit>:
 8009218:	6983      	ldr	r3, [r0, #24]
 800921a:	b510      	push	{r4, lr}
 800921c:	4604      	mov	r4, r0
 800921e:	bb33      	cbnz	r3, 800926e <__sinit+0x56>
 8009220:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8009224:	6503      	str	r3, [r0, #80]	; 0x50
 8009226:	4b12      	ldr	r3, [pc, #72]	; (8009270 <__sinit+0x58>)
 8009228:	4a12      	ldr	r2, [pc, #72]	; (8009274 <__sinit+0x5c>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	6282      	str	r2, [r0, #40]	; 0x28
 800922e:	4298      	cmp	r0, r3
 8009230:	bf04      	itt	eq
 8009232:	2301      	moveq	r3, #1
 8009234:	6183      	streq	r3, [r0, #24]
 8009236:	f000 f81f 	bl	8009278 <__sfp>
 800923a:	6060      	str	r0, [r4, #4]
 800923c:	4620      	mov	r0, r4
 800923e:	f000 f81b 	bl	8009278 <__sfp>
 8009242:	60a0      	str	r0, [r4, #8]
 8009244:	4620      	mov	r0, r4
 8009246:	f000 f817 	bl	8009278 <__sfp>
 800924a:	2200      	movs	r2, #0
 800924c:	60e0      	str	r0, [r4, #12]
 800924e:	2104      	movs	r1, #4
 8009250:	6860      	ldr	r0, [r4, #4]
 8009252:	f7ff ffa1 	bl	8009198 <std>
 8009256:	2201      	movs	r2, #1
 8009258:	2109      	movs	r1, #9
 800925a:	68a0      	ldr	r0, [r4, #8]
 800925c:	f7ff ff9c 	bl	8009198 <std>
 8009260:	2202      	movs	r2, #2
 8009262:	2112      	movs	r1, #18
 8009264:	68e0      	ldr	r0, [r4, #12]
 8009266:	f7ff ff97 	bl	8009198 <std>
 800926a:	2301      	movs	r3, #1
 800926c:	61a3      	str	r3, [r4, #24]
 800926e:	bd10      	pop	{r4, pc}
 8009270:	0801d748 	.word	0x0801d748
 8009274:	080091e1 	.word	0x080091e1

08009278 <__sfp>:
 8009278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800927a:	4b1b      	ldr	r3, [pc, #108]	; (80092e8 <__sfp+0x70>)
 800927c:	681e      	ldr	r6, [r3, #0]
 800927e:	69b3      	ldr	r3, [r6, #24]
 8009280:	4607      	mov	r7, r0
 8009282:	b913      	cbnz	r3, 800928a <__sfp+0x12>
 8009284:	4630      	mov	r0, r6
 8009286:	f7ff ffc7 	bl	8009218 <__sinit>
 800928a:	3648      	adds	r6, #72	; 0x48
 800928c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009290:	3b01      	subs	r3, #1
 8009292:	d503      	bpl.n	800929c <__sfp+0x24>
 8009294:	6833      	ldr	r3, [r6, #0]
 8009296:	b133      	cbz	r3, 80092a6 <__sfp+0x2e>
 8009298:	6836      	ldr	r6, [r6, #0]
 800929a:	e7f7      	b.n	800928c <__sfp+0x14>
 800929c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80092a0:	b16d      	cbz	r5, 80092be <__sfp+0x46>
 80092a2:	3468      	adds	r4, #104	; 0x68
 80092a4:	e7f4      	b.n	8009290 <__sfp+0x18>
 80092a6:	2104      	movs	r1, #4
 80092a8:	4638      	mov	r0, r7
 80092aa:	f7ff ff9f 	bl	80091ec <__sfmoreglue>
 80092ae:	6030      	str	r0, [r6, #0]
 80092b0:	2800      	cmp	r0, #0
 80092b2:	d1f1      	bne.n	8009298 <__sfp+0x20>
 80092b4:	230c      	movs	r3, #12
 80092b6:	603b      	str	r3, [r7, #0]
 80092b8:	4604      	mov	r4, r0
 80092ba:	4620      	mov	r0, r4
 80092bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092be:	4b0b      	ldr	r3, [pc, #44]	; (80092ec <__sfp+0x74>)
 80092c0:	6665      	str	r5, [r4, #100]	; 0x64
 80092c2:	e9c4 5500 	strd	r5, r5, [r4]
 80092c6:	60a5      	str	r5, [r4, #8]
 80092c8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80092cc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80092d0:	2208      	movs	r2, #8
 80092d2:	4629      	mov	r1, r5
 80092d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80092d8:	f7ff fd6a 	bl	8008db0 <memset>
 80092dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80092e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80092e4:	e7e9      	b.n	80092ba <__sfp+0x42>
 80092e6:	bf00      	nop
 80092e8:	0801d748 	.word	0x0801d748
 80092ec:	ffff0001 	.word	0xffff0001

080092f0 <_fwalk_reent>:
 80092f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092f4:	4680      	mov	r8, r0
 80092f6:	4689      	mov	r9, r1
 80092f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80092fc:	2600      	movs	r6, #0
 80092fe:	b914      	cbnz	r4, 8009306 <_fwalk_reent+0x16>
 8009300:	4630      	mov	r0, r6
 8009302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009306:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800930a:	3f01      	subs	r7, #1
 800930c:	d501      	bpl.n	8009312 <_fwalk_reent+0x22>
 800930e:	6824      	ldr	r4, [r4, #0]
 8009310:	e7f5      	b.n	80092fe <_fwalk_reent+0xe>
 8009312:	89ab      	ldrh	r3, [r5, #12]
 8009314:	2b01      	cmp	r3, #1
 8009316:	d907      	bls.n	8009328 <_fwalk_reent+0x38>
 8009318:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800931c:	3301      	adds	r3, #1
 800931e:	d003      	beq.n	8009328 <_fwalk_reent+0x38>
 8009320:	4629      	mov	r1, r5
 8009322:	4640      	mov	r0, r8
 8009324:	47c8      	blx	r9
 8009326:	4306      	orrs	r6, r0
 8009328:	3568      	adds	r5, #104	; 0x68
 800932a:	e7ee      	b.n	800930a <_fwalk_reent+0x1a>

0800932c <__swhatbuf_r>:
 800932c:	b570      	push	{r4, r5, r6, lr}
 800932e:	460e      	mov	r6, r1
 8009330:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009334:	2900      	cmp	r1, #0
 8009336:	b096      	sub	sp, #88	; 0x58
 8009338:	4614      	mov	r4, r2
 800933a:	461d      	mov	r5, r3
 800933c:	da07      	bge.n	800934e <__swhatbuf_r+0x22>
 800933e:	2300      	movs	r3, #0
 8009340:	602b      	str	r3, [r5, #0]
 8009342:	89b3      	ldrh	r3, [r6, #12]
 8009344:	061a      	lsls	r2, r3, #24
 8009346:	d410      	bmi.n	800936a <__swhatbuf_r+0x3e>
 8009348:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800934c:	e00e      	b.n	800936c <__swhatbuf_r+0x40>
 800934e:	466a      	mov	r2, sp
 8009350:	f000 fc36 	bl	8009bc0 <_fstat_r>
 8009354:	2800      	cmp	r0, #0
 8009356:	dbf2      	blt.n	800933e <__swhatbuf_r+0x12>
 8009358:	9a01      	ldr	r2, [sp, #4]
 800935a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800935e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009362:	425a      	negs	r2, r3
 8009364:	415a      	adcs	r2, r3
 8009366:	602a      	str	r2, [r5, #0]
 8009368:	e7ee      	b.n	8009348 <__swhatbuf_r+0x1c>
 800936a:	2340      	movs	r3, #64	; 0x40
 800936c:	2000      	movs	r0, #0
 800936e:	6023      	str	r3, [r4, #0]
 8009370:	b016      	add	sp, #88	; 0x58
 8009372:	bd70      	pop	{r4, r5, r6, pc}

08009374 <__smakebuf_r>:
 8009374:	898b      	ldrh	r3, [r1, #12]
 8009376:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009378:	079d      	lsls	r5, r3, #30
 800937a:	4606      	mov	r6, r0
 800937c:	460c      	mov	r4, r1
 800937e:	d507      	bpl.n	8009390 <__smakebuf_r+0x1c>
 8009380:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009384:	6023      	str	r3, [r4, #0]
 8009386:	6123      	str	r3, [r4, #16]
 8009388:	2301      	movs	r3, #1
 800938a:	6163      	str	r3, [r4, #20]
 800938c:	b002      	add	sp, #8
 800938e:	bd70      	pop	{r4, r5, r6, pc}
 8009390:	ab01      	add	r3, sp, #4
 8009392:	466a      	mov	r2, sp
 8009394:	f7ff ffca 	bl	800932c <__swhatbuf_r>
 8009398:	9900      	ldr	r1, [sp, #0]
 800939a:	4605      	mov	r5, r0
 800939c:	4630      	mov	r0, r6
 800939e:	f000 f877 	bl	8009490 <_malloc_r>
 80093a2:	b948      	cbnz	r0, 80093b8 <__smakebuf_r+0x44>
 80093a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80093a8:	059a      	lsls	r2, r3, #22
 80093aa:	d4ef      	bmi.n	800938c <__smakebuf_r+0x18>
 80093ac:	f023 0303 	bic.w	r3, r3, #3
 80093b0:	f043 0302 	orr.w	r3, r3, #2
 80093b4:	81a3      	strh	r3, [r4, #12]
 80093b6:	e7e3      	b.n	8009380 <__smakebuf_r+0xc>
 80093b8:	4b0d      	ldr	r3, [pc, #52]	; (80093f0 <__smakebuf_r+0x7c>)
 80093ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80093bc:	89a3      	ldrh	r3, [r4, #12]
 80093be:	6020      	str	r0, [r4, #0]
 80093c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093c4:	81a3      	strh	r3, [r4, #12]
 80093c6:	9b00      	ldr	r3, [sp, #0]
 80093c8:	6163      	str	r3, [r4, #20]
 80093ca:	9b01      	ldr	r3, [sp, #4]
 80093cc:	6120      	str	r0, [r4, #16]
 80093ce:	b15b      	cbz	r3, 80093e8 <__smakebuf_r+0x74>
 80093d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093d4:	4630      	mov	r0, r6
 80093d6:	f000 fc05 	bl	8009be4 <_isatty_r>
 80093da:	b128      	cbz	r0, 80093e8 <__smakebuf_r+0x74>
 80093dc:	89a3      	ldrh	r3, [r4, #12]
 80093de:	f023 0303 	bic.w	r3, r3, #3
 80093e2:	f043 0301 	orr.w	r3, r3, #1
 80093e6:	81a3      	strh	r3, [r4, #12]
 80093e8:	89a3      	ldrh	r3, [r4, #12]
 80093ea:	431d      	orrs	r5, r3
 80093ec:	81a5      	strh	r5, [r4, #12]
 80093ee:	e7cd      	b.n	800938c <__smakebuf_r+0x18>
 80093f0:	080091e1 	.word	0x080091e1

080093f4 <_free_r>:
 80093f4:	b538      	push	{r3, r4, r5, lr}
 80093f6:	4605      	mov	r5, r0
 80093f8:	2900      	cmp	r1, #0
 80093fa:	d045      	beq.n	8009488 <_free_r+0x94>
 80093fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009400:	1f0c      	subs	r4, r1, #4
 8009402:	2b00      	cmp	r3, #0
 8009404:	bfb8      	it	lt
 8009406:	18e4      	addlt	r4, r4, r3
 8009408:	f000 fc0e 	bl	8009c28 <__malloc_lock>
 800940c:	4a1f      	ldr	r2, [pc, #124]	; (800948c <_free_r+0x98>)
 800940e:	6813      	ldr	r3, [r2, #0]
 8009410:	4610      	mov	r0, r2
 8009412:	b933      	cbnz	r3, 8009422 <_free_r+0x2e>
 8009414:	6063      	str	r3, [r4, #4]
 8009416:	6014      	str	r4, [r2, #0]
 8009418:	4628      	mov	r0, r5
 800941a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800941e:	f000 bc04 	b.w	8009c2a <__malloc_unlock>
 8009422:	42a3      	cmp	r3, r4
 8009424:	d90c      	bls.n	8009440 <_free_r+0x4c>
 8009426:	6821      	ldr	r1, [r4, #0]
 8009428:	1862      	adds	r2, r4, r1
 800942a:	4293      	cmp	r3, r2
 800942c:	bf04      	itt	eq
 800942e:	681a      	ldreq	r2, [r3, #0]
 8009430:	685b      	ldreq	r3, [r3, #4]
 8009432:	6063      	str	r3, [r4, #4]
 8009434:	bf04      	itt	eq
 8009436:	1852      	addeq	r2, r2, r1
 8009438:	6022      	streq	r2, [r4, #0]
 800943a:	6004      	str	r4, [r0, #0]
 800943c:	e7ec      	b.n	8009418 <_free_r+0x24>
 800943e:	4613      	mov	r3, r2
 8009440:	685a      	ldr	r2, [r3, #4]
 8009442:	b10a      	cbz	r2, 8009448 <_free_r+0x54>
 8009444:	42a2      	cmp	r2, r4
 8009446:	d9fa      	bls.n	800943e <_free_r+0x4a>
 8009448:	6819      	ldr	r1, [r3, #0]
 800944a:	1858      	adds	r0, r3, r1
 800944c:	42a0      	cmp	r0, r4
 800944e:	d10b      	bne.n	8009468 <_free_r+0x74>
 8009450:	6820      	ldr	r0, [r4, #0]
 8009452:	4401      	add	r1, r0
 8009454:	1858      	adds	r0, r3, r1
 8009456:	4282      	cmp	r2, r0
 8009458:	6019      	str	r1, [r3, #0]
 800945a:	d1dd      	bne.n	8009418 <_free_r+0x24>
 800945c:	6810      	ldr	r0, [r2, #0]
 800945e:	6852      	ldr	r2, [r2, #4]
 8009460:	605a      	str	r2, [r3, #4]
 8009462:	4401      	add	r1, r0
 8009464:	6019      	str	r1, [r3, #0]
 8009466:	e7d7      	b.n	8009418 <_free_r+0x24>
 8009468:	d902      	bls.n	8009470 <_free_r+0x7c>
 800946a:	230c      	movs	r3, #12
 800946c:	602b      	str	r3, [r5, #0]
 800946e:	e7d3      	b.n	8009418 <_free_r+0x24>
 8009470:	6820      	ldr	r0, [r4, #0]
 8009472:	1821      	adds	r1, r4, r0
 8009474:	428a      	cmp	r2, r1
 8009476:	bf04      	itt	eq
 8009478:	6811      	ldreq	r1, [r2, #0]
 800947a:	6852      	ldreq	r2, [r2, #4]
 800947c:	6062      	str	r2, [r4, #4]
 800947e:	bf04      	itt	eq
 8009480:	1809      	addeq	r1, r1, r0
 8009482:	6021      	streq	r1, [r4, #0]
 8009484:	605c      	str	r4, [r3, #4]
 8009486:	e7c7      	b.n	8009418 <_free_r+0x24>
 8009488:	bd38      	pop	{r3, r4, r5, pc}
 800948a:	bf00      	nop
 800948c:	20000200 	.word	0x20000200

08009490 <_malloc_r>:
 8009490:	b570      	push	{r4, r5, r6, lr}
 8009492:	1ccd      	adds	r5, r1, #3
 8009494:	f025 0503 	bic.w	r5, r5, #3
 8009498:	3508      	adds	r5, #8
 800949a:	2d0c      	cmp	r5, #12
 800949c:	bf38      	it	cc
 800949e:	250c      	movcc	r5, #12
 80094a0:	2d00      	cmp	r5, #0
 80094a2:	4606      	mov	r6, r0
 80094a4:	db01      	blt.n	80094aa <_malloc_r+0x1a>
 80094a6:	42a9      	cmp	r1, r5
 80094a8:	d903      	bls.n	80094b2 <_malloc_r+0x22>
 80094aa:	230c      	movs	r3, #12
 80094ac:	6033      	str	r3, [r6, #0]
 80094ae:	2000      	movs	r0, #0
 80094b0:	bd70      	pop	{r4, r5, r6, pc}
 80094b2:	f000 fbb9 	bl	8009c28 <__malloc_lock>
 80094b6:	4a21      	ldr	r2, [pc, #132]	; (800953c <_malloc_r+0xac>)
 80094b8:	6814      	ldr	r4, [r2, #0]
 80094ba:	4621      	mov	r1, r4
 80094bc:	b991      	cbnz	r1, 80094e4 <_malloc_r+0x54>
 80094be:	4c20      	ldr	r4, [pc, #128]	; (8009540 <_malloc_r+0xb0>)
 80094c0:	6823      	ldr	r3, [r4, #0]
 80094c2:	b91b      	cbnz	r3, 80094cc <_malloc_r+0x3c>
 80094c4:	4630      	mov	r0, r6
 80094c6:	f000 fb05 	bl	8009ad4 <_sbrk_r>
 80094ca:	6020      	str	r0, [r4, #0]
 80094cc:	4629      	mov	r1, r5
 80094ce:	4630      	mov	r0, r6
 80094d0:	f000 fb00 	bl	8009ad4 <_sbrk_r>
 80094d4:	1c43      	adds	r3, r0, #1
 80094d6:	d124      	bne.n	8009522 <_malloc_r+0x92>
 80094d8:	230c      	movs	r3, #12
 80094da:	6033      	str	r3, [r6, #0]
 80094dc:	4630      	mov	r0, r6
 80094de:	f000 fba4 	bl	8009c2a <__malloc_unlock>
 80094e2:	e7e4      	b.n	80094ae <_malloc_r+0x1e>
 80094e4:	680b      	ldr	r3, [r1, #0]
 80094e6:	1b5b      	subs	r3, r3, r5
 80094e8:	d418      	bmi.n	800951c <_malloc_r+0x8c>
 80094ea:	2b0b      	cmp	r3, #11
 80094ec:	d90f      	bls.n	800950e <_malloc_r+0x7e>
 80094ee:	600b      	str	r3, [r1, #0]
 80094f0:	50cd      	str	r5, [r1, r3]
 80094f2:	18cc      	adds	r4, r1, r3
 80094f4:	4630      	mov	r0, r6
 80094f6:	f000 fb98 	bl	8009c2a <__malloc_unlock>
 80094fa:	f104 000b 	add.w	r0, r4, #11
 80094fe:	1d23      	adds	r3, r4, #4
 8009500:	f020 0007 	bic.w	r0, r0, #7
 8009504:	1ac3      	subs	r3, r0, r3
 8009506:	d0d3      	beq.n	80094b0 <_malloc_r+0x20>
 8009508:	425a      	negs	r2, r3
 800950a:	50e2      	str	r2, [r4, r3]
 800950c:	e7d0      	b.n	80094b0 <_malloc_r+0x20>
 800950e:	428c      	cmp	r4, r1
 8009510:	684b      	ldr	r3, [r1, #4]
 8009512:	bf16      	itet	ne
 8009514:	6063      	strne	r3, [r4, #4]
 8009516:	6013      	streq	r3, [r2, #0]
 8009518:	460c      	movne	r4, r1
 800951a:	e7eb      	b.n	80094f4 <_malloc_r+0x64>
 800951c:	460c      	mov	r4, r1
 800951e:	6849      	ldr	r1, [r1, #4]
 8009520:	e7cc      	b.n	80094bc <_malloc_r+0x2c>
 8009522:	1cc4      	adds	r4, r0, #3
 8009524:	f024 0403 	bic.w	r4, r4, #3
 8009528:	42a0      	cmp	r0, r4
 800952a:	d005      	beq.n	8009538 <_malloc_r+0xa8>
 800952c:	1a21      	subs	r1, r4, r0
 800952e:	4630      	mov	r0, r6
 8009530:	f000 fad0 	bl	8009ad4 <_sbrk_r>
 8009534:	3001      	adds	r0, #1
 8009536:	d0cf      	beq.n	80094d8 <_malloc_r+0x48>
 8009538:	6025      	str	r5, [r4, #0]
 800953a:	e7db      	b.n	80094f4 <_malloc_r+0x64>
 800953c:	20000200 	.word	0x20000200
 8009540:	20000204 	.word	0x20000204

08009544 <__sfputc_r>:
 8009544:	6893      	ldr	r3, [r2, #8]
 8009546:	3b01      	subs	r3, #1
 8009548:	2b00      	cmp	r3, #0
 800954a:	b410      	push	{r4}
 800954c:	6093      	str	r3, [r2, #8]
 800954e:	da08      	bge.n	8009562 <__sfputc_r+0x1e>
 8009550:	6994      	ldr	r4, [r2, #24]
 8009552:	42a3      	cmp	r3, r4
 8009554:	db01      	blt.n	800955a <__sfputc_r+0x16>
 8009556:	290a      	cmp	r1, #10
 8009558:	d103      	bne.n	8009562 <__sfputc_r+0x1e>
 800955a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800955e:	f7ff bcab 	b.w	8008eb8 <__swbuf_r>
 8009562:	6813      	ldr	r3, [r2, #0]
 8009564:	1c58      	adds	r0, r3, #1
 8009566:	6010      	str	r0, [r2, #0]
 8009568:	7019      	strb	r1, [r3, #0]
 800956a:	4608      	mov	r0, r1
 800956c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009570:	4770      	bx	lr

08009572 <__sfputs_r>:
 8009572:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009574:	4606      	mov	r6, r0
 8009576:	460f      	mov	r7, r1
 8009578:	4614      	mov	r4, r2
 800957a:	18d5      	adds	r5, r2, r3
 800957c:	42ac      	cmp	r4, r5
 800957e:	d101      	bne.n	8009584 <__sfputs_r+0x12>
 8009580:	2000      	movs	r0, #0
 8009582:	e007      	b.n	8009594 <__sfputs_r+0x22>
 8009584:	463a      	mov	r2, r7
 8009586:	f814 1b01 	ldrb.w	r1, [r4], #1
 800958a:	4630      	mov	r0, r6
 800958c:	f7ff ffda 	bl	8009544 <__sfputc_r>
 8009590:	1c43      	adds	r3, r0, #1
 8009592:	d1f3      	bne.n	800957c <__sfputs_r+0xa>
 8009594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009598 <_vfiprintf_r>:
 8009598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800959c:	460c      	mov	r4, r1
 800959e:	b09d      	sub	sp, #116	; 0x74
 80095a0:	4617      	mov	r7, r2
 80095a2:	461d      	mov	r5, r3
 80095a4:	4606      	mov	r6, r0
 80095a6:	b118      	cbz	r0, 80095b0 <_vfiprintf_r+0x18>
 80095a8:	6983      	ldr	r3, [r0, #24]
 80095aa:	b90b      	cbnz	r3, 80095b0 <_vfiprintf_r+0x18>
 80095ac:	f7ff fe34 	bl	8009218 <__sinit>
 80095b0:	4b7c      	ldr	r3, [pc, #496]	; (80097a4 <_vfiprintf_r+0x20c>)
 80095b2:	429c      	cmp	r4, r3
 80095b4:	d158      	bne.n	8009668 <_vfiprintf_r+0xd0>
 80095b6:	6874      	ldr	r4, [r6, #4]
 80095b8:	89a3      	ldrh	r3, [r4, #12]
 80095ba:	0718      	lsls	r0, r3, #28
 80095bc:	d55e      	bpl.n	800967c <_vfiprintf_r+0xe4>
 80095be:	6923      	ldr	r3, [r4, #16]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d05b      	beq.n	800967c <_vfiprintf_r+0xe4>
 80095c4:	2300      	movs	r3, #0
 80095c6:	9309      	str	r3, [sp, #36]	; 0x24
 80095c8:	2320      	movs	r3, #32
 80095ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80095ce:	2330      	movs	r3, #48	; 0x30
 80095d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80095d4:	9503      	str	r5, [sp, #12]
 80095d6:	f04f 0b01 	mov.w	fp, #1
 80095da:	46b8      	mov	r8, r7
 80095dc:	4645      	mov	r5, r8
 80095de:	f815 3b01 	ldrb.w	r3, [r5], #1
 80095e2:	b10b      	cbz	r3, 80095e8 <_vfiprintf_r+0x50>
 80095e4:	2b25      	cmp	r3, #37	; 0x25
 80095e6:	d154      	bne.n	8009692 <_vfiprintf_r+0xfa>
 80095e8:	ebb8 0a07 	subs.w	sl, r8, r7
 80095ec:	d00b      	beq.n	8009606 <_vfiprintf_r+0x6e>
 80095ee:	4653      	mov	r3, sl
 80095f0:	463a      	mov	r2, r7
 80095f2:	4621      	mov	r1, r4
 80095f4:	4630      	mov	r0, r6
 80095f6:	f7ff ffbc 	bl	8009572 <__sfputs_r>
 80095fa:	3001      	adds	r0, #1
 80095fc:	f000 80c2 	beq.w	8009784 <_vfiprintf_r+0x1ec>
 8009600:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009602:	4453      	add	r3, sl
 8009604:	9309      	str	r3, [sp, #36]	; 0x24
 8009606:	f898 3000 	ldrb.w	r3, [r8]
 800960a:	2b00      	cmp	r3, #0
 800960c:	f000 80ba 	beq.w	8009784 <_vfiprintf_r+0x1ec>
 8009610:	2300      	movs	r3, #0
 8009612:	f04f 32ff 	mov.w	r2, #4294967295
 8009616:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800961a:	9304      	str	r3, [sp, #16]
 800961c:	9307      	str	r3, [sp, #28]
 800961e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009622:	931a      	str	r3, [sp, #104]	; 0x68
 8009624:	46a8      	mov	r8, r5
 8009626:	2205      	movs	r2, #5
 8009628:	f818 1b01 	ldrb.w	r1, [r8], #1
 800962c:	485e      	ldr	r0, [pc, #376]	; (80097a8 <_vfiprintf_r+0x210>)
 800962e:	f7f6 fdef 	bl	8000210 <memchr>
 8009632:	9b04      	ldr	r3, [sp, #16]
 8009634:	bb78      	cbnz	r0, 8009696 <_vfiprintf_r+0xfe>
 8009636:	06d9      	lsls	r1, r3, #27
 8009638:	bf44      	itt	mi
 800963a:	2220      	movmi	r2, #32
 800963c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009640:	071a      	lsls	r2, r3, #28
 8009642:	bf44      	itt	mi
 8009644:	222b      	movmi	r2, #43	; 0x2b
 8009646:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800964a:	782a      	ldrb	r2, [r5, #0]
 800964c:	2a2a      	cmp	r2, #42	; 0x2a
 800964e:	d02a      	beq.n	80096a6 <_vfiprintf_r+0x10e>
 8009650:	9a07      	ldr	r2, [sp, #28]
 8009652:	46a8      	mov	r8, r5
 8009654:	2000      	movs	r0, #0
 8009656:	250a      	movs	r5, #10
 8009658:	4641      	mov	r1, r8
 800965a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800965e:	3b30      	subs	r3, #48	; 0x30
 8009660:	2b09      	cmp	r3, #9
 8009662:	d969      	bls.n	8009738 <_vfiprintf_r+0x1a0>
 8009664:	b360      	cbz	r0, 80096c0 <_vfiprintf_r+0x128>
 8009666:	e024      	b.n	80096b2 <_vfiprintf_r+0x11a>
 8009668:	4b50      	ldr	r3, [pc, #320]	; (80097ac <_vfiprintf_r+0x214>)
 800966a:	429c      	cmp	r4, r3
 800966c:	d101      	bne.n	8009672 <_vfiprintf_r+0xda>
 800966e:	68b4      	ldr	r4, [r6, #8]
 8009670:	e7a2      	b.n	80095b8 <_vfiprintf_r+0x20>
 8009672:	4b4f      	ldr	r3, [pc, #316]	; (80097b0 <_vfiprintf_r+0x218>)
 8009674:	429c      	cmp	r4, r3
 8009676:	bf08      	it	eq
 8009678:	68f4      	ldreq	r4, [r6, #12]
 800967a:	e79d      	b.n	80095b8 <_vfiprintf_r+0x20>
 800967c:	4621      	mov	r1, r4
 800967e:	4630      	mov	r0, r6
 8009680:	f7ff fc6c 	bl	8008f5c <__swsetup_r>
 8009684:	2800      	cmp	r0, #0
 8009686:	d09d      	beq.n	80095c4 <_vfiprintf_r+0x2c>
 8009688:	f04f 30ff 	mov.w	r0, #4294967295
 800968c:	b01d      	add	sp, #116	; 0x74
 800968e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009692:	46a8      	mov	r8, r5
 8009694:	e7a2      	b.n	80095dc <_vfiprintf_r+0x44>
 8009696:	4a44      	ldr	r2, [pc, #272]	; (80097a8 <_vfiprintf_r+0x210>)
 8009698:	1a80      	subs	r0, r0, r2
 800969a:	fa0b f000 	lsl.w	r0, fp, r0
 800969e:	4318      	orrs	r0, r3
 80096a0:	9004      	str	r0, [sp, #16]
 80096a2:	4645      	mov	r5, r8
 80096a4:	e7be      	b.n	8009624 <_vfiprintf_r+0x8c>
 80096a6:	9a03      	ldr	r2, [sp, #12]
 80096a8:	1d11      	adds	r1, r2, #4
 80096aa:	6812      	ldr	r2, [r2, #0]
 80096ac:	9103      	str	r1, [sp, #12]
 80096ae:	2a00      	cmp	r2, #0
 80096b0:	db01      	blt.n	80096b6 <_vfiprintf_r+0x11e>
 80096b2:	9207      	str	r2, [sp, #28]
 80096b4:	e004      	b.n	80096c0 <_vfiprintf_r+0x128>
 80096b6:	4252      	negs	r2, r2
 80096b8:	f043 0302 	orr.w	r3, r3, #2
 80096bc:	9207      	str	r2, [sp, #28]
 80096be:	9304      	str	r3, [sp, #16]
 80096c0:	f898 3000 	ldrb.w	r3, [r8]
 80096c4:	2b2e      	cmp	r3, #46	; 0x2e
 80096c6:	d10e      	bne.n	80096e6 <_vfiprintf_r+0x14e>
 80096c8:	f898 3001 	ldrb.w	r3, [r8, #1]
 80096cc:	2b2a      	cmp	r3, #42	; 0x2a
 80096ce:	d138      	bne.n	8009742 <_vfiprintf_r+0x1aa>
 80096d0:	9b03      	ldr	r3, [sp, #12]
 80096d2:	1d1a      	adds	r2, r3, #4
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	9203      	str	r2, [sp, #12]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	bfb8      	it	lt
 80096dc:	f04f 33ff 	movlt.w	r3, #4294967295
 80096e0:	f108 0802 	add.w	r8, r8, #2
 80096e4:	9305      	str	r3, [sp, #20]
 80096e6:	4d33      	ldr	r5, [pc, #204]	; (80097b4 <_vfiprintf_r+0x21c>)
 80096e8:	f898 1000 	ldrb.w	r1, [r8]
 80096ec:	2203      	movs	r2, #3
 80096ee:	4628      	mov	r0, r5
 80096f0:	f7f6 fd8e 	bl	8000210 <memchr>
 80096f4:	b140      	cbz	r0, 8009708 <_vfiprintf_r+0x170>
 80096f6:	2340      	movs	r3, #64	; 0x40
 80096f8:	1b40      	subs	r0, r0, r5
 80096fa:	fa03 f000 	lsl.w	r0, r3, r0
 80096fe:	9b04      	ldr	r3, [sp, #16]
 8009700:	4303      	orrs	r3, r0
 8009702:	f108 0801 	add.w	r8, r8, #1
 8009706:	9304      	str	r3, [sp, #16]
 8009708:	f898 1000 	ldrb.w	r1, [r8]
 800970c:	482a      	ldr	r0, [pc, #168]	; (80097b8 <_vfiprintf_r+0x220>)
 800970e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009712:	2206      	movs	r2, #6
 8009714:	f108 0701 	add.w	r7, r8, #1
 8009718:	f7f6 fd7a 	bl	8000210 <memchr>
 800971c:	2800      	cmp	r0, #0
 800971e:	d037      	beq.n	8009790 <_vfiprintf_r+0x1f8>
 8009720:	4b26      	ldr	r3, [pc, #152]	; (80097bc <_vfiprintf_r+0x224>)
 8009722:	bb1b      	cbnz	r3, 800976c <_vfiprintf_r+0x1d4>
 8009724:	9b03      	ldr	r3, [sp, #12]
 8009726:	3307      	adds	r3, #7
 8009728:	f023 0307 	bic.w	r3, r3, #7
 800972c:	3308      	adds	r3, #8
 800972e:	9303      	str	r3, [sp, #12]
 8009730:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009732:	444b      	add	r3, r9
 8009734:	9309      	str	r3, [sp, #36]	; 0x24
 8009736:	e750      	b.n	80095da <_vfiprintf_r+0x42>
 8009738:	fb05 3202 	mla	r2, r5, r2, r3
 800973c:	2001      	movs	r0, #1
 800973e:	4688      	mov	r8, r1
 8009740:	e78a      	b.n	8009658 <_vfiprintf_r+0xc0>
 8009742:	2300      	movs	r3, #0
 8009744:	f108 0801 	add.w	r8, r8, #1
 8009748:	9305      	str	r3, [sp, #20]
 800974a:	4619      	mov	r1, r3
 800974c:	250a      	movs	r5, #10
 800974e:	4640      	mov	r0, r8
 8009750:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009754:	3a30      	subs	r2, #48	; 0x30
 8009756:	2a09      	cmp	r2, #9
 8009758:	d903      	bls.n	8009762 <_vfiprintf_r+0x1ca>
 800975a:	2b00      	cmp	r3, #0
 800975c:	d0c3      	beq.n	80096e6 <_vfiprintf_r+0x14e>
 800975e:	9105      	str	r1, [sp, #20]
 8009760:	e7c1      	b.n	80096e6 <_vfiprintf_r+0x14e>
 8009762:	fb05 2101 	mla	r1, r5, r1, r2
 8009766:	2301      	movs	r3, #1
 8009768:	4680      	mov	r8, r0
 800976a:	e7f0      	b.n	800974e <_vfiprintf_r+0x1b6>
 800976c:	ab03      	add	r3, sp, #12
 800976e:	9300      	str	r3, [sp, #0]
 8009770:	4622      	mov	r2, r4
 8009772:	4b13      	ldr	r3, [pc, #76]	; (80097c0 <_vfiprintf_r+0x228>)
 8009774:	a904      	add	r1, sp, #16
 8009776:	4630      	mov	r0, r6
 8009778:	f3af 8000 	nop.w
 800977c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009780:	4681      	mov	r9, r0
 8009782:	d1d5      	bne.n	8009730 <_vfiprintf_r+0x198>
 8009784:	89a3      	ldrh	r3, [r4, #12]
 8009786:	065b      	lsls	r3, r3, #25
 8009788:	f53f af7e 	bmi.w	8009688 <_vfiprintf_r+0xf0>
 800978c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800978e:	e77d      	b.n	800968c <_vfiprintf_r+0xf4>
 8009790:	ab03      	add	r3, sp, #12
 8009792:	9300      	str	r3, [sp, #0]
 8009794:	4622      	mov	r2, r4
 8009796:	4b0a      	ldr	r3, [pc, #40]	; (80097c0 <_vfiprintf_r+0x228>)
 8009798:	a904      	add	r1, sp, #16
 800979a:	4630      	mov	r0, r6
 800979c:	f000 f888 	bl	80098b0 <_printf_i>
 80097a0:	e7ec      	b.n	800977c <_vfiprintf_r+0x1e4>
 80097a2:	bf00      	nop
 80097a4:	0801d76c 	.word	0x0801d76c
 80097a8:	0801d7ac 	.word	0x0801d7ac
 80097ac:	0801d78c 	.word	0x0801d78c
 80097b0:	0801d74c 	.word	0x0801d74c
 80097b4:	0801d7b2 	.word	0x0801d7b2
 80097b8:	0801d7b6 	.word	0x0801d7b6
 80097bc:	00000000 	.word	0x00000000
 80097c0:	08009573 	.word	0x08009573

080097c4 <_printf_common>:
 80097c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097c8:	4691      	mov	r9, r2
 80097ca:	461f      	mov	r7, r3
 80097cc:	688a      	ldr	r2, [r1, #8]
 80097ce:	690b      	ldr	r3, [r1, #16]
 80097d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80097d4:	4293      	cmp	r3, r2
 80097d6:	bfb8      	it	lt
 80097d8:	4613      	movlt	r3, r2
 80097da:	f8c9 3000 	str.w	r3, [r9]
 80097de:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80097e2:	4606      	mov	r6, r0
 80097e4:	460c      	mov	r4, r1
 80097e6:	b112      	cbz	r2, 80097ee <_printf_common+0x2a>
 80097e8:	3301      	adds	r3, #1
 80097ea:	f8c9 3000 	str.w	r3, [r9]
 80097ee:	6823      	ldr	r3, [r4, #0]
 80097f0:	0699      	lsls	r1, r3, #26
 80097f2:	bf42      	ittt	mi
 80097f4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80097f8:	3302      	addmi	r3, #2
 80097fa:	f8c9 3000 	strmi.w	r3, [r9]
 80097fe:	6825      	ldr	r5, [r4, #0]
 8009800:	f015 0506 	ands.w	r5, r5, #6
 8009804:	d107      	bne.n	8009816 <_printf_common+0x52>
 8009806:	f104 0a19 	add.w	sl, r4, #25
 800980a:	68e3      	ldr	r3, [r4, #12]
 800980c:	f8d9 2000 	ldr.w	r2, [r9]
 8009810:	1a9b      	subs	r3, r3, r2
 8009812:	42ab      	cmp	r3, r5
 8009814:	dc28      	bgt.n	8009868 <_printf_common+0xa4>
 8009816:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800981a:	6822      	ldr	r2, [r4, #0]
 800981c:	3300      	adds	r3, #0
 800981e:	bf18      	it	ne
 8009820:	2301      	movne	r3, #1
 8009822:	0692      	lsls	r2, r2, #26
 8009824:	d42d      	bmi.n	8009882 <_printf_common+0xbe>
 8009826:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800982a:	4639      	mov	r1, r7
 800982c:	4630      	mov	r0, r6
 800982e:	47c0      	blx	r8
 8009830:	3001      	adds	r0, #1
 8009832:	d020      	beq.n	8009876 <_printf_common+0xb2>
 8009834:	6823      	ldr	r3, [r4, #0]
 8009836:	68e5      	ldr	r5, [r4, #12]
 8009838:	f8d9 2000 	ldr.w	r2, [r9]
 800983c:	f003 0306 	and.w	r3, r3, #6
 8009840:	2b04      	cmp	r3, #4
 8009842:	bf08      	it	eq
 8009844:	1aad      	subeq	r5, r5, r2
 8009846:	68a3      	ldr	r3, [r4, #8]
 8009848:	6922      	ldr	r2, [r4, #16]
 800984a:	bf0c      	ite	eq
 800984c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009850:	2500      	movne	r5, #0
 8009852:	4293      	cmp	r3, r2
 8009854:	bfc4      	itt	gt
 8009856:	1a9b      	subgt	r3, r3, r2
 8009858:	18ed      	addgt	r5, r5, r3
 800985a:	f04f 0900 	mov.w	r9, #0
 800985e:	341a      	adds	r4, #26
 8009860:	454d      	cmp	r5, r9
 8009862:	d11a      	bne.n	800989a <_printf_common+0xd6>
 8009864:	2000      	movs	r0, #0
 8009866:	e008      	b.n	800987a <_printf_common+0xb6>
 8009868:	2301      	movs	r3, #1
 800986a:	4652      	mov	r2, sl
 800986c:	4639      	mov	r1, r7
 800986e:	4630      	mov	r0, r6
 8009870:	47c0      	blx	r8
 8009872:	3001      	adds	r0, #1
 8009874:	d103      	bne.n	800987e <_printf_common+0xba>
 8009876:	f04f 30ff 	mov.w	r0, #4294967295
 800987a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800987e:	3501      	adds	r5, #1
 8009880:	e7c3      	b.n	800980a <_printf_common+0x46>
 8009882:	18e1      	adds	r1, r4, r3
 8009884:	1c5a      	adds	r2, r3, #1
 8009886:	2030      	movs	r0, #48	; 0x30
 8009888:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800988c:	4422      	add	r2, r4
 800988e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009892:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009896:	3302      	adds	r3, #2
 8009898:	e7c5      	b.n	8009826 <_printf_common+0x62>
 800989a:	2301      	movs	r3, #1
 800989c:	4622      	mov	r2, r4
 800989e:	4639      	mov	r1, r7
 80098a0:	4630      	mov	r0, r6
 80098a2:	47c0      	blx	r8
 80098a4:	3001      	adds	r0, #1
 80098a6:	d0e6      	beq.n	8009876 <_printf_common+0xb2>
 80098a8:	f109 0901 	add.w	r9, r9, #1
 80098ac:	e7d8      	b.n	8009860 <_printf_common+0x9c>
	...

080098b0 <_printf_i>:
 80098b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80098b4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80098b8:	460c      	mov	r4, r1
 80098ba:	7e09      	ldrb	r1, [r1, #24]
 80098bc:	b085      	sub	sp, #20
 80098be:	296e      	cmp	r1, #110	; 0x6e
 80098c0:	4617      	mov	r7, r2
 80098c2:	4606      	mov	r6, r0
 80098c4:	4698      	mov	r8, r3
 80098c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80098c8:	f000 80b3 	beq.w	8009a32 <_printf_i+0x182>
 80098cc:	d822      	bhi.n	8009914 <_printf_i+0x64>
 80098ce:	2963      	cmp	r1, #99	; 0x63
 80098d0:	d036      	beq.n	8009940 <_printf_i+0x90>
 80098d2:	d80a      	bhi.n	80098ea <_printf_i+0x3a>
 80098d4:	2900      	cmp	r1, #0
 80098d6:	f000 80b9 	beq.w	8009a4c <_printf_i+0x19c>
 80098da:	2958      	cmp	r1, #88	; 0x58
 80098dc:	f000 8083 	beq.w	80099e6 <_printf_i+0x136>
 80098e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098e4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80098e8:	e032      	b.n	8009950 <_printf_i+0xa0>
 80098ea:	2964      	cmp	r1, #100	; 0x64
 80098ec:	d001      	beq.n	80098f2 <_printf_i+0x42>
 80098ee:	2969      	cmp	r1, #105	; 0x69
 80098f0:	d1f6      	bne.n	80098e0 <_printf_i+0x30>
 80098f2:	6820      	ldr	r0, [r4, #0]
 80098f4:	6813      	ldr	r3, [r2, #0]
 80098f6:	0605      	lsls	r5, r0, #24
 80098f8:	f103 0104 	add.w	r1, r3, #4
 80098fc:	d52a      	bpl.n	8009954 <_printf_i+0xa4>
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	6011      	str	r1, [r2, #0]
 8009902:	2b00      	cmp	r3, #0
 8009904:	da03      	bge.n	800990e <_printf_i+0x5e>
 8009906:	222d      	movs	r2, #45	; 0x2d
 8009908:	425b      	negs	r3, r3
 800990a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800990e:	486f      	ldr	r0, [pc, #444]	; (8009acc <_printf_i+0x21c>)
 8009910:	220a      	movs	r2, #10
 8009912:	e039      	b.n	8009988 <_printf_i+0xd8>
 8009914:	2973      	cmp	r1, #115	; 0x73
 8009916:	f000 809d 	beq.w	8009a54 <_printf_i+0x1a4>
 800991a:	d808      	bhi.n	800992e <_printf_i+0x7e>
 800991c:	296f      	cmp	r1, #111	; 0x6f
 800991e:	d020      	beq.n	8009962 <_printf_i+0xb2>
 8009920:	2970      	cmp	r1, #112	; 0x70
 8009922:	d1dd      	bne.n	80098e0 <_printf_i+0x30>
 8009924:	6823      	ldr	r3, [r4, #0]
 8009926:	f043 0320 	orr.w	r3, r3, #32
 800992a:	6023      	str	r3, [r4, #0]
 800992c:	e003      	b.n	8009936 <_printf_i+0x86>
 800992e:	2975      	cmp	r1, #117	; 0x75
 8009930:	d017      	beq.n	8009962 <_printf_i+0xb2>
 8009932:	2978      	cmp	r1, #120	; 0x78
 8009934:	d1d4      	bne.n	80098e0 <_printf_i+0x30>
 8009936:	2378      	movs	r3, #120	; 0x78
 8009938:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800993c:	4864      	ldr	r0, [pc, #400]	; (8009ad0 <_printf_i+0x220>)
 800993e:	e055      	b.n	80099ec <_printf_i+0x13c>
 8009940:	6813      	ldr	r3, [r2, #0]
 8009942:	1d19      	adds	r1, r3, #4
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	6011      	str	r1, [r2, #0]
 8009948:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800994c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009950:	2301      	movs	r3, #1
 8009952:	e08c      	b.n	8009a6e <_printf_i+0x1be>
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	6011      	str	r1, [r2, #0]
 8009958:	f010 0f40 	tst.w	r0, #64	; 0x40
 800995c:	bf18      	it	ne
 800995e:	b21b      	sxthne	r3, r3
 8009960:	e7cf      	b.n	8009902 <_printf_i+0x52>
 8009962:	6813      	ldr	r3, [r2, #0]
 8009964:	6825      	ldr	r5, [r4, #0]
 8009966:	1d18      	adds	r0, r3, #4
 8009968:	6010      	str	r0, [r2, #0]
 800996a:	0628      	lsls	r0, r5, #24
 800996c:	d501      	bpl.n	8009972 <_printf_i+0xc2>
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	e002      	b.n	8009978 <_printf_i+0xc8>
 8009972:	0668      	lsls	r0, r5, #25
 8009974:	d5fb      	bpl.n	800996e <_printf_i+0xbe>
 8009976:	881b      	ldrh	r3, [r3, #0]
 8009978:	4854      	ldr	r0, [pc, #336]	; (8009acc <_printf_i+0x21c>)
 800997a:	296f      	cmp	r1, #111	; 0x6f
 800997c:	bf14      	ite	ne
 800997e:	220a      	movne	r2, #10
 8009980:	2208      	moveq	r2, #8
 8009982:	2100      	movs	r1, #0
 8009984:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009988:	6865      	ldr	r5, [r4, #4]
 800998a:	60a5      	str	r5, [r4, #8]
 800998c:	2d00      	cmp	r5, #0
 800998e:	f2c0 8095 	blt.w	8009abc <_printf_i+0x20c>
 8009992:	6821      	ldr	r1, [r4, #0]
 8009994:	f021 0104 	bic.w	r1, r1, #4
 8009998:	6021      	str	r1, [r4, #0]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d13d      	bne.n	8009a1a <_printf_i+0x16a>
 800999e:	2d00      	cmp	r5, #0
 80099a0:	f040 808e 	bne.w	8009ac0 <_printf_i+0x210>
 80099a4:	4665      	mov	r5, ip
 80099a6:	2a08      	cmp	r2, #8
 80099a8:	d10b      	bne.n	80099c2 <_printf_i+0x112>
 80099aa:	6823      	ldr	r3, [r4, #0]
 80099ac:	07db      	lsls	r3, r3, #31
 80099ae:	d508      	bpl.n	80099c2 <_printf_i+0x112>
 80099b0:	6923      	ldr	r3, [r4, #16]
 80099b2:	6862      	ldr	r2, [r4, #4]
 80099b4:	429a      	cmp	r2, r3
 80099b6:	bfde      	ittt	le
 80099b8:	2330      	movle	r3, #48	; 0x30
 80099ba:	f805 3c01 	strble.w	r3, [r5, #-1]
 80099be:	f105 35ff 	addle.w	r5, r5, #4294967295
 80099c2:	ebac 0305 	sub.w	r3, ip, r5
 80099c6:	6123      	str	r3, [r4, #16]
 80099c8:	f8cd 8000 	str.w	r8, [sp]
 80099cc:	463b      	mov	r3, r7
 80099ce:	aa03      	add	r2, sp, #12
 80099d0:	4621      	mov	r1, r4
 80099d2:	4630      	mov	r0, r6
 80099d4:	f7ff fef6 	bl	80097c4 <_printf_common>
 80099d8:	3001      	adds	r0, #1
 80099da:	d14d      	bne.n	8009a78 <_printf_i+0x1c8>
 80099dc:	f04f 30ff 	mov.w	r0, #4294967295
 80099e0:	b005      	add	sp, #20
 80099e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80099e6:	4839      	ldr	r0, [pc, #228]	; (8009acc <_printf_i+0x21c>)
 80099e8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80099ec:	6813      	ldr	r3, [r2, #0]
 80099ee:	6821      	ldr	r1, [r4, #0]
 80099f0:	1d1d      	adds	r5, r3, #4
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	6015      	str	r5, [r2, #0]
 80099f6:	060a      	lsls	r2, r1, #24
 80099f8:	d50b      	bpl.n	8009a12 <_printf_i+0x162>
 80099fa:	07ca      	lsls	r2, r1, #31
 80099fc:	bf44      	itt	mi
 80099fe:	f041 0120 	orrmi.w	r1, r1, #32
 8009a02:	6021      	strmi	r1, [r4, #0]
 8009a04:	b91b      	cbnz	r3, 8009a0e <_printf_i+0x15e>
 8009a06:	6822      	ldr	r2, [r4, #0]
 8009a08:	f022 0220 	bic.w	r2, r2, #32
 8009a0c:	6022      	str	r2, [r4, #0]
 8009a0e:	2210      	movs	r2, #16
 8009a10:	e7b7      	b.n	8009982 <_printf_i+0xd2>
 8009a12:	064d      	lsls	r5, r1, #25
 8009a14:	bf48      	it	mi
 8009a16:	b29b      	uxthmi	r3, r3
 8009a18:	e7ef      	b.n	80099fa <_printf_i+0x14a>
 8009a1a:	4665      	mov	r5, ip
 8009a1c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009a20:	fb02 3311 	mls	r3, r2, r1, r3
 8009a24:	5cc3      	ldrb	r3, [r0, r3]
 8009a26:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009a2a:	460b      	mov	r3, r1
 8009a2c:	2900      	cmp	r1, #0
 8009a2e:	d1f5      	bne.n	8009a1c <_printf_i+0x16c>
 8009a30:	e7b9      	b.n	80099a6 <_printf_i+0xf6>
 8009a32:	6813      	ldr	r3, [r2, #0]
 8009a34:	6825      	ldr	r5, [r4, #0]
 8009a36:	6961      	ldr	r1, [r4, #20]
 8009a38:	1d18      	adds	r0, r3, #4
 8009a3a:	6010      	str	r0, [r2, #0]
 8009a3c:	0628      	lsls	r0, r5, #24
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	d501      	bpl.n	8009a46 <_printf_i+0x196>
 8009a42:	6019      	str	r1, [r3, #0]
 8009a44:	e002      	b.n	8009a4c <_printf_i+0x19c>
 8009a46:	066a      	lsls	r2, r5, #25
 8009a48:	d5fb      	bpl.n	8009a42 <_printf_i+0x192>
 8009a4a:	8019      	strh	r1, [r3, #0]
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	6123      	str	r3, [r4, #16]
 8009a50:	4665      	mov	r5, ip
 8009a52:	e7b9      	b.n	80099c8 <_printf_i+0x118>
 8009a54:	6813      	ldr	r3, [r2, #0]
 8009a56:	1d19      	adds	r1, r3, #4
 8009a58:	6011      	str	r1, [r2, #0]
 8009a5a:	681d      	ldr	r5, [r3, #0]
 8009a5c:	6862      	ldr	r2, [r4, #4]
 8009a5e:	2100      	movs	r1, #0
 8009a60:	4628      	mov	r0, r5
 8009a62:	f7f6 fbd5 	bl	8000210 <memchr>
 8009a66:	b108      	cbz	r0, 8009a6c <_printf_i+0x1bc>
 8009a68:	1b40      	subs	r0, r0, r5
 8009a6a:	6060      	str	r0, [r4, #4]
 8009a6c:	6863      	ldr	r3, [r4, #4]
 8009a6e:	6123      	str	r3, [r4, #16]
 8009a70:	2300      	movs	r3, #0
 8009a72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a76:	e7a7      	b.n	80099c8 <_printf_i+0x118>
 8009a78:	6923      	ldr	r3, [r4, #16]
 8009a7a:	462a      	mov	r2, r5
 8009a7c:	4639      	mov	r1, r7
 8009a7e:	4630      	mov	r0, r6
 8009a80:	47c0      	blx	r8
 8009a82:	3001      	adds	r0, #1
 8009a84:	d0aa      	beq.n	80099dc <_printf_i+0x12c>
 8009a86:	6823      	ldr	r3, [r4, #0]
 8009a88:	079b      	lsls	r3, r3, #30
 8009a8a:	d413      	bmi.n	8009ab4 <_printf_i+0x204>
 8009a8c:	68e0      	ldr	r0, [r4, #12]
 8009a8e:	9b03      	ldr	r3, [sp, #12]
 8009a90:	4298      	cmp	r0, r3
 8009a92:	bfb8      	it	lt
 8009a94:	4618      	movlt	r0, r3
 8009a96:	e7a3      	b.n	80099e0 <_printf_i+0x130>
 8009a98:	2301      	movs	r3, #1
 8009a9a:	464a      	mov	r2, r9
 8009a9c:	4639      	mov	r1, r7
 8009a9e:	4630      	mov	r0, r6
 8009aa0:	47c0      	blx	r8
 8009aa2:	3001      	adds	r0, #1
 8009aa4:	d09a      	beq.n	80099dc <_printf_i+0x12c>
 8009aa6:	3501      	adds	r5, #1
 8009aa8:	68e3      	ldr	r3, [r4, #12]
 8009aaa:	9a03      	ldr	r2, [sp, #12]
 8009aac:	1a9b      	subs	r3, r3, r2
 8009aae:	42ab      	cmp	r3, r5
 8009ab0:	dcf2      	bgt.n	8009a98 <_printf_i+0x1e8>
 8009ab2:	e7eb      	b.n	8009a8c <_printf_i+0x1dc>
 8009ab4:	2500      	movs	r5, #0
 8009ab6:	f104 0919 	add.w	r9, r4, #25
 8009aba:	e7f5      	b.n	8009aa8 <_printf_i+0x1f8>
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d1ac      	bne.n	8009a1a <_printf_i+0x16a>
 8009ac0:	7803      	ldrb	r3, [r0, #0]
 8009ac2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ac6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009aca:	e76c      	b.n	80099a6 <_printf_i+0xf6>
 8009acc:	0801d7bd 	.word	0x0801d7bd
 8009ad0:	0801d7ce 	.word	0x0801d7ce

08009ad4 <_sbrk_r>:
 8009ad4:	b538      	push	{r3, r4, r5, lr}
 8009ad6:	4c06      	ldr	r4, [pc, #24]	; (8009af0 <_sbrk_r+0x1c>)
 8009ad8:	2300      	movs	r3, #0
 8009ada:	4605      	mov	r5, r0
 8009adc:	4608      	mov	r0, r1
 8009ade:	6023      	str	r3, [r4, #0]
 8009ae0:	f7fe fe40 	bl	8008764 <_sbrk>
 8009ae4:	1c43      	adds	r3, r0, #1
 8009ae6:	d102      	bne.n	8009aee <_sbrk_r+0x1a>
 8009ae8:	6823      	ldr	r3, [r4, #0]
 8009aea:	b103      	cbz	r3, 8009aee <_sbrk_r+0x1a>
 8009aec:	602b      	str	r3, [r5, #0]
 8009aee:	bd38      	pop	{r3, r4, r5, pc}
 8009af0:	200005b8 	.word	0x200005b8

08009af4 <__sread>:
 8009af4:	b510      	push	{r4, lr}
 8009af6:	460c      	mov	r4, r1
 8009af8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009afc:	f000 f896 	bl	8009c2c <_read_r>
 8009b00:	2800      	cmp	r0, #0
 8009b02:	bfab      	itete	ge
 8009b04:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009b06:	89a3      	ldrhlt	r3, [r4, #12]
 8009b08:	181b      	addge	r3, r3, r0
 8009b0a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009b0e:	bfac      	ite	ge
 8009b10:	6563      	strge	r3, [r4, #84]	; 0x54
 8009b12:	81a3      	strhlt	r3, [r4, #12]
 8009b14:	bd10      	pop	{r4, pc}

08009b16 <__swrite>:
 8009b16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b1a:	461f      	mov	r7, r3
 8009b1c:	898b      	ldrh	r3, [r1, #12]
 8009b1e:	05db      	lsls	r3, r3, #23
 8009b20:	4605      	mov	r5, r0
 8009b22:	460c      	mov	r4, r1
 8009b24:	4616      	mov	r6, r2
 8009b26:	d505      	bpl.n	8009b34 <__swrite+0x1e>
 8009b28:	2302      	movs	r3, #2
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b30:	f000 f868 	bl	8009c04 <_lseek_r>
 8009b34:	89a3      	ldrh	r3, [r4, #12]
 8009b36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009b3e:	81a3      	strh	r3, [r4, #12]
 8009b40:	4632      	mov	r2, r6
 8009b42:	463b      	mov	r3, r7
 8009b44:	4628      	mov	r0, r5
 8009b46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b4a:	f000 b817 	b.w	8009b7c <_write_r>

08009b4e <__sseek>:
 8009b4e:	b510      	push	{r4, lr}
 8009b50:	460c      	mov	r4, r1
 8009b52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b56:	f000 f855 	bl	8009c04 <_lseek_r>
 8009b5a:	1c43      	adds	r3, r0, #1
 8009b5c:	89a3      	ldrh	r3, [r4, #12]
 8009b5e:	bf15      	itete	ne
 8009b60:	6560      	strne	r0, [r4, #84]	; 0x54
 8009b62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009b66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009b6a:	81a3      	strheq	r3, [r4, #12]
 8009b6c:	bf18      	it	ne
 8009b6e:	81a3      	strhne	r3, [r4, #12]
 8009b70:	bd10      	pop	{r4, pc}

08009b72 <__sclose>:
 8009b72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b76:	f000 b813 	b.w	8009ba0 <_close_r>
	...

08009b7c <_write_r>:
 8009b7c:	b538      	push	{r3, r4, r5, lr}
 8009b7e:	4c07      	ldr	r4, [pc, #28]	; (8009b9c <_write_r+0x20>)
 8009b80:	4605      	mov	r5, r0
 8009b82:	4608      	mov	r0, r1
 8009b84:	4611      	mov	r1, r2
 8009b86:	2200      	movs	r2, #0
 8009b88:	6022      	str	r2, [r4, #0]
 8009b8a:	461a      	mov	r2, r3
 8009b8c:	f7fd fc3b 	bl	8007406 <_write>
 8009b90:	1c43      	adds	r3, r0, #1
 8009b92:	d102      	bne.n	8009b9a <_write_r+0x1e>
 8009b94:	6823      	ldr	r3, [r4, #0]
 8009b96:	b103      	cbz	r3, 8009b9a <_write_r+0x1e>
 8009b98:	602b      	str	r3, [r5, #0]
 8009b9a:	bd38      	pop	{r3, r4, r5, pc}
 8009b9c:	200005b8 	.word	0x200005b8

08009ba0 <_close_r>:
 8009ba0:	b538      	push	{r3, r4, r5, lr}
 8009ba2:	4c06      	ldr	r4, [pc, #24]	; (8009bbc <_close_r+0x1c>)
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	4605      	mov	r5, r0
 8009ba8:	4608      	mov	r0, r1
 8009baa:	6023      	str	r3, [r4, #0]
 8009bac:	f7fe fda5 	bl	80086fa <_close>
 8009bb0:	1c43      	adds	r3, r0, #1
 8009bb2:	d102      	bne.n	8009bba <_close_r+0x1a>
 8009bb4:	6823      	ldr	r3, [r4, #0]
 8009bb6:	b103      	cbz	r3, 8009bba <_close_r+0x1a>
 8009bb8:	602b      	str	r3, [r5, #0]
 8009bba:	bd38      	pop	{r3, r4, r5, pc}
 8009bbc:	200005b8 	.word	0x200005b8

08009bc0 <_fstat_r>:
 8009bc0:	b538      	push	{r3, r4, r5, lr}
 8009bc2:	4c07      	ldr	r4, [pc, #28]	; (8009be0 <_fstat_r+0x20>)
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	4605      	mov	r5, r0
 8009bc8:	4608      	mov	r0, r1
 8009bca:	4611      	mov	r1, r2
 8009bcc:	6023      	str	r3, [r4, #0]
 8009bce:	f7fe fda0 	bl	8008712 <_fstat>
 8009bd2:	1c43      	adds	r3, r0, #1
 8009bd4:	d102      	bne.n	8009bdc <_fstat_r+0x1c>
 8009bd6:	6823      	ldr	r3, [r4, #0]
 8009bd8:	b103      	cbz	r3, 8009bdc <_fstat_r+0x1c>
 8009bda:	602b      	str	r3, [r5, #0]
 8009bdc:	bd38      	pop	{r3, r4, r5, pc}
 8009bde:	bf00      	nop
 8009be0:	200005b8 	.word	0x200005b8

08009be4 <_isatty_r>:
 8009be4:	b538      	push	{r3, r4, r5, lr}
 8009be6:	4c06      	ldr	r4, [pc, #24]	; (8009c00 <_isatty_r+0x1c>)
 8009be8:	2300      	movs	r3, #0
 8009bea:	4605      	mov	r5, r0
 8009bec:	4608      	mov	r0, r1
 8009bee:	6023      	str	r3, [r4, #0]
 8009bf0:	f7fe fd9f 	bl	8008732 <_isatty>
 8009bf4:	1c43      	adds	r3, r0, #1
 8009bf6:	d102      	bne.n	8009bfe <_isatty_r+0x1a>
 8009bf8:	6823      	ldr	r3, [r4, #0]
 8009bfa:	b103      	cbz	r3, 8009bfe <_isatty_r+0x1a>
 8009bfc:	602b      	str	r3, [r5, #0]
 8009bfe:	bd38      	pop	{r3, r4, r5, pc}
 8009c00:	200005b8 	.word	0x200005b8

08009c04 <_lseek_r>:
 8009c04:	b538      	push	{r3, r4, r5, lr}
 8009c06:	4c07      	ldr	r4, [pc, #28]	; (8009c24 <_lseek_r+0x20>)
 8009c08:	4605      	mov	r5, r0
 8009c0a:	4608      	mov	r0, r1
 8009c0c:	4611      	mov	r1, r2
 8009c0e:	2200      	movs	r2, #0
 8009c10:	6022      	str	r2, [r4, #0]
 8009c12:	461a      	mov	r2, r3
 8009c14:	f7fe fd98 	bl	8008748 <_lseek>
 8009c18:	1c43      	adds	r3, r0, #1
 8009c1a:	d102      	bne.n	8009c22 <_lseek_r+0x1e>
 8009c1c:	6823      	ldr	r3, [r4, #0]
 8009c1e:	b103      	cbz	r3, 8009c22 <_lseek_r+0x1e>
 8009c20:	602b      	str	r3, [r5, #0]
 8009c22:	bd38      	pop	{r3, r4, r5, pc}
 8009c24:	200005b8 	.word	0x200005b8

08009c28 <__malloc_lock>:
 8009c28:	4770      	bx	lr

08009c2a <__malloc_unlock>:
 8009c2a:	4770      	bx	lr

08009c2c <_read_r>:
 8009c2c:	b538      	push	{r3, r4, r5, lr}
 8009c2e:	4c07      	ldr	r4, [pc, #28]	; (8009c4c <_read_r+0x20>)
 8009c30:	4605      	mov	r5, r0
 8009c32:	4608      	mov	r0, r1
 8009c34:	4611      	mov	r1, r2
 8009c36:	2200      	movs	r2, #0
 8009c38:	6022      	str	r2, [r4, #0]
 8009c3a:	461a      	mov	r2, r3
 8009c3c:	f7fe fd40 	bl	80086c0 <_read>
 8009c40:	1c43      	adds	r3, r0, #1
 8009c42:	d102      	bne.n	8009c4a <_read_r+0x1e>
 8009c44:	6823      	ldr	r3, [r4, #0]
 8009c46:	b103      	cbz	r3, 8009c4a <_read_r+0x1e>
 8009c48:	602b      	str	r3, [r5, #0]
 8009c4a:	bd38      	pop	{r3, r4, r5, pc}
 8009c4c:	200005b8 	.word	0x200005b8

08009c50 <fmodf>:
 8009c50:	b5d0      	push	{r4, r6, r7, lr}
 8009c52:	ed2d 8b02 	vpush	{d8}
 8009c56:	b08a      	sub	sp, #40	; 0x28
 8009c58:	eef0 8a40 	vmov.f32	s17, s0
 8009c5c:	eeb0 8a60 	vmov.f32	s16, s1
 8009c60:	f000 f852 	bl	8009d08 <__ieee754_fmodf>
 8009c64:	4b26      	ldr	r3, [pc, #152]	; (8009d00 <fmodf+0xb0>)
 8009c66:	f993 4000 	ldrsb.w	r4, [r3]
 8009c6a:	1c63      	adds	r3, r4, #1
 8009c6c:	d035      	beq.n	8009cda <fmodf+0x8a>
 8009c6e:	eeb4 8a48 	vcmp.f32	s16, s16
 8009c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c76:	d630      	bvs.n	8009cda <fmodf+0x8a>
 8009c78:	eef4 8a68 	vcmp.f32	s17, s17
 8009c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c80:	d62b      	bvs.n	8009cda <fmodf+0x8a>
 8009c82:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8009c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c8a:	d126      	bne.n	8009cda <fmodf+0x8a>
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	9300      	str	r3, [sp, #0]
 8009c90:	4b1c      	ldr	r3, [pc, #112]	; (8009d04 <fmodf+0xb4>)
 8009c92:	9301      	str	r3, [sp, #4]
 8009c94:	ee18 0a90 	vmov	r0, s17
 8009c98:	2300      	movs	r3, #0
 8009c9a:	9308      	str	r3, [sp, #32]
 8009c9c:	f7f6 fc6c 	bl	8000578 <__aeabi_f2d>
 8009ca0:	4606      	mov	r6, r0
 8009ca2:	460f      	mov	r7, r1
 8009ca4:	ee18 0a10 	vmov	r0, s16
 8009ca8:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8009cac:	f7f6 fc64 	bl	8000578 <__aeabi_f2d>
 8009cb0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009cb4:	b9ac      	cbnz	r4, 8009ce2 <fmodf+0x92>
 8009cb6:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009cba:	4668      	mov	r0, sp
 8009cbc:	f000 f8ac 	bl	8009e18 <matherr>
 8009cc0:	b1c8      	cbz	r0, 8009cf6 <fmodf+0xa6>
 8009cc2:	9b08      	ldr	r3, [sp, #32]
 8009cc4:	b11b      	cbz	r3, 8009cce <fmodf+0x7e>
 8009cc6:	f7ff f849 	bl	8008d5c <__errno>
 8009cca:	9b08      	ldr	r3, [sp, #32]
 8009ccc:	6003      	str	r3, [r0, #0]
 8009cce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009cd2:	f7f6 ff43 	bl	8000b5c <__aeabi_d2f>
 8009cd6:	ee00 0a10 	vmov	s0, r0
 8009cda:	b00a      	add	sp, #40	; 0x28
 8009cdc:	ecbd 8b02 	vpop	{d8}
 8009ce0:	bdd0      	pop	{r4, r6, r7, pc}
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	4610      	mov	r0, r2
 8009ce8:	4619      	mov	r1, r3
 8009cea:	f7f6 fdc7 	bl	800087c <__aeabi_ddiv>
 8009cee:	2c02      	cmp	r4, #2
 8009cf0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009cf4:	d1e1      	bne.n	8009cba <fmodf+0x6a>
 8009cf6:	f7ff f831 	bl	8008d5c <__errno>
 8009cfa:	2321      	movs	r3, #33	; 0x21
 8009cfc:	6003      	str	r3, [r0, #0]
 8009cfe:	e7e0      	b.n	8009cc2 <fmodf+0x72>
 8009d00:	200000a0 	.word	0x200000a0
 8009d04:	0801d7df 	.word	0x0801d7df

08009d08 <__ieee754_fmodf>:
 8009d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d0a:	ee10 6a90 	vmov	r6, s1
 8009d0e:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 8009d12:	ee10 3a10 	vmov	r3, s0
 8009d16:	d009      	beq.n	8009d2c <__ieee754_fmodf+0x24>
 8009d18:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009d1c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009d20:	ee10 7a10 	vmov	r7, s0
 8009d24:	da02      	bge.n	8009d2c <__ieee754_fmodf+0x24>
 8009d26:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8009d2a:	dd0a      	ble.n	8009d42 <__ieee754_fmodf+0x3a>
 8009d2c:	ee07 3a90 	vmov	s15, r3
 8009d30:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8009d34:	eec0 7aa0 	vdiv.f32	s15, s1, s1
 8009d38:	ee17 3a90 	vmov	r3, s15
 8009d3c:	ee00 3a10 	vmov	s0, r3
 8009d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d42:	42a9      	cmp	r1, r5
 8009d44:	dbfa      	blt.n	8009d3c <__ieee754_fmodf+0x34>
 8009d46:	f003 4400 	and.w	r4, r3, #2147483648	; 0x80000000
 8009d4a:	d105      	bne.n	8009d58 <__ieee754_fmodf+0x50>
 8009d4c:	4a30      	ldr	r2, [pc, #192]	; (8009e10 <__ieee754_fmodf+0x108>)
 8009d4e:	0fe3      	lsrs	r3, r4, #31
 8009d50:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	e7f1      	b.n	8009d3c <__ieee754_fmodf+0x34>
 8009d58:	4b2e      	ldr	r3, [pc, #184]	; (8009e14 <__ieee754_fmodf+0x10c>)
 8009d5a:	4299      	cmp	r1, r3
 8009d5c:	dc3e      	bgt.n	8009ddc <__ieee754_fmodf+0xd4>
 8009d5e:	020a      	lsls	r2, r1, #8
 8009d60:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8009d64:	2a00      	cmp	r2, #0
 8009d66:	dc36      	bgt.n	8009dd6 <__ieee754_fmodf+0xce>
 8009d68:	429d      	cmp	r5, r3
 8009d6a:	dc3a      	bgt.n	8009de2 <__ieee754_fmodf+0xda>
 8009d6c:	022b      	lsls	r3, r5, #8
 8009d6e:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 8009d72:	005b      	lsls	r3, r3, #1
 8009d74:	f102 32ff 	add.w	r2, r2, #4294967295
 8009d78:	d5fb      	bpl.n	8009d72 <__ieee754_fmodf+0x6a>
 8009d7a:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 8009d7e:	bfbb      	ittet	lt
 8009d80:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 8009d84:	1a1b      	sublt	r3, r3, r0
 8009d86:	f3c7 0116 	ubfxge	r1, r7, #0, #23
 8009d8a:	4099      	lsllt	r1, r3
 8009d8c:	bfa8      	it	ge
 8009d8e:	f441 0100 	orrge.w	r1, r1, #8388608	; 0x800000
 8009d92:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 8009d96:	bfb5      	itete	lt
 8009d98:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 8009d9c:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 8009da0:	1a9b      	sublt	r3, r3, r2
 8009da2:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 8009da6:	bfb8      	it	lt
 8009da8:	409d      	lsllt	r5, r3
 8009daa:	1a80      	subs	r0, r0, r2
 8009dac:	1b4b      	subs	r3, r1, r5
 8009dae:	b9d8      	cbnz	r0, 8009de8 <__ieee754_fmodf+0xe0>
 8009db0:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 8009db4:	bf28      	it	cs
 8009db6:	460b      	movcs	r3, r1
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d0c7      	beq.n	8009d4c <__ieee754_fmodf+0x44>
 8009dbc:	4915      	ldr	r1, [pc, #84]	; (8009e14 <__ieee754_fmodf+0x10c>)
 8009dbe:	428b      	cmp	r3, r1
 8009dc0:	dd1a      	ble.n	8009df8 <__ieee754_fmodf+0xf0>
 8009dc2:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 8009dc6:	db1a      	blt.n	8009dfe <__ieee754_fmodf+0xf6>
 8009dc8:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8009dcc:	4323      	orrs	r3, r4
 8009dce:	327f      	adds	r2, #127	; 0x7f
 8009dd0:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8009dd4:	e7b2      	b.n	8009d3c <__ieee754_fmodf+0x34>
 8009dd6:	3801      	subs	r0, #1
 8009dd8:	0052      	lsls	r2, r2, #1
 8009dda:	e7c3      	b.n	8009d64 <__ieee754_fmodf+0x5c>
 8009ddc:	15c8      	asrs	r0, r1, #23
 8009dde:	387f      	subs	r0, #127	; 0x7f
 8009de0:	e7c2      	b.n	8009d68 <__ieee754_fmodf+0x60>
 8009de2:	15ea      	asrs	r2, r5, #23
 8009de4:	3a7f      	subs	r2, #127	; 0x7f
 8009de6:	e7c8      	b.n	8009d7a <__ieee754_fmodf+0x72>
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	da02      	bge.n	8009df2 <__ieee754_fmodf+0xea>
 8009dec:	0049      	lsls	r1, r1, #1
 8009dee:	3801      	subs	r0, #1
 8009df0:	e7dc      	b.n	8009dac <__ieee754_fmodf+0xa4>
 8009df2:	d0ab      	beq.n	8009d4c <__ieee754_fmodf+0x44>
 8009df4:	0059      	lsls	r1, r3, #1
 8009df6:	e7fa      	b.n	8009dee <__ieee754_fmodf+0xe6>
 8009df8:	005b      	lsls	r3, r3, #1
 8009dfa:	3a01      	subs	r2, #1
 8009dfc:	e7df      	b.n	8009dbe <__ieee754_fmodf+0xb6>
 8009dfe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009e02:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009e06:	3282      	adds	r2, #130	; 0x82
 8009e08:	4113      	asrs	r3, r2
 8009e0a:	4323      	orrs	r3, r4
 8009e0c:	e796      	b.n	8009d3c <__ieee754_fmodf+0x34>
 8009e0e:	bf00      	nop
 8009e10:	0801d7e8 	.word	0x0801d7e8
 8009e14:	007fffff 	.word	0x007fffff

08009e18 <matherr>:
 8009e18:	2000      	movs	r0, #0
 8009e1a:	4770      	bx	lr

08009e1c <_init>:
 8009e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e1e:	bf00      	nop
 8009e20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e22:	bc08      	pop	{r3}
 8009e24:	469e      	mov	lr, r3
 8009e26:	4770      	bx	lr

08009e28 <_fini>:
 8009e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e2a:	bf00      	nop
 8009e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e2e:	bc08      	pop	{r3}
 8009e30:	469e      	mov	lr, r3
 8009e32:	4770      	bx	lr
