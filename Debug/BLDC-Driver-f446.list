
BLDC-Driver-f446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .backup_flash 00004000  08004000  08004000  00014000  2**0
                  ALLOC
  2 .text         0000ab28  08008000  08008000  00018000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00013a88  08012b28  08012b28  00022b28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  080265b0  080265b0  00040084  2**0
                  CONTENTS
  5 .ARM          00000008  080265b0  080265b0  000365b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  080265b8  080265b8  00040084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  080265b8  080265b8  000365b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  080265bc  080265bc  000365bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000084  20000000  080265c0  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000045a8  20000084  08026644  00040084  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000462c  08026644  0004462c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ee1b  00000000  00000000  000400b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000429d  00000000  00000000  0005eecf  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001530  00000000  00000000  00063170  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001300  00000000  00000000  000646a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000268b2  00000000  00000000  000659a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00014938  00000000  00000000  0008c252  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000da699  00000000  00000000  000a0b8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0017b223  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005f88  00000000  00000000  0017b2a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008000 <__do_global_dtors_aux>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4c05      	ldr	r4, [pc, #20]	; (8008018 <__do_global_dtors_aux+0x18>)
 8008004:	7823      	ldrb	r3, [r4, #0]
 8008006:	b933      	cbnz	r3, 8008016 <__do_global_dtors_aux+0x16>
 8008008:	4b04      	ldr	r3, [pc, #16]	; (800801c <__do_global_dtors_aux+0x1c>)
 800800a:	b113      	cbz	r3, 8008012 <__do_global_dtors_aux+0x12>
 800800c:	4804      	ldr	r0, [pc, #16]	; (8008020 <__do_global_dtors_aux+0x20>)
 800800e:	f3af 8000 	nop.w
 8008012:	2301      	movs	r3, #1
 8008014:	7023      	strb	r3, [r4, #0]
 8008016:	bd10      	pop	{r4, pc}
 8008018:	20000084 	.word	0x20000084
 800801c:	00000000 	.word	0x00000000
 8008020:	08012b10 	.word	0x08012b10

08008024 <frame_dummy>:
 8008024:	b508      	push	{r3, lr}
 8008026:	4b03      	ldr	r3, [pc, #12]	; (8008034 <frame_dummy+0x10>)
 8008028:	b11b      	cbz	r3, 8008032 <frame_dummy+0xe>
 800802a:	4903      	ldr	r1, [pc, #12]	; (8008038 <frame_dummy+0x14>)
 800802c:	4803      	ldr	r0, [pc, #12]	; (800803c <frame_dummy+0x18>)
 800802e:	f3af 8000 	nop.w
 8008032:	bd08      	pop	{r3, pc}
 8008034:	00000000 	.word	0x00000000
 8008038:	20000088 	.word	0x20000088
 800803c:	08012b10 	.word	0x08012b10

08008040 <memchr>:
 8008040:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008044:	2a10      	cmp	r2, #16
 8008046:	db2b      	blt.n	80080a0 <memchr+0x60>
 8008048:	f010 0f07 	tst.w	r0, #7
 800804c:	d008      	beq.n	8008060 <memchr+0x20>
 800804e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008052:	3a01      	subs	r2, #1
 8008054:	428b      	cmp	r3, r1
 8008056:	d02d      	beq.n	80080b4 <memchr+0x74>
 8008058:	f010 0f07 	tst.w	r0, #7
 800805c:	b342      	cbz	r2, 80080b0 <memchr+0x70>
 800805e:	d1f6      	bne.n	800804e <memchr+0xe>
 8008060:	b4f0      	push	{r4, r5, r6, r7}
 8008062:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008066:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800806a:	f022 0407 	bic.w	r4, r2, #7
 800806e:	f07f 0700 	mvns.w	r7, #0
 8008072:	2300      	movs	r3, #0
 8008074:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008078:	3c08      	subs	r4, #8
 800807a:	ea85 0501 	eor.w	r5, r5, r1
 800807e:	ea86 0601 	eor.w	r6, r6, r1
 8008082:	fa85 f547 	uadd8	r5, r5, r7
 8008086:	faa3 f587 	sel	r5, r3, r7
 800808a:	fa86 f647 	uadd8	r6, r6, r7
 800808e:	faa5 f687 	sel	r6, r5, r7
 8008092:	b98e      	cbnz	r6, 80080b8 <memchr+0x78>
 8008094:	d1ee      	bne.n	8008074 <memchr+0x34>
 8008096:	bcf0      	pop	{r4, r5, r6, r7}
 8008098:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800809c:	f002 0207 	and.w	r2, r2, #7
 80080a0:	b132      	cbz	r2, 80080b0 <memchr+0x70>
 80080a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80080a6:	3a01      	subs	r2, #1
 80080a8:	ea83 0301 	eor.w	r3, r3, r1
 80080ac:	b113      	cbz	r3, 80080b4 <memchr+0x74>
 80080ae:	d1f8      	bne.n	80080a2 <memchr+0x62>
 80080b0:	2000      	movs	r0, #0
 80080b2:	4770      	bx	lr
 80080b4:	3801      	subs	r0, #1
 80080b6:	4770      	bx	lr
 80080b8:	2d00      	cmp	r5, #0
 80080ba:	bf06      	itte	eq
 80080bc:	4635      	moveq	r5, r6
 80080be:	3803      	subeq	r0, #3
 80080c0:	3807      	subne	r0, #7
 80080c2:	f015 0f01 	tst.w	r5, #1
 80080c6:	d107      	bne.n	80080d8 <memchr+0x98>
 80080c8:	3001      	adds	r0, #1
 80080ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80080ce:	bf02      	ittt	eq
 80080d0:	3001      	addeq	r0, #1
 80080d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80080d6:	3001      	addeq	r0, #1
 80080d8:	bcf0      	pop	{r4, r5, r6, r7}
 80080da:	3801      	subs	r0, #1
 80080dc:	4770      	bx	lr
 80080de:	bf00      	nop

080080e0 <__aeabi_drsub>:
 80080e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80080e4:	e002      	b.n	80080ec <__adddf3>
 80080e6:	bf00      	nop

080080e8 <__aeabi_dsub>:
 80080e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080080ec <__adddf3>:
 80080ec:	b530      	push	{r4, r5, lr}
 80080ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80080f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80080f6:	ea94 0f05 	teq	r4, r5
 80080fa:	bf08      	it	eq
 80080fc:	ea90 0f02 	teqeq	r0, r2
 8008100:	bf1f      	itttt	ne
 8008102:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008106:	ea55 0c02 	orrsne.w	ip, r5, r2
 800810a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800810e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008112:	f000 80e2 	beq.w	80082da <__adddf3+0x1ee>
 8008116:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800811a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800811e:	bfb8      	it	lt
 8008120:	426d      	neglt	r5, r5
 8008122:	dd0c      	ble.n	800813e <__adddf3+0x52>
 8008124:	442c      	add	r4, r5
 8008126:	ea80 0202 	eor.w	r2, r0, r2
 800812a:	ea81 0303 	eor.w	r3, r1, r3
 800812e:	ea82 0000 	eor.w	r0, r2, r0
 8008132:	ea83 0101 	eor.w	r1, r3, r1
 8008136:	ea80 0202 	eor.w	r2, r0, r2
 800813a:	ea81 0303 	eor.w	r3, r1, r3
 800813e:	2d36      	cmp	r5, #54	; 0x36
 8008140:	bf88      	it	hi
 8008142:	bd30      	pophi	{r4, r5, pc}
 8008144:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008148:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800814c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008150:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008154:	d002      	beq.n	800815c <__adddf3+0x70>
 8008156:	4240      	negs	r0, r0
 8008158:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800815c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008160:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008164:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008168:	d002      	beq.n	8008170 <__adddf3+0x84>
 800816a:	4252      	negs	r2, r2
 800816c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008170:	ea94 0f05 	teq	r4, r5
 8008174:	f000 80a7 	beq.w	80082c6 <__adddf3+0x1da>
 8008178:	f1a4 0401 	sub.w	r4, r4, #1
 800817c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008180:	db0d      	blt.n	800819e <__adddf3+0xb2>
 8008182:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008186:	fa22 f205 	lsr.w	r2, r2, r5
 800818a:	1880      	adds	r0, r0, r2
 800818c:	f141 0100 	adc.w	r1, r1, #0
 8008190:	fa03 f20e 	lsl.w	r2, r3, lr
 8008194:	1880      	adds	r0, r0, r2
 8008196:	fa43 f305 	asr.w	r3, r3, r5
 800819a:	4159      	adcs	r1, r3
 800819c:	e00e      	b.n	80081bc <__adddf3+0xd0>
 800819e:	f1a5 0520 	sub.w	r5, r5, #32
 80081a2:	f10e 0e20 	add.w	lr, lr, #32
 80081a6:	2a01      	cmp	r2, #1
 80081a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80081ac:	bf28      	it	cs
 80081ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80081b2:	fa43 f305 	asr.w	r3, r3, r5
 80081b6:	18c0      	adds	r0, r0, r3
 80081b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80081bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80081c0:	d507      	bpl.n	80081d2 <__adddf3+0xe6>
 80081c2:	f04f 0e00 	mov.w	lr, #0
 80081c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80081ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80081ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80081d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80081d6:	d31b      	bcc.n	8008210 <__adddf3+0x124>
 80081d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80081dc:	d30c      	bcc.n	80081f8 <__adddf3+0x10c>
 80081de:	0849      	lsrs	r1, r1, #1
 80081e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80081e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80081e8:	f104 0401 	add.w	r4, r4, #1
 80081ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80081f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80081f4:	f080 809a 	bcs.w	800832c <__adddf3+0x240>
 80081f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80081fc:	bf08      	it	eq
 80081fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008202:	f150 0000 	adcs.w	r0, r0, #0
 8008206:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800820a:	ea41 0105 	orr.w	r1, r1, r5
 800820e:	bd30      	pop	{r4, r5, pc}
 8008210:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008214:	4140      	adcs	r0, r0
 8008216:	eb41 0101 	adc.w	r1, r1, r1
 800821a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800821e:	f1a4 0401 	sub.w	r4, r4, #1
 8008222:	d1e9      	bne.n	80081f8 <__adddf3+0x10c>
 8008224:	f091 0f00 	teq	r1, #0
 8008228:	bf04      	itt	eq
 800822a:	4601      	moveq	r1, r0
 800822c:	2000      	moveq	r0, #0
 800822e:	fab1 f381 	clz	r3, r1
 8008232:	bf08      	it	eq
 8008234:	3320      	addeq	r3, #32
 8008236:	f1a3 030b 	sub.w	r3, r3, #11
 800823a:	f1b3 0220 	subs.w	r2, r3, #32
 800823e:	da0c      	bge.n	800825a <__adddf3+0x16e>
 8008240:	320c      	adds	r2, #12
 8008242:	dd08      	ble.n	8008256 <__adddf3+0x16a>
 8008244:	f102 0c14 	add.w	ip, r2, #20
 8008248:	f1c2 020c 	rsb	r2, r2, #12
 800824c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008250:	fa21 f102 	lsr.w	r1, r1, r2
 8008254:	e00c      	b.n	8008270 <__adddf3+0x184>
 8008256:	f102 0214 	add.w	r2, r2, #20
 800825a:	bfd8      	it	le
 800825c:	f1c2 0c20 	rsble	ip, r2, #32
 8008260:	fa01 f102 	lsl.w	r1, r1, r2
 8008264:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008268:	bfdc      	itt	le
 800826a:	ea41 010c 	orrle.w	r1, r1, ip
 800826e:	4090      	lslle	r0, r2
 8008270:	1ae4      	subs	r4, r4, r3
 8008272:	bfa2      	ittt	ge
 8008274:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008278:	4329      	orrge	r1, r5
 800827a:	bd30      	popge	{r4, r5, pc}
 800827c:	ea6f 0404 	mvn.w	r4, r4
 8008280:	3c1f      	subs	r4, #31
 8008282:	da1c      	bge.n	80082be <__adddf3+0x1d2>
 8008284:	340c      	adds	r4, #12
 8008286:	dc0e      	bgt.n	80082a6 <__adddf3+0x1ba>
 8008288:	f104 0414 	add.w	r4, r4, #20
 800828c:	f1c4 0220 	rsb	r2, r4, #32
 8008290:	fa20 f004 	lsr.w	r0, r0, r4
 8008294:	fa01 f302 	lsl.w	r3, r1, r2
 8008298:	ea40 0003 	orr.w	r0, r0, r3
 800829c:	fa21 f304 	lsr.w	r3, r1, r4
 80082a0:	ea45 0103 	orr.w	r1, r5, r3
 80082a4:	bd30      	pop	{r4, r5, pc}
 80082a6:	f1c4 040c 	rsb	r4, r4, #12
 80082aa:	f1c4 0220 	rsb	r2, r4, #32
 80082ae:	fa20 f002 	lsr.w	r0, r0, r2
 80082b2:	fa01 f304 	lsl.w	r3, r1, r4
 80082b6:	ea40 0003 	orr.w	r0, r0, r3
 80082ba:	4629      	mov	r1, r5
 80082bc:	bd30      	pop	{r4, r5, pc}
 80082be:	fa21 f004 	lsr.w	r0, r1, r4
 80082c2:	4629      	mov	r1, r5
 80082c4:	bd30      	pop	{r4, r5, pc}
 80082c6:	f094 0f00 	teq	r4, #0
 80082ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80082ce:	bf06      	itte	eq
 80082d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80082d4:	3401      	addeq	r4, #1
 80082d6:	3d01      	subne	r5, #1
 80082d8:	e74e      	b.n	8008178 <__adddf3+0x8c>
 80082da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80082de:	bf18      	it	ne
 80082e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80082e4:	d029      	beq.n	800833a <__adddf3+0x24e>
 80082e6:	ea94 0f05 	teq	r4, r5
 80082ea:	bf08      	it	eq
 80082ec:	ea90 0f02 	teqeq	r0, r2
 80082f0:	d005      	beq.n	80082fe <__adddf3+0x212>
 80082f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80082f6:	bf04      	itt	eq
 80082f8:	4619      	moveq	r1, r3
 80082fa:	4610      	moveq	r0, r2
 80082fc:	bd30      	pop	{r4, r5, pc}
 80082fe:	ea91 0f03 	teq	r1, r3
 8008302:	bf1e      	ittt	ne
 8008304:	2100      	movne	r1, #0
 8008306:	2000      	movne	r0, #0
 8008308:	bd30      	popne	{r4, r5, pc}
 800830a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800830e:	d105      	bne.n	800831c <__adddf3+0x230>
 8008310:	0040      	lsls	r0, r0, #1
 8008312:	4149      	adcs	r1, r1
 8008314:	bf28      	it	cs
 8008316:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800831a:	bd30      	pop	{r4, r5, pc}
 800831c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008320:	bf3c      	itt	cc
 8008322:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008326:	bd30      	popcc	{r4, r5, pc}
 8008328:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800832c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008330:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008334:	f04f 0000 	mov.w	r0, #0
 8008338:	bd30      	pop	{r4, r5, pc}
 800833a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800833e:	bf1a      	itte	ne
 8008340:	4619      	movne	r1, r3
 8008342:	4610      	movne	r0, r2
 8008344:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008348:	bf1c      	itt	ne
 800834a:	460b      	movne	r3, r1
 800834c:	4602      	movne	r2, r0
 800834e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008352:	bf06      	itte	eq
 8008354:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008358:	ea91 0f03 	teqeq	r1, r3
 800835c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008360:	bd30      	pop	{r4, r5, pc}
 8008362:	bf00      	nop

08008364 <__aeabi_ui2d>:
 8008364:	f090 0f00 	teq	r0, #0
 8008368:	bf04      	itt	eq
 800836a:	2100      	moveq	r1, #0
 800836c:	4770      	bxeq	lr
 800836e:	b530      	push	{r4, r5, lr}
 8008370:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008374:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008378:	f04f 0500 	mov.w	r5, #0
 800837c:	f04f 0100 	mov.w	r1, #0
 8008380:	e750      	b.n	8008224 <__adddf3+0x138>
 8008382:	bf00      	nop

08008384 <__aeabi_i2d>:
 8008384:	f090 0f00 	teq	r0, #0
 8008388:	bf04      	itt	eq
 800838a:	2100      	moveq	r1, #0
 800838c:	4770      	bxeq	lr
 800838e:	b530      	push	{r4, r5, lr}
 8008390:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008394:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008398:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800839c:	bf48      	it	mi
 800839e:	4240      	negmi	r0, r0
 80083a0:	f04f 0100 	mov.w	r1, #0
 80083a4:	e73e      	b.n	8008224 <__adddf3+0x138>
 80083a6:	bf00      	nop

080083a8 <__aeabi_f2d>:
 80083a8:	0042      	lsls	r2, r0, #1
 80083aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80083ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80083b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80083b6:	bf1f      	itttt	ne
 80083b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80083bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80083c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80083c4:	4770      	bxne	lr
 80083c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80083ca:	bf08      	it	eq
 80083cc:	4770      	bxeq	lr
 80083ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80083d2:	bf04      	itt	eq
 80083d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80083d8:	4770      	bxeq	lr
 80083da:	b530      	push	{r4, r5, lr}
 80083dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80083e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80083e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80083e8:	e71c      	b.n	8008224 <__adddf3+0x138>
 80083ea:	bf00      	nop

080083ec <__aeabi_ul2d>:
 80083ec:	ea50 0201 	orrs.w	r2, r0, r1
 80083f0:	bf08      	it	eq
 80083f2:	4770      	bxeq	lr
 80083f4:	b530      	push	{r4, r5, lr}
 80083f6:	f04f 0500 	mov.w	r5, #0
 80083fa:	e00a      	b.n	8008412 <__aeabi_l2d+0x16>

080083fc <__aeabi_l2d>:
 80083fc:	ea50 0201 	orrs.w	r2, r0, r1
 8008400:	bf08      	it	eq
 8008402:	4770      	bxeq	lr
 8008404:	b530      	push	{r4, r5, lr}
 8008406:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800840a:	d502      	bpl.n	8008412 <__aeabi_l2d+0x16>
 800840c:	4240      	negs	r0, r0
 800840e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008412:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008416:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800841a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800841e:	f43f aed8 	beq.w	80081d2 <__adddf3+0xe6>
 8008422:	f04f 0203 	mov.w	r2, #3
 8008426:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800842a:	bf18      	it	ne
 800842c:	3203      	addne	r2, #3
 800842e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008432:	bf18      	it	ne
 8008434:	3203      	addne	r2, #3
 8008436:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800843a:	f1c2 0320 	rsb	r3, r2, #32
 800843e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008442:	fa20 f002 	lsr.w	r0, r0, r2
 8008446:	fa01 fe03 	lsl.w	lr, r1, r3
 800844a:	ea40 000e 	orr.w	r0, r0, lr
 800844e:	fa21 f102 	lsr.w	r1, r1, r2
 8008452:	4414      	add	r4, r2
 8008454:	e6bd      	b.n	80081d2 <__adddf3+0xe6>
 8008456:	bf00      	nop

08008458 <__aeabi_dmul>:
 8008458:	b570      	push	{r4, r5, r6, lr}
 800845a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800845e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008462:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008466:	bf1d      	ittte	ne
 8008468:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800846c:	ea94 0f0c 	teqne	r4, ip
 8008470:	ea95 0f0c 	teqne	r5, ip
 8008474:	f000 f8de 	bleq	8008634 <__aeabi_dmul+0x1dc>
 8008478:	442c      	add	r4, r5
 800847a:	ea81 0603 	eor.w	r6, r1, r3
 800847e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008482:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008486:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800848a:	bf18      	it	ne
 800848c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8008490:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008494:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008498:	d038      	beq.n	800850c <__aeabi_dmul+0xb4>
 800849a:	fba0 ce02 	umull	ip, lr, r0, r2
 800849e:	f04f 0500 	mov.w	r5, #0
 80084a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80084a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80084aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80084ae:	f04f 0600 	mov.w	r6, #0
 80084b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80084b6:	f09c 0f00 	teq	ip, #0
 80084ba:	bf18      	it	ne
 80084bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80084c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80084c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80084c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80084cc:	d204      	bcs.n	80084d8 <__aeabi_dmul+0x80>
 80084ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80084d2:	416d      	adcs	r5, r5
 80084d4:	eb46 0606 	adc.w	r6, r6, r6
 80084d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80084dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80084e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80084e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80084e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80084ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80084f0:	bf88      	it	hi
 80084f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80084f6:	d81e      	bhi.n	8008536 <__aeabi_dmul+0xde>
 80084f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80084fc:	bf08      	it	eq
 80084fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008502:	f150 0000 	adcs.w	r0, r0, #0
 8008506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800850a:	bd70      	pop	{r4, r5, r6, pc}
 800850c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008510:	ea46 0101 	orr.w	r1, r6, r1
 8008514:	ea40 0002 	orr.w	r0, r0, r2
 8008518:	ea81 0103 	eor.w	r1, r1, r3
 800851c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008520:	bfc2      	ittt	gt
 8008522:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008526:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800852a:	bd70      	popgt	{r4, r5, r6, pc}
 800852c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008530:	f04f 0e00 	mov.w	lr, #0
 8008534:	3c01      	subs	r4, #1
 8008536:	f300 80ab 	bgt.w	8008690 <__aeabi_dmul+0x238>
 800853a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800853e:	bfde      	ittt	le
 8008540:	2000      	movle	r0, #0
 8008542:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008546:	bd70      	pople	{r4, r5, r6, pc}
 8008548:	f1c4 0400 	rsb	r4, r4, #0
 800854c:	3c20      	subs	r4, #32
 800854e:	da35      	bge.n	80085bc <__aeabi_dmul+0x164>
 8008550:	340c      	adds	r4, #12
 8008552:	dc1b      	bgt.n	800858c <__aeabi_dmul+0x134>
 8008554:	f104 0414 	add.w	r4, r4, #20
 8008558:	f1c4 0520 	rsb	r5, r4, #32
 800855c:	fa00 f305 	lsl.w	r3, r0, r5
 8008560:	fa20 f004 	lsr.w	r0, r0, r4
 8008564:	fa01 f205 	lsl.w	r2, r1, r5
 8008568:	ea40 0002 	orr.w	r0, r0, r2
 800856c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008570:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008574:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008578:	fa21 f604 	lsr.w	r6, r1, r4
 800857c:	eb42 0106 	adc.w	r1, r2, r6
 8008580:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008584:	bf08      	it	eq
 8008586:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800858a:	bd70      	pop	{r4, r5, r6, pc}
 800858c:	f1c4 040c 	rsb	r4, r4, #12
 8008590:	f1c4 0520 	rsb	r5, r4, #32
 8008594:	fa00 f304 	lsl.w	r3, r0, r4
 8008598:	fa20 f005 	lsr.w	r0, r0, r5
 800859c:	fa01 f204 	lsl.w	r2, r1, r4
 80085a0:	ea40 0002 	orr.w	r0, r0, r2
 80085a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80085ac:	f141 0100 	adc.w	r1, r1, #0
 80085b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085b4:	bf08      	it	eq
 80085b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085ba:	bd70      	pop	{r4, r5, r6, pc}
 80085bc:	f1c4 0520 	rsb	r5, r4, #32
 80085c0:	fa00 f205 	lsl.w	r2, r0, r5
 80085c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80085c8:	fa20 f304 	lsr.w	r3, r0, r4
 80085cc:	fa01 f205 	lsl.w	r2, r1, r5
 80085d0:	ea43 0302 	orr.w	r3, r3, r2
 80085d4:	fa21 f004 	lsr.w	r0, r1, r4
 80085d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085dc:	fa21 f204 	lsr.w	r2, r1, r4
 80085e0:	ea20 0002 	bic.w	r0, r0, r2
 80085e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80085e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085ec:	bf08      	it	eq
 80085ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085f2:	bd70      	pop	{r4, r5, r6, pc}
 80085f4:	f094 0f00 	teq	r4, #0
 80085f8:	d10f      	bne.n	800861a <__aeabi_dmul+0x1c2>
 80085fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80085fe:	0040      	lsls	r0, r0, #1
 8008600:	eb41 0101 	adc.w	r1, r1, r1
 8008604:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008608:	bf08      	it	eq
 800860a:	3c01      	subeq	r4, #1
 800860c:	d0f7      	beq.n	80085fe <__aeabi_dmul+0x1a6>
 800860e:	ea41 0106 	orr.w	r1, r1, r6
 8008612:	f095 0f00 	teq	r5, #0
 8008616:	bf18      	it	ne
 8008618:	4770      	bxne	lr
 800861a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800861e:	0052      	lsls	r2, r2, #1
 8008620:	eb43 0303 	adc.w	r3, r3, r3
 8008624:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008628:	bf08      	it	eq
 800862a:	3d01      	subeq	r5, #1
 800862c:	d0f7      	beq.n	800861e <__aeabi_dmul+0x1c6>
 800862e:	ea43 0306 	orr.w	r3, r3, r6
 8008632:	4770      	bx	lr
 8008634:	ea94 0f0c 	teq	r4, ip
 8008638:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800863c:	bf18      	it	ne
 800863e:	ea95 0f0c 	teqne	r5, ip
 8008642:	d00c      	beq.n	800865e <__aeabi_dmul+0x206>
 8008644:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008648:	bf18      	it	ne
 800864a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800864e:	d1d1      	bne.n	80085f4 <__aeabi_dmul+0x19c>
 8008650:	ea81 0103 	eor.w	r1, r1, r3
 8008654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008658:	f04f 0000 	mov.w	r0, #0
 800865c:	bd70      	pop	{r4, r5, r6, pc}
 800865e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008662:	bf06      	itte	eq
 8008664:	4610      	moveq	r0, r2
 8008666:	4619      	moveq	r1, r3
 8008668:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800866c:	d019      	beq.n	80086a2 <__aeabi_dmul+0x24a>
 800866e:	ea94 0f0c 	teq	r4, ip
 8008672:	d102      	bne.n	800867a <__aeabi_dmul+0x222>
 8008674:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008678:	d113      	bne.n	80086a2 <__aeabi_dmul+0x24a>
 800867a:	ea95 0f0c 	teq	r5, ip
 800867e:	d105      	bne.n	800868c <__aeabi_dmul+0x234>
 8008680:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008684:	bf1c      	itt	ne
 8008686:	4610      	movne	r0, r2
 8008688:	4619      	movne	r1, r3
 800868a:	d10a      	bne.n	80086a2 <__aeabi_dmul+0x24a>
 800868c:	ea81 0103 	eor.w	r1, r1, r3
 8008690:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008694:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008698:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800869c:	f04f 0000 	mov.w	r0, #0
 80086a0:	bd70      	pop	{r4, r5, r6, pc}
 80086a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80086aa:	bd70      	pop	{r4, r5, r6, pc}

080086ac <__aeabi_ddiv>:
 80086ac:	b570      	push	{r4, r5, r6, lr}
 80086ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80086b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80086b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80086ba:	bf1d      	ittte	ne
 80086bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80086c0:	ea94 0f0c 	teqne	r4, ip
 80086c4:	ea95 0f0c 	teqne	r5, ip
 80086c8:	f000 f8a7 	bleq	800881a <__aeabi_ddiv+0x16e>
 80086cc:	eba4 0405 	sub.w	r4, r4, r5
 80086d0:	ea81 0e03 	eor.w	lr, r1, r3
 80086d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80086d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80086dc:	f000 8088 	beq.w	80087f0 <__aeabi_ddiv+0x144>
 80086e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80086e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80086e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80086ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80086f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80086f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80086f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80086fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008700:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008704:	429d      	cmp	r5, r3
 8008706:	bf08      	it	eq
 8008708:	4296      	cmpeq	r6, r2
 800870a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800870e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008712:	d202      	bcs.n	800871a <__aeabi_ddiv+0x6e>
 8008714:	085b      	lsrs	r3, r3, #1
 8008716:	ea4f 0232 	mov.w	r2, r2, rrx
 800871a:	1ab6      	subs	r6, r6, r2
 800871c:	eb65 0503 	sbc.w	r5, r5, r3
 8008720:	085b      	lsrs	r3, r3, #1
 8008722:	ea4f 0232 	mov.w	r2, r2, rrx
 8008726:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800872a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800872e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008732:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008736:	bf22      	ittt	cs
 8008738:	1ab6      	subcs	r6, r6, r2
 800873a:	4675      	movcs	r5, lr
 800873c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008740:	085b      	lsrs	r3, r3, #1
 8008742:	ea4f 0232 	mov.w	r2, r2, rrx
 8008746:	ebb6 0e02 	subs.w	lr, r6, r2
 800874a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800874e:	bf22      	ittt	cs
 8008750:	1ab6      	subcs	r6, r6, r2
 8008752:	4675      	movcs	r5, lr
 8008754:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008758:	085b      	lsrs	r3, r3, #1
 800875a:	ea4f 0232 	mov.w	r2, r2, rrx
 800875e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008762:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008766:	bf22      	ittt	cs
 8008768:	1ab6      	subcs	r6, r6, r2
 800876a:	4675      	movcs	r5, lr
 800876c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008770:	085b      	lsrs	r3, r3, #1
 8008772:	ea4f 0232 	mov.w	r2, r2, rrx
 8008776:	ebb6 0e02 	subs.w	lr, r6, r2
 800877a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800877e:	bf22      	ittt	cs
 8008780:	1ab6      	subcs	r6, r6, r2
 8008782:	4675      	movcs	r5, lr
 8008784:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008788:	ea55 0e06 	orrs.w	lr, r5, r6
 800878c:	d018      	beq.n	80087c0 <__aeabi_ddiv+0x114>
 800878e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8008792:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8008796:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800879a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800879e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80087a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80087a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80087aa:	d1c0      	bne.n	800872e <__aeabi_ddiv+0x82>
 80087ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087b0:	d10b      	bne.n	80087ca <__aeabi_ddiv+0x11e>
 80087b2:	ea41 0100 	orr.w	r1, r1, r0
 80087b6:	f04f 0000 	mov.w	r0, #0
 80087ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80087be:	e7b6      	b.n	800872e <__aeabi_ddiv+0x82>
 80087c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087c4:	bf04      	itt	eq
 80087c6:	4301      	orreq	r1, r0
 80087c8:	2000      	moveq	r0, #0
 80087ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80087ce:	bf88      	it	hi
 80087d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80087d4:	f63f aeaf 	bhi.w	8008536 <__aeabi_dmul+0xde>
 80087d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80087dc:	bf04      	itt	eq
 80087de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80087e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80087e6:	f150 0000 	adcs.w	r0, r0, #0
 80087ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80087ee:	bd70      	pop	{r4, r5, r6, pc}
 80087f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80087f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80087f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80087fc:	bfc2      	ittt	gt
 80087fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008802:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008806:	bd70      	popgt	{r4, r5, r6, pc}
 8008808:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800880c:	f04f 0e00 	mov.w	lr, #0
 8008810:	3c01      	subs	r4, #1
 8008812:	e690      	b.n	8008536 <__aeabi_dmul+0xde>
 8008814:	ea45 0e06 	orr.w	lr, r5, r6
 8008818:	e68d      	b.n	8008536 <__aeabi_dmul+0xde>
 800881a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800881e:	ea94 0f0c 	teq	r4, ip
 8008822:	bf08      	it	eq
 8008824:	ea95 0f0c 	teqeq	r5, ip
 8008828:	f43f af3b 	beq.w	80086a2 <__aeabi_dmul+0x24a>
 800882c:	ea94 0f0c 	teq	r4, ip
 8008830:	d10a      	bne.n	8008848 <__aeabi_ddiv+0x19c>
 8008832:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008836:	f47f af34 	bne.w	80086a2 <__aeabi_dmul+0x24a>
 800883a:	ea95 0f0c 	teq	r5, ip
 800883e:	f47f af25 	bne.w	800868c <__aeabi_dmul+0x234>
 8008842:	4610      	mov	r0, r2
 8008844:	4619      	mov	r1, r3
 8008846:	e72c      	b.n	80086a2 <__aeabi_dmul+0x24a>
 8008848:	ea95 0f0c 	teq	r5, ip
 800884c:	d106      	bne.n	800885c <__aeabi_ddiv+0x1b0>
 800884e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008852:	f43f aefd 	beq.w	8008650 <__aeabi_dmul+0x1f8>
 8008856:	4610      	mov	r0, r2
 8008858:	4619      	mov	r1, r3
 800885a:	e722      	b.n	80086a2 <__aeabi_dmul+0x24a>
 800885c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008860:	bf18      	it	ne
 8008862:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008866:	f47f aec5 	bne.w	80085f4 <__aeabi_dmul+0x19c>
 800886a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800886e:	f47f af0d 	bne.w	800868c <__aeabi_dmul+0x234>
 8008872:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008876:	f47f aeeb 	bne.w	8008650 <__aeabi_dmul+0x1f8>
 800887a:	e712      	b.n	80086a2 <__aeabi_dmul+0x24a>

0800887c <__gedf2>:
 800887c:	f04f 3cff 	mov.w	ip, #4294967295
 8008880:	e006      	b.n	8008890 <__cmpdf2+0x4>
 8008882:	bf00      	nop

08008884 <__ledf2>:
 8008884:	f04f 0c01 	mov.w	ip, #1
 8008888:	e002      	b.n	8008890 <__cmpdf2+0x4>
 800888a:	bf00      	nop

0800888c <__cmpdf2>:
 800888c:	f04f 0c01 	mov.w	ip, #1
 8008890:	f84d cd04 	str.w	ip, [sp, #-4]!
 8008894:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008898:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800889c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80088a0:	bf18      	it	ne
 80088a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80088a6:	d01b      	beq.n	80088e0 <__cmpdf2+0x54>
 80088a8:	b001      	add	sp, #4
 80088aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80088ae:	bf0c      	ite	eq
 80088b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80088b4:	ea91 0f03 	teqne	r1, r3
 80088b8:	bf02      	ittt	eq
 80088ba:	ea90 0f02 	teqeq	r0, r2
 80088be:	2000      	moveq	r0, #0
 80088c0:	4770      	bxeq	lr
 80088c2:	f110 0f00 	cmn.w	r0, #0
 80088c6:	ea91 0f03 	teq	r1, r3
 80088ca:	bf58      	it	pl
 80088cc:	4299      	cmppl	r1, r3
 80088ce:	bf08      	it	eq
 80088d0:	4290      	cmpeq	r0, r2
 80088d2:	bf2c      	ite	cs
 80088d4:	17d8      	asrcs	r0, r3, #31
 80088d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80088da:	f040 0001 	orr.w	r0, r0, #1
 80088de:	4770      	bx	lr
 80088e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088e8:	d102      	bne.n	80088f0 <__cmpdf2+0x64>
 80088ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80088ee:	d107      	bne.n	8008900 <__cmpdf2+0x74>
 80088f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80088f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088f8:	d1d6      	bne.n	80088a8 <__cmpdf2+0x1c>
 80088fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80088fe:	d0d3      	beq.n	80088a8 <__cmpdf2+0x1c>
 8008900:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008904:	4770      	bx	lr
 8008906:	bf00      	nop

08008908 <__aeabi_cdrcmple>:
 8008908:	4684      	mov	ip, r0
 800890a:	4610      	mov	r0, r2
 800890c:	4662      	mov	r2, ip
 800890e:	468c      	mov	ip, r1
 8008910:	4619      	mov	r1, r3
 8008912:	4663      	mov	r3, ip
 8008914:	e000      	b.n	8008918 <__aeabi_cdcmpeq>
 8008916:	bf00      	nop

08008918 <__aeabi_cdcmpeq>:
 8008918:	b501      	push	{r0, lr}
 800891a:	f7ff ffb7 	bl	800888c <__cmpdf2>
 800891e:	2800      	cmp	r0, #0
 8008920:	bf48      	it	mi
 8008922:	f110 0f00 	cmnmi.w	r0, #0
 8008926:	bd01      	pop	{r0, pc}

08008928 <__aeabi_dcmpeq>:
 8008928:	f84d ed08 	str.w	lr, [sp, #-8]!
 800892c:	f7ff fff4 	bl	8008918 <__aeabi_cdcmpeq>
 8008930:	bf0c      	ite	eq
 8008932:	2001      	moveq	r0, #1
 8008934:	2000      	movne	r0, #0
 8008936:	f85d fb08 	ldr.w	pc, [sp], #8
 800893a:	bf00      	nop

0800893c <__aeabi_dcmplt>:
 800893c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008940:	f7ff ffea 	bl	8008918 <__aeabi_cdcmpeq>
 8008944:	bf34      	ite	cc
 8008946:	2001      	movcc	r0, #1
 8008948:	2000      	movcs	r0, #0
 800894a:	f85d fb08 	ldr.w	pc, [sp], #8
 800894e:	bf00      	nop

08008950 <__aeabi_dcmple>:
 8008950:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008954:	f7ff ffe0 	bl	8008918 <__aeabi_cdcmpeq>
 8008958:	bf94      	ite	ls
 800895a:	2001      	movls	r0, #1
 800895c:	2000      	movhi	r0, #0
 800895e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008962:	bf00      	nop

08008964 <__aeabi_dcmpge>:
 8008964:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008968:	f7ff ffce 	bl	8008908 <__aeabi_cdrcmple>
 800896c:	bf94      	ite	ls
 800896e:	2001      	movls	r0, #1
 8008970:	2000      	movhi	r0, #0
 8008972:	f85d fb08 	ldr.w	pc, [sp], #8
 8008976:	bf00      	nop

08008978 <__aeabi_dcmpgt>:
 8008978:	f84d ed08 	str.w	lr, [sp, #-8]!
 800897c:	f7ff ffc4 	bl	8008908 <__aeabi_cdrcmple>
 8008980:	bf34      	ite	cc
 8008982:	2001      	movcc	r0, #1
 8008984:	2000      	movcs	r0, #0
 8008986:	f85d fb08 	ldr.w	pc, [sp], #8
 800898a:	bf00      	nop

0800898c <__aeabi_dcmpun>:
 800898c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008994:	d102      	bne.n	800899c <__aeabi_dcmpun+0x10>
 8008996:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800899a:	d10a      	bne.n	80089b2 <__aeabi_dcmpun+0x26>
 800899c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80089a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089a4:	d102      	bne.n	80089ac <__aeabi_dcmpun+0x20>
 80089a6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80089aa:	d102      	bne.n	80089b2 <__aeabi_dcmpun+0x26>
 80089ac:	f04f 0000 	mov.w	r0, #0
 80089b0:	4770      	bx	lr
 80089b2:	f04f 0001 	mov.w	r0, #1
 80089b6:	4770      	bx	lr

080089b8 <__aeabi_d2iz>:
 80089b8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80089bc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80089c0:	d215      	bcs.n	80089ee <__aeabi_d2iz+0x36>
 80089c2:	d511      	bpl.n	80089e8 <__aeabi_d2iz+0x30>
 80089c4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80089c8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80089cc:	d912      	bls.n	80089f4 <__aeabi_d2iz+0x3c>
 80089ce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80089d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089d6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80089da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80089de:	fa23 f002 	lsr.w	r0, r3, r2
 80089e2:	bf18      	it	ne
 80089e4:	4240      	negne	r0, r0
 80089e6:	4770      	bx	lr
 80089e8:	f04f 0000 	mov.w	r0, #0
 80089ec:	4770      	bx	lr
 80089ee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80089f2:	d105      	bne.n	8008a00 <__aeabi_d2iz+0x48>
 80089f4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80089f8:	bf08      	it	eq
 80089fa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80089fe:	4770      	bx	lr
 8008a00:	f04f 0000 	mov.w	r0, #0
 8008a04:	4770      	bx	lr
 8008a06:	bf00      	nop

08008a08 <__aeabi_d2f>:
 8008a08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008a0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8008a10:	bf24      	itt	cs
 8008a12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8008a16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8008a1a:	d90d      	bls.n	8008a38 <__aeabi_d2f+0x30>
 8008a1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008a20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008a24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008a28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8008a2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008a30:	bf08      	it	eq
 8008a32:	f020 0001 	biceq.w	r0, r0, #1
 8008a36:	4770      	bx	lr
 8008a38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8008a3c:	d121      	bne.n	8008a82 <__aeabi_d2f+0x7a>
 8008a3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8008a42:	bfbc      	itt	lt
 8008a44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8008a48:	4770      	bxlt	lr
 8008a4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008a4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008a52:	f1c2 0218 	rsb	r2, r2, #24
 8008a56:	f1c2 0c20 	rsb	ip, r2, #32
 8008a5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8008a5e:	fa20 f002 	lsr.w	r0, r0, r2
 8008a62:	bf18      	it	ne
 8008a64:	f040 0001 	orrne.w	r0, r0, #1
 8008a68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008a6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008a70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008a74:	ea40 000c 	orr.w	r0, r0, ip
 8008a78:	fa23 f302 	lsr.w	r3, r3, r2
 8008a7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008a80:	e7cc      	b.n	8008a1c <__aeabi_d2f+0x14>
 8008a82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008a86:	d107      	bne.n	8008a98 <__aeabi_d2f+0x90>
 8008a88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008a8c:	bf1e      	ittt	ne
 8008a8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8008a92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8008a96:	4770      	bxne	lr
 8008a98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8008a9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008aa0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008aa4:	4770      	bx	lr
 8008aa6:	bf00      	nop

08008aa8 <__aeabi_uldivmod>:
 8008aa8:	b953      	cbnz	r3, 8008ac0 <__aeabi_uldivmod+0x18>
 8008aaa:	b94a      	cbnz	r2, 8008ac0 <__aeabi_uldivmod+0x18>
 8008aac:	2900      	cmp	r1, #0
 8008aae:	bf08      	it	eq
 8008ab0:	2800      	cmpeq	r0, #0
 8008ab2:	bf1c      	itt	ne
 8008ab4:	f04f 31ff 	movne.w	r1, #4294967295
 8008ab8:	f04f 30ff 	movne.w	r0, #4294967295
 8008abc:	f000 b972 	b.w	8008da4 <__aeabi_idiv0>
 8008ac0:	f1ad 0c08 	sub.w	ip, sp, #8
 8008ac4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008ac8:	f000 f806 	bl	8008ad8 <__udivmoddi4>
 8008acc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008ad0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ad4:	b004      	add	sp, #16
 8008ad6:	4770      	bx	lr

08008ad8 <__udivmoddi4>:
 8008ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008adc:	9e08      	ldr	r6, [sp, #32]
 8008ade:	4604      	mov	r4, r0
 8008ae0:	4688      	mov	r8, r1
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d14b      	bne.n	8008b7e <__udivmoddi4+0xa6>
 8008ae6:	428a      	cmp	r2, r1
 8008ae8:	4615      	mov	r5, r2
 8008aea:	d967      	bls.n	8008bbc <__udivmoddi4+0xe4>
 8008aec:	fab2 f282 	clz	r2, r2
 8008af0:	b14a      	cbz	r2, 8008b06 <__udivmoddi4+0x2e>
 8008af2:	f1c2 0720 	rsb	r7, r2, #32
 8008af6:	fa01 f302 	lsl.w	r3, r1, r2
 8008afa:	fa20 f707 	lsr.w	r7, r0, r7
 8008afe:	4095      	lsls	r5, r2
 8008b00:	ea47 0803 	orr.w	r8, r7, r3
 8008b04:	4094      	lsls	r4, r2
 8008b06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008b0a:	0c23      	lsrs	r3, r4, #16
 8008b0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8008b10:	fa1f fc85 	uxth.w	ip, r5
 8008b14:	fb0e 8817 	mls	r8, lr, r7, r8
 8008b18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008b1c:	fb07 f10c 	mul.w	r1, r7, ip
 8008b20:	4299      	cmp	r1, r3
 8008b22:	d909      	bls.n	8008b38 <__udivmoddi4+0x60>
 8008b24:	18eb      	adds	r3, r5, r3
 8008b26:	f107 30ff 	add.w	r0, r7, #4294967295
 8008b2a:	f080 811b 	bcs.w	8008d64 <__udivmoddi4+0x28c>
 8008b2e:	4299      	cmp	r1, r3
 8008b30:	f240 8118 	bls.w	8008d64 <__udivmoddi4+0x28c>
 8008b34:	3f02      	subs	r7, #2
 8008b36:	442b      	add	r3, r5
 8008b38:	1a5b      	subs	r3, r3, r1
 8008b3a:	b2a4      	uxth	r4, r4
 8008b3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8008b40:	fb0e 3310 	mls	r3, lr, r0, r3
 8008b44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008b48:	fb00 fc0c 	mul.w	ip, r0, ip
 8008b4c:	45a4      	cmp	ip, r4
 8008b4e:	d909      	bls.n	8008b64 <__udivmoddi4+0x8c>
 8008b50:	192c      	adds	r4, r5, r4
 8008b52:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b56:	f080 8107 	bcs.w	8008d68 <__udivmoddi4+0x290>
 8008b5a:	45a4      	cmp	ip, r4
 8008b5c:	f240 8104 	bls.w	8008d68 <__udivmoddi4+0x290>
 8008b60:	3802      	subs	r0, #2
 8008b62:	442c      	add	r4, r5
 8008b64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008b68:	eba4 040c 	sub.w	r4, r4, ip
 8008b6c:	2700      	movs	r7, #0
 8008b6e:	b11e      	cbz	r6, 8008b78 <__udivmoddi4+0xa0>
 8008b70:	40d4      	lsrs	r4, r2
 8008b72:	2300      	movs	r3, #0
 8008b74:	e9c6 4300 	strd	r4, r3, [r6]
 8008b78:	4639      	mov	r1, r7
 8008b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b7e:	428b      	cmp	r3, r1
 8008b80:	d909      	bls.n	8008b96 <__udivmoddi4+0xbe>
 8008b82:	2e00      	cmp	r6, #0
 8008b84:	f000 80eb 	beq.w	8008d5e <__udivmoddi4+0x286>
 8008b88:	2700      	movs	r7, #0
 8008b8a:	e9c6 0100 	strd	r0, r1, [r6]
 8008b8e:	4638      	mov	r0, r7
 8008b90:	4639      	mov	r1, r7
 8008b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b96:	fab3 f783 	clz	r7, r3
 8008b9a:	2f00      	cmp	r7, #0
 8008b9c:	d147      	bne.n	8008c2e <__udivmoddi4+0x156>
 8008b9e:	428b      	cmp	r3, r1
 8008ba0:	d302      	bcc.n	8008ba8 <__udivmoddi4+0xd0>
 8008ba2:	4282      	cmp	r2, r0
 8008ba4:	f200 80fa 	bhi.w	8008d9c <__udivmoddi4+0x2c4>
 8008ba8:	1a84      	subs	r4, r0, r2
 8008baa:	eb61 0303 	sbc.w	r3, r1, r3
 8008bae:	2001      	movs	r0, #1
 8008bb0:	4698      	mov	r8, r3
 8008bb2:	2e00      	cmp	r6, #0
 8008bb4:	d0e0      	beq.n	8008b78 <__udivmoddi4+0xa0>
 8008bb6:	e9c6 4800 	strd	r4, r8, [r6]
 8008bba:	e7dd      	b.n	8008b78 <__udivmoddi4+0xa0>
 8008bbc:	b902      	cbnz	r2, 8008bc0 <__udivmoddi4+0xe8>
 8008bbe:	deff      	udf	#255	; 0xff
 8008bc0:	fab2 f282 	clz	r2, r2
 8008bc4:	2a00      	cmp	r2, #0
 8008bc6:	f040 808f 	bne.w	8008ce8 <__udivmoddi4+0x210>
 8008bca:	1b49      	subs	r1, r1, r5
 8008bcc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008bd0:	fa1f f885 	uxth.w	r8, r5
 8008bd4:	2701      	movs	r7, #1
 8008bd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8008bda:	0c23      	lsrs	r3, r4, #16
 8008bdc:	fb0e 111c 	mls	r1, lr, ip, r1
 8008be0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008be4:	fb08 f10c 	mul.w	r1, r8, ip
 8008be8:	4299      	cmp	r1, r3
 8008bea:	d907      	bls.n	8008bfc <__udivmoddi4+0x124>
 8008bec:	18eb      	adds	r3, r5, r3
 8008bee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8008bf2:	d202      	bcs.n	8008bfa <__udivmoddi4+0x122>
 8008bf4:	4299      	cmp	r1, r3
 8008bf6:	f200 80cd 	bhi.w	8008d94 <__udivmoddi4+0x2bc>
 8008bfa:	4684      	mov	ip, r0
 8008bfc:	1a59      	subs	r1, r3, r1
 8008bfe:	b2a3      	uxth	r3, r4
 8008c00:	fbb1 f0fe 	udiv	r0, r1, lr
 8008c04:	fb0e 1410 	mls	r4, lr, r0, r1
 8008c08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008c0c:	fb08 f800 	mul.w	r8, r8, r0
 8008c10:	45a0      	cmp	r8, r4
 8008c12:	d907      	bls.n	8008c24 <__udivmoddi4+0x14c>
 8008c14:	192c      	adds	r4, r5, r4
 8008c16:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c1a:	d202      	bcs.n	8008c22 <__udivmoddi4+0x14a>
 8008c1c:	45a0      	cmp	r8, r4
 8008c1e:	f200 80b6 	bhi.w	8008d8e <__udivmoddi4+0x2b6>
 8008c22:	4618      	mov	r0, r3
 8008c24:	eba4 0408 	sub.w	r4, r4, r8
 8008c28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008c2c:	e79f      	b.n	8008b6e <__udivmoddi4+0x96>
 8008c2e:	f1c7 0c20 	rsb	ip, r7, #32
 8008c32:	40bb      	lsls	r3, r7
 8008c34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8008c38:	ea4e 0e03 	orr.w	lr, lr, r3
 8008c3c:	fa01 f407 	lsl.w	r4, r1, r7
 8008c40:	fa20 f50c 	lsr.w	r5, r0, ip
 8008c44:	fa21 f30c 	lsr.w	r3, r1, ip
 8008c48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8008c4c:	4325      	orrs	r5, r4
 8008c4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8008c52:	0c2c      	lsrs	r4, r5, #16
 8008c54:	fb08 3319 	mls	r3, r8, r9, r3
 8008c58:	fa1f fa8e 	uxth.w	sl, lr
 8008c5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8008c60:	fb09 f40a 	mul.w	r4, r9, sl
 8008c64:	429c      	cmp	r4, r3
 8008c66:	fa02 f207 	lsl.w	r2, r2, r7
 8008c6a:	fa00 f107 	lsl.w	r1, r0, r7
 8008c6e:	d90b      	bls.n	8008c88 <__udivmoddi4+0x1b0>
 8008c70:	eb1e 0303 	adds.w	r3, lr, r3
 8008c74:	f109 30ff 	add.w	r0, r9, #4294967295
 8008c78:	f080 8087 	bcs.w	8008d8a <__udivmoddi4+0x2b2>
 8008c7c:	429c      	cmp	r4, r3
 8008c7e:	f240 8084 	bls.w	8008d8a <__udivmoddi4+0x2b2>
 8008c82:	f1a9 0902 	sub.w	r9, r9, #2
 8008c86:	4473      	add	r3, lr
 8008c88:	1b1b      	subs	r3, r3, r4
 8008c8a:	b2ad      	uxth	r5, r5
 8008c8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8008c90:	fb08 3310 	mls	r3, r8, r0, r3
 8008c94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8008c98:	fb00 fa0a 	mul.w	sl, r0, sl
 8008c9c:	45a2      	cmp	sl, r4
 8008c9e:	d908      	bls.n	8008cb2 <__udivmoddi4+0x1da>
 8008ca0:	eb1e 0404 	adds.w	r4, lr, r4
 8008ca4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ca8:	d26b      	bcs.n	8008d82 <__udivmoddi4+0x2aa>
 8008caa:	45a2      	cmp	sl, r4
 8008cac:	d969      	bls.n	8008d82 <__udivmoddi4+0x2aa>
 8008cae:	3802      	subs	r0, #2
 8008cb0:	4474      	add	r4, lr
 8008cb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8008cb6:	fba0 8902 	umull	r8, r9, r0, r2
 8008cba:	eba4 040a 	sub.w	r4, r4, sl
 8008cbe:	454c      	cmp	r4, r9
 8008cc0:	46c2      	mov	sl, r8
 8008cc2:	464b      	mov	r3, r9
 8008cc4:	d354      	bcc.n	8008d70 <__udivmoddi4+0x298>
 8008cc6:	d051      	beq.n	8008d6c <__udivmoddi4+0x294>
 8008cc8:	2e00      	cmp	r6, #0
 8008cca:	d069      	beq.n	8008da0 <__udivmoddi4+0x2c8>
 8008ccc:	ebb1 050a 	subs.w	r5, r1, sl
 8008cd0:	eb64 0403 	sbc.w	r4, r4, r3
 8008cd4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008cd8:	40fd      	lsrs	r5, r7
 8008cda:	40fc      	lsrs	r4, r7
 8008cdc:	ea4c 0505 	orr.w	r5, ip, r5
 8008ce0:	e9c6 5400 	strd	r5, r4, [r6]
 8008ce4:	2700      	movs	r7, #0
 8008ce6:	e747      	b.n	8008b78 <__udivmoddi4+0xa0>
 8008ce8:	f1c2 0320 	rsb	r3, r2, #32
 8008cec:	fa20 f703 	lsr.w	r7, r0, r3
 8008cf0:	4095      	lsls	r5, r2
 8008cf2:	fa01 f002 	lsl.w	r0, r1, r2
 8008cf6:	fa21 f303 	lsr.w	r3, r1, r3
 8008cfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008cfe:	4338      	orrs	r0, r7
 8008d00:	0c01      	lsrs	r1, r0, #16
 8008d02:	fbb3 f7fe 	udiv	r7, r3, lr
 8008d06:	fa1f f885 	uxth.w	r8, r5
 8008d0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8008d0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d12:	fb07 f308 	mul.w	r3, r7, r8
 8008d16:	428b      	cmp	r3, r1
 8008d18:	fa04 f402 	lsl.w	r4, r4, r2
 8008d1c:	d907      	bls.n	8008d2e <__udivmoddi4+0x256>
 8008d1e:	1869      	adds	r1, r5, r1
 8008d20:	f107 3cff 	add.w	ip, r7, #4294967295
 8008d24:	d22f      	bcs.n	8008d86 <__udivmoddi4+0x2ae>
 8008d26:	428b      	cmp	r3, r1
 8008d28:	d92d      	bls.n	8008d86 <__udivmoddi4+0x2ae>
 8008d2a:	3f02      	subs	r7, #2
 8008d2c:	4429      	add	r1, r5
 8008d2e:	1acb      	subs	r3, r1, r3
 8008d30:	b281      	uxth	r1, r0
 8008d32:	fbb3 f0fe 	udiv	r0, r3, lr
 8008d36:	fb0e 3310 	mls	r3, lr, r0, r3
 8008d3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d3e:	fb00 f308 	mul.w	r3, r0, r8
 8008d42:	428b      	cmp	r3, r1
 8008d44:	d907      	bls.n	8008d56 <__udivmoddi4+0x27e>
 8008d46:	1869      	adds	r1, r5, r1
 8008d48:	f100 3cff 	add.w	ip, r0, #4294967295
 8008d4c:	d217      	bcs.n	8008d7e <__udivmoddi4+0x2a6>
 8008d4e:	428b      	cmp	r3, r1
 8008d50:	d915      	bls.n	8008d7e <__udivmoddi4+0x2a6>
 8008d52:	3802      	subs	r0, #2
 8008d54:	4429      	add	r1, r5
 8008d56:	1ac9      	subs	r1, r1, r3
 8008d58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8008d5c:	e73b      	b.n	8008bd6 <__udivmoddi4+0xfe>
 8008d5e:	4637      	mov	r7, r6
 8008d60:	4630      	mov	r0, r6
 8008d62:	e709      	b.n	8008b78 <__udivmoddi4+0xa0>
 8008d64:	4607      	mov	r7, r0
 8008d66:	e6e7      	b.n	8008b38 <__udivmoddi4+0x60>
 8008d68:	4618      	mov	r0, r3
 8008d6a:	e6fb      	b.n	8008b64 <__udivmoddi4+0x8c>
 8008d6c:	4541      	cmp	r1, r8
 8008d6e:	d2ab      	bcs.n	8008cc8 <__udivmoddi4+0x1f0>
 8008d70:	ebb8 0a02 	subs.w	sl, r8, r2
 8008d74:	eb69 020e 	sbc.w	r2, r9, lr
 8008d78:	3801      	subs	r0, #1
 8008d7a:	4613      	mov	r3, r2
 8008d7c:	e7a4      	b.n	8008cc8 <__udivmoddi4+0x1f0>
 8008d7e:	4660      	mov	r0, ip
 8008d80:	e7e9      	b.n	8008d56 <__udivmoddi4+0x27e>
 8008d82:	4618      	mov	r0, r3
 8008d84:	e795      	b.n	8008cb2 <__udivmoddi4+0x1da>
 8008d86:	4667      	mov	r7, ip
 8008d88:	e7d1      	b.n	8008d2e <__udivmoddi4+0x256>
 8008d8a:	4681      	mov	r9, r0
 8008d8c:	e77c      	b.n	8008c88 <__udivmoddi4+0x1b0>
 8008d8e:	3802      	subs	r0, #2
 8008d90:	442c      	add	r4, r5
 8008d92:	e747      	b.n	8008c24 <__udivmoddi4+0x14c>
 8008d94:	f1ac 0c02 	sub.w	ip, ip, #2
 8008d98:	442b      	add	r3, r5
 8008d9a:	e72f      	b.n	8008bfc <__udivmoddi4+0x124>
 8008d9c:	4638      	mov	r0, r7
 8008d9e:	e708      	b.n	8008bb2 <__udivmoddi4+0xda>
 8008da0:	4637      	mov	r7, r6
 8008da2:	e6e9      	b.n	8008b78 <__udivmoddi4+0xa0>

08008da4 <__aeabi_idiv0>:
 8008da4:	4770      	bx	lr
 8008da6:	bf00      	nop

08008da8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008da8:	b580      	push	{r7, lr}
 8008daa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008dac:	4b0e      	ldr	r3, [pc, #56]	; (8008de8 <HAL_Init+0x40>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a0d      	ldr	r2, [pc, #52]	; (8008de8 <HAL_Init+0x40>)
 8008db2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008db6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008db8:	4b0b      	ldr	r3, [pc, #44]	; (8008de8 <HAL_Init+0x40>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4a0a      	ldr	r2, [pc, #40]	; (8008de8 <HAL_Init+0x40>)
 8008dbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008dc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008dc4:	4b08      	ldr	r3, [pc, #32]	; (8008de8 <HAL_Init+0x40>)
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4a07      	ldr	r2, [pc, #28]	; (8008de8 <HAL_Init+0x40>)
 8008dca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008dce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008dd0:	2003      	movs	r0, #3
 8008dd2:	f001 fab5 	bl	800a340 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008dd6:	2000      	movs	r0, #0
 8008dd8:	f000 f808 	bl	8008dec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008ddc:	f008 f8ee 	bl	8010fbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008de0:	2300      	movs	r3, #0
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	bd80      	pop	{r7, pc}
 8008de6:	bf00      	nop
 8008de8:	40023c00 	.word	0x40023c00

08008dec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b082      	sub	sp, #8
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008df4:	4b12      	ldr	r3, [pc, #72]	; (8008e40 <HAL_InitTick+0x54>)
 8008df6:	681a      	ldr	r2, [r3, #0]
 8008df8:	4b12      	ldr	r3, [pc, #72]	; (8008e44 <HAL_InitTick+0x58>)
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008e02:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f001 facd 	bl	800a3aa <HAL_SYSTICK_Config>
 8008e10:	4603      	mov	r3, r0
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d001      	beq.n	8008e1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008e16:	2301      	movs	r3, #1
 8008e18:	e00e      	b.n	8008e38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2b0f      	cmp	r3, #15
 8008e1e:	d80a      	bhi.n	8008e36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008e20:	2200      	movs	r2, #0
 8008e22:	6879      	ldr	r1, [r7, #4]
 8008e24:	f04f 30ff 	mov.w	r0, #4294967295
 8008e28:	f001 fa95 	bl	800a356 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008e2c:	4a06      	ldr	r2, [pc, #24]	; (8008e48 <HAL_InitTick+0x5c>)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008e32:	2300      	movs	r3, #0
 8008e34:	e000      	b.n	8008e38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008e36:	2301      	movs	r3, #1
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3708      	adds	r7, #8
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	bd80      	pop	{r7, pc}
 8008e40:	20000018 	.word	0x20000018
 8008e44:	20000004 	.word	0x20000004
 8008e48:	20000000 	.word	0x20000000

08008e4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008e50:	4b06      	ldr	r3, [pc, #24]	; (8008e6c <HAL_IncTick+0x20>)
 8008e52:	781b      	ldrb	r3, [r3, #0]
 8008e54:	461a      	mov	r2, r3
 8008e56:	4b06      	ldr	r3, [pc, #24]	; (8008e70 <HAL_IncTick+0x24>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4413      	add	r3, r2
 8008e5c:	4a04      	ldr	r2, [pc, #16]	; (8008e70 <HAL_IncTick+0x24>)
 8008e5e:	6013      	str	r3, [r2, #0]
}
 8008e60:	bf00      	nop
 8008e62:	46bd      	mov	sp, r7
 8008e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e68:	4770      	bx	lr
 8008e6a:	bf00      	nop
 8008e6c:	20000004 	.word	0x20000004
 8008e70:	20004154 	.word	0x20004154

08008e74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008e74:	b480      	push	{r7}
 8008e76:	af00      	add	r7, sp, #0
  return uwTick;
 8008e78:	4b03      	ldr	r3, [pc, #12]	; (8008e88 <HAL_GetTick+0x14>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	46bd      	mov	sp, r7
 8008e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e84:	4770      	bx	lr
 8008e86:	bf00      	nop
 8008e88:	20004154 	.word	0x20004154

08008e8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b084      	sub	sp, #16
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008e94:	f7ff ffee 	bl	8008e74 <HAL_GetTick>
 8008e98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ea4:	d005      	beq.n	8008eb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008ea6:	4b09      	ldr	r3, [pc, #36]	; (8008ecc <HAL_Delay+0x40>)
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	461a      	mov	r2, r3
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	4413      	add	r3, r2
 8008eb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008eb2:	bf00      	nop
 8008eb4:	f7ff ffde 	bl	8008e74 <HAL_GetTick>
 8008eb8:	4602      	mov	r2, r0
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	1ad3      	subs	r3, r2, r3
 8008ebe:	68fa      	ldr	r2, [r7, #12]
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d8f7      	bhi.n	8008eb4 <HAL_Delay+0x28>
  {
  }
}
 8008ec4:	bf00      	nop
 8008ec6:	3710      	adds	r7, #16
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}
 8008ecc:	20000004 	.word	0x20000004

08008ed0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b084      	sub	sp, #16
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d101      	bne.n	8008ee6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	e033      	b.n	8008f4e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d109      	bne.n	8008f02 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008eee:	6878      	ldr	r0, [r7, #4]
 8008ef0:	f006 fa2c 	bl	800f34c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2200      	movs	r2, #0
 8008efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f06:	f003 0310 	and.w	r3, r3, #16
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d118      	bne.n	8008f40 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f12:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008f16:	f023 0302 	bic.w	r3, r3, #2
 8008f1a:	f043 0202 	orr.w	r2, r3, #2
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 fa5a 	bl	80093dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f32:	f023 0303 	bic.w	r3, r3, #3
 8008f36:	f043 0201 	orr.w	r2, r3, #1
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	641a      	str	r2, [r3, #64]	; 0x40
 8008f3e:	e001      	b.n	8008f44 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8008f40:	2301      	movs	r3, #1
 8008f42:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2200      	movs	r2, #0
 8008f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8008f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3710      	adds	r7, #16
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}
	...

08008f58 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b086      	sub	sp, #24
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	60f8      	str	r0, [r7, #12]
 8008f60:	60b9      	str	r1, [r7, #8]
 8008f62:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8008f64:	2300      	movs	r3, #0
 8008f66:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f6e:	2b01      	cmp	r3, #1
 8008f70:	d101      	bne.n	8008f76 <HAL_ADC_Start_DMA+0x1e>
 8008f72:	2302      	movs	r3, #2
 8008f74:	e0cc      	b.n	8009110 <HAL_ADC_Start_DMA+0x1b8>
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2201      	movs	r2, #1
 8008f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	689b      	ldr	r3, [r3, #8]
 8008f84:	f003 0301 	and.w	r3, r3, #1
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	d018      	beq.n	8008fbe <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	689a      	ldr	r2, [r3, #8]
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f042 0201 	orr.w	r2, r2, #1
 8008f9a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8008f9c:	4b5e      	ldr	r3, [pc, #376]	; (8009118 <HAL_ADC_Start_DMA+0x1c0>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4a5e      	ldr	r2, [pc, #376]	; (800911c <HAL_ADC_Start_DMA+0x1c4>)
 8008fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8008fa6:	0c9a      	lsrs	r2, r3, #18
 8008fa8:	4613      	mov	r3, r2
 8008faa:	005b      	lsls	r3, r3, #1
 8008fac:	4413      	add	r3, r2
 8008fae:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8008fb0:	e002      	b.n	8008fb8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	3b01      	subs	r3, #1
 8008fb6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d1f9      	bne.n	8008fb2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	689b      	ldr	r3, [r3, #8]
 8008fc4:	f003 0301 	and.w	r3, r3, #1
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	f040 80a0 	bne.w	800910e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fd2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008fd6:	f023 0301 	bic.w	r3, r3, #1
 8008fda:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d007      	beq.n	8009000 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ff4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008ff8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009004:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009008:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800900c:	d106      	bne.n	800901c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009012:	f023 0206 	bic.w	r2, r3, #6
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	645a      	str	r2, [r3, #68]	; 0x44
 800901a:	e002      	b.n	8009022 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	2200      	movs	r2, #0
 8009020:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2200      	movs	r2, #0
 8009026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800902a:	4b3d      	ldr	r3, [pc, #244]	; (8009120 <HAL_ADC_Start_DMA+0x1c8>)
 800902c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009032:	4a3c      	ldr	r2, [pc, #240]	; (8009124 <HAL_ADC_Start_DMA+0x1cc>)
 8009034:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800903a:	4a3b      	ldr	r2, [pc, #236]	; (8009128 <HAL_ADC_Start_DMA+0x1d0>)
 800903c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009042:	4a3a      	ldr	r2, [pc, #232]	; (800912c <HAL_ADC_Start_DMA+0x1d4>)
 8009044:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800904e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	685a      	ldr	r2, [r3, #4]
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800905e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	689a      	ldr	r2, [r3, #8]
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800906e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	334c      	adds	r3, #76	; 0x4c
 800907a:	4619      	mov	r1, r3
 800907c:	68ba      	ldr	r2, [r7, #8]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f001 fa4e 	bl	800a520 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	685b      	ldr	r3, [r3, #4]
 8009088:	f003 031f 	and.w	r3, r3, #31
 800908c:	2b00      	cmp	r3, #0
 800908e:	d12a      	bne.n	80090e6 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4a26      	ldr	r2, [pc, #152]	; (8009130 <HAL_ADC_Start_DMA+0x1d8>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d015      	beq.n	80090c6 <HAL_ADC_Start_DMA+0x16e>
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4a25      	ldr	r2, [pc, #148]	; (8009134 <HAL_ADC_Start_DMA+0x1dc>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d105      	bne.n	80090b0 <HAL_ADC_Start_DMA+0x158>
 80090a4:	4b1e      	ldr	r3, [pc, #120]	; (8009120 <HAL_ADC_Start_DMA+0x1c8>)
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	f003 031f 	and.w	r3, r3, #31
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d00a      	beq.n	80090c6 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4a20      	ldr	r2, [pc, #128]	; (8009138 <HAL_ADC_Start_DMA+0x1e0>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d129      	bne.n	800910e <HAL_ADC_Start_DMA+0x1b6>
 80090ba:	4b19      	ldr	r3, [pc, #100]	; (8009120 <HAL_ADC_Start_DMA+0x1c8>)
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	f003 031f 	and.w	r3, r3, #31
 80090c2:	2b0f      	cmp	r3, #15
 80090c4:	d823      	bhi.n	800910e <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	689b      	ldr	r3, [r3, #8]
 80090cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d11c      	bne.n	800910e <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	689a      	ldr	r2, [r3, #8]
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80090e2:	609a      	str	r2, [r3, #8]
 80090e4:	e013      	b.n	800910e <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4a11      	ldr	r2, [pc, #68]	; (8009130 <HAL_ADC_Start_DMA+0x1d8>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d10e      	bne.n	800910e <HAL_ADC_Start_DMA+0x1b6>
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	689b      	ldr	r3, [r3, #8]
 80090f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d107      	bne.n	800910e <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	689a      	ldr	r2, [r3, #8]
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800910c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800910e:	2300      	movs	r3, #0
}
 8009110:	4618      	mov	r0, r3
 8009112:	3718      	adds	r7, #24
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}
 8009118:	20000018 	.word	0x20000018
 800911c:	431bde83 	.word	0x431bde83
 8009120:	40012300 	.word	0x40012300
 8009124:	080095d5 	.word	0x080095d5
 8009128:	0800968f 	.word	0x0800968f
 800912c:	080096ab 	.word	0x080096ab
 8009130:	40012000 	.word	0x40012000
 8009134:	40012100 	.word	0x40012100
 8009138:	40012200 	.word	0x40012200

0800913c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800913c:	b480      	push	{r7}
 800913e:	b083      	sub	sp, #12
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8009144:	bf00      	nop
 8009146:	370c      	adds	r7, #12
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr

08009150 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009150:	b480      	push	{r7}
 8009152:	b083      	sub	sp, #12
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8009158:	bf00      	nop
 800915a:	370c      	adds	r7, #12
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr

08009164 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009164:	b480      	push	{r7}
 8009166:	b083      	sub	sp, #12
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800916c:	bf00      	nop
 800916e:	370c      	adds	r7, #12
 8009170:	46bd      	mov	sp, r7
 8009172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009176:	4770      	bx	lr

08009178 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8009178:	b480      	push	{r7}
 800917a:	b085      	sub	sp, #20
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8009182:	2300      	movs	r3, #0
 8009184:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800918c:	2b01      	cmp	r3, #1
 800918e:	d101      	bne.n	8009194 <HAL_ADC_ConfigChannel+0x1c>
 8009190:	2302      	movs	r3, #2
 8009192:	e113      	b.n	80093bc <HAL_ADC_ConfigChannel+0x244>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2201      	movs	r2, #1
 8009198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	2b09      	cmp	r3, #9
 80091a2:	d925      	bls.n	80091f0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	68d9      	ldr	r1, [r3, #12]
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	b29b      	uxth	r3, r3
 80091b0:	461a      	mov	r2, r3
 80091b2:	4613      	mov	r3, r2
 80091b4:	005b      	lsls	r3, r3, #1
 80091b6:	4413      	add	r3, r2
 80091b8:	3b1e      	subs	r3, #30
 80091ba:	2207      	movs	r2, #7
 80091bc:	fa02 f303 	lsl.w	r3, r2, r3
 80091c0:	43da      	mvns	r2, r3
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	400a      	ands	r2, r1
 80091c8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	68d9      	ldr	r1, [r3, #12]
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	689a      	ldr	r2, [r3, #8]
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	b29b      	uxth	r3, r3
 80091da:	4618      	mov	r0, r3
 80091dc:	4603      	mov	r3, r0
 80091de:	005b      	lsls	r3, r3, #1
 80091e0:	4403      	add	r3, r0
 80091e2:	3b1e      	subs	r3, #30
 80091e4:	409a      	lsls	r2, r3
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	430a      	orrs	r2, r1
 80091ec:	60da      	str	r2, [r3, #12]
 80091ee:	e022      	b.n	8009236 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	6919      	ldr	r1, [r3, #16]
 80091f6:	683b      	ldr	r3, [r7, #0]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	b29b      	uxth	r3, r3
 80091fc:	461a      	mov	r2, r3
 80091fe:	4613      	mov	r3, r2
 8009200:	005b      	lsls	r3, r3, #1
 8009202:	4413      	add	r3, r2
 8009204:	2207      	movs	r2, #7
 8009206:	fa02 f303 	lsl.w	r3, r2, r3
 800920a:	43da      	mvns	r2, r3
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	400a      	ands	r2, r1
 8009212:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	6919      	ldr	r1, [r3, #16]
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	689a      	ldr	r2, [r3, #8]
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	b29b      	uxth	r3, r3
 8009224:	4618      	mov	r0, r3
 8009226:	4603      	mov	r3, r0
 8009228:	005b      	lsls	r3, r3, #1
 800922a:	4403      	add	r3, r0
 800922c:	409a      	lsls	r2, r3
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	430a      	orrs	r2, r1
 8009234:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	685b      	ldr	r3, [r3, #4]
 800923a:	2b06      	cmp	r3, #6
 800923c:	d824      	bhi.n	8009288 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	685a      	ldr	r2, [r3, #4]
 8009248:	4613      	mov	r3, r2
 800924a:	009b      	lsls	r3, r3, #2
 800924c:	4413      	add	r3, r2
 800924e:	3b05      	subs	r3, #5
 8009250:	221f      	movs	r2, #31
 8009252:	fa02 f303 	lsl.w	r3, r2, r3
 8009256:	43da      	mvns	r2, r3
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	400a      	ands	r2, r1
 800925e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	b29b      	uxth	r3, r3
 800926c:	4618      	mov	r0, r3
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	685a      	ldr	r2, [r3, #4]
 8009272:	4613      	mov	r3, r2
 8009274:	009b      	lsls	r3, r3, #2
 8009276:	4413      	add	r3, r2
 8009278:	3b05      	subs	r3, #5
 800927a:	fa00 f203 	lsl.w	r2, r0, r3
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	430a      	orrs	r2, r1
 8009284:	635a      	str	r2, [r3, #52]	; 0x34
 8009286:	e04c      	b.n	8009322 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	685b      	ldr	r3, [r3, #4]
 800928c:	2b0c      	cmp	r3, #12
 800928e:	d824      	bhi.n	80092da <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	685a      	ldr	r2, [r3, #4]
 800929a:	4613      	mov	r3, r2
 800929c:	009b      	lsls	r3, r3, #2
 800929e:	4413      	add	r3, r2
 80092a0:	3b23      	subs	r3, #35	; 0x23
 80092a2:	221f      	movs	r2, #31
 80092a4:	fa02 f303 	lsl.w	r3, r2, r3
 80092a8:	43da      	mvns	r2, r3
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	400a      	ands	r2, r1
 80092b0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	b29b      	uxth	r3, r3
 80092be:	4618      	mov	r0, r3
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	685a      	ldr	r2, [r3, #4]
 80092c4:	4613      	mov	r3, r2
 80092c6:	009b      	lsls	r3, r3, #2
 80092c8:	4413      	add	r3, r2
 80092ca:	3b23      	subs	r3, #35	; 0x23
 80092cc:	fa00 f203 	lsl.w	r2, r0, r3
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	430a      	orrs	r2, r1
 80092d6:	631a      	str	r2, [r3, #48]	; 0x30
 80092d8:	e023      	b.n	8009322 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	685a      	ldr	r2, [r3, #4]
 80092e4:	4613      	mov	r3, r2
 80092e6:	009b      	lsls	r3, r3, #2
 80092e8:	4413      	add	r3, r2
 80092ea:	3b41      	subs	r3, #65	; 0x41
 80092ec:	221f      	movs	r2, #31
 80092ee:	fa02 f303 	lsl.w	r3, r2, r3
 80092f2:	43da      	mvns	r2, r3
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	400a      	ands	r2, r1
 80092fa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	b29b      	uxth	r3, r3
 8009308:	4618      	mov	r0, r3
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	685a      	ldr	r2, [r3, #4]
 800930e:	4613      	mov	r3, r2
 8009310:	009b      	lsls	r3, r3, #2
 8009312:	4413      	add	r3, r2
 8009314:	3b41      	subs	r3, #65	; 0x41
 8009316:	fa00 f203 	lsl.w	r2, r0, r3
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	430a      	orrs	r2, r1
 8009320:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009322:	4b29      	ldr	r3, [pc, #164]	; (80093c8 <HAL_ADC_ConfigChannel+0x250>)
 8009324:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	4a28      	ldr	r2, [pc, #160]	; (80093cc <HAL_ADC_ConfigChannel+0x254>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d10f      	bne.n	8009350 <HAL_ADC_ConfigChannel+0x1d8>
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	2b12      	cmp	r3, #18
 8009336:	d10b      	bne.n	8009350 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	685b      	ldr	r3, [r3, #4]
 800933c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	685b      	ldr	r3, [r3, #4]
 8009348:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a1d      	ldr	r2, [pc, #116]	; (80093cc <HAL_ADC_ConfigChannel+0x254>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d12b      	bne.n	80093b2 <HAL_ADC_ConfigChannel+0x23a>
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4a1c      	ldr	r2, [pc, #112]	; (80093d0 <HAL_ADC_ConfigChannel+0x258>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d003      	beq.n	800936c <HAL_ADC_ConfigChannel+0x1f4>
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	2b11      	cmp	r3, #17
 800936a:	d122      	bne.n	80093b2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	685b      	ldr	r3, [r3, #4]
 800937c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	4a11      	ldr	r2, [pc, #68]	; (80093d0 <HAL_ADC_ConfigChannel+0x258>)
 800938a:	4293      	cmp	r3, r2
 800938c:	d111      	bne.n	80093b2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800938e:	4b11      	ldr	r3, [pc, #68]	; (80093d4 <HAL_ADC_ConfigChannel+0x25c>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	4a11      	ldr	r2, [pc, #68]	; (80093d8 <HAL_ADC_ConfigChannel+0x260>)
 8009394:	fba2 2303 	umull	r2, r3, r2, r3
 8009398:	0c9a      	lsrs	r2, r3, #18
 800939a:	4613      	mov	r3, r2
 800939c:	009b      	lsls	r3, r3, #2
 800939e:	4413      	add	r3, r2
 80093a0:	005b      	lsls	r3, r3, #1
 80093a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80093a4:	e002      	b.n	80093ac <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	3b01      	subs	r3, #1
 80093aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d1f9      	bne.n	80093a6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2200      	movs	r2, #0
 80093b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80093ba:	2300      	movs	r3, #0
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3714      	adds	r7, #20
 80093c0:	46bd      	mov	sp, r7
 80093c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c6:	4770      	bx	lr
 80093c8:	40012300 	.word	0x40012300
 80093cc:	40012000 	.word	0x40012000
 80093d0:	10000012 	.word	0x10000012
 80093d4:	20000018 	.word	0x20000018
 80093d8:	431bde83 	.word	0x431bde83

080093dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80093dc:	b480      	push	{r7}
 80093de:	b085      	sub	sp, #20
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80093e4:	4b79      	ldr	r3, [pc, #484]	; (80095cc <ADC_Init+0x1f0>)
 80093e6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	685b      	ldr	r3, [r3, #4]
 80093ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	685a      	ldr	r2, [r3, #4]
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	685b      	ldr	r3, [r3, #4]
 80093fc:	431a      	orrs	r2, r3
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	685a      	ldr	r2, [r3, #4]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009410:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	6859      	ldr	r1, [r3, #4]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	691b      	ldr	r3, [r3, #16]
 800941c:	021a      	lsls	r2, r3, #8
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	430a      	orrs	r2, r1
 8009424:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	685a      	ldr	r2, [r3, #4]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8009434:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	6859      	ldr	r1, [r3, #4]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	689a      	ldr	r2, [r3, #8]
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	430a      	orrs	r2, r1
 8009446:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	689a      	ldr	r2, [r3, #8]
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009456:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	6899      	ldr	r1, [r3, #8]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	68da      	ldr	r2, [r3, #12]
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	430a      	orrs	r2, r1
 8009468:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800946e:	4a58      	ldr	r2, [pc, #352]	; (80095d0 <ADC_Init+0x1f4>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d022      	beq.n	80094ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	689a      	ldr	r2, [r3, #8]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009482:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	6899      	ldr	r1, [r3, #8]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	430a      	orrs	r2, r1
 8009494:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	689a      	ldr	r2, [r3, #8]
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80094a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	6899      	ldr	r1, [r3, #8]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	430a      	orrs	r2, r1
 80094b6:	609a      	str	r2, [r3, #8]
 80094b8:	e00f      	b.n	80094da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	689a      	ldr	r2, [r3, #8]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80094c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	689a      	ldr	r2, [r3, #8]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80094d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	689a      	ldr	r2, [r3, #8]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f022 0202 	bic.w	r2, r2, #2
 80094e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	6899      	ldr	r1, [r3, #8]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	7e1b      	ldrb	r3, [r3, #24]
 80094f4:	005a      	lsls	r2, r3, #1
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	430a      	orrs	r2, r1
 80094fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d01b      	beq.n	8009540 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	685a      	ldr	r2, [r3, #4]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009516:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	685a      	ldr	r2, [r3, #4]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8009526:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	6859      	ldr	r1, [r3, #4]
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009532:	3b01      	subs	r3, #1
 8009534:	035a      	lsls	r2, r3, #13
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	430a      	orrs	r2, r1
 800953c:	605a      	str	r2, [r3, #4]
 800953e:	e007      	b.n	8009550 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	685a      	ldr	r2, [r3, #4]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800954e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800955e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	69db      	ldr	r3, [r3, #28]
 800956a:	3b01      	subs	r3, #1
 800956c:	051a      	lsls	r2, r3, #20
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	430a      	orrs	r2, r1
 8009574:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	689a      	ldr	r2, [r3, #8]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009584:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	6899      	ldr	r1, [r3, #8]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009592:	025a      	lsls	r2, r3, #9
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	430a      	orrs	r2, r1
 800959a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	689a      	ldr	r2, [r3, #8]
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80095aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	6899      	ldr	r1, [r3, #8]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	695b      	ldr	r3, [r3, #20]
 80095b6:	029a      	lsls	r2, r3, #10
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	430a      	orrs	r2, r1
 80095be:	609a      	str	r2, [r3, #8]
}
 80095c0:	bf00      	nop
 80095c2:	3714      	adds	r7, #20
 80095c4:	46bd      	mov	sp, r7
 80095c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ca:	4770      	bx	lr
 80095cc:	40012300 	.word	0x40012300
 80095d0:	0f000001 	.word	0x0f000001

080095d4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095e0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095e6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d13c      	bne.n	8009668 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095f2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	689b      	ldr	r3, [r3, #8]
 8009600:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009604:	2b00      	cmp	r3, #0
 8009606:	d12b      	bne.n	8009660 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800960c:	2b00      	cmp	r3, #0
 800960e:	d127      	bne.n	8009660 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009616:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800961a:	2b00      	cmp	r3, #0
 800961c:	d006      	beq.n	800962c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	689b      	ldr	r3, [r3, #8]
 8009624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009628:	2b00      	cmp	r3, #0
 800962a:	d119      	bne.n	8009660 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	685a      	ldr	r2, [r3, #4]
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f022 0220 	bic.w	r2, r2, #32
 800963a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009640:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800964c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009650:	2b00      	cmp	r3, #0
 8009652:	d105      	bne.n	8009660 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009658:	f043 0201 	orr.w	r2, r3, #1
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009660:	68f8      	ldr	r0, [r7, #12]
 8009662:	f7ff fd6b 	bl	800913c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8009666:	e00e      	b.n	8009686 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800966c:	f003 0310 	and.w	r3, r3, #16
 8009670:	2b00      	cmp	r3, #0
 8009672:	d003      	beq.n	800967c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8009674:	68f8      	ldr	r0, [r7, #12]
 8009676:	f7ff fd75 	bl	8009164 <HAL_ADC_ErrorCallback>
}
 800967a:	e004      	b.n	8009686 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	4798      	blx	r3
}
 8009686:	bf00      	nop
 8009688:	3710      	adds	r7, #16
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}

0800968e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800968e:	b580      	push	{r7, lr}
 8009690:	b084      	sub	sp, #16
 8009692:	af00      	add	r7, sp, #0
 8009694:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800969a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800969c:	68f8      	ldr	r0, [r7, #12]
 800969e:	f7ff fd57 	bl	8009150 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80096a2:	bf00      	nop
 80096a4:	3710      	adds	r7, #16
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}

080096aa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80096aa:	b580      	push	{r7, lr}
 80096ac:	b084      	sub	sp, #16
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096b6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	2240      	movs	r2, #64	; 0x40
 80096bc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096c2:	f043 0204 	orr.w	r2, r3, #4
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80096ca:	68f8      	ldr	r0, [r7, #12]
 80096cc:	f7ff fd4a 	bl	8009164 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80096d0:	bf00      	nop
 80096d2:	3710      	adds	r7, #16
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}

080096d8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b084      	sub	sp, #16
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d101      	bne.n	80096ea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80096e6:	2301      	movs	r3, #1
 80096e8:	e0ed      	b.n	80098c6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80096f0:	b2db      	uxtb	r3, r3
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d102      	bne.n	80096fc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f005 ffbe 	bl	800f678 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	681a      	ldr	r2, [r3, #0]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f022 0202 	bic.w	r2, r2, #2
 800970a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800970c:	f7ff fbb2 	bl	8008e74 <HAL_GetTick>
 8009710:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009712:	e012      	b.n	800973a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009714:	f7ff fbae 	bl	8008e74 <HAL_GetTick>
 8009718:	4602      	mov	r2, r0
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	1ad3      	subs	r3, r2, r3
 800971e:	2b0a      	cmp	r3, #10
 8009720:	d90b      	bls.n	800973a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009726:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2205      	movs	r2, #5
 8009732:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009736:	2301      	movs	r3, #1
 8009738:	e0c5      	b.n	80098c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	685b      	ldr	r3, [r3, #4]
 8009740:	f003 0302 	and.w	r3, r3, #2
 8009744:	2b00      	cmp	r3, #0
 8009746:	d1e5      	bne.n	8009714 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	681a      	ldr	r2, [r3, #0]
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f042 0201 	orr.w	r2, r2, #1
 8009756:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009758:	f7ff fb8c 	bl	8008e74 <HAL_GetTick>
 800975c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800975e:	e012      	b.n	8009786 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009760:	f7ff fb88 	bl	8008e74 <HAL_GetTick>
 8009764:	4602      	mov	r2, r0
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	1ad3      	subs	r3, r2, r3
 800976a:	2b0a      	cmp	r3, #10
 800976c:	d90b      	bls.n	8009786 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009772:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2205      	movs	r2, #5
 800977e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009782:	2301      	movs	r3, #1
 8009784:	e09f      	b.n	80098c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	685b      	ldr	r3, [r3, #4]
 800978c:	f003 0301 	and.w	r3, r3, #1
 8009790:	2b00      	cmp	r3, #0
 8009792:	d0e5      	beq.n	8009760 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	7e1b      	ldrb	r3, [r3, #24]
 8009798:	2b01      	cmp	r3, #1
 800979a:	d108      	bne.n	80097ae <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	681a      	ldr	r2, [r3, #0]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80097aa:	601a      	str	r2, [r3, #0]
 80097ac:	e007      	b.n	80097be <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	681a      	ldr	r2, [r3, #0]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80097bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	7e5b      	ldrb	r3, [r3, #25]
 80097c2:	2b01      	cmp	r3, #1
 80097c4:	d108      	bne.n	80097d8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	681a      	ldr	r2, [r3, #0]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80097d4:	601a      	str	r2, [r3, #0]
 80097d6:	e007      	b.n	80097e8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	681a      	ldr	r2, [r3, #0]
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80097e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	7e9b      	ldrb	r3, [r3, #26]
 80097ec:	2b01      	cmp	r3, #1
 80097ee:	d108      	bne.n	8009802 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	681a      	ldr	r2, [r3, #0]
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f042 0220 	orr.w	r2, r2, #32
 80097fe:	601a      	str	r2, [r3, #0]
 8009800:	e007      	b.n	8009812 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	681a      	ldr	r2, [r3, #0]
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f022 0220 	bic.w	r2, r2, #32
 8009810:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	7edb      	ldrb	r3, [r3, #27]
 8009816:	2b01      	cmp	r3, #1
 8009818:	d108      	bne.n	800982c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	681a      	ldr	r2, [r3, #0]
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	f022 0210 	bic.w	r2, r2, #16
 8009828:	601a      	str	r2, [r3, #0]
 800982a:	e007      	b.n	800983c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	681a      	ldr	r2, [r3, #0]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f042 0210 	orr.w	r2, r2, #16
 800983a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	7f1b      	ldrb	r3, [r3, #28]
 8009840:	2b01      	cmp	r3, #1
 8009842:	d108      	bne.n	8009856 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	681a      	ldr	r2, [r3, #0]
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f042 0208 	orr.w	r2, r2, #8
 8009852:	601a      	str	r2, [r3, #0]
 8009854:	e007      	b.n	8009866 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	681a      	ldr	r2, [r3, #0]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	f022 0208 	bic.w	r2, r2, #8
 8009864:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	7f5b      	ldrb	r3, [r3, #29]
 800986a:	2b01      	cmp	r3, #1
 800986c:	d108      	bne.n	8009880 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	681a      	ldr	r2, [r3, #0]
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f042 0204 	orr.w	r2, r2, #4
 800987c:	601a      	str	r2, [r3, #0]
 800987e:	e007      	b.n	8009890 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	681a      	ldr	r2, [r3, #0]
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f022 0204 	bic.w	r2, r2, #4
 800988e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	689a      	ldr	r2, [r3, #8]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	68db      	ldr	r3, [r3, #12]
 8009898:	431a      	orrs	r2, r3
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	691b      	ldr	r3, [r3, #16]
 800989e:	431a      	orrs	r2, r3
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	695b      	ldr	r3, [r3, #20]
 80098a4:	ea42 0103 	orr.w	r1, r2, r3
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	685b      	ldr	r3, [r3, #4]
 80098ac:	1e5a      	subs	r2, r3, #1
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	430a      	orrs	r2, r1
 80098b4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2200      	movs	r2, #0
 80098ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2201      	movs	r2, #1
 80098c0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80098c4:	2300      	movs	r3, #0
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3710      	adds	r7, #16
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}
	...

080098d0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80098d0:	b480      	push	{r7}
 80098d2:	b087      	sub	sp, #28
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
 80098d8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80098e6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80098e8:	7cfb      	ldrb	r3, [r7, #19]
 80098ea:	2b01      	cmp	r3, #1
 80098ec:	d003      	beq.n	80098f6 <HAL_CAN_ConfigFilter+0x26>
 80098ee:	7cfb      	ldrb	r3, [r7, #19]
 80098f0:	2b02      	cmp	r3, #2
 80098f2:	f040 80be 	bne.w	8009a72 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80098f6:	4b65      	ldr	r3, [pc, #404]	; (8009a8c <HAL_CAN_ConfigFilter+0x1bc>)
 80098f8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009900:	f043 0201 	orr.w	r2, r3, #1
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009910:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009924:	021b      	lsls	r3, r3, #8
 8009926:	431a      	orrs	r2, r3
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	695b      	ldr	r3, [r3, #20]
 8009932:	f003 031f 	and.w	r3, r3, #31
 8009936:	2201      	movs	r2, #1
 8009938:	fa02 f303 	lsl.w	r3, r2, r3
 800993c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	43db      	mvns	r3, r3
 8009948:	401a      	ands	r2, r3
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	69db      	ldr	r3, [r3, #28]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d123      	bne.n	80099a0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	43db      	mvns	r3, r3
 8009962:	401a      	ands	r2, r3
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	68db      	ldr	r3, [r3, #12]
 800996e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009976:	683a      	ldr	r2, [r7, #0]
 8009978:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800997a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	3248      	adds	r2, #72	; 0x48
 8009980:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	689b      	ldr	r3, [r3, #8]
 8009988:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009990:	683b      	ldr	r3, [r7, #0]
 8009992:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009994:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009996:	6979      	ldr	r1, [r7, #20]
 8009998:	3348      	adds	r3, #72	; 0x48
 800999a:	00db      	lsls	r3, r3, #3
 800999c:	440b      	add	r3, r1
 800999e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	69db      	ldr	r3, [r3, #28]
 80099a4:	2b01      	cmp	r3, #1
 80099a6:	d122      	bne.n	80099ee <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	431a      	orrs	r2, r3
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	685b      	ldr	r3, [r3, #4]
 80099c2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80099c4:	683a      	ldr	r2, [r7, #0]
 80099c6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80099c8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	3248      	adds	r2, #72	; 0x48
 80099ce:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	689b      	ldr	r3, [r3, #8]
 80099d6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	68db      	ldr	r3, [r3, #12]
 80099dc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80099e2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80099e4:	6979      	ldr	r1, [r7, #20]
 80099e6:	3348      	adds	r3, #72	; 0x48
 80099e8:	00db      	lsls	r3, r3, #3
 80099ea:	440b      	add	r3, r1
 80099ec:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	699b      	ldr	r3, [r3, #24]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d109      	bne.n	8009a0a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	43db      	mvns	r3, r3
 8009a00:	401a      	ands	r2, r3
 8009a02:	697b      	ldr	r3, [r7, #20]
 8009a04:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8009a08:	e007      	b.n	8009a1a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	431a      	orrs	r2, r3
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	691b      	ldr	r3, [r3, #16]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d109      	bne.n	8009a36 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	43db      	mvns	r3, r3
 8009a2c:	401a      	ands	r2, r3
 8009a2e:	697b      	ldr	r3, [r7, #20]
 8009a30:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8009a34:	e007      	b.n	8009a46 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8009a36:	697b      	ldr	r3, [r7, #20]
 8009a38:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	431a      	orrs	r2, r3
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	6a1b      	ldr	r3, [r3, #32]
 8009a4a:	2b01      	cmp	r3, #1
 8009a4c:	d107      	bne.n	8009a5e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8009a4e:	697b      	ldr	r3, [r7, #20]
 8009a50:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	431a      	orrs	r2, r3
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009a64:	f023 0201 	bic.w	r2, r3, #1
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	e006      	b.n	8009a80 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a76:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009a7e:	2301      	movs	r3, #1
  }
}
 8009a80:	4618      	mov	r0, r3
 8009a82:	371c      	adds	r7, #28
 8009a84:	46bd      	mov	sp, r7
 8009a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a8a:	4770      	bx	lr
 8009a8c:	40006400 	.word	0x40006400

08009a90 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b084      	sub	sp, #16
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009a9e:	b2db      	uxtb	r3, r3
 8009aa0:	2b01      	cmp	r3, #1
 8009aa2:	d12e      	bne.n	8009b02 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2202      	movs	r2, #2
 8009aa8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	681a      	ldr	r2, [r3, #0]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f022 0201 	bic.w	r2, r2, #1
 8009aba:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009abc:	f7ff f9da 	bl	8008e74 <HAL_GetTick>
 8009ac0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8009ac2:	e012      	b.n	8009aea <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009ac4:	f7ff f9d6 	bl	8008e74 <HAL_GetTick>
 8009ac8:	4602      	mov	r2, r0
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	1ad3      	subs	r3, r2, r3
 8009ace:	2b0a      	cmp	r3, #10
 8009ad0:	d90b      	bls.n	8009aea <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2205      	movs	r2, #5
 8009ae2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	e012      	b.n	8009b10 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	685b      	ldr	r3, [r3, #4]
 8009af0:	f003 0301 	and.w	r3, r3, #1
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d1e5      	bne.n	8009ac4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2200      	movs	r2, #0
 8009afc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8009afe:	2300      	movs	r3, #0
 8009b00:	e006      	b.n	8009b10 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b06:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009b0e:	2301      	movs	r3, #1
  }
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3710      	adds	r7, #16
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b087      	sub	sp, #28
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	60f8      	str	r0, [r7, #12]
 8009b20:	60b9      	str	r1, [r7, #8]
 8009b22:	607a      	str	r2, [r7, #4]
 8009b24:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009b2c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8009b2e:	7dfb      	ldrb	r3, [r7, #23]
 8009b30:	2b01      	cmp	r3, #1
 8009b32:	d003      	beq.n	8009b3c <HAL_CAN_GetRxMessage+0x24>
 8009b34:	7dfb      	ldrb	r3, [r7, #23]
 8009b36:	2b02      	cmp	r3, #2
 8009b38:	f040 80f4 	bne.w	8009d24 <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d10e      	bne.n	8009b60 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	68db      	ldr	r3, [r3, #12]
 8009b48:	f003 0303 	and.w	r3, r3, #3
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d116      	bne.n	8009b7e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b54:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	e0e8      	b.n	8009d32 <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	691b      	ldr	r3, [r3, #16]
 8009b66:	f003 0303 	and.w	r3, r3, #3
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d107      	bne.n	8009b7e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b72:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8009b7a:	2301      	movs	r3, #1
 8009b7c:	e0d9      	b.n	8009d32 <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681a      	ldr	r2, [r3, #0]
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	331b      	adds	r3, #27
 8009b86:	011b      	lsls	r3, r3, #4
 8009b88:	4413      	add	r3, r2
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	f003 0204 	and.w	r2, r3, #4
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	689b      	ldr	r3, [r3, #8]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d10c      	bne.n	8009bb6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681a      	ldr	r2, [r3, #0]
 8009ba0:	68bb      	ldr	r3, [r7, #8]
 8009ba2:	331b      	adds	r3, #27
 8009ba4:	011b      	lsls	r3, r3, #4
 8009ba6:	4413      	add	r3, r2
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	0d5b      	lsrs	r3, r3, #21
 8009bac:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	601a      	str	r2, [r3, #0]
 8009bb4:	e00b      	b.n	8009bce <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	681a      	ldr	r2, [r3, #0]
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	331b      	adds	r3, #27
 8009bbe:	011b      	lsls	r3, r3, #4
 8009bc0:	4413      	add	r3, r2
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	08db      	lsrs	r3, r3, #3
 8009bc6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681a      	ldr	r2, [r3, #0]
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	331b      	adds	r3, #27
 8009bd6:	011b      	lsls	r3, r3, #4
 8009bd8:	4413      	add	r3, r2
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	085b      	lsrs	r3, r3, #1
 8009bde:	f003 0201 	and.w	r2, r3, #1
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	681a      	ldr	r2, [r3, #0]
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	331b      	adds	r3, #27
 8009bee:	011b      	lsls	r3, r3, #4
 8009bf0:	4413      	add	r3, r2
 8009bf2:	3304      	adds	r3, #4
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f003 020f 	and.w	r2, r3, #15
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	681a      	ldr	r2, [r3, #0]
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	331b      	adds	r3, #27
 8009c06:	011b      	lsls	r3, r3, #4
 8009c08:	4413      	add	r3, r2
 8009c0a:	3304      	adds	r3, #4
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	0a1b      	lsrs	r3, r3, #8
 8009c10:	b2da      	uxtb	r2, r3
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	681a      	ldr	r2, [r3, #0]
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	331b      	adds	r3, #27
 8009c1e:	011b      	lsls	r3, r3, #4
 8009c20:	4413      	add	r3, r2
 8009c22:	3304      	adds	r3, #4
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	0c1b      	lsrs	r3, r3, #16
 8009c28:	b29a      	uxth	r2, r3
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681a      	ldr	r2, [r3, #0]
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	011b      	lsls	r3, r3, #4
 8009c36:	4413      	add	r3, r2
 8009c38:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	b2da      	uxtb	r2, r3
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681a      	ldr	r2, [r3, #0]
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	011b      	lsls	r3, r3, #4
 8009c4c:	4413      	add	r3, r2
 8009c4e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	0a1a      	lsrs	r2, r3, #8
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	3301      	adds	r3, #1
 8009c5a:	b2d2      	uxtb	r2, r2
 8009c5c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681a      	ldr	r2, [r3, #0]
 8009c62:	68bb      	ldr	r3, [r7, #8]
 8009c64:	011b      	lsls	r3, r3, #4
 8009c66:	4413      	add	r3, r2
 8009c68:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	0c1a      	lsrs	r2, r3, #16
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	3302      	adds	r3, #2
 8009c74:	b2d2      	uxtb	r2, r2
 8009c76:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681a      	ldr	r2, [r3, #0]
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	011b      	lsls	r3, r3, #4
 8009c80:	4413      	add	r3, r2
 8009c82:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	0e1a      	lsrs	r2, r3, #24
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	3303      	adds	r3, #3
 8009c8e:	b2d2      	uxtb	r2, r2
 8009c90:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681a      	ldr	r2, [r3, #0]
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	011b      	lsls	r3, r3, #4
 8009c9a:	4413      	add	r3, r2
 8009c9c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009ca0:	681a      	ldr	r2, [r3, #0]
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	3304      	adds	r3, #4
 8009ca6:	b2d2      	uxtb	r2, r2
 8009ca8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681a      	ldr	r2, [r3, #0]
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	011b      	lsls	r3, r3, #4
 8009cb2:	4413      	add	r3, r2
 8009cb4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	0a1a      	lsrs	r2, r3, #8
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	3305      	adds	r3, #5
 8009cc0:	b2d2      	uxtb	r2, r2
 8009cc2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681a      	ldr	r2, [r3, #0]
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	011b      	lsls	r3, r3, #4
 8009ccc:	4413      	add	r3, r2
 8009cce:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	0c1a      	lsrs	r2, r3, #16
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	3306      	adds	r3, #6
 8009cda:	b2d2      	uxtb	r2, r2
 8009cdc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	681a      	ldr	r2, [r3, #0]
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	011b      	lsls	r3, r3, #4
 8009ce6:	4413      	add	r3, r2
 8009ce8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	0e1a      	lsrs	r2, r3, #24
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	3307      	adds	r3, #7
 8009cf4:	b2d2      	uxtb	r2, r2
 8009cf6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d108      	bne.n	8009d10 <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	68da      	ldr	r2, [r3, #12]
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	f042 0220 	orr.w	r2, r2, #32
 8009d0c:	60da      	str	r2, [r3, #12]
 8009d0e:	e007      	b.n	8009d20 <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	691a      	ldr	r2, [r3, #16]
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f042 0220 	orr.w	r2, r2, #32
 8009d1e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8009d20:	2300      	movs	r3, #0
 8009d22:	e006      	b.n	8009d32 <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d28:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009d30:	2301      	movs	r3, #1
  }
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	371c      	adds	r7, #28
 8009d36:	46bd      	mov	sp, r7
 8009d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3c:	4770      	bx	lr

08009d3e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8009d3e:	b480      	push	{r7}
 8009d40:	b085      	sub	sp, #20
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	6078      	str	r0, [r7, #4]
 8009d46:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009d4e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8009d50:	7bfb      	ldrb	r3, [r7, #15]
 8009d52:	2b01      	cmp	r3, #1
 8009d54:	d002      	beq.n	8009d5c <HAL_CAN_ActivateNotification+0x1e>
 8009d56:	7bfb      	ldrb	r3, [r7, #15]
 8009d58:	2b02      	cmp	r3, #2
 8009d5a:	d109      	bne.n	8009d70 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	6959      	ldr	r1, [r3, #20]
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	683a      	ldr	r2, [r7, #0]
 8009d68:	430a      	orrs	r2, r1
 8009d6a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	e006      	b.n	8009d7e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d74:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009d7c:	2301      	movs	r3, #1
  }
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3714      	adds	r7, #20
 8009d82:	46bd      	mov	sp, r7
 8009d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d88:	4770      	bx	lr

08009d8a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8009d8a:	b580      	push	{r7, lr}
 8009d8c:	b08a      	sub	sp, #40	; 0x28
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8009d92:	2300      	movs	r3, #0
 8009d94:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	695b      	ldr	r3, [r3, #20]
 8009d9c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	685b      	ldr	r3, [r3, #4]
 8009da4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	689b      	ldr	r3, [r3, #8]
 8009dac:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	68db      	ldr	r3, [r3, #12]
 8009db4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	691b      	ldr	r3, [r3, #16]
 8009dbc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	699b      	ldr	r3, [r3, #24]
 8009dc4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8009dc6:	6a3b      	ldr	r3, [r7, #32]
 8009dc8:	f003 0301 	and.w	r3, r3, #1
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d07c      	beq.n	8009eca <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8009dd0:	69bb      	ldr	r3, [r7, #24]
 8009dd2:	f003 0301 	and.w	r3, r3, #1
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d023      	beq.n	8009e22 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	2201      	movs	r2, #1
 8009de0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8009de2:	69bb      	ldr	r3, [r7, #24]
 8009de4:	f003 0302 	and.w	r3, r3, #2
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d003      	beq.n	8009df4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f005 fd29 	bl	800f844 <HAL_CAN_TxMailbox0CompleteCallback>
 8009df2:	e016      	b.n	8009e22 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8009df4:	69bb      	ldr	r3, [r7, #24]
 8009df6:	f003 0304 	and.w	r3, r3, #4
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d004      	beq.n	8009e08 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8009dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e00:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009e04:	627b      	str	r3, [r7, #36]	; 0x24
 8009e06:	e00c      	b.n	8009e22 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8009e08:	69bb      	ldr	r3, [r7, #24]
 8009e0a:	f003 0308 	and.w	r3, r3, #8
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d004      	beq.n	8009e1c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8009e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009e18:	627b      	str	r3, [r7, #36]	; 0x24
 8009e1a:	e002      	b.n	8009e22 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8009e1c:	6878      	ldr	r0, [r7, #4]
 8009e1e:	f000 f965 	bl	800a0ec <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8009e22:	69bb      	ldr	r3, [r7, #24]
 8009e24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d024      	beq.n	8009e76 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009e34:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8009e36:	69bb      	ldr	r3, [r7, #24]
 8009e38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d003      	beq.n	8009e48 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f005 fd0f 	bl	800f864 <HAL_CAN_TxMailbox1CompleteCallback>
 8009e46:	e016      	b.n	8009e76 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8009e48:	69bb      	ldr	r3, [r7, #24]
 8009e4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d004      	beq.n	8009e5c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8009e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e54:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009e58:	627b      	str	r3, [r7, #36]	; 0x24
 8009e5a:	e00c      	b.n	8009e76 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8009e5c:	69bb      	ldr	r3, [r7, #24]
 8009e5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d004      	beq.n	8009e70 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8009e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8009e6e:	e002      	b.n	8009e76 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f000 f945 	bl	800a100 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8009e76:	69bb      	ldr	r3, [r7, #24]
 8009e78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d024      	beq.n	8009eca <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009e88:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8009e8a:	69bb      	ldr	r3, [r7, #24]
 8009e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d003      	beq.n	8009e9c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f005 fcf5 	bl	800f884 <HAL_CAN_TxMailbox2CompleteCallback>
 8009e9a:	e016      	b.n	8009eca <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8009e9c:	69bb      	ldr	r3, [r7, #24]
 8009e9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d004      	beq.n	8009eb0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8009ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009eac:	627b      	str	r3, [r7, #36]	; 0x24
 8009eae:	e00c      	b.n	8009eca <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8009eb0:	69bb      	ldr	r3, [r7, #24]
 8009eb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d004      	beq.n	8009ec4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8009eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ec0:	627b      	str	r3, [r7, #36]	; 0x24
 8009ec2:	e002      	b.n	8009eca <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f000 f925 	bl	800a114 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8009eca:	6a3b      	ldr	r3, [r7, #32]
 8009ecc:	f003 0308 	and.w	r3, r3, #8
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d00c      	beq.n	8009eee <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	f003 0310 	and.w	r3, r3, #16
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d007      	beq.n	8009eee <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8009ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009ee4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	2210      	movs	r2, #16
 8009eec:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8009eee:	6a3b      	ldr	r3, [r7, #32]
 8009ef0:	f003 0304 	and.w	r3, r3, #4
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d00b      	beq.n	8009f10 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	f003 0308 	and.w	r3, r3, #8
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d006      	beq.n	8009f10 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	2208      	movs	r2, #8
 8009f08:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f000 f90c 	bl	800a128 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8009f10:	6a3b      	ldr	r3, [r7, #32]
 8009f12:	f003 0302 	and.w	r3, r3, #2
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d009      	beq.n	8009f2e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	68db      	ldr	r3, [r3, #12]
 8009f20:	f003 0303 	and.w	r3, r3, #3
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d002      	beq.n	8009f2e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f005 fcbb 	bl	800f8a4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8009f2e:	6a3b      	ldr	r3, [r7, #32]
 8009f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d00c      	beq.n	8009f52 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	f003 0310 	and.w	r3, r3, #16
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d007      	beq.n	8009f52 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8009f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f44:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009f48:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	2210      	movs	r2, #16
 8009f50:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8009f52:	6a3b      	ldr	r3, [r7, #32]
 8009f54:	f003 0320 	and.w	r3, r3, #32
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d00b      	beq.n	8009f74 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	f003 0308 	and.w	r3, r3, #8
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d006      	beq.n	8009f74 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	2208      	movs	r2, #8
 8009f6c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f000 f8ee 	bl	800a150 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8009f74:	6a3b      	ldr	r3, [r7, #32]
 8009f76:	f003 0310 	and.w	r3, r3, #16
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d009      	beq.n	8009f92 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	691b      	ldr	r3, [r3, #16]
 8009f84:	f003 0303 	and.w	r3, r3, #3
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d002      	beq.n	8009f92 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f000 f8d5 	bl	800a13c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8009f92:	6a3b      	ldr	r3, [r7, #32]
 8009f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d00b      	beq.n	8009fb4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8009f9c:	69fb      	ldr	r3, [r7, #28]
 8009f9e:	f003 0310 	and.w	r3, r3, #16
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d006      	beq.n	8009fb4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	2210      	movs	r2, #16
 8009fac:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f000 f8d8 	bl	800a164 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8009fb4:	6a3b      	ldr	r3, [r7, #32]
 8009fb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d00b      	beq.n	8009fd6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8009fbe:	69fb      	ldr	r3, [r7, #28]
 8009fc0:	f003 0308 	and.w	r3, r3, #8
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d006      	beq.n	8009fd6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	2208      	movs	r2, #8
 8009fce:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f000 f8d1 	bl	800a178 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8009fd6:	6a3b      	ldr	r3, [r7, #32]
 8009fd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d075      	beq.n	800a0cc <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8009fe0:	69fb      	ldr	r3, [r7, #28]
 8009fe2:	f003 0304 	and.w	r3, r3, #4
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d06c      	beq.n	800a0c4 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8009fea:	6a3b      	ldr	r3, [r7, #32]
 8009fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d008      	beq.n	800a006 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d003      	beq.n	800a006 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8009ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a000:	f043 0301 	orr.w	r3, r3, #1
 800a004:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800a006:	6a3b      	ldr	r3, [r7, #32]
 800a008:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d008      	beq.n	800a022 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800a016:	2b00      	cmp	r3, #0
 800a018:	d003      	beq.n	800a022 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800a01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a01c:	f043 0302 	orr.w	r3, r3, #2
 800a020:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800a022:	6a3b      	ldr	r3, [r7, #32]
 800a024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d008      	beq.n	800a03e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800a032:	2b00      	cmp	r3, #0
 800a034:	d003      	beq.n	800a03e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800a036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a038:	f043 0304 	orr.w	r3, r3, #4
 800a03c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800a03e:	6a3b      	ldr	r3, [r7, #32]
 800a040:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a044:	2b00      	cmp	r3, #0
 800a046:	d03d      	beq.n	800a0c4 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d038      	beq.n	800a0c4 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a058:	2b30      	cmp	r3, #48	; 0x30
 800a05a:	d017      	beq.n	800a08c <HAL_CAN_IRQHandler+0x302>
 800a05c:	2b30      	cmp	r3, #48	; 0x30
 800a05e:	d804      	bhi.n	800a06a <HAL_CAN_IRQHandler+0x2e0>
 800a060:	2b10      	cmp	r3, #16
 800a062:	d009      	beq.n	800a078 <HAL_CAN_IRQHandler+0x2ee>
 800a064:	2b20      	cmp	r3, #32
 800a066:	d00c      	beq.n	800a082 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800a068:	e024      	b.n	800a0b4 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 800a06a:	2b50      	cmp	r3, #80	; 0x50
 800a06c:	d018      	beq.n	800a0a0 <HAL_CAN_IRQHandler+0x316>
 800a06e:	2b60      	cmp	r3, #96	; 0x60
 800a070:	d01b      	beq.n	800a0aa <HAL_CAN_IRQHandler+0x320>
 800a072:	2b40      	cmp	r3, #64	; 0x40
 800a074:	d00f      	beq.n	800a096 <HAL_CAN_IRQHandler+0x30c>
            break;
 800a076:	e01d      	b.n	800a0b4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 800a078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a07a:	f043 0308 	orr.w	r3, r3, #8
 800a07e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a080:	e018      	b.n	800a0b4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 800a082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a084:	f043 0310 	orr.w	r3, r3, #16
 800a088:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a08a:	e013      	b.n	800a0b4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 800a08c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a08e:	f043 0320 	orr.w	r3, r3, #32
 800a092:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a094:	e00e      	b.n	800a0b4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 800a096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a098:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a09c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a09e:	e009      	b.n	800a0b4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 800a0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0a6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a0a8:	e004      	b.n	800a0b4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 800a0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a0b0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a0b2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	699a      	ldr	r2, [r3, #24]
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a0c2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	2204      	movs	r2, #4
 800a0ca:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800a0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d008      	beq.n	800a0e4 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0d8:	431a      	orrs	r2, r3
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f000 f854 	bl	800a18c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800a0e4:	bf00      	nop
 800a0e6:	3728      	adds	r7, #40	; 0x28
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}

0800a0ec <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800a0ec:	b480      	push	{r7}
 800a0ee:	b083      	sub	sp, #12
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800a0f4:	bf00      	nop
 800a0f6:	370c      	adds	r7, #12
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fe:	4770      	bx	lr

0800a100 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800a100:	b480      	push	{r7}
 800a102:	b083      	sub	sp, #12
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800a108:	bf00      	nop
 800a10a:	370c      	adds	r7, #12
 800a10c:	46bd      	mov	sp, r7
 800a10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a112:	4770      	bx	lr

0800a114 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800a114:	b480      	push	{r7}
 800a116:	b083      	sub	sp, #12
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800a11c:	bf00      	nop
 800a11e:	370c      	adds	r7, #12
 800a120:	46bd      	mov	sp, r7
 800a122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a126:	4770      	bx	lr

0800a128 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800a128:	b480      	push	{r7}
 800a12a:	b083      	sub	sp, #12
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800a130:	bf00      	nop
 800a132:	370c      	adds	r7, #12
 800a134:	46bd      	mov	sp, r7
 800a136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13a:	4770      	bx	lr

0800a13c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b083      	sub	sp, #12
 800a140:	af00      	add	r7, sp, #0
 800a142:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800a144:	bf00      	nop
 800a146:	370c      	adds	r7, #12
 800a148:	46bd      	mov	sp, r7
 800a14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14e:	4770      	bx	lr

0800a150 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800a150:	b480      	push	{r7}
 800a152:	b083      	sub	sp, #12
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800a158:	bf00      	nop
 800a15a:	370c      	adds	r7, #12
 800a15c:	46bd      	mov	sp, r7
 800a15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a162:	4770      	bx	lr

0800a164 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800a164:	b480      	push	{r7}
 800a166:	b083      	sub	sp, #12
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800a16c:	bf00      	nop
 800a16e:	370c      	adds	r7, #12
 800a170:	46bd      	mov	sp, r7
 800a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a176:	4770      	bx	lr

0800a178 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800a178:	b480      	push	{r7}
 800a17a:	b083      	sub	sp, #12
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800a180:	bf00      	nop
 800a182:	370c      	adds	r7, #12
 800a184:	46bd      	mov	sp, r7
 800a186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18a:	4770      	bx	lr

0800a18c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800a18c:	b480      	push	{r7}
 800a18e:	b083      	sub	sp, #12
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800a194:	bf00      	nop
 800a196:	370c      	adds	r7, #12
 800a198:	46bd      	mov	sp, r7
 800a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19e:	4770      	bx	lr

0800a1a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b085      	sub	sp, #20
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	f003 0307 	and.w	r3, r3, #7
 800a1ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a1b0:	4b0c      	ldr	r3, [pc, #48]	; (800a1e4 <__NVIC_SetPriorityGrouping+0x44>)
 800a1b2:	68db      	ldr	r3, [r3, #12]
 800a1b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a1b6:	68ba      	ldr	r2, [r7, #8]
 800a1b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a1bc:	4013      	ands	r3, r2
 800a1be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a1c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a1cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a1d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a1d2:	4a04      	ldr	r2, [pc, #16]	; (800a1e4 <__NVIC_SetPriorityGrouping+0x44>)
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	60d3      	str	r3, [r2, #12]
}
 800a1d8:	bf00      	nop
 800a1da:	3714      	adds	r7, #20
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr
 800a1e4:	e000ed00 	.word	0xe000ed00

0800a1e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a1ec:	4b04      	ldr	r3, [pc, #16]	; (800a200 <__NVIC_GetPriorityGrouping+0x18>)
 800a1ee:	68db      	ldr	r3, [r3, #12]
 800a1f0:	0a1b      	lsrs	r3, r3, #8
 800a1f2:	f003 0307 	and.w	r3, r3, #7
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fe:	4770      	bx	lr
 800a200:	e000ed00 	.word	0xe000ed00

0800a204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a204:	b480      	push	{r7}
 800a206:	b083      	sub	sp, #12
 800a208:	af00      	add	r7, sp, #0
 800a20a:	4603      	mov	r3, r0
 800a20c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a20e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a212:	2b00      	cmp	r3, #0
 800a214:	db0b      	blt.n	800a22e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a216:	79fb      	ldrb	r3, [r7, #7]
 800a218:	f003 021f 	and.w	r2, r3, #31
 800a21c:	4907      	ldr	r1, [pc, #28]	; (800a23c <__NVIC_EnableIRQ+0x38>)
 800a21e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a222:	095b      	lsrs	r3, r3, #5
 800a224:	2001      	movs	r0, #1
 800a226:	fa00 f202 	lsl.w	r2, r0, r2
 800a22a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a22e:	bf00      	nop
 800a230:	370c      	adds	r7, #12
 800a232:	46bd      	mov	sp, r7
 800a234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a238:	4770      	bx	lr
 800a23a:	bf00      	nop
 800a23c:	e000e100 	.word	0xe000e100

0800a240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a240:	b480      	push	{r7}
 800a242:	b083      	sub	sp, #12
 800a244:	af00      	add	r7, sp, #0
 800a246:	4603      	mov	r3, r0
 800a248:	6039      	str	r1, [r7, #0]
 800a24a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a24c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a250:	2b00      	cmp	r3, #0
 800a252:	db0a      	blt.n	800a26a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	b2da      	uxtb	r2, r3
 800a258:	490c      	ldr	r1, [pc, #48]	; (800a28c <__NVIC_SetPriority+0x4c>)
 800a25a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a25e:	0112      	lsls	r2, r2, #4
 800a260:	b2d2      	uxtb	r2, r2
 800a262:	440b      	add	r3, r1
 800a264:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a268:	e00a      	b.n	800a280 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a26a:	683b      	ldr	r3, [r7, #0]
 800a26c:	b2da      	uxtb	r2, r3
 800a26e:	4908      	ldr	r1, [pc, #32]	; (800a290 <__NVIC_SetPriority+0x50>)
 800a270:	79fb      	ldrb	r3, [r7, #7]
 800a272:	f003 030f 	and.w	r3, r3, #15
 800a276:	3b04      	subs	r3, #4
 800a278:	0112      	lsls	r2, r2, #4
 800a27a:	b2d2      	uxtb	r2, r2
 800a27c:	440b      	add	r3, r1
 800a27e:	761a      	strb	r2, [r3, #24]
}
 800a280:	bf00      	nop
 800a282:	370c      	adds	r7, #12
 800a284:	46bd      	mov	sp, r7
 800a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28a:	4770      	bx	lr
 800a28c:	e000e100 	.word	0xe000e100
 800a290:	e000ed00 	.word	0xe000ed00

0800a294 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a294:	b480      	push	{r7}
 800a296:	b089      	sub	sp, #36	; 0x24
 800a298:	af00      	add	r7, sp, #0
 800a29a:	60f8      	str	r0, [r7, #12]
 800a29c:	60b9      	str	r1, [r7, #8]
 800a29e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	f003 0307 	and.w	r3, r3, #7
 800a2a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a2a8:	69fb      	ldr	r3, [r7, #28]
 800a2aa:	f1c3 0307 	rsb	r3, r3, #7
 800a2ae:	2b04      	cmp	r3, #4
 800a2b0:	bf28      	it	cs
 800a2b2:	2304      	movcs	r3, #4
 800a2b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a2b6:	69fb      	ldr	r3, [r7, #28]
 800a2b8:	3304      	adds	r3, #4
 800a2ba:	2b06      	cmp	r3, #6
 800a2bc:	d902      	bls.n	800a2c4 <NVIC_EncodePriority+0x30>
 800a2be:	69fb      	ldr	r3, [r7, #28]
 800a2c0:	3b03      	subs	r3, #3
 800a2c2:	e000      	b.n	800a2c6 <NVIC_EncodePriority+0x32>
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a2c8:	f04f 32ff 	mov.w	r2, #4294967295
 800a2cc:	69bb      	ldr	r3, [r7, #24]
 800a2ce:	fa02 f303 	lsl.w	r3, r2, r3
 800a2d2:	43da      	mvns	r2, r3
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	401a      	ands	r2, r3
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a2dc:	f04f 31ff 	mov.w	r1, #4294967295
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	fa01 f303 	lsl.w	r3, r1, r3
 800a2e6:	43d9      	mvns	r1, r3
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a2ec:	4313      	orrs	r3, r2
         );
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3724      	adds	r7, #36	; 0x24
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f8:	4770      	bx	lr
	...

0800a2fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b082      	sub	sp, #8
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	3b01      	subs	r3, #1
 800a308:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a30c:	d301      	bcc.n	800a312 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a30e:	2301      	movs	r3, #1
 800a310:	e00f      	b.n	800a332 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a312:	4a0a      	ldr	r2, [pc, #40]	; (800a33c <SysTick_Config+0x40>)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	3b01      	subs	r3, #1
 800a318:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a31a:	210f      	movs	r1, #15
 800a31c:	f04f 30ff 	mov.w	r0, #4294967295
 800a320:	f7ff ff8e 	bl	800a240 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a324:	4b05      	ldr	r3, [pc, #20]	; (800a33c <SysTick_Config+0x40>)
 800a326:	2200      	movs	r2, #0
 800a328:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a32a:	4b04      	ldr	r3, [pc, #16]	; (800a33c <SysTick_Config+0x40>)
 800a32c:	2207      	movs	r2, #7
 800a32e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a330:	2300      	movs	r3, #0
}
 800a332:	4618      	mov	r0, r3
 800a334:	3708      	adds	r7, #8
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}
 800a33a:	bf00      	nop
 800a33c:	e000e010 	.word	0xe000e010

0800a340 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b082      	sub	sp, #8
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	f7ff ff29 	bl	800a1a0 <__NVIC_SetPriorityGrouping>
}
 800a34e:	bf00      	nop
 800a350:	3708      	adds	r7, #8
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}

0800a356 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a356:	b580      	push	{r7, lr}
 800a358:	b086      	sub	sp, #24
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	4603      	mov	r3, r0
 800a35e:	60b9      	str	r1, [r7, #8]
 800a360:	607a      	str	r2, [r7, #4]
 800a362:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a364:	2300      	movs	r3, #0
 800a366:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a368:	f7ff ff3e 	bl	800a1e8 <__NVIC_GetPriorityGrouping>
 800a36c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a36e:	687a      	ldr	r2, [r7, #4]
 800a370:	68b9      	ldr	r1, [r7, #8]
 800a372:	6978      	ldr	r0, [r7, #20]
 800a374:	f7ff ff8e 	bl	800a294 <NVIC_EncodePriority>
 800a378:	4602      	mov	r2, r0
 800a37a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a37e:	4611      	mov	r1, r2
 800a380:	4618      	mov	r0, r3
 800a382:	f7ff ff5d 	bl	800a240 <__NVIC_SetPriority>
}
 800a386:	bf00      	nop
 800a388:	3718      	adds	r7, #24
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}

0800a38e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a38e:	b580      	push	{r7, lr}
 800a390:	b082      	sub	sp, #8
 800a392:	af00      	add	r7, sp, #0
 800a394:	4603      	mov	r3, r0
 800a396:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a39c:	4618      	mov	r0, r3
 800a39e:	f7ff ff31 	bl	800a204 <__NVIC_EnableIRQ>
}
 800a3a2:	bf00      	nop
 800a3a4:	3708      	adds	r7, #8
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}

0800a3aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a3aa:	b580      	push	{r7, lr}
 800a3ac:	b082      	sub	sp, #8
 800a3ae:	af00      	add	r7, sp, #0
 800a3b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a3b2:	6878      	ldr	r0, [r7, #4]
 800a3b4:	f7ff ffa2 	bl	800a2fc <SysTick_Config>
 800a3b8:	4603      	mov	r3, r0
}
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	3708      	adds	r7, #8
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	bd80      	pop	{r7, pc}
	...

0800a3c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b086      	sub	sp, #24
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a3d0:	f7fe fd50 	bl	8008e74 <HAL_GetTick>
 800a3d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d101      	bne.n	800a3e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a3dc:	2301      	movs	r3, #1
 800a3de:	e099      	b.n	800a514 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2202      	movs	r2, #2
 800a3ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	681a      	ldr	r2, [r3, #0]
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f022 0201 	bic.w	r2, r2, #1
 800a3fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a400:	e00f      	b.n	800a422 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a402:	f7fe fd37 	bl	8008e74 <HAL_GetTick>
 800a406:	4602      	mov	r2, r0
 800a408:	693b      	ldr	r3, [r7, #16]
 800a40a:	1ad3      	subs	r3, r2, r3
 800a40c:	2b05      	cmp	r3, #5
 800a40e:	d908      	bls.n	800a422 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	2220      	movs	r2, #32
 800a414:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2203      	movs	r2, #3
 800a41a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a41e:	2303      	movs	r3, #3
 800a420:	e078      	b.n	800a514 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	f003 0301 	and.w	r3, r3, #1
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d1e8      	bne.n	800a402 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a438:	697a      	ldr	r2, [r7, #20]
 800a43a:	4b38      	ldr	r3, [pc, #224]	; (800a51c <HAL_DMA_Init+0x158>)
 800a43c:	4013      	ands	r3, r2
 800a43e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	685a      	ldr	r2, [r3, #4]
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	689b      	ldr	r3, [r3, #8]
 800a448:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a44e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	691b      	ldr	r3, [r3, #16]
 800a454:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a45a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	699b      	ldr	r3, [r3, #24]
 800a460:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a466:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6a1b      	ldr	r3, [r3, #32]
 800a46c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a46e:	697a      	ldr	r2, [r7, #20]
 800a470:	4313      	orrs	r3, r2
 800a472:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a478:	2b04      	cmp	r3, #4
 800a47a:	d107      	bne.n	800a48c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a484:	4313      	orrs	r3, r2
 800a486:	697a      	ldr	r2, [r7, #20]
 800a488:	4313      	orrs	r3, r2
 800a48a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	697a      	ldr	r2, [r7, #20]
 800a492:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	695b      	ldr	r3, [r3, #20]
 800a49a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a49c:	697b      	ldr	r3, [r7, #20]
 800a49e:	f023 0307 	bic.w	r3, r3, #7
 800a4a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4a8:	697a      	ldr	r2, [r7, #20]
 800a4aa:	4313      	orrs	r3, r2
 800a4ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b2:	2b04      	cmp	r3, #4
 800a4b4:	d117      	bne.n	800a4e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4ba:	697a      	ldr	r2, [r7, #20]
 800a4bc:	4313      	orrs	r3, r2
 800a4be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d00e      	beq.n	800a4e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f000 fa99 	bl	800aa00 <DMA_CheckFifoParam>
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d008      	beq.n	800a4e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2240      	movs	r2, #64	; 0x40
 800a4d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2201      	movs	r2, #1
 800a4de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	e016      	b.n	800a514 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	697a      	ldr	r2, [r7, #20]
 800a4ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f000 fa50 	bl	800a994 <DMA_CalcBaseAndBitshift>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4fc:	223f      	movs	r2, #63	; 0x3f
 800a4fe:	409a      	lsls	r2, r3
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2200      	movs	r2, #0
 800a508:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2201      	movs	r2, #1
 800a50e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a512:	2300      	movs	r3, #0
}
 800a514:	4618      	mov	r0, r3
 800a516:	3718      	adds	r7, #24
 800a518:	46bd      	mov	sp, r7
 800a51a:	bd80      	pop	{r7, pc}
 800a51c:	f010803f 	.word	0xf010803f

0800a520 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b086      	sub	sp, #24
 800a524:	af00      	add	r7, sp, #0
 800a526:	60f8      	str	r0, [r7, #12]
 800a528:	60b9      	str	r1, [r7, #8]
 800a52a:	607a      	str	r2, [r7, #4]
 800a52c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a52e:	2300      	movs	r3, #0
 800a530:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a536:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a53e:	2b01      	cmp	r3, #1
 800a540:	d101      	bne.n	800a546 <HAL_DMA_Start_IT+0x26>
 800a542:	2302      	movs	r3, #2
 800a544:	e048      	b.n	800a5d8 <HAL_DMA_Start_IT+0xb8>
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	2201      	movs	r2, #1
 800a54a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a554:	b2db      	uxtb	r3, r3
 800a556:	2b01      	cmp	r3, #1
 800a558:	d137      	bne.n	800a5ca <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	2202      	movs	r2, #2
 800a55e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	2200      	movs	r2, #0
 800a566:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	687a      	ldr	r2, [r7, #4]
 800a56c:	68b9      	ldr	r1, [r7, #8]
 800a56e:	68f8      	ldr	r0, [r7, #12]
 800a570:	f000 f9e2 	bl	800a938 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a578:	223f      	movs	r2, #63	; 0x3f
 800a57a:	409a      	lsls	r2, r3
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	681a      	ldr	r2, [r3, #0]
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f042 0216 	orr.w	r2, r2, #22
 800a58e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	695a      	ldr	r2, [r3, #20]
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a59e:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d007      	beq.n	800a5b8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	681a      	ldr	r2, [r3, #0]
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f042 0208 	orr.w	r2, r2, #8
 800a5b6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	681a      	ldr	r2, [r3, #0]
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f042 0201 	orr.w	r2, r2, #1
 800a5c6:	601a      	str	r2, [r3, #0]
 800a5c8:	e005      	b.n	800a5d6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a5d2:	2302      	movs	r3, #2
 800a5d4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a5d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5d8:	4618      	mov	r0, r3
 800a5da:	3718      	adds	r7, #24
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}

0800a5e0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a5e0:	b480      	push	{r7}
 800a5e2:	b083      	sub	sp, #12
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a5ee:	b2db      	uxtb	r3, r3
 800a5f0:	2b02      	cmp	r3, #2
 800a5f2:	d004      	beq.n	800a5fe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2280      	movs	r2, #128	; 0x80
 800a5f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	e00c      	b.n	800a618 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2205      	movs	r2, #5
 800a602:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	681a      	ldr	r2, [r3, #0]
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	f022 0201 	bic.w	r2, r2, #1
 800a614:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a616:	2300      	movs	r3, #0
}
 800a618:	4618      	mov	r0, r3
 800a61a:	370c      	adds	r7, #12
 800a61c:	46bd      	mov	sp, r7
 800a61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a622:	4770      	bx	lr

0800a624 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b086      	sub	sp, #24
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a62c:	2300      	movs	r3, #0
 800a62e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a630:	4b92      	ldr	r3, [pc, #584]	; (800a87c <HAL_DMA_IRQHandler+0x258>)
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	4a92      	ldr	r2, [pc, #584]	; (800a880 <HAL_DMA_IRQHandler+0x25c>)
 800a636:	fba2 2303 	umull	r2, r3, r2, r3
 800a63a:	0a9b      	lsrs	r3, r3, #10
 800a63c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a642:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a64e:	2208      	movs	r2, #8
 800a650:	409a      	lsls	r2, r3
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	4013      	ands	r3, r2
 800a656:	2b00      	cmp	r3, #0
 800a658:	d01a      	beq.n	800a690 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f003 0304 	and.w	r3, r3, #4
 800a664:	2b00      	cmp	r3, #0
 800a666:	d013      	beq.n	800a690 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	681a      	ldr	r2, [r3, #0]
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f022 0204 	bic.w	r2, r2, #4
 800a676:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a67c:	2208      	movs	r2, #8
 800a67e:	409a      	lsls	r2, r3
 800a680:	693b      	ldr	r3, [r7, #16]
 800a682:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a688:	f043 0201 	orr.w	r2, r3, #1
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a694:	2201      	movs	r2, #1
 800a696:	409a      	lsls	r2, r3
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	4013      	ands	r3, r2
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d012      	beq.n	800a6c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	695b      	ldr	r3, [r3, #20]
 800a6a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d00b      	beq.n	800a6c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	409a      	lsls	r2, r3
 800a6b6:	693b      	ldr	r3, [r7, #16]
 800a6b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6be:	f043 0202 	orr.w	r2, r3, #2
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6ca:	2204      	movs	r2, #4
 800a6cc:	409a      	lsls	r2, r3
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	4013      	ands	r3, r2
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d012      	beq.n	800a6fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f003 0302 	and.w	r3, r3, #2
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d00b      	beq.n	800a6fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6e8:	2204      	movs	r2, #4
 800a6ea:	409a      	lsls	r2, r3
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6f4:	f043 0204 	orr.w	r2, r3, #4
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a700:	2210      	movs	r2, #16
 800a702:	409a      	lsls	r2, r3
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	4013      	ands	r3, r2
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d043      	beq.n	800a794 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f003 0308 	and.w	r3, r3, #8
 800a716:	2b00      	cmp	r3, #0
 800a718:	d03c      	beq.n	800a794 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a71e:	2210      	movs	r2, #16
 800a720:	409a      	lsls	r2, r3
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a730:	2b00      	cmp	r3, #0
 800a732:	d018      	beq.n	800a766 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d108      	bne.n	800a754 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a746:	2b00      	cmp	r3, #0
 800a748:	d024      	beq.n	800a794 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	4798      	blx	r3
 800a752:	e01f      	b.n	800a794 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d01b      	beq.n	800a794 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	4798      	blx	r3
 800a764:	e016      	b.n	800a794 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a770:	2b00      	cmp	r3, #0
 800a772:	d107      	bne.n	800a784 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	681a      	ldr	r2, [r3, #0]
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f022 0208 	bic.w	r2, r2, #8
 800a782:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d003      	beq.n	800a794 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a790:	6878      	ldr	r0, [r7, #4]
 800a792:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a798:	2220      	movs	r2, #32
 800a79a:	409a      	lsls	r2, r3
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	4013      	ands	r3, r2
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	f000 808e 	beq.w	800a8c2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f003 0310 	and.w	r3, r3, #16
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	f000 8086 	beq.w	800a8c2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7ba:	2220      	movs	r2, #32
 800a7bc:	409a      	lsls	r2, r3
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a7c8:	b2db      	uxtb	r3, r3
 800a7ca:	2b05      	cmp	r3, #5
 800a7cc:	d136      	bne.n	800a83c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	681a      	ldr	r2, [r3, #0]
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f022 0216 	bic.w	r2, r2, #22
 800a7dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	695a      	ldr	r2, [r3, #20]
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a7ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d103      	bne.n	800a7fe <HAL_DMA_IRQHandler+0x1da>
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d007      	beq.n	800a80e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	681a      	ldr	r2, [r3, #0]
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f022 0208 	bic.w	r2, r2, #8
 800a80c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a812:	223f      	movs	r2, #63	; 0x3f
 800a814:	409a      	lsls	r2, r3
 800a816:	693b      	ldr	r3, [r7, #16]
 800a818:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2200      	movs	r2, #0
 800a81e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2201      	movs	r2, #1
 800a826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d07d      	beq.n	800a92e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	4798      	blx	r3
        }
        return;
 800a83a:	e078      	b.n	800a92e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a846:	2b00      	cmp	r3, #0
 800a848:	d01c      	beq.n	800a884 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a854:	2b00      	cmp	r3, #0
 800a856:	d108      	bne.n	800a86a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d030      	beq.n	800a8c2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	4798      	blx	r3
 800a868:	e02b      	b.n	800a8c2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d027      	beq.n	800a8c2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	4798      	blx	r3
 800a87a:	e022      	b.n	800a8c2 <HAL_DMA_IRQHandler+0x29e>
 800a87c:	20000018 	.word	0x20000018
 800a880:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d10f      	bne.n	800a8b2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	681a      	ldr	r2, [r3, #0]
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	f022 0210 	bic.w	r2, r2, #16
 800a8a0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2201      	movs	r2, #1
 800a8ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d003      	beq.n	800a8c2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d032      	beq.n	800a930 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8ce:	f003 0301 	and.w	r3, r3, #1
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d022      	beq.n	800a91c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2205      	movs	r2, #5
 800a8da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	681a      	ldr	r2, [r3, #0]
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f022 0201 	bic.w	r2, r2, #1
 800a8ec:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a8ee:	68bb      	ldr	r3, [r7, #8]
 800a8f0:	3301      	adds	r3, #1
 800a8f2:	60bb      	str	r3, [r7, #8]
 800a8f4:	697a      	ldr	r2, [r7, #20]
 800a8f6:	429a      	cmp	r2, r3
 800a8f8:	d307      	bcc.n	800a90a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f003 0301 	and.w	r3, r3, #1
 800a904:	2b00      	cmp	r3, #0
 800a906:	d1f2      	bne.n	800a8ee <HAL_DMA_IRQHandler+0x2ca>
 800a908:	e000      	b.n	800a90c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800a90a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2200      	movs	r2, #0
 800a910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2201      	movs	r2, #1
 800a918:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a920:	2b00      	cmp	r3, #0
 800a922:	d005      	beq.n	800a930 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	4798      	blx	r3
 800a92c:	e000      	b.n	800a930 <HAL_DMA_IRQHandler+0x30c>
        return;
 800a92e:	bf00      	nop
    }
  }
}
 800a930:	3718      	adds	r7, #24
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}
 800a936:	bf00      	nop

0800a938 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a938:	b480      	push	{r7}
 800a93a:	b085      	sub	sp, #20
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	60f8      	str	r0, [r7, #12]
 800a940:	60b9      	str	r1, [r7, #8]
 800a942:	607a      	str	r2, [r7, #4]
 800a944:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	681a      	ldr	r2, [r3, #0]
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a954:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	683a      	ldr	r2, [r7, #0]
 800a95c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	689b      	ldr	r3, [r3, #8]
 800a962:	2b40      	cmp	r3, #64	; 0x40
 800a964:	d108      	bne.n	800a978 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	687a      	ldr	r2, [r7, #4]
 800a96c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	68ba      	ldr	r2, [r7, #8]
 800a974:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a976:	e007      	b.n	800a988 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	68ba      	ldr	r2, [r7, #8]
 800a97e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	687a      	ldr	r2, [r7, #4]
 800a986:	60da      	str	r2, [r3, #12]
}
 800a988:	bf00      	nop
 800a98a:	3714      	adds	r7, #20
 800a98c:	46bd      	mov	sp, r7
 800a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a992:	4770      	bx	lr

0800a994 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a994:	b480      	push	{r7}
 800a996:	b085      	sub	sp, #20
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	b2db      	uxtb	r3, r3
 800a9a2:	3b10      	subs	r3, #16
 800a9a4:	4a14      	ldr	r2, [pc, #80]	; (800a9f8 <DMA_CalcBaseAndBitshift+0x64>)
 800a9a6:	fba2 2303 	umull	r2, r3, r2, r3
 800a9aa:	091b      	lsrs	r3, r3, #4
 800a9ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a9ae:	4a13      	ldr	r2, [pc, #76]	; (800a9fc <DMA_CalcBaseAndBitshift+0x68>)
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	4413      	add	r3, r2
 800a9b4:	781b      	ldrb	r3, [r3, #0]
 800a9b6:	461a      	mov	r2, r3
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	2b03      	cmp	r3, #3
 800a9c0:	d909      	bls.n	800a9d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a9ca:	f023 0303 	bic.w	r3, r3, #3
 800a9ce:	1d1a      	adds	r2, r3, #4
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	659a      	str	r2, [r3, #88]	; 0x58
 800a9d4:	e007      	b.n	800a9e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a9de:	f023 0303 	bic.w	r3, r3, #3
 800a9e2:	687a      	ldr	r2, [r7, #4]
 800a9e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	3714      	adds	r7, #20
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f4:	4770      	bx	lr
 800a9f6:	bf00      	nop
 800a9f8:	aaaaaaab 	.word	0xaaaaaaab
 800a9fc:	08012c18 	.word	0x08012c18

0800aa00 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800aa00:	b480      	push	{r7}
 800aa02:	b085      	sub	sp, #20
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa10:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	699b      	ldr	r3, [r3, #24]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d11f      	bne.n	800aa5a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800aa1a:	68bb      	ldr	r3, [r7, #8]
 800aa1c:	2b03      	cmp	r3, #3
 800aa1e:	d855      	bhi.n	800aacc <DMA_CheckFifoParam+0xcc>
 800aa20:	a201      	add	r2, pc, #4	; (adr r2, 800aa28 <DMA_CheckFifoParam+0x28>)
 800aa22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa26:	bf00      	nop
 800aa28:	0800aa39 	.word	0x0800aa39
 800aa2c:	0800aa4b 	.word	0x0800aa4b
 800aa30:	0800aa39 	.word	0x0800aa39
 800aa34:	0800aacd 	.word	0x0800aacd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d045      	beq.n	800aad0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800aa44:	2301      	movs	r3, #1
 800aa46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aa48:	e042      	b.n	800aad0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa4e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800aa52:	d13f      	bne.n	800aad4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800aa54:	2301      	movs	r3, #1
 800aa56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aa58:	e03c      	b.n	800aad4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	699b      	ldr	r3, [r3, #24]
 800aa5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa62:	d121      	bne.n	800aaa8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	2b03      	cmp	r3, #3
 800aa68:	d836      	bhi.n	800aad8 <DMA_CheckFifoParam+0xd8>
 800aa6a:	a201      	add	r2, pc, #4	; (adr r2, 800aa70 <DMA_CheckFifoParam+0x70>)
 800aa6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa70:	0800aa81 	.word	0x0800aa81
 800aa74:	0800aa87 	.word	0x0800aa87
 800aa78:	0800aa81 	.word	0x0800aa81
 800aa7c:	0800aa99 	.word	0x0800aa99
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800aa80:	2301      	movs	r3, #1
 800aa82:	73fb      	strb	r3, [r7, #15]
      break;
 800aa84:	e02f      	b.n	800aae6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d024      	beq.n	800aadc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800aa92:	2301      	movs	r3, #1
 800aa94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aa96:	e021      	b.n	800aadc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa9c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800aaa0:	d11e      	bne.n	800aae0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800aaa6:	e01b      	b.n	800aae0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	2b02      	cmp	r3, #2
 800aaac:	d902      	bls.n	800aab4 <DMA_CheckFifoParam+0xb4>
 800aaae:	2b03      	cmp	r3, #3
 800aab0:	d003      	beq.n	800aaba <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800aab2:	e018      	b.n	800aae6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800aab4:	2301      	movs	r3, #1
 800aab6:	73fb      	strb	r3, [r7, #15]
      break;
 800aab8:	e015      	b.n	800aae6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aabe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d00e      	beq.n	800aae4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800aac6:	2301      	movs	r3, #1
 800aac8:	73fb      	strb	r3, [r7, #15]
      break;
 800aaca:	e00b      	b.n	800aae4 <DMA_CheckFifoParam+0xe4>
      break;
 800aacc:	bf00      	nop
 800aace:	e00a      	b.n	800aae6 <DMA_CheckFifoParam+0xe6>
      break;
 800aad0:	bf00      	nop
 800aad2:	e008      	b.n	800aae6 <DMA_CheckFifoParam+0xe6>
      break;
 800aad4:	bf00      	nop
 800aad6:	e006      	b.n	800aae6 <DMA_CheckFifoParam+0xe6>
      break;
 800aad8:	bf00      	nop
 800aada:	e004      	b.n	800aae6 <DMA_CheckFifoParam+0xe6>
      break;
 800aadc:	bf00      	nop
 800aade:	e002      	b.n	800aae6 <DMA_CheckFifoParam+0xe6>
      break;   
 800aae0:	bf00      	nop
 800aae2:	e000      	b.n	800aae6 <DMA_CheckFifoParam+0xe6>
      break;
 800aae4:	bf00      	nop
    }
  } 
  
  return status; 
 800aae6:	7bfb      	ldrb	r3, [r7, #15]
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	3714      	adds	r7, #20
 800aaec:	46bd      	mov	sp, r7
 800aaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf2:	4770      	bx	lr

0800aaf4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b086      	sub	sp, #24
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	60f8      	str	r0, [r7, #12]
 800aafc:	60b9      	str	r1, [r7, #8]
 800aafe:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800ab02:	2301      	movs	r3, #1
 800ab04:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800ab06:	4b23      	ldr	r3, [pc, #140]	; (800ab94 <HAL_FLASH_Program+0xa0>)
 800ab08:	7e1b      	ldrb	r3, [r3, #24]
 800ab0a:	2b01      	cmp	r3, #1
 800ab0c:	d101      	bne.n	800ab12 <HAL_FLASH_Program+0x1e>
 800ab0e:	2302      	movs	r3, #2
 800ab10:	e03b      	b.n	800ab8a <HAL_FLASH_Program+0x96>
 800ab12:	4b20      	ldr	r3, [pc, #128]	; (800ab94 <HAL_FLASH_Program+0xa0>)
 800ab14:	2201      	movs	r2, #1
 800ab16:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ab18:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ab1c:	f000 f870 	bl	800ac00 <FLASH_WaitForLastOperation>
 800ab20:	4603      	mov	r3, r0
 800ab22:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800ab24:	7dfb      	ldrb	r3, [r7, #23]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d12b      	bne.n	800ab82 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d105      	bne.n	800ab3c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800ab30:	783b      	ldrb	r3, [r7, #0]
 800ab32:	4619      	mov	r1, r3
 800ab34:	68b8      	ldr	r0, [r7, #8]
 800ab36:	f000 f917 	bl	800ad68 <FLASH_Program_Byte>
 800ab3a:	e016      	b.n	800ab6a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	2b01      	cmp	r3, #1
 800ab40:	d105      	bne.n	800ab4e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800ab42:	883b      	ldrh	r3, [r7, #0]
 800ab44:	4619      	mov	r1, r3
 800ab46:	68b8      	ldr	r0, [r7, #8]
 800ab48:	f000 f8ea 	bl	800ad20 <FLASH_Program_HalfWord>
 800ab4c:	e00d      	b.n	800ab6a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	2b02      	cmp	r3, #2
 800ab52:	d105      	bne.n	800ab60 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	4619      	mov	r1, r3
 800ab58:	68b8      	ldr	r0, [r7, #8]
 800ab5a:	f000 f8bf 	bl	800acdc <FLASH_Program_Word>
 800ab5e:	e004      	b.n	800ab6a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800ab60:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab64:	68b8      	ldr	r0, [r7, #8]
 800ab66:	f000 f88b 	bl	800ac80 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ab6a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ab6e:	f000 f847 	bl	800ac00 <FLASH_WaitForLastOperation>
 800ab72:	4603      	mov	r3, r0
 800ab74:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800ab76:	4b08      	ldr	r3, [pc, #32]	; (800ab98 <HAL_FLASH_Program+0xa4>)
 800ab78:	691b      	ldr	r3, [r3, #16]
 800ab7a:	4a07      	ldr	r2, [pc, #28]	; (800ab98 <HAL_FLASH_Program+0xa4>)
 800ab7c:	f023 0301 	bic.w	r3, r3, #1
 800ab80:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800ab82:	4b04      	ldr	r3, [pc, #16]	; (800ab94 <HAL_FLASH_Program+0xa0>)
 800ab84:	2200      	movs	r2, #0
 800ab86:	761a      	strb	r2, [r3, #24]
  
  return status;
 800ab88:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	3718      	adds	r7, #24
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}
 800ab92:	bf00      	nop
 800ab94:	20004158 	.word	0x20004158
 800ab98:	40023c00 	.word	0x40023c00

0800ab9c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b083      	sub	sp, #12
 800aba0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800aba2:	2300      	movs	r3, #0
 800aba4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800aba6:	4b0b      	ldr	r3, [pc, #44]	; (800abd4 <HAL_FLASH_Unlock+0x38>)
 800aba8:	691b      	ldr	r3, [r3, #16]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	da0b      	bge.n	800abc6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800abae:	4b09      	ldr	r3, [pc, #36]	; (800abd4 <HAL_FLASH_Unlock+0x38>)
 800abb0:	4a09      	ldr	r2, [pc, #36]	; (800abd8 <HAL_FLASH_Unlock+0x3c>)
 800abb2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800abb4:	4b07      	ldr	r3, [pc, #28]	; (800abd4 <HAL_FLASH_Unlock+0x38>)
 800abb6:	4a09      	ldr	r2, [pc, #36]	; (800abdc <HAL_FLASH_Unlock+0x40>)
 800abb8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800abba:	4b06      	ldr	r3, [pc, #24]	; (800abd4 <HAL_FLASH_Unlock+0x38>)
 800abbc:	691b      	ldr	r3, [r3, #16]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	da01      	bge.n	800abc6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800abc2:	2301      	movs	r3, #1
 800abc4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800abc6:	79fb      	ldrb	r3, [r7, #7]
}
 800abc8:	4618      	mov	r0, r3
 800abca:	370c      	adds	r7, #12
 800abcc:	46bd      	mov	sp, r7
 800abce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd2:	4770      	bx	lr
 800abd4:	40023c00 	.word	0x40023c00
 800abd8:	45670123 	.word	0x45670123
 800abdc:	cdef89ab 	.word	0xcdef89ab

0800abe0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800abe0:	b480      	push	{r7}
 800abe2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800abe4:	4b05      	ldr	r3, [pc, #20]	; (800abfc <HAL_FLASH_Lock+0x1c>)
 800abe6:	691b      	ldr	r3, [r3, #16]
 800abe8:	4a04      	ldr	r2, [pc, #16]	; (800abfc <HAL_FLASH_Lock+0x1c>)
 800abea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800abee:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800abf0:	2300      	movs	r3, #0
}
 800abf2:	4618      	mov	r0, r3
 800abf4:	46bd      	mov	sp, r7
 800abf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfa:	4770      	bx	lr
 800abfc:	40023c00 	.word	0x40023c00

0800ac00 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b084      	sub	sp, #16
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800ac0c:	4b1a      	ldr	r3, [pc, #104]	; (800ac78 <FLASH_WaitForLastOperation+0x78>)
 800ac0e:	2200      	movs	r2, #0
 800ac10:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800ac12:	f7fe f92f 	bl	8008e74 <HAL_GetTick>
 800ac16:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800ac18:	e010      	b.n	800ac3c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac20:	d00c      	beq.n	800ac3c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d007      	beq.n	800ac38 <FLASH_WaitForLastOperation+0x38>
 800ac28:	f7fe f924 	bl	8008e74 <HAL_GetTick>
 800ac2c:	4602      	mov	r2, r0
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	1ad3      	subs	r3, r2, r3
 800ac32:	687a      	ldr	r2, [r7, #4]
 800ac34:	429a      	cmp	r2, r3
 800ac36:	d201      	bcs.n	800ac3c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800ac38:	2303      	movs	r3, #3
 800ac3a:	e019      	b.n	800ac70 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800ac3c:	4b0f      	ldr	r3, [pc, #60]	; (800ac7c <FLASH_WaitForLastOperation+0x7c>)
 800ac3e:	68db      	ldr	r3, [r3, #12]
 800ac40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d1e8      	bne.n	800ac1a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800ac48:	4b0c      	ldr	r3, [pc, #48]	; (800ac7c <FLASH_WaitForLastOperation+0x7c>)
 800ac4a:	68db      	ldr	r3, [r3, #12]
 800ac4c:	f003 0301 	and.w	r3, r3, #1
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d002      	beq.n	800ac5a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800ac54:	4b09      	ldr	r3, [pc, #36]	; (800ac7c <FLASH_WaitForLastOperation+0x7c>)
 800ac56:	2201      	movs	r2, #1
 800ac58:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800ac5a:	4b08      	ldr	r3, [pc, #32]	; (800ac7c <FLASH_WaitForLastOperation+0x7c>)
 800ac5c:	68db      	ldr	r3, [r3, #12]
 800ac5e:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d003      	beq.n	800ac6e <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800ac66:	f000 f8a1 	bl	800adac <FLASH_SetErrorCode>
    return HAL_ERROR;
 800ac6a:	2301      	movs	r3, #1
 800ac6c:	e000      	b.n	800ac70 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800ac6e:	2300      	movs	r3, #0
  
}  
 800ac70:	4618      	mov	r0, r3
 800ac72:	3710      	adds	r7, #16
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}
 800ac78:	20004158 	.word	0x20004158
 800ac7c:	40023c00 	.word	0x40023c00

0800ac80 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800ac80:	b490      	push	{r4, r7}
 800ac82:	b084      	sub	sp, #16
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	60f8      	str	r0, [r7, #12]
 800ac88:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800ac8c:	4b12      	ldr	r3, [pc, #72]	; (800acd8 <FLASH_Program_DoubleWord+0x58>)
 800ac8e:	691b      	ldr	r3, [r3, #16]
 800ac90:	4a11      	ldr	r2, [pc, #68]	; (800acd8 <FLASH_Program_DoubleWord+0x58>)
 800ac92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac96:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800ac98:	4b0f      	ldr	r3, [pc, #60]	; (800acd8 <FLASH_Program_DoubleWord+0x58>)
 800ac9a:	691b      	ldr	r3, [r3, #16]
 800ac9c:	4a0e      	ldr	r2, [pc, #56]	; (800acd8 <FLASH_Program_DoubleWord+0x58>)
 800ac9e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800aca2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800aca4:	4b0c      	ldr	r3, [pc, #48]	; (800acd8 <FLASH_Program_DoubleWord+0x58>)
 800aca6:	691b      	ldr	r3, [r3, #16]
 800aca8:	4a0b      	ldr	r2, [pc, #44]	; (800acd8 <FLASH_Program_DoubleWord+0x58>)
 800acaa:	f043 0301 	orr.w	r3, r3, #1
 800acae:	6113      	str	r3, [r2, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	683a      	ldr	r2, [r7, #0]
 800acb4:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800acb6:	e9d7 1200 	ldrd	r1, r2, [r7]
 800acba:	f04f 0300 	mov.w	r3, #0
 800acbe:	f04f 0400 	mov.w	r4, #0
 800acc2:	0013      	movs	r3, r2
 800acc4:	2400      	movs	r4, #0
 800acc6:	68fa      	ldr	r2, [r7, #12]
 800acc8:	3204      	adds	r2, #4
 800acca:	6013      	str	r3, [r2, #0]
}
 800accc:	bf00      	nop
 800acce:	3710      	adds	r7, #16
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bc90      	pop	{r4, r7}
 800acd4:	4770      	bx	lr
 800acd6:	bf00      	nop
 800acd8:	40023c00 	.word	0x40023c00

0800acdc <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800acdc:	b480      	push	{r7}
 800acde:	b083      	sub	sp, #12
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
 800ace4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800ace6:	4b0d      	ldr	r3, [pc, #52]	; (800ad1c <FLASH_Program_Word+0x40>)
 800ace8:	691b      	ldr	r3, [r3, #16]
 800acea:	4a0c      	ldr	r2, [pc, #48]	; (800ad1c <FLASH_Program_Word+0x40>)
 800acec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800acf0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800acf2:	4b0a      	ldr	r3, [pc, #40]	; (800ad1c <FLASH_Program_Word+0x40>)
 800acf4:	691b      	ldr	r3, [r3, #16]
 800acf6:	4a09      	ldr	r2, [pc, #36]	; (800ad1c <FLASH_Program_Word+0x40>)
 800acf8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800acfc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800acfe:	4b07      	ldr	r3, [pc, #28]	; (800ad1c <FLASH_Program_Word+0x40>)
 800ad00:	691b      	ldr	r3, [r3, #16]
 800ad02:	4a06      	ldr	r2, [pc, #24]	; (800ad1c <FLASH_Program_Word+0x40>)
 800ad04:	f043 0301 	orr.w	r3, r3, #1
 800ad08:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	683a      	ldr	r2, [r7, #0]
 800ad0e:	601a      	str	r2, [r3, #0]
}
 800ad10:	bf00      	nop
 800ad12:	370c      	adds	r7, #12
 800ad14:	46bd      	mov	sp, r7
 800ad16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1a:	4770      	bx	lr
 800ad1c:	40023c00 	.word	0x40023c00

0800ad20 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800ad20:	b480      	push	{r7}
 800ad22:	b083      	sub	sp, #12
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
 800ad28:	460b      	mov	r3, r1
 800ad2a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800ad2c:	4b0d      	ldr	r3, [pc, #52]	; (800ad64 <FLASH_Program_HalfWord+0x44>)
 800ad2e:	691b      	ldr	r3, [r3, #16]
 800ad30:	4a0c      	ldr	r2, [pc, #48]	; (800ad64 <FLASH_Program_HalfWord+0x44>)
 800ad32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad36:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800ad38:	4b0a      	ldr	r3, [pc, #40]	; (800ad64 <FLASH_Program_HalfWord+0x44>)
 800ad3a:	691b      	ldr	r3, [r3, #16]
 800ad3c:	4a09      	ldr	r2, [pc, #36]	; (800ad64 <FLASH_Program_HalfWord+0x44>)
 800ad3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ad42:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800ad44:	4b07      	ldr	r3, [pc, #28]	; (800ad64 <FLASH_Program_HalfWord+0x44>)
 800ad46:	691b      	ldr	r3, [r3, #16]
 800ad48:	4a06      	ldr	r2, [pc, #24]	; (800ad64 <FLASH_Program_HalfWord+0x44>)
 800ad4a:	f043 0301 	orr.w	r3, r3, #1
 800ad4e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	887a      	ldrh	r2, [r7, #2]
 800ad54:	801a      	strh	r2, [r3, #0]
}
 800ad56:	bf00      	nop
 800ad58:	370c      	adds	r7, #12
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad60:	4770      	bx	lr
 800ad62:	bf00      	nop
 800ad64:	40023c00 	.word	0x40023c00

0800ad68 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800ad68:	b480      	push	{r7}
 800ad6a:	b083      	sub	sp, #12
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
 800ad70:	460b      	mov	r3, r1
 800ad72:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800ad74:	4b0c      	ldr	r3, [pc, #48]	; (800ada8 <FLASH_Program_Byte+0x40>)
 800ad76:	691b      	ldr	r3, [r3, #16]
 800ad78:	4a0b      	ldr	r2, [pc, #44]	; (800ada8 <FLASH_Program_Byte+0x40>)
 800ad7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad7e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800ad80:	4b09      	ldr	r3, [pc, #36]	; (800ada8 <FLASH_Program_Byte+0x40>)
 800ad82:	4a09      	ldr	r2, [pc, #36]	; (800ada8 <FLASH_Program_Byte+0x40>)
 800ad84:	691b      	ldr	r3, [r3, #16]
 800ad86:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800ad88:	4b07      	ldr	r3, [pc, #28]	; (800ada8 <FLASH_Program_Byte+0x40>)
 800ad8a:	691b      	ldr	r3, [r3, #16]
 800ad8c:	4a06      	ldr	r2, [pc, #24]	; (800ada8 <FLASH_Program_Byte+0x40>)
 800ad8e:	f043 0301 	orr.w	r3, r3, #1
 800ad92:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	78fa      	ldrb	r2, [r7, #3]
 800ad98:	701a      	strb	r2, [r3, #0]
}
 800ad9a:	bf00      	nop
 800ad9c:	370c      	adds	r7, #12
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada4:	4770      	bx	lr
 800ada6:	bf00      	nop
 800ada8:	40023c00 	.word	0x40023c00

0800adac <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800adac:	b480      	push	{r7}
 800adae:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800adb0:	4b2f      	ldr	r3, [pc, #188]	; (800ae70 <FLASH_SetErrorCode+0xc4>)
 800adb2:	68db      	ldr	r3, [r3, #12]
 800adb4:	f003 0310 	and.w	r3, r3, #16
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d008      	beq.n	800adce <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800adbc:	4b2d      	ldr	r3, [pc, #180]	; (800ae74 <FLASH_SetErrorCode+0xc8>)
 800adbe:	69db      	ldr	r3, [r3, #28]
 800adc0:	f043 0310 	orr.w	r3, r3, #16
 800adc4:	4a2b      	ldr	r2, [pc, #172]	; (800ae74 <FLASH_SetErrorCode+0xc8>)
 800adc6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800adc8:	4b29      	ldr	r3, [pc, #164]	; (800ae70 <FLASH_SetErrorCode+0xc4>)
 800adca:	2210      	movs	r2, #16
 800adcc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800adce:	4b28      	ldr	r3, [pc, #160]	; (800ae70 <FLASH_SetErrorCode+0xc4>)
 800add0:	68db      	ldr	r3, [r3, #12]
 800add2:	f003 0320 	and.w	r3, r3, #32
 800add6:	2b00      	cmp	r3, #0
 800add8:	d008      	beq.n	800adec <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800adda:	4b26      	ldr	r3, [pc, #152]	; (800ae74 <FLASH_SetErrorCode+0xc8>)
 800addc:	69db      	ldr	r3, [r3, #28]
 800adde:	f043 0308 	orr.w	r3, r3, #8
 800ade2:	4a24      	ldr	r2, [pc, #144]	; (800ae74 <FLASH_SetErrorCode+0xc8>)
 800ade4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800ade6:	4b22      	ldr	r3, [pc, #136]	; (800ae70 <FLASH_SetErrorCode+0xc4>)
 800ade8:	2220      	movs	r2, #32
 800adea:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800adec:	4b20      	ldr	r3, [pc, #128]	; (800ae70 <FLASH_SetErrorCode+0xc4>)
 800adee:	68db      	ldr	r3, [r3, #12]
 800adf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d008      	beq.n	800ae0a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800adf8:	4b1e      	ldr	r3, [pc, #120]	; (800ae74 <FLASH_SetErrorCode+0xc8>)
 800adfa:	69db      	ldr	r3, [r3, #28]
 800adfc:	f043 0304 	orr.w	r3, r3, #4
 800ae00:	4a1c      	ldr	r2, [pc, #112]	; (800ae74 <FLASH_SetErrorCode+0xc8>)
 800ae02:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800ae04:	4b1a      	ldr	r3, [pc, #104]	; (800ae70 <FLASH_SetErrorCode+0xc4>)
 800ae06:	2240      	movs	r2, #64	; 0x40
 800ae08:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800ae0a:	4b19      	ldr	r3, [pc, #100]	; (800ae70 <FLASH_SetErrorCode+0xc4>)
 800ae0c:	68db      	ldr	r3, [r3, #12]
 800ae0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d008      	beq.n	800ae28 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800ae16:	4b17      	ldr	r3, [pc, #92]	; (800ae74 <FLASH_SetErrorCode+0xc8>)
 800ae18:	69db      	ldr	r3, [r3, #28]
 800ae1a:	f043 0302 	orr.w	r3, r3, #2
 800ae1e:	4a15      	ldr	r2, [pc, #84]	; (800ae74 <FLASH_SetErrorCode+0xc8>)
 800ae20:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800ae22:	4b13      	ldr	r3, [pc, #76]	; (800ae70 <FLASH_SetErrorCode+0xc4>)
 800ae24:	2280      	movs	r2, #128	; 0x80
 800ae26:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800ae28:	4b11      	ldr	r3, [pc, #68]	; (800ae70 <FLASH_SetErrorCode+0xc4>)
 800ae2a:	68db      	ldr	r3, [r3, #12]
 800ae2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d009      	beq.n	800ae48 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800ae34:	4b0f      	ldr	r3, [pc, #60]	; (800ae74 <FLASH_SetErrorCode+0xc8>)
 800ae36:	69db      	ldr	r3, [r3, #28]
 800ae38:	f043 0301 	orr.w	r3, r3, #1
 800ae3c:	4a0d      	ldr	r2, [pc, #52]	; (800ae74 <FLASH_SetErrorCode+0xc8>)
 800ae3e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800ae40:	4b0b      	ldr	r3, [pc, #44]	; (800ae70 <FLASH_SetErrorCode+0xc4>)
 800ae42:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ae46:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800ae48:	4b09      	ldr	r3, [pc, #36]	; (800ae70 <FLASH_SetErrorCode+0xc4>)
 800ae4a:	68db      	ldr	r3, [r3, #12]
 800ae4c:	f003 0302 	and.w	r3, r3, #2
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d008      	beq.n	800ae66 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800ae54:	4b07      	ldr	r3, [pc, #28]	; (800ae74 <FLASH_SetErrorCode+0xc8>)
 800ae56:	69db      	ldr	r3, [r3, #28]
 800ae58:	f043 0320 	orr.w	r3, r3, #32
 800ae5c:	4a05      	ldr	r2, [pc, #20]	; (800ae74 <FLASH_SetErrorCode+0xc8>)
 800ae5e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800ae60:	4b03      	ldr	r3, [pc, #12]	; (800ae70 <FLASH_SetErrorCode+0xc4>)
 800ae62:	2202      	movs	r2, #2
 800ae64:	60da      	str	r2, [r3, #12]
  }
}
 800ae66:	bf00      	nop
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6e:	4770      	bx	lr
 800ae70:	40023c00 	.word	0x40023c00
 800ae74:	20004158 	.word	0x20004158

0800ae78 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b084      	sub	sp, #16
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
 800ae80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800ae82:	2301      	movs	r3, #1
 800ae84:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800ae86:	2300      	movs	r3, #0
 800ae88:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800ae8a:	4b31      	ldr	r3, [pc, #196]	; (800af50 <HAL_FLASHEx_Erase+0xd8>)
 800ae8c:	7e1b      	ldrb	r3, [r3, #24]
 800ae8e:	2b01      	cmp	r3, #1
 800ae90:	d101      	bne.n	800ae96 <HAL_FLASHEx_Erase+0x1e>
 800ae92:	2302      	movs	r3, #2
 800ae94:	e058      	b.n	800af48 <HAL_FLASHEx_Erase+0xd0>
 800ae96:	4b2e      	ldr	r3, [pc, #184]	; (800af50 <HAL_FLASHEx_Erase+0xd8>)
 800ae98:	2201      	movs	r2, #1
 800ae9a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ae9c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800aea0:	f7ff feae 	bl	800ac00 <FLASH_WaitForLastOperation>
 800aea4:	4603      	mov	r3, r0
 800aea6:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800aea8:	7bfb      	ldrb	r3, [r7, #15]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d148      	bne.n	800af40 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	f04f 32ff 	mov.w	r2, #4294967295
 800aeb4:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	2b01      	cmp	r3, #1
 800aebc:	d115      	bne.n	800aeea <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	691b      	ldr	r3, [r3, #16]
 800aec2:	b2da      	uxtb	r2, r3
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	685b      	ldr	r3, [r3, #4]
 800aec8:	4619      	mov	r1, r3
 800aeca:	4610      	mov	r0, r2
 800aecc:	f000 f844 	bl	800af58 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800aed0:	f24c 3050 	movw	r0, #50000	; 0xc350
 800aed4:	f7ff fe94 	bl	800ac00 <FLASH_WaitForLastOperation>
 800aed8:	4603      	mov	r3, r0
 800aeda:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800aedc:	4b1d      	ldr	r3, [pc, #116]	; (800af54 <HAL_FLASHEx_Erase+0xdc>)
 800aede:	691b      	ldr	r3, [r3, #16]
 800aee0:	4a1c      	ldr	r2, [pc, #112]	; (800af54 <HAL_FLASHEx_Erase+0xdc>)
 800aee2:	f023 0304 	bic.w	r3, r3, #4
 800aee6:	6113      	str	r3, [r2, #16]
 800aee8:	e028      	b.n	800af3c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	689b      	ldr	r3, [r3, #8]
 800aeee:	60bb      	str	r3, [r7, #8]
 800aef0:	e01c      	b.n	800af2c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	691b      	ldr	r3, [r3, #16]
 800aef6:	b2db      	uxtb	r3, r3
 800aef8:	4619      	mov	r1, r3
 800aefa:	68b8      	ldr	r0, [r7, #8]
 800aefc:	f000 f850 	bl	800afa0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800af00:	f24c 3050 	movw	r0, #50000	; 0xc350
 800af04:	f7ff fe7c 	bl	800ac00 <FLASH_WaitForLastOperation>
 800af08:	4603      	mov	r3, r0
 800af0a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800af0c:	4b11      	ldr	r3, [pc, #68]	; (800af54 <HAL_FLASHEx_Erase+0xdc>)
 800af0e:	691b      	ldr	r3, [r3, #16]
 800af10:	4a10      	ldr	r2, [pc, #64]	; (800af54 <HAL_FLASHEx_Erase+0xdc>)
 800af12:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800af16:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 800af18:	7bfb      	ldrb	r3, [r7, #15]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d003      	beq.n	800af26 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	68ba      	ldr	r2, [r7, #8]
 800af22:	601a      	str	r2, [r3, #0]
          break;
 800af24:	e00a      	b.n	800af3c <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800af26:	68bb      	ldr	r3, [r7, #8]
 800af28:	3301      	adds	r3, #1
 800af2a:	60bb      	str	r3, [r7, #8]
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	68da      	ldr	r2, [r3, #12]
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	689b      	ldr	r3, [r3, #8]
 800af34:	4413      	add	r3, r2
 800af36:	68ba      	ldr	r2, [r7, #8]
 800af38:	429a      	cmp	r2, r3
 800af3a:	d3da      	bcc.n	800aef2 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 800af3c:	f000 f878 	bl	800b030 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800af40:	4b03      	ldr	r3, [pc, #12]	; (800af50 <HAL_FLASHEx_Erase+0xd8>)
 800af42:	2200      	movs	r2, #0
 800af44:	761a      	strb	r2, [r3, #24]

  return status;
 800af46:	7bfb      	ldrb	r3, [r7, #15]
}
 800af48:	4618      	mov	r0, r3
 800af4a:	3710      	adds	r7, #16
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}
 800af50:	20004158 	.word	0x20004158
 800af54:	40023c00 	.word	0x40023c00

0800af58 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800af58:	b480      	push	{r7}
 800af5a:	b083      	sub	sp, #12
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	4603      	mov	r3, r0
 800af60:	6039      	str	r1, [r7, #0]
 800af62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800af64:	4b0d      	ldr	r3, [pc, #52]	; (800af9c <FLASH_MassErase+0x44>)
 800af66:	691b      	ldr	r3, [r3, #16]
 800af68:	4a0c      	ldr	r2, [pc, #48]	; (800af9c <FLASH_MassErase+0x44>)
 800af6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af6e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800af70:	4b0a      	ldr	r3, [pc, #40]	; (800af9c <FLASH_MassErase+0x44>)
 800af72:	691b      	ldr	r3, [r3, #16]
 800af74:	4a09      	ldr	r2, [pc, #36]	; (800af9c <FLASH_MassErase+0x44>)
 800af76:	f043 0304 	orr.w	r3, r3, #4
 800af7a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 800af7c:	4b07      	ldr	r3, [pc, #28]	; (800af9c <FLASH_MassErase+0x44>)
 800af7e:	691a      	ldr	r2, [r3, #16]
 800af80:	79fb      	ldrb	r3, [r7, #7]
 800af82:	021b      	lsls	r3, r3, #8
 800af84:	4313      	orrs	r3, r2
 800af86:	4a05      	ldr	r2, [pc, #20]	; (800af9c <FLASH_MassErase+0x44>)
 800af88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af8c:	6113      	str	r3, [r2, #16]
}
 800af8e:	bf00      	nop
 800af90:	370c      	adds	r7, #12
 800af92:	46bd      	mov	sp, r7
 800af94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af98:	4770      	bx	lr
 800af9a:	bf00      	nop
 800af9c:	40023c00 	.word	0x40023c00

0800afa0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800afa0:	b480      	push	{r7}
 800afa2:	b085      	sub	sp, #20
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
 800afa8:	460b      	mov	r3, r1
 800afaa:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800afac:	2300      	movs	r3, #0
 800afae:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800afb0:	78fb      	ldrb	r3, [r7, #3]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d102      	bne.n	800afbc <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800afb6:	2300      	movs	r3, #0
 800afb8:	60fb      	str	r3, [r7, #12]
 800afba:	e010      	b.n	800afde <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800afbc:	78fb      	ldrb	r3, [r7, #3]
 800afbe:	2b01      	cmp	r3, #1
 800afc0:	d103      	bne.n	800afca <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800afc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800afc6:	60fb      	str	r3, [r7, #12]
 800afc8:	e009      	b.n	800afde <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800afca:	78fb      	ldrb	r3, [r7, #3]
 800afcc:	2b02      	cmp	r3, #2
 800afce:	d103      	bne.n	800afd8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800afd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800afd4:	60fb      	str	r3, [r7, #12]
 800afd6:	e002      	b.n	800afde <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800afd8:	f44f 7340 	mov.w	r3, #768	; 0x300
 800afdc:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800afde:	4b13      	ldr	r3, [pc, #76]	; (800b02c <FLASH_Erase_Sector+0x8c>)
 800afe0:	691b      	ldr	r3, [r3, #16]
 800afe2:	4a12      	ldr	r2, [pc, #72]	; (800b02c <FLASH_Erase_Sector+0x8c>)
 800afe4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800afe8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800afea:	4b10      	ldr	r3, [pc, #64]	; (800b02c <FLASH_Erase_Sector+0x8c>)
 800afec:	691a      	ldr	r2, [r3, #16]
 800afee:	490f      	ldr	r1, [pc, #60]	; (800b02c <FLASH_Erase_Sector+0x8c>)
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	4313      	orrs	r3, r2
 800aff4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800aff6:	4b0d      	ldr	r3, [pc, #52]	; (800b02c <FLASH_Erase_Sector+0x8c>)
 800aff8:	691b      	ldr	r3, [r3, #16]
 800affa:	4a0c      	ldr	r2, [pc, #48]	; (800b02c <FLASH_Erase_Sector+0x8c>)
 800affc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800b000:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800b002:	4b0a      	ldr	r3, [pc, #40]	; (800b02c <FLASH_Erase_Sector+0x8c>)
 800b004:	691a      	ldr	r2, [r3, #16]
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	00db      	lsls	r3, r3, #3
 800b00a:	4313      	orrs	r3, r2
 800b00c:	4a07      	ldr	r2, [pc, #28]	; (800b02c <FLASH_Erase_Sector+0x8c>)
 800b00e:	f043 0302 	orr.w	r3, r3, #2
 800b012:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800b014:	4b05      	ldr	r3, [pc, #20]	; (800b02c <FLASH_Erase_Sector+0x8c>)
 800b016:	691b      	ldr	r3, [r3, #16]
 800b018:	4a04      	ldr	r2, [pc, #16]	; (800b02c <FLASH_Erase_Sector+0x8c>)
 800b01a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b01e:	6113      	str	r3, [r2, #16]
}
 800b020:	bf00      	nop
 800b022:	3714      	adds	r7, #20
 800b024:	46bd      	mov	sp, r7
 800b026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02a:	4770      	bx	lr
 800b02c:	40023c00 	.word	0x40023c00

0800b030 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800b030:	b480      	push	{r7}
 800b032:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 800b034:	4b20      	ldr	r3, [pc, #128]	; (800b0b8 <FLASH_FlushCaches+0x88>)
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d017      	beq.n	800b070 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800b040:	4b1d      	ldr	r3, [pc, #116]	; (800b0b8 <FLASH_FlushCaches+0x88>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	4a1c      	ldr	r2, [pc, #112]	; (800b0b8 <FLASH_FlushCaches+0x88>)
 800b046:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b04a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800b04c:	4b1a      	ldr	r3, [pc, #104]	; (800b0b8 <FLASH_FlushCaches+0x88>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	4a19      	ldr	r2, [pc, #100]	; (800b0b8 <FLASH_FlushCaches+0x88>)
 800b052:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b056:	6013      	str	r3, [r2, #0]
 800b058:	4b17      	ldr	r3, [pc, #92]	; (800b0b8 <FLASH_FlushCaches+0x88>)
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	4a16      	ldr	r2, [pc, #88]	; (800b0b8 <FLASH_FlushCaches+0x88>)
 800b05e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b062:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800b064:	4b14      	ldr	r3, [pc, #80]	; (800b0b8 <FLASH_FlushCaches+0x88>)
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	4a13      	ldr	r2, [pc, #76]	; (800b0b8 <FLASH_FlushCaches+0x88>)
 800b06a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b06e:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800b070:	4b11      	ldr	r3, [pc, #68]	; (800b0b8 <FLASH_FlushCaches+0x88>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d017      	beq.n	800b0ac <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800b07c:	4b0e      	ldr	r3, [pc, #56]	; (800b0b8 <FLASH_FlushCaches+0x88>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	4a0d      	ldr	r2, [pc, #52]	; (800b0b8 <FLASH_FlushCaches+0x88>)
 800b082:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b086:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800b088:	4b0b      	ldr	r3, [pc, #44]	; (800b0b8 <FLASH_FlushCaches+0x88>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	4a0a      	ldr	r2, [pc, #40]	; (800b0b8 <FLASH_FlushCaches+0x88>)
 800b08e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b092:	6013      	str	r3, [r2, #0]
 800b094:	4b08      	ldr	r3, [pc, #32]	; (800b0b8 <FLASH_FlushCaches+0x88>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	4a07      	ldr	r2, [pc, #28]	; (800b0b8 <FLASH_FlushCaches+0x88>)
 800b09a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b09e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800b0a0:	4b05      	ldr	r3, [pc, #20]	; (800b0b8 <FLASH_FlushCaches+0x88>)
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	4a04      	ldr	r2, [pc, #16]	; (800b0b8 <FLASH_FlushCaches+0x88>)
 800b0a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b0aa:	6013      	str	r3, [r2, #0]
  }
}
 800b0ac:	bf00      	nop
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b4:	4770      	bx	lr
 800b0b6:	bf00      	nop
 800b0b8:	40023c00 	.word	0x40023c00

0800b0bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b089      	sub	sp, #36	; 0x24
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
 800b0c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	61fb      	str	r3, [r7, #28]
 800b0d6:	e165      	b.n	800b3a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800b0d8:	2201      	movs	r2, #1
 800b0da:	69fb      	ldr	r3, [r7, #28]
 800b0dc:	fa02 f303 	lsl.w	r3, r2, r3
 800b0e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	697a      	ldr	r2, [r7, #20]
 800b0e8:	4013      	ands	r3, r2
 800b0ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b0ec:	693a      	ldr	r2, [r7, #16]
 800b0ee:	697b      	ldr	r3, [r7, #20]
 800b0f0:	429a      	cmp	r2, r3
 800b0f2:	f040 8154 	bne.w	800b39e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	685b      	ldr	r3, [r3, #4]
 800b0fa:	2b02      	cmp	r3, #2
 800b0fc:	d003      	beq.n	800b106 <HAL_GPIO_Init+0x4a>
 800b0fe:	683b      	ldr	r3, [r7, #0]
 800b100:	685b      	ldr	r3, [r3, #4]
 800b102:	2b12      	cmp	r3, #18
 800b104:	d123      	bne.n	800b14e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b106:	69fb      	ldr	r3, [r7, #28]
 800b108:	08da      	lsrs	r2, r3, #3
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	3208      	adds	r2, #8
 800b10e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b112:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b114:	69fb      	ldr	r3, [r7, #28]
 800b116:	f003 0307 	and.w	r3, r3, #7
 800b11a:	009b      	lsls	r3, r3, #2
 800b11c:	220f      	movs	r2, #15
 800b11e:	fa02 f303 	lsl.w	r3, r2, r3
 800b122:	43db      	mvns	r3, r3
 800b124:	69ba      	ldr	r2, [r7, #24]
 800b126:	4013      	ands	r3, r2
 800b128:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	691a      	ldr	r2, [r3, #16]
 800b12e:	69fb      	ldr	r3, [r7, #28]
 800b130:	f003 0307 	and.w	r3, r3, #7
 800b134:	009b      	lsls	r3, r3, #2
 800b136:	fa02 f303 	lsl.w	r3, r2, r3
 800b13a:	69ba      	ldr	r2, [r7, #24]
 800b13c:	4313      	orrs	r3, r2
 800b13e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b140:	69fb      	ldr	r3, [r7, #28]
 800b142:	08da      	lsrs	r2, r3, #3
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	3208      	adds	r2, #8
 800b148:	69b9      	ldr	r1, [r7, #24]
 800b14a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b154:	69fb      	ldr	r3, [r7, #28]
 800b156:	005b      	lsls	r3, r3, #1
 800b158:	2203      	movs	r2, #3
 800b15a:	fa02 f303 	lsl.w	r3, r2, r3
 800b15e:	43db      	mvns	r3, r3
 800b160:	69ba      	ldr	r2, [r7, #24]
 800b162:	4013      	ands	r3, r2
 800b164:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	685b      	ldr	r3, [r3, #4]
 800b16a:	f003 0203 	and.w	r2, r3, #3
 800b16e:	69fb      	ldr	r3, [r7, #28]
 800b170:	005b      	lsls	r3, r3, #1
 800b172:	fa02 f303 	lsl.w	r3, r2, r3
 800b176:	69ba      	ldr	r2, [r7, #24]
 800b178:	4313      	orrs	r3, r2
 800b17a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	69ba      	ldr	r2, [r7, #24]
 800b180:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	685b      	ldr	r3, [r3, #4]
 800b186:	2b01      	cmp	r3, #1
 800b188:	d00b      	beq.n	800b1a2 <HAL_GPIO_Init+0xe6>
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	685b      	ldr	r3, [r3, #4]
 800b18e:	2b02      	cmp	r3, #2
 800b190:	d007      	beq.n	800b1a2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b196:	2b11      	cmp	r3, #17
 800b198:	d003      	beq.n	800b1a2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	685b      	ldr	r3, [r3, #4]
 800b19e:	2b12      	cmp	r3, #18
 800b1a0:	d130      	bne.n	800b204 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	689b      	ldr	r3, [r3, #8]
 800b1a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b1a8:	69fb      	ldr	r3, [r7, #28]
 800b1aa:	005b      	lsls	r3, r3, #1
 800b1ac:	2203      	movs	r2, #3
 800b1ae:	fa02 f303 	lsl.w	r3, r2, r3
 800b1b2:	43db      	mvns	r3, r3
 800b1b4:	69ba      	ldr	r2, [r7, #24]
 800b1b6:	4013      	ands	r3, r2
 800b1b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	68da      	ldr	r2, [r3, #12]
 800b1be:	69fb      	ldr	r3, [r7, #28]
 800b1c0:	005b      	lsls	r3, r3, #1
 800b1c2:	fa02 f303 	lsl.w	r3, r2, r3
 800b1c6:	69ba      	ldr	r2, [r7, #24]
 800b1c8:	4313      	orrs	r3, r2
 800b1ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	69ba      	ldr	r2, [r7, #24]
 800b1d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	685b      	ldr	r3, [r3, #4]
 800b1d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b1d8:	2201      	movs	r2, #1
 800b1da:	69fb      	ldr	r3, [r7, #28]
 800b1dc:	fa02 f303 	lsl.w	r3, r2, r3
 800b1e0:	43db      	mvns	r3, r3
 800b1e2:	69ba      	ldr	r2, [r7, #24]
 800b1e4:	4013      	ands	r3, r2
 800b1e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	685b      	ldr	r3, [r3, #4]
 800b1ec:	091b      	lsrs	r3, r3, #4
 800b1ee:	f003 0201 	and.w	r2, r3, #1
 800b1f2:	69fb      	ldr	r3, [r7, #28]
 800b1f4:	fa02 f303 	lsl.w	r3, r2, r3
 800b1f8:	69ba      	ldr	r2, [r7, #24]
 800b1fa:	4313      	orrs	r3, r2
 800b1fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	69ba      	ldr	r2, [r7, #24]
 800b202:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	68db      	ldr	r3, [r3, #12]
 800b208:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b20a:	69fb      	ldr	r3, [r7, #28]
 800b20c:	005b      	lsls	r3, r3, #1
 800b20e:	2203      	movs	r2, #3
 800b210:	fa02 f303 	lsl.w	r3, r2, r3
 800b214:	43db      	mvns	r3, r3
 800b216:	69ba      	ldr	r2, [r7, #24]
 800b218:	4013      	ands	r3, r2
 800b21a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	689a      	ldr	r2, [r3, #8]
 800b220:	69fb      	ldr	r3, [r7, #28]
 800b222:	005b      	lsls	r3, r3, #1
 800b224:	fa02 f303 	lsl.w	r3, r2, r3
 800b228:	69ba      	ldr	r2, [r7, #24]
 800b22a:	4313      	orrs	r3, r2
 800b22c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	69ba      	ldr	r2, [r7, #24]
 800b232:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	685b      	ldr	r3, [r3, #4]
 800b238:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	f000 80ae 	beq.w	800b39e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b242:	2300      	movs	r3, #0
 800b244:	60fb      	str	r3, [r7, #12]
 800b246:	4b5c      	ldr	r3, [pc, #368]	; (800b3b8 <HAL_GPIO_Init+0x2fc>)
 800b248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b24a:	4a5b      	ldr	r2, [pc, #364]	; (800b3b8 <HAL_GPIO_Init+0x2fc>)
 800b24c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b250:	6453      	str	r3, [r2, #68]	; 0x44
 800b252:	4b59      	ldr	r3, [pc, #356]	; (800b3b8 <HAL_GPIO_Init+0x2fc>)
 800b254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b256:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b25a:	60fb      	str	r3, [r7, #12]
 800b25c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b25e:	4a57      	ldr	r2, [pc, #348]	; (800b3bc <HAL_GPIO_Init+0x300>)
 800b260:	69fb      	ldr	r3, [r7, #28]
 800b262:	089b      	lsrs	r3, r3, #2
 800b264:	3302      	adds	r3, #2
 800b266:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b26a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b26c:	69fb      	ldr	r3, [r7, #28]
 800b26e:	f003 0303 	and.w	r3, r3, #3
 800b272:	009b      	lsls	r3, r3, #2
 800b274:	220f      	movs	r2, #15
 800b276:	fa02 f303 	lsl.w	r3, r2, r3
 800b27a:	43db      	mvns	r3, r3
 800b27c:	69ba      	ldr	r2, [r7, #24]
 800b27e:	4013      	ands	r3, r2
 800b280:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	4a4e      	ldr	r2, [pc, #312]	; (800b3c0 <HAL_GPIO_Init+0x304>)
 800b286:	4293      	cmp	r3, r2
 800b288:	d025      	beq.n	800b2d6 <HAL_GPIO_Init+0x21a>
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	4a4d      	ldr	r2, [pc, #308]	; (800b3c4 <HAL_GPIO_Init+0x308>)
 800b28e:	4293      	cmp	r3, r2
 800b290:	d01f      	beq.n	800b2d2 <HAL_GPIO_Init+0x216>
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	4a4c      	ldr	r2, [pc, #304]	; (800b3c8 <HAL_GPIO_Init+0x30c>)
 800b296:	4293      	cmp	r3, r2
 800b298:	d019      	beq.n	800b2ce <HAL_GPIO_Init+0x212>
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	4a4b      	ldr	r2, [pc, #300]	; (800b3cc <HAL_GPIO_Init+0x310>)
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	d013      	beq.n	800b2ca <HAL_GPIO_Init+0x20e>
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	4a4a      	ldr	r2, [pc, #296]	; (800b3d0 <HAL_GPIO_Init+0x314>)
 800b2a6:	4293      	cmp	r3, r2
 800b2a8:	d00d      	beq.n	800b2c6 <HAL_GPIO_Init+0x20a>
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	4a49      	ldr	r2, [pc, #292]	; (800b3d4 <HAL_GPIO_Init+0x318>)
 800b2ae:	4293      	cmp	r3, r2
 800b2b0:	d007      	beq.n	800b2c2 <HAL_GPIO_Init+0x206>
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	4a48      	ldr	r2, [pc, #288]	; (800b3d8 <HAL_GPIO_Init+0x31c>)
 800b2b6:	4293      	cmp	r3, r2
 800b2b8:	d101      	bne.n	800b2be <HAL_GPIO_Init+0x202>
 800b2ba:	2306      	movs	r3, #6
 800b2bc:	e00c      	b.n	800b2d8 <HAL_GPIO_Init+0x21c>
 800b2be:	2307      	movs	r3, #7
 800b2c0:	e00a      	b.n	800b2d8 <HAL_GPIO_Init+0x21c>
 800b2c2:	2305      	movs	r3, #5
 800b2c4:	e008      	b.n	800b2d8 <HAL_GPIO_Init+0x21c>
 800b2c6:	2304      	movs	r3, #4
 800b2c8:	e006      	b.n	800b2d8 <HAL_GPIO_Init+0x21c>
 800b2ca:	2303      	movs	r3, #3
 800b2cc:	e004      	b.n	800b2d8 <HAL_GPIO_Init+0x21c>
 800b2ce:	2302      	movs	r3, #2
 800b2d0:	e002      	b.n	800b2d8 <HAL_GPIO_Init+0x21c>
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	e000      	b.n	800b2d8 <HAL_GPIO_Init+0x21c>
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	69fa      	ldr	r2, [r7, #28]
 800b2da:	f002 0203 	and.w	r2, r2, #3
 800b2de:	0092      	lsls	r2, r2, #2
 800b2e0:	4093      	lsls	r3, r2
 800b2e2:	69ba      	ldr	r2, [r7, #24]
 800b2e4:	4313      	orrs	r3, r2
 800b2e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b2e8:	4934      	ldr	r1, [pc, #208]	; (800b3bc <HAL_GPIO_Init+0x300>)
 800b2ea:	69fb      	ldr	r3, [r7, #28]
 800b2ec:	089b      	lsrs	r3, r3, #2
 800b2ee:	3302      	adds	r3, #2
 800b2f0:	69ba      	ldr	r2, [r7, #24]
 800b2f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b2f6:	4b39      	ldr	r3, [pc, #228]	; (800b3dc <HAL_GPIO_Init+0x320>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	43db      	mvns	r3, r3
 800b300:	69ba      	ldr	r2, [r7, #24]
 800b302:	4013      	ands	r3, r2
 800b304:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	685b      	ldr	r3, [r3, #4]
 800b30a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d003      	beq.n	800b31a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800b312:	69ba      	ldr	r2, [r7, #24]
 800b314:	693b      	ldr	r3, [r7, #16]
 800b316:	4313      	orrs	r3, r2
 800b318:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b31a:	4a30      	ldr	r2, [pc, #192]	; (800b3dc <HAL_GPIO_Init+0x320>)
 800b31c:	69bb      	ldr	r3, [r7, #24]
 800b31e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800b320:	4b2e      	ldr	r3, [pc, #184]	; (800b3dc <HAL_GPIO_Init+0x320>)
 800b322:	685b      	ldr	r3, [r3, #4]
 800b324:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b326:	693b      	ldr	r3, [r7, #16]
 800b328:	43db      	mvns	r3, r3
 800b32a:	69ba      	ldr	r2, [r7, #24]
 800b32c:	4013      	ands	r3, r2
 800b32e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	685b      	ldr	r3, [r3, #4]
 800b334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d003      	beq.n	800b344 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800b33c:	69ba      	ldr	r2, [r7, #24]
 800b33e:	693b      	ldr	r3, [r7, #16]
 800b340:	4313      	orrs	r3, r2
 800b342:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b344:	4a25      	ldr	r2, [pc, #148]	; (800b3dc <HAL_GPIO_Init+0x320>)
 800b346:	69bb      	ldr	r3, [r7, #24]
 800b348:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b34a:	4b24      	ldr	r3, [pc, #144]	; (800b3dc <HAL_GPIO_Init+0x320>)
 800b34c:	689b      	ldr	r3, [r3, #8]
 800b34e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b350:	693b      	ldr	r3, [r7, #16]
 800b352:	43db      	mvns	r3, r3
 800b354:	69ba      	ldr	r2, [r7, #24]
 800b356:	4013      	ands	r3, r2
 800b358:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	685b      	ldr	r3, [r3, #4]
 800b35e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b362:	2b00      	cmp	r3, #0
 800b364:	d003      	beq.n	800b36e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800b366:	69ba      	ldr	r2, [r7, #24]
 800b368:	693b      	ldr	r3, [r7, #16]
 800b36a:	4313      	orrs	r3, r2
 800b36c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b36e:	4a1b      	ldr	r2, [pc, #108]	; (800b3dc <HAL_GPIO_Init+0x320>)
 800b370:	69bb      	ldr	r3, [r7, #24]
 800b372:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b374:	4b19      	ldr	r3, [pc, #100]	; (800b3dc <HAL_GPIO_Init+0x320>)
 800b376:	68db      	ldr	r3, [r3, #12]
 800b378:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b37a:	693b      	ldr	r3, [r7, #16]
 800b37c:	43db      	mvns	r3, r3
 800b37e:	69ba      	ldr	r2, [r7, #24]
 800b380:	4013      	ands	r3, r2
 800b382:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	685b      	ldr	r3, [r3, #4]
 800b388:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d003      	beq.n	800b398 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800b390:	69ba      	ldr	r2, [r7, #24]
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	4313      	orrs	r3, r2
 800b396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b398:	4a10      	ldr	r2, [pc, #64]	; (800b3dc <HAL_GPIO_Init+0x320>)
 800b39a:	69bb      	ldr	r3, [r7, #24]
 800b39c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b39e:	69fb      	ldr	r3, [r7, #28]
 800b3a0:	3301      	adds	r3, #1
 800b3a2:	61fb      	str	r3, [r7, #28]
 800b3a4:	69fb      	ldr	r3, [r7, #28]
 800b3a6:	2b0f      	cmp	r3, #15
 800b3a8:	f67f ae96 	bls.w	800b0d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b3ac:	bf00      	nop
 800b3ae:	3724      	adds	r7, #36	; 0x24
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b6:	4770      	bx	lr
 800b3b8:	40023800 	.word	0x40023800
 800b3bc:	40013800 	.word	0x40013800
 800b3c0:	40020000 	.word	0x40020000
 800b3c4:	40020400 	.word	0x40020400
 800b3c8:	40020800 	.word	0x40020800
 800b3cc:	40020c00 	.word	0x40020c00
 800b3d0:	40021000 	.word	0x40021000
 800b3d4:	40021400 	.word	0x40021400
 800b3d8:	40021800 	.word	0x40021800
 800b3dc:	40013c00 	.word	0x40013c00

0800b3e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b3e0:	b480      	push	{r7}
 800b3e2:	b085      	sub	sp, #20
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	460b      	mov	r3, r1
 800b3ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	691a      	ldr	r2, [r3, #16]
 800b3f0:	887b      	ldrh	r3, [r7, #2]
 800b3f2:	4013      	ands	r3, r2
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d002      	beq.n	800b3fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	73fb      	strb	r3, [r7, #15]
 800b3fc:	e001      	b.n	800b402 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b3fe:	2300      	movs	r3, #0
 800b400:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b402:	7bfb      	ldrb	r3, [r7, #15]
}
 800b404:	4618      	mov	r0, r3
 800b406:	3714      	adds	r7, #20
 800b408:	46bd      	mov	sp, r7
 800b40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40e:	4770      	bx	lr

0800b410 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b410:	b480      	push	{r7}
 800b412:	b083      	sub	sp, #12
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
 800b418:	460b      	mov	r3, r1
 800b41a:	807b      	strh	r3, [r7, #2]
 800b41c:	4613      	mov	r3, r2
 800b41e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b420:	787b      	ldrb	r3, [r7, #1]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d003      	beq.n	800b42e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b426:	887a      	ldrh	r2, [r7, #2]
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b42c:	e003      	b.n	800b436 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b42e:	887b      	ldrh	r3, [r7, #2]
 800b430:	041a      	lsls	r2, r3, #16
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	619a      	str	r2, [r3, #24]
}
 800b436:	bf00      	nop
 800b438:	370c      	adds	r7, #12
 800b43a:	46bd      	mov	sp, r7
 800b43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b440:	4770      	bx	lr

0800b442 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b442:	b480      	push	{r7}
 800b444:	b083      	sub	sp, #12
 800b446:	af00      	add	r7, sp, #0
 800b448:	6078      	str	r0, [r7, #4]
 800b44a:	460b      	mov	r3, r1
 800b44c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	695a      	ldr	r2, [r3, #20]
 800b452:	887b      	ldrh	r3, [r7, #2]
 800b454:	401a      	ands	r2, r3
 800b456:	887b      	ldrh	r3, [r7, #2]
 800b458:	429a      	cmp	r2, r3
 800b45a:	d104      	bne.n	800b466 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b45c:	887b      	ldrh	r3, [r7, #2]
 800b45e:	041a      	lsls	r2, r3, #16
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800b464:	e002      	b.n	800b46c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800b466:	887a      	ldrh	r2, [r7, #2]
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	619a      	str	r2, [r3, #24]
}
 800b46c:	bf00      	nop
 800b46e:	370c      	adds	r7, #12
 800b470:	46bd      	mov	sp, r7
 800b472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b476:	4770      	bx	lr

0800b478 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b084      	sub	sp, #16
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
 800b480:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d101      	bne.n	800b48c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b488:	2301      	movs	r3, #1
 800b48a:	e0ca      	b.n	800b622 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b48c:	4b67      	ldr	r3, [pc, #412]	; (800b62c <HAL_RCC_ClockConfig+0x1b4>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	f003 030f 	and.w	r3, r3, #15
 800b494:	683a      	ldr	r2, [r7, #0]
 800b496:	429a      	cmp	r2, r3
 800b498:	d90c      	bls.n	800b4b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b49a:	4b64      	ldr	r3, [pc, #400]	; (800b62c <HAL_RCC_ClockConfig+0x1b4>)
 800b49c:	683a      	ldr	r2, [r7, #0]
 800b49e:	b2d2      	uxtb	r2, r2
 800b4a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b4a2:	4b62      	ldr	r3, [pc, #392]	; (800b62c <HAL_RCC_ClockConfig+0x1b4>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	f003 030f 	and.w	r3, r3, #15
 800b4aa:	683a      	ldr	r2, [r7, #0]
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	d001      	beq.n	800b4b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	e0b6      	b.n	800b622 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	f003 0302 	and.w	r3, r3, #2
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d020      	beq.n	800b502 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	f003 0304 	and.w	r3, r3, #4
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d005      	beq.n	800b4d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b4cc:	4b58      	ldr	r3, [pc, #352]	; (800b630 <HAL_RCC_ClockConfig+0x1b8>)
 800b4ce:	689b      	ldr	r3, [r3, #8]
 800b4d0:	4a57      	ldr	r2, [pc, #348]	; (800b630 <HAL_RCC_ClockConfig+0x1b8>)
 800b4d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b4d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f003 0308 	and.w	r3, r3, #8
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d005      	beq.n	800b4f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b4e4:	4b52      	ldr	r3, [pc, #328]	; (800b630 <HAL_RCC_ClockConfig+0x1b8>)
 800b4e6:	689b      	ldr	r3, [r3, #8]
 800b4e8:	4a51      	ldr	r2, [pc, #324]	; (800b630 <HAL_RCC_ClockConfig+0x1b8>)
 800b4ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b4ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b4f0:	4b4f      	ldr	r3, [pc, #316]	; (800b630 <HAL_RCC_ClockConfig+0x1b8>)
 800b4f2:	689b      	ldr	r3, [r3, #8]
 800b4f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	689b      	ldr	r3, [r3, #8]
 800b4fc:	494c      	ldr	r1, [pc, #304]	; (800b630 <HAL_RCC_ClockConfig+0x1b8>)
 800b4fe:	4313      	orrs	r3, r2
 800b500:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f003 0301 	and.w	r3, r3, #1
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d044      	beq.n	800b598 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	685b      	ldr	r3, [r3, #4]
 800b512:	2b01      	cmp	r3, #1
 800b514:	d107      	bne.n	800b526 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b516:	4b46      	ldr	r3, [pc, #280]	; (800b630 <HAL_RCC_ClockConfig+0x1b8>)
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d119      	bne.n	800b556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b522:	2301      	movs	r3, #1
 800b524:	e07d      	b.n	800b622 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	685b      	ldr	r3, [r3, #4]
 800b52a:	2b02      	cmp	r3, #2
 800b52c:	d003      	beq.n	800b536 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b532:	2b03      	cmp	r3, #3
 800b534:	d107      	bne.n	800b546 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b536:	4b3e      	ldr	r3, [pc, #248]	; (800b630 <HAL_RCC_ClockConfig+0x1b8>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d109      	bne.n	800b556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b542:	2301      	movs	r3, #1
 800b544:	e06d      	b.n	800b622 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b546:	4b3a      	ldr	r3, [pc, #232]	; (800b630 <HAL_RCC_ClockConfig+0x1b8>)
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	f003 0302 	and.w	r3, r3, #2
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d101      	bne.n	800b556 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b552:	2301      	movs	r3, #1
 800b554:	e065      	b.n	800b622 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b556:	4b36      	ldr	r3, [pc, #216]	; (800b630 <HAL_RCC_ClockConfig+0x1b8>)
 800b558:	689b      	ldr	r3, [r3, #8]
 800b55a:	f023 0203 	bic.w	r2, r3, #3
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	685b      	ldr	r3, [r3, #4]
 800b562:	4933      	ldr	r1, [pc, #204]	; (800b630 <HAL_RCC_ClockConfig+0x1b8>)
 800b564:	4313      	orrs	r3, r2
 800b566:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b568:	f7fd fc84 	bl	8008e74 <HAL_GetTick>
 800b56c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b56e:	e00a      	b.n	800b586 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b570:	f7fd fc80 	bl	8008e74 <HAL_GetTick>
 800b574:	4602      	mov	r2, r0
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	1ad3      	subs	r3, r2, r3
 800b57a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b57e:	4293      	cmp	r3, r2
 800b580:	d901      	bls.n	800b586 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b582:	2303      	movs	r3, #3
 800b584:	e04d      	b.n	800b622 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b586:	4b2a      	ldr	r3, [pc, #168]	; (800b630 <HAL_RCC_ClockConfig+0x1b8>)
 800b588:	689b      	ldr	r3, [r3, #8]
 800b58a:	f003 020c 	and.w	r2, r3, #12
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	685b      	ldr	r3, [r3, #4]
 800b592:	009b      	lsls	r3, r3, #2
 800b594:	429a      	cmp	r2, r3
 800b596:	d1eb      	bne.n	800b570 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b598:	4b24      	ldr	r3, [pc, #144]	; (800b62c <HAL_RCC_ClockConfig+0x1b4>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	f003 030f 	and.w	r3, r3, #15
 800b5a0:	683a      	ldr	r2, [r7, #0]
 800b5a2:	429a      	cmp	r2, r3
 800b5a4:	d20c      	bcs.n	800b5c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b5a6:	4b21      	ldr	r3, [pc, #132]	; (800b62c <HAL_RCC_ClockConfig+0x1b4>)
 800b5a8:	683a      	ldr	r2, [r7, #0]
 800b5aa:	b2d2      	uxtb	r2, r2
 800b5ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b5ae:	4b1f      	ldr	r3, [pc, #124]	; (800b62c <HAL_RCC_ClockConfig+0x1b4>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	f003 030f 	and.w	r3, r3, #15
 800b5b6:	683a      	ldr	r2, [r7, #0]
 800b5b8:	429a      	cmp	r2, r3
 800b5ba:	d001      	beq.n	800b5c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b5bc:	2301      	movs	r3, #1
 800b5be:	e030      	b.n	800b622 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	f003 0304 	and.w	r3, r3, #4
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d008      	beq.n	800b5de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b5cc:	4b18      	ldr	r3, [pc, #96]	; (800b630 <HAL_RCC_ClockConfig+0x1b8>)
 800b5ce:	689b      	ldr	r3, [r3, #8]
 800b5d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	68db      	ldr	r3, [r3, #12]
 800b5d8:	4915      	ldr	r1, [pc, #84]	; (800b630 <HAL_RCC_ClockConfig+0x1b8>)
 800b5da:	4313      	orrs	r3, r2
 800b5dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	f003 0308 	and.w	r3, r3, #8
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d009      	beq.n	800b5fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b5ea:	4b11      	ldr	r3, [pc, #68]	; (800b630 <HAL_RCC_ClockConfig+0x1b8>)
 800b5ec:	689b      	ldr	r3, [r3, #8]
 800b5ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	691b      	ldr	r3, [r3, #16]
 800b5f6:	00db      	lsls	r3, r3, #3
 800b5f8:	490d      	ldr	r1, [pc, #52]	; (800b630 <HAL_RCC_ClockConfig+0x1b8>)
 800b5fa:	4313      	orrs	r3, r2
 800b5fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b5fe:	f000 f851 	bl	800b6a4 <HAL_RCC_GetSysClockFreq>
 800b602:	4601      	mov	r1, r0
 800b604:	4b0a      	ldr	r3, [pc, #40]	; (800b630 <HAL_RCC_ClockConfig+0x1b8>)
 800b606:	689b      	ldr	r3, [r3, #8]
 800b608:	091b      	lsrs	r3, r3, #4
 800b60a:	f003 030f 	and.w	r3, r3, #15
 800b60e:	4a09      	ldr	r2, [pc, #36]	; (800b634 <HAL_RCC_ClockConfig+0x1bc>)
 800b610:	5cd3      	ldrb	r3, [r2, r3]
 800b612:	fa21 f303 	lsr.w	r3, r1, r3
 800b616:	4a08      	ldr	r2, [pc, #32]	; (800b638 <HAL_RCC_ClockConfig+0x1c0>)
 800b618:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800b61a:	2000      	movs	r0, #0
 800b61c:	f7fd fbe6 	bl	8008dec <HAL_InitTick>

  return HAL_OK;
 800b620:	2300      	movs	r3, #0
}
 800b622:	4618      	mov	r0, r3
 800b624:	3710      	adds	r7, #16
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}
 800b62a:	bf00      	nop
 800b62c:	40023c00 	.word	0x40023c00
 800b630:	40023800 	.word	0x40023800
 800b634:	080264d8 	.word	0x080264d8
 800b638:	20000018 	.word	0x20000018

0800b63c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b63c:	b480      	push	{r7}
 800b63e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b640:	4b03      	ldr	r3, [pc, #12]	; (800b650 <HAL_RCC_GetHCLKFreq+0x14>)
 800b642:	681b      	ldr	r3, [r3, #0]
}
 800b644:	4618      	mov	r0, r3
 800b646:	46bd      	mov	sp, r7
 800b648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64c:	4770      	bx	lr
 800b64e:	bf00      	nop
 800b650:	20000018 	.word	0x20000018

0800b654 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b658:	f7ff fff0 	bl	800b63c <HAL_RCC_GetHCLKFreq>
 800b65c:	4601      	mov	r1, r0
 800b65e:	4b05      	ldr	r3, [pc, #20]	; (800b674 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b660:	689b      	ldr	r3, [r3, #8]
 800b662:	0a9b      	lsrs	r3, r3, #10
 800b664:	f003 0307 	and.w	r3, r3, #7
 800b668:	4a03      	ldr	r2, [pc, #12]	; (800b678 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b66a:	5cd3      	ldrb	r3, [r2, r3]
 800b66c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b670:	4618      	mov	r0, r3
 800b672:	bd80      	pop	{r7, pc}
 800b674:	40023800 	.word	0x40023800
 800b678:	080264e8 	.word	0x080264e8

0800b67c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b680:	f7ff ffdc 	bl	800b63c <HAL_RCC_GetHCLKFreq>
 800b684:	4601      	mov	r1, r0
 800b686:	4b05      	ldr	r3, [pc, #20]	; (800b69c <HAL_RCC_GetPCLK2Freq+0x20>)
 800b688:	689b      	ldr	r3, [r3, #8]
 800b68a:	0b5b      	lsrs	r3, r3, #13
 800b68c:	f003 0307 	and.w	r3, r3, #7
 800b690:	4a03      	ldr	r2, [pc, #12]	; (800b6a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b692:	5cd3      	ldrb	r3, [r2, r3]
 800b694:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b698:	4618      	mov	r0, r3
 800b69a:	bd80      	pop	{r7, pc}
 800b69c:	40023800 	.word	0x40023800
 800b6a0:	080264e8 	.word	0x080264e8

0800b6a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b6a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6a6:	b087      	sub	sp, #28
 800b6a8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b6be:	4bc6      	ldr	r3, [pc, #792]	; (800b9d8 <HAL_RCC_GetSysClockFreq+0x334>)
 800b6c0:	689b      	ldr	r3, [r3, #8]
 800b6c2:	f003 030c 	and.w	r3, r3, #12
 800b6c6:	2b0c      	cmp	r3, #12
 800b6c8:	f200 817e 	bhi.w	800b9c8 <HAL_RCC_GetSysClockFreq+0x324>
 800b6cc:	a201      	add	r2, pc, #4	; (adr r2, 800b6d4 <HAL_RCC_GetSysClockFreq+0x30>)
 800b6ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6d2:	bf00      	nop
 800b6d4:	0800b709 	.word	0x0800b709
 800b6d8:	0800b9c9 	.word	0x0800b9c9
 800b6dc:	0800b9c9 	.word	0x0800b9c9
 800b6e0:	0800b9c9 	.word	0x0800b9c9
 800b6e4:	0800b70f 	.word	0x0800b70f
 800b6e8:	0800b9c9 	.word	0x0800b9c9
 800b6ec:	0800b9c9 	.word	0x0800b9c9
 800b6f0:	0800b9c9 	.word	0x0800b9c9
 800b6f4:	0800b715 	.word	0x0800b715
 800b6f8:	0800b9c9 	.word	0x0800b9c9
 800b6fc:	0800b9c9 	.word	0x0800b9c9
 800b700:	0800b9c9 	.word	0x0800b9c9
 800b704:	0800b871 	.word	0x0800b871
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b708:	4bb4      	ldr	r3, [pc, #720]	; (800b9dc <HAL_RCC_GetSysClockFreq+0x338>)
 800b70a:	613b      	str	r3, [r7, #16]
       break;
 800b70c:	e15f      	b.n	800b9ce <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b70e:	4bb4      	ldr	r3, [pc, #720]	; (800b9e0 <HAL_RCC_GetSysClockFreq+0x33c>)
 800b710:	613b      	str	r3, [r7, #16]
      break;
 800b712:	e15c      	b.n	800b9ce <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b714:	4bb0      	ldr	r3, [pc, #704]	; (800b9d8 <HAL_RCC_GetSysClockFreq+0x334>)
 800b716:	685b      	ldr	r3, [r3, #4]
 800b718:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b71c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b71e:	4bae      	ldr	r3, [pc, #696]	; (800b9d8 <HAL_RCC_GetSysClockFreq+0x334>)
 800b720:	685b      	ldr	r3, [r3, #4]
 800b722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b726:	2b00      	cmp	r3, #0
 800b728:	d04a      	beq.n	800b7c0 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b72a:	4bab      	ldr	r3, [pc, #684]	; (800b9d8 <HAL_RCC_GetSysClockFreq+0x334>)
 800b72c:	685b      	ldr	r3, [r3, #4]
 800b72e:	099b      	lsrs	r3, r3, #6
 800b730:	f04f 0400 	mov.w	r4, #0
 800b734:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b738:	f04f 0200 	mov.w	r2, #0
 800b73c:	ea03 0501 	and.w	r5, r3, r1
 800b740:	ea04 0602 	and.w	r6, r4, r2
 800b744:	4629      	mov	r1, r5
 800b746:	4632      	mov	r2, r6
 800b748:	f04f 0300 	mov.w	r3, #0
 800b74c:	f04f 0400 	mov.w	r4, #0
 800b750:	0154      	lsls	r4, r2, #5
 800b752:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b756:	014b      	lsls	r3, r1, #5
 800b758:	4619      	mov	r1, r3
 800b75a:	4622      	mov	r2, r4
 800b75c:	1b49      	subs	r1, r1, r5
 800b75e:	eb62 0206 	sbc.w	r2, r2, r6
 800b762:	f04f 0300 	mov.w	r3, #0
 800b766:	f04f 0400 	mov.w	r4, #0
 800b76a:	0194      	lsls	r4, r2, #6
 800b76c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b770:	018b      	lsls	r3, r1, #6
 800b772:	1a5b      	subs	r3, r3, r1
 800b774:	eb64 0402 	sbc.w	r4, r4, r2
 800b778:	f04f 0100 	mov.w	r1, #0
 800b77c:	f04f 0200 	mov.w	r2, #0
 800b780:	00e2      	lsls	r2, r4, #3
 800b782:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b786:	00d9      	lsls	r1, r3, #3
 800b788:	460b      	mov	r3, r1
 800b78a:	4614      	mov	r4, r2
 800b78c:	195b      	adds	r3, r3, r5
 800b78e:	eb44 0406 	adc.w	r4, r4, r6
 800b792:	f04f 0100 	mov.w	r1, #0
 800b796:	f04f 0200 	mov.w	r2, #0
 800b79a:	0262      	lsls	r2, r4, #9
 800b79c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800b7a0:	0259      	lsls	r1, r3, #9
 800b7a2:	460b      	mov	r3, r1
 800b7a4:	4614      	mov	r4, r2
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	4621      	mov	r1, r4
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	f04f 0400 	mov.w	r4, #0
 800b7b0:	461a      	mov	r2, r3
 800b7b2:	4623      	mov	r3, r4
 800b7b4:	f7fd f978 	bl	8008aa8 <__aeabi_uldivmod>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	460c      	mov	r4, r1
 800b7bc:	617b      	str	r3, [r7, #20]
 800b7be:	e049      	b.n	800b854 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b7c0:	4b85      	ldr	r3, [pc, #532]	; (800b9d8 <HAL_RCC_GetSysClockFreq+0x334>)
 800b7c2:	685b      	ldr	r3, [r3, #4]
 800b7c4:	099b      	lsrs	r3, r3, #6
 800b7c6:	f04f 0400 	mov.w	r4, #0
 800b7ca:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b7ce:	f04f 0200 	mov.w	r2, #0
 800b7d2:	ea03 0501 	and.w	r5, r3, r1
 800b7d6:	ea04 0602 	and.w	r6, r4, r2
 800b7da:	4629      	mov	r1, r5
 800b7dc:	4632      	mov	r2, r6
 800b7de:	f04f 0300 	mov.w	r3, #0
 800b7e2:	f04f 0400 	mov.w	r4, #0
 800b7e6:	0154      	lsls	r4, r2, #5
 800b7e8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b7ec:	014b      	lsls	r3, r1, #5
 800b7ee:	4619      	mov	r1, r3
 800b7f0:	4622      	mov	r2, r4
 800b7f2:	1b49      	subs	r1, r1, r5
 800b7f4:	eb62 0206 	sbc.w	r2, r2, r6
 800b7f8:	f04f 0300 	mov.w	r3, #0
 800b7fc:	f04f 0400 	mov.w	r4, #0
 800b800:	0194      	lsls	r4, r2, #6
 800b802:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b806:	018b      	lsls	r3, r1, #6
 800b808:	1a5b      	subs	r3, r3, r1
 800b80a:	eb64 0402 	sbc.w	r4, r4, r2
 800b80e:	f04f 0100 	mov.w	r1, #0
 800b812:	f04f 0200 	mov.w	r2, #0
 800b816:	00e2      	lsls	r2, r4, #3
 800b818:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b81c:	00d9      	lsls	r1, r3, #3
 800b81e:	460b      	mov	r3, r1
 800b820:	4614      	mov	r4, r2
 800b822:	195b      	adds	r3, r3, r5
 800b824:	eb44 0406 	adc.w	r4, r4, r6
 800b828:	f04f 0100 	mov.w	r1, #0
 800b82c:	f04f 0200 	mov.w	r2, #0
 800b830:	02a2      	lsls	r2, r4, #10
 800b832:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800b836:	0299      	lsls	r1, r3, #10
 800b838:	460b      	mov	r3, r1
 800b83a:	4614      	mov	r4, r2
 800b83c:	4618      	mov	r0, r3
 800b83e:	4621      	mov	r1, r4
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	f04f 0400 	mov.w	r4, #0
 800b846:	461a      	mov	r2, r3
 800b848:	4623      	mov	r3, r4
 800b84a:	f7fd f92d 	bl	8008aa8 <__aeabi_uldivmod>
 800b84e:	4603      	mov	r3, r0
 800b850:	460c      	mov	r4, r1
 800b852:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b854:	4b60      	ldr	r3, [pc, #384]	; (800b9d8 <HAL_RCC_GetSysClockFreq+0x334>)
 800b856:	685b      	ldr	r3, [r3, #4]
 800b858:	0c1b      	lsrs	r3, r3, #16
 800b85a:	f003 0303 	and.w	r3, r3, #3
 800b85e:	3301      	adds	r3, #1
 800b860:	005b      	lsls	r3, r3, #1
 800b862:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800b864:	697a      	ldr	r2, [r7, #20]
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	fbb2 f3f3 	udiv	r3, r2, r3
 800b86c:	613b      	str	r3, [r7, #16]
      break;
 800b86e:	e0ae      	b.n	800b9ce <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b870:	4b59      	ldr	r3, [pc, #356]	; (800b9d8 <HAL_RCC_GetSysClockFreq+0x334>)
 800b872:	685b      	ldr	r3, [r3, #4]
 800b874:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b878:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b87a:	4b57      	ldr	r3, [pc, #348]	; (800b9d8 <HAL_RCC_GetSysClockFreq+0x334>)
 800b87c:	685b      	ldr	r3, [r3, #4]
 800b87e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b882:	2b00      	cmp	r3, #0
 800b884:	d04a      	beq.n	800b91c <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b886:	4b54      	ldr	r3, [pc, #336]	; (800b9d8 <HAL_RCC_GetSysClockFreq+0x334>)
 800b888:	685b      	ldr	r3, [r3, #4]
 800b88a:	099b      	lsrs	r3, r3, #6
 800b88c:	f04f 0400 	mov.w	r4, #0
 800b890:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b894:	f04f 0200 	mov.w	r2, #0
 800b898:	ea03 0501 	and.w	r5, r3, r1
 800b89c:	ea04 0602 	and.w	r6, r4, r2
 800b8a0:	4629      	mov	r1, r5
 800b8a2:	4632      	mov	r2, r6
 800b8a4:	f04f 0300 	mov.w	r3, #0
 800b8a8:	f04f 0400 	mov.w	r4, #0
 800b8ac:	0154      	lsls	r4, r2, #5
 800b8ae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b8b2:	014b      	lsls	r3, r1, #5
 800b8b4:	4619      	mov	r1, r3
 800b8b6:	4622      	mov	r2, r4
 800b8b8:	1b49      	subs	r1, r1, r5
 800b8ba:	eb62 0206 	sbc.w	r2, r2, r6
 800b8be:	f04f 0300 	mov.w	r3, #0
 800b8c2:	f04f 0400 	mov.w	r4, #0
 800b8c6:	0194      	lsls	r4, r2, #6
 800b8c8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b8cc:	018b      	lsls	r3, r1, #6
 800b8ce:	1a5b      	subs	r3, r3, r1
 800b8d0:	eb64 0402 	sbc.w	r4, r4, r2
 800b8d4:	f04f 0100 	mov.w	r1, #0
 800b8d8:	f04f 0200 	mov.w	r2, #0
 800b8dc:	00e2      	lsls	r2, r4, #3
 800b8de:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b8e2:	00d9      	lsls	r1, r3, #3
 800b8e4:	460b      	mov	r3, r1
 800b8e6:	4614      	mov	r4, r2
 800b8e8:	195b      	adds	r3, r3, r5
 800b8ea:	eb44 0406 	adc.w	r4, r4, r6
 800b8ee:	f04f 0100 	mov.w	r1, #0
 800b8f2:	f04f 0200 	mov.w	r2, #0
 800b8f6:	0262      	lsls	r2, r4, #9
 800b8f8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800b8fc:	0259      	lsls	r1, r3, #9
 800b8fe:	460b      	mov	r3, r1
 800b900:	4614      	mov	r4, r2
 800b902:	4618      	mov	r0, r3
 800b904:	4621      	mov	r1, r4
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	f04f 0400 	mov.w	r4, #0
 800b90c:	461a      	mov	r2, r3
 800b90e:	4623      	mov	r3, r4
 800b910:	f7fd f8ca 	bl	8008aa8 <__aeabi_uldivmod>
 800b914:	4603      	mov	r3, r0
 800b916:	460c      	mov	r4, r1
 800b918:	617b      	str	r3, [r7, #20]
 800b91a:	e049      	b.n	800b9b0 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b91c:	4b2e      	ldr	r3, [pc, #184]	; (800b9d8 <HAL_RCC_GetSysClockFreq+0x334>)
 800b91e:	685b      	ldr	r3, [r3, #4]
 800b920:	099b      	lsrs	r3, r3, #6
 800b922:	f04f 0400 	mov.w	r4, #0
 800b926:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b92a:	f04f 0200 	mov.w	r2, #0
 800b92e:	ea03 0501 	and.w	r5, r3, r1
 800b932:	ea04 0602 	and.w	r6, r4, r2
 800b936:	4629      	mov	r1, r5
 800b938:	4632      	mov	r2, r6
 800b93a:	f04f 0300 	mov.w	r3, #0
 800b93e:	f04f 0400 	mov.w	r4, #0
 800b942:	0154      	lsls	r4, r2, #5
 800b944:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b948:	014b      	lsls	r3, r1, #5
 800b94a:	4619      	mov	r1, r3
 800b94c:	4622      	mov	r2, r4
 800b94e:	1b49      	subs	r1, r1, r5
 800b950:	eb62 0206 	sbc.w	r2, r2, r6
 800b954:	f04f 0300 	mov.w	r3, #0
 800b958:	f04f 0400 	mov.w	r4, #0
 800b95c:	0194      	lsls	r4, r2, #6
 800b95e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b962:	018b      	lsls	r3, r1, #6
 800b964:	1a5b      	subs	r3, r3, r1
 800b966:	eb64 0402 	sbc.w	r4, r4, r2
 800b96a:	f04f 0100 	mov.w	r1, #0
 800b96e:	f04f 0200 	mov.w	r2, #0
 800b972:	00e2      	lsls	r2, r4, #3
 800b974:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b978:	00d9      	lsls	r1, r3, #3
 800b97a:	460b      	mov	r3, r1
 800b97c:	4614      	mov	r4, r2
 800b97e:	195b      	adds	r3, r3, r5
 800b980:	eb44 0406 	adc.w	r4, r4, r6
 800b984:	f04f 0100 	mov.w	r1, #0
 800b988:	f04f 0200 	mov.w	r2, #0
 800b98c:	02a2      	lsls	r2, r4, #10
 800b98e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800b992:	0299      	lsls	r1, r3, #10
 800b994:	460b      	mov	r3, r1
 800b996:	4614      	mov	r4, r2
 800b998:	4618      	mov	r0, r3
 800b99a:	4621      	mov	r1, r4
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	f04f 0400 	mov.w	r4, #0
 800b9a2:	461a      	mov	r2, r3
 800b9a4:	4623      	mov	r3, r4
 800b9a6:	f7fd f87f 	bl	8008aa8 <__aeabi_uldivmod>
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	460c      	mov	r4, r1
 800b9ae:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800b9b0:	4b09      	ldr	r3, [pc, #36]	; (800b9d8 <HAL_RCC_GetSysClockFreq+0x334>)
 800b9b2:	685b      	ldr	r3, [r3, #4]
 800b9b4:	0f1b      	lsrs	r3, r3, #28
 800b9b6:	f003 0307 	and.w	r3, r3, #7
 800b9ba:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 800b9bc:	697a      	ldr	r2, [r7, #20]
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9c4:	613b      	str	r3, [r7, #16]
      break;
 800b9c6:	e002      	b.n	800b9ce <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b9c8:	4b04      	ldr	r3, [pc, #16]	; (800b9dc <HAL_RCC_GetSysClockFreq+0x338>)
 800b9ca:	613b      	str	r3, [r7, #16]
      break;
 800b9cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b9ce:	693b      	ldr	r3, [r7, #16]
}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	371c      	adds	r7, #28
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9d8:	40023800 	.word	0x40023800
 800b9dc:	00f42400 	.word	0x00f42400
 800b9e0:	007a1200 	.word	0x007a1200

0800b9e4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b086      	sub	sp, #24
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	f003 0301 	and.w	r3, r3, #1
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	f000 8083 	beq.w	800bb04 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b9fe:	4b95      	ldr	r3, [pc, #596]	; (800bc54 <HAL_RCC_OscConfig+0x270>)
 800ba00:	689b      	ldr	r3, [r3, #8]
 800ba02:	f003 030c 	and.w	r3, r3, #12
 800ba06:	2b04      	cmp	r3, #4
 800ba08:	d019      	beq.n	800ba3e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800ba0a:	4b92      	ldr	r3, [pc, #584]	; (800bc54 <HAL_RCC_OscConfig+0x270>)
 800ba0c:	689b      	ldr	r3, [r3, #8]
 800ba0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800ba12:	2b08      	cmp	r3, #8
 800ba14:	d106      	bne.n	800ba24 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800ba16:	4b8f      	ldr	r3, [pc, #572]	; (800bc54 <HAL_RCC_OscConfig+0x270>)
 800ba18:	685b      	ldr	r3, [r3, #4]
 800ba1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ba1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ba22:	d00c      	beq.n	800ba3e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ba24:	4b8b      	ldr	r3, [pc, #556]	; (800bc54 <HAL_RCC_OscConfig+0x270>)
 800ba26:	689b      	ldr	r3, [r3, #8]
 800ba28:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800ba2c:	2b0c      	cmp	r3, #12
 800ba2e:	d112      	bne.n	800ba56 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ba30:	4b88      	ldr	r3, [pc, #544]	; (800bc54 <HAL_RCC_OscConfig+0x270>)
 800ba32:	685b      	ldr	r3, [r3, #4]
 800ba34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ba38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ba3c:	d10b      	bne.n	800ba56 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ba3e:	4b85      	ldr	r3, [pc, #532]	; (800bc54 <HAL_RCC_OscConfig+0x270>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d05b      	beq.n	800bb02 <HAL_RCC_OscConfig+0x11e>
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	685b      	ldr	r3, [r3, #4]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d157      	bne.n	800bb02 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800ba52:	2301      	movs	r3, #1
 800ba54:	e216      	b.n	800be84 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	685b      	ldr	r3, [r3, #4]
 800ba5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba5e:	d106      	bne.n	800ba6e <HAL_RCC_OscConfig+0x8a>
 800ba60:	4b7c      	ldr	r3, [pc, #496]	; (800bc54 <HAL_RCC_OscConfig+0x270>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	4a7b      	ldr	r2, [pc, #492]	; (800bc54 <HAL_RCC_OscConfig+0x270>)
 800ba66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ba6a:	6013      	str	r3, [r2, #0]
 800ba6c:	e01d      	b.n	800baaa <HAL_RCC_OscConfig+0xc6>
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	685b      	ldr	r3, [r3, #4]
 800ba72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ba76:	d10c      	bne.n	800ba92 <HAL_RCC_OscConfig+0xae>
 800ba78:	4b76      	ldr	r3, [pc, #472]	; (800bc54 <HAL_RCC_OscConfig+0x270>)
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	4a75      	ldr	r2, [pc, #468]	; (800bc54 <HAL_RCC_OscConfig+0x270>)
 800ba7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ba82:	6013      	str	r3, [r2, #0]
 800ba84:	4b73      	ldr	r3, [pc, #460]	; (800bc54 <HAL_RCC_OscConfig+0x270>)
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	4a72      	ldr	r2, [pc, #456]	; (800bc54 <HAL_RCC_OscConfig+0x270>)
 800ba8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ba8e:	6013      	str	r3, [r2, #0]
 800ba90:	e00b      	b.n	800baaa <HAL_RCC_OscConfig+0xc6>
 800ba92:	4b70      	ldr	r3, [pc, #448]	; (800bc54 <HAL_RCC_OscConfig+0x270>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	4a6f      	ldr	r2, [pc, #444]	; (800bc54 <HAL_RCC_OscConfig+0x270>)
 800ba98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ba9c:	6013      	str	r3, [r2, #0]
 800ba9e:	4b6d      	ldr	r3, [pc, #436]	; (800bc54 <HAL_RCC_OscConfig+0x270>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	4a6c      	ldr	r2, [pc, #432]	; (800bc54 <HAL_RCC_OscConfig+0x270>)
 800baa4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800baa8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	685b      	ldr	r3, [r3, #4]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d013      	beq.n	800bada <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bab2:	f7fd f9df 	bl	8008e74 <HAL_GetTick>
 800bab6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bab8:	e008      	b.n	800bacc <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800baba:	f7fd f9db 	bl	8008e74 <HAL_GetTick>
 800babe:	4602      	mov	r2, r0
 800bac0:	693b      	ldr	r3, [r7, #16]
 800bac2:	1ad3      	subs	r3, r2, r3
 800bac4:	2b64      	cmp	r3, #100	; 0x64
 800bac6:	d901      	bls.n	800bacc <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800bac8:	2303      	movs	r3, #3
 800baca:	e1db      	b.n	800be84 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bacc:	4b61      	ldr	r3, [pc, #388]	; (800bc54 <HAL_RCC_OscConfig+0x270>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d0f0      	beq.n	800baba <HAL_RCC_OscConfig+0xd6>
 800bad8:	e014      	b.n	800bb04 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bada:	f7fd f9cb 	bl	8008e74 <HAL_GetTick>
 800bade:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bae0:	e008      	b.n	800baf4 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bae2:	f7fd f9c7 	bl	8008e74 <HAL_GetTick>
 800bae6:	4602      	mov	r2, r0
 800bae8:	693b      	ldr	r3, [r7, #16]
 800baea:	1ad3      	subs	r3, r2, r3
 800baec:	2b64      	cmp	r3, #100	; 0x64
 800baee:	d901      	bls.n	800baf4 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 800baf0:	2303      	movs	r3, #3
 800baf2:	e1c7      	b.n	800be84 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800baf4:	4b57      	ldr	r3, [pc, #348]	; (800bc54 <HAL_RCC_OscConfig+0x270>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d1f0      	bne.n	800bae2 <HAL_RCC_OscConfig+0xfe>
 800bb00:	e000      	b.n	800bb04 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bb02:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	f003 0302 	and.w	r3, r3, #2
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d06f      	beq.n	800bbf0 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800bb10:	4b50      	ldr	r3, [pc, #320]	; (800bc54 <HAL_RCC_OscConfig+0x270>)
 800bb12:	689b      	ldr	r3, [r3, #8]
 800bb14:	f003 030c 	and.w	r3, r3, #12
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d017      	beq.n	800bb4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800bb1c:	4b4d      	ldr	r3, [pc, #308]	; (800bc54 <HAL_RCC_OscConfig+0x270>)
 800bb1e:	689b      	ldr	r3, [r3, #8]
 800bb20:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800bb24:	2b08      	cmp	r3, #8
 800bb26:	d105      	bne.n	800bb34 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800bb28:	4b4a      	ldr	r3, [pc, #296]	; (800bc54 <HAL_RCC_OscConfig+0x270>)
 800bb2a:	685b      	ldr	r3, [r3, #4]
 800bb2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d00b      	beq.n	800bb4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bb34:	4b47      	ldr	r3, [pc, #284]	; (800bc54 <HAL_RCC_OscConfig+0x270>)
 800bb36:	689b      	ldr	r3, [r3, #8]
 800bb38:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800bb3c:	2b0c      	cmp	r3, #12
 800bb3e:	d11c      	bne.n	800bb7a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bb40:	4b44      	ldr	r3, [pc, #272]	; (800bc54 <HAL_RCC_OscConfig+0x270>)
 800bb42:	685b      	ldr	r3, [r3, #4]
 800bb44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d116      	bne.n	800bb7a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bb4c:	4b41      	ldr	r3, [pc, #260]	; (800bc54 <HAL_RCC_OscConfig+0x270>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	f003 0302 	and.w	r3, r3, #2
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d005      	beq.n	800bb64 <HAL_RCC_OscConfig+0x180>
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	68db      	ldr	r3, [r3, #12]
 800bb5c:	2b01      	cmp	r3, #1
 800bb5e:	d001      	beq.n	800bb64 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 800bb60:	2301      	movs	r3, #1
 800bb62:	e18f      	b.n	800be84 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bb64:	4b3b      	ldr	r3, [pc, #236]	; (800bc54 <HAL_RCC_OscConfig+0x270>)
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	691b      	ldr	r3, [r3, #16]
 800bb70:	00db      	lsls	r3, r3, #3
 800bb72:	4938      	ldr	r1, [pc, #224]	; (800bc54 <HAL_RCC_OscConfig+0x270>)
 800bb74:	4313      	orrs	r3, r2
 800bb76:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bb78:	e03a      	b.n	800bbf0 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	68db      	ldr	r3, [r3, #12]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d020      	beq.n	800bbc4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bb82:	4b35      	ldr	r3, [pc, #212]	; (800bc58 <HAL_RCC_OscConfig+0x274>)
 800bb84:	2201      	movs	r2, #1
 800bb86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb88:	f7fd f974 	bl	8008e74 <HAL_GetTick>
 800bb8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bb8e:	e008      	b.n	800bba2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bb90:	f7fd f970 	bl	8008e74 <HAL_GetTick>
 800bb94:	4602      	mov	r2, r0
 800bb96:	693b      	ldr	r3, [r7, #16]
 800bb98:	1ad3      	subs	r3, r2, r3
 800bb9a:	2b02      	cmp	r3, #2
 800bb9c:	d901      	bls.n	800bba2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800bb9e:	2303      	movs	r3, #3
 800bba0:	e170      	b.n	800be84 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bba2:	4b2c      	ldr	r3, [pc, #176]	; (800bc54 <HAL_RCC_OscConfig+0x270>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	f003 0302 	and.w	r3, r3, #2
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d0f0      	beq.n	800bb90 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bbae:	4b29      	ldr	r3, [pc, #164]	; (800bc54 <HAL_RCC_OscConfig+0x270>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	691b      	ldr	r3, [r3, #16]
 800bbba:	00db      	lsls	r3, r3, #3
 800bbbc:	4925      	ldr	r1, [pc, #148]	; (800bc54 <HAL_RCC_OscConfig+0x270>)
 800bbbe:	4313      	orrs	r3, r2
 800bbc0:	600b      	str	r3, [r1, #0]
 800bbc2:	e015      	b.n	800bbf0 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bbc4:	4b24      	ldr	r3, [pc, #144]	; (800bc58 <HAL_RCC_OscConfig+0x274>)
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bbca:	f7fd f953 	bl	8008e74 <HAL_GetTick>
 800bbce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bbd0:	e008      	b.n	800bbe4 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bbd2:	f7fd f94f 	bl	8008e74 <HAL_GetTick>
 800bbd6:	4602      	mov	r2, r0
 800bbd8:	693b      	ldr	r3, [r7, #16]
 800bbda:	1ad3      	subs	r3, r2, r3
 800bbdc:	2b02      	cmp	r3, #2
 800bbde:	d901      	bls.n	800bbe4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800bbe0:	2303      	movs	r3, #3
 800bbe2:	e14f      	b.n	800be84 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bbe4:	4b1b      	ldr	r3, [pc, #108]	; (800bc54 <HAL_RCC_OscConfig+0x270>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	f003 0302 	and.w	r3, r3, #2
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d1f0      	bne.n	800bbd2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	f003 0308 	and.w	r3, r3, #8
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d037      	beq.n	800bc6c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	695b      	ldr	r3, [r3, #20]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d016      	beq.n	800bc32 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bc04:	4b15      	ldr	r3, [pc, #84]	; (800bc5c <HAL_RCC_OscConfig+0x278>)
 800bc06:	2201      	movs	r2, #1
 800bc08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bc0a:	f7fd f933 	bl	8008e74 <HAL_GetTick>
 800bc0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bc10:	e008      	b.n	800bc24 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bc12:	f7fd f92f 	bl	8008e74 <HAL_GetTick>
 800bc16:	4602      	mov	r2, r0
 800bc18:	693b      	ldr	r3, [r7, #16]
 800bc1a:	1ad3      	subs	r3, r2, r3
 800bc1c:	2b02      	cmp	r3, #2
 800bc1e:	d901      	bls.n	800bc24 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800bc20:	2303      	movs	r3, #3
 800bc22:	e12f      	b.n	800be84 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bc24:	4b0b      	ldr	r3, [pc, #44]	; (800bc54 <HAL_RCC_OscConfig+0x270>)
 800bc26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc28:	f003 0302 	and.w	r3, r3, #2
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d0f0      	beq.n	800bc12 <HAL_RCC_OscConfig+0x22e>
 800bc30:	e01c      	b.n	800bc6c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bc32:	4b0a      	ldr	r3, [pc, #40]	; (800bc5c <HAL_RCC_OscConfig+0x278>)
 800bc34:	2200      	movs	r2, #0
 800bc36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bc38:	f7fd f91c 	bl	8008e74 <HAL_GetTick>
 800bc3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bc3e:	e00f      	b.n	800bc60 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bc40:	f7fd f918 	bl	8008e74 <HAL_GetTick>
 800bc44:	4602      	mov	r2, r0
 800bc46:	693b      	ldr	r3, [r7, #16]
 800bc48:	1ad3      	subs	r3, r2, r3
 800bc4a:	2b02      	cmp	r3, #2
 800bc4c:	d908      	bls.n	800bc60 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800bc4e:	2303      	movs	r3, #3
 800bc50:	e118      	b.n	800be84 <HAL_RCC_OscConfig+0x4a0>
 800bc52:	bf00      	nop
 800bc54:	40023800 	.word	0x40023800
 800bc58:	42470000 	.word	0x42470000
 800bc5c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bc60:	4b8a      	ldr	r3, [pc, #552]	; (800be8c <HAL_RCC_OscConfig+0x4a8>)
 800bc62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc64:	f003 0302 	and.w	r3, r3, #2
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d1e9      	bne.n	800bc40 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	f003 0304 	and.w	r3, r3, #4
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	f000 8097 	beq.w	800bda8 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bc7e:	4b83      	ldr	r3, [pc, #524]	; (800be8c <HAL_RCC_OscConfig+0x4a8>)
 800bc80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d10f      	bne.n	800bcaa <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	60fb      	str	r3, [r7, #12]
 800bc8e:	4b7f      	ldr	r3, [pc, #508]	; (800be8c <HAL_RCC_OscConfig+0x4a8>)
 800bc90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc92:	4a7e      	ldr	r2, [pc, #504]	; (800be8c <HAL_RCC_OscConfig+0x4a8>)
 800bc94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bc98:	6413      	str	r3, [r2, #64]	; 0x40
 800bc9a:	4b7c      	ldr	r3, [pc, #496]	; (800be8c <HAL_RCC_OscConfig+0x4a8>)
 800bc9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bca2:	60fb      	str	r3, [r7, #12]
 800bca4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800bca6:	2301      	movs	r3, #1
 800bca8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bcaa:	4b79      	ldr	r3, [pc, #484]	; (800be90 <HAL_RCC_OscConfig+0x4ac>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d118      	bne.n	800bce8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800bcb6:	4b76      	ldr	r3, [pc, #472]	; (800be90 <HAL_RCC_OscConfig+0x4ac>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	4a75      	ldr	r2, [pc, #468]	; (800be90 <HAL_RCC_OscConfig+0x4ac>)
 800bcbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bcc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bcc2:	f7fd f8d7 	bl	8008e74 <HAL_GetTick>
 800bcc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bcc8:	e008      	b.n	800bcdc <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bcca:	f7fd f8d3 	bl	8008e74 <HAL_GetTick>
 800bcce:	4602      	mov	r2, r0
 800bcd0:	693b      	ldr	r3, [r7, #16]
 800bcd2:	1ad3      	subs	r3, r2, r3
 800bcd4:	2b02      	cmp	r3, #2
 800bcd6:	d901      	bls.n	800bcdc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800bcd8:	2303      	movs	r3, #3
 800bcda:	e0d3      	b.n	800be84 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bcdc:	4b6c      	ldr	r3, [pc, #432]	; (800be90 <HAL_RCC_OscConfig+0x4ac>)
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d0f0      	beq.n	800bcca <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	689b      	ldr	r3, [r3, #8]
 800bcec:	2b01      	cmp	r3, #1
 800bcee:	d106      	bne.n	800bcfe <HAL_RCC_OscConfig+0x31a>
 800bcf0:	4b66      	ldr	r3, [pc, #408]	; (800be8c <HAL_RCC_OscConfig+0x4a8>)
 800bcf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcf4:	4a65      	ldr	r2, [pc, #404]	; (800be8c <HAL_RCC_OscConfig+0x4a8>)
 800bcf6:	f043 0301 	orr.w	r3, r3, #1
 800bcfa:	6713      	str	r3, [r2, #112]	; 0x70
 800bcfc:	e01c      	b.n	800bd38 <HAL_RCC_OscConfig+0x354>
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	689b      	ldr	r3, [r3, #8]
 800bd02:	2b05      	cmp	r3, #5
 800bd04:	d10c      	bne.n	800bd20 <HAL_RCC_OscConfig+0x33c>
 800bd06:	4b61      	ldr	r3, [pc, #388]	; (800be8c <HAL_RCC_OscConfig+0x4a8>)
 800bd08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd0a:	4a60      	ldr	r2, [pc, #384]	; (800be8c <HAL_RCC_OscConfig+0x4a8>)
 800bd0c:	f043 0304 	orr.w	r3, r3, #4
 800bd10:	6713      	str	r3, [r2, #112]	; 0x70
 800bd12:	4b5e      	ldr	r3, [pc, #376]	; (800be8c <HAL_RCC_OscConfig+0x4a8>)
 800bd14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd16:	4a5d      	ldr	r2, [pc, #372]	; (800be8c <HAL_RCC_OscConfig+0x4a8>)
 800bd18:	f043 0301 	orr.w	r3, r3, #1
 800bd1c:	6713      	str	r3, [r2, #112]	; 0x70
 800bd1e:	e00b      	b.n	800bd38 <HAL_RCC_OscConfig+0x354>
 800bd20:	4b5a      	ldr	r3, [pc, #360]	; (800be8c <HAL_RCC_OscConfig+0x4a8>)
 800bd22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd24:	4a59      	ldr	r2, [pc, #356]	; (800be8c <HAL_RCC_OscConfig+0x4a8>)
 800bd26:	f023 0301 	bic.w	r3, r3, #1
 800bd2a:	6713      	str	r3, [r2, #112]	; 0x70
 800bd2c:	4b57      	ldr	r3, [pc, #348]	; (800be8c <HAL_RCC_OscConfig+0x4a8>)
 800bd2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd30:	4a56      	ldr	r2, [pc, #344]	; (800be8c <HAL_RCC_OscConfig+0x4a8>)
 800bd32:	f023 0304 	bic.w	r3, r3, #4
 800bd36:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	689b      	ldr	r3, [r3, #8]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d015      	beq.n	800bd6c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bd40:	f7fd f898 	bl	8008e74 <HAL_GetTick>
 800bd44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bd46:	e00a      	b.n	800bd5e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bd48:	f7fd f894 	bl	8008e74 <HAL_GetTick>
 800bd4c:	4602      	mov	r2, r0
 800bd4e:	693b      	ldr	r3, [r7, #16]
 800bd50:	1ad3      	subs	r3, r2, r3
 800bd52:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd56:	4293      	cmp	r3, r2
 800bd58:	d901      	bls.n	800bd5e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800bd5a:	2303      	movs	r3, #3
 800bd5c:	e092      	b.n	800be84 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bd5e:	4b4b      	ldr	r3, [pc, #300]	; (800be8c <HAL_RCC_OscConfig+0x4a8>)
 800bd60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd62:	f003 0302 	and.w	r3, r3, #2
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d0ee      	beq.n	800bd48 <HAL_RCC_OscConfig+0x364>
 800bd6a:	e014      	b.n	800bd96 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bd6c:	f7fd f882 	bl	8008e74 <HAL_GetTick>
 800bd70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bd72:	e00a      	b.n	800bd8a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bd74:	f7fd f87e 	bl	8008e74 <HAL_GetTick>
 800bd78:	4602      	mov	r2, r0
 800bd7a:	693b      	ldr	r3, [r7, #16]
 800bd7c:	1ad3      	subs	r3, r2, r3
 800bd7e:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd82:	4293      	cmp	r3, r2
 800bd84:	d901      	bls.n	800bd8a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800bd86:	2303      	movs	r3, #3
 800bd88:	e07c      	b.n	800be84 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bd8a:	4b40      	ldr	r3, [pc, #256]	; (800be8c <HAL_RCC_OscConfig+0x4a8>)
 800bd8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd8e:	f003 0302 	and.w	r3, r3, #2
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d1ee      	bne.n	800bd74 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bd96:	7dfb      	ldrb	r3, [r7, #23]
 800bd98:	2b01      	cmp	r3, #1
 800bd9a:	d105      	bne.n	800bda8 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bd9c:	4b3b      	ldr	r3, [pc, #236]	; (800be8c <HAL_RCC_OscConfig+0x4a8>)
 800bd9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bda0:	4a3a      	ldr	r2, [pc, #232]	; (800be8c <HAL_RCC_OscConfig+0x4a8>)
 800bda2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bda6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	699b      	ldr	r3, [r3, #24]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d068      	beq.n	800be82 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800bdb0:	4b36      	ldr	r3, [pc, #216]	; (800be8c <HAL_RCC_OscConfig+0x4a8>)
 800bdb2:	689b      	ldr	r3, [r3, #8]
 800bdb4:	f003 030c 	and.w	r3, r3, #12
 800bdb8:	2b08      	cmp	r3, #8
 800bdba:	d060      	beq.n	800be7e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	699b      	ldr	r3, [r3, #24]
 800bdc0:	2b02      	cmp	r3, #2
 800bdc2:	d145      	bne.n	800be50 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bdc4:	4b33      	ldr	r3, [pc, #204]	; (800be94 <HAL_RCC_OscConfig+0x4b0>)
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bdca:	f7fd f853 	bl	8008e74 <HAL_GetTick>
 800bdce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bdd0:	e008      	b.n	800bde4 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bdd2:	f7fd f84f 	bl	8008e74 <HAL_GetTick>
 800bdd6:	4602      	mov	r2, r0
 800bdd8:	693b      	ldr	r3, [r7, #16]
 800bdda:	1ad3      	subs	r3, r2, r3
 800bddc:	2b02      	cmp	r3, #2
 800bdde:	d901      	bls.n	800bde4 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 800bde0:	2303      	movs	r3, #3
 800bde2:	e04f      	b.n	800be84 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bde4:	4b29      	ldr	r3, [pc, #164]	; (800be8c <HAL_RCC_OscConfig+0x4a8>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d1f0      	bne.n	800bdd2 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	69da      	ldr	r2, [r3, #28]
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	6a1b      	ldr	r3, [r3, #32]
 800bdf8:	431a      	orrs	r2, r3
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdfe:	019b      	lsls	r3, r3, #6
 800be00:	431a      	orrs	r2, r3
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be06:	085b      	lsrs	r3, r3, #1
 800be08:	3b01      	subs	r3, #1
 800be0a:	041b      	lsls	r3, r3, #16
 800be0c:	431a      	orrs	r2, r3
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be12:	061b      	lsls	r3, r3, #24
 800be14:	431a      	orrs	r2, r3
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be1a:	071b      	lsls	r3, r3, #28
 800be1c:	491b      	ldr	r1, [pc, #108]	; (800be8c <HAL_RCC_OscConfig+0x4a8>)
 800be1e:	4313      	orrs	r3, r2
 800be20:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800be22:	4b1c      	ldr	r3, [pc, #112]	; (800be94 <HAL_RCC_OscConfig+0x4b0>)
 800be24:	2201      	movs	r2, #1
 800be26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be28:	f7fd f824 	bl	8008e74 <HAL_GetTick>
 800be2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800be2e:	e008      	b.n	800be42 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800be30:	f7fd f820 	bl	8008e74 <HAL_GetTick>
 800be34:	4602      	mov	r2, r0
 800be36:	693b      	ldr	r3, [r7, #16]
 800be38:	1ad3      	subs	r3, r2, r3
 800be3a:	2b02      	cmp	r3, #2
 800be3c:	d901      	bls.n	800be42 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800be3e:	2303      	movs	r3, #3
 800be40:	e020      	b.n	800be84 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800be42:	4b12      	ldr	r3, [pc, #72]	; (800be8c <HAL_RCC_OscConfig+0x4a8>)
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d0f0      	beq.n	800be30 <HAL_RCC_OscConfig+0x44c>
 800be4e:	e018      	b.n	800be82 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800be50:	4b10      	ldr	r3, [pc, #64]	; (800be94 <HAL_RCC_OscConfig+0x4b0>)
 800be52:	2200      	movs	r2, #0
 800be54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be56:	f7fd f80d 	bl	8008e74 <HAL_GetTick>
 800be5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800be5c:	e008      	b.n	800be70 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800be5e:	f7fd f809 	bl	8008e74 <HAL_GetTick>
 800be62:	4602      	mov	r2, r0
 800be64:	693b      	ldr	r3, [r7, #16]
 800be66:	1ad3      	subs	r3, r2, r3
 800be68:	2b02      	cmp	r3, #2
 800be6a:	d901      	bls.n	800be70 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800be6c:	2303      	movs	r3, #3
 800be6e:	e009      	b.n	800be84 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800be70:	4b06      	ldr	r3, [pc, #24]	; (800be8c <HAL_RCC_OscConfig+0x4a8>)
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d1f0      	bne.n	800be5e <HAL_RCC_OscConfig+0x47a>
 800be7c:	e001      	b.n	800be82 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800be7e:	2301      	movs	r3, #1
 800be80:	e000      	b.n	800be84 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800be82:	2300      	movs	r3, #0
}
 800be84:	4618      	mov	r0, r3
 800be86:	3718      	adds	r7, #24
 800be88:	46bd      	mov	sp, r7
 800be8a:	bd80      	pop	{r7, pc}
 800be8c:	40023800 	.word	0x40023800
 800be90:	40007000 	.word	0x40007000
 800be94:	42470060 	.word	0x42470060

0800be98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b082      	sub	sp, #8
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d101      	bne.n	800beaa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800bea6:	2301      	movs	r3, #1
 800bea8:	e056      	b.n	800bf58 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2200      	movs	r2, #0
 800beae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800beb6:	b2db      	uxtb	r3, r3
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d106      	bne.n	800beca <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2200      	movs	r2, #0
 800bec0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f004 ff85 	bl	8010dd4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	2202      	movs	r2, #2
 800bece:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	681a      	ldr	r2, [r3, #0]
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bee0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	685a      	ldr	r2, [r3, #4]
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	689b      	ldr	r3, [r3, #8]
 800beea:	431a      	orrs	r2, r3
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	68db      	ldr	r3, [r3, #12]
 800bef0:	431a      	orrs	r2, r3
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	691b      	ldr	r3, [r3, #16]
 800bef6:	431a      	orrs	r2, r3
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	695b      	ldr	r3, [r3, #20]
 800befc:	431a      	orrs	r2, r3
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	699b      	ldr	r3, [r3, #24]
 800bf02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bf06:	431a      	orrs	r2, r3
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	69db      	ldr	r3, [r3, #28]
 800bf0c:	431a      	orrs	r2, r3
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6a1b      	ldr	r3, [r3, #32]
 800bf12:	ea42 0103 	orr.w	r1, r2, r3
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	430a      	orrs	r2, r1
 800bf20:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	699b      	ldr	r3, [r3, #24]
 800bf26:	0c1b      	lsrs	r3, r3, #16
 800bf28:	f003 0104 	and.w	r1, r3, #4
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	430a      	orrs	r2, r1
 800bf36:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	69da      	ldr	r2, [r3, #28]
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bf46:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	2201      	movs	r2, #1
 800bf52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800bf56:	2300      	movs	r3, #0
}
 800bf58:	4618      	mov	r0, r3
 800bf5a:	3708      	adds	r7, #8
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	bd80      	pop	{r7, pc}

0800bf60 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800bf60:	b480      	push	{r7}
 800bf62:	b087      	sub	sp, #28
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	60f8      	str	r0, [r7, #12]
 800bf68:	60b9      	str	r1, [r7, #8]
 800bf6a:	607a      	str	r2, [r7, #4]
 800bf6c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bf78:	2b01      	cmp	r3, #1
 800bf7a:	d101      	bne.n	800bf80 <HAL_SPI_TransmitReceive_IT+0x20>
 800bf7c:	2302      	movs	r3, #2
 800bf7e:	e075      	b.n	800c06c <HAL_SPI_TransmitReceive_IT+0x10c>
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	2201      	movs	r2, #1
 800bf84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bf8e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	685b      	ldr	r3, [r3, #4]
 800bf94:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bf96:	7dbb      	ldrb	r3, [r7, #22]
 800bf98:	2b01      	cmp	r3, #1
 800bf9a:	d00d      	beq.n	800bfb8 <HAL_SPI_TransmitReceive_IT+0x58>
 800bf9c:	693b      	ldr	r3, [r7, #16]
 800bf9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bfa2:	d106      	bne.n	800bfb2 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	689b      	ldr	r3, [r3, #8]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d102      	bne.n	800bfb2 <HAL_SPI_TransmitReceive_IT+0x52>
 800bfac:	7dbb      	ldrb	r3, [r7, #22]
 800bfae:	2b04      	cmp	r3, #4
 800bfb0:	d002      	beq.n	800bfb8 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800bfb2:	2302      	movs	r3, #2
 800bfb4:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bfb6:	e054      	b.n	800c062 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800bfb8:	68bb      	ldr	r3, [r7, #8]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d005      	beq.n	800bfca <HAL_SPI_TransmitReceive_IT+0x6a>
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d002      	beq.n	800bfca <HAL_SPI_TransmitReceive_IT+0x6a>
 800bfc4:	887b      	ldrh	r3, [r7, #2]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d102      	bne.n	800bfd0 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800bfca:	2301      	movs	r3, #1
 800bfcc:	75fb      	strb	r3, [r7, #23]
    goto error;
 800bfce:	e048      	b.n	800c062 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bfd6:	b2db      	uxtb	r3, r3
 800bfd8:	2b04      	cmp	r3, #4
 800bfda:	d003      	beq.n	800bfe4 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	2205      	movs	r2, #5
 800bfe0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	68ba      	ldr	r2, [r7, #8]
 800bfee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	887a      	ldrh	r2, [r7, #2]
 800bff4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	887a      	ldrh	r2, [r7, #2]
 800bffa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	687a      	ldr	r2, [r7, #4]
 800c000:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	887a      	ldrh	r2, [r7, #2]
 800c006:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	887a      	ldrh	r2, [r7, #2]
 800c00c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	68db      	ldr	r3, [r3, #12]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d006      	beq.n	800c024 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	4a17      	ldr	r2, [pc, #92]	; (800c078 <HAL_SPI_TransmitReceive_IT+0x118>)
 800c01a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	4a17      	ldr	r2, [pc, #92]	; (800c07c <HAL_SPI_TransmitReceive_IT+0x11c>)
 800c020:	645a      	str	r2, [r3, #68]	; 0x44
 800c022:	e005      	b.n	800c030 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	4a16      	ldr	r2, [pc, #88]	; (800c080 <HAL_SPI_TransmitReceive_IT+0x120>)
 800c028:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	4a15      	ldr	r2, [pc, #84]	; (800c084 <HAL_SPI_TransmitReceive_IT+0x124>)
 800c02e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	685a      	ldr	r2, [r3, #4]
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800c03e:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c04a:	2b40      	cmp	r3, #64	; 0x40
 800c04c:	d008      	beq.n	800c060 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	681a      	ldr	r2, [r3, #0]
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c05c:	601a      	str	r2, [r3, #0]
 800c05e:	e000      	b.n	800c062 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 800c060:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	2200      	movs	r2, #0
 800c066:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c06a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c06c:	4618      	mov	r0, r3
 800c06e:	371c      	adds	r7, #28
 800c070:	46bd      	mov	sp, r7
 800c072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c076:	4770      	bx	lr
 800c078:	0800c3b1 	.word	0x0800c3b1
 800c07c:	0800c411 	.word	0x0800c411
 800c080:	0800c2ed 	.word	0x0800c2ed
 800c084:	0800c351 	.word	0x0800c351

0800c088 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b088      	sub	sp, #32
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	685b      	ldr	r3, [r3, #4]
 800c096:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	689b      	ldr	r3, [r3, #8]
 800c09e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800c0a0:	69bb      	ldr	r3, [r7, #24]
 800c0a2:	099b      	lsrs	r3, r3, #6
 800c0a4:	f003 0301 	and.w	r3, r3, #1
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d10f      	bne.n	800c0cc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800c0ac:	69bb      	ldr	r3, [r7, #24]
 800c0ae:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d00a      	beq.n	800c0cc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800c0b6:	69fb      	ldr	r3, [r7, #28]
 800c0b8:	099b      	lsrs	r3, r3, #6
 800c0ba:	f003 0301 	and.w	r3, r3, #1
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d004      	beq.n	800c0cc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	4798      	blx	r3
    return;
 800c0ca:	e0d8      	b.n	800c27e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800c0cc:	69bb      	ldr	r3, [r7, #24]
 800c0ce:	085b      	lsrs	r3, r3, #1
 800c0d0:	f003 0301 	and.w	r3, r3, #1
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d00a      	beq.n	800c0ee <HAL_SPI_IRQHandler+0x66>
 800c0d8:	69fb      	ldr	r3, [r7, #28]
 800c0da:	09db      	lsrs	r3, r3, #7
 800c0dc:	f003 0301 	and.w	r3, r3, #1
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d004      	beq.n	800c0ee <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0e8:	6878      	ldr	r0, [r7, #4]
 800c0ea:	4798      	blx	r3
    return;
 800c0ec:	e0c7      	b.n	800c27e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800c0ee:	69bb      	ldr	r3, [r7, #24]
 800c0f0:	095b      	lsrs	r3, r3, #5
 800c0f2:	f003 0301 	and.w	r3, r3, #1
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d10c      	bne.n	800c114 <HAL_SPI_IRQHandler+0x8c>
 800c0fa:	69bb      	ldr	r3, [r7, #24]
 800c0fc:	099b      	lsrs	r3, r3, #6
 800c0fe:	f003 0301 	and.w	r3, r3, #1
 800c102:	2b00      	cmp	r3, #0
 800c104:	d106      	bne.n	800c114 <HAL_SPI_IRQHandler+0x8c>
 800c106:	69bb      	ldr	r3, [r7, #24]
 800c108:	0a1b      	lsrs	r3, r3, #8
 800c10a:	f003 0301 	and.w	r3, r3, #1
 800c10e:	2b00      	cmp	r3, #0
 800c110:	f000 80b5 	beq.w	800c27e <HAL_SPI_IRQHandler+0x1f6>
 800c114:	69fb      	ldr	r3, [r7, #28]
 800c116:	095b      	lsrs	r3, r3, #5
 800c118:	f003 0301 	and.w	r3, r3, #1
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	f000 80ae 	beq.w	800c27e <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800c122:	69bb      	ldr	r3, [r7, #24]
 800c124:	099b      	lsrs	r3, r3, #6
 800c126:	f003 0301 	and.w	r3, r3, #1
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d023      	beq.n	800c176 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c134:	b2db      	uxtb	r3, r3
 800c136:	2b03      	cmp	r3, #3
 800c138:	d011      	beq.n	800c15e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c13e:	f043 0204 	orr.w	r2, r3, #4
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c146:	2300      	movs	r3, #0
 800c148:	617b      	str	r3, [r7, #20]
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	68db      	ldr	r3, [r3, #12]
 800c150:	617b      	str	r3, [r7, #20]
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	689b      	ldr	r3, [r3, #8]
 800c158:	617b      	str	r3, [r7, #20]
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	e00b      	b.n	800c176 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c15e:	2300      	movs	r3, #0
 800c160:	613b      	str	r3, [r7, #16]
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	68db      	ldr	r3, [r3, #12]
 800c168:	613b      	str	r3, [r7, #16]
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	689b      	ldr	r3, [r3, #8]
 800c170:	613b      	str	r3, [r7, #16]
 800c172:	693b      	ldr	r3, [r7, #16]
        return;
 800c174:	e083      	b.n	800c27e <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800c176:	69bb      	ldr	r3, [r7, #24]
 800c178:	095b      	lsrs	r3, r3, #5
 800c17a:	f003 0301 	and.w	r3, r3, #1
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d014      	beq.n	800c1ac <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c186:	f043 0201 	orr.w	r2, r3, #1
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c18e:	2300      	movs	r3, #0
 800c190:	60fb      	str	r3, [r7, #12]
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	689b      	ldr	r3, [r3, #8]
 800c198:	60fb      	str	r3, [r7, #12]
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	681a      	ldr	r2, [r3, #0]
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c1a8:	601a      	str	r2, [r3, #0]
 800c1aa:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800c1ac:	69bb      	ldr	r3, [r7, #24]
 800c1ae:	0a1b      	lsrs	r3, r3, #8
 800c1b0:	f003 0301 	and.w	r3, r3, #1
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d00c      	beq.n	800c1d2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1bc:	f043 0208 	orr.w	r2, r3, #8
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	60bb      	str	r3, [r7, #8]
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	689b      	ldr	r3, [r3, #8]
 800c1ce:	60bb      	str	r3, [r7, #8]
 800c1d0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d050      	beq.n	800c27c <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	685a      	ldr	r2, [r3, #4]
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c1e8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2201      	movs	r2, #1
 800c1ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800c1f2:	69fb      	ldr	r3, [r7, #28]
 800c1f4:	f003 0302 	and.w	r3, r3, #2
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d104      	bne.n	800c206 <HAL_SPI_IRQHandler+0x17e>
 800c1fc:	69fb      	ldr	r3, [r7, #28]
 800c1fe:	f003 0301 	and.w	r3, r3, #1
 800c202:	2b00      	cmp	r3, #0
 800c204:	d034      	beq.n	800c270 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	685a      	ldr	r2, [r3, #4]
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	f022 0203 	bic.w	r2, r2, #3
 800c214:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d011      	beq.n	800c242 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c222:	4a18      	ldr	r2, [pc, #96]	; (800c284 <HAL_SPI_IRQHandler+0x1fc>)
 800c224:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c22a:	4618      	mov	r0, r3
 800c22c:	f7fe f9d8 	bl	800a5e0 <HAL_DMA_Abort_IT>
 800c230:	4603      	mov	r3, r0
 800c232:	2b00      	cmp	r3, #0
 800c234:	d005      	beq.n	800c242 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c23a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c246:	2b00      	cmp	r3, #0
 800c248:	d016      	beq.n	800c278 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c24e:	4a0d      	ldr	r2, [pc, #52]	; (800c284 <HAL_SPI_IRQHandler+0x1fc>)
 800c250:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c256:	4618      	mov	r0, r3
 800c258:	f7fe f9c2 	bl	800a5e0 <HAL_DMA_Abort_IT>
 800c25c:	4603      	mov	r3, r0
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d00a      	beq.n	800c278 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c266:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800c26e:	e003      	b.n	800c278 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800c270:	6878      	ldr	r0, [r7, #4]
 800c272:	f000 f81d 	bl	800c2b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800c276:	e000      	b.n	800c27a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800c278:	bf00      	nop
    return;
 800c27a:	bf00      	nop
 800c27c:	bf00      	nop
  }
}
 800c27e:	3720      	adds	r7, #32
 800c280:	46bd      	mov	sp, r7
 800c282:	bd80      	pop	{r7, pc}
 800c284:	0800c2c5 	.word	0x0800c2c5

0800c288 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c288:	b480      	push	{r7}
 800c28a:	b083      	sub	sp, #12
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800c290:	bf00      	nop
 800c292:	370c      	adds	r7, #12
 800c294:	46bd      	mov	sp, r7
 800c296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29a:	4770      	bx	lr

0800c29c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c29c:	b480      	push	{r7}
 800c29e:	b083      	sub	sp, #12
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800c2a4:	bf00      	nop
 800c2a6:	370c      	adds	r7, #12
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ae:	4770      	bx	lr

0800c2b0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800c2b0:	b480      	push	{r7}
 800c2b2:	b083      	sub	sp, #12
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800c2b8:	bf00      	nop
 800c2ba:	370c      	adds	r7, #12
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c2:	4770      	bx	lr

0800c2c4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b084      	sub	sp, #16
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2d0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	2200      	movs	r2, #0
 800c2dc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800c2de:	68f8      	ldr	r0, [r7, #12]
 800c2e0:	f7ff ffe6 	bl	800c2b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c2e4:	bf00      	nop
 800c2e6:	3710      	adds	r7, #16
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}

0800c2ec <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b082      	sub	sp, #8
 800c2f0:	af00      	add	r7, sp, #0
 800c2f2:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	f103 020c 	add.w	r2, r3, #12
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c300:	7812      	ldrb	r2, [r2, #0]
 800c302:	b2d2      	uxtb	r2, r2
 800c304:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c30a:	1c5a      	adds	r2, r3, #1
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c314:	b29b      	uxth	r3, r3
 800c316:	3b01      	subs	r3, #1
 800c318:	b29a      	uxth	r2, r3
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c322:	b29b      	uxth	r3, r3
 800c324:	2b00      	cmp	r3, #0
 800c326:	d10f      	bne.n	800c348 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	685a      	ldr	r2, [r3, #4]
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800c336:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c33c:	b29b      	uxth	r3, r3
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d102      	bne.n	800c348 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f000 f940 	bl	800c5c8 <SPI_CloseRxTx_ISR>
    }
  }
}
 800c348:	bf00      	nop
 800c34a:	3708      	adds	r7, #8
 800c34c:	46bd      	mov	sp, r7
 800c34e:	bd80      	pop	{r7, pc}

0800c350 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b082      	sub	sp, #8
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	330c      	adds	r3, #12
 800c362:	7812      	ldrb	r2, [r2, #0]
 800c364:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c36a:	1c5a      	adds	r2, r3, #1
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c374:	b29b      	uxth	r3, r3
 800c376:	3b01      	subs	r3, #1
 800c378:	b29a      	uxth	r2, r3
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c382:	b29b      	uxth	r3, r3
 800c384:	2b00      	cmp	r3, #0
 800c386:	d10f      	bne.n	800c3a8 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	685a      	ldr	r2, [r3, #4]
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c396:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c39c:	b29b      	uxth	r3, r3
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d102      	bne.n	800c3a8 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f000 f910 	bl	800c5c8 <SPI_CloseRxTx_ISR>
    }
  }
}
 800c3a8:	bf00      	nop
 800c3aa:	3708      	adds	r7, #8
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd80      	pop	{r7, pc}

0800c3b0 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b082      	sub	sp, #8
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	68da      	ldr	r2, [r3, #12]
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3c2:	b292      	uxth	r2, r2
 800c3c4:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3ca:	1c9a      	adds	r2, r3, #2
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c3d4:	b29b      	uxth	r3, r3
 800c3d6:	3b01      	subs	r3, #1
 800c3d8:	b29a      	uxth	r2, r3
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c3e2:	b29b      	uxth	r3, r3
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d10f      	bne.n	800c408 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	685a      	ldr	r2, [r3, #4]
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c3f6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c3fc:	b29b      	uxth	r3, r3
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d102      	bne.n	800c408 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	f000 f8e0 	bl	800c5c8 <SPI_CloseRxTx_ISR>
    }
  }
}
 800c408:	bf00      	nop
 800c40a:	3708      	adds	r7, #8
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd80      	pop	{r7, pc}

0800c410 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b082      	sub	sp, #8
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c41c:	881a      	ldrh	r2, [r3, #0]
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c428:	1c9a      	adds	r2, r3, #2
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c432:	b29b      	uxth	r3, r3
 800c434:	3b01      	subs	r3, #1
 800c436:	b29a      	uxth	r2, r3
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c440:	b29b      	uxth	r3, r3
 800c442:	2b00      	cmp	r3, #0
 800c444:	d10f      	bne.n	800c466 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	685a      	ldr	r2, [r3, #4]
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c454:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c45a:	b29b      	uxth	r3, r3
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d102      	bne.n	800c466 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 800c460:	6878      	ldr	r0, [r7, #4]
 800c462:	f000 f8b1 	bl	800c5c8 <SPI_CloseRxTx_ISR>
    }
  }
}
 800c466:	bf00      	nop
 800c468:	3708      	adds	r7, #8
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bd80      	pop	{r7, pc}

0800c46e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c46e:	b580      	push	{r7, lr}
 800c470:	b084      	sub	sp, #16
 800c472:	af00      	add	r7, sp, #0
 800c474:	60f8      	str	r0, [r7, #12]
 800c476:	60b9      	str	r1, [r7, #8]
 800c478:	603b      	str	r3, [r7, #0]
 800c47a:	4613      	mov	r3, r2
 800c47c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c47e:	e04c      	b.n	800c51a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c486:	d048      	beq.n	800c51a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800c488:	f7fc fcf4 	bl	8008e74 <HAL_GetTick>
 800c48c:	4602      	mov	r2, r0
 800c48e:	69bb      	ldr	r3, [r7, #24]
 800c490:	1ad3      	subs	r3, r2, r3
 800c492:	683a      	ldr	r2, [r7, #0]
 800c494:	429a      	cmp	r2, r3
 800c496:	d902      	bls.n	800c49e <SPI_WaitFlagStateUntilTimeout+0x30>
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d13d      	bne.n	800c51a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	685a      	ldr	r2, [r3, #4]
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c4ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	685b      	ldr	r3, [r3, #4]
 800c4b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c4b6:	d111      	bne.n	800c4dc <SPI_WaitFlagStateUntilTimeout+0x6e>
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	689b      	ldr	r3, [r3, #8]
 800c4bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c4c0:	d004      	beq.n	800c4cc <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c4c2:	68fb      	ldr	r3, [r7, #12]
 800c4c4:	689b      	ldr	r3, [r3, #8]
 800c4c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c4ca:	d107      	bne.n	800c4dc <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	681a      	ldr	r2, [r3, #0]
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c4da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c4e4:	d10f      	bne.n	800c506 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	681a      	ldr	r2, [r3, #0]
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c4f4:	601a      	str	r2, [r3, #0]
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	681a      	ldr	r2, [r3, #0]
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c504:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	2201      	movs	r2, #1
 800c50a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	2200      	movs	r2, #0
 800c512:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800c516:	2303      	movs	r3, #3
 800c518:	e00f      	b.n	800c53a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	689a      	ldr	r2, [r3, #8]
 800c520:	68bb      	ldr	r3, [r7, #8]
 800c522:	4013      	ands	r3, r2
 800c524:	68ba      	ldr	r2, [r7, #8]
 800c526:	429a      	cmp	r2, r3
 800c528:	bf0c      	ite	eq
 800c52a:	2301      	moveq	r3, #1
 800c52c:	2300      	movne	r3, #0
 800c52e:	b2db      	uxtb	r3, r3
 800c530:	461a      	mov	r2, r3
 800c532:	79fb      	ldrb	r3, [r7, #7]
 800c534:	429a      	cmp	r2, r3
 800c536:	d1a3      	bne.n	800c480 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800c538:	2300      	movs	r3, #0
}
 800c53a:	4618      	mov	r0, r3
 800c53c:	3710      	adds	r7, #16
 800c53e:	46bd      	mov	sp, r7
 800c540:	bd80      	pop	{r7, pc}
	...

0800c544 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b088      	sub	sp, #32
 800c548:	af02      	add	r7, sp, #8
 800c54a:	60f8      	str	r0, [r7, #12]
 800c54c:	60b9      	str	r1, [r7, #8]
 800c54e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c550:	4b1b      	ldr	r3, [pc, #108]	; (800c5c0 <SPI_EndRxTxTransaction+0x7c>)
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	4a1b      	ldr	r2, [pc, #108]	; (800c5c4 <SPI_EndRxTxTransaction+0x80>)
 800c556:	fba2 2303 	umull	r2, r3, r2, r3
 800c55a:	0d5b      	lsrs	r3, r3, #21
 800c55c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c560:	fb02 f303 	mul.w	r3, r2, r3
 800c564:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	685b      	ldr	r3, [r3, #4]
 800c56a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c56e:	d112      	bne.n	800c596 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	9300      	str	r3, [sp, #0]
 800c574:	68bb      	ldr	r3, [r7, #8]
 800c576:	2200      	movs	r2, #0
 800c578:	2180      	movs	r1, #128	; 0x80
 800c57a:	68f8      	ldr	r0, [r7, #12]
 800c57c:	f7ff ff77 	bl	800c46e <SPI_WaitFlagStateUntilTimeout>
 800c580:	4603      	mov	r3, r0
 800c582:	2b00      	cmp	r3, #0
 800c584:	d016      	beq.n	800c5b4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c58a:	f043 0220 	orr.w	r2, r3, #32
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c592:	2303      	movs	r3, #3
 800c594:	e00f      	b.n	800c5b6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c596:	697b      	ldr	r3, [r7, #20]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d00a      	beq.n	800c5b2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800c59c:	697b      	ldr	r3, [r7, #20]
 800c59e:	3b01      	subs	r3, #1
 800c5a0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	689b      	ldr	r3, [r3, #8]
 800c5a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5ac:	2b80      	cmp	r3, #128	; 0x80
 800c5ae:	d0f2      	beq.n	800c596 <SPI_EndRxTxTransaction+0x52>
 800c5b0:	e000      	b.n	800c5b4 <SPI_EndRxTxTransaction+0x70>
        break;
 800c5b2:	bf00      	nop
  }

  return HAL_OK;
 800c5b4:	2300      	movs	r3, #0
}
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	3718      	adds	r7, #24
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	bd80      	pop	{r7, pc}
 800c5be:	bf00      	nop
 800c5c0:	20000018 	.word	0x20000018
 800c5c4:	165e9f81 	.word	0x165e9f81

0800c5c8 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b086      	sub	sp, #24
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800c5d0:	4b35      	ldr	r3, [pc, #212]	; (800c6a8 <SPI_CloseRxTx_ISR+0xe0>)
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	4a35      	ldr	r2, [pc, #212]	; (800c6ac <SPI_CloseRxTx_ISR+0xe4>)
 800c5d6:	fba2 2303 	umull	r2, r3, r2, r3
 800c5da:	0a5b      	lsrs	r3, r3, #9
 800c5dc:	2264      	movs	r2, #100	; 0x64
 800c5de:	fb02 f303 	mul.w	r3, r2, r3
 800c5e2:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800c5e4:	f7fc fc46 	bl	8008e74 <HAL_GetTick>
 800c5e8:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	685a      	ldr	r2, [r3, #4]
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	f022 0220 	bic.w	r2, r2, #32
 800c5f8:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800c5fa:	693b      	ldr	r3, [r7, #16]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d106      	bne.n	800c60e <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c604:	f043 0220 	orr.w	r2, r3, #32
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c60c:	e009      	b.n	800c622 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 800c60e:	693b      	ldr	r3, [r7, #16]
 800c610:	3b01      	subs	r3, #1
 800c612:	613b      	str	r3, [r7, #16]
  }
  while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	689b      	ldr	r3, [r3, #8]
 800c61a:	f003 0302 	and.w	r3, r3, #2
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d0eb      	beq.n	800c5fa <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800c622:	697a      	ldr	r2, [r7, #20]
 800c624:	2164      	movs	r1, #100	; 0x64
 800c626:	6878      	ldr	r0, [r7, #4]
 800c628:	f7ff ff8c 	bl	800c544 <SPI_EndRxTxTransaction>
 800c62c:	4603      	mov	r3, r0
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d005      	beq.n	800c63e <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c636:	f043 0220 	orr.w	r2, r3, #32
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	689b      	ldr	r3, [r3, #8]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d10a      	bne.n	800c65c <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c646:	2300      	movs	r3, #0
 800c648:	60fb      	str	r3, [r7, #12]
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	68db      	ldr	r3, [r3, #12]
 800c650:	60fb      	str	r3, [r7, #12]
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	689b      	ldr	r3, [r3, #8]
 800c658:	60fb      	str	r3, [r7, #12]
 800c65a:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c660:	2b00      	cmp	r3, #0
 800c662:	d115      	bne.n	800c690 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c66a:	b2db      	uxtb	r3, r3
 800c66c:	2b04      	cmp	r3, #4
 800c66e:	d107      	bne.n	800c680 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2201      	movs	r2, #1
 800c674:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800c678:	6878      	ldr	r0, [r7, #4]
 800c67a:	f7ff fe05 	bl	800c288 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800c67e:	e00e      	b.n	800c69e <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2201      	movs	r2, #1
 800c684:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 800c688:	6878      	ldr	r0, [r7, #4]
 800c68a:	f7ff fe07 	bl	800c29c <HAL_SPI_TxRxCpltCallback>
}
 800c68e:	e006      	b.n	800c69e <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	2201      	movs	r2, #1
 800c694:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 800c698:	6878      	ldr	r0, [r7, #4]
 800c69a:	f7ff fe09 	bl	800c2b0 <HAL_SPI_ErrorCallback>
}
 800c69e:	bf00      	nop
 800c6a0:	3718      	adds	r7, #24
 800c6a2:	46bd      	mov	sp, r7
 800c6a4:	bd80      	pop	{r7, pc}
 800c6a6:	bf00      	nop
 800c6a8:	20000018 	.word	0x20000018
 800c6ac:	057619f1 	.word	0x057619f1

0800c6b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b082      	sub	sp, #8
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d101      	bne.n	800c6c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c6be:	2301      	movs	r3, #1
 800c6c0:	e01d      	b.n	800c6fe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c6c8:	b2db      	uxtb	r3, r3
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d106      	bne.n	800c6dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f004 fe82 	bl	80113e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	2202      	movs	r2, #2
 800c6e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681a      	ldr	r2, [r3, #0]
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	3304      	adds	r3, #4
 800c6ec:	4619      	mov	r1, r3
 800c6ee:	4610      	mov	r0, r2
 800c6f0:	f000 fc30 	bl	800cf54 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2201      	movs	r2, #1
 800c6f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c6fc:	2300      	movs	r3, #0
}
 800c6fe:	4618      	mov	r0, r3
 800c700:	3708      	adds	r7, #8
 800c702:	46bd      	mov	sp, r7
 800c704:	bd80      	pop	{r7, pc}

0800c706 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c706:	b580      	push	{r7, lr}
 800c708:	b082      	sub	sp, #8
 800c70a:	af00      	add	r7, sp, #0
 800c70c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d101      	bne.n	800c718 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c714:	2301      	movs	r3, #1
 800c716:	e01d      	b.n	800c754 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c71e:	b2db      	uxtb	r3, r3
 800c720:	2b00      	cmp	r3, #0
 800c722:	d106      	bne.n	800c732 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	2200      	movs	r2, #0
 800c728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c72c:	6878      	ldr	r0, [r7, #4]
 800c72e:	f000 f815 	bl	800c75c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	2202      	movs	r2, #2
 800c736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	681a      	ldr	r2, [r3, #0]
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	3304      	adds	r3, #4
 800c742:	4619      	mov	r1, r3
 800c744:	4610      	mov	r0, r2
 800c746:	f000 fc05 	bl	800cf54 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	2201      	movs	r2, #1
 800c74e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c752:	2300      	movs	r3, #0
}
 800c754:	4618      	mov	r0, r3
 800c756:	3708      	adds	r7, #8
 800c758:	46bd      	mov	sp, r7
 800c75a:	bd80      	pop	{r7, pc}

0800c75c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c75c:	b480      	push	{r7}
 800c75e:	b083      	sub	sp, #12
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c764:	bf00      	nop
 800c766:	370c      	adds	r7, #12
 800c768:	46bd      	mov	sp, r7
 800c76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76e:	4770      	bx	lr

0800c770 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c770:	b580      	push	{r7, lr}
 800c772:	b084      	sub	sp, #16
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
 800c778:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800c77a:	683b      	ldr	r3, [r7, #0]
 800c77c:	2b0c      	cmp	r3, #12
 800c77e:	d841      	bhi.n	800c804 <HAL_TIM_PWM_Start_IT+0x94>
 800c780:	a201      	add	r2, pc, #4	; (adr r2, 800c788 <HAL_TIM_PWM_Start_IT+0x18>)
 800c782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c786:	bf00      	nop
 800c788:	0800c7bd 	.word	0x0800c7bd
 800c78c:	0800c805 	.word	0x0800c805
 800c790:	0800c805 	.word	0x0800c805
 800c794:	0800c805 	.word	0x0800c805
 800c798:	0800c7cf 	.word	0x0800c7cf
 800c79c:	0800c805 	.word	0x0800c805
 800c7a0:	0800c805 	.word	0x0800c805
 800c7a4:	0800c805 	.word	0x0800c805
 800c7a8:	0800c7e1 	.word	0x0800c7e1
 800c7ac:	0800c805 	.word	0x0800c805
 800c7b0:	0800c805 	.word	0x0800c805
 800c7b4:	0800c805 	.word	0x0800c805
 800c7b8:	0800c7f3 	.word	0x0800c7f3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	68da      	ldr	r2, [r3, #12]
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	f042 0202 	orr.w	r2, r2, #2
 800c7ca:	60da      	str	r2, [r3, #12]
      break;
 800c7cc:	e01b      	b.n	800c806 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	68da      	ldr	r2, [r3, #12]
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	f042 0204 	orr.w	r2, r2, #4
 800c7dc:	60da      	str	r2, [r3, #12]
      break;
 800c7de:	e012      	b.n	800c806 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	68da      	ldr	r2, [r3, #12]
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	f042 0208 	orr.w	r2, r2, #8
 800c7ee:	60da      	str	r2, [r3, #12]
      break;
 800c7f0:	e009      	b.n	800c806 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	68da      	ldr	r2, [r3, #12]
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	f042 0210 	orr.w	r2, r2, #16
 800c800:	60da      	str	r2, [r3, #12]
      break;
 800c802:	e000      	b.n	800c806 <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 800c804:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	2201      	movs	r2, #1
 800c80c:	6839      	ldr	r1, [r7, #0]
 800c80e:	4618      	mov	r0, r3
 800c810:	f000 fe8a 	bl	800d528 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	4a15      	ldr	r2, [pc, #84]	; (800c870 <HAL_TIM_PWM_Start_IT+0x100>)
 800c81a:	4293      	cmp	r3, r2
 800c81c:	d004      	beq.n	800c828 <HAL_TIM_PWM_Start_IT+0xb8>
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	4a14      	ldr	r2, [pc, #80]	; (800c874 <HAL_TIM_PWM_Start_IT+0x104>)
 800c824:	4293      	cmp	r3, r2
 800c826:	d101      	bne.n	800c82c <HAL_TIM_PWM_Start_IT+0xbc>
 800c828:	2301      	movs	r3, #1
 800c82a:	e000      	b.n	800c82e <HAL_TIM_PWM_Start_IT+0xbe>
 800c82c:	2300      	movs	r3, #0
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d007      	beq.n	800c842 <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c840:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	689b      	ldr	r3, [r3, #8]
 800c848:	f003 0307 	and.w	r3, r3, #7
 800c84c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	2b06      	cmp	r3, #6
 800c852:	d007      	beq.n	800c864 <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	681a      	ldr	r2, [r3, #0]
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	f042 0201 	orr.w	r2, r2, #1
 800c862:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c864:	2300      	movs	r3, #0
}
 800c866:	4618      	mov	r0, r3
 800c868:	3710      	adds	r7, #16
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bd80      	pop	{r7, pc}
 800c86e:	bf00      	nop
 800c870:	40010000 	.word	0x40010000
 800c874:	40010400 	.word	0x40010400

0800c878 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b082      	sub	sp, #8
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
 800c880:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	2b0c      	cmp	r3, #12
 800c886:	d841      	bhi.n	800c90c <HAL_TIM_PWM_Stop_IT+0x94>
 800c888:	a201      	add	r2, pc, #4	; (adr r2, 800c890 <HAL_TIM_PWM_Stop_IT+0x18>)
 800c88a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c88e:	bf00      	nop
 800c890:	0800c8c5 	.word	0x0800c8c5
 800c894:	0800c90d 	.word	0x0800c90d
 800c898:	0800c90d 	.word	0x0800c90d
 800c89c:	0800c90d 	.word	0x0800c90d
 800c8a0:	0800c8d7 	.word	0x0800c8d7
 800c8a4:	0800c90d 	.word	0x0800c90d
 800c8a8:	0800c90d 	.word	0x0800c90d
 800c8ac:	0800c90d 	.word	0x0800c90d
 800c8b0:	0800c8e9 	.word	0x0800c8e9
 800c8b4:	0800c90d 	.word	0x0800c90d
 800c8b8:	0800c90d 	.word	0x0800c90d
 800c8bc:	0800c90d 	.word	0x0800c90d
 800c8c0:	0800c8fb 	.word	0x0800c8fb
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	68da      	ldr	r2, [r3, #12]
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	f022 0202 	bic.w	r2, r2, #2
 800c8d2:	60da      	str	r2, [r3, #12]
      break;
 800c8d4:	e01b      	b.n	800c90e <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	68da      	ldr	r2, [r3, #12]
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	f022 0204 	bic.w	r2, r2, #4
 800c8e4:	60da      	str	r2, [r3, #12]
      break;
 800c8e6:	e012      	b.n	800c90e <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	68da      	ldr	r2, [r3, #12]
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	f022 0208 	bic.w	r2, r2, #8
 800c8f6:	60da      	str	r2, [r3, #12]
      break;
 800c8f8:	e009      	b.n	800c90e <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	68da      	ldr	r2, [r3, #12]
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	f022 0210 	bic.w	r2, r2, #16
 800c908:	60da      	str	r2, [r3, #12]
      break;
 800c90a:	e000      	b.n	800c90e <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 800c90c:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	2200      	movs	r2, #0
 800c914:	6839      	ldr	r1, [r7, #0]
 800c916:	4618      	mov	r0, r3
 800c918:	f000 fe06 	bl	800d528 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	4a20      	ldr	r2, [pc, #128]	; (800c9a4 <HAL_TIM_PWM_Stop_IT+0x12c>)
 800c922:	4293      	cmp	r3, r2
 800c924:	d004      	beq.n	800c930 <HAL_TIM_PWM_Stop_IT+0xb8>
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	4a1f      	ldr	r2, [pc, #124]	; (800c9a8 <HAL_TIM_PWM_Stop_IT+0x130>)
 800c92c:	4293      	cmp	r3, r2
 800c92e:	d101      	bne.n	800c934 <HAL_TIM_PWM_Stop_IT+0xbc>
 800c930:	2301      	movs	r3, #1
 800c932:	e000      	b.n	800c936 <HAL_TIM_PWM_Stop_IT+0xbe>
 800c934:	2300      	movs	r3, #0
 800c936:	2b00      	cmp	r3, #0
 800c938:	d017      	beq.n	800c96a <HAL_TIM_PWM_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	6a1a      	ldr	r2, [r3, #32]
 800c940:	f241 1311 	movw	r3, #4369	; 0x1111
 800c944:	4013      	ands	r3, r2
 800c946:	2b00      	cmp	r3, #0
 800c948:	d10f      	bne.n	800c96a <HAL_TIM_PWM_Stop_IT+0xf2>
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	6a1a      	ldr	r2, [r3, #32]
 800c950:	f240 4344 	movw	r3, #1092	; 0x444
 800c954:	4013      	ands	r3, r2
 800c956:	2b00      	cmp	r3, #0
 800c958:	d107      	bne.n	800c96a <HAL_TIM_PWM_Stop_IT+0xf2>
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c968:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	6a1a      	ldr	r2, [r3, #32]
 800c970:	f241 1311 	movw	r3, #4369	; 0x1111
 800c974:	4013      	ands	r3, r2
 800c976:	2b00      	cmp	r3, #0
 800c978:	d10f      	bne.n	800c99a <HAL_TIM_PWM_Stop_IT+0x122>
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	6a1a      	ldr	r2, [r3, #32]
 800c980:	f240 4344 	movw	r3, #1092	; 0x444
 800c984:	4013      	ands	r3, r2
 800c986:	2b00      	cmp	r3, #0
 800c988:	d107      	bne.n	800c99a <HAL_TIM_PWM_Stop_IT+0x122>
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	681a      	ldr	r2, [r3, #0]
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	f022 0201 	bic.w	r2, r2, #1
 800c998:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c99a:	2300      	movs	r3, #0
}
 800c99c:	4618      	mov	r0, r3
 800c99e:	3708      	adds	r7, #8
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bd80      	pop	{r7, pc}
 800c9a4:	40010000 	.word	0x40010000
 800c9a8:	40010400 	.word	0x40010400

0800c9ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b082      	sub	sp, #8
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	691b      	ldr	r3, [r3, #16]
 800c9ba:	f003 0302 	and.w	r3, r3, #2
 800c9be:	2b02      	cmp	r3, #2
 800c9c0:	d122      	bne.n	800ca08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	68db      	ldr	r3, [r3, #12]
 800c9c8:	f003 0302 	and.w	r3, r3, #2
 800c9cc:	2b02      	cmp	r3, #2
 800c9ce:	d11b      	bne.n	800ca08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	f06f 0202 	mvn.w	r2, #2
 800c9d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	2201      	movs	r2, #1
 800c9de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	699b      	ldr	r3, [r3, #24]
 800c9e6:	f003 0303 	and.w	r3, r3, #3
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d003      	beq.n	800c9f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c9ee:	6878      	ldr	r0, [r7, #4]
 800c9f0:	f000 fa92 	bl	800cf18 <HAL_TIM_IC_CaptureCallback>
 800c9f4:	e005      	b.n	800ca02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c9f6:	6878      	ldr	r0, [r7, #4]
 800c9f8:	f000 fa84 	bl	800cf04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c9fc:	6878      	ldr	r0, [r7, #4]
 800c9fe:	f000 fa95 	bl	800cf2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	2200      	movs	r2, #0
 800ca06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	691b      	ldr	r3, [r3, #16]
 800ca0e:	f003 0304 	and.w	r3, r3, #4
 800ca12:	2b04      	cmp	r3, #4
 800ca14:	d122      	bne.n	800ca5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	68db      	ldr	r3, [r3, #12]
 800ca1c:	f003 0304 	and.w	r3, r3, #4
 800ca20:	2b04      	cmp	r3, #4
 800ca22:	d11b      	bne.n	800ca5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	f06f 0204 	mvn.w	r2, #4
 800ca2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	2202      	movs	r2, #2
 800ca32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	699b      	ldr	r3, [r3, #24]
 800ca3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d003      	beq.n	800ca4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ca42:	6878      	ldr	r0, [r7, #4]
 800ca44:	f000 fa68 	bl	800cf18 <HAL_TIM_IC_CaptureCallback>
 800ca48:	e005      	b.n	800ca56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca4a:	6878      	ldr	r0, [r7, #4]
 800ca4c:	f000 fa5a 	bl	800cf04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca50:	6878      	ldr	r0, [r7, #4]
 800ca52:	f000 fa6b 	bl	800cf2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	2200      	movs	r2, #0
 800ca5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	691b      	ldr	r3, [r3, #16]
 800ca62:	f003 0308 	and.w	r3, r3, #8
 800ca66:	2b08      	cmp	r3, #8
 800ca68:	d122      	bne.n	800cab0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	68db      	ldr	r3, [r3, #12]
 800ca70:	f003 0308 	and.w	r3, r3, #8
 800ca74:	2b08      	cmp	r3, #8
 800ca76:	d11b      	bne.n	800cab0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	f06f 0208 	mvn.w	r2, #8
 800ca80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	2204      	movs	r2, #4
 800ca86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	69db      	ldr	r3, [r3, #28]
 800ca8e:	f003 0303 	and.w	r3, r3, #3
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d003      	beq.n	800ca9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ca96:	6878      	ldr	r0, [r7, #4]
 800ca98:	f000 fa3e 	bl	800cf18 <HAL_TIM_IC_CaptureCallback>
 800ca9c:	e005      	b.n	800caaa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca9e:	6878      	ldr	r0, [r7, #4]
 800caa0:	f000 fa30 	bl	800cf04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	f000 fa41 	bl	800cf2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	2200      	movs	r2, #0
 800caae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	691b      	ldr	r3, [r3, #16]
 800cab6:	f003 0310 	and.w	r3, r3, #16
 800caba:	2b10      	cmp	r3, #16
 800cabc:	d122      	bne.n	800cb04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	68db      	ldr	r3, [r3, #12]
 800cac4:	f003 0310 	and.w	r3, r3, #16
 800cac8:	2b10      	cmp	r3, #16
 800caca:	d11b      	bne.n	800cb04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	f06f 0210 	mvn.w	r2, #16
 800cad4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	2208      	movs	r2, #8
 800cada:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	69db      	ldr	r3, [r3, #28]
 800cae2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d003      	beq.n	800caf2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800caea:	6878      	ldr	r0, [r7, #4]
 800caec:	f000 fa14 	bl	800cf18 <HAL_TIM_IC_CaptureCallback>
 800caf0:	e005      	b.n	800cafe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800caf2:	6878      	ldr	r0, [r7, #4]
 800caf4:	f000 fa06 	bl	800cf04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	f000 fa17 	bl	800cf2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	2200      	movs	r2, #0
 800cb02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	691b      	ldr	r3, [r3, #16]
 800cb0a:	f003 0301 	and.w	r3, r3, #1
 800cb0e:	2b01      	cmp	r3, #1
 800cb10:	d10e      	bne.n	800cb30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	68db      	ldr	r3, [r3, #12]
 800cb18:	f003 0301 	and.w	r3, r3, #1
 800cb1c:	2b01      	cmp	r3, #1
 800cb1e:	d107      	bne.n	800cb30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	f06f 0201 	mvn.w	r2, #1
 800cb28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f004 fd14 	bl	8011558 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	691b      	ldr	r3, [r3, #16]
 800cb36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb3a:	2b80      	cmp	r3, #128	; 0x80
 800cb3c:	d10e      	bne.n	800cb5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	68db      	ldr	r3, [r3, #12]
 800cb44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb48:	2b80      	cmp	r3, #128	; 0x80
 800cb4a:	d107      	bne.n	800cb5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800cb54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800cb56:	6878      	ldr	r0, [r7, #4]
 800cb58:	f000 fe77 	bl	800d84a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	691b      	ldr	r3, [r3, #16]
 800cb62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb66:	2b40      	cmp	r3, #64	; 0x40
 800cb68:	d10e      	bne.n	800cb88 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	68db      	ldr	r3, [r3, #12]
 800cb70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb74:	2b40      	cmp	r3, #64	; 0x40
 800cb76:	d107      	bne.n	800cb88 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cb80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cb82:	6878      	ldr	r0, [r7, #4]
 800cb84:	f000 f9dc 	bl	800cf40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	691b      	ldr	r3, [r3, #16]
 800cb8e:	f003 0320 	and.w	r3, r3, #32
 800cb92:	2b20      	cmp	r3, #32
 800cb94:	d10e      	bne.n	800cbb4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	68db      	ldr	r3, [r3, #12]
 800cb9c:	f003 0320 	and.w	r3, r3, #32
 800cba0:	2b20      	cmp	r3, #32
 800cba2:	d107      	bne.n	800cbb4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	f06f 0220 	mvn.w	r2, #32
 800cbac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cbae:	6878      	ldr	r0, [r7, #4]
 800cbb0:	f000 fe41 	bl	800d836 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800cbb4:	bf00      	nop
 800cbb6:	3708      	adds	r7, #8
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}

0800cbbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b084      	sub	sp, #16
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	60f8      	str	r0, [r7, #12]
 800cbc4:	60b9      	str	r1, [r7, #8]
 800cbc6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cbce:	2b01      	cmp	r3, #1
 800cbd0:	d101      	bne.n	800cbd6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800cbd2:	2302      	movs	r3, #2
 800cbd4:	e0b4      	b.n	800cd40 <HAL_TIM_PWM_ConfigChannel+0x184>
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	2201      	movs	r2, #1
 800cbda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	2202      	movs	r2, #2
 800cbe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2b0c      	cmp	r3, #12
 800cbea:	f200 809f 	bhi.w	800cd2c <HAL_TIM_PWM_ConfigChannel+0x170>
 800cbee:	a201      	add	r2, pc, #4	; (adr r2, 800cbf4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800cbf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbf4:	0800cc29 	.word	0x0800cc29
 800cbf8:	0800cd2d 	.word	0x0800cd2d
 800cbfc:	0800cd2d 	.word	0x0800cd2d
 800cc00:	0800cd2d 	.word	0x0800cd2d
 800cc04:	0800cc69 	.word	0x0800cc69
 800cc08:	0800cd2d 	.word	0x0800cd2d
 800cc0c:	0800cd2d 	.word	0x0800cd2d
 800cc10:	0800cd2d 	.word	0x0800cd2d
 800cc14:	0800ccab 	.word	0x0800ccab
 800cc18:	0800cd2d 	.word	0x0800cd2d
 800cc1c:	0800cd2d 	.word	0x0800cd2d
 800cc20:	0800cd2d 	.word	0x0800cd2d
 800cc24:	0800cceb 	.word	0x0800cceb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	68b9      	ldr	r1, [r7, #8]
 800cc2e:	4618      	mov	r0, r3
 800cc30:	f000 fa30 	bl	800d094 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	699a      	ldr	r2, [r3, #24]
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	f042 0208 	orr.w	r2, r2, #8
 800cc42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	699a      	ldr	r2, [r3, #24]
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	f022 0204 	bic.w	r2, r2, #4
 800cc52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	6999      	ldr	r1, [r3, #24]
 800cc5a:	68bb      	ldr	r3, [r7, #8]
 800cc5c:	691a      	ldr	r2, [r3, #16]
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	430a      	orrs	r2, r1
 800cc64:	619a      	str	r2, [r3, #24]
      break;
 800cc66:	e062      	b.n	800cd2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	68b9      	ldr	r1, [r7, #8]
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f000 fa80 	bl	800d174 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	699a      	ldr	r2, [r3, #24]
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cc82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	699a      	ldr	r2, [r3, #24]
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cc92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	6999      	ldr	r1, [r3, #24]
 800cc9a:	68bb      	ldr	r3, [r7, #8]
 800cc9c:	691b      	ldr	r3, [r3, #16]
 800cc9e:	021a      	lsls	r2, r3, #8
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	430a      	orrs	r2, r1
 800cca6:	619a      	str	r2, [r3, #24]
      break;
 800cca8:	e041      	b.n	800cd2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	68b9      	ldr	r1, [r7, #8]
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	f000 fad5 	bl	800d260 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	69da      	ldr	r2, [r3, #28]
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	f042 0208 	orr.w	r2, r2, #8
 800ccc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	69da      	ldr	r2, [r3, #28]
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	f022 0204 	bic.w	r2, r2, #4
 800ccd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	69d9      	ldr	r1, [r3, #28]
 800ccdc:	68bb      	ldr	r3, [r7, #8]
 800ccde:	691a      	ldr	r2, [r3, #16]
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	430a      	orrs	r2, r1
 800cce6:	61da      	str	r2, [r3, #28]
      break;
 800cce8:	e021      	b.n	800cd2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	68b9      	ldr	r1, [r7, #8]
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	f000 fb29 	bl	800d348 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ccf6:	68fb      	ldr	r3, [r7, #12]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	69da      	ldr	r2, [r3, #28]
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cd04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	69da      	ldr	r2, [r3, #28]
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cd14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	69d9      	ldr	r1, [r3, #28]
 800cd1c:	68bb      	ldr	r3, [r7, #8]
 800cd1e:	691b      	ldr	r3, [r3, #16]
 800cd20:	021a      	lsls	r2, r3, #8
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	430a      	orrs	r2, r1
 800cd28:	61da      	str	r2, [r3, #28]
      break;
 800cd2a:	e000      	b.n	800cd2e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800cd2c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	2201      	movs	r2, #1
 800cd32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	2200      	movs	r2, #0
 800cd3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cd3e:	2300      	movs	r3, #0
}
 800cd40:	4618      	mov	r0, r3
 800cd42:	3710      	adds	r7, #16
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}

0800cd48 <HAL_TIM_GenerateEvent>:
  *         supporting a break input.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 800cd48:	b480      	push	{r7}
 800cd4a:	b083      	sub	sp, #12
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
 800cd50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cd58:	2b01      	cmp	r3, #1
 800cd5a:	d101      	bne.n	800cd60 <HAL_TIM_GenerateEvent+0x18>
 800cd5c:	2302      	movs	r3, #2
 800cd5e:	e014      	b.n	800cd8a <HAL_TIM_GenerateEvent+0x42>
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2201      	movs	r2, #1
 800cd64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2202      	movs	r2, #2
 800cd6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	683a      	ldr	r2, [r7, #0]
 800cd76:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2201      	movs	r2, #1
 800cd7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2200      	movs	r2, #0
 800cd84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800cd88:	2300      	movs	r3, #0
}
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	370c      	adds	r7, #12
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd94:	4770      	bx	lr

0800cd96 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cd96:	b580      	push	{r7, lr}
 800cd98:	b084      	sub	sp, #16
 800cd9a:	af00      	add	r7, sp, #0
 800cd9c:	6078      	str	r0, [r7, #4]
 800cd9e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cda6:	2b01      	cmp	r3, #1
 800cda8:	d101      	bne.n	800cdae <HAL_TIM_ConfigClockSource+0x18>
 800cdaa:	2302      	movs	r3, #2
 800cdac:	e0a6      	b.n	800cefc <HAL_TIM_ConfigClockSource+0x166>
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	2201      	movs	r2, #1
 800cdb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	2202      	movs	r2, #2
 800cdba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	689b      	ldr	r3, [r3, #8]
 800cdc4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800cdcc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cdd4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	68fa      	ldr	r2, [r7, #12]
 800cddc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cdde:	683b      	ldr	r3, [r7, #0]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	2b40      	cmp	r3, #64	; 0x40
 800cde4:	d067      	beq.n	800ceb6 <HAL_TIM_ConfigClockSource+0x120>
 800cde6:	2b40      	cmp	r3, #64	; 0x40
 800cde8:	d80b      	bhi.n	800ce02 <HAL_TIM_ConfigClockSource+0x6c>
 800cdea:	2b10      	cmp	r3, #16
 800cdec:	d073      	beq.n	800ced6 <HAL_TIM_ConfigClockSource+0x140>
 800cdee:	2b10      	cmp	r3, #16
 800cdf0:	d802      	bhi.n	800cdf8 <HAL_TIM_ConfigClockSource+0x62>
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d06f      	beq.n	800ced6 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800cdf6:	e078      	b.n	800ceea <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800cdf8:	2b20      	cmp	r3, #32
 800cdfa:	d06c      	beq.n	800ced6 <HAL_TIM_ConfigClockSource+0x140>
 800cdfc:	2b30      	cmp	r3, #48	; 0x30
 800cdfe:	d06a      	beq.n	800ced6 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800ce00:	e073      	b.n	800ceea <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800ce02:	2b70      	cmp	r3, #112	; 0x70
 800ce04:	d00d      	beq.n	800ce22 <HAL_TIM_ConfigClockSource+0x8c>
 800ce06:	2b70      	cmp	r3, #112	; 0x70
 800ce08:	d804      	bhi.n	800ce14 <HAL_TIM_ConfigClockSource+0x7e>
 800ce0a:	2b50      	cmp	r3, #80	; 0x50
 800ce0c:	d033      	beq.n	800ce76 <HAL_TIM_ConfigClockSource+0xe0>
 800ce0e:	2b60      	cmp	r3, #96	; 0x60
 800ce10:	d041      	beq.n	800ce96 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800ce12:	e06a      	b.n	800ceea <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800ce14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce18:	d066      	beq.n	800cee8 <HAL_TIM_ConfigClockSource+0x152>
 800ce1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ce1e:	d017      	beq.n	800ce50 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800ce20:	e063      	b.n	800ceea <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	6818      	ldr	r0, [r3, #0]
 800ce26:	683b      	ldr	r3, [r7, #0]
 800ce28:	6899      	ldr	r1, [r3, #8]
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	685a      	ldr	r2, [r3, #4]
 800ce2e:	683b      	ldr	r3, [r7, #0]
 800ce30:	68db      	ldr	r3, [r3, #12]
 800ce32:	f000 fb59 	bl	800d4e8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	689b      	ldr	r3, [r3, #8]
 800ce3c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ce44:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	68fa      	ldr	r2, [r7, #12]
 800ce4c:	609a      	str	r2, [r3, #8]
      break;
 800ce4e:	e04c      	b.n	800ceea <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	6818      	ldr	r0, [r3, #0]
 800ce54:	683b      	ldr	r3, [r7, #0]
 800ce56:	6899      	ldr	r1, [r3, #8]
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	685a      	ldr	r2, [r3, #4]
 800ce5c:	683b      	ldr	r3, [r7, #0]
 800ce5e:	68db      	ldr	r3, [r3, #12]
 800ce60:	f000 fb42 	bl	800d4e8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	689a      	ldr	r2, [r3, #8]
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ce72:	609a      	str	r2, [r3, #8]
      break;
 800ce74:	e039      	b.n	800ceea <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	6818      	ldr	r0, [r3, #0]
 800ce7a:	683b      	ldr	r3, [r7, #0]
 800ce7c:	6859      	ldr	r1, [r3, #4]
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	68db      	ldr	r3, [r3, #12]
 800ce82:	461a      	mov	r2, r3
 800ce84:	f000 fab6 	bl	800d3f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	2150      	movs	r1, #80	; 0x50
 800ce8e:	4618      	mov	r0, r3
 800ce90:	f000 fb0f 	bl	800d4b2 <TIM_ITRx_SetConfig>
      break;
 800ce94:	e029      	b.n	800ceea <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	6818      	ldr	r0, [r3, #0]
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	6859      	ldr	r1, [r3, #4]
 800ce9e:	683b      	ldr	r3, [r7, #0]
 800cea0:	68db      	ldr	r3, [r3, #12]
 800cea2:	461a      	mov	r2, r3
 800cea4:	f000 fad5 	bl	800d452 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	2160      	movs	r1, #96	; 0x60
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f000 faff 	bl	800d4b2 <TIM_ITRx_SetConfig>
      break;
 800ceb4:	e019      	b.n	800ceea <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	6818      	ldr	r0, [r3, #0]
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	6859      	ldr	r1, [r3, #4]
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	68db      	ldr	r3, [r3, #12]
 800cec2:	461a      	mov	r2, r3
 800cec4:	f000 fa96 	bl	800d3f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	2140      	movs	r1, #64	; 0x40
 800cece:	4618      	mov	r0, r3
 800ced0:	f000 faef 	bl	800d4b2 <TIM_ITRx_SetConfig>
      break;
 800ced4:	e009      	b.n	800ceea <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681a      	ldr	r2, [r3, #0]
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	4619      	mov	r1, r3
 800cee0:	4610      	mov	r0, r2
 800cee2:	f000 fae6 	bl	800d4b2 <TIM_ITRx_SetConfig>
      break;
 800cee6:	e000      	b.n	800ceea <HAL_TIM_ConfigClockSource+0x154>
      break;
 800cee8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	2201      	movs	r2, #1
 800ceee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	2200      	movs	r2, #0
 800cef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cefa:	2300      	movs	r3, #0
}
 800cefc:	4618      	mov	r0, r3
 800cefe:	3710      	adds	r7, #16
 800cf00:	46bd      	mov	sp, r7
 800cf02:	bd80      	pop	{r7, pc}

0800cf04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800cf04:	b480      	push	{r7}
 800cf06:	b083      	sub	sp, #12
 800cf08:	af00      	add	r7, sp, #0
 800cf0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800cf0c:	bf00      	nop
 800cf0e:	370c      	adds	r7, #12
 800cf10:	46bd      	mov	sp, r7
 800cf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf16:	4770      	bx	lr

0800cf18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800cf18:	b480      	push	{r7}
 800cf1a:	b083      	sub	sp, #12
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800cf20:	bf00      	nop
 800cf22:	370c      	adds	r7, #12
 800cf24:	46bd      	mov	sp, r7
 800cf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2a:	4770      	bx	lr

0800cf2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800cf2c:	b480      	push	{r7}
 800cf2e:	b083      	sub	sp, #12
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800cf34:	bf00      	nop
 800cf36:	370c      	adds	r7, #12
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3e:	4770      	bx	lr

0800cf40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800cf40:	b480      	push	{r7}
 800cf42:	b083      	sub	sp, #12
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800cf48:	bf00      	nop
 800cf4a:	370c      	adds	r7, #12
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf52:	4770      	bx	lr

0800cf54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800cf54:	b480      	push	{r7}
 800cf56:	b085      	sub	sp, #20
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
 800cf5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	4a40      	ldr	r2, [pc, #256]	; (800d068 <TIM_Base_SetConfig+0x114>)
 800cf68:	4293      	cmp	r3, r2
 800cf6a:	d013      	beq.n	800cf94 <TIM_Base_SetConfig+0x40>
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf72:	d00f      	beq.n	800cf94 <TIM_Base_SetConfig+0x40>
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	4a3d      	ldr	r2, [pc, #244]	; (800d06c <TIM_Base_SetConfig+0x118>)
 800cf78:	4293      	cmp	r3, r2
 800cf7a:	d00b      	beq.n	800cf94 <TIM_Base_SetConfig+0x40>
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	4a3c      	ldr	r2, [pc, #240]	; (800d070 <TIM_Base_SetConfig+0x11c>)
 800cf80:	4293      	cmp	r3, r2
 800cf82:	d007      	beq.n	800cf94 <TIM_Base_SetConfig+0x40>
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	4a3b      	ldr	r2, [pc, #236]	; (800d074 <TIM_Base_SetConfig+0x120>)
 800cf88:	4293      	cmp	r3, r2
 800cf8a:	d003      	beq.n	800cf94 <TIM_Base_SetConfig+0x40>
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	4a3a      	ldr	r2, [pc, #232]	; (800d078 <TIM_Base_SetConfig+0x124>)
 800cf90:	4293      	cmp	r3, r2
 800cf92:	d108      	bne.n	800cfa6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cf9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cf9c:	683b      	ldr	r3, [r7, #0]
 800cf9e:	685b      	ldr	r3, [r3, #4]
 800cfa0:	68fa      	ldr	r2, [r7, #12]
 800cfa2:	4313      	orrs	r3, r2
 800cfa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	4a2f      	ldr	r2, [pc, #188]	; (800d068 <TIM_Base_SetConfig+0x114>)
 800cfaa:	4293      	cmp	r3, r2
 800cfac:	d02b      	beq.n	800d006 <TIM_Base_SetConfig+0xb2>
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cfb4:	d027      	beq.n	800d006 <TIM_Base_SetConfig+0xb2>
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	4a2c      	ldr	r2, [pc, #176]	; (800d06c <TIM_Base_SetConfig+0x118>)
 800cfba:	4293      	cmp	r3, r2
 800cfbc:	d023      	beq.n	800d006 <TIM_Base_SetConfig+0xb2>
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	4a2b      	ldr	r2, [pc, #172]	; (800d070 <TIM_Base_SetConfig+0x11c>)
 800cfc2:	4293      	cmp	r3, r2
 800cfc4:	d01f      	beq.n	800d006 <TIM_Base_SetConfig+0xb2>
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	4a2a      	ldr	r2, [pc, #168]	; (800d074 <TIM_Base_SetConfig+0x120>)
 800cfca:	4293      	cmp	r3, r2
 800cfcc:	d01b      	beq.n	800d006 <TIM_Base_SetConfig+0xb2>
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	4a29      	ldr	r2, [pc, #164]	; (800d078 <TIM_Base_SetConfig+0x124>)
 800cfd2:	4293      	cmp	r3, r2
 800cfd4:	d017      	beq.n	800d006 <TIM_Base_SetConfig+0xb2>
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	4a28      	ldr	r2, [pc, #160]	; (800d07c <TIM_Base_SetConfig+0x128>)
 800cfda:	4293      	cmp	r3, r2
 800cfdc:	d013      	beq.n	800d006 <TIM_Base_SetConfig+0xb2>
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	4a27      	ldr	r2, [pc, #156]	; (800d080 <TIM_Base_SetConfig+0x12c>)
 800cfe2:	4293      	cmp	r3, r2
 800cfe4:	d00f      	beq.n	800d006 <TIM_Base_SetConfig+0xb2>
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	4a26      	ldr	r2, [pc, #152]	; (800d084 <TIM_Base_SetConfig+0x130>)
 800cfea:	4293      	cmp	r3, r2
 800cfec:	d00b      	beq.n	800d006 <TIM_Base_SetConfig+0xb2>
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	4a25      	ldr	r2, [pc, #148]	; (800d088 <TIM_Base_SetConfig+0x134>)
 800cff2:	4293      	cmp	r3, r2
 800cff4:	d007      	beq.n	800d006 <TIM_Base_SetConfig+0xb2>
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	4a24      	ldr	r2, [pc, #144]	; (800d08c <TIM_Base_SetConfig+0x138>)
 800cffa:	4293      	cmp	r3, r2
 800cffc:	d003      	beq.n	800d006 <TIM_Base_SetConfig+0xb2>
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	4a23      	ldr	r2, [pc, #140]	; (800d090 <TIM_Base_SetConfig+0x13c>)
 800d002:	4293      	cmp	r3, r2
 800d004:	d108      	bne.n	800d018 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d006:	68fb      	ldr	r3, [r7, #12]
 800d008:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d00c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	68db      	ldr	r3, [r3, #12]
 800d012:	68fa      	ldr	r2, [r7, #12]
 800d014:	4313      	orrs	r3, r2
 800d016:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d01e:	683b      	ldr	r3, [r7, #0]
 800d020:	695b      	ldr	r3, [r3, #20]
 800d022:	4313      	orrs	r3, r2
 800d024:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	68fa      	ldr	r2, [r7, #12]
 800d02a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	689a      	ldr	r2, [r3, #8]
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d034:	683b      	ldr	r3, [r7, #0]
 800d036:	681a      	ldr	r2, [r3, #0]
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	4a0a      	ldr	r2, [pc, #40]	; (800d068 <TIM_Base_SetConfig+0x114>)
 800d040:	4293      	cmp	r3, r2
 800d042:	d003      	beq.n	800d04c <TIM_Base_SetConfig+0xf8>
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	4a0c      	ldr	r2, [pc, #48]	; (800d078 <TIM_Base_SetConfig+0x124>)
 800d048:	4293      	cmp	r3, r2
 800d04a:	d103      	bne.n	800d054 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d04c:	683b      	ldr	r3, [r7, #0]
 800d04e:	691a      	ldr	r2, [r3, #16]
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	2201      	movs	r2, #1
 800d058:	615a      	str	r2, [r3, #20]
}
 800d05a:	bf00      	nop
 800d05c:	3714      	adds	r7, #20
 800d05e:	46bd      	mov	sp, r7
 800d060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d064:	4770      	bx	lr
 800d066:	bf00      	nop
 800d068:	40010000 	.word	0x40010000
 800d06c:	40000400 	.word	0x40000400
 800d070:	40000800 	.word	0x40000800
 800d074:	40000c00 	.word	0x40000c00
 800d078:	40010400 	.word	0x40010400
 800d07c:	40014000 	.word	0x40014000
 800d080:	40014400 	.word	0x40014400
 800d084:	40014800 	.word	0x40014800
 800d088:	40001800 	.word	0x40001800
 800d08c:	40001c00 	.word	0x40001c00
 800d090:	40002000 	.word	0x40002000

0800d094 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d094:	b480      	push	{r7}
 800d096:	b087      	sub	sp, #28
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
 800d09c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	6a1b      	ldr	r3, [r3, #32]
 800d0a2:	f023 0201 	bic.w	r2, r3, #1
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	6a1b      	ldr	r3, [r3, #32]
 800d0ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	685b      	ldr	r3, [r3, #4]
 800d0b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	699b      	ldr	r3, [r3, #24]
 800d0ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d0c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	f023 0303 	bic.w	r3, r3, #3
 800d0ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	68fa      	ldr	r2, [r7, #12]
 800d0d2:	4313      	orrs	r3, r2
 800d0d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d0d6:	697b      	ldr	r3, [r7, #20]
 800d0d8:	f023 0302 	bic.w	r3, r3, #2
 800d0dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	689b      	ldr	r3, [r3, #8]
 800d0e2:	697a      	ldr	r2, [r7, #20]
 800d0e4:	4313      	orrs	r3, r2
 800d0e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	4a20      	ldr	r2, [pc, #128]	; (800d16c <TIM_OC1_SetConfig+0xd8>)
 800d0ec:	4293      	cmp	r3, r2
 800d0ee:	d003      	beq.n	800d0f8 <TIM_OC1_SetConfig+0x64>
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	4a1f      	ldr	r2, [pc, #124]	; (800d170 <TIM_OC1_SetConfig+0xdc>)
 800d0f4:	4293      	cmp	r3, r2
 800d0f6:	d10c      	bne.n	800d112 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d0f8:	697b      	ldr	r3, [r7, #20]
 800d0fa:	f023 0308 	bic.w	r3, r3, #8
 800d0fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	68db      	ldr	r3, [r3, #12]
 800d104:	697a      	ldr	r2, [r7, #20]
 800d106:	4313      	orrs	r3, r2
 800d108:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d10a:	697b      	ldr	r3, [r7, #20]
 800d10c:	f023 0304 	bic.w	r3, r3, #4
 800d110:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	4a15      	ldr	r2, [pc, #84]	; (800d16c <TIM_OC1_SetConfig+0xd8>)
 800d116:	4293      	cmp	r3, r2
 800d118:	d003      	beq.n	800d122 <TIM_OC1_SetConfig+0x8e>
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	4a14      	ldr	r2, [pc, #80]	; (800d170 <TIM_OC1_SetConfig+0xdc>)
 800d11e:	4293      	cmp	r3, r2
 800d120:	d111      	bne.n	800d146 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d122:	693b      	ldr	r3, [r7, #16]
 800d124:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d128:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d12a:	693b      	ldr	r3, [r7, #16]
 800d12c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d130:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	695b      	ldr	r3, [r3, #20]
 800d136:	693a      	ldr	r2, [r7, #16]
 800d138:	4313      	orrs	r3, r2
 800d13a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d13c:	683b      	ldr	r3, [r7, #0]
 800d13e:	699b      	ldr	r3, [r3, #24]
 800d140:	693a      	ldr	r2, [r7, #16]
 800d142:	4313      	orrs	r3, r2
 800d144:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	693a      	ldr	r2, [r7, #16]
 800d14a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	68fa      	ldr	r2, [r7, #12]
 800d150:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d152:	683b      	ldr	r3, [r7, #0]
 800d154:	685a      	ldr	r2, [r3, #4]
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	697a      	ldr	r2, [r7, #20]
 800d15e:	621a      	str	r2, [r3, #32]
}
 800d160:	bf00      	nop
 800d162:	371c      	adds	r7, #28
 800d164:	46bd      	mov	sp, r7
 800d166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16a:	4770      	bx	lr
 800d16c:	40010000 	.word	0x40010000
 800d170:	40010400 	.word	0x40010400

0800d174 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d174:	b480      	push	{r7}
 800d176:	b087      	sub	sp, #28
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
 800d17c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	6a1b      	ldr	r3, [r3, #32]
 800d182:	f023 0210 	bic.w	r2, r3, #16
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	6a1b      	ldr	r3, [r3, #32]
 800d18e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	685b      	ldr	r3, [r3, #4]
 800d194:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	699b      	ldr	r3, [r3, #24]
 800d19a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d1a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d1aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d1ac:	683b      	ldr	r3, [r7, #0]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	021b      	lsls	r3, r3, #8
 800d1b2:	68fa      	ldr	r2, [r7, #12]
 800d1b4:	4313      	orrs	r3, r2
 800d1b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d1b8:	697b      	ldr	r3, [r7, #20]
 800d1ba:	f023 0320 	bic.w	r3, r3, #32
 800d1be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d1c0:	683b      	ldr	r3, [r7, #0]
 800d1c2:	689b      	ldr	r3, [r3, #8]
 800d1c4:	011b      	lsls	r3, r3, #4
 800d1c6:	697a      	ldr	r2, [r7, #20]
 800d1c8:	4313      	orrs	r3, r2
 800d1ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	4a22      	ldr	r2, [pc, #136]	; (800d258 <TIM_OC2_SetConfig+0xe4>)
 800d1d0:	4293      	cmp	r3, r2
 800d1d2:	d003      	beq.n	800d1dc <TIM_OC2_SetConfig+0x68>
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	4a21      	ldr	r2, [pc, #132]	; (800d25c <TIM_OC2_SetConfig+0xe8>)
 800d1d8:	4293      	cmp	r3, r2
 800d1da:	d10d      	bne.n	800d1f8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d1dc:	697b      	ldr	r3, [r7, #20]
 800d1de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d1e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d1e4:	683b      	ldr	r3, [r7, #0]
 800d1e6:	68db      	ldr	r3, [r3, #12]
 800d1e8:	011b      	lsls	r3, r3, #4
 800d1ea:	697a      	ldr	r2, [r7, #20]
 800d1ec:	4313      	orrs	r3, r2
 800d1ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d1f0:	697b      	ldr	r3, [r7, #20]
 800d1f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d1f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	4a17      	ldr	r2, [pc, #92]	; (800d258 <TIM_OC2_SetConfig+0xe4>)
 800d1fc:	4293      	cmp	r3, r2
 800d1fe:	d003      	beq.n	800d208 <TIM_OC2_SetConfig+0x94>
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	4a16      	ldr	r2, [pc, #88]	; (800d25c <TIM_OC2_SetConfig+0xe8>)
 800d204:	4293      	cmp	r3, r2
 800d206:	d113      	bne.n	800d230 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d208:	693b      	ldr	r3, [r7, #16]
 800d20a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d20e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d210:	693b      	ldr	r3, [r7, #16]
 800d212:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d216:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	695b      	ldr	r3, [r3, #20]
 800d21c:	009b      	lsls	r3, r3, #2
 800d21e:	693a      	ldr	r2, [r7, #16]
 800d220:	4313      	orrs	r3, r2
 800d222:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d224:	683b      	ldr	r3, [r7, #0]
 800d226:	699b      	ldr	r3, [r3, #24]
 800d228:	009b      	lsls	r3, r3, #2
 800d22a:	693a      	ldr	r2, [r7, #16]
 800d22c:	4313      	orrs	r3, r2
 800d22e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	693a      	ldr	r2, [r7, #16]
 800d234:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	68fa      	ldr	r2, [r7, #12]
 800d23a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d23c:	683b      	ldr	r3, [r7, #0]
 800d23e:	685a      	ldr	r2, [r3, #4]
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	697a      	ldr	r2, [r7, #20]
 800d248:	621a      	str	r2, [r3, #32]
}
 800d24a:	bf00      	nop
 800d24c:	371c      	adds	r7, #28
 800d24e:	46bd      	mov	sp, r7
 800d250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d254:	4770      	bx	lr
 800d256:	bf00      	nop
 800d258:	40010000 	.word	0x40010000
 800d25c:	40010400 	.word	0x40010400

0800d260 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d260:	b480      	push	{r7}
 800d262:	b087      	sub	sp, #28
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
 800d268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	6a1b      	ldr	r3, [r3, #32]
 800d26e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	6a1b      	ldr	r3, [r3, #32]
 800d27a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	685b      	ldr	r3, [r3, #4]
 800d280:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	69db      	ldr	r3, [r3, #28]
 800d286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d28e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	f023 0303 	bic.w	r3, r3, #3
 800d296:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d298:	683b      	ldr	r3, [r7, #0]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	68fa      	ldr	r2, [r7, #12]
 800d29e:	4313      	orrs	r3, r2
 800d2a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d2a2:	697b      	ldr	r3, [r7, #20]
 800d2a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d2a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	689b      	ldr	r3, [r3, #8]
 800d2ae:	021b      	lsls	r3, r3, #8
 800d2b0:	697a      	ldr	r2, [r7, #20]
 800d2b2:	4313      	orrs	r3, r2
 800d2b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	4a21      	ldr	r2, [pc, #132]	; (800d340 <TIM_OC3_SetConfig+0xe0>)
 800d2ba:	4293      	cmp	r3, r2
 800d2bc:	d003      	beq.n	800d2c6 <TIM_OC3_SetConfig+0x66>
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	4a20      	ldr	r2, [pc, #128]	; (800d344 <TIM_OC3_SetConfig+0xe4>)
 800d2c2:	4293      	cmp	r3, r2
 800d2c4:	d10d      	bne.n	800d2e2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d2c6:	697b      	ldr	r3, [r7, #20]
 800d2c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d2cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d2ce:	683b      	ldr	r3, [r7, #0]
 800d2d0:	68db      	ldr	r3, [r3, #12]
 800d2d2:	021b      	lsls	r3, r3, #8
 800d2d4:	697a      	ldr	r2, [r7, #20]
 800d2d6:	4313      	orrs	r3, r2
 800d2d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d2da:	697b      	ldr	r3, [r7, #20]
 800d2dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d2e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	4a16      	ldr	r2, [pc, #88]	; (800d340 <TIM_OC3_SetConfig+0xe0>)
 800d2e6:	4293      	cmp	r3, r2
 800d2e8:	d003      	beq.n	800d2f2 <TIM_OC3_SetConfig+0x92>
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	4a15      	ldr	r2, [pc, #84]	; (800d344 <TIM_OC3_SetConfig+0xe4>)
 800d2ee:	4293      	cmp	r3, r2
 800d2f0:	d113      	bne.n	800d31a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d2f2:	693b      	ldr	r3, [r7, #16]
 800d2f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d2f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d2fa:	693b      	ldr	r3, [r7, #16]
 800d2fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d300:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	695b      	ldr	r3, [r3, #20]
 800d306:	011b      	lsls	r3, r3, #4
 800d308:	693a      	ldr	r2, [r7, #16]
 800d30a:	4313      	orrs	r3, r2
 800d30c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d30e:	683b      	ldr	r3, [r7, #0]
 800d310:	699b      	ldr	r3, [r3, #24]
 800d312:	011b      	lsls	r3, r3, #4
 800d314:	693a      	ldr	r2, [r7, #16]
 800d316:	4313      	orrs	r3, r2
 800d318:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	693a      	ldr	r2, [r7, #16]
 800d31e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	68fa      	ldr	r2, [r7, #12]
 800d324:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d326:	683b      	ldr	r3, [r7, #0]
 800d328:	685a      	ldr	r2, [r3, #4]
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	697a      	ldr	r2, [r7, #20]
 800d332:	621a      	str	r2, [r3, #32]
}
 800d334:	bf00      	nop
 800d336:	371c      	adds	r7, #28
 800d338:	46bd      	mov	sp, r7
 800d33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33e:	4770      	bx	lr
 800d340:	40010000 	.word	0x40010000
 800d344:	40010400 	.word	0x40010400

0800d348 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d348:	b480      	push	{r7}
 800d34a:	b087      	sub	sp, #28
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	6078      	str	r0, [r7, #4]
 800d350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	6a1b      	ldr	r3, [r3, #32]
 800d356:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	6a1b      	ldr	r3, [r3, #32]
 800d362:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	685b      	ldr	r3, [r3, #4]
 800d368:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	69db      	ldr	r3, [r3, #28]
 800d36e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d376:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d37e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d380:	683b      	ldr	r3, [r7, #0]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	021b      	lsls	r3, r3, #8
 800d386:	68fa      	ldr	r2, [r7, #12]
 800d388:	4313      	orrs	r3, r2
 800d38a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d38c:	693b      	ldr	r3, [r7, #16]
 800d38e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d392:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	689b      	ldr	r3, [r3, #8]
 800d398:	031b      	lsls	r3, r3, #12
 800d39a:	693a      	ldr	r2, [r7, #16]
 800d39c:	4313      	orrs	r3, r2
 800d39e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	4a12      	ldr	r2, [pc, #72]	; (800d3ec <TIM_OC4_SetConfig+0xa4>)
 800d3a4:	4293      	cmp	r3, r2
 800d3a6:	d003      	beq.n	800d3b0 <TIM_OC4_SetConfig+0x68>
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	4a11      	ldr	r2, [pc, #68]	; (800d3f0 <TIM_OC4_SetConfig+0xa8>)
 800d3ac:	4293      	cmp	r3, r2
 800d3ae:	d109      	bne.n	800d3c4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d3b0:	697b      	ldr	r3, [r7, #20]
 800d3b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d3b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	695b      	ldr	r3, [r3, #20]
 800d3bc:	019b      	lsls	r3, r3, #6
 800d3be:	697a      	ldr	r2, [r7, #20]
 800d3c0:	4313      	orrs	r3, r2
 800d3c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	697a      	ldr	r2, [r7, #20]
 800d3c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	68fa      	ldr	r2, [r7, #12]
 800d3ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	685a      	ldr	r2, [r3, #4]
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	693a      	ldr	r2, [r7, #16]
 800d3dc:	621a      	str	r2, [r3, #32]
}
 800d3de:	bf00      	nop
 800d3e0:	371c      	adds	r7, #28
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e8:	4770      	bx	lr
 800d3ea:	bf00      	nop
 800d3ec:	40010000 	.word	0x40010000
 800d3f0:	40010400 	.word	0x40010400

0800d3f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d3f4:	b480      	push	{r7}
 800d3f6:	b087      	sub	sp, #28
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	60f8      	str	r0, [r7, #12]
 800d3fc:	60b9      	str	r1, [r7, #8]
 800d3fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	6a1b      	ldr	r3, [r3, #32]
 800d404:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	6a1b      	ldr	r3, [r3, #32]
 800d40a:	f023 0201 	bic.w	r2, r3, #1
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	699b      	ldr	r3, [r3, #24]
 800d416:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d418:	693b      	ldr	r3, [r7, #16]
 800d41a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d41e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	011b      	lsls	r3, r3, #4
 800d424:	693a      	ldr	r2, [r7, #16]
 800d426:	4313      	orrs	r3, r2
 800d428:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d42a:	697b      	ldr	r3, [r7, #20]
 800d42c:	f023 030a 	bic.w	r3, r3, #10
 800d430:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d432:	697a      	ldr	r2, [r7, #20]
 800d434:	68bb      	ldr	r3, [r7, #8]
 800d436:	4313      	orrs	r3, r2
 800d438:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	693a      	ldr	r2, [r7, #16]
 800d43e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	697a      	ldr	r2, [r7, #20]
 800d444:	621a      	str	r2, [r3, #32]
}
 800d446:	bf00      	nop
 800d448:	371c      	adds	r7, #28
 800d44a:	46bd      	mov	sp, r7
 800d44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d450:	4770      	bx	lr

0800d452 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d452:	b480      	push	{r7}
 800d454:	b087      	sub	sp, #28
 800d456:	af00      	add	r7, sp, #0
 800d458:	60f8      	str	r0, [r7, #12]
 800d45a:	60b9      	str	r1, [r7, #8]
 800d45c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	6a1b      	ldr	r3, [r3, #32]
 800d462:	f023 0210 	bic.w	r2, r3, #16
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	699b      	ldr	r3, [r3, #24]
 800d46e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	6a1b      	ldr	r3, [r3, #32]
 800d474:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d476:	697b      	ldr	r3, [r7, #20]
 800d478:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d47c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	031b      	lsls	r3, r3, #12
 800d482:	697a      	ldr	r2, [r7, #20]
 800d484:	4313      	orrs	r3, r2
 800d486:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d488:	693b      	ldr	r3, [r7, #16]
 800d48a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d48e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d490:	68bb      	ldr	r3, [r7, #8]
 800d492:	011b      	lsls	r3, r3, #4
 800d494:	693a      	ldr	r2, [r7, #16]
 800d496:	4313      	orrs	r3, r2
 800d498:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	697a      	ldr	r2, [r7, #20]
 800d49e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	693a      	ldr	r2, [r7, #16]
 800d4a4:	621a      	str	r2, [r3, #32]
}
 800d4a6:	bf00      	nop
 800d4a8:	371c      	adds	r7, #28
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b0:	4770      	bx	lr

0800d4b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d4b2:	b480      	push	{r7}
 800d4b4:	b085      	sub	sp, #20
 800d4b6:	af00      	add	r7, sp, #0
 800d4b8:	6078      	str	r0, [r7, #4]
 800d4ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	689b      	ldr	r3, [r3, #8]
 800d4c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d4c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d4ca:	683a      	ldr	r2, [r7, #0]
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	4313      	orrs	r3, r2
 800d4d0:	f043 0307 	orr.w	r3, r3, #7
 800d4d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	68fa      	ldr	r2, [r7, #12]
 800d4da:	609a      	str	r2, [r3, #8]
}
 800d4dc:	bf00      	nop
 800d4de:	3714      	adds	r7, #20
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e6:	4770      	bx	lr

0800d4e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d4e8:	b480      	push	{r7}
 800d4ea:	b087      	sub	sp, #28
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	60f8      	str	r0, [r7, #12]
 800d4f0:	60b9      	str	r1, [r7, #8]
 800d4f2:	607a      	str	r2, [r7, #4]
 800d4f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	689b      	ldr	r3, [r3, #8]
 800d4fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d4fc:	697b      	ldr	r3, [r7, #20]
 800d4fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d502:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d504:	683b      	ldr	r3, [r7, #0]
 800d506:	021a      	lsls	r2, r3, #8
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	431a      	orrs	r2, r3
 800d50c:	68bb      	ldr	r3, [r7, #8]
 800d50e:	4313      	orrs	r3, r2
 800d510:	697a      	ldr	r2, [r7, #20]
 800d512:	4313      	orrs	r3, r2
 800d514:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	697a      	ldr	r2, [r7, #20]
 800d51a:	609a      	str	r2, [r3, #8]
}
 800d51c:	bf00      	nop
 800d51e:	371c      	adds	r7, #28
 800d520:	46bd      	mov	sp, r7
 800d522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d526:	4770      	bx	lr

0800d528 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d528:	b480      	push	{r7}
 800d52a:	b087      	sub	sp, #28
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	60f8      	str	r0, [r7, #12]
 800d530:	60b9      	str	r1, [r7, #8]
 800d532:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d534:	68bb      	ldr	r3, [r7, #8]
 800d536:	f003 031f 	and.w	r3, r3, #31
 800d53a:	2201      	movs	r2, #1
 800d53c:	fa02 f303 	lsl.w	r3, r2, r3
 800d540:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	6a1a      	ldr	r2, [r3, #32]
 800d546:	697b      	ldr	r3, [r7, #20]
 800d548:	43db      	mvns	r3, r3
 800d54a:	401a      	ands	r2, r3
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	6a1a      	ldr	r2, [r3, #32]
 800d554:	68bb      	ldr	r3, [r7, #8]
 800d556:	f003 031f 	and.w	r3, r3, #31
 800d55a:	6879      	ldr	r1, [r7, #4]
 800d55c:	fa01 f303 	lsl.w	r3, r1, r3
 800d560:	431a      	orrs	r2, r3
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	621a      	str	r2, [r3, #32]
}
 800d566:	bf00      	nop
 800d568:	371c      	adds	r7, #28
 800d56a:	46bd      	mov	sp, r7
 800d56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d570:	4770      	bx	lr

0800d572 <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d572:	b580      	push	{r7, lr}
 800d574:	b084      	sub	sp, #16
 800d576:	af00      	add	r7, sp, #0
 800d578:	6078      	str	r0, [r7, #4]
 800d57a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	2b04      	cmp	r3, #4
 800d580:	d00d      	beq.n	800d59e <HAL_TIMEx_PWMN_Start_IT+0x2c>
 800d582:	2b08      	cmp	r3, #8
 800d584:	d014      	beq.n	800d5b0 <HAL_TIMEx_PWMN_Start_IT+0x3e>
 800d586:	2b00      	cmp	r3, #0
 800d588:	d000      	beq.n	800d58c <HAL_TIMEx_PWMN_Start_IT+0x1a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 800d58a:	e01a      	b.n	800d5c2 <HAL_TIMEx_PWMN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	68da      	ldr	r2, [r3, #12]
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	f042 0202 	orr.w	r2, r2, #2
 800d59a:	60da      	str	r2, [r3, #12]
      break;
 800d59c:	e011      	b.n	800d5c2 <HAL_TIMEx_PWMN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	68da      	ldr	r2, [r3, #12]
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	f042 0204 	orr.w	r2, r2, #4
 800d5ac:	60da      	str	r2, [r3, #12]
      break;
 800d5ae:	e008      	b.n	800d5c2 <HAL_TIMEx_PWMN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	68da      	ldr	r2, [r3, #12]
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	f042 0208 	orr.w	r2, r2, #8
 800d5be:	60da      	str	r2, [r3, #12]
      break;
 800d5c0:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	68da      	ldr	r2, [r3, #12]
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d5d0:	60da      	str	r2, [r3, #12]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	2204      	movs	r2, #4
 800d5d8:	6839      	ldr	r1, [r7, #0]
 800d5da:	4618      	mov	r0, r3
 800d5dc:	f000 f93f 	bl	800d85e <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d5ee:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	689b      	ldr	r3, [r3, #8]
 800d5f6:	f003 0307 	and.w	r3, r3, #7
 800d5fa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	2b06      	cmp	r3, #6
 800d600:	d007      	beq.n	800d612 <HAL_TIMEx_PWMN_Start_IT+0xa0>
  {
    __HAL_TIM_ENABLE(htim);
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	681a      	ldr	r2, [r3, #0]
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	f042 0201 	orr.w	r2, r2, #1
 800d610:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d612:	2300      	movs	r3, #0
}
 800d614:	4618      	mov	r0, r3
 800d616:	3710      	adds	r7, #16
 800d618:	46bd      	mov	sp, r7
 800d61a:	bd80      	pop	{r7, pc}

0800d61c <HAL_TIMEx_PWMN_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b084      	sub	sp, #16
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
 800d624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccer;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800d626:	683b      	ldr	r3, [r7, #0]
 800d628:	2b04      	cmp	r3, #4
 800d62a:	d00d      	beq.n	800d648 <HAL_TIMEx_PWMN_Stop_IT+0x2c>
 800d62c:	2b08      	cmp	r3, #8
 800d62e:	d014      	beq.n	800d65a <HAL_TIMEx_PWMN_Stop_IT+0x3e>
 800d630:	2b00      	cmp	r3, #0
 800d632:	d000      	beq.n	800d636 <HAL_TIMEx_PWMN_Stop_IT+0x1a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 800d634:	e01a      	b.n	800d66c <HAL_TIMEx_PWMN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	68da      	ldr	r2, [r3, #12]
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	f022 0202 	bic.w	r2, r2, #2
 800d644:	60da      	str	r2, [r3, #12]
      break;
 800d646:	e011      	b.n	800d66c <HAL_TIMEx_PWMN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	68da      	ldr	r2, [r3, #12]
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	f022 0204 	bic.w	r2, r2, #4
 800d656:	60da      	str	r2, [r3, #12]
      break;
 800d658:	e008      	b.n	800d66c <HAL_TIMEx_PWMN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	68da      	ldr	r2, [r3, #12]
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	f022 0208 	bic.w	r2, r2, #8
 800d668:	60da      	str	r2, [r3, #12]
      break;
 800d66a:	bf00      	nop
  }

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	2200      	movs	r2, #0
 800d672:	6839      	ldr	r1, [r7, #0]
 800d674:	4618      	mov	r0, r3
 800d676:	f000 f8f2 	bl	800d85e <TIM_CCxNChannelCmd>

  /* Disable the TIM Break interrupt (only if no more channel is active) */
  tmpccer = htim->Instance->CCER;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	6a1b      	ldr	r3, [r3, #32]
 800d680:	60fb      	str	r3, [r7, #12]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 800d682:	68fa      	ldr	r2, [r7, #12]
 800d684:	f240 4344 	movw	r3, #1092	; 0x444
 800d688:	4013      	ands	r3, r2
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d107      	bne.n	800d69e <HAL_TIMEx_PWMN_Stop_IT+0x82>
  {
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	68da      	ldr	r2, [r3, #12]
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d69c:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	6a1a      	ldr	r2, [r3, #32]
 800d6a4:	f241 1311 	movw	r3, #4369	; 0x1111
 800d6a8:	4013      	ands	r3, r2
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d10f      	bne.n	800d6ce <HAL_TIMEx_PWMN_Stop_IT+0xb2>
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	6a1a      	ldr	r2, [r3, #32]
 800d6b4:	f240 4344 	movw	r3, #1092	; 0x444
 800d6b8:	4013      	ands	r3, r2
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d107      	bne.n	800d6ce <HAL_TIMEx_PWMN_Stop_IT+0xb2>
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d6cc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	681b      	ldr	r3, [r3, #0]
 800d6d2:	6a1a      	ldr	r2, [r3, #32]
 800d6d4:	f241 1311 	movw	r3, #4369	; 0x1111
 800d6d8:	4013      	ands	r3, r2
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d10f      	bne.n	800d6fe <HAL_TIMEx_PWMN_Stop_IT+0xe2>
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	6a1a      	ldr	r2, [r3, #32]
 800d6e4:	f240 4344 	movw	r3, #1092	; 0x444
 800d6e8:	4013      	ands	r3, r2
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d107      	bne.n	800d6fe <HAL_TIMEx_PWMN_Stop_IT+0xe2>
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	681a      	ldr	r2, [r3, #0]
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	f022 0201 	bic.w	r2, r2, #1
 800d6fc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800d6fe:	2300      	movs	r3, #0
}
 800d700:	4618      	mov	r0, r3
 800d702:	3710      	adds	r7, #16
 800d704:	46bd      	mov	sp, r7
 800d706:	bd80      	pop	{r7, pc}

0800d708 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d708:	b480      	push	{r7}
 800d70a:	b085      	sub	sp, #20
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
 800d710:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d718:	2b01      	cmp	r3, #1
 800d71a:	d101      	bne.n	800d720 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d71c:	2302      	movs	r3, #2
 800d71e:	e032      	b.n	800d786 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	2201      	movs	r2, #1
 800d724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	2202      	movs	r2, #2
 800d72c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	685b      	ldr	r3, [r3, #4]
 800d736:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	689b      	ldr	r3, [r3, #8]
 800d73e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d746:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d748:	683b      	ldr	r3, [r7, #0]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	68fa      	ldr	r2, [r7, #12]
 800d74e:	4313      	orrs	r3, r2
 800d750:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800d752:	68bb      	ldr	r3, [r7, #8]
 800d754:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d758:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d75a:	683b      	ldr	r3, [r7, #0]
 800d75c:	685b      	ldr	r3, [r3, #4]
 800d75e:	68ba      	ldr	r2, [r7, #8]
 800d760:	4313      	orrs	r3, r2
 800d762:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	68fa      	ldr	r2, [r7, #12]
 800d76a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	68ba      	ldr	r2, [r7, #8]
 800d772:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	2201      	movs	r2, #1
 800d778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	2200      	movs	r2, #0
 800d780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d784:	2300      	movs	r3, #0
}
 800d786:	4618      	mov	r0, r3
 800d788:	3714      	adds	r7, #20
 800d78a:	46bd      	mov	sp, r7
 800d78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d790:	4770      	bx	lr

0800d792 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d792:	b480      	push	{r7}
 800d794:	b085      	sub	sp, #20
 800d796:	af00      	add	r7, sp, #0
 800d798:	6078      	str	r0, [r7, #4]
 800d79a:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d79c:	2300      	movs	r3, #0
 800d79e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d7a6:	2b01      	cmp	r3, #1
 800d7a8:	d101      	bne.n	800d7ae <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d7aa:	2302      	movs	r3, #2
 800d7ac:	e03d      	b.n	800d82a <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	2201      	movs	r2, #1
 800d7b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800d7bc:	683b      	ldr	r3, [r7, #0]
 800d7be:	68db      	ldr	r3, [r3, #12]
 800d7c0:	4313      	orrs	r3, r2
 800d7c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d7ca:	683b      	ldr	r3, [r7, #0]
 800d7cc:	689b      	ldr	r3, [r3, #8]
 800d7ce:	4313      	orrs	r3, r2
 800d7d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800d7d8:	683b      	ldr	r3, [r7, #0]
 800d7da:	685b      	ldr	r3, [r3, #4]
 800d7dc:	4313      	orrs	r3, r2
 800d7de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800d7e6:	683b      	ldr	r3, [r7, #0]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	4313      	orrs	r3, r2
 800d7ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d7f4:	683b      	ldr	r3, [r7, #0]
 800d7f6:	691b      	ldr	r3, [r3, #16]
 800d7f8:	4313      	orrs	r3, r2
 800d7fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800d802:	683b      	ldr	r3, [r7, #0]
 800d804:	695b      	ldr	r3, [r3, #20]
 800d806:	4313      	orrs	r3, r2
 800d808:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d810:	683b      	ldr	r3, [r7, #0]
 800d812:	69db      	ldr	r3, [r3, #28]
 800d814:	4313      	orrs	r3, r2
 800d816:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	68fa      	ldr	r2, [r7, #12]
 800d81e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	2200      	movs	r2, #0
 800d824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d828:	2300      	movs	r3, #0
}
 800d82a:	4618      	mov	r0, r3
 800d82c:	3714      	adds	r7, #20
 800d82e:	46bd      	mov	sp, r7
 800d830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d834:	4770      	bx	lr

0800d836 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d836:	b480      	push	{r7}
 800d838:	b083      	sub	sp, #12
 800d83a:	af00      	add	r7, sp, #0
 800d83c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d83e:	bf00      	nop
 800d840:	370c      	adds	r7, #12
 800d842:	46bd      	mov	sp, r7
 800d844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d848:	4770      	bx	lr

0800d84a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d84a:	b480      	push	{r7}
 800d84c:	b083      	sub	sp, #12
 800d84e:	af00      	add	r7, sp, #0
 800d850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d852:	bf00      	nop
 800d854:	370c      	adds	r7, #12
 800d856:	46bd      	mov	sp, r7
 800d858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85c:	4770      	bx	lr

0800d85e <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800d85e:	b480      	push	{r7}
 800d860:	b087      	sub	sp, #28
 800d862:	af00      	add	r7, sp, #0
 800d864:	60f8      	str	r0, [r7, #12]
 800d866:	60b9      	str	r1, [r7, #8]
 800d868:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d86a:	68bb      	ldr	r3, [r7, #8]
 800d86c:	f003 031f 	and.w	r3, r3, #31
 800d870:	2204      	movs	r2, #4
 800d872:	fa02 f303 	lsl.w	r3, r2, r3
 800d876:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	6a1a      	ldr	r2, [r3, #32]
 800d87c:	697b      	ldr	r3, [r7, #20]
 800d87e:	43db      	mvns	r3, r3
 800d880:	401a      	ands	r2, r3
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	6a1a      	ldr	r2, [r3, #32]
 800d88a:	68bb      	ldr	r3, [r7, #8]
 800d88c:	f003 031f 	and.w	r3, r3, #31
 800d890:	6879      	ldr	r1, [r7, #4]
 800d892:	fa01 f303 	lsl.w	r3, r1, r3
 800d896:	431a      	orrs	r2, r3
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	621a      	str	r2, [r3, #32]
}
 800d89c:	bf00      	nop
 800d89e:	371c      	adds	r7, #28
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a6:	4770      	bx	lr

0800d8a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b082      	sub	sp, #8
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d101      	bne.n	800d8ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d8b6:	2301      	movs	r3, #1
 800d8b8:	e03f      	b.n	800d93a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800d8c0:	b2db      	uxtb	r3, r3
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d106      	bne.n	800d8d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d8ce:	6878      	ldr	r0, [r7, #4]
 800d8d0:	f003 fec2 	bl	8011658 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	2224      	movs	r2, #36	; 0x24
 800d8d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	68da      	ldr	r2, [r3, #12]
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d8ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800d8ec:	6878      	ldr	r0, [r7, #4]
 800d8ee:	f000 fa65 	bl	800ddbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	691a      	ldr	r2, [r3, #16]
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d900:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	695a      	ldr	r2, [r3, #20]
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d910:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	68da      	ldr	r2, [r3, #12]
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d920:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	2200      	movs	r2, #0
 800d926:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2220      	movs	r2, #32
 800d92c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	2220      	movs	r2, #32
 800d934:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800d938:	2300      	movs	r3, #0
}
 800d93a:	4618      	mov	r0, r3
 800d93c:	3708      	adds	r7, #8
 800d93e:	46bd      	mov	sp, r7
 800d940:	bd80      	pop	{r7, pc}
	...

0800d944 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b088      	sub	sp, #32
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	68db      	ldr	r3, [r3, #12]
 800d95a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	695b      	ldr	r3, [r3, #20]
 800d962:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800d964:	2300      	movs	r3, #0
 800d966:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800d968:	2300      	movs	r3, #0
 800d96a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800d96c:	69fb      	ldr	r3, [r7, #28]
 800d96e:	f003 030f 	and.w	r3, r3, #15
 800d972:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800d974:	693b      	ldr	r3, [r7, #16]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d10d      	bne.n	800d996 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800d97a:	69fb      	ldr	r3, [r7, #28]
 800d97c:	f003 0320 	and.w	r3, r3, #32
 800d980:	2b00      	cmp	r3, #0
 800d982:	d008      	beq.n	800d996 <HAL_UART_IRQHandler+0x52>
 800d984:	69bb      	ldr	r3, [r7, #24]
 800d986:	f003 0320 	and.w	r3, r3, #32
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d003      	beq.n	800d996 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800d98e:	6878      	ldr	r0, [r7, #4]
 800d990:	f000 f992 	bl	800dcb8 <UART_Receive_IT>
      return;
 800d994:	e0cc      	b.n	800db30 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800d996:	693b      	ldr	r3, [r7, #16]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	f000 80ab 	beq.w	800daf4 <HAL_UART_IRQHandler+0x1b0>
 800d99e:	697b      	ldr	r3, [r7, #20]
 800d9a0:	f003 0301 	and.w	r3, r3, #1
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d105      	bne.n	800d9b4 <HAL_UART_IRQHandler+0x70>
 800d9a8:	69bb      	ldr	r3, [r7, #24]
 800d9aa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	f000 80a0 	beq.w	800daf4 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800d9b4:	69fb      	ldr	r3, [r7, #28]
 800d9b6:	f003 0301 	and.w	r3, r3, #1
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d00a      	beq.n	800d9d4 <HAL_UART_IRQHandler+0x90>
 800d9be:	69bb      	ldr	r3, [r7, #24]
 800d9c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d005      	beq.n	800d9d4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9cc:	f043 0201 	orr.w	r2, r3, #1
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d9d4:	69fb      	ldr	r3, [r7, #28]
 800d9d6:	f003 0304 	and.w	r3, r3, #4
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d00a      	beq.n	800d9f4 <HAL_UART_IRQHandler+0xb0>
 800d9de:	697b      	ldr	r3, [r7, #20]
 800d9e0:	f003 0301 	and.w	r3, r3, #1
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d005      	beq.n	800d9f4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9ec:	f043 0202 	orr.w	r2, r3, #2
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800d9f4:	69fb      	ldr	r3, [r7, #28]
 800d9f6:	f003 0302 	and.w	r3, r3, #2
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d00a      	beq.n	800da14 <HAL_UART_IRQHandler+0xd0>
 800d9fe:	697b      	ldr	r3, [r7, #20]
 800da00:	f003 0301 	and.w	r3, r3, #1
 800da04:	2b00      	cmp	r3, #0
 800da06:	d005      	beq.n	800da14 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da0c:	f043 0204 	orr.w	r2, r3, #4
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800da14:	69fb      	ldr	r3, [r7, #28]
 800da16:	f003 0308 	and.w	r3, r3, #8
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d00a      	beq.n	800da34 <HAL_UART_IRQHandler+0xf0>
 800da1e:	697b      	ldr	r3, [r7, #20]
 800da20:	f003 0301 	and.w	r3, r3, #1
 800da24:	2b00      	cmp	r3, #0
 800da26:	d005      	beq.n	800da34 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da2c:	f043 0208 	orr.w	r2, r3, #8
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d078      	beq.n	800db2e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800da3c:	69fb      	ldr	r3, [r7, #28]
 800da3e:	f003 0320 	and.w	r3, r3, #32
 800da42:	2b00      	cmp	r3, #0
 800da44:	d007      	beq.n	800da56 <HAL_UART_IRQHandler+0x112>
 800da46:	69bb      	ldr	r3, [r7, #24]
 800da48:	f003 0320 	and.w	r3, r3, #32
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d002      	beq.n	800da56 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800da50:	6878      	ldr	r0, [r7, #4]
 800da52:	f000 f931 	bl	800dcb8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	695b      	ldr	r3, [r3, #20]
 800da5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da60:	2b40      	cmp	r3, #64	; 0x40
 800da62:	bf0c      	ite	eq
 800da64:	2301      	moveq	r3, #1
 800da66:	2300      	movne	r3, #0
 800da68:	b2db      	uxtb	r3, r3
 800da6a:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da70:	f003 0308 	and.w	r3, r3, #8
 800da74:	2b00      	cmp	r3, #0
 800da76:	d102      	bne.n	800da7e <HAL_UART_IRQHandler+0x13a>
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d031      	beq.n	800dae2 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800da7e:	6878      	ldr	r0, [r7, #4]
 800da80:	f000 f87a 	bl	800db78 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	695b      	ldr	r3, [r3, #20]
 800da8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da8e:	2b40      	cmp	r3, #64	; 0x40
 800da90:	d123      	bne.n	800dada <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	695a      	ldr	r2, [r3, #20]
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800daa0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d013      	beq.n	800dad2 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800daae:	4a22      	ldr	r2, [pc, #136]	; (800db38 <HAL_UART_IRQHandler+0x1f4>)
 800dab0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dab6:	4618      	mov	r0, r3
 800dab8:	f7fc fd92 	bl	800a5e0 <HAL_DMA_Abort_IT>
 800dabc:	4603      	mov	r3, r0
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d016      	beq.n	800daf0 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dac8:	687a      	ldr	r2, [r7, #4]
 800daca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800dacc:	4610      	mov	r0, r2
 800dace:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dad0:	e00e      	b.n	800daf0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800dad2:	6878      	ldr	r0, [r7, #4]
 800dad4:	f000 f846 	bl	800db64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dad8:	e00a      	b.n	800daf0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800dada:	6878      	ldr	r0, [r7, #4]
 800dadc:	f000 f842 	bl	800db64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dae0:	e006      	b.n	800daf0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800dae2:	6878      	ldr	r0, [r7, #4]
 800dae4:	f000 f83e 	bl	800db64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	2200      	movs	r2, #0
 800daec:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800daee:	e01e      	b.n	800db2e <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800daf0:	bf00      	nop
    return;
 800daf2:	e01c      	b.n	800db2e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800daf4:	69fb      	ldr	r3, [r7, #28]
 800daf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d008      	beq.n	800db10 <HAL_UART_IRQHandler+0x1cc>
 800dafe:	69bb      	ldr	r3, [r7, #24]
 800db00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db04:	2b00      	cmp	r3, #0
 800db06:	d003      	beq.n	800db10 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 800db08:	6878      	ldr	r0, [r7, #4]
 800db0a:	f000 f867 	bl	800dbdc <UART_Transmit_IT>
    return;
 800db0e:	e00f      	b.n	800db30 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800db10:	69fb      	ldr	r3, [r7, #28]
 800db12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db16:	2b00      	cmp	r3, #0
 800db18:	d00a      	beq.n	800db30 <HAL_UART_IRQHandler+0x1ec>
 800db1a:	69bb      	ldr	r3, [r7, #24]
 800db1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db20:	2b00      	cmp	r3, #0
 800db22:	d005      	beq.n	800db30 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800db24:	6878      	ldr	r0, [r7, #4]
 800db26:	f000 f8af 	bl	800dc88 <UART_EndTransmit_IT>
    return;
 800db2a:	bf00      	nop
 800db2c:	e000      	b.n	800db30 <HAL_UART_IRQHandler+0x1ec>
    return;
 800db2e:	bf00      	nop
  }
}
 800db30:	3720      	adds	r7, #32
 800db32:	46bd      	mov	sp, r7
 800db34:	bd80      	pop	{r7, pc}
 800db36:	bf00      	nop
 800db38:	0800dbb5 	.word	0x0800dbb5

0800db3c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800db3c:	b480      	push	{r7}
 800db3e:	b083      	sub	sp, #12
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800db44:	bf00      	nop
 800db46:	370c      	adds	r7, #12
 800db48:	46bd      	mov	sp, r7
 800db4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4e:	4770      	bx	lr

0800db50 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800db50:	b480      	push	{r7}
 800db52:	b083      	sub	sp, #12
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800db58:	bf00      	nop
 800db5a:	370c      	adds	r7, #12
 800db5c:	46bd      	mov	sp, r7
 800db5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db62:	4770      	bx	lr

0800db64 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800db64:	b480      	push	{r7}
 800db66:	b083      	sub	sp, #12
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800db6c:	bf00      	nop
 800db6e:	370c      	adds	r7, #12
 800db70:	46bd      	mov	sp, r7
 800db72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db76:	4770      	bx	lr

0800db78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800db78:	b480      	push	{r7}
 800db7a:	b083      	sub	sp, #12
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	68da      	ldr	r2, [r3, #12]
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800db8e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	695a      	ldr	r2, [r3, #20]
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	f022 0201 	bic.w	r2, r2, #1
 800db9e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	2220      	movs	r2, #32
 800dba4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800dba8:	bf00      	nop
 800dbaa:	370c      	adds	r7, #12
 800dbac:	46bd      	mov	sp, r7
 800dbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb2:	4770      	bx	lr

0800dbb4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b084      	sub	sp, #16
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbc0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	2200      	movs	r2, #0
 800dbcc:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dbce:	68f8      	ldr	r0, [r7, #12]
 800dbd0:	f7ff ffc8 	bl	800db64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dbd4:	bf00      	nop
 800dbd6:	3710      	adds	r7, #16
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	bd80      	pop	{r7, pc}

0800dbdc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800dbdc:	b480      	push	{r7}
 800dbde:	b085      	sub	sp, #20
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800dbea:	b2db      	uxtb	r3, r3
 800dbec:	2b21      	cmp	r3, #33	; 0x21
 800dbee:	d144      	bne.n	800dc7a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	689b      	ldr	r3, [r3, #8]
 800dbf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dbf8:	d11a      	bne.n	800dc30 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	6a1b      	ldr	r3, [r3, #32]
 800dbfe:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	881b      	ldrh	r3, [r3, #0]
 800dc04:	461a      	mov	r2, r3
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dc0e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	691b      	ldr	r3, [r3, #16]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d105      	bne.n	800dc24 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	6a1b      	ldr	r3, [r3, #32]
 800dc1c:	1c9a      	adds	r2, r3, #2
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	621a      	str	r2, [r3, #32]
 800dc22:	e00e      	b.n	800dc42 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	6a1b      	ldr	r3, [r3, #32]
 800dc28:	1c5a      	adds	r2, r3, #1
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	621a      	str	r2, [r3, #32]
 800dc2e:	e008      	b.n	800dc42 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	6a1b      	ldr	r3, [r3, #32]
 800dc34:	1c59      	adds	r1, r3, #1
 800dc36:	687a      	ldr	r2, [r7, #4]
 800dc38:	6211      	str	r1, [r2, #32]
 800dc3a:	781a      	ldrb	r2, [r3, #0]
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800dc46:	b29b      	uxth	r3, r3
 800dc48:	3b01      	subs	r3, #1
 800dc4a:	b29b      	uxth	r3, r3
 800dc4c:	687a      	ldr	r2, [r7, #4]
 800dc4e:	4619      	mov	r1, r3
 800dc50:	84d1      	strh	r1, [r2, #38]	; 0x26
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d10f      	bne.n	800dc76 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	68da      	ldr	r2, [r3, #12]
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dc64:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	68da      	ldr	r2, [r3, #12]
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dc74:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800dc76:	2300      	movs	r3, #0
 800dc78:	e000      	b.n	800dc7c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800dc7a:	2302      	movs	r3, #2
  }
}
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	3714      	adds	r7, #20
 800dc80:	46bd      	mov	sp, r7
 800dc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc86:	4770      	bx	lr

0800dc88 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b082      	sub	sp, #8
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	68da      	ldr	r2, [r3, #12]
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dc9e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	2220      	movs	r2, #32
 800dca4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dca8:	6878      	ldr	r0, [r7, #4]
 800dcaa:	f7ff ff47 	bl	800db3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800dcae:	2300      	movs	r3, #0
}
 800dcb0:	4618      	mov	r0, r3
 800dcb2:	3708      	adds	r7, #8
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	bd80      	pop	{r7, pc}

0800dcb8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b084      	sub	sp, #16
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800dcc6:	b2db      	uxtb	r3, r3
 800dcc8:	2b22      	cmp	r3, #34	; 0x22
 800dcca:	d171      	bne.n	800ddb0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	689b      	ldr	r3, [r3, #8]
 800dcd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dcd4:	d123      	bne.n	800dd1e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcda:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	691b      	ldr	r3, [r3, #16]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d10e      	bne.n	800dd02 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	685b      	ldr	r3, [r3, #4]
 800dcea:	b29b      	uxth	r3, r3
 800dcec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dcf0:	b29a      	uxth	r2, r3
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dcfa:	1c9a      	adds	r2, r3, #2
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	629a      	str	r2, [r3, #40]	; 0x28
 800dd00:	e029      	b.n	800dd56 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	685b      	ldr	r3, [r3, #4]
 800dd08:	b29b      	uxth	r3, r3
 800dd0a:	b2db      	uxtb	r3, r3
 800dd0c:	b29a      	uxth	r2, r3
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd16:	1c5a      	adds	r2, r3, #1
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	629a      	str	r2, [r3, #40]	; 0x28
 800dd1c:	e01b      	b.n	800dd56 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	691b      	ldr	r3, [r3, #16]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d10a      	bne.n	800dd3c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	6858      	ldr	r0, [r3, #4]
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd30:	1c59      	adds	r1, r3, #1
 800dd32:	687a      	ldr	r2, [r7, #4]
 800dd34:	6291      	str	r1, [r2, #40]	; 0x28
 800dd36:	b2c2      	uxtb	r2, r0
 800dd38:	701a      	strb	r2, [r3, #0]
 800dd3a:	e00c      	b.n	800dd56 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	685b      	ldr	r3, [r3, #4]
 800dd42:	b2da      	uxtb	r2, r3
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd48:	1c58      	adds	r0, r3, #1
 800dd4a:	6879      	ldr	r1, [r7, #4]
 800dd4c:	6288      	str	r0, [r1, #40]	; 0x28
 800dd4e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800dd52:	b2d2      	uxtb	r2, r2
 800dd54:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800dd5a:	b29b      	uxth	r3, r3
 800dd5c:	3b01      	subs	r3, #1
 800dd5e:	b29b      	uxth	r3, r3
 800dd60:	687a      	ldr	r2, [r7, #4]
 800dd62:	4619      	mov	r1, r3
 800dd64:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d120      	bne.n	800ddac <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	68da      	ldr	r2, [r3, #12]
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	f022 0220 	bic.w	r2, r2, #32
 800dd78:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	68da      	ldr	r2, [r3, #12]
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800dd88:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	695a      	ldr	r2, [r3, #20]
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	f022 0201 	bic.w	r2, r2, #1
 800dd98:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	2220      	movs	r2, #32
 800dd9e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800dda2:	6878      	ldr	r0, [r7, #4]
 800dda4:	f7ff fed4 	bl	800db50 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800dda8:	2300      	movs	r3, #0
 800ddaa:	e002      	b.n	800ddb2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800ddac:	2300      	movs	r3, #0
 800ddae:	e000      	b.n	800ddb2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800ddb0:	2302      	movs	r3, #2
  }
}
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	3710      	adds	r7, #16
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	bd80      	pop	{r7, pc}
	...

0800ddbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ddbc:	b5b0      	push	{r4, r5, r7, lr}
 800ddbe:	b084      	sub	sp, #16
 800ddc0:	af00      	add	r7, sp, #0
 800ddc2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	691b      	ldr	r3, [r3, #16]
 800ddca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	68da      	ldr	r2, [r3, #12]
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	430a      	orrs	r2, r1
 800ddd8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	689a      	ldr	r2, [r3, #8]
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	691b      	ldr	r3, [r3, #16]
 800dde2:	431a      	orrs	r2, r3
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	695b      	ldr	r3, [r3, #20]
 800dde8:	431a      	orrs	r2, r3
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	69db      	ldr	r3, [r3, #28]
 800ddee:	4313      	orrs	r3, r2
 800ddf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	68db      	ldr	r3, [r3, #12]
 800ddf8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800ddfc:	f023 030c 	bic.w	r3, r3, #12
 800de00:	687a      	ldr	r2, [r7, #4]
 800de02:	6812      	ldr	r2, [r2, #0]
 800de04:	68f9      	ldr	r1, [r7, #12]
 800de06:	430b      	orrs	r3, r1
 800de08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	695b      	ldr	r3, [r3, #20]
 800de10:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	699a      	ldr	r2, [r3, #24]
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	430a      	orrs	r2, r1
 800de1e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	69db      	ldr	r3, [r3, #28]
 800de24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800de28:	f040 80e4 	bne.w	800dff4 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	4aab      	ldr	r2, [pc, #684]	; (800e0e0 <UART_SetConfig+0x324>)
 800de32:	4293      	cmp	r3, r2
 800de34:	d004      	beq.n	800de40 <UART_SetConfig+0x84>
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	4aaa      	ldr	r2, [pc, #680]	; (800e0e4 <UART_SetConfig+0x328>)
 800de3c:	4293      	cmp	r3, r2
 800de3e:	d16c      	bne.n	800df1a <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800de40:	f7fd fc1c 	bl	800b67c <HAL_RCC_GetPCLK2Freq>
 800de44:	4602      	mov	r2, r0
 800de46:	4613      	mov	r3, r2
 800de48:	009b      	lsls	r3, r3, #2
 800de4a:	4413      	add	r3, r2
 800de4c:	009a      	lsls	r2, r3, #2
 800de4e:	441a      	add	r2, r3
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	685b      	ldr	r3, [r3, #4]
 800de54:	005b      	lsls	r3, r3, #1
 800de56:	fbb2 f3f3 	udiv	r3, r2, r3
 800de5a:	4aa3      	ldr	r2, [pc, #652]	; (800e0e8 <UART_SetConfig+0x32c>)
 800de5c:	fba2 2303 	umull	r2, r3, r2, r3
 800de60:	095b      	lsrs	r3, r3, #5
 800de62:	011c      	lsls	r4, r3, #4
 800de64:	f7fd fc0a 	bl	800b67c <HAL_RCC_GetPCLK2Freq>
 800de68:	4602      	mov	r2, r0
 800de6a:	4613      	mov	r3, r2
 800de6c:	009b      	lsls	r3, r3, #2
 800de6e:	4413      	add	r3, r2
 800de70:	009a      	lsls	r2, r3, #2
 800de72:	441a      	add	r2, r3
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	685b      	ldr	r3, [r3, #4]
 800de78:	005b      	lsls	r3, r3, #1
 800de7a:	fbb2 f5f3 	udiv	r5, r2, r3
 800de7e:	f7fd fbfd 	bl	800b67c <HAL_RCC_GetPCLK2Freq>
 800de82:	4602      	mov	r2, r0
 800de84:	4613      	mov	r3, r2
 800de86:	009b      	lsls	r3, r3, #2
 800de88:	4413      	add	r3, r2
 800de8a:	009a      	lsls	r2, r3, #2
 800de8c:	441a      	add	r2, r3
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	685b      	ldr	r3, [r3, #4]
 800de92:	005b      	lsls	r3, r3, #1
 800de94:	fbb2 f3f3 	udiv	r3, r2, r3
 800de98:	4a93      	ldr	r2, [pc, #588]	; (800e0e8 <UART_SetConfig+0x32c>)
 800de9a:	fba2 2303 	umull	r2, r3, r2, r3
 800de9e:	095b      	lsrs	r3, r3, #5
 800dea0:	2264      	movs	r2, #100	; 0x64
 800dea2:	fb02 f303 	mul.w	r3, r2, r3
 800dea6:	1aeb      	subs	r3, r5, r3
 800dea8:	00db      	lsls	r3, r3, #3
 800deaa:	3332      	adds	r3, #50	; 0x32
 800deac:	4a8e      	ldr	r2, [pc, #568]	; (800e0e8 <UART_SetConfig+0x32c>)
 800deae:	fba2 2303 	umull	r2, r3, r2, r3
 800deb2:	095b      	lsrs	r3, r3, #5
 800deb4:	005b      	lsls	r3, r3, #1
 800deb6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800deba:	441c      	add	r4, r3
 800debc:	f7fd fbde 	bl	800b67c <HAL_RCC_GetPCLK2Freq>
 800dec0:	4602      	mov	r2, r0
 800dec2:	4613      	mov	r3, r2
 800dec4:	009b      	lsls	r3, r3, #2
 800dec6:	4413      	add	r3, r2
 800dec8:	009a      	lsls	r2, r3, #2
 800deca:	441a      	add	r2, r3
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	685b      	ldr	r3, [r3, #4]
 800ded0:	005b      	lsls	r3, r3, #1
 800ded2:	fbb2 f5f3 	udiv	r5, r2, r3
 800ded6:	f7fd fbd1 	bl	800b67c <HAL_RCC_GetPCLK2Freq>
 800deda:	4602      	mov	r2, r0
 800dedc:	4613      	mov	r3, r2
 800dede:	009b      	lsls	r3, r3, #2
 800dee0:	4413      	add	r3, r2
 800dee2:	009a      	lsls	r2, r3, #2
 800dee4:	441a      	add	r2, r3
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	685b      	ldr	r3, [r3, #4]
 800deea:	005b      	lsls	r3, r3, #1
 800deec:	fbb2 f3f3 	udiv	r3, r2, r3
 800def0:	4a7d      	ldr	r2, [pc, #500]	; (800e0e8 <UART_SetConfig+0x32c>)
 800def2:	fba2 2303 	umull	r2, r3, r2, r3
 800def6:	095b      	lsrs	r3, r3, #5
 800def8:	2264      	movs	r2, #100	; 0x64
 800defa:	fb02 f303 	mul.w	r3, r2, r3
 800defe:	1aeb      	subs	r3, r5, r3
 800df00:	00db      	lsls	r3, r3, #3
 800df02:	3332      	adds	r3, #50	; 0x32
 800df04:	4a78      	ldr	r2, [pc, #480]	; (800e0e8 <UART_SetConfig+0x32c>)
 800df06:	fba2 2303 	umull	r2, r3, r2, r3
 800df0a:	095b      	lsrs	r3, r3, #5
 800df0c:	f003 0207 	and.w	r2, r3, #7
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	4422      	add	r2, r4
 800df16:	609a      	str	r2, [r3, #8]
 800df18:	e154      	b.n	800e1c4 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800df1a:	f7fd fb9b 	bl	800b654 <HAL_RCC_GetPCLK1Freq>
 800df1e:	4602      	mov	r2, r0
 800df20:	4613      	mov	r3, r2
 800df22:	009b      	lsls	r3, r3, #2
 800df24:	4413      	add	r3, r2
 800df26:	009a      	lsls	r2, r3, #2
 800df28:	441a      	add	r2, r3
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	685b      	ldr	r3, [r3, #4]
 800df2e:	005b      	lsls	r3, r3, #1
 800df30:	fbb2 f3f3 	udiv	r3, r2, r3
 800df34:	4a6c      	ldr	r2, [pc, #432]	; (800e0e8 <UART_SetConfig+0x32c>)
 800df36:	fba2 2303 	umull	r2, r3, r2, r3
 800df3a:	095b      	lsrs	r3, r3, #5
 800df3c:	011c      	lsls	r4, r3, #4
 800df3e:	f7fd fb89 	bl	800b654 <HAL_RCC_GetPCLK1Freq>
 800df42:	4602      	mov	r2, r0
 800df44:	4613      	mov	r3, r2
 800df46:	009b      	lsls	r3, r3, #2
 800df48:	4413      	add	r3, r2
 800df4a:	009a      	lsls	r2, r3, #2
 800df4c:	441a      	add	r2, r3
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	685b      	ldr	r3, [r3, #4]
 800df52:	005b      	lsls	r3, r3, #1
 800df54:	fbb2 f5f3 	udiv	r5, r2, r3
 800df58:	f7fd fb7c 	bl	800b654 <HAL_RCC_GetPCLK1Freq>
 800df5c:	4602      	mov	r2, r0
 800df5e:	4613      	mov	r3, r2
 800df60:	009b      	lsls	r3, r3, #2
 800df62:	4413      	add	r3, r2
 800df64:	009a      	lsls	r2, r3, #2
 800df66:	441a      	add	r2, r3
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	685b      	ldr	r3, [r3, #4]
 800df6c:	005b      	lsls	r3, r3, #1
 800df6e:	fbb2 f3f3 	udiv	r3, r2, r3
 800df72:	4a5d      	ldr	r2, [pc, #372]	; (800e0e8 <UART_SetConfig+0x32c>)
 800df74:	fba2 2303 	umull	r2, r3, r2, r3
 800df78:	095b      	lsrs	r3, r3, #5
 800df7a:	2264      	movs	r2, #100	; 0x64
 800df7c:	fb02 f303 	mul.w	r3, r2, r3
 800df80:	1aeb      	subs	r3, r5, r3
 800df82:	00db      	lsls	r3, r3, #3
 800df84:	3332      	adds	r3, #50	; 0x32
 800df86:	4a58      	ldr	r2, [pc, #352]	; (800e0e8 <UART_SetConfig+0x32c>)
 800df88:	fba2 2303 	umull	r2, r3, r2, r3
 800df8c:	095b      	lsrs	r3, r3, #5
 800df8e:	005b      	lsls	r3, r3, #1
 800df90:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800df94:	441c      	add	r4, r3
 800df96:	f7fd fb5d 	bl	800b654 <HAL_RCC_GetPCLK1Freq>
 800df9a:	4602      	mov	r2, r0
 800df9c:	4613      	mov	r3, r2
 800df9e:	009b      	lsls	r3, r3, #2
 800dfa0:	4413      	add	r3, r2
 800dfa2:	009a      	lsls	r2, r3, #2
 800dfa4:	441a      	add	r2, r3
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	685b      	ldr	r3, [r3, #4]
 800dfaa:	005b      	lsls	r3, r3, #1
 800dfac:	fbb2 f5f3 	udiv	r5, r2, r3
 800dfb0:	f7fd fb50 	bl	800b654 <HAL_RCC_GetPCLK1Freq>
 800dfb4:	4602      	mov	r2, r0
 800dfb6:	4613      	mov	r3, r2
 800dfb8:	009b      	lsls	r3, r3, #2
 800dfba:	4413      	add	r3, r2
 800dfbc:	009a      	lsls	r2, r3, #2
 800dfbe:	441a      	add	r2, r3
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	685b      	ldr	r3, [r3, #4]
 800dfc4:	005b      	lsls	r3, r3, #1
 800dfc6:	fbb2 f3f3 	udiv	r3, r2, r3
 800dfca:	4a47      	ldr	r2, [pc, #284]	; (800e0e8 <UART_SetConfig+0x32c>)
 800dfcc:	fba2 2303 	umull	r2, r3, r2, r3
 800dfd0:	095b      	lsrs	r3, r3, #5
 800dfd2:	2264      	movs	r2, #100	; 0x64
 800dfd4:	fb02 f303 	mul.w	r3, r2, r3
 800dfd8:	1aeb      	subs	r3, r5, r3
 800dfda:	00db      	lsls	r3, r3, #3
 800dfdc:	3332      	adds	r3, #50	; 0x32
 800dfde:	4a42      	ldr	r2, [pc, #264]	; (800e0e8 <UART_SetConfig+0x32c>)
 800dfe0:	fba2 2303 	umull	r2, r3, r2, r3
 800dfe4:	095b      	lsrs	r3, r3, #5
 800dfe6:	f003 0207 	and.w	r2, r3, #7
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	4422      	add	r2, r4
 800dff0:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800dff2:	e0e7      	b.n	800e1c4 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	4a39      	ldr	r2, [pc, #228]	; (800e0e0 <UART_SetConfig+0x324>)
 800dffa:	4293      	cmp	r3, r2
 800dffc:	d004      	beq.n	800e008 <UART_SetConfig+0x24c>
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	4a38      	ldr	r2, [pc, #224]	; (800e0e4 <UART_SetConfig+0x328>)
 800e004:	4293      	cmp	r3, r2
 800e006:	d171      	bne.n	800e0ec <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800e008:	f7fd fb38 	bl	800b67c <HAL_RCC_GetPCLK2Freq>
 800e00c:	4602      	mov	r2, r0
 800e00e:	4613      	mov	r3, r2
 800e010:	009b      	lsls	r3, r3, #2
 800e012:	4413      	add	r3, r2
 800e014:	009a      	lsls	r2, r3, #2
 800e016:	441a      	add	r2, r3
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	685b      	ldr	r3, [r3, #4]
 800e01c:	009b      	lsls	r3, r3, #2
 800e01e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e022:	4a31      	ldr	r2, [pc, #196]	; (800e0e8 <UART_SetConfig+0x32c>)
 800e024:	fba2 2303 	umull	r2, r3, r2, r3
 800e028:	095b      	lsrs	r3, r3, #5
 800e02a:	011c      	lsls	r4, r3, #4
 800e02c:	f7fd fb26 	bl	800b67c <HAL_RCC_GetPCLK2Freq>
 800e030:	4602      	mov	r2, r0
 800e032:	4613      	mov	r3, r2
 800e034:	009b      	lsls	r3, r3, #2
 800e036:	4413      	add	r3, r2
 800e038:	009a      	lsls	r2, r3, #2
 800e03a:	441a      	add	r2, r3
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	685b      	ldr	r3, [r3, #4]
 800e040:	009b      	lsls	r3, r3, #2
 800e042:	fbb2 f5f3 	udiv	r5, r2, r3
 800e046:	f7fd fb19 	bl	800b67c <HAL_RCC_GetPCLK2Freq>
 800e04a:	4602      	mov	r2, r0
 800e04c:	4613      	mov	r3, r2
 800e04e:	009b      	lsls	r3, r3, #2
 800e050:	4413      	add	r3, r2
 800e052:	009a      	lsls	r2, r3, #2
 800e054:	441a      	add	r2, r3
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	685b      	ldr	r3, [r3, #4]
 800e05a:	009b      	lsls	r3, r3, #2
 800e05c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e060:	4a21      	ldr	r2, [pc, #132]	; (800e0e8 <UART_SetConfig+0x32c>)
 800e062:	fba2 2303 	umull	r2, r3, r2, r3
 800e066:	095b      	lsrs	r3, r3, #5
 800e068:	2264      	movs	r2, #100	; 0x64
 800e06a:	fb02 f303 	mul.w	r3, r2, r3
 800e06e:	1aeb      	subs	r3, r5, r3
 800e070:	011b      	lsls	r3, r3, #4
 800e072:	3332      	adds	r3, #50	; 0x32
 800e074:	4a1c      	ldr	r2, [pc, #112]	; (800e0e8 <UART_SetConfig+0x32c>)
 800e076:	fba2 2303 	umull	r2, r3, r2, r3
 800e07a:	095b      	lsrs	r3, r3, #5
 800e07c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e080:	441c      	add	r4, r3
 800e082:	f7fd fafb 	bl	800b67c <HAL_RCC_GetPCLK2Freq>
 800e086:	4602      	mov	r2, r0
 800e088:	4613      	mov	r3, r2
 800e08a:	009b      	lsls	r3, r3, #2
 800e08c:	4413      	add	r3, r2
 800e08e:	009a      	lsls	r2, r3, #2
 800e090:	441a      	add	r2, r3
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	685b      	ldr	r3, [r3, #4]
 800e096:	009b      	lsls	r3, r3, #2
 800e098:	fbb2 f5f3 	udiv	r5, r2, r3
 800e09c:	f7fd faee 	bl	800b67c <HAL_RCC_GetPCLK2Freq>
 800e0a0:	4602      	mov	r2, r0
 800e0a2:	4613      	mov	r3, r2
 800e0a4:	009b      	lsls	r3, r3, #2
 800e0a6:	4413      	add	r3, r2
 800e0a8:	009a      	lsls	r2, r3, #2
 800e0aa:	441a      	add	r2, r3
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	685b      	ldr	r3, [r3, #4]
 800e0b0:	009b      	lsls	r3, r3, #2
 800e0b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800e0b6:	4a0c      	ldr	r2, [pc, #48]	; (800e0e8 <UART_SetConfig+0x32c>)
 800e0b8:	fba2 2303 	umull	r2, r3, r2, r3
 800e0bc:	095b      	lsrs	r3, r3, #5
 800e0be:	2264      	movs	r2, #100	; 0x64
 800e0c0:	fb02 f303 	mul.w	r3, r2, r3
 800e0c4:	1aeb      	subs	r3, r5, r3
 800e0c6:	011b      	lsls	r3, r3, #4
 800e0c8:	3332      	adds	r3, #50	; 0x32
 800e0ca:	4a07      	ldr	r2, [pc, #28]	; (800e0e8 <UART_SetConfig+0x32c>)
 800e0cc:	fba2 2303 	umull	r2, r3, r2, r3
 800e0d0:	095b      	lsrs	r3, r3, #5
 800e0d2:	f003 020f 	and.w	r2, r3, #15
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	681b      	ldr	r3, [r3, #0]
 800e0da:	4422      	add	r2, r4
 800e0dc:	609a      	str	r2, [r3, #8]
 800e0de:	e071      	b.n	800e1c4 <UART_SetConfig+0x408>
 800e0e0:	40011000 	.word	0x40011000
 800e0e4:	40011400 	.word	0x40011400
 800e0e8:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800e0ec:	f7fd fab2 	bl	800b654 <HAL_RCC_GetPCLK1Freq>
 800e0f0:	4602      	mov	r2, r0
 800e0f2:	4613      	mov	r3, r2
 800e0f4:	009b      	lsls	r3, r3, #2
 800e0f6:	4413      	add	r3, r2
 800e0f8:	009a      	lsls	r2, r3, #2
 800e0fa:	441a      	add	r2, r3
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	685b      	ldr	r3, [r3, #4]
 800e100:	009b      	lsls	r3, r3, #2
 800e102:	fbb2 f3f3 	udiv	r3, r2, r3
 800e106:	4a31      	ldr	r2, [pc, #196]	; (800e1cc <UART_SetConfig+0x410>)
 800e108:	fba2 2303 	umull	r2, r3, r2, r3
 800e10c:	095b      	lsrs	r3, r3, #5
 800e10e:	011c      	lsls	r4, r3, #4
 800e110:	f7fd faa0 	bl	800b654 <HAL_RCC_GetPCLK1Freq>
 800e114:	4602      	mov	r2, r0
 800e116:	4613      	mov	r3, r2
 800e118:	009b      	lsls	r3, r3, #2
 800e11a:	4413      	add	r3, r2
 800e11c:	009a      	lsls	r2, r3, #2
 800e11e:	441a      	add	r2, r3
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	685b      	ldr	r3, [r3, #4]
 800e124:	009b      	lsls	r3, r3, #2
 800e126:	fbb2 f5f3 	udiv	r5, r2, r3
 800e12a:	f7fd fa93 	bl	800b654 <HAL_RCC_GetPCLK1Freq>
 800e12e:	4602      	mov	r2, r0
 800e130:	4613      	mov	r3, r2
 800e132:	009b      	lsls	r3, r3, #2
 800e134:	4413      	add	r3, r2
 800e136:	009a      	lsls	r2, r3, #2
 800e138:	441a      	add	r2, r3
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	685b      	ldr	r3, [r3, #4]
 800e13e:	009b      	lsls	r3, r3, #2
 800e140:	fbb2 f3f3 	udiv	r3, r2, r3
 800e144:	4a21      	ldr	r2, [pc, #132]	; (800e1cc <UART_SetConfig+0x410>)
 800e146:	fba2 2303 	umull	r2, r3, r2, r3
 800e14a:	095b      	lsrs	r3, r3, #5
 800e14c:	2264      	movs	r2, #100	; 0x64
 800e14e:	fb02 f303 	mul.w	r3, r2, r3
 800e152:	1aeb      	subs	r3, r5, r3
 800e154:	011b      	lsls	r3, r3, #4
 800e156:	3332      	adds	r3, #50	; 0x32
 800e158:	4a1c      	ldr	r2, [pc, #112]	; (800e1cc <UART_SetConfig+0x410>)
 800e15a:	fba2 2303 	umull	r2, r3, r2, r3
 800e15e:	095b      	lsrs	r3, r3, #5
 800e160:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e164:	441c      	add	r4, r3
 800e166:	f7fd fa75 	bl	800b654 <HAL_RCC_GetPCLK1Freq>
 800e16a:	4602      	mov	r2, r0
 800e16c:	4613      	mov	r3, r2
 800e16e:	009b      	lsls	r3, r3, #2
 800e170:	4413      	add	r3, r2
 800e172:	009a      	lsls	r2, r3, #2
 800e174:	441a      	add	r2, r3
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	685b      	ldr	r3, [r3, #4]
 800e17a:	009b      	lsls	r3, r3, #2
 800e17c:	fbb2 f5f3 	udiv	r5, r2, r3
 800e180:	f7fd fa68 	bl	800b654 <HAL_RCC_GetPCLK1Freq>
 800e184:	4602      	mov	r2, r0
 800e186:	4613      	mov	r3, r2
 800e188:	009b      	lsls	r3, r3, #2
 800e18a:	4413      	add	r3, r2
 800e18c:	009a      	lsls	r2, r3, #2
 800e18e:	441a      	add	r2, r3
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	685b      	ldr	r3, [r3, #4]
 800e194:	009b      	lsls	r3, r3, #2
 800e196:	fbb2 f3f3 	udiv	r3, r2, r3
 800e19a:	4a0c      	ldr	r2, [pc, #48]	; (800e1cc <UART_SetConfig+0x410>)
 800e19c:	fba2 2303 	umull	r2, r3, r2, r3
 800e1a0:	095b      	lsrs	r3, r3, #5
 800e1a2:	2264      	movs	r2, #100	; 0x64
 800e1a4:	fb02 f303 	mul.w	r3, r2, r3
 800e1a8:	1aeb      	subs	r3, r5, r3
 800e1aa:	011b      	lsls	r3, r3, #4
 800e1ac:	3332      	adds	r3, #50	; 0x32
 800e1ae:	4a07      	ldr	r2, [pc, #28]	; (800e1cc <UART_SetConfig+0x410>)
 800e1b0:	fba2 2303 	umull	r2, r3, r2, r3
 800e1b4:	095b      	lsrs	r3, r3, #5
 800e1b6:	f003 020f 	and.w	r2, r3, #15
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	4422      	add	r2, r4
 800e1c0:	609a      	str	r2, [r3, #8]
}
 800e1c2:	e7ff      	b.n	800e1c4 <UART_SetConfig+0x408>
 800e1c4:	bf00      	nop
 800e1c6:	3710      	adds	r7, #16
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	bdb0      	pop	{r4, r5, r7, pc}
 800e1cc:	51eb851f 	.word	0x51eb851f

0800e1d0 <ACR_Init>:
ACR_TypeDef mainACR;



void ACR_Init()
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	af00      	add	r7, sp, #0

	memset(&mainACR, 0x00, sizeof(mainACR));
 800e1d4:	226c      	movs	r2, #108	; 0x6c
 800e1d6:	2100      	movs	r1, #0
 800e1d8:	4812      	ldr	r0, [pc, #72]	; (800e224 <ACR_Init+0x54>)
 800e1da:	f003 faec 	bl	80117b6 <memset>

	mainACR.Init.Kp = 0.1f;
 800e1de:	4b11      	ldr	r3, [pc, #68]	; (800e224 <ACR_Init+0x54>)
 800e1e0:	4a11      	ldr	r2, [pc, #68]	; (800e228 <ACR_Init+0x58>)
 800e1e2:	601a      	str	r2, [r3, #0]
	mainACR.Init.Ki = 400.0f;
 800e1e4:	4b0f      	ldr	r3, [pc, #60]	; (800e224 <ACR_Init+0x54>)
 800e1e6:	4a11      	ldr	r2, [pc, #68]	; (800e22c <ACR_Init+0x5c>)
 800e1e8:	605a      	str	r2, [r3, #4]

	mainACR.Init.Id_limit = 15.0f;
 800e1ea:	4b0e      	ldr	r3, [pc, #56]	; (800e224 <ACR_Init+0x54>)
 800e1ec:	4a10      	ldr	r2, [pc, #64]	; (800e230 <ACR_Init+0x60>)
 800e1ee:	60da      	str	r2, [r3, #12]
	mainACR.Init.Iq_limit = 15.0f;
 800e1f0:	4b0c      	ldr	r3, [pc, #48]	; (800e224 <ACR_Init+0x54>)
 800e1f2:	4a0f      	ldr	r2, [pc, #60]	; (800e230 <ACR_Init+0x60>)
 800e1f4:	611a      	str	r2, [r3, #16]

	mainACR.Init.Id_error_integ_limit = 1.0f;
 800e1f6:	4b0b      	ldr	r3, [pc, #44]	; (800e224 <ACR_Init+0x54>)
 800e1f8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800e1fc:	615a      	str	r2, [r3, #20]
	mainACR.Init.Iq_error_integ_limit = 1.0f;
 800e1fe:	4b09      	ldr	r3, [pc, #36]	; (800e224 <ACR_Init+0x54>)
 800e200:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800e204:	619a      	str	r2, [r3, #24]

	mainACR.Init.cycleTime = 100E-6;
 800e206:	4b07      	ldr	r3, [pc, #28]	; (800e224 <ACR_Init+0x54>)
 800e208:	4a0a      	ldr	r2, [pc, #40]	; (800e234 <ACR_Init+0x64>)
 800e20a:	609a      	str	r2, [r3, #8]

	mainACR.Init.hEncoder = &mainEncoder;
 800e20c:	4b05      	ldr	r3, [pc, #20]	; (800e224 <ACR_Init+0x54>)
 800e20e:	4a0a      	ldr	r2, [pc, #40]	; (800e238 <ACR_Init+0x68>)
 800e210:	61da      	str	r2, [r3, #28]

	mainACR.Init.hCS = &mainCS;
 800e212:	4b04      	ldr	r3, [pc, #16]	; (800e224 <ACR_Init+0x54>)
 800e214:	4a09      	ldr	r2, [pc, #36]	; (800e23c <ACR_Init+0x6c>)
 800e216:	621a      	str	r2, [r3, #32]
	mainACR.Init.htim = &htim8;
 800e218:	4b02      	ldr	r3, [pc, #8]	; (800e224 <ACR_Init+0x54>)
 800e21a:	4a09      	ldr	r2, [pc, #36]	; (800e240 <ACR_Init+0x70>)
 800e21c:	625a      	str	r2, [r3, #36]	; 0x24

}
 800e21e:	bf00      	nop
 800e220:	bd80      	pop	{r7, pc}
 800e222:	bf00      	nop
 800e224:	20004178 	.word	0x20004178
 800e228:	3dcccccd 	.word	0x3dcccccd
 800e22c:	43c80000 	.word	0x43c80000
 800e230:	41700000 	.word	0x41700000
 800e234:	38d1b717 	.word	0x38d1b717
 800e238:	200044c8 	.word	0x200044c8
 800e23c:	200041ec 	.word	0x200041ec
 800e240:	200045a8 	.word	0x200045a8

0800e244 <ACR_Start>:



void ACR_Start(ACR_TypeDef *hACR)
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b082      	sub	sp, #8
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]

	hACR->enable = 1;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	2201      	movs	r2, #1
 800e250:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	ACR_Reset(hACR);
 800e254:	6878      	ldr	r0, [r7, #4]
 800e256:	f000 faa1 	bl	800e79c <ACR_Reset>

}
 800e25a:	bf00      	nop
 800e25c:	3708      	adds	r7, #8
 800e25e:	46bd      	mov	sp, r7
 800e260:	bd80      	pop	{r7, pc}
 800e262:	0000      	movs	r0, r0
 800e264:	0000      	movs	r0, r0
	...

0800e268 <ACR_Refresh>:
}



inline void ACR_Refresh(ACR_TypeDef *hACR)
{
 800e268:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e26c:	b082      	sub	sp, #8
 800e26e:	af00      	add	r7, sp, #0
 800e270:	6078      	str	r0, [r7, #4]
	static float _Id_ref;
	static float _Iq_ref;

	static ACR_InitTypeDef *hACR_Init;

	hACR_Init = &hACR->Init;
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	4ab0      	ldr	r2, [pc, #704]	; (800e538 <ACR_Refresh+0x2d0>)
 800e276:	6013      	str	r3, [r2, #0]

	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_SET);
 800e278:	2201      	movs	r2, #1
 800e27a:	2140      	movs	r1, #64	; 0x40
 800e27c:	48af      	ldr	r0, [pc, #700]	; (800e53c <ACR_Refresh+0x2d4>)
 800e27e:	f7fd f8c7 	bl	800b410 <HAL_GPIO_WritePin>
	/*
	hACR->Id_ref = 0.0f;
	hACR->Iq_ref = 0.5f + 0.75f * sin_table2[(int)((fmod(mainEncoder.theta * POLES + 4.14159f, 2.0f * M_PI) * 0.3183f + 0.5f) * 5000.0f)];
	*/

	Encoder_Refresh(hACR_Init->hEncoder);
 800e282:	4bad      	ldr	r3, [pc, #692]	; (800e538 <ACR_Refresh+0x2d0>)
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	69db      	ldr	r3, [r3, #28]
 800e288:	4618      	mov	r0, r3
 800e28a:	f001 fd39 	bl	800fd00 <Encoder_Refresh>


	CurrentSensor_Refresh(&mainCS, sector_SVM);
 800e28e:	4bac      	ldr	r3, [pc, #688]	; (800e540 <ACR_Refresh+0x2d8>)
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	b2db      	uxtb	r3, r3
 800e294:	4619      	mov	r1, r3
 800e296:	48ab      	ldr	r0, [pc, #684]	; (800e544 <ACR_Refresh+0x2dc>)
 800e298:	f000 fd56 	bl	800ed48 <CurrentSensor_Refresh>


	CurrentSensor_getIdq(&mainCS, &hACR->Id, &hACR->Iq, hACR_Init->hEncoder->cos_theta_re, hACR_Init->hEncoder->sin_theta_re);
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800e2a8:	4ba3      	ldr	r3, [pc, #652]	; (800e538 <ACR_Refresh+0x2d0>)
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	69db      	ldr	r3, [r3, #28]
 800e2ae:	edd3 7a07 	vldr	s15, [r3, #28]
 800e2b2:	4ba1      	ldr	r3, [pc, #644]	; (800e538 <ACR_Refresh+0x2d0>)
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	69db      	ldr	r3, [r3, #28]
 800e2b8:	ed93 7a08 	vldr	s14, [r3, #32]
 800e2bc:	eef0 0a47 	vmov.f32	s1, s14
 800e2c0:	eeb0 0a67 	vmov.f32	s0, s15
 800e2c4:	489f      	ldr	r0, [pc, #636]	; (800e544 <ACR_Refresh+0x2dc>)
 800e2c6:	f000 fe83 	bl	800efd0 <CurrentSensor_getIdq>


	/*
	 * 強制転流
	 */
	if(hACR->forced_commute_enable)
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d03d      	beq.n	800e350 <ACR_Refresh+0xe8>
		else if(_forced_theta_re >= 2 * M_PI)	forced_theta_re = _forced_theta_re - 2 * M_PI;
		else									forced_theta_re = _forced_theta_re;

		*/

		hACR->forced_cos_theta_re = sin_table2[(int)((hACR->forced_theta_re * 0.3183f + 0.5f) * 5000.0f)];
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800e2da:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 800e548 <ACR_Refresh+0x2e0>
 800e2de:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e2e2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800e2e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e2ea:	ed9f 7a98 	vldr	s14, [pc, #608]	; 800e54c <ACR_Refresh+0x2e4>
 800e2ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e2f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e2f6:	ee17 3a90 	vmov	r3, s15
 800e2fa:	4a95      	ldr	r2, [pc, #596]	; (800e550 <ACR_Refresh+0x2e8>)
 800e2fc:	009b      	lsls	r3, r3, #2
 800e2fe:	4413      	add	r3, r2
 800e300:	681a      	ldr	r2, [r3, #0]
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	665a      	str	r2, [r3, #100]	; 0x64
		hACR->forced_sin_theta_re = sin_table2[(int)(hACR->forced_theta_re * 1591.54943f)];
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800e30c:	ed9f 7a91 	vldr	s14, [pc, #580]	; 800e554 <ACR_Refresh+0x2ec>
 800e310:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e314:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e318:	ee17 3a90 	vmov	r3, s15
 800e31c:	4a8c      	ldr	r2, [pc, #560]	; (800e550 <ACR_Refresh+0x2e8>)
 800e31e:	009b      	lsls	r3, r3, #2
 800e320:	4413      	add	r3, r2
 800e322:	681a      	ldr	r2, [r3, #0]
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	669a      	str	r2, [r3, #104]	; 0x68

		CurrentSensor_getIdq(&mainCS, &hACR->Id, &hACR->Iq, hACR->forced_cos_theta_re, hACR->forced_sin_theta_re);
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 800e340:	eef0 0a47 	vmov.f32	s1, s14
 800e344:	eeb0 0a67 	vmov.f32	s0, s15
 800e348:	487e      	ldr	r0, [pc, #504]	; (800e544 <ACR_Refresh+0x2dc>)
 800e34a:	f000 fe41 	bl	800efd0 <CurrentSensor_getIdq>
 800e34e:	e016      	b.n	800e37e <ACR_Refresh+0x116>

	}
	else
	{

		CurrentSensor_getIdq(&mainCS, &hACR->Id, &hACR->Iq, hACR_Init->hEncoder->cos_theta_re, hACR_Init->hEncoder->sin_theta_re);
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800e35c:	4b76      	ldr	r3, [pc, #472]	; (800e538 <ACR_Refresh+0x2d0>)
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	69db      	ldr	r3, [r3, #28]
 800e362:	edd3 7a07 	vldr	s15, [r3, #28]
 800e366:	4b74      	ldr	r3, [pc, #464]	; (800e538 <ACR_Refresh+0x2d0>)
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	69db      	ldr	r3, [r3, #28]
 800e36c:	ed93 7a08 	vldr	s14, [r3, #32]
 800e370:	eef0 0a47 	vmov.f32	s1, s14
 800e374:	eeb0 0a67 	vmov.f32	s0, s15
 800e378:	4872      	ldr	r0, [pc, #456]	; (800e544 <ACR_Refresh+0x2dc>)
 800e37a:	f000 fe29 	bl	800efd0 <CurrentSensor_getIdq>

	// 旧実装
	//get_current_dq(&Id, &Iq, sector_SVM, cos_theta_re, sin_theta_re);


	if(hACR_Init->hEncoder->theta_re < M_PI)
 800e37e:	4b6e      	ldr	r3, [pc, #440]	; (800e538 <ACR_Refresh+0x2d0>)
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	69db      	ldr	r3, [r3, #28]
 800e384:	699b      	ldr	r3, [r3, #24]
 800e386:	4618      	mov	r0, r3
 800e388:	f7fa f80e 	bl	80083a8 <__aeabi_f2d>
 800e38c:	a368      	add	r3, pc, #416	; (adr r3, 800e530 <ACR_Refresh+0x2c8>)
 800e38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e392:	f7fa fad3 	bl	800893c <__aeabi_dcmplt>
 800e396:	4603      	mov	r3, r0
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d005      	beq.n	800e3a8 <ACR_Refresh+0x140>
		HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_RESET);
 800e39c:	2200      	movs	r2, #0
 800e39e:	2140      	movs	r1, #64	; 0x40
 800e3a0:	486d      	ldr	r0, [pc, #436]	; (800e558 <ACR_Refresh+0x2f0>)
 800e3a2:	f7fd f835 	bl	800b410 <HAL_GPIO_WritePin>
 800e3a6:	e004      	b.n	800e3b2 <ACR_Refresh+0x14a>
	else
		HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_SET);
 800e3a8:	2201      	movs	r2, #1
 800e3aa:	2140      	movs	r1, #64	; 0x40
 800e3ac:	486a      	ldr	r0, [pc, #424]	; (800e558 <ACR_Refresh+0x2f0>)
 800e3ae:	f7fd f82f 	bl	800b410 <HAL_GPIO_WritePin>



	/********** ACR (Auto Current Regulator) **********/

	if(hACR->enable /*&& soundCount == -1*/)
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	f000 8179 	beq.w	800e6b0 <ACR_Refresh+0x448>
	{

		if(hACR->Id_ref < -hACR_Init->Id_limit)			_Id_ref = -hACR_Init->Id_limit;
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800e3c4:	4b5c      	ldr	r3, [pc, #368]	; (800e538 <ACR_Refresh+0x2d0>)
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	edd3 7a03 	vldr	s15, [r3, #12]
 800e3cc:	eef1 7a67 	vneg.f32	s15, s15
 800e3d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e3d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3d8:	d509      	bpl.n	800e3ee <ACR_Refresh+0x186>
 800e3da:	4b57      	ldr	r3, [pc, #348]	; (800e538 <ACR_Refresh+0x2d0>)
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	edd3 7a03 	vldr	s15, [r3, #12]
 800e3e2:	eef1 7a67 	vneg.f32	s15, s15
 800e3e6:	4b5d      	ldr	r3, [pc, #372]	; (800e55c <ACR_Refresh+0x2f4>)
 800e3e8:	edc3 7a00 	vstr	s15, [r3]
 800e3ec:	e015      	b.n	800e41a <ACR_Refresh+0x1b2>
		else if(hACR->Id_ref > hACR_Init->Id_limit)		_Id_ref = hACR_Init->Id_limit;
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800e3f4:	4b50      	ldr	r3, [pc, #320]	; (800e538 <ACR_Refresh+0x2d0>)
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	edd3 7a03 	vldr	s15, [r3, #12]
 800e3fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e404:	dd05      	ble.n	800e412 <ACR_Refresh+0x1aa>
 800e406:	4b4c      	ldr	r3, [pc, #304]	; (800e538 <ACR_Refresh+0x2d0>)
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	68db      	ldr	r3, [r3, #12]
 800e40c:	4a53      	ldr	r2, [pc, #332]	; (800e55c <ACR_Refresh+0x2f4>)
 800e40e:	6013      	str	r3, [r2, #0]
 800e410:	e003      	b.n	800e41a <ACR_Refresh+0x1b2>
		else											_Id_ref = hACR->Id_ref;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e416:	4a51      	ldr	r2, [pc, #324]	; (800e55c <ACR_Refresh+0x2f4>)
 800e418:	6013      	str	r3, [r2, #0]

		if(hACR->Iq_ref < -hACR_Init->Iq_limit)			_Iq_ref = -hACR_Init->Iq_limit;
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800e420:	4b45      	ldr	r3, [pc, #276]	; (800e538 <ACR_Refresh+0x2d0>)
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	edd3 7a04 	vldr	s15, [r3, #16]
 800e428:	eef1 7a67 	vneg.f32	s15, s15
 800e42c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e434:	d509      	bpl.n	800e44a <ACR_Refresh+0x1e2>
 800e436:	4b40      	ldr	r3, [pc, #256]	; (800e538 <ACR_Refresh+0x2d0>)
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	edd3 7a04 	vldr	s15, [r3, #16]
 800e43e:	eef1 7a67 	vneg.f32	s15, s15
 800e442:	4b47      	ldr	r3, [pc, #284]	; (800e560 <ACR_Refresh+0x2f8>)
 800e444:	edc3 7a00 	vstr	s15, [r3]
 800e448:	e015      	b.n	800e476 <ACR_Refresh+0x20e>
		else if(hACR->Iq_ref > hACR_Init->Iq_limit)		_Iq_ref = hACR_Init->Iq_limit;
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800e450:	4b39      	ldr	r3, [pc, #228]	; (800e538 <ACR_Refresh+0x2d0>)
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	edd3 7a04 	vldr	s15, [r3, #16]
 800e458:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e45c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e460:	dd05      	ble.n	800e46e <ACR_Refresh+0x206>
 800e462:	4b35      	ldr	r3, [pc, #212]	; (800e538 <ACR_Refresh+0x2d0>)
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	691b      	ldr	r3, [r3, #16]
 800e468:	4a3d      	ldr	r2, [pc, #244]	; (800e560 <ACR_Refresh+0x2f8>)
 800e46a:	6013      	str	r3, [r2, #0]
 800e46c:	e003      	b.n	800e476 <ACR_Refresh+0x20e>
		else											_Iq_ref = hACR->Iq_ref;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e472:	4a3b      	ldr	r2, [pc, #236]	; (800e560 <ACR_Refresh+0x2f8>)
 800e474:	6013      	str	r3, [r2, #0]


		hACR->Id_error = _Id_ref - hACR->Id;
 800e476:	4b39      	ldr	r3, [pc, #228]	; (800e55c <ACR_Refresh+0x2f4>)
 800e478:	ed93 7a00 	vldr	s14, [r3]
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800e482:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		hACR->Iq_error = _Iq_ref - hACR->Iq;
 800e48c:	4b34      	ldr	r3, [pc, #208]	; (800e560 <ACR_Refresh+0x2f8>)
 800e48e:	ed93 7a00 	vldr	s14, [r3]
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800e498:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40


		hACR->Id_error_integ += hACR_Init->cycleTime * 0.5f * (hACR->Id_error + hACR->p_Id_error);
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 800e4a8:	4b23      	ldr	r3, [pc, #140]	; (800e538 <ACR_Refresh+0x2d0>)
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	edd3 7a02 	vldr	s15, [r3, #8]
 800e4b0:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e4b4:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800e4c4:	ee76 7a27 	vadd.f32	s15, s12, s15
 800e4c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e4cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		hACR->Iq_error_integ += hACR_Init->cycleTime * 0.5f * (hACR->Iq_error + hACR->p_Iq_error);
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 800e4dc:	4b16      	ldr	r3, [pc, #88]	; (800e538 <ACR_Refresh+0x2d0>)
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	edd3 7a02 	vldr	s15, [r3, #8]
 800e4e4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e4e8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	ed93 6a10 	vldr	s12, [r3, #64]	; 0x40
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800e4f8:	ee76 7a27 	vadd.f32	s15, s12, s15
 800e4fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e500:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50


		if(hACR->Id_error_integ > hACR_Init->Id_error_integ_limit)
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 800e510:	4b09      	ldr	r3, [pc, #36]	; (800e538 <ACR_Refresh+0x2d0>)
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	edd3 7a05 	vldr	s15, [r3, #20]
 800e518:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e51c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e520:	dd20      	ble.n	800e564 <ACR_Refresh+0x2fc>
		{
			hACR->Id_error_integ = hACR_Init->Id_error_integ_limit;
 800e522:	4b05      	ldr	r3, [pc, #20]	; (800e538 <ACR_Refresh+0x2d0>)
 800e524:	681b      	ldr	r3, [r3, #0]
 800e526:	695a      	ldr	r2, [r3, #20]
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	64da      	str	r2, [r3, #76]	; 0x4c
 800e52c:	e049      	b.n	800e5c2 <ACR_Refresh+0x35a>
 800e52e:	bf00      	nop
 800e530:	54442d18 	.word	0x54442d18
 800e534:	400921fb 	.word	0x400921fb
 800e538:	200000a4 	.word	0x200000a4
 800e53c:	40020400 	.word	0x40020400
 800e540:	200040fc 	.word	0x200040fc
 800e544:	200041ec 	.word	0x200041ec
 800e548:	3ea2f838 	.word	0x3ea2f838
 800e54c:	459c4000 	.word	0x459c4000
 800e550:	08012c58 	.word	0x08012c58
 800e554:	44c6f195 	.word	0x44c6f195
 800e558:	40020000 	.word	0x40020000
 800e55c:	200000a8 	.word	0x200000a8
 800e560:	200000ac 	.word	0x200000ac
		}
		else if(hACR->Id_error_integ < -1.0 * hACR_Init->Id_error_integ_limit)
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e568:	4618      	mov	r0, r3
 800e56a:	f7f9 ff1d 	bl	80083a8 <__aeabi_f2d>
 800e56e:	4682      	mov	sl, r0
 800e570:	468b      	mov	fp, r1
 800e572:	4b82      	ldr	r3, [pc, #520]	; (800e77c <ACR_Refresh+0x514>)
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	695b      	ldr	r3, [r3, #20]
 800e578:	4618      	mov	r0, r3
 800e57a:	f7f9 ff15 	bl	80083a8 <__aeabi_f2d>
 800e57e:	4602      	mov	r2, r0
 800e580:	460b      	mov	r3, r1
 800e582:	4690      	mov	r8, r2
 800e584:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 800e588:	4642      	mov	r2, r8
 800e58a:	464b      	mov	r3, r9
 800e58c:	4650      	mov	r0, sl
 800e58e:	4659      	mov	r1, fp
 800e590:	f7fa f9d4 	bl	800893c <__aeabi_dcmplt>
 800e594:	4603      	mov	r3, r0
 800e596:	2b00      	cmp	r3, #0
 800e598:	d013      	beq.n	800e5c2 <ACR_Refresh+0x35a>
		{
			hACR->Id_error_integ = -1.0 * hACR_Init->Id_error_integ_limit;
 800e59a:	4b78      	ldr	r3, [pc, #480]	; (800e77c <ACR_Refresh+0x514>)
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	695b      	ldr	r3, [r3, #20]
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	f7f9 ff01 	bl	80083a8 <__aeabi_f2d>
 800e5a6:	4602      	mov	r2, r0
 800e5a8:	460b      	mov	r3, r1
 800e5aa:	4610      	mov	r0, r2
 800e5ac:	4619      	mov	r1, r3
 800e5ae:	f7fa fa2b 	bl	8008a08 <__aeabi_d2f>
 800e5b2:	4603      	mov	r3, r0
 800e5b4:	ee07 3a90 	vmov	s15, r3
 800e5b8:	eef1 7a67 	vneg.f32	s15, s15
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		}

		if(hACR->Iq_error_integ > hACR_Init->Iq_error_integ_limit)
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 800e5c8:	4b6c      	ldr	r3, [pc, #432]	; (800e77c <ACR_Refresh+0x514>)
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	edd3 7a06 	vldr	s15, [r3, #24]
 800e5d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e5d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5d8:	dd05      	ble.n	800e5e6 <ACR_Refresh+0x37e>
		{
			hACR->Iq_error_integ = hACR_Init->Iq_error_integ_limit;
 800e5da:	4b68      	ldr	r3, [pc, #416]	; (800e77c <ACR_Refresh+0x514>)
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	699a      	ldr	r2, [r3, #24]
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	651a      	str	r2, [r3, #80]	; 0x50
 800e5e4:	e02e      	b.n	800e644 <ACR_Refresh+0x3dc>
		}
		else if(hACR->Iq_error_integ < -1.0 * hACR_Init->Iq_error_integ_limit)
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	f7f9 fedc 	bl	80083a8 <__aeabi_f2d>
 800e5f0:	4680      	mov	r8, r0
 800e5f2:	4689      	mov	r9, r1
 800e5f4:	4b61      	ldr	r3, [pc, #388]	; (800e77c <ACR_Refresh+0x514>)
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	699b      	ldr	r3, [r3, #24]
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	f7f9 fed4 	bl	80083a8 <__aeabi_f2d>
 800e600:	4602      	mov	r2, r0
 800e602:	460b      	mov	r3, r1
 800e604:	4614      	mov	r4, r2
 800e606:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800e60a:	4622      	mov	r2, r4
 800e60c:	462b      	mov	r3, r5
 800e60e:	4640      	mov	r0, r8
 800e610:	4649      	mov	r1, r9
 800e612:	f7fa f993 	bl	800893c <__aeabi_dcmplt>
 800e616:	4603      	mov	r3, r0
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d013      	beq.n	800e644 <ACR_Refresh+0x3dc>
		{
			hACR->Iq_error_integ = -1.0 * hACR_Init->Iq_error_integ_limit;
 800e61c:	4b57      	ldr	r3, [pc, #348]	; (800e77c <ACR_Refresh+0x514>)
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	699b      	ldr	r3, [r3, #24]
 800e622:	4618      	mov	r0, r3
 800e624:	f7f9 fec0 	bl	80083a8 <__aeabi_f2d>
 800e628:	4603      	mov	r3, r0
 800e62a:	460c      	mov	r4, r1
 800e62c:	4618      	mov	r0, r3
 800e62e:	4621      	mov	r1, r4
 800e630:	f7fa f9ea 	bl	8008a08 <__aeabi_d2f>
 800e634:	4603      	mov	r3, r0
 800e636:	ee07 3a90 	vmov	s15, r3
 800e63a:	eef1 7a67 	vneg.f32	s15, s15
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
		}


		hACR->p_Id_error = hACR->Id_error;
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	645a      	str	r2, [r3, #68]	; 0x44
		hACR->p_Iq_error = hACR->Iq_error;
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	649a      	str	r2, [r3, #72]	; 0x48
		else if(Iq_error_integ_temp1 > 1000000.0) Iq_error_integ_temp1 = 1000000.0;
		Iq_error_integ = ACR_cycleTime * 0.5f * (Iq_error_integ_temp1 + Iq_error_integ_temp2);
		Iq_error_integ_temp2 = Iq_error_integ_temp1;
		*/

		hACR->Vd_ref = hACR_Init->Kp * hACR->Id_error + hACR_Init->Ki * hACR->Id_error_integ;
 800e654:	4b49      	ldr	r3, [pc, #292]	; (800e77c <ACR_Refresh+0x514>)
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	ed93 7a00 	vldr	s14, [r3]
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800e662:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e666:	4b45      	ldr	r3, [pc, #276]	; (800e77c <ACR_Refresh+0x514>)
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	edd3 6a01 	vldr	s13, [r3, #4]
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800e674:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e678:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
		hACR->Vq_ref = hACR_Init->Kp * hACR->Iq_error + hACR_Init->Ki * hACR->Iq_error_integ;
 800e682:	4b3e      	ldr	r3, [pc, #248]	; (800e77c <ACR_Refresh+0x514>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	ed93 7a00 	vldr	s14, [r3]
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800e690:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e694:	4b39      	ldr	r3, [pc, #228]	; (800e77c <ACR_Refresh+0x514>)
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	edd3 6a01 	vldr	s13, [r3, #4]
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800e6a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e6a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58


	/********* end of ACR **********/


	if(HAL_GPIO_ReadPin(BR_FLT_GPIO_Port, BR_FLT_Pin) == GPIO_PIN_RESET)
 800e6b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e6b4:	4832      	ldr	r0, [pc, #200]	; (800e780 <ACR_Refresh+0x518>)
 800e6b6:	f7fc fe93 	bl	800b3e0 <HAL_GPIO_ReadPin>
	{
		//HAL_NVIC_SystemReset();
	}


	if(hACR->forced_commute_enable)
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d017      	beq.n	800e6f4 <ACR_Refresh+0x48c>
	{
		setSVM_dq(&htim8, hACR->Vd_ref, hACR->Vq_ref, hACR->forced_cos_theta_re, hACR->forced_sin_theta_re);
 800e6c4:	687b      	ldr	r3, [r7, #4]
 800e6c6:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	ed93 6a1a 	vldr	s12, [r3, #104]	; 0x68
 800e6dc:	eef0 1a46 	vmov.f32	s3, s12
 800e6e0:	eeb0 1a66 	vmov.f32	s2, s13
 800e6e4:	eef0 0a47 	vmov.f32	s1, s14
 800e6e8:	eeb0 0a67 	vmov.f32	s0, s15
 800e6ec:	4825      	ldr	r0, [pc, #148]	; (800e784 <ACR_Refresh+0x51c>)
 800e6ee:	f001 ff51 	bl	8010594 <setSVM_dq>
 800e6f2:	e01a      	b.n	800e72a <ACR_Refresh+0x4c2>
	}
	else
	{
		setSVM_dq(&htim8, hACR->Vd_ref, hACR->Vq_ref, hACR_Init->hEncoder->cos_theta_re, hACR_Init->hEncoder->sin_theta_re);
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 800e700:	4b1e      	ldr	r3, [pc, #120]	; (800e77c <ACR_Refresh+0x514>)
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	69db      	ldr	r3, [r3, #28]
 800e706:	edd3 6a07 	vldr	s13, [r3, #28]
 800e70a:	4b1c      	ldr	r3, [pc, #112]	; (800e77c <ACR_Refresh+0x514>)
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	69db      	ldr	r3, [r3, #28]
 800e710:	ed93 6a08 	vldr	s12, [r3, #32]
 800e714:	eef0 1a46 	vmov.f32	s3, s12
 800e718:	eeb0 1a66 	vmov.f32	s2, s13
 800e71c:	eef0 0a47 	vmov.f32	s1, s14
 800e720:	eeb0 0a67 	vmov.f32	s0, s15
 800e724:	4817      	ldr	r0, [pc, #92]	; (800e784 <ACR_Refresh+0x51c>)
 800e726:	f001 ff35 	bl	8010594 <setSVM_dq>
	}

#endif


	Encoder_Request(hACR_Init->hEncoder);
 800e72a:	4b14      	ldr	r3, [pc, #80]	; (800e77c <ACR_Refresh+0x514>)
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	69db      	ldr	r3, [r3, #28]
 800e730:	4618      	mov	r0, r3
 800e732:	f001 fabf 	bl	800fcb4 <Encoder_Request>


	// Auto Speed Regulator launching
	ASR_prescalerCount += 1;
 800e736:	4b14      	ldr	r3, [pc, #80]	; (800e788 <ACR_Refresh+0x520>)
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	3301      	adds	r3, #1
 800e73c:	4a12      	ldr	r2, [pc, #72]	; (800e788 <ACR_Refresh+0x520>)
 800e73e:	6013      	str	r3, [r2, #0]
	if(ASR_prescalerCount >= ASR_prescale)
 800e740:	4b11      	ldr	r3, [pc, #68]	; (800e788 <ACR_Refresh+0x520>)
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	2b09      	cmp	r3, #9
 800e746:	dd05      	ble.n	800e754 <ACR_Refresh+0x4ec>
	{
		ASR_flg = 1;
 800e748:	4b10      	ldr	r3, [pc, #64]	; (800e78c <ACR_Refresh+0x524>)
 800e74a:	2201      	movs	r2, #1
 800e74c:	601a      	str	r2, [r3, #0]
		ASR_prescalerCount = 0;
 800e74e:	4b0e      	ldr	r3, [pc, #56]	; (800e788 <ACR_Refresh+0x520>)
 800e750:	2200      	movs	r2, #0
 800e752:	601a      	str	r2, [r3, #0]
	}

	msec += 0.1f;
 800e754:	4b0e      	ldr	r3, [pc, #56]	; (800e790 <ACR_Refresh+0x528>)
 800e756:	edd3 7a00 	vldr	s15, [r3]
 800e75a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800e794 <ACR_Refresh+0x52c>
 800e75e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e762:	4b0b      	ldr	r3, [pc, #44]	; (800e790 <ACR_Refresh+0x528>)
 800e764:	edc3 7a00 	vstr	s15, [r3]


	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 800e768:	2200      	movs	r2, #0
 800e76a:	2140      	movs	r1, #64	; 0x40
 800e76c:	480a      	ldr	r0, [pc, #40]	; (800e798 <ACR_Refresh+0x530>)
 800e76e:	f7fc fe4f 	bl	800b410 <HAL_GPIO_WritePin>

	return;
 800e772:	bf00      	nop
}
 800e774:	3708      	adds	r7, #8
 800e776:	46bd      	mov	sp, r7
 800e778:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e77c:	200000a4 	.word	0x200000a4
 800e780:	40020000 	.word	0x40020000
 800e784:	200045a8 	.word	0x200045a8
 800e788:	200000cc 	.word	0x200000cc
 800e78c:	200000c8 	.word	0x200000c8
 800e790:	200000a0 	.word	0x200000a0
 800e794:	3dcccccd 	.word	0x3dcccccd
 800e798:	40020400 	.word	0x40020400

0800e79c <ACR_Reset>:



inline void ACR_Reset(ACR_TypeDef *hACR)
{
 800e79c:	b480      	push	{r7}
 800e79e:	b083      	sub	sp, #12
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	6078      	str	r0, [r7, #4]

	hACR->Id_error_integ = 0.0f;
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	f04f 0200 	mov.w	r2, #0
 800e7aa:	64da      	str	r2, [r3, #76]	; 0x4c
	hACR->Iq_error_integ = 0.0f;
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	f04f 0200 	mov.w	r2, #0
 800e7b2:	651a      	str	r2, [r3, #80]	; 0x50

	hACR->Id = hACR->Id_ref = 0.0f;
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	f04f 0200 	mov.w	r2, #0
 800e7ba:	62da      	str	r2, [r3, #44]	; 0x2c
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	635a      	str	r2, [r3, #52]	; 0x34
	hACR->Iq = hACR->Iq_ref = 0.0f;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	f04f 0200 	mov.w	r2, #0
 800e7ca:	631a      	str	r2, [r3, #48]	; 0x30
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	639a      	str	r2, [r3, #56]	; 0x38

	hACR->Vd_ref = 0.0f;
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	f04f 0200 	mov.w	r2, #0
 800e7da:	655a      	str	r2, [r3, #84]	; 0x54
	hACR->Vq_ref = 0.0f;
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	f04f 0200 	mov.w	r2, #0
 800e7e2:	659a      	str	r2, [r3, #88]	; 0x58

}
 800e7e4:	bf00      	nop
 800e7e6:	370c      	adds	r7, #12
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ee:	4770      	bx	lr

0800e7f0 <ASR_Start>:
float omega_error_integ_temp2 = 0.0f;



void ASR_Start()
{
 800e7f0:	b580      	push	{r7, lr}
 800e7f2:	af00      	add	r7, sp, #0

	ASR_enable = 1;
 800e7f4:	4b03      	ldr	r3, [pc, #12]	; (800e804 <ASR_Start+0x14>)
 800e7f6:	2201      	movs	r2, #1
 800e7f8:	701a      	strb	r2, [r3, #0]
	ASR_Reset();
 800e7fa:	f000 fa1f 	bl	800ec3c <ASR_Reset>

}
 800e7fe:	bf00      	nop
 800e800:	bd80      	pop	{r7, pc}
 800e802:	bf00      	nop
 800e804:	200000b0 	.word	0x200000b0

0800e808 <speedControl>:
}



inline void speedControl()
{
 800e808:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800e80c:	af00      	add	r7, sp, #0

	  if(ASR_steps <= 0)
 800e80e:	4b86      	ldr	r3, [pc, #536]	; (800ea28 <speedControl+0x220>)
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	2b00      	cmp	r3, #0
 800e814:	dc04      	bgt.n	800e820 <speedControl+0x18>
	  {
		  d_theta = 0.0f;
 800e816:	4b85      	ldr	r3, [pc, #532]	; (800ea2c <speedControl+0x224>)
 800e818:	f04f 0200 	mov.w	r2, #0
 800e81c:	601a      	str	r2, [r3, #0]
 800e81e:	e00a      	b.n	800e836 <speedControl+0x2e>
	  }
	  else
	  {
		  d_theta = mainEncoder.theta - p_theta;
 800e820:	4b83      	ldr	r3, [pc, #524]	; (800ea30 <speedControl+0x228>)
 800e822:	ed93 7a05 	vldr	s14, [r3, #20]
 800e826:	4b83      	ldr	r3, [pc, #524]	; (800ea34 <speedControl+0x22c>)
 800e828:	edd3 7a00 	vldr	s15, [r3]
 800e82c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e830:	4b7e      	ldr	r3, [pc, #504]	; (800ea2c <speedControl+0x224>)
 800e832:	edc3 7a00 	vstr	s15, [r3]
	  }
	  ASR_steps += 1;
 800e836:	4b7c      	ldr	r3, [pc, #496]	; (800ea28 <speedControl+0x220>)
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	3301      	adds	r3, #1
 800e83c:	4a7a      	ldr	r2, [pc, #488]	; (800ea28 <speedControl+0x220>)
 800e83e:	6013      	str	r3, [r2, #0]

	  p_theta = mainEncoder.theta;
 800e840:	4b7b      	ldr	r3, [pc, #492]	; (800ea30 <speedControl+0x228>)
 800e842:	695b      	ldr	r3, [r3, #20]
 800e844:	4a7b      	ldr	r2, [pc, #492]	; (800ea34 <speedControl+0x22c>)
 800e846:	6013      	str	r3, [r2, #0]

	  if(d_theta < - M_PI)		d_theta += 2 * M_PI;
 800e848:	4b78      	ldr	r3, [pc, #480]	; (800ea2c <speedControl+0x224>)
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	4618      	mov	r0, r3
 800e84e:	f7f9 fdab 	bl	80083a8 <__aeabi_f2d>
 800e852:	a36f      	add	r3, pc, #444	; (adr r3, 800ea10 <speedControl+0x208>)
 800e854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e858:	f7fa f870 	bl	800893c <__aeabi_dcmplt>
 800e85c:	4603      	mov	r3, r0
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d013      	beq.n	800e88a <speedControl+0x82>
 800e862:	4b72      	ldr	r3, [pc, #456]	; (800ea2c <speedControl+0x224>)
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	4618      	mov	r0, r3
 800e868:	f7f9 fd9e 	bl	80083a8 <__aeabi_f2d>
 800e86c:	a36a      	add	r3, pc, #424	; (adr r3, 800ea18 <speedControl+0x210>)
 800e86e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e872:	f7f9 fc3b 	bl	80080ec <__adddf3>
 800e876:	4603      	mov	r3, r0
 800e878:	460c      	mov	r4, r1
 800e87a:	4618      	mov	r0, r3
 800e87c:	4621      	mov	r1, r4
 800e87e:	f7fa f8c3 	bl	8008a08 <__aeabi_d2f>
 800e882:	4602      	mov	r2, r0
 800e884:	4b69      	ldr	r3, [pc, #420]	; (800ea2c <speedControl+0x224>)
 800e886:	601a      	str	r2, [r3, #0]
 800e888:	e01f      	b.n	800e8ca <speedControl+0xc2>
	  else if(d_theta > M_PI)	d_theta -= 2 * M_PI;
 800e88a:	4b68      	ldr	r3, [pc, #416]	; (800ea2c <speedControl+0x224>)
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	4618      	mov	r0, r3
 800e890:	f7f9 fd8a 	bl	80083a8 <__aeabi_f2d>
 800e894:	a362      	add	r3, pc, #392	; (adr r3, 800ea20 <speedControl+0x218>)
 800e896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e89a:	f7fa f86d 	bl	8008978 <__aeabi_dcmpgt>
 800e89e:	4603      	mov	r3, r0
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d012      	beq.n	800e8ca <speedControl+0xc2>
 800e8a4:	4b61      	ldr	r3, [pc, #388]	; (800ea2c <speedControl+0x224>)
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	f7f9 fd7d 	bl	80083a8 <__aeabi_f2d>
 800e8ae:	a35a      	add	r3, pc, #360	; (adr r3, 800ea18 <speedControl+0x210>)
 800e8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8b4:	f7f9 fc18 	bl	80080e8 <__aeabi_dsub>
 800e8b8:	4603      	mov	r3, r0
 800e8ba:	460c      	mov	r4, r1
 800e8bc:	4618      	mov	r0, r3
 800e8be:	4621      	mov	r1, r4
 800e8c0:	f7fa f8a2 	bl	8008a08 <__aeabi_d2f>
 800e8c4:	4602      	mov	r2, r0
 800e8c6:	4b59      	ldr	r3, [pc, #356]	; (800ea2c <speedControl+0x224>)
 800e8c8:	601a      	str	r2, [r3, #0]

	  omega = omega * 0.5 + 0.5 * d_theta / ASR_cycleTime;
 800e8ca:	4b5b      	ldr	r3, [pc, #364]	; (800ea38 <speedControl+0x230>)
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	f7f9 fd6a 	bl	80083a8 <__aeabi_f2d>
 800e8d4:	f04f 0200 	mov.w	r2, #0
 800e8d8:	4b58      	ldr	r3, [pc, #352]	; (800ea3c <speedControl+0x234>)
 800e8da:	f7f9 fdbd 	bl	8008458 <__aeabi_dmul>
 800e8de:	4603      	mov	r3, r0
 800e8e0:	460c      	mov	r4, r1
 800e8e2:	4625      	mov	r5, r4
 800e8e4:	461c      	mov	r4, r3
 800e8e6:	4b51      	ldr	r3, [pc, #324]	; (800ea2c <speedControl+0x224>)
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	f7f9 fd5c 	bl	80083a8 <__aeabi_f2d>
 800e8f0:	f04f 0200 	mov.w	r2, #0
 800e8f4:	4b51      	ldr	r3, [pc, #324]	; (800ea3c <speedControl+0x234>)
 800e8f6:	f7f9 fdaf 	bl	8008458 <__aeabi_dmul>
 800e8fa:	4602      	mov	r2, r0
 800e8fc:	460b      	mov	r3, r1
 800e8fe:	4690      	mov	r8, r2
 800e900:	4699      	mov	r9, r3
 800e902:	4b4f      	ldr	r3, [pc, #316]	; (800ea40 <speedControl+0x238>)
 800e904:	4618      	mov	r0, r3
 800e906:	f7f9 fd4f 	bl	80083a8 <__aeabi_f2d>
 800e90a:	4602      	mov	r2, r0
 800e90c:	460b      	mov	r3, r1
 800e90e:	4640      	mov	r0, r8
 800e910:	4649      	mov	r1, r9
 800e912:	f7f9 fecb 	bl	80086ac <__aeabi_ddiv>
 800e916:	4602      	mov	r2, r0
 800e918:	460b      	mov	r3, r1
 800e91a:	4620      	mov	r0, r4
 800e91c:	4629      	mov	r1, r5
 800e91e:	f7f9 fbe5 	bl	80080ec <__adddf3>
 800e922:	4603      	mov	r3, r0
 800e924:	460c      	mov	r4, r1
 800e926:	4618      	mov	r0, r3
 800e928:	4621      	mov	r1, r4
 800e92a:	f7fa f86d 	bl	8008a08 <__aeabi_d2f>
 800e92e:	4602      	mov	r2, r0
 800e930:	4b41      	ldr	r3, [pc, #260]	; (800ea38 <speedControl+0x230>)
 800e932:	601a      	str	r2, [r3, #0]


	  if(ASR_enable)
 800e934:	4b43      	ldr	r3, [pc, #268]	; (800ea44 <speedControl+0x23c>)
 800e936:	781b      	ldrb	r3, [r3, #0]
 800e938:	b2db      	uxtb	r3, r3
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	f000 814a 	beq.w	800ebd4 <speedControl+0x3cc>
	  {

		  if(omega_ref < -omega_limit)		_omega_ref = -omega_limit;
 800e940:	4b41      	ldr	r3, [pc, #260]	; (800ea48 <speedControl+0x240>)
 800e942:	edd3 7a00 	vldr	s15, [r3]
 800e946:	eeb1 7a67 	vneg.f32	s14, s15
 800e94a:	4b40      	ldr	r3, [pc, #256]	; (800ea4c <speedControl+0x244>)
 800e94c:	edd3 7a00 	vldr	s15, [r3]
 800e950:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e958:	dd08      	ble.n	800e96c <speedControl+0x164>
 800e95a:	4b3b      	ldr	r3, [pc, #236]	; (800ea48 <speedControl+0x240>)
 800e95c:	edd3 7a00 	vldr	s15, [r3]
 800e960:	eef1 7a67 	vneg.f32	s15, s15
 800e964:	4b3a      	ldr	r3, [pc, #232]	; (800ea50 <speedControl+0x248>)
 800e966:	edc3 7a00 	vstr	s15, [r3]
 800e96a:	e013      	b.n	800e994 <speedControl+0x18c>
		  else if(omega_ref > omega_limit)	_omega_ref = omega_limit;
 800e96c:	4b37      	ldr	r3, [pc, #220]	; (800ea4c <speedControl+0x244>)
 800e96e:	ed93 7a00 	vldr	s14, [r3]
 800e972:	4b35      	ldr	r3, [pc, #212]	; (800ea48 <speedControl+0x240>)
 800e974:	edd3 7a00 	vldr	s15, [r3]
 800e978:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e97c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e980:	dd04      	ble.n	800e98c <speedControl+0x184>
 800e982:	4b31      	ldr	r3, [pc, #196]	; (800ea48 <speedControl+0x240>)
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	4a32      	ldr	r2, [pc, #200]	; (800ea50 <speedControl+0x248>)
 800e988:	6013      	str	r3, [r2, #0]
 800e98a:	e003      	b.n	800e994 <speedControl+0x18c>
		  else								_omega_ref = omega_ref;
 800e98c:	4b2f      	ldr	r3, [pc, #188]	; (800ea4c <speedControl+0x244>)
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	4a2f      	ldr	r2, [pc, #188]	; (800ea50 <speedControl+0x248>)
 800e992:	6013      	str	r3, [r2, #0]

		  omega_error = _omega_ref - omega;
 800e994:	4b2e      	ldr	r3, [pc, #184]	; (800ea50 <speedControl+0x248>)
 800e996:	ed93 7a00 	vldr	s14, [r3]
 800e99a:	4b27      	ldr	r3, [pc, #156]	; (800ea38 <speedControl+0x230>)
 800e99c:	edd3 7a00 	vldr	s15, [r3]
 800e9a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e9a4:	4b2b      	ldr	r3, [pc, #172]	; (800ea54 <speedControl+0x24c>)
 800e9a6:	edc3 7a00 	vstr	s15, [r3]

		  // integral
		  omega_error_integ_temp1 = omega_error + omega_error_integ_temp2;
 800e9aa:	4b2a      	ldr	r3, [pc, #168]	; (800ea54 <speedControl+0x24c>)
 800e9ac:	ed93 7a00 	vldr	s14, [r3]
 800e9b0:	4b29      	ldr	r3, [pc, #164]	; (800ea58 <speedControl+0x250>)
 800e9b2:	edd3 7a00 	vldr	s15, [r3]
 800e9b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e9ba:	4b28      	ldr	r3, [pc, #160]	; (800ea5c <speedControl+0x254>)
 800e9bc:	edc3 7a00 	vstr	s15, [r3]
		  if(omega_error_integ_temp1 < -6.0 / ASR_cycleTime)
 800e9c0:	4b26      	ldr	r3, [pc, #152]	; (800ea5c <speedControl+0x254>)
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	f7f9 fcef 	bl	80083a8 <__aeabi_f2d>
 800e9ca:	4604      	mov	r4, r0
 800e9cc:	460d      	mov	r5, r1
 800e9ce:	4b1c      	ldr	r3, [pc, #112]	; (800ea40 <speedControl+0x238>)
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	f7f9 fce9 	bl	80083a8 <__aeabi_f2d>
 800e9d6:	4602      	mov	r2, r0
 800e9d8:	460b      	mov	r3, r1
 800e9da:	f04f 0000 	mov.w	r0, #0
 800e9de:	4920      	ldr	r1, [pc, #128]	; (800ea60 <speedControl+0x258>)
 800e9e0:	f7f9 fe64 	bl	80086ac <__aeabi_ddiv>
 800e9e4:	4602      	mov	r2, r0
 800e9e6:	460b      	mov	r3, r1
 800e9e8:	4620      	mov	r0, r4
 800e9ea:	4629      	mov	r1, r5
 800e9ec:	f7f9 ffa6 	bl	800893c <__aeabi_dcmplt>
 800e9f0:	4603      	mov	r3, r0
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d038      	beq.n	800ea68 <speedControl+0x260>
		  {
			  omega_error_integ_temp1 = -6.0 / ASR_cycleTime;
 800e9f6:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800ea64 <speedControl+0x25c>
 800e9fa:	eef9 6a08 	vmov.f32	s13, #152	; 0xc0c00000 -6.0
 800e9fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ea02:	4b16      	ldr	r3, [pc, #88]	; (800ea5c <speedControl+0x254>)
 800ea04:	edc3 7a00 	vstr	s15, [r3]
 800ea08:	e052      	b.n	800eab0 <speedControl+0x2a8>
 800ea0a:	bf00      	nop
 800ea0c:	f3af 8000 	nop.w
 800ea10:	54442d18 	.word	0x54442d18
 800ea14:	c00921fb 	.word	0xc00921fb
 800ea18:	54442d18 	.word	0x54442d18
 800ea1c:	401921fb 	.word	0x401921fb
 800ea20:	54442d18 	.word	0x54442d18
 800ea24:	400921fb 	.word	0x400921fb
 800ea28:	200000c4 	.word	0x200000c4
 800ea2c:	200041e4 	.word	0x200041e4
 800ea30:	200044c8 	.word	0x200044c8
 800ea34:	200000d4 	.word	0x200000d4
 800ea38:	200000d0 	.word	0x200000d0
 800ea3c:	3fe00000 	.word	0x3fe00000
 800ea40:	3a83126f 	.word	0x3a83126f
 800ea44:	200000b0 	.word	0x200000b0
 800ea48:	20000010 	.word	0x20000010
 800ea4c:	200000b4 	.word	0x200000b4
 800ea50:	200041e8 	.word	0x200041e8
 800ea54:	200000b8 	.word	0x200000b8
 800ea58:	200000dc 	.word	0x200000dc
 800ea5c:	200000d8 	.word	0x200000d8
 800ea60:	c0180000 	.word	0xc0180000
 800ea64:	3a83126f 	.word	0x3a83126f
		  }
		  else if(omega_error_integ_temp1 > 6.0 / ASR_cycleTime)
 800ea68:	4b65      	ldr	r3, [pc, #404]	; (800ec00 <speedControl+0x3f8>)
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	f7f9 fc9b 	bl	80083a8 <__aeabi_f2d>
 800ea72:	4604      	mov	r4, r0
 800ea74:	460d      	mov	r5, r1
 800ea76:	4b63      	ldr	r3, [pc, #396]	; (800ec04 <speedControl+0x3fc>)
 800ea78:	4618      	mov	r0, r3
 800ea7a:	f7f9 fc95 	bl	80083a8 <__aeabi_f2d>
 800ea7e:	4602      	mov	r2, r0
 800ea80:	460b      	mov	r3, r1
 800ea82:	f04f 0000 	mov.w	r0, #0
 800ea86:	4960      	ldr	r1, [pc, #384]	; (800ec08 <speedControl+0x400>)
 800ea88:	f7f9 fe10 	bl	80086ac <__aeabi_ddiv>
 800ea8c:	4602      	mov	r2, r0
 800ea8e:	460b      	mov	r3, r1
 800ea90:	4620      	mov	r0, r4
 800ea92:	4629      	mov	r1, r5
 800ea94:	f7f9 ff70 	bl	8008978 <__aeabi_dcmpgt>
 800ea98:	4603      	mov	r3, r0
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d008      	beq.n	800eab0 <speedControl+0x2a8>
		  {
			  omega_error_integ_temp1 = 6.0 / ASR_cycleTime;
 800ea9e:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 800ec0c <speedControl+0x404>
 800eaa2:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800eaa6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eaaa:	4b55      	ldr	r3, [pc, #340]	; (800ec00 <speedControl+0x3f8>)
 800eaac:	edc3 7a00 	vstr	s15, [r3]
		  }
		  omega_error_integ = ASR_cycleTime * 0.5f * (omega_error_integ_temp1 + omega_error_integ_temp2);
 800eab0:	ed9f 7a56 	vldr	s14, [pc, #344]	; 800ec0c <speedControl+0x404>
 800eab4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800eab8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800eabc:	4b50      	ldr	r3, [pc, #320]	; (800ec00 <speedControl+0x3f8>)
 800eabe:	edd3 6a00 	vldr	s13, [r3]
 800eac2:	4b53      	ldr	r3, [pc, #332]	; (800ec10 <speedControl+0x408>)
 800eac4:	edd3 7a00 	vldr	s15, [r3]
 800eac8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800eacc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ead0:	4b50      	ldr	r3, [pc, #320]	; (800ec14 <speedControl+0x40c>)
 800ead2:	edc3 7a00 	vstr	s15, [r3]
		  omega_error_integ_temp2 = omega_error_integ_temp1;
 800ead6:	4b4a      	ldr	r3, [pc, #296]	; (800ec00 <speedControl+0x3f8>)
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	4a4d      	ldr	r2, [pc, #308]	; (800ec10 <speedControl+0x408>)
 800eadc:	6013      	str	r3, [r2, #0]


		  torque_ref = Kp_ASR * omega_error + Ki_ASR * omega_error_integ;
 800eade:	4b4e      	ldr	r3, [pc, #312]	; (800ec18 <speedControl+0x410>)
 800eae0:	ed93 7a00 	vldr	s14, [r3]
 800eae4:	4b4d      	ldr	r3, [pc, #308]	; (800ec1c <speedControl+0x414>)
 800eae6:	edd3 7a00 	vldr	s15, [r3]
 800eaea:	ee27 7a27 	vmul.f32	s14, s14, s15
 800eaee:	4b4c      	ldr	r3, [pc, #304]	; (800ec20 <speedControl+0x418>)
 800eaf0:	edd3 6a00 	vldr	s13, [r3]
 800eaf4:	4b47      	ldr	r3, [pc, #284]	; (800ec14 <speedControl+0x40c>)
 800eaf6:	edd3 7a00 	vldr	s15, [r3]
 800eafa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800eafe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eb02:	4b48      	ldr	r3, [pc, #288]	; (800ec24 <speedControl+0x41c>)
 800eb04:	edc3 7a00 	vstr	s15, [r3]

		  mainACR.Id_ref = 0.0f;
 800eb08:	4b47      	ldr	r3, [pc, #284]	; (800ec28 <speedControl+0x420>)
 800eb0a:	f04f 0200 	mov.w	r2, #0
 800eb0e:	62da      	str	r2, [r3, #44]	; 0x2c
		  mainACR.Iq_ref = KT * torque_ref + 0.75f * sin_table2[(int)((fmod(mainEncoder.theta * POLES + 4.14159f, 2.0f * M_PI) * 0.3183f + 0.5f) * 5000.0f)];
 800eb10:	4b44      	ldr	r3, [pc, #272]	; (800ec24 <speedControl+0x41c>)
 800eb12:	681b      	ldr	r3, [r3, #0]
 800eb14:	4618      	mov	r0, r3
 800eb16:	f7f9 fc47 	bl	80083a8 <__aeabi_f2d>
 800eb1a:	a331      	add	r3, pc, #196	; (adr r3, 800ebe0 <speedControl+0x3d8>)
 800eb1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb20:	f7f9 fc9a 	bl	8008458 <__aeabi_dmul>
 800eb24:	4603      	mov	r3, r0
 800eb26:	460c      	mov	r4, r1
 800eb28:	4625      	mov	r5, r4
 800eb2a:	461c      	mov	r4, r3
 800eb2c:	4b3f      	ldr	r3, [pc, #252]	; (800ec2c <speedControl+0x424>)
 800eb2e:	edd3 7a05 	vldr	s15, [r3, #20]
 800eb32:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 800eb36:	ee67 7a87 	vmul.f32	s15, s15, s14
 800eb3a:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800ec30 <speedControl+0x428>
 800eb3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800eb42:	ee17 0a90 	vmov	r0, s15
 800eb46:	f7f9 fc2f 	bl	80083a8 <__aeabi_f2d>
 800eb4a:	4602      	mov	r2, r0
 800eb4c:	460b      	mov	r3, r1
 800eb4e:	ed9f 1b26 	vldr	d1, [pc, #152]	; 800ebe8 <speedControl+0x3e0>
 800eb52:	ec43 2b10 	vmov	d0, r2, r3
 800eb56:	f003 fd7f 	bl	8012658 <fmod>
 800eb5a:	ec51 0b10 	vmov	r0, r1, d0
 800eb5e:	a324      	add	r3, pc, #144	; (adr r3, 800ebf0 <speedControl+0x3e8>)
 800eb60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb64:	f7f9 fc78 	bl	8008458 <__aeabi_dmul>
 800eb68:	4602      	mov	r2, r0
 800eb6a:	460b      	mov	r3, r1
 800eb6c:	4610      	mov	r0, r2
 800eb6e:	4619      	mov	r1, r3
 800eb70:	f04f 0200 	mov.w	r2, #0
 800eb74:	4b2f      	ldr	r3, [pc, #188]	; (800ec34 <speedControl+0x42c>)
 800eb76:	f7f9 fab9 	bl	80080ec <__adddf3>
 800eb7a:	4602      	mov	r2, r0
 800eb7c:	460b      	mov	r3, r1
 800eb7e:	4610      	mov	r0, r2
 800eb80:	4619      	mov	r1, r3
 800eb82:	a31d      	add	r3, pc, #116	; (adr r3, 800ebf8 <speedControl+0x3f0>)
 800eb84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb88:	f7f9 fc66 	bl	8008458 <__aeabi_dmul>
 800eb8c:	4602      	mov	r2, r0
 800eb8e:	460b      	mov	r3, r1
 800eb90:	4610      	mov	r0, r2
 800eb92:	4619      	mov	r1, r3
 800eb94:	f7f9 ff10 	bl	80089b8 <__aeabi_d2iz>
 800eb98:	4603      	mov	r3, r0
 800eb9a:	4a27      	ldr	r2, [pc, #156]	; (800ec38 <speedControl+0x430>)
 800eb9c:	009b      	lsls	r3, r3, #2
 800eb9e:	4413      	add	r3, r2
 800eba0:	edd3 7a00 	vldr	s15, [r3]
 800eba4:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
 800eba8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ebac:	ee17 0a90 	vmov	r0, s15
 800ebb0:	f7f9 fbfa 	bl	80083a8 <__aeabi_f2d>
 800ebb4:	4602      	mov	r2, r0
 800ebb6:	460b      	mov	r3, r1
 800ebb8:	4620      	mov	r0, r4
 800ebba:	4629      	mov	r1, r5
 800ebbc:	f7f9 fa96 	bl	80080ec <__adddf3>
 800ebc0:	4603      	mov	r3, r0
 800ebc2:	460c      	mov	r4, r1
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	4621      	mov	r1, r4
 800ebc8:	f7f9 ff1e 	bl	8008a08 <__aeabi_d2f>
 800ebcc:	4602      	mov	r2, r0
 800ebce:	4b16      	ldr	r3, [pc, #88]	; (800ec28 <speedControl+0x420>)
 800ebd0:	631a      	str	r2, [r3, #48]	; 0x30
	  }




	return;
 800ebd2:	bf00      	nop
 800ebd4:	bf00      	nop
}
 800ebd6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800ebda:	bf00      	nop
 800ebdc:	f3af 8000 	nop.w
 800ebe0:	8b6ec798 	.word	0x8b6ec798
 800ebe4:	3fd22b62 	.word	0x3fd22b62
 800ebe8:	54442d18 	.word	0x54442d18
 800ebec:	401921fb 	.word	0x401921fb
 800ebf0:	00000000 	.word	0x00000000
 800ebf4:	3fd45f07 	.word	0x3fd45f07
 800ebf8:	00000000 	.word	0x00000000
 800ebfc:	40b38800 	.word	0x40b38800
 800ec00:	200000d8 	.word	0x200000d8
 800ec04:	3a83126f 	.word	0x3a83126f
 800ec08:	40180000 	.word	0x40180000
 800ec0c:	3a83126f 	.word	0x3a83126f
 800ec10:	200000dc 	.word	0x200000dc
 800ec14:	200000bc 	.word	0x200000bc
 800ec18:	20000008 	.word	0x20000008
 800ec1c:	200000b8 	.word	0x200000b8
 800ec20:	2000000c 	.word	0x2000000c
 800ec24:	200000c0 	.word	0x200000c0
 800ec28:	20004178 	.word	0x20004178
 800ec2c:	200044c8 	.word	0x200044c8
 800ec30:	408487e8 	.word	0x408487e8
 800ec34:	3fe00000 	.word	0x3fe00000
 800ec38:	08012c58 	.word	0x08012c58

0800ec3c <ASR_Reset>:



inline void ASR_Reset()
{
 800ec3c:	b480      	push	{r7}
 800ec3e:	af00      	add	r7, sp, #0

	p_theta = 0.0f;
 800ec40:	4b0c      	ldr	r3, [pc, #48]	; (800ec74 <ASR_Reset+0x38>)
 800ec42:	f04f 0200 	mov.w	r2, #0
 800ec46:	601a      	str	r2, [r3, #0]

	omega_error_integ_temp1 = 0.0f;
 800ec48:	4b0b      	ldr	r3, [pc, #44]	; (800ec78 <ASR_Reset+0x3c>)
 800ec4a:	f04f 0200 	mov.w	r2, #0
 800ec4e:	601a      	str	r2, [r3, #0]
	omega_error_integ_temp2 = 0.0f;
 800ec50:	4b0a      	ldr	r3, [pc, #40]	; (800ec7c <ASR_Reset+0x40>)
 800ec52:	f04f 0200 	mov.w	r2, #0
 800ec56:	601a      	str	r2, [r3, #0]

	omega = omega_ref = 0.0f;
 800ec58:	f04f 0300 	mov.w	r3, #0
 800ec5c:	4a08      	ldr	r2, [pc, #32]	; (800ec80 <ASR_Reset+0x44>)
 800ec5e:	6013      	str	r3, [r2, #0]
 800ec60:	4a08      	ldr	r2, [pc, #32]	; (800ec84 <ASR_Reset+0x48>)
 800ec62:	6013      	str	r3, [r2, #0]

	ASR_steps = 0;
 800ec64:	4b08      	ldr	r3, [pc, #32]	; (800ec88 <ASR_Reset+0x4c>)
 800ec66:	2200      	movs	r2, #0
 800ec68:	601a      	str	r2, [r3, #0]

}
 800ec6a:	bf00      	nop
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec72:	4770      	bx	lr
 800ec74:	200000d4 	.word	0x200000d4
 800ec78:	200000d8 	.word	0x200000d8
 800ec7c:	200000dc 	.word	0x200000dc
 800ec80:	200000b4 	.word	0x200000b4
 800ec84:	200000d0 	.word	0x200000d0
 800ec88:	200000c4 	.word	0x200000c4

0800ec8c <CurrentSensor_Init>:

int32_t median3(int32_t *buf);


void CurrentSensor_Init()
{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	af00      	add	r7, sp, #0

	memcpy(&mainCS, 0x00, sizeof(mainCS));
 800ec90:	4a12      	ldr	r2, [pc, #72]	; (800ecdc <CurrentSensor_Init+0x50>)
 800ec92:	2300      	movs	r3, #0
 800ec94:	4610      	mov	r0, r2
 800ec96:	4619      	mov	r1, r3
 800ec98:	2370      	movs	r3, #112	; 0x70
 800ec9a:	461a      	mov	r2, r3
 800ec9c:	f002 fd80 	bl	80117a0 <memcpy>

	mainCS.Init.CS_Type = CS_Type_3shunt;
 800eca0:	4b0e      	ldr	r3, [pc, #56]	; (800ecdc <CurrentSensor_Init+0x50>)
 800eca2:	2200      	movs	r2, #0
 800eca4:	701a      	strb	r2, [r3, #0]
	mainCS.Init.Gain_currentSense = -10.0f; // 1 / ( R * OPAmpGain) [A / V]
 800eca6:	4b0d      	ldr	r3, [pc, #52]	; (800ecdc <CurrentSensor_Init+0x50>)
 800eca8:	4a0d      	ldr	r2, [pc, #52]	; (800ece0 <CurrentSensor_Init+0x54>)
 800ecaa:	615a      	str	r2, [r3, #20]
	mainCS.Init.V_Iu_offset = 1.67497551f;
 800ecac:	4b0b      	ldr	r3, [pc, #44]	; (800ecdc <CurrentSensor_Init+0x50>)
 800ecae:	4a0d      	ldr	r2, [pc, #52]	; (800ece4 <CurrentSensor_Init+0x58>)
 800ecb0:	619a      	str	r2, [r3, #24]
	mainCS.Init.V_Iv_offset = 1.67578125f;
 800ecb2:	4b0a      	ldr	r3, [pc, #40]	; (800ecdc <CurrentSensor_Init+0x50>)
 800ecb4:	4a0c      	ldr	r2, [pc, #48]	; (800ece8 <CurrentSensor_Init+0x5c>)
 800ecb6:	61da      	str	r2, [r3, #28]
	mainCS.Init.V_Iw_offset = 1.67819822f;
 800ecb8:	4b08      	ldr	r3, [pc, #32]	; (800ecdc <CurrentSensor_Init+0x50>)
 800ecba:	4a0c      	ldr	r2, [pc, #48]	; (800ecec <CurrentSensor_Init+0x60>)
 800ecbc:	621a      	str	r2, [r3, #32]
	mainCS.Init.hadc_Iu = &hadc1;
 800ecbe:	4b07      	ldr	r3, [pc, #28]	; (800ecdc <CurrentSensor_Init+0x50>)
 800ecc0:	4a0b      	ldr	r2, [pc, #44]	; (800ecf0 <CurrentSensor_Init+0x64>)
 800ecc2:	605a      	str	r2, [r3, #4]
	mainCS.Init.hadc_Iv = &hadc2;
 800ecc4:	4b05      	ldr	r3, [pc, #20]	; (800ecdc <CurrentSensor_Init+0x50>)
 800ecc6:	4a0b      	ldr	r2, [pc, #44]	; (800ecf4 <CurrentSensor_Init+0x68>)
 800ecc8:	609a      	str	r2, [r3, #8]
	mainCS.Init.hadc_Iw = &hadc3;
 800ecca:	4b04      	ldr	r3, [pc, #16]	; (800ecdc <CurrentSensor_Init+0x50>)
 800eccc:	4a0a      	ldr	r2, [pc, #40]	; (800ecf8 <CurrentSensor_Init+0x6c>)
 800ecce:	60da      	str	r2, [r3, #12]

	mainCS.pos_MEDF_I = 0;
 800ecd0:	4b02      	ldr	r3, [pc, #8]	; (800ecdc <CurrentSensor_Init+0x50>)
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	631a      	str	r2, [r3, #48]	; 0x30

}
 800ecd6:	bf00      	nop
 800ecd8:	bd80      	pop	{r7, pc}
 800ecda:	bf00      	nop
 800ecdc:	200041ec 	.word	0x200041ec
 800ece0:	c1200000 	.word	0xc1200000
 800ece4:	3fd66599 	.word	0x3fd66599
 800ece8:	3fd68000 	.word	0x3fd68000
 800ecec:	3fd6cf33 	.word	0x3fd6cf33
 800ecf0:	20004304 	.word	0x20004304
 800ecf4:	2000425c 	.word	0x2000425c
 800ecf8:	2000434c 	.word	0x2000434c

0800ecfc <CurrentSensor_Start>:


void CurrentSensor_Start(CurrentSensor_TypeDef *hCS)
{
 800ecfc:	b580      	push	{r7, lr}
 800ecfe:	b082      	sub	sp, #8
 800ed00:	af00      	add	r7, sp, #0
 800ed02:	6078      	str	r0, [r7, #4]

	switch(hCS->Init.CS_Type)
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	781b      	ldrb	r3, [r3, #0]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d000      	beq.n	800ed0e <CurrentSensor_Start+0x12>
		break;
	}



}
 800ed0c:	e018      	b.n	800ed40 <CurrentSensor_Start+0x44>
		HAL_ADC_Start_DMA(hCS->Init.hadc_Iu, hCS->AD_Iu, 1);
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	6858      	ldr	r0, [r3, #4]
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	3328      	adds	r3, #40	; 0x28
 800ed16:	2201      	movs	r2, #1
 800ed18:	4619      	mov	r1, r3
 800ed1a:	f7fa f91d 	bl	8008f58 <HAL_ADC_Start_DMA>
		HAL_ADC_Start_DMA(hCS->Init.hadc_Iv, hCS->AD_Iv, 1);
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	6898      	ldr	r0, [r3, #8]
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	332a      	adds	r3, #42	; 0x2a
 800ed26:	2201      	movs	r2, #1
 800ed28:	4619      	mov	r1, r3
 800ed2a:	f7fa f915 	bl	8008f58 <HAL_ADC_Start_DMA>
		HAL_ADC_Start_DMA(hCS->Init.hadc_Iw, hCS->AD_Iw, 1);
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	68d8      	ldr	r0, [r3, #12]
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	332c      	adds	r3, #44	; 0x2c
 800ed36:	2201      	movs	r2, #1
 800ed38:	4619      	mov	r1, r3
 800ed3a:	f7fa f90d 	bl	8008f58 <HAL_ADC_Start_DMA>
		break;
 800ed3e:	bf00      	nop
}
 800ed40:	bf00      	nop
 800ed42:	3708      	adds	r7, #8
 800ed44:	46bd      	mov	sp, r7
 800ed46:	bd80      	pop	{r7, pc}

0800ed48 <CurrentSensor_Refresh>:
/*
 * UVWの電流値を更新するだけ
 * 座標変換とかはやらない
 */
inline void CurrentSensor_Refresh(CurrentSensor_TypeDef *hCS, uint8_t SVM_sector)
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b082      	sub	sp, #8
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
 800ed50:	460b      	mov	r3, r1
 800ed52:	70fb      	strb	r3, [r7, #3]
	static int32_t AD_Iv_MEDF = 0;
	static int32_t AD_Iw_MEDF = 0;

	static CurrentSensor_InitTypeDef *hCS_Init;

	hCS_Init = &hCS->Init;
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	4a98      	ldr	r2, [pc, #608]	; (800efb8 <CurrentSensor_Refresh+0x270>)
 800ed58:	6013      	str	r3, [r2, #0]

	switch(hCS->Init.CS_Type)
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	781b      	ldrb	r3, [r3, #0]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d000      	beq.n	800ed64 <CurrentSensor_Refresh+0x1c>

		break; /* CS_Type_3shunt */


		default:
			break;
 800ed62:	e124      	b.n	800efae <CurrentSensor_Refresh+0x266>
		HAL_ADC_Start_DMA(hCS_Init->hadc_Iu, hCS->AD_Iu, 1);
 800ed64:	4b94      	ldr	r3, [pc, #592]	; (800efb8 <CurrentSensor_Refresh+0x270>)
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	6858      	ldr	r0, [r3, #4]
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	3328      	adds	r3, #40	; 0x28
 800ed6e:	2201      	movs	r2, #1
 800ed70:	4619      	mov	r1, r3
 800ed72:	f7fa f8f1 	bl	8008f58 <HAL_ADC_Start_DMA>
		HAL_ADC_Start_DMA(hCS_Init->hadc_Iv, hCS->AD_Iv, 1);
 800ed76:	4b90      	ldr	r3, [pc, #576]	; (800efb8 <CurrentSensor_Refresh+0x270>)
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	6898      	ldr	r0, [r3, #8]
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	332a      	adds	r3, #42	; 0x2a
 800ed80:	2201      	movs	r2, #1
 800ed82:	4619      	mov	r1, r3
 800ed84:	f7fa f8e8 	bl	8008f58 <HAL_ADC_Start_DMA>
		HAL_ADC_Start_DMA(hCS_Init->hadc_Iw, hCS->AD_Iw, 1);
 800ed88:	4b8b      	ldr	r3, [pc, #556]	; (800efb8 <CurrentSensor_Refresh+0x270>)
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	68d8      	ldr	r0, [r3, #12]
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	332c      	adds	r3, #44	; 0x2c
 800ed92:	2201      	movs	r2, #1
 800ed94:	4619      	mov	r1, r3
 800ed96:	f7fa f8df 	bl	8008f58 <HAL_ADC_Start_DMA>
		hCS->AD_Iu_buf[hCS->pos_MEDF_I] = (int32_t)hCS->AD_Iu[0];
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eda2:	4611      	mov	r1, r2
 800eda4:	687a      	ldr	r2, [r7, #4]
 800eda6:	330c      	adds	r3, #12
 800eda8:	009b      	lsls	r3, r3, #2
 800edaa:	4413      	add	r3, r2
 800edac:	6059      	str	r1, [r3, #4]
		hCS->AD_Iv_buf[hCS->pos_MEDF_I] = (int32_t)hCS->AD_Iv[0];
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	8d59      	ldrh	r1, [r3, #42]	; 0x2a
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	3210      	adds	r2, #16
 800edba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		hCS->AD_Iw_buf[hCS->pos_MEDF_I] = (int32_t)hCS->AD_Iw[0];
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edc6:	4611      	mov	r1, r2
 800edc8:	687a      	ldr	r2, [r7, #4]
 800edca:	3312      	adds	r3, #18
 800edcc:	009b      	lsls	r3, r3, #2
 800edce:	4413      	add	r3, r2
 800edd0:	6059      	str	r1, [r3, #4]
		hCS->pos_MEDF_I += 1;
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800edd6:	1c5a      	adds	r2, r3, #1
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	631a      	str	r2, [r3, #48]	; 0x30
		if(hCS->pos_MEDF_I >= 3)
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ede0:	2b02      	cmp	r3, #2
 800ede2:	dd02      	ble.n	800edea <CurrentSensor_Refresh+0xa2>
			hCS->pos_MEDF_I = 0;
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	2200      	movs	r2, #0
 800ede8:	631a      	str	r2, [r3, #48]	; 0x30
		AD_Iu_MEDF = median3(hCS->AD_Iu_buf);
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	3334      	adds	r3, #52	; 0x34
 800edee:	4618      	mov	r0, r3
 800edf0:	f000 f974 	bl	800f0dc <median3>
 800edf4:	4602      	mov	r2, r0
 800edf6:	4b71      	ldr	r3, [pc, #452]	; (800efbc <CurrentSensor_Refresh+0x274>)
 800edf8:	601a      	str	r2, [r3, #0]
		AD_Iv_MEDF = median3(hCS->AD_Iv_buf);
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	3340      	adds	r3, #64	; 0x40
 800edfe:	4618      	mov	r0, r3
 800ee00:	f000 f96c 	bl	800f0dc <median3>
 800ee04:	4602      	mov	r2, r0
 800ee06:	4b6e      	ldr	r3, [pc, #440]	; (800efc0 <CurrentSensor_Refresh+0x278>)
 800ee08:	601a      	str	r2, [r3, #0]
		AD_Iw_MEDF = median3(hCS->AD_Iw_buf);
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	334c      	adds	r3, #76	; 0x4c
 800ee0e:	4618      	mov	r0, r3
 800ee10:	f000 f964 	bl	800f0dc <median3>
 800ee14:	4602      	mov	r2, r0
 800ee16:	4b6b      	ldr	r3, [pc, #428]	; (800efc4 <CurrentSensor_Refresh+0x27c>)
 800ee18:	601a      	str	r2, [r3, #0]
		hCS->V_Iu = (float)AD_Iu_MEDF / AD_Range * Vref_AD - hCS_Init->V_Iu_offset;
 800ee1a:	4b68      	ldr	r3, [pc, #416]	; (800efbc <CurrentSensor_Refresh+0x274>)
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	ee07 3a90 	vmov	s15, r3
 800ee22:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800ee26:	eddf 7a68 	vldr	s15, [pc, #416]	; 800efc8 <CurrentSensor_Refresh+0x280>
 800ee2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ee2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ee32:	ed9f 7a66 	vldr	s14, [pc, #408]	; 800efcc <CurrentSensor_Refresh+0x284>
 800ee36:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ee3a:	4b5f      	ldr	r3, [pc, #380]	; (800efb8 <CurrentSensor_Refresh+0x270>)
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	edd3 7a06 	vldr	s15, [r3, #24]
 800ee42:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
		hCS->V_Iv = (float)AD_Iv_MEDF / AD_Range * Vref_AD - hCS_Init->V_Iv_offset;
 800ee4c:	4b5c      	ldr	r3, [pc, #368]	; (800efc0 <CurrentSensor_Refresh+0x278>)
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	ee07 3a90 	vmov	s15, r3
 800ee54:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800ee58:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800efc8 <CurrentSensor_Refresh+0x280>
 800ee5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ee60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ee64:	ed9f 7a59 	vldr	s14, [pc, #356]	; 800efcc <CurrentSensor_Refresh+0x284>
 800ee68:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ee6c:	4b52      	ldr	r3, [pc, #328]	; (800efb8 <CurrentSensor_Refresh+0x270>)
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	edd3 7a07 	vldr	s15, [r3, #28]
 800ee74:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
		hCS->V_Iw = (float)AD_Iw_MEDF / AD_Range * Vref_AD - hCS_Init->V_Iw_offset;
 800ee7e:	4b51      	ldr	r3, [pc, #324]	; (800efc4 <CurrentSensor_Refresh+0x27c>)
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	ee07 3a90 	vmov	s15, r3
 800ee86:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800ee8a:	eddf 7a4f 	vldr	s15, [pc, #316]	; 800efc8 <CurrentSensor_Refresh+0x280>
 800ee8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ee92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ee96:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800efcc <CurrentSensor_Refresh+0x284>
 800ee9a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ee9e:	4b46      	ldr	r3, [pc, #280]	; (800efb8 <CurrentSensor_Refresh+0x270>)
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	edd3 7a08 	vldr	s15, [r3, #32]
 800eea6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
		switch(SVM_sector)
 800eeb0:	78fb      	ldrb	r3, [r7, #3]
 800eeb2:	2b05      	cmp	r3, #5
 800eeb4:	d87a      	bhi.n	800efac <CurrentSensor_Refresh+0x264>
 800eeb6:	a201      	add	r2, pc, #4	; (adr r2, 800eebc <CurrentSensor_Refresh+0x174>)
 800eeb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eebc:	0800eed5 	.word	0x0800eed5
 800eec0:	0800ef1d 	.word	0x0800ef1d
 800eec4:	0800ef1d 	.word	0x0800ef1d
 800eec8:	0800ef65 	.word	0x0800ef65
 800eecc:	0800ef65 	.word	0x0800ef65
 800eed0:	0800eed5 	.word	0x0800eed5
			hCS->Iv = hCS->V_Iv * hCS->Init.Gain_currentSense;
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	edd3 7a05 	vldr	s15, [r3, #20]
 800eee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
			hCS->Iw = hCS->V_Iw * hCS->Init.Gain_currentSense;
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	edd3 7a05 	vldr	s15, [r3, #20]
 800eef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
			hCS->Iu = - hCS->Iv - hCS->Iw;
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800ef06:	eeb1 7a67 	vneg.f32	s14, s15
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800ef10:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
			break;
 800ef1a:	e047      	b.n	800efac <CurrentSensor_Refresh+0x264>
			hCS->Iw = hCS->V_Iw * hCS->Init.Gain_currentSense;
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	edd3 7a05 	vldr	s15, [r3, #20]
 800ef28:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
			hCS->Iu = hCS->V_Iu * hCS->Init.Gain_currentSense;
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	edd3 7a05 	vldr	s15, [r3, #20]
 800ef3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
			hCS->Iv = - hCS->Iw - hCS->Iu;
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800ef4e:	eeb1 7a67 	vneg.f32	s14, s15
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800ef58:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
			break;
 800ef62:	e023      	b.n	800efac <CurrentSensor_Refresh+0x264>
			hCS->Iu = hCS->V_Iu * hCS->Init.Gain_currentSense;
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	edd3 7a05 	vldr	s15, [r3, #20]
 800ef70:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
			hCS->Iv = hCS->V_Iv * hCS->Init.Gain_currentSense;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	edd3 7a05 	vldr	s15, [r3, #20]
 800ef86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	edc3 7a1a 	vstr	s15, [r3, #104]	; 0x68
			hCS->Iw = - hCS->Iu - hCS->Iv;
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800ef96:	eeb1 7a67 	vneg.f32	s14, s15
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800efa0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	edc3 7a1b 	vstr	s15, [r3, #108]	; 0x6c
			break;
 800efaa:	bf00      	nop
		break; /* CS_Type_3shunt */
 800efac:	bf00      	nop
	}




}
 800efae:	bf00      	nop
 800efb0:	3708      	adds	r7, #8
 800efb2:	46bd      	mov	sp, r7
 800efb4:	bd80      	pop	{r7, pc}
 800efb6:	bf00      	nop
 800efb8:	200000e0 	.word	0x200000e0
 800efbc:	200000e4 	.word	0x200000e4
 800efc0:	200000e8 	.word	0x200000e8
 800efc4:	200000ec 	.word	0x200000ec
 800efc8:	00001000 	.word	0x00001000
 800efcc:	40533333 	.word	0x40533333

0800efd0 <CurrentSensor_getIdq>:

/*
 * 回転座標系における電流を算出
 */
inline void CurrentSensor_getIdq(CurrentSensor_TypeDef *hCS, float *Id, float *Iq, float cos_theta_re, float sin_theta_re)
{
 800efd0:	b480      	push	{r7}
 800efd2:	b087      	sub	sp, #28
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6178      	str	r0, [r7, #20]
 800efd8:	6139      	str	r1, [r7, #16]
 800efda:	60fa      	str	r2, [r7, #12]
 800efdc:	ed87 0a02 	vstr	s0, [r7, #8]
 800efe0:	edc7 0a01 	vstr	s1, [r7, #4]

	*Id = 0.8165f * (
			+ hCS->Iu * cos_theta_re
 800efe4:	697b      	ldr	r3, [r7, #20]
 800efe6:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 800efea:	edd7 7a02 	vldr	s15, [r7, #8]
 800efee:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ hCS->Iv * (-0.5f * cos_theta_re + 0.855f * sin_theta_re)
 800eff2:	697b      	ldr	r3, [r7, #20]
 800eff4:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 800eff8:	edd7 7a02 	vldr	s15, [r7, #8]
 800effc:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
 800f000:	ee27 6a86 	vmul.f32	s12, s15, s12
 800f004:	edd7 7a01 	vldr	s15, [r7, #4]
 800f008:	eddf 5a32 	vldr	s11, [pc, #200]	; 800f0d4 <CurrentSensor_getIdq+0x104>
 800f00c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f010:	ee76 7a27 	vadd.f32	s15, s12, s15
 800f014:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f018:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ hCS->Iw * (-0.5f * cos_theta_re - 0.855f * sin_theta_re));
 800f01c:	697b      	ldr	r3, [r7, #20]
 800f01e:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 800f022:	edd7 7a02 	vldr	s15, [r7, #8]
 800f026:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
 800f02a:	ee27 6a86 	vmul.f32	s12, s15, s12
 800f02e:	edd7 7a01 	vldr	s15, [r7, #4]
 800f032:	eddf 5a28 	vldr	s11, [pc, #160]	; 800f0d4 <CurrentSensor_getIdq+0x104>
 800f036:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f03a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800f03e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f042:	ee77 7a27 	vadd.f32	s15, s14, s15
	*Id = 0.8165f * (
 800f046:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800f0d8 <CurrentSensor_getIdq+0x108>
 800f04a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f04e:	693b      	ldr	r3, [r7, #16]
 800f050:	edc3 7a00 	vstr	s15, [r3]

	*Iq = 0.8165f * (
			- hCS->Iu * sin_theta_re
 800f054:	697b      	ldr	r3, [r7, #20]
 800f056:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800f05a:	eeb1 7a67 	vneg.f32	s14, s15
 800f05e:	edd7 7a01 	vldr	s15, [r7, #4]
 800f062:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ hCS->Iv * (0.5f * sin_theta_re + 0.855f * cos_theta_re)
 800f066:	697b      	ldr	r3, [r7, #20]
 800f068:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 800f06c:	edd7 7a01 	vldr	s15, [r7, #4]
 800f070:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800f074:	ee27 6a86 	vmul.f32	s12, s15, s12
 800f078:	edd7 7a02 	vldr	s15, [r7, #8]
 800f07c:	eddf 5a15 	vldr	s11, [pc, #84]	; 800f0d4 <CurrentSensor_getIdq+0x104>
 800f080:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f084:	ee76 7a27 	vadd.f32	s15, s12, s15
 800f088:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f08c:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ hCS->Iw * (0.5f * sin_theta_re - 0.855f * cos_theta_re));
 800f090:	697b      	ldr	r3, [r7, #20]
 800f092:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 800f096:	edd7 7a01 	vldr	s15, [r7, #4]
 800f09a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800f09e:	ee27 6a86 	vmul.f32	s12, s15, s12
 800f0a2:	edd7 7a02 	vldr	s15, [r7, #8]
 800f0a6:	eddf 5a0b 	vldr	s11, [pc, #44]	; 800f0d4 <CurrentSensor_getIdq+0x104>
 800f0aa:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f0ae:	ee76 7a67 	vsub.f32	s15, s12, s15
 800f0b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f0b6:	ee77 7a27 	vadd.f32	s15, s14, s15
	*Iq = 0.8165f * (
 800f0ba:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800f0d8 <CurrentSensor_getIdq+0x108>
 800f0be:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f0c2:	68fb      	ldr	r3, [r7, #12]
 800f0c4:	edc3 7a00 	vstr	s15, [r3]

}
 800f0c8:	bf00      	nop
 800f0ca:	371c      	adds	r7, #28
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d2:	4770      	bx	lr
 800f0d4:	3f5ae148 	.word	0x3f5ae148
 800f0d8:	3f510625 	.word	0x3f510625

0800f0dc <median3>:

/*
 * Length:3 のメディアンフィルタ
 */
inline int32_t median3(int32_t *buf)
{
 800f0dc:	b480      	push	{r7}
 800f0de:	b083      	sub	sp, #12
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]

	if(buf[0] < buf[1])
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	681a      	ldr	r2, [r3, #0]
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	3304      	adds	r3, #4
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	429a      	cmp	r2, r3
 800f0f0:	da17      	bge.n	800f122 <median3+0x46>
	{
		if(buf[2] < buf[0])			return buf[0];
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	3308      	adds	r3, #8
 800f0f6:	681a      	ldr	r2, [r3, #0]
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	429a      	cmp	r2, r3
 800f0fe:	da02      	bge.n	800f106 <median3+0x2a>
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	e025      	b.n	800f152 <median3+0x76>
		else if(buf[2] < buf[1])	return buf[2];
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	3308      	adds	r3, #8
 800f10a:	681a      	ldr	r2, [r3, #0]
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	3304      	adds	r3, #4
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	429a      	cmp	r2, r3
 800f114:	da02      	bge.n	800f11c <median3+0x40>
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	689b      	ldr	r3, [r3, #8]
 800f11a:	e01a      	b.n	800f152 <median3+0x76>
		else						return buf[1];
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	685b      	ldr	r3, [r3, #4]
 800f120:	e017      	b.n	800f152 <median3+0x76>
	}
	else
	{
		if(buf[2] < buf[1])			return buf[1];
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	3308      	adds	r3, #8
 800f126:	681a      	ldr	r2, [r3, #0]
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	3304      	adds	r3, #4
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	429a      	cmp	r2, r3
 800f130:	da02      	bge.n	800f138 <median3+0x5c>
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	685b      	ldr	r3, [r3, #4]
 800f136:	e00c      	b.n	800f152 <median3+0x76>
		else if(buf[2] < buf[1])	return buf[2];
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	3308      	adds	r3, #8
 800f13c:	681a      	ldr	r2, [r3, #0]
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	3304      	adds	r3, #4
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	429a      	cmp	r2, r3
 800f146:	da02      	bge.n	800f14e <median3+0x72>
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	689b      	ldr	r3, [r3, #8]
 800f14c:	e001      	b.n	800f152 <median3+0x76>
		else						return buf[0];
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	681b      	ldr	r3, [r3, #0]
	}

	return 0;
}
 800f152:	4618      	mov	r0, r3
 800f154:	370c      	adds	r7, #12
 800f156:	46bd      	mov	sp, r7
 800f158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f15c:	4770      	bx	lr
	...

0800f160 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc2;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800f160:	b580      	push	{r7, lr}
 800f162:	b084      	sub	sp, #16
 800f164:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800f166:	463b      	mov	r3, r7
 800f168:	2200      	movs	r2, #0
 800f16a:	601a      	str	r2, [r3, #0]
 800f16c:	605a      	str	r2, [r3, #4]
 800f16e:	609a      	str	r2, [r3, #8]
 800f170:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800f172:	4b22      	ldr	r3, [pc, #136]	; (800f1fc <MX_ADC1_Init+0x9c>)
 800f174:	4a22      	ldr	r2, [pc, #136]	; (800f200 <MX_ADC1_Init+0xa0>)
 800f176:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800f178:	4b20      	ldr	r3, [pc, #128]	; (800f1fc <MX_ADC1_Init+0x9c>)
 800f17a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800f17e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800f180:	4b1e      	ldr	r3, [pc, #120]	; (800f1fc <MX_ADC1_Init+0x9c>)
 800f182:	2200      	movs	r2, #0
 800f184:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800f186:	4b1d      	ldr	r3, [pc, #116]	; (800f1fc <MX_ADC1_Init+0x9c>)
 800f188:	2200      	movs	r2, #0
 800f18a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800f18c:	4b1b      	ldr	r3, [pc, #108]	; (800f1fc <MX_ADC1_Init+0x9c>)
 800f18e:	2200      	movs	r2, #0
 800f190:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800f192:	4b1a      	ldr	r3, [pc, #104]	; (800f1fc <MX_ADC1_Init+0x9c>)
 800f194:	2200      	movs	r2, #0
 800f196:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 800f19a:	4b18      	ldr	r3, [pc, #96]	; (800f1fc <MX_ADC1_Init+0x9c>)
 800f19c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800f1a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 800f1a2:	4b16      	ldr	r3, [pc, #88]	; (800f1fc <MX_ADC1_Init+0x9c>)
 800f1a4:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800f1a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800f1aa:	4b14      	ldr	r3, [pc, #80]	; (800f1fc <MX_ADC1_Init+0x9c>)
 800f1ac:	2200      	movs	r2, #0
 800f1ae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800f1b0:	4b12      	ldr	r3, [pc, #72]	; (800f1fc <MX_ADC1_Init+0x9c>)
 800f1b2:	2201      	movs	r2, #1
 800f1b4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800f1b6:	4b11      	ldr	r3, [pc, #68]	; (800f1fc <MX_ADC1_Init+0x9c>)
 800f1b8:	2201      	movs	r2, #1
 800f1ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800f1be:	4b0f      	ldr	r3, [pc, #60]	; (800f1fc <MX_ADC1_Init+0x9c>)
 800f1c0:	2201      	movs	r2, #1
 800f1c2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800f1c4:	480d      	ldr	r0, [pc, #52]	; (800f1fc <MX_ADC1_Init+0x9c>)
 800f1c6:	f7f9 fe83 	bl	8008ed0 <HAL_ADC_Init>
 800f1ca:	4603      	mov	r3, r0
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d001      	beq.n	800f1d4 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800f1d0:	f001 f998 	bl	8010504 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800f1d4:	2300      	movs	r3, #0
 800f1d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800f1d8:	2301      	movs	r3, #1
 800f1da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800f1dc:	2301      	movs	r3, #1
 800f1de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800f1e0:	463b      	mov	r3, r7
 800f1e2:	4619      	mov	r1, r3
 800f1e4:	4805      	ldr	r0, [pc, #20]	; (800f1fc <MX_ADC1_Init+0x9c>)
 800f1e6:	f7f9 ffc7 	bl	8009178 <HAL_ADC_ConfigChannel>
 800f1ea:	4603      	mov	r3, r0
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d001      	beq.n	800f1f4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800f1f0:	f001 f988 	bl	8010504 <Error_Handler>
  }

}
 800f1f4:	bf00      	nop
 800f1f6:	3710      	adds	r7, #16
 800f1f8:	46bd      	mov	sp, r7
 800f1fa:	bd80      	pop	{r7, pc}
 800f1fc:	20004304 	.word	0x20004304
 800f200:	40012000 	.word	0x40012000

0800f204 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800f204:	b580      	push	{r7, lr}
 800f206:	b084      	sub	sp, #16
 800f208:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800f20a:	463b      	mov	r3, r7
 800f20c:	2200      	movs	r2, #0
 800f20e:	601a      	str	r2, [r3, #0]
 800f210:	605a      	str	r2, [r3, #4]
 800f212:	609a      	str	r2, [r3, #8]
 800f214:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 800f216:	4b22      	ldr	r3, [pc, #136]	; (800f2a0 <MX_ADC2_Init+0x9c>)
 800f218:	4a22      	ldr	r2, [pc, #136]	; (800f2a4 <MX_ADC2_Init+0xa0>)
 800f21a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800f21c:	4b20      	ldr	r3, [pc, #128]	; (800f2a0 <MX_ADC2_Init+0x9c>)
 800f21e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800f222:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800f224:	4b1e      	ldr	r3, [pc, #120]	; (800f2a0 <MX_ADC2_Init+0x9c>)
 800f226:	2200      	movs	r2, #0
 800f228:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800f22a:	4b1d      	ldr	r3, [pc, #116]	; (800f2a0 <MX_ADC2_Init+0x9c>)
 800f22c:	2200      	movs	r2, #0
 800f22e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800f230:	4b1b      	ldr	r3, [pc, #108]	; (800f2a0 <MX_ADC2_Init+0x9c>)
 800f232:	2200      	movs	r2, #0
 800f234:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800f236:	4b1a      	ldr	r3, [pc, #104]	; (800f2a0 <MX_ADC2_Init+0x9c>)
 800f238:	2200      	movs	r2, #0
 800f23a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 800f23e:	4b18      	ldr	r3, [pc, #96]	; (800f2a0 <MX_ADC2_Init+0x9c>)
 800f240:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800f244:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 800f246:	4b16      	ldr	r3, [pc, #88]	; (800f2a0 <MX_ADC2_Init+0x9c>)
 800f248:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800f24c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800f24e:	4b14      	ldr	r3, [pc, #80]	; (800f2a0 <MX_ADC2_Init+0x9c>)
 800f250:	2200      	movs	r2, #0
 800f252:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800f254:	4b12      	ldr	r3, [pc, #72]	; (800f2a0 <MX_ADC2_Init+0x9c>)
 800f256:	2201      	movs	r2, #1
 800f258:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800f25a:	4b11      	ldr	r3, [pc, #68]	; (800f2a0 <MX_ADC2_Init+0x9c>)
 800f25c:	2201      	movs	r2, #1
 800f25e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800f262:	4b0f      	ldr	r3, [pc, #60]	; (800f2a0 <MX_ADC2_Init+0x9c>)
 800f264:	2201      	movs	r2, #1
 800f266:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800f268:	480d      	ldr	r0, [pc, #52]	; (800f2a0 <MX_ADC2_Init+0x9c>)
 800f26a:	f7f9 fe31 	bl	8008ed0 <HAL_ADC_Init>
 800f26e:	4603      	mov	r3, r0
 800f270:	2b00      	cmp	r3, #0
 800f272:	d001      	beq.n	800f278 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 800f274:	f001 f946 	bl	8010504 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800f278:	2304      	movs	r3, #4
 800f27a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800f27c:	2301      	movs	r3, #1
 800f27e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800f280:	2301      	movs	r3, #1
 800f282:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800f284:	463b      	mov	r3, r7
 800f286:	4619      	mov	r1, r3
 800f288:	4805      	ldr	r0, [pc, #20]	; (800f2a0 <MX_ADC2_Init+0x9c>)
 800f28a:	f7f9 ff75 	bl	8009178 <HAL_ADC_ConfigChannel>
 800f28e:	4603      	mov	r3, r0
 800f290:	2b00      	cmp	r3, #0
 800f292:	d001      	beq.n	800f298 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 800f294:	f001 f936 	bl	8010504 <Error_Handler>
  }

}
 800f298:	bf00      	nop
 800f29a:	3710      	adds	r7, #16
 800f29c:	46bd      	mov	sp, r7
 800f29e:	bd80      	pop	{r7, pc}
 800f2a0:	2000425c 	.word	0x2000425c
 800f2a4:	40012100 	.word	0x40012100

0800f2a8 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	b084      	sub	sp, #16
 800f2ac:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800f2ae:	463b      	mov	r3, r7
 800f2b0:	2200      	movs	r2, #0
 800f2b2:	601a      	str	r2, [r3, #0]
 800f2b4:	605a      	str	r2, [r3, #4]
 800f2b6:	609a      	str	r2, [r3, #8]
 800f2b8:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 800f2ba:	4b22      	ldr	r3, [pc, #136]	; (800f344 <MX_ADC3_Init+0x9c>)
 800f2bc:	4a22      	ldr	r2, [pc, #136]	; (800f348 <MX_ADC3_Init+0xa0>)
 800f2be:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800f2c0:	4b20      	ldr	r3, [pc, #128]	; (800f344 <MX_ADC3_Init+0x9c>)
 800f2c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800f2c6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800f2c8:	4b1e      	ldr	r3, [pc, #120]	; (800f344 <MX_ADC3_Init+0x9c>)
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 800f2ce:	4b1d      	ldr	r3, [pc, #116]	; (800f344 <MX_ADC3_Init+0x9c>)
 800f2d0:	2200      	movs	r2, #0
 800f2d2:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800f2d4:	4b1b      	ldr	r3, [pc, #108]	; (800f344 <MX_ADC3_Init+0x9c>)
 800f2d6:	2200      	movs	r2, #0
 800f2d8:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800f2da:	4b1a      	ldr	r3, [pc, #104]	; (800f344 <MX_ADC3_Init+0x9c>)
 800f2dc:	2200      	movs	r2, #0
 800f2de:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 800f2e2:	4b18      	ldr	r3, [pc, #96]	; (800f344 <MX_ADC3_Init+0x9c>)
 800f2e4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800f2e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 800f2ea:	4b16      	ldr	r3, [pc, #88]	; (800f344 <MX_ADC3_Init+0x9c>)
 800f2ec:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800f2f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800f2f2:	4b14      	ldr	r3, [pc, #80]	; (800f344 <MX_ADC3_Init+0x9c>)
 800f2f4:	2200      	movs	r2, #0
 800f2f6:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800f2f8:	4b12      	ldr	r3, [pc, #72]	; (800f344 <MX_ADC3_Init+0x9c>)
 800f2fa:	2201      	movs	r2, #1
 800f2fc:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800f2fe:	4b11      	ldr	r3, [pc, #68]	; (800f344 <MX_ADC3_Init+0x9c>)
 800f300:	2201      	movs	r2, #1
 800f302:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800f306:	4b0f      	ldr	r3, [pc, #60]	; (800f344 <MX_ADC3_Init+0x9c>)
 800f308:	2201      	movs	r2, #1
 800f30a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800f30c:	480d      	ldr	r0, [pc, #52]	; (800f344 <MX_ADC3_Init+0x9c>)
 800f30e:	f7f9 fddf 	bl	8008ed0 <HAL_ADC_Init>
 800f312:	4603      	mov	r3, r0
 800f314:	2b00      	cmp	r3, #0
 800f316:	d001      	beq.n	800f31c <MX_ADC3_Init+0x74>
  {
    Error_Handler();
 800f318:	f001 f8f4 	bl	8010504 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800f31c:	2301      	movs	r3, #1
 800f31e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800f320:	2301      	movs	r3, #1
 800f322:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800f324:	2301      	movs	r3, #1
 800f326:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800f328:	463b      	mov	r3, r7
 800f32a:	4619      	mov	r1, r3
 800f32c:	4805      	ldr	r0, [pc, #20]	; (800f344 <MX_ADC3_Init+0x9c>)
 800f32e:	f7f9 ff23 	bl	8009178 <HAL_ADC_ConfigChannel>
 800f332:	4603      	mov	r3, r0
 800f334:	2b00      	cmp	r3, #0
 800f336:	d001      	beq.n	800f33c <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 800f338:	f001 f8e4 	bl	8010504 <Error_Handler>
  }

}
 800f33c:	bf00      	nop
 800f33e:	3710      	adds	r7, #16
 800f340:	46bd      	mov	sp, r7
 800f342:	bd80      	pop	{r7, pc}
 800f344:	2000434c 	.word	0x2000434c
 800f348:	40012200 	.word	0x40012200

0800f34c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800f34c:	b580      	push	{r7, lr}
 800f34e:	b08e      	sub	sp, #56	; 0x38
 800f350:	af00      	add	r7, sp, #0
 800f352:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f354:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f358:	2200      	movs	r2, #0
 800f35a:	601a      	str	r2, [r3, #0]
 800f35c:	605a      	str	r2, [r3, #4]
 800f35e:	609a      	str	r2, [r3, #8]
 800f360:	60da      	str	r2, [r3, #12]
 800f362:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	4a9b      	ldr	r2, [pc, #620]	; (800f5d8 <HAL_ADC_MspInit+0x28c>)
 800f36a:	4293      	cmp	r3, r2
 800f36c:	d172      	bne.n	800f454 <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800f36e:	2300      	movs	r3, #0
 800f370:	623b      	str	r3, [r7, #32]
 800f372:	4b9a      	ldr	r3, [pc, #616]	; (800f5dc <HAL_ADC_MspInit+0x290>)
 800f374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f376:	4a99      	ldr	r2, [pc, #612]	; (800f5dc <HAL_ADC_MspInit+0x290>)
 800f378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f37c:	6453      	str	r3, [r2, #68]	; 0x44
 800f37e:	4b97      	ldr	r3, [pc, #604]	; (800f5dc <HAL_ADC_MspInit+0x290>)
 800f380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f386:	623b      	str	r3, [r7, #32]
 800f388:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f38a:	2300      	movs	r3, #0
 800f38c:	61fb      	str	r3, [r7, #28]
 800f38e:	4b93      	ldr	r3, [pc, #588]	; (800f5dc <HAL_ADC_MspInit+0x290>)
 800f390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f392:	4a92      	ldr	r2, [pc, #584]	; (800f5dc <HAL_ADC_MspInit+0x290>)
 800f394:	f043 0304 	orr.w	r3, r3, #4
 800f398:	6313      	str	r3, [r2, #48]	; 0x30
 800f39a:	4b90      	ldr	r3, [pc, #576]	; (800f5dc <HAL_ADC_MspInit+0x290>)
 800f39c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f39e:	f003 0304 	and.w	r3, r3, #4
 800f3a2:	61fb      	str	r3, [r7, #28]
 800f3a4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f3a6:	2300      	movs	r3, #0
 800f3a8:	61bb      	str	r3, [r7, #24]
 800f3aa:	4b8c      	ldr	r3, [pc, #560]	; (800f5dc <HAL_ADC_MspInit+0x290>)
 800f3ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3ae:	4a8b      	ldr	r2, [pc, #556]	; (800f5dc <HAL_ADC_MspInit+0x290>)
 800f3b0:	f043 0301 	orr.w	r3, r3, #1
 800f3b4:	6313      	str	r3, [r2, #48]	; 0x30
 800f3b6:	4b89      	ldr	r3, [pc, #548]	; (800f5dc <HAL_ADC_MspInit+0x290>)
 800f3b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f3ba:	f003 0301 	and.w	r3, r3, #1
 800f3be:	61bb      	str	r3, [r7, #24]
 800f3c0:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN10
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800f3c2:	2301      	movs	r3, #1
 800f3c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f3c6:	2303      	movs	r3, #3
 800f3c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f3ca:	2300      	movs	r3, #0
 800f3cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f3ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f3d2:	4619      	mov	r1, r3
 800f3d4:	4882      	ldr	r0, [pc, #520]	; (800f5e0 <HAL_ADC_MspInit+0x294>)
 800f3d6:	f7fb fe71 	bl	800b0bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800f3da:	2301      	movs	r3, #1
 800f3dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f3de:	2303      	movs	r3, #3
 800f3e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f3e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f3ea:	4619      	mov	r1, r3
 800f3ec:	487d      	ldr	r0, [pc, #500]	; (800f5e4 <HAL_ADC_MspInit+0x298>)
 800f3ee:	f7fb fe65 	bl	800b0bc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800f3f2:	4b7d      	ldr	r3, [pc, #500]	; (800f5e8 <HAL_ADC_MspInit+0x29c>)
 800f3f4:	4a7d      	ldr	r2, [pc, #500]	; (800f5ec <HAL_ADC_MspInit+0x2a0>)
 800f3f6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800f3f8:	4b7b      	ldr	r3, [pc, #492]	; (800f5e8 <HAL_ADC_MspInit+0x29c>)
 800f3fa:	2200      	movs	r2, #0
 800f3fc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800f3fe:	4b7a      	ldr	r3, [pc, #488]	; (800f5e8 <HAL_ADC_MspInit+0x29c>)
 800f400:	2200      	movs	r2, #0
 800f402:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800f404:	4b78      	ldr	r3, [pc, #480]	; (800f5e8 <HAL_ADC_MspInit+0x29c>)
 800f406:	2200      	movs	r2, #0
 800f408:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800f40a:	4b77      	ldr	r3, [pc, #476]	; (800f5e8 <HAL_ADC_MspInit+0x29c>)
 800f40c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f410:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800f412:	4b75      	ldr	r3, [pc, #468]	; (800f5e8 <HAL_ADC_MspInit+0x29c>)
 800f414:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f418:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800f41a:	4b73      	ldr	r3, [pc, #460]	; (800f5e8 <HAL_ADC_MspInit+0x29c>)
 800f41c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f420:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800f422:	4b71      	ldr	r3, [pc, #452]	; (800f5e8 <HAL_ADC_MspInit+0x29c>)
 800f424:	2200      	movs	r2, #0
 800f426:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800f428:	4b6f      	ldr	r3, [pc, #444]	; (800f5e8 <HAL_ADC_MspInit+0x29c>)
 800f42a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800f42e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800f430:	4b6d      	ldr	r3, [pc, #436]	; (800f5e8 <HAL_ADC_MspInit+0x29c>)
 800f432:	2200      	movs	r2, #0
 800f434:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800f436:	486c      	ldr	r0, [pc, #432]	; (800f5e8 <HAL_ADC_MspInit+0x29c>)
 800f438:	f7fa ffc4 	bl	800a3c4 <HAL_DMA_Init>
 800f43c:	4603      	mov	r3, r0
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d001      	beq.n	800f446 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800f442:	f001 f85f 	bl	8010504 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	4a67      	ldr	r2, [pc, #412]	; (800f5e8 <HAL_ADC_MspInit+0x29c>)
 800f44a:	639a      	str	r2, [r3, #56]	; 0x38
 800f44c:	4a66      	ldr	r2, [pc, #408]	; (800f5e8 <HAL_ADC_MspInit+0x29c>)
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800f452:	e0bc      	b.n	800f5ce <HAL_ADC_MspInit+0x282>
  else if(adcHandle->Instance==ADC2)
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	4a65      	ldr	r2, [pc, #404]	; (800f5f0 <HAL_ADC_MspInit+0x2a4>)
 800f45a:	4293      	cmp	r3, r2
 800f45c:	d159      	bne.n	800f512 <HAL_ADC_MspInit+0x1c6>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800f45e:	2300      	movs	r3, #0
 800f460:	617b      	str	r3, [r7, #20]
 800f462:	4b5e      	ldr	r3, [pc, #376]	; (800f5dc <HAL_ADC_MspInit+0x290>)
 800f464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f466:	4a5d      	ldr	r2, [pc, #372]	; (800f5dc <HAL_ADC_MspInit+0x290>)
 800f468:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f46c:	6453      	str	r3, [r2, #68]	; 0x44
 800f46e:	4b5b      	ldr	r3, [pc, #364]	; (800f5dc <HAL_ADC_MspInit+0x290>)
 800f470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f472:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f476:	617b      	str	r3, [r7, #20]
 800f478:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f47a:	2300      	movs	r3, #0
 800f47c:	613b      	str	r3, [r7, #16]
 800f47e:	4b57      	ldr	r3, [pc, #348]	; (800f5dc <HAL_ADC_MspInit+0x290>)
 800f480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f482:	4a56      	ldr	r2, [pc, #344]	; (800f5dc <HAL_ADC_MspInit+0x290>)
 800f484:	f043 0301 	orr.w	r3, r3, #1
 800f488:	6313      	str	r3, [r2, #48]	; 0x30
 800f48a:	4b54      	ldr	r3, [pc, #336]	; (800f5dc <HAL_ADC_MspInit+0x290>)
 800f48c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f48e:	f003 0301 	and.w	r3, r3, #1
 800f492:	613b      	str	r3, [r7, #16]
 800f494:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800f496:	2310      	movs	r3, #16
 800f498:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f49a:	2303      	movs	r3, #3
 800f49c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f49e:	2300      	movs	r3, #0
 800f4a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f4a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f4a6:	4619      	mov	r1, r3
 800f4a8:	484e      	ldr	r0, [pc, #312]	; (800f5e4 <HAL_ADC_MspInit+0x298>)
 800f4aa:	f7fb fe07 	bl	800b0bc <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800f4ae:	4b51      	ldr	r3, [pc, #324]	; (800f5f4 <HAL_ADC_MspInit+0x2a8>)
 800f4b0:	4a51      	ldr	r2, [pc, #324]	; (800f5f8 <HAL_ADC_MspInit+0x2ac>)
 800f4b2:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800f4b4:	4b4f      	ldr	r3, [pc, #316]	; (800f5f4 <HAL_ADC_MspInit+0x2a8>)
 800f4b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800f4ba:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800f4bc:	4b4d      	ldr	r3, [pc, #308]	; (800f5f4 <HAL_ADC_MspInit+0x2a8>)
 800f4be:	2200      	movs	r2, #0
 800f4c0:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800f4c2:	4b4c      	ldr	r3, [pc, #304]	; (800f5f4 <HAL_ADC_MspInit+0x2a8>)
 800f4c4:	2200      	movs	r2, #0
 800f4c6:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800f4c8:	4b4a      	ldr	r3, [pc, #296]	; (800f5f4 <HAL_ADC_MspInit+0x2a8>)
 800f4ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f4ce:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800f4d0:	4b48      	ldr	r3, [pc, #288]	; (800f5f4 <HAL_ADC_MspInit+0x2a8>)
 800f4d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f4d6:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800f4d8:	4b46      	ldr	r3, [pc, #280]	; (800f5f4 <HAL_ADC_MspInit+0x2a8>)
 800f4da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f4de:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 800f4e0:	4b44      	ldr	r3, [pc, #272]	; (800f5f4 <HAL_ADC_MspInit+0x2a8>)
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 800f4e6:	4b43      	ldr	r3, [pc, #268]	; (800f5f4 <HAL_ADC_MspInit+0x2a8>)
 800f4e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800f4ec:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800f4ee:	4b41      	ldr	r3, [pc, #260]	; (800f5f4 <HAL_ADC_MspInit+0x2a8>)
 800f4f0:	2200      	movs	r2, #0
 800f4f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800f4f4:	483f      	ldr	r0, [pc, #252]	; (800f5f4 <HAL_ADC_MspInit+0x2a8>)
 800f4f6:	f7fa ff65 	bl	800a3c4 <HAL_DMA_Init>
 800f4fa:	4603      	mov	r3, r0
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d001      	beq.n	800f504 <HAL_ADC_MspInit+0x1b8>
      Error_Handler();
 800f500:	f001 f800 	bl	8010504 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	4a3b      	ldr	r2, [pc, #236]	; (800f5f4 <HAL_ADC_MspInit+0x2a8>)
 800f508:	639a      	str	r2, [r3, #56]	; 0x38
 800f50a:	4a3a      	ldr	r2, [pc, #232]	; (800f5f4 <HAL_ADC_MspInit+0x2a8>)
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	6393      	str	r3, [r2, #56]	; 0x38
}
 800f510:	e05d      	b.n	800f5ce <HAL_ADC_MspInit+0x282>
  else if(adcHandle->Instance==ADC3)
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	4a39      	ldr	r2, [pc, #228]	; (800f5fc <HAL_ADC_MspInit+0x2b0>)
 800f518:	4293      	cmp	r3, r2
 800f51a:	d158      	bne.n	800f5ce <HAL_ADC_MspInit+0x282>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800f51c:	2300      	movs	r3, #0
 800f51e:	60fb      	str	r3, [r7, #12]
 800f520:	4b2e      	ldr	r3, [pc, #184]	; (800f5dc <HAL_ADC_MspInit+0x290>)
 800f522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f524:	4a2d      	ldr	r2, [pc, #180]	; (800f5dc <HAL_ADC_MspInit+0x290>)
 800f526:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f52a:	6453      	str	r3, [r2, #68]	; 0x44
 800f52c:	4b2b      	ldr	r3, [pc, #172]	; (800f5dc <HAL_ADC_MspInit+0x290>)
 800f52e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f534:	60fb      	str	r3, [r7, #12]
 800f536:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f538:	2300      	movs	r3, #0
 800f53a:	60bb      	str	r3, [r7, #8]
 800f53c:	4b27      	ldr	r3, [pc, #156]	; (800f5dc <HAL_ADC_MspInit+0x290>)
 800f53e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f540:	4a26      	ldr	r2, [pc, #152]	; (800f5dc <HAL_ADC_MspInit+0x290>)
 800f542:	f043 0301 	orr.w	r3, r3, #1
 800f546:	6313      	str	r3, [r2, #48]	; 0x30
 800f548:	4b24      	ldr	r3, [pc, #144]	; (800f5dc <HAL_ADC_MspInit+0x290>)
 800f54a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f54c:	f003 0301 	and.w	r3, r3, #1
 800f550:	60bb      	str	r3, [r7, #8]
 800f552:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800f554:	2302      	movs	r3, #2
 800f556:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f558:	2303      	movs	r3, #3
 800f55a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f55c:	2300      	movs	r3, #0
 800f55e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f560:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f564:	4619      	mov	r1, r3
 800f566:	481f      	ldr	r0, [pc, #124]	; (800f5e4 <HAL_ADC_MspInit+0x298>)
 800f568:	f7fb fda8 	bl	800b0bc <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 800f56c:	4b24      	ldr	r3, [pc, #144]	; (800f600 <HAL_ADC_MspInit+0x2b4>)
 800f56e:	4a25      	ldr	r2, [pc, #148]	; (800f604 <HAL_ADC_MspInit+0x2b8>)
 800f570:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 800f572:	4b23      	ldr	r3, [pc, #140]	; (800f600 <HAL_ADC_MspInit+0x2b4>)
 800f574:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800f578:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800f57a:	4b21      	ldr	r3, [pc, #132]	; (800f600 <HAL_ADC_MspInit+0x2b4>)
 800f57c:	2200      	movs	r2, #0
 800f57e:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800f580:	4b1f      	ldr	r3, [pc, #124]	; (800f600 <HAL_ADC_MspInit+0x2b4>)
 800f582:	2200      	movs	r2, #0
 800f584:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800f586:	4b1e      	ldr	r3, [pc, #120]	; (800f600 <HAL_ADC_MspInit+0x2b4>)
 800f588:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f58c:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800f58e:	4b1c      	ldr	r3, [pc, #112]	; (800f600 <HAL_ADC_MspInit+0x2b4>)
 800f590:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f594:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800f596:	4b1a      	ldr	r3, [pc, #104]	; (800f600 <HAL_ADC_MspInit+0x2b4>)
 800f598:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f59c:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 800f59e:	4b18      	ldr	r3, [pc, #96]	; (800f600 <HAL_ADC_MspInit+0x2b4>)
 800f5a0:	2200      	movs	r2, #0
 800f5a2:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 800f5a4:	4b16      	ldr	r3, [pc, #88]	; (800f600 <HAL_ADC_MspInit+0x2b4>)
 800f5a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800f5aa:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800f5ac:	4b14      	ldr	r3, [pc, #80]	; (800f600 <HAL_ADC_MspInit+0x2b4>)
 800f5ae:	2200      	movs	r2, #0
 800f5b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800f5b2:	4813      	ldr	r0, [pc, #76]	; (800f600 <HAL_ADC_MspInit+0x2b4>)
 800f5b4:	f7fa ff06 	bl	800a3c4 <HAL_DMA_Init>
 800f5b8:	4603      	mov	r3, r0
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d001      	beq.n	800f5c2 <HAL_ADC_MspInit+0x276>
      Error_Handler();
 800f5be:	f000 ffa1 	bl	8010504 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	4a0e      	ldr	r2, [pc, #56]	; (800f600 <HAL_ADC_MspInit+0x2b4>)
 800f5c6:	639a      	str	r2, [r3, #56]	; 0x38
 800f5c8:	4a0d      	ldr	r2, [pc, #52]	; (800f600 <HAL_ADC_MspInit+0x2b4>)
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	6393      	str	r3, [r2, #56]	; 0x38
}
 800f5ce:	bf00      	nop
 800f5d0:	3738      	adds	r7, #56	; 0x38
 800f5d2:	46bd      	mov	sp, r7
 800f5d4:	bd80      	pop	{r7, pc}
 800f5d6:	bf00      	nop
 800f5d8:	40012000 	.word	0x40012000
 800f5dc:	40023800 	.word	0x40023800
 800f5e0:	40020800 	.word	0x40020800
 800f5e4:	40020000 	.word	0x40020000
 800f5e8:	20004394 	.word	0x20004394
 800f5ec:	40026410 	.word	0x40026410
 800f5f0:	40012100 	.word	0x40012100
 800f5f4:	200043f4 	.word	0x200043f4
 800f5f8:	40026440 	.word	0x40026440
 800f5fc:	40012200 	.word	0x40012200
 800f600:	200042a4 	.word	0x200042a4
 800f604:	40026428 	.word	0x40026428

0800f608 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800f608:	b580      	push	{r7, lr}
 800f60a:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 800f60c:	4b18      	ldr	r3, [pc, #96]	; (800f670 <MX_CAN1_Init+0x68>)
 800f60e:	4a19      	ldr	r2, [pc, #100]	; (800f674 <MX_CAN1_Init+0x6c>)
 800f610:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 800f612:	4b17      	ldr	r3, [pc, #92]	; (800f670 <MX_CAN1_Init+0x68>)
 800f614:	2204      	movs	r2, #4
 800f616:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800f618:	4b15      	ldr	r3, [pc, #84]	; (800f670 <MX_CAN1_Init+0x68>)
 800f61a:	2200      	movs	r2, #0
 800f61c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 800f61e:	4b14      	ldr	r3, [pc, #80]	; (800f670 <MX_CAN1_Init+0x68>)
 800f620:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f624:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 800f626:	4b12      	ldr	r3, [pc, #72]	; (800f670 <MX_CAN1_Init+0x68>)
 800f628:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800f62c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 800f62e:	4b10      	ldr	r3, [pc, #64]	; (800f670 <MX_CAN1_Init+0x68>)
 800f630:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800f634:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800f636:	4b0e      	ldr	r3, [pc, #56]	; (800f670 <MX_CAN1_Init+0x68>)
 800f638:	2200      	movs	r2, #0
 800f63a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800f63c:	4b0c      	ldr	r3, [pc, #48]	; (800f670 <MX_CAN1_Init+0x68>)
 800f63e:	2200      	movs	r2, #0
 800f640:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800f642:	4b0b      	ldr	r3, [pc, #44]	; (800f670 <MX_CAN1_Init+0x68>)
 800f644:	2200      	movs	r2, #0
 800f646:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800f648:	4b09      	ldr	r3, [pc, #36]	; (800f670 <MX_CAN1_Init+0x68>)
 800f64a:	2200      	movs	r2, #0
 800f64c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800f64e:	4b08      	ldr	r3, [pc, #32]	; (800f670 <MX_CAN1_Init+0x68>)
 800f650:	2200      	movs	r2, #0
 800f652:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800f654:	4b06      	ldr	r3, [pc, #24]	; (800f670 <MX_CAN1_Init+0x68>)
 800f656:	2200      	movs	r2, #0
 800f658:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800f65a:	4805      	ldr	r0, [pc, #20]	; (800f670 <MX_CAN1_Init+0x68>)
 800f65c:	f7fa f83c 	bl	80096d8 <HAL_CAN_Init>
 800f660:	4603      	mov	r3, r0
 800f662:	2b00      	cmp	r3, #0
 800f664:	d001      	beq.n	800f66a <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800f666:	f000 ff4d 	bl	8010504 <Error_Handler>
  }

}
 800f66a:	bf00      	nop
 800f66c:	bd80      	pop	{r7, pc}
 800f66e:	bf00      	nop
 800f670:	200044a0 	.word	0x200044a0
 800f674:	40006400 	.word	0x40006400

0800f678 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800f678:	b580      	push	{r7, lr}
 800f67a:	b08a      	sub	sp, #40	; 0x28
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f680:	f107 0314 	add.w	r3, r7, #20
 800f684:	2200      	movs	r2, #0
 800f686:	601a      	str	r2, [r3, #0]
 800f688:	605a      	str	r2, [r3, #4]
 800f68a:	609a      	str	r2, [r3, #8]
 800f68c:	60da      	str	r2, [r3, #12]
 800f68e:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	681b      	ldr	r3, [r3, #0]
 800f694:	4a21      	ldr	r2, [pc, #132]	; (800f71c <HAL_CAN_MspInit+0xa4>)
 800f696:	4293      	cmp	r3, r2
 800f698:	d13c      	bne.n	800f714 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800f69a:	2300      	movs	r3, #0
 800f69c:	613b      	str	r3, [r7, #16]
 800f69e:	4b20      	ldr	r3, [pc, #128]	; (800f720 <HAL_CAN_MspInit+0xa8>)
 800f6a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6a2:	4a1f      	ldr	r2, [pc, #124]	; (800f720 <HAL_CAN_MspInit+0xa8>)
 800f6a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800f6a8:	6413      	str	r3, [r2, #64]	; 0x40
 800f6aa:	4b1d      	ldr	r3, [pc, #116]	; (800f720 <HAL_CAN_MspInit+0xa8>)
 800f6ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f6b2:	613b      	str	r3, [r7, #16]
 800f6b4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	60fb      	str	r3, [r7, #12]
 800f6ba:	4b19      	ldr	r3, [pc, #100]	; (800f720 <HAL_CAN_MspInit+0xa8>)
 800f6bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6be:	4a18      	ldr	r2, [pc, #96]	; (800f720 <HAL_CAN_MspInit+0xa8>)
 800f6c0:	f043 0301 	orr.w	r3, r3, #1
 800f6c4:	6313      	str	r3, [r2, #48]	; 0x30
 800f6c6:	4b16      	ldr	r3, [pc, #88]	; (800f720 <HAL_CAN_MspInit+0xa8>)
 800f6c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f6ca:	f003 0301 	and.w	r3, r3, #1
 800f6ce:	60fb      	str	r3, [r7, #12]
 800f6d0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f6d2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f6d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f6d8:	2302      	movs	r3, #2
 800f6da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f6dc:	2300      	movs	r3, #0
 800f6de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f6e0:	2303      	movs	r3, #3
 800f6e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800f6e4:	2309      	movs	r3, #9
 800f6e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f6e8:	f107 0314 	add.w	r3, r7, #20
 800f6ec:	4619      	mov	r1, r3
 800f6ee:	480d      	ldr	r0, [pc, #52]	; (800f724 <HAL_CAN_MspInit+0xac>)
 800f6f0:	f7fb fce4 	bl	800b0bc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 800f6f4:	2200      	movs	r2, #0
 800f6f6:	2100      	movs	r1, #0
 800f6f8:	2013      	movs	r0, #19
 800f6fa:	f7fa fe2c 	bl	800a356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800f6fe:	2013      	movs	r0, #19
 800f700:	f7fa fe45 	bl	800a38e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800f704:	2200      	movs	r2, #0
 800f706:	2100      	movs	r1, #0
 800f708:	2014      	movs	r0, #20
 800f70a:	f7fa fe24 	bl	800a356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800f70e:	2014      	movs	r0, #20
 800f710:	f7fa fe3d 	bl	800a38e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800f714:	bf00      	nop
 800f716:	3728      	adds	r7, #40	; 0x28
 800f718:	46bd      	mov	sp, r7
 800f71a:	bd80      	pop	{r7, pc}
 800f71c:	40006400 	.word	0x40006400
 800f720:	40023800 	.word	0x40023800
 800f724:	40020000 	.word	0x40020000

0800f728 <CAN_Init>:

/* USER CODE BEGIN 1 */


void CAN_Init()
{
 800f728:	b580      	push	{r7, lr}
 800f72a:	af00      	add	r7, sp, #0

	motorChannel = getChannel();
 800f72c:	f000 f84a 	bl	800f7c4 <getChannel>
 800f730:	4603      	mov	r3, r0
 800f732:	461a      	mov	r2, r3
 800f734:	4b20      	ldr	r3, [pc, #128]	; (800f7b8 <CAN_Init+0x90>)
 800f736:	701a      	strb	r2, [r3, #0]


	sFilterConfig.FilterBank = 0;
 800f738:	4b20      	ldr	r3, [pc, #128]	; (800f7bc <CAN_Init+0x94>)
 800f73a:	2200      	movs	r2, #0
 800f73c:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800f73e:	4b1f      	ldr	r3, [pc, #124]	; (800f7bc <CAN_Init+0x94>)
 800f740:	2200      	movs	r2, #0
 800f742:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800f744:	4b1d      	ldr	r3, [pc, #116]	; (800f7bc <CAN_Init+0x94>)
 800f746:	2201      	movs	r2, #1
 800f748:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = 0x2000 | motorChannel << 10;
 800f74a:	4b1b      	ldr	r3, [pc, #108]	; (800f7b8 <CAN_Init+0x90>)
 800f74c:	781b      	ldrb	r3, [r3, #0]
 800f74e:	029b      	lsls	r3, r3, #10
 800f750:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f754:	461a      	mov	r2, r3
 800f756:	4b19      	ldr	r3, [pc, #100]	; (800f7bc <CAN_Init+0x94>)
 800f758:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 800f75a:	4b18      	ldr	r3, [pc, #96]	; (800f7bc <CAN_Init+0x94>)
 800f75c:	2200      	movs	r2, #0
 800f75e:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0xfc00;
 800f760:	4b16      	ldr	r3, [pc, #88]	; (800f7bc <CAN_Init+0x94>)
 800f762:	f44f 427c 	mov.w	r2, #64512	; 0xfc00
 800f766:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0006;
 800f768:	4b14      	ldr	r3, [pc, #80]	; (800f7bc <CAN_Init+0x94>)
 800f76a:	2206      	movs	r2, #6
 800f76c:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800f76e:	4b13      	ldr	r3, [pc, #76]	; (800f7bc <CAN_Init+0x94>)
 800f770:	2200      	movs	r2, #0
 800f772:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 800f774:	4b11      	ldr	r3, [pc, #68]	; (800f7bc <CAN_Init+0x94>)
 800f776:	2201      	movs	r2, #1
 800f778:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 800f77a:	4b10      	ldr	r3, [pc, #64]	; (800f7bc <CAN_Init+0x94>)
 800f77c:	220e      	movs	r2, #14
 800f77e:	625a      	str	r2, [r3, #36]	; 0x24

	if(HAL_CAN_ConfigFilter(&hcan1,&sFilterConfig) != HAL_OK)
 800f780:	490e      	ldr	r1, [pc, #56]	; (800f7bc <CAN_Init+0x94>)
 800f782:	480f      	ldr	r0, [pc, #60]	; (800f7c0 <CAN_Init+0x98>)
 800f784:	f7fa f8a4 	bl	80098d0 <HAL_CAN_ConfigFilter>
 800f788:	4603      	mov	r3, r0
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d001      	beq.n	800f792 <CAN_Init+0x6a>
	{
	  Error_Handler();
 800f78e:	f000 feb9 	bl	8010504 <Error_Handler>
	}

	if(HAL_CAN_Start(&hcan1) != HAL_OK)
 800f792:	480b      	ldr	r0, [pc, #44]	; (800f7c0 <CAN_Init+0x98>)
 800f794:	f7fa f97c 	bl	8009a90 <HAL_CAN_Start>
 800f798:	4603      	mov	r3, r0
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d001      	beq.n	800f7a2 <CAN_Init+0x7a>
	{
	  Error_Handler();
 800f79e:	f000 feb1 	bl	8010504 <Error_Handler>
	}

	if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 800f7a2:	2103      	movs	r1, #3
 800f7a4:	4806      	ldr	r0, [pc, #24]	; (800f7c0 <CAN_Init+0x98>)
 800f7a6:	f7fa faca 	bl	8009d3e <HAL_CAN_ActivateNotification>
 800f7aa:	4603      	mov	r3, r0
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d001      	beq.n	800f7b4 <CAN_Init+0x8c>
	{
	  Error_Handler();
 800f7b0:	f000 fea8 	bl	8010504 <Error_Handler>
	}


}
 800f7b4:	bf00      	nop
 800f7b6:	bd80      	pop	{r7, pc}
 800f7b8:	200000f0 	.word	0x200000f0
 800f7bc:	20004454 	.word	0x20004454
 800f7c0:	200044a0 	.word	0x200044a0

0800f7c4 <getChannel>:


uint8_t getChannel()
{
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	b082      	sub	sp, #8
 800f7c8:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 800f7ca:	2300      	movs	r3, #0
 800f7cc:	71fb      	strb	r3, [r7, #7]

	ch |= !HAL_GPIO_ReadPin(CH_b0_GPIO_Port, CH_b0_Pin) << 0;
 800f7ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800f7d2:	481b      	ldr	r0, [pc, #108]	; (800f840 <getChannel+0x7c>)
 800f7d4:	f7fb fe04 	bl	800b3e0 <HAL_GPIO_ReadPin>
 800f7d8:	4603      	mov	r3, r0
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	bf0c      	ite	eq
 800f7de:	2301      	moveq	r3, #1
 800f7e0:	2300      	movne	r3, #0
 800f7e2:	b2db      	uxtb	r3, r3
 800f7e4:	b25a      	sxtb	r2, r3
 800f7e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f7ea:	4313      	orrs	r3, r2
 800f7ec:	b25b      	sxtb	r3, r3
 800f7ee:	71fb      	strb	r3, [r7, #7]
	ch |= !HAL_GPIO_ReadPin(CH_b1_GPIO_Port, CH_b1_Pin) << 1;
 800f7f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800f7f4:	4812      	ldr	r0, [pc, #72]	; (800f840 <getChannel+0x7c>)
 800f7f6:	f7fb fdf3 	bl	800b3e0 <HAL_GPIO_ReadPin>
 800f7fa:	4603      	mov	r3, r0
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d101      	bne.n	800f804 <getChannel+0x40>
 800f800:	2302      	movs	r3, #2
 800f802:	e000      	b.n	800f806 <getChannel+0x42>
 800f804:	2300      	movs	r3, #0
 800f806:	b25a      	sxtb	r2, r3
 800f808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f80c:	4313      	orrs	r3, r2
 800f80e:	b25b      	sxtb	r3, r3
 800f810:	71fb      	strb	r3, [r7, #7]
	ch |= !HAL_GPIO_ReadPin(CH_b2_GPIO_Port, CH_b2_Pin) << 2;
 800f812:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800f816:	480a      	ldr	r0, [pc, #40]	; (800f840 <getChannel+0x7c>)
 800f818:	f7fb fde2 	bl	800b3e0 <HAL_GPIO_ReadPin>
 800f81c:	4603      	mov	r3, r0
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d101      	bne.n	800f826 <getChannel+0x62>
 800f822:	2304      	movs	r3, #4
 800f824:	e000      	b.n	800f828 <getChannel+0x64>
 800f826:	2300      	movs	r3, #0
 800f828:	b25a      	sxtb	r2, r3
 800f82a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f82e:	4313      	orrs	r3, r2
 800f830:	b25b      	sxtb	r3, r3
 800f832:	71fb      	strb	r3, [r7, #7]

	return ch;
 800f834:	79fb      	ldrb	r3, [r7, #7]
}
 800f836:	4618      	mov	r0, r3
 800f838:	3708      	adds	r7, #8
 800f83a:	46bd      	mov	sp, r7
 800f83c:	bd80      	pop	{r7, pc}
 800f83e:	bf00      	nop
 800f840:	40020400 	.word	0x40020400

0800f844 <HAL_CAN_TxMailbox0CompleteCallback>:




void HAL_CAN_TxMailbox0CompleteCallback (CAN_HandleTypeDef * hcan)
{
 800f844:	b580      	push	{r7, lr}
 800f846:	b082      	sub	sp, #8
 800f848:	af00      	add	r7, sp, #0
 800f84a:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
	{
	}
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 800f84c:	2200      	movs	r2, #0
 800f84e:	2140      	movs	r1, #64	; 0x40
 800f850:	4803      	ldr	r0, [pc, #12]	; (800f860 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 800f852:	f7fb fddd 	bl	800b410 <HAL_GPIO_WritePin>

}
 800f856:	bf00      	nop
 800f858:	3708      	adds	r7, #8
 800f85a:	46bd      	mov	sp, r7
 800f85c:	bd80      	pop	{r7, pc}
 800f85e:	bf00      	nop
 800f860:	40020400 	.word	0x40020400

0800f864 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback (CAN_HandleTypeDef * hcan)
{
 800f864:	b580      	push	{r7, lr}
 800f866:	b082      	sub	sp, #8
 800f868:	af00      	add	r7, sp, #0
 800f86a:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
	{
	}
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 800f86c:	2200      	movs	r2, #0
 800f86e:	2140      	movs	r1, #64	; 0x40
 800f870:	4803      	ldr	r0, [pc, #12]	; (800f880 <HAL_CAN_TxMailbox1CompleteCallback+0x1c>)
 800f872:	f7fb fdcd 	bl	800b410 <HAL_GPIO_WritePin>

}
 800f876:	bf00      	nop
 800f878:	3708      	adds	r7, #8
 800f87a:	46bd      	mov	sp, r7
 800f87c:	bd80      	pop	{r7, pc}
 800f87e:	bf00      	nop
 800f880:	40020400 	.word	0x40020400

0800f884 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback (CAN_HandleTypeDef * hcan)
{
 800f884:	b580      	push	{r7, lr}
 800f886:	b082      	sub	sp, #8
 800f888:	af00      	add	r7, sp, #0
 800f88a:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
	{
	}
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 800f88c:	2200      	movs	r2, #0
 800f88e:	2140      	movs	r1, #64	; 0x40
 800f890:	4803      	ldr	r0, [pc, #12]	; (800f8a0 <HAL_CAN_TxMailbox2CompleteCallback+0x1c>)
 800f892:	f7fb fdbd 	bl	800b410 <HAL_GPIO_WritePin>

}
 800f896:	bf00      	nop
 800f898:	3708      	adds	r7, #8
 800f89a:	46bd      	mov	sp, r7
 800f89c:	bd80      	pop	{r7, pc}
 800f89e:	bf00      	nop
 800f8a0:	40020400 	.word	0x40020400

0800f8a4 <HAL_CAN_RxFifo0MsgPendingCallback>:



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800f8a4:	b580      	push	{r7, lr}
 800f8a6:	b084      	sub	sp, #16
 800f8a8:	af00      	add	r7, sp, #0
 800f8aa:	6078      	str	r0, [r7, #4]
			uint8_t byte[4];
		};
	}controlRef;


	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can1RxHeader, can1RxData);
 800f8ac:	4b16      	ldr	r3, [pc, #88]	; (800f908 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 800f8ae:	4a17      	ldr	r2, [pc, #92]	; (800f90c <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 800f8b0:	2100      	movs	r1, #0
 800f8b2:	6878      	ldr	r0, [r7, #4]
 800f8b4:	f7fa f930 	bl	8009b18 <HAL_CAN_GetRxMessage>

	can1RxFlg = 1;
 800f8b8:	4b15      	ldr	r3, [pc, #84]	; (800f910 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 800f8ba:	2201      	movs	r2, #1
 800f8bc:	701a      	strb	r2, [r3, #0]

	if(((can1RxHeader.StdId & 0x1c) >> 2) == 0x01 && can1RxHeader.DLC == 0x4)
 800f8be:	4b13      	ldr	r3, [pc, #76]	; (800f90c <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	089b      	lsrs	r3, r3, #2
 800f8c4:	f003 0307 	and.w	r3, r3, #7
 800f8c8:	2b01      	cmp	r3, #1
 800f8ca:	d114      	bne.n	800f8f6 <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
 800f8cc:	4b0f      	ldr	r3, [pc, #60]	; (800f90c <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 800f8ce:	691b      	ldr	r3, [r3, #16]
 800f8d0:	2b04      	cmp	r3, #4
 800f8d2:	d110      	bne.n	800f8f6 <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
	{
		controlRef.byte[0] = can1RxData[0];
 800f8d4:	4b0c      	ldr	r3, [pc, #48]	; (800f908 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 800f8d6:	781b      	ldrb	r3, [r3, #0]
 800f8d8:	733b      	strb	r3, [r7, #12]
		controlRef.byte[1] = can1RxData[1];
 800f8da:	4b0b      	ldr	r3, [pc, #44]	; (800f908 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 800f8dc:	785b      	ldrb	r3, [r3, #1]
 800f8de:	737b      	strb	r3, [r7, #13]
		controlRef.byte[2] = can1RxData[2];
 800f8e0:	4b09      	ldr	r3, [pc, #36]	; (800f908 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 800f8e2:	789b      	ldrb	r3, [r3, #2]
 800f8e4:	73bb      	strb	r3, [r7, #14]
		controlRef.byte[3] = can1RxData[3];
 800f8e6:	4b08      	ldr	r3, [pc, #32]	; (800f908 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 800f8e8:	78db      	ldrb	r3, [r3, #3]
 800f8ea:	73fb      	strb	r3, [r7, #15]

		omega_ref = controlRef.fval;
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	4a09      	ldr	r2, [pc, #36]	; (800f914 <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 800f8f0:	6013      	str	r3, [r2, #0]

		timeoutReset();
 800f8f2:	f001 fe67 	bl	80115c4 <timeoutReset>
		theta_ref = controlRef.fval;
	}
#endif


	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_SET);
 800f8f6:	2201      	movs	r2, #1
 800f8f8:	2140      	movs	r1, #64	; 0x40
 800f8fa:	4807      	ldr	r0, [pc, #28]	; (800f918 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 800f8fc:	f7fb fd88 	bl	800b410 <HAL_GPIO_WritePin>

}
 800f900:	bf00      	nop
 800f902:	3710      	adds	r7, #16
 800f904:	46bd      	mov	sp, r7
 800f906:	bd80      	pop	{r7, pc}
 800f908:	20004498 	.word	0x20004498
 800f90c:	2000447c 	.word	0x2000447c
 800f910:	200000f1 	.word	0x200000f1
 800f914:	200000b4 	.word	0x200000b4
 800f918:	40020000 	.word	0x40020000

0800f91c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800f91c:	b580      	push	{r7, lr}
 800f91e:	b082      	sub	sp, #8
 800f920:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800f922:	2300      	movs	r3, #0
 800f924:	607b      	str	r3, [r7, #4]
 800f926:	4b14      	ldr	r3, [pc, #80]	; (800f978 <MX_DMA_Init+0x5c>)
 800f928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f92a:	4a13      	ldr	r2, [pc, #76]	; (800f978 <MX_DMA_Init+0x5c>)
 800f92c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800f930:	6313      	str	r3, [r2, #48]	; 0x30
 800f932:	4b11      	ldr	r3, [pc, #68]	; (800f978 <MX_DMA_Init+0x5c>)
 800f934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f93a:	607b      	str	r3, [r7, #4]
 800f93c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800f93e:	2200      	movs	r2, #0
 800f940:	2100      	movs	r1, #0
 800f942:	2038      	movs	r0, #56	; 0x38
 800f944:	f7fa fd07 	bl	800a356 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800f948:	2038      	movs	r0, #56	; 0x38
 800f94a:	f7fa fd20 	bl	800a38e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800f94e:	2200      	movs	r2, #0
 800f950:	2100      	movs	r1, #0
 800f952:	2039      	movs	r0, #57	; 0x39
 800f954:	f7fa fcff 	bl	800a356 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800f958:	2039      	movs	r0, #57	; 0x39
 800f95a:	f7fa fd18 	bl	800a38e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800f95e:	2200      	movs	r2, #0
 800f960:	2100      	movs	r1, #0
 800f962:	203a      	movs	r0, #58	; 0x3a
 800f964:	f7fa fcf7 	bl	800a356 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800f968:	203a      	movs	r0, #58	; 0x3a
 800f96a:	f7fa fd10 	bl	800a38e <HAL_NVIC_EnableIRQ>

}
 800f96e:	bf00      	nop
 800f970:	3708      	adds	r7, #8
 800f972:	46bd      	mov	sp, r7
 800f974:	bd80      	pop	{r7, pc}
 800f976:	bf00      	nop
 800f978:	40023800 	.word	0x40023800

0800f97c <Encoder_Init>:
Encoder_TypeDef mainEncoder;



void Encoder_Init()
{
 800f97c:	b480      	push	{r7}
 800f97e:	af00      	add	r7, sp, #0

	mainEncoder.Init.hspi = &hspi2;
 800f980:	4b19      	ldr	r3, [pc, #100]	; (800f9e8 <Encoder_Init+0x6c>)
 800f982:	4a1a      	ldr	r2, [pc, #104]	; (800f9ec <Encoder_Init+0x70>)
 800f984:	609a      	str	r2, [r3, #8]
	mainEncoder.Init.SPI_NSS_Port = SPI2_NSS_GPIO_Port;
 800f986:	4b18      	ldr	r3, [pc, #96]	; (800f9e8 <Encoder_Init+0x6c>)
 800f988:	4a19      	ldr	r2, [pc, #100]	; (800f9f0 <Encoder_Init+0x74>)
 800f98a:	60da      	str	r2, [r3, #12]
	mainEncoder.Init.SPI_NSS_Pin = SPI2_NSS_Pin;
 800f98c:	4b16      	ldr	r3, [pc, #88]	; (800f9e8 <Encoder_Init+0x6c>)
 800f98e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f992:	821a      	strh	r2, [r3, #16]

	mainEncoder.Init.theta_offset = 0.0f;
 800f994:	4b14      	ldr	r3, [pc, #80]	; (800f9e8 <Encoder_Init+0x6c>)
 800f996:	f04f 0200 	mov.w	r2, #0
 800f99a:	601a      	str	r2, [r3, #0]
	mainEncoder.Init.theta_re_offset = -3.0723f;
 800f99c:	4b12      	ldr	r3, [pc, #72]	; (800f9e8 <Encoder_Init+0x6c>)
 800f99e:	4a15      	ldr	r2, [pc, #84]	; (800f9f4 <Encoder_Init+0x78>)
 800f9a0:	605a      	str	r2, [r3, #4]

	mainEncoder.theta = 0.0f;
 800f9a2:	4b11      	ldr	r3, [pc, #68]	; (800f9e8 <Encoder_Init+0x6c>)
 800f9a4:	f04f 0200 	mov.w	r2, #0
 800f9a8:	615a      	str	r2, [r3, #20]
	mainEncoder.theta_re = 0.0f;
 800f9aa:	4b0f      	ldr	r3, [pc, #60]	; (800f9e8 <Encoder_Init+0x6c>)
 800f9ac:	f04f 0200 	mov.w	r2, #0
 800f9b0:	619a      	str	r2, [r3, #24]
	mainEncoder.forced_commute_enable = 0;
 800f9b2:	4b0d      	ldr	r3, [pc, #52]	; (800f9e8 <Encoder_Init+0x6c>)
 800f9b4:	2200      	movs	r2, #0
 800f9b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	mainEncoder.cos_theta_re = 1.0f;
 800f9ba:	4b0b      	ldr	r3, [pc, #44]	; (800f9e8 <Encoder_Init+0x6c>)
 800f9bc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800f9c0:	61da      	str	r2, [r3, #28]
	mainEncoder.sin_theta_re = 0.0f;
 800f9c2:	4b09      	ldr	r3, [pc, #36]	; (800f9e8 <Encoder_Init+0x6c>)
 800f9c4:	f04f 0200 	mov.w	r2, #0
 800f9c8:	621a      	str	r2, [r3, #32]


	// SPI Interrupt Setting
	__HAL_SPI_ENABLE_IT(mainEncoder.Init.hspi, SPI_IT_TXE | SPI_IT_RXNE);
 800f9ca:	4b07      	ldr	r3, [pc, #28]	; (800f9e8 <Encoder_Init+0x6c>)
 800f9cc:	689b      	ldr	r3, [r3, #8]
 800f9ce:	681b      	ldr	r3, [r3, #0]
 800f9d0:	685a      	ldr	r2, [r3, #4]
 800f9d2:	4b05      	ldr	r3, [pc, #20]	; (800f9e8 <Encoder_Init+0x6c>)
 800f9d4:	689b      	ldr	r3, [r3, #8]
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800f9dc:	605a      	str	r2, [r3, #4]


}
 800f9de:	bf00      	nop
 800f9e0:	46bd      	mov	sp, r7
 800f9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e6:	4770      	bx	lr
 800f9e8:	200044c8 	.word	0x200044c8
 800f9ec:	200044f8 	.word	0x200044f8
 800f9f0:	40020400 	.word	0x40020400
 800f9f4:	c044a090 	.word	0xc044a090

0800f9f8 <setZeroEncoder>:


#if 1

void setZeroEncoder(uint8_t exe)
{
 800f9f8:	b590      	push	{r4, r7, lr}
 800f9fa:	b08b      	sub	sp, #44	; 0x2c
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	4603      	mov	r3, r0
 800fa00:	71fb      	strb	r3, [r7, #7]

	const int32_t forced_commute_steps = 2000;
 800fa02:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800fa06:	627b      	str	r3, [r7, #36]	; 0x24



	volatile uint32_t forced_commute_count = 0;
 800fa08:	2300      	movs	r3, #0
 800fa0a:	61bb      	str	r3, [r7, #24]

	const float forced_I_gamma_ref = 8.0f;
 800fa0c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 800fa10:	623b      	str	r3, [r7, #32]
	const float forced_I_delta_ref = 0.0f;
 800fa12:	f04f 0300 	mov.w	r3, #0
 800fa16:	61fb      	str	r3, [r7, #28]

	volatile float sensed_theta_re_error;

	volatile float sensed_theta_error;
	volatile float sensed_theta_error_sum = 0.0f;
 800fa18:	f04f 0300 	mov.w	r3, #0
 800fa1c:	60fb      	str	r3, [r7, #12]
	volatile float sensed_theta_error_ave = 0.0f;
 800fa1e:	f04f 0300 	mov.w	r3, #0
 800fa22:	60bb      	str	r3, [r7, #8]


	flash_data = (uint32_t*)Flash_load();
 800fa24:	f000 faec 	bl	8010000 <Flash_load>
 800fa28:	4602      	mov	r2, r0
 800fa2a:	4b93      	ldr	r3, [pc, #588]	; (800fc78 <setZeroEncoder+0x280>)
 800fa2c:	601a      	str	r2, [r3, #0]

	if(exe == 0)
 800fa2e:	79fb      	ldrb	r3, [r7, #7]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d126      	bne.n	800fa82 <setZeroEncoder+0x8a>
	{

		memcpy(&mainEncoder.Init.theta_re_offset, flash_data, 4);
 800fa34:	4b90      	ldr	r3, [pc, #576]	; (800fc78 <setZeroEncoder+0x280>)
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	461a      	mov	r2, r3
 800fa3c:	4b8f      	ldr	r3, [pc, #572]	; (800fc7c <setZeroEncoder+0x284>)
 800fa3e:	605a      	str	r2, [r3, #4]

		printf("flash_data:%d\n", mainEncoder.Init.theta_re_offset * 100000);
 800fa40:	4b8e      	ldr	r3, [pc, #568]	; (800fc7c <setZeroEncoder+0x284>)
 800fa42:	edd3 7a01 	vldr	s15, [r3, #4]
 800fa46:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 800fc80 <setZeroEncoder+0x288>
 800fa4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fa4e:	ee17 0a90 	vmov	r0, s15
 800fa52:	f7f8 fca9 	bl	80083a8 <__aeabi_f2d>
 800fa56:	4603      	mov	r3, r0
 800fa58:	460c      	mov	r4, r1
 800fa5a:	461a      	mov	r2, r3
 800fa5c:	4623      	mov	r3, r4
 800fa5e:	4889      	ldr	r0, [pc, #548]	; (800fc84 <setZeroEncoder+0x28c>)
 800fa60:	f001 feb2 	bl	80117c8 <iprintf>
		printf(" theta_re_offset = %d\n", (int)(mainEncoder.Init.theta_re_offset * 100000));
 800fa64:	4b85      	ldr	r3, [pc, #532]	; (800fc7c <setZeroEncoder+0x284>)
 800fa66:	edd3 7a01 	vldr	s15, [r3, #4]
 800fa6a:	ed9f 7a85 	vldr	s14, [pc, #532]	; 800fc80 <setZeroEncoder+0x288>
 800fa6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fa72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fa76:	ee17 1a90 	vmov	r1, s15
 800fa7a:	4883      	ldr	r0, [pc, #524]	; (800fc88 <setZeroEncoder+0x290>)
 800fa7c:	f001 fea4 	bl	80117c8 <iprintf>
		return;
 800fa80:	e0ea      	b.n	800fc58 <setZeroEncoder+0x260>
	}


	mainACR.Id_ref = forced_I_gamma_ref;
 800fa82:	4a82      	ldr	r2, [pc, #520]	; (800fc8c <setZeroEncoder+0x294>)
 800fa84:	6a3b      	ldr	r3, [r7, #32]
 800fa86:	62d3      	str	r3, [r2, #44]	; 0x2c
	mainACR.Iq_ref = forced_I_delta_ref;
 800fa88:	4a80      	ldr	r2, [pc, #512]	; (800fc8c <setZeroEncoder+0x294>)
 800fa8a:	69fb      	ldr	r3, [r7, #28]
 800fa8c:	6313      	str	r3, [r2, #48]	; 0x30

	mainEncoder.Init.theta_re_offset = 0.0f;
 800fa8e:	4b7b      	ldr	r3, [pc, #492]	; (800fc7c <setZeroEncoder+0x284>)
 800fa90:	f04f 0200 	mov.w	r2, #0
 800fa94:	605a      	str	r2, [r3, #4]

	mainACR.forced_theta_re = 0.0f;
 800fa96:	4b7d      	ldr	r3, [pc, #500]	; (800fc8c <setZeroEncoder+0x294>)
 800fa98:	f04f 0200 	mov.w	r2, #0
 800fa9c:	661a      	str	r2, [r3, #96]	; 0x60

	mainACR.forced_commute_enable = 1;
 800fa9e:	4b7b      	ldr	r3, [pc, #492]	; (800fc8c <setZeroEncoder+0x294>)
 800faa0:	2201      	movs	r2, #1
 800faa2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

	HAL_Delay(1000);
 800faa6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800faaa:	f7f9 f9ef 	bl	8008e8c <HAL_Delay>


	mainEncoder.Init.theta_re_offset = 0.0f - mainEncoder.theta_re;
 800faae:	4b73      	ldr	r3, [pc, #460]	; (800fc7c <setZeroEncoder+0x284>)
 800fab0:	edd3 7a06 	vldr	s15, [r3, #24]
 800fab4:	ed9f 7a76 	vldr	s14, [pc, #472]	; 800fc90 <setZeroEncoder+0x298>
 800fab8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fabc:	4b6f      	ldr	r3, [pc, #444]	; (800fc7c <setZeroEncoder+0x284>)
 800fabe:	edc3 7a01 	vstr	s15, [r3, #4]

	mainACR.Id_ref = 0.0f;
 800fac2:	4b72      	ldr	r3, [pc, #456]	; (800fc8c <setZeroEncoder+0x294>)
 800fac4:	f04f 0200 	mov.w	r2, #0
 800fac8:	62da      	str	r2, [r3, #44]	; 0x2c
	mainACR.Iq_ref = 0.0f;
 800faca:	4b70      	ldr	r3, [pc, #448]	; (800fc8c <setZeroEncoder+0x294>)
 800facc:	f04f 0200 	mov.w	r2, #0
 800fad0:	631a      	str	r2, [r3, #48]	; 0x30


	while(mainEncoder.Init.theta_re_offset < -M_PI)	mainEncoder.Init.theta_re_offset += 2.0f * M_PI;
 800fad2:	e012      	b.n	800fafa <setZeroEncoder+0x102>
 800fad4:	4b69      	ldr	r3, [pc, #420]	; (800fc7c <setZeroEncoder+0x284>)
 800fad6:	685b      	ldr	r3, [r3, #4]
 800fad8:	4618      	mov	r0, r3
 800fada:	f7f8 fc65 	bl	80083a8 <__aeabi_f2d>
 800fade:	a360      	add	r3, pc, #384	; (adr r3, 800fc60 <setZeroEncoder+0x268>)
 800fae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fae4:	f7f8 fb02 	bl	80080ec <__adddf3>
 800fae8:	4603      	mov	r3, r0
 800faea:	460c      	mov	r4, r1
 800faec:	4618      	mov	r0, r3
 800faee:	4621      	mov	r1, r4
 800faf0:	f7f8 ff8a 	bl	8008a08 <__aeabi_d2f>
 800faf4:	4602      	mov	r2, r0
 800faf6:	4b61      	ldr	r3, [pc, #388]	; (800fc7c <setZeroEncoder+0x284>)
 800faf8:	605a      	str	r2, [r3, #4]
 800fafa:	4b60      	ldr	r3, [pc, #384]	; (800fc7c <setZeroEncoder+0x284>)
 800fafc:	685b      	ldr	r3, [r3, #4]
 800fafe:	4618      	mov	r0, r3
 800fb00:	f7f8 fc52 	bl	80083a8 <__aeabi_f2d>
 800fb04:	a358      	add	r3, pc, #352	; (adr r3, 800fc68 <setZeroEncoder+0x270>)
 800fb06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb0a:	f7f8 ff17 	bl	800893c <__aeabi_dcmplt>
 800fb0e:	4603      	mov	r3, r0
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d1df      	bne.n	800fad4 <setZeroEncoder+0xdc>
	while(mainEncoder.Init.theta_re_offset > M_PI)	mainEncoder.Init.theta_re_offset -= 2.0f * M_PI;
 800fb14:	e012      	b.n	800fb3c <setZeroEncoder+0x144>
 800fb16:	4b59      	ldr	r3, [pc, #356]	; (800fc7c <setZeroEncoder+0x284>)
 800fb18:	685b      	ldr	r3, [r3, #4]
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	f7f8 fc44 	bl	80083a8 <__aeabi_f2d>
 800fb20:	a34f      	add	r3, pc, #316	; (adr r3, 800fc60 <setZeroEncoder+0x268>)
 800fb22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb26:	f7f8 fadf 	bl	80080e8 <__aeabi_dsub>
 800fb2a:	4603      	mov	r3, r0
 800fb2c:	460c      	mov	r4, r1
 800fb2e:	4618      	mov	r0, r3
 800fb30:	4621      	mov	r1, r4
 800fb32:	f7f8 ff69 	bl	8008a08 <__aeabi_d2f>
 800fb36:	4602      	mov	r2, r0
 800fb38:	4b50      	ldr	r3, [pc, #320]	; (800fc7c <setZeroEncoder+0x284>)
 800fb3a:	605a      	str	r2, [r3, #4]
 800fb3c:	4b4f      	ldr	r3, [pc, #316]	; (800fc7c <setZeroEncoder+0x284>)
 800fb3e:	685b      	ldr	r3, [r3, #4]
 800fb40:	4618      	mov	r0, r3
 800fb42:	f7f8 fc31 	bl	80083a8 <__aeabi_f2d>
 800fb46:	a34a      	add	r3, pc, #296	; (adr r3, 800fc70 <setZeroEncoder+0x278>)
 800fb48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb4c:	f7f8 ff14 	bl	8008978 <__aeabi_dcmpgt>
 800fb50:	4603      	mov	r3, r0
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	d1df      	bne.n	800fb16 <setZeroEncoder+0x11e>


	printf(" theta_re_offset = %d -- ", (int)(mainEncoder.Init.theta_re_offset * 100000));
 800fb56:	4b49      	ldr	r3, [pc, #292]	; (800fc7c <setZeroEncoder+0x284>)
 800fb58:	edd3 7a01 	vldr	s15, [r3, #4]
 800fb5c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800fc80 <setZeroEncoder+0x288>
 800fb60:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fb64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fb68:	ee17 1a90 	vmov	r1, s15
 800fb6c:	4849      	ldr	r0, [pc, #292]	; (800fc94 <setZeroEncoder+0x29c>)
 800fb6e:	f001 fe2b 	bl	80117c8 <iprintf>
	HAL_Delay(1);
 800fb72:	2001      	movs	r0, #1
 800fb74:	f7f9 f98a 	bl	8008e8c <HAL_Delay>
	printf(" theta_re_offset = %d\n", (int)(mainEncoder.Init.theta_re_offset * 100000));
 800fb78:	4b40      	ldr	r3, [pc, #256]	; (800fc7c <setZeroEncoder+0x284>)
 800fb7a:	edd3 7a01 	vldr	s15, [r3, #4]
 800fb7e:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800fc80 <setZeroEncoder+0x288>
 800fb82:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fb86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fb8a:	ee17 1a90 	vmov	r1, s15
 800fb8e:	483e      	ldr	r0, [pc, #248]	; (800fc88 <setZeroEncoder+0x290>)
 800fb90:	f001 fe1a 	bl	80117c8 <iprintf>
	HAL_Delay(1);
 800fb94:	2001      	movs	r0, #1
 800fb96:	f7f9 f979 	bl	8008e8c <HAL_Delay>
	printf(" theta_re_offset(4) = %d -- ", (int)(mainEncoder.Init.theta_re_offset * 10000));
 800fb9a:	4b38      	ldr	r3, [pc, #224]	; (800fc7c <setZeroEncoder+0x284>)
 800fb9c:	edd3 7a01 	vldr	s15, [r3, #4]
 800fba0:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800fc98 <setZeroEncoder+0x2a0>
 800fba4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fba8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fbac:	ee17 1a90 	vmov	r1, s15
 800fbb0:	483a      	ldr	r0, [pc, #232]	; (800fc9c <setZeroEncoder+0x2a4>)
 800fbb2:	f001 fe09 	bl	80117c8 <iprintf>
	HAL_Delay(1);
 800fbb6:	2001      	movs	r0, #1
 800fbb8:	f7f9 f968 	bl	8008e8c <HAL_Delay>
	printf(" theta_re_offset(4) = %d\n", (int)(mainEncoder.Init.theta_re_offset * 10000));
 800fbbc:	4b2f      	ldr	r3, [pc, #188]	; (800fc7c <setZeroEncoder+0x284>)
 800fbbe:	edd3 7a01 	vldr	s15, [r3, #4]
 800fbc2:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800fc98 <setZeroEncoder+0x2a0>
 800fbc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fbca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fbce:	ee17 1a90 	vmov	r1, s15
 800fbd2:	4833      	ldr	r0, [pc, #204]	; (800fca0 <setZeroEncoder+0x2a8>)
 800fbd4:	f001 fdf8 	bl	80117c8 <iprintf>
	HAL_Delay(1);
 800fbd8:	2001      	movs	r0, #1
 800fbda:	f7f9 f957 	bl	8008e8c <HAL_Delay>

	printf("(theta_re_offset < 1.0f) = %d\n", (int)(mainEncoder.Init.theta_re_offset < 1.0f));
 800fbde:	4b27      	ldr	r3, [pc, #156]	; (800fc7c <setZeroEncoder+0x284>)
 800fbe0:	edd3 7a01 	vldr	s15, [r3, #4]
 800fbe4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800fbe8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fbec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbf0:	bf4c      	ite	mi
 800fbf2:	2301      	movmi	r3, #1
 800fbf4:	2300      	movpl	r3, #0
 800fbf6:	b2db      	uxtb	r3, r3
 800fbf8:	4619      	mov	r1, r3
 800fbfa:	482a      	ldr	r0, [pc, #168]	; (800fca4 <setZeroEncoder+0x2ac>)
 800fbfc:	f001 fde4 	bl	80117c8 <iprintf>

	printf("(theta_re_offset > -1.0f) = %d\n", (int)(mainEncoder.Init.theta_re_offset > -1.0f));
 800fc00:	4b1e      	ldr	r3, [pc, #120]	; (800fc7c <setZeroEncoder+0x284>)
 800fc02:	edd3 7a01 	vldr	s15, [r3, #4]
 800fc06:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800fc0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800fc0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc12:	bfcc      	ite	gt
 800fc14:	2301      	movgt	r3, #1
 800fc16:	2300      	movle	r3, #0
 800fc18:	b2db      	uxtb	r3, r3
 800fc1a:	4619      	mov	r1, r3
 800fc1c:	4822      	ldr	r0, [pc, #136]	; (800fca8 <setZeroEncoder+0x2b0>)
 800fc1e:	f001 fdd3 	bl	80117c8 <iprintf>


	memcpy(flash_data, &mainEncoder.Init.theta_re_offset, 4);
 800fc22:	4b15      	ldr	r3, [pc, #84]	; (800fc78 <setZeroEncoder+0x280>)
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	4a15      	ldr	r2, [pc, #84]	; (800fc7c <setZeroEncoder+0x284>)
 800fc28:	6852      	ldr	r2, [r2, #4]
 800fc2a:	601a      	str	r2, [r3, #0]

	if (!Flash_store())
 800fc2c:	f000 f9fa 	bl	8010024 <Flash_store>
 800fc30:	4603      	mov	r3, r0
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d102      	bne.n	800fc3c <setZeroEncoder+0x244>
	{
		printf("Failed to write flash\n");
 800fc36:	481d      	ldr	r0, [pc, #116]	; (800fcac <setZeroEncoder+0x2b4>)
 800fc38:	f001 fe3a 	bl	80118b0 <puts>
	}

	printf("flash_data:%lu\n", *flash_data);
 800fc3c:	4b0e      	ldr	r3, [pc, #56]	; (800fc78 <setZeroEncoder+0x280>)
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	681b      	ldr	r3, [r3, #0]
 800fc42:	4619      	mov	r1, r3
 800fc44:	481a      	ldr	r0, [pc, #104]	; (800fcb0 <setZeroEncoder+0x2b8>)
 800fc46:	f001 fdbf 	bl	80117c8 <iprintf>


	mainACR.forced_commute_enable = 0;
 800fc4a:	4b10      	ldr	r3, [pc, #64]	; (800fc8c <setZeroEncoder+0x294>)
 800fc4c:	2200      	movs	r2, #0
 800fc4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

	ACR_Reset(&mainACR);
 800fc52:	480e      	ldr	r0, [pc, #56]	; (800fc8c <setZeroEncoder+0x294>)
 800fc54:	f7fe fda2 	bl	800e79c <ACR_Reset>


#endif


}
 800fc58:	372c      	adds	r7, #44	; 0x2c
 800fc5a:	46bd      	mov	sp, r7
 800fc5c:	bd90      	pop	{r4, r7, pc}
 800fc5e:	bf00      	nop
 800fc60:	54442d18 	.word	0x54442d18
 800fc64:	401921fb 	.word	0x401921fb
 800fc68:	54442d18 	.word	0x54442d18
 800fc6c:	c00921fb 	.word	0xc00921fb
 800fc70:	54442d18 	.word	0x54442d18
 800fc74:	400921fb 	.word	0x400921fb
 800fc78:	200044f4 	.word	0x200044f4
 800fc7c:	200044c8 	.word	0x200044c8
 800fc80:	47c35000 	.word	0x47c35000
 800fc84:	08012b28 	.word	0x08012b28
 800fc88:	08012b38 	.word	0x08012b38
 800fc8c:	20004178 	.word	0x20004178
 800fc90:	00000000 	.word	0x00000000
 800fc94:	08012b50 	.word	0x08012b50
 800fc98:	461c4000 	.word	0x461c4000
 800fc9c:	08012b6c 	.word	0x08012b6c
 800fca0:	08012b8c 	.word	0x08012b8c
 800fca4:	08012ba8 	.word	0x08012ba8
 800fca8:	08012bc8 	.word	0x08012bc8
 800fcac:	08012be8 	.word	0x08012be8
 800fcb0:	08012c00 	.word	0x08012c00

0800fcb4 <Encoder_Request>:

#endif


inline void Encoder_Request(Encoder_TypeDef *hEncoder)
{
 800fcb4:	b580      	push	{r7, lr}
 800fcb6:	b082      	sub	sp, #8
 800fcb8:	af00      	add	r7, sp, #0
 800fcba:	6078      	str	r0, [r7, #4]


	// Reading Encoder for next sampling
	hEncoder->spi2txBuf[0] = 0xff;
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	22ff      	movs	r2, #255	; 0xff
 800fcc0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	hEncoder->spi2txBuf[1] = 0xff;
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	22ff      	movs	r2, #255	; 0xff
 800fcc8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

	HAL_GPIO_WritePin(hEncoder->Init.SPI_NSS_Port, hEncoder->Init.SPI_NSS_Pin, GPIO_PIN_RESET);
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	68d8      	ldr	r0, [r3, #12]
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	8a1b      	ldrh	r3, [r3, #16]
 800fcd4:	2200      	movs	r2, #0
 800fcd6:	4619      	mov	r1, r3
 800fcd8:	f7fb fb9a 	bl	800b410 <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive_IT(hEncoder->Init.hspi, hEncoder->spi2txBuf, hEncoder->spi2rxBuf, 1);
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	6898      	ldr	r0, [r3, #8]
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	f103 0125 	add.w	r1, r3, #37	; 0x25
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	f103 0227 	add.w	r2, r3, #39	; 0x27
 800fcec:	2301      	movs	r3, #1
 800fcee:	f7fc f937 	bl	800bf60 <HAL_SPI_TransmitReceive_IT>


}
 800fcf2:	bf00      	nop
 800fcf4:	3708      	adds	r7, #8
 800fcf6:	46bd      	mov	sp, r7
 800fcf8:	bd80      	pop	{r7, pc}
 800fcfa:	0000      	movs	r0, r0
 800fcfc:	0000      	movs	r0, r0
	...

0800fd00 <Encoder_Refresh>:


inline int Encoder_Refresh(Encoder_TypeDef *hEncoder)
{
 800fd00:	b5b0      	push	{r4, r5, r7, lr}
 800fd02:	b082      	sub	sp, #8
 800fd04:	af00      	add	r7, sp, #0
 800fd06:	6078      	str	r0, [r7, #4]
	static uint16_t angle_raw = 0;
	static float _theta;
	static float _theta_re;

	// Reading RX Data from SPI Encoder
	HAL_GPIO_WritePin(hEncoder->Init.SPI_NSS_Port, hEncoder->Init.SPI_NSS_Pin, GPIO_PIN_SET);
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	68d8      	ldr	r0, [r3, #12]
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	8a1b      	ldrh	r3, [r3, #16]
 800fd10:	2201      	movs	r2, #1
 800fd12:	4619      	mov	r1, r3
 800fd14:	f7fb fb7c 	bl	800b410 <HAL_GPIO_WritePin>

	angle_raw = (hEncoder->spi2rxBuf[1] & 0x3f) << 8 | hEncoder->spi2rxBuf[0];
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800fd1e:	b2db      	uxtb	r3, r3
 800fd20:	021b      	lsls	r3, r3, #8
 800fd22:	b21b      	sxth	r3, r3
 800fd24:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800fd28:	b21a      	sxth	r2, r3
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800fd30:	b2db      	uxtb	r3, r3
 800fd32:	b21b      	sxth	r3, r3
 800fd34:	4313      	orrs	r3, r2
 800fd36:	b21b      	sxth	r3, r3
 800fd38:	b29a      	uxth	r2, r3
 800fd3a:	4b93      	ldr	r3, [pc, #588]	; (800ff88 <Encoder_Refresh+0x288>)
 800fd3c:	801a      	strh	r2, [r3, #0]

	_theta = (float)angle_raw / (float)ENCODER_RESOL * 2.0f * M_PI + hEncoder->Init.theta_offset;
 800fd3e:	4b92      	ldr	r3, [pc, #584]	; (800ff88 <Encoder_Refresh+0x288>)
 800fd40:	881b      	ldrh	r3, [r3, #0]
 800fd42:	ee07 3a90 	vmov	s15, r3
 800fd46:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800fd4a:	eddf 6a90 	vldr	s13, [pc, #576]	; 800ff8c <Encoder_Refresh+0x28c>
 800fd4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800fd52:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800fd56:	ee17 0a90 	vmov	r0, s15
 800fd5a:	f7f8 fb25 	bl	80083a8 <__aeabi_f2d>
 800fd5e:	a386      	add	r3, pc, #536	; (adr r3, 800ff78 <Encoder_Refresh+0x278>)
 800fd60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd64:	f7f8 fb78 	bl	8008458 <__aeabi_dmul>
 800fd68:	4603      	mov	r3, r0
 800fd6a:	460c      	mov	r4, r1
 800fd6c:	4625      	mov	r5, r4
 800fd6e:	461c      	mov	r4, r3
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	4618      	mov	r0, r3
 800fd76:	f7f8 fb17 	bl	80083a8 <__aeabi_f2d>
 800fd7a:	4602      	mov	r2, r0
 800fd7c:	460b      	mov	r3, r1
 800fd7e:	4620      	mov	r0, r4
 800fd80:	4629      	mov	r1, r5
 800fd82:	f7f8 f9b3 	bl	80080ec <__adddf3>
 800fd86:	4603      	mov	r3, r0
 800fd88:	460c      	mov	r4, r1
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	4621      	mov	r1, r4
 800fd8e:	f7f8 fe3b 	bl	8008a08 <__aeabi_d2f>
 800fd92:	4602      	mov	r2, r0
 800fd94:	4b7e      	ldr	r3, [pc, #504]	; (800ff90 <Encoder_Refresh+0x290>)
 800fd96:	601a      	str	r2, [r3, #0]

	if(_theta < 0.0f)			hEncoder->theta = _theta + 2 * M_PI;
 800fd98:	4b7d      	ldr	r3, [pc, #500]	; (800ff90 <Encoder_Refresh+0x290>)
 800fd9a:	edd3 7a00 	vldr	s15, [r3]
 800fd9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fda2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fda6:	d513      	bpl.n	800fdd0 <Encoder_Refresh+0xd0>
 800fda8:	4b79      	ldr	r3, [pc, #484]	; (800ff90 <Encoder_Refresh+0x290>)
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	4618      	mov	r0, r3
 800fdae:	f7f8 fafb 	bl	80083a8 <__aeabi_f2d>
 800fdb2:	a373      	add	r3, pc, #460	; (adr r3, 800ff80 <Encoder_Refresh+0x280>)
 800fdb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdb8:	f7f8 f998 	bl	80080ec <__adddf3>
 800fdbc:	4603      	mov	r3, r0
 800fdbe:	460c      	mov	r4, r1
 800fdc0:	4618      	mov	r0, r3
 800fdc2:	4621      	mov	r1, r4
 800fdc4:	f7f8 fe20 	bl	8008a08 <__aeabi_d2f>
 800fdc8:	4602      	mov	r2, r0
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	615a      	str	r2, [r3, #20]
 800fdce:	e024      	b.n	800fe1a <Encoder_Refresh+0x11a>
	else if(_theta >= 2 * M_PI)	hEncoder->theta = _theta - 2 * M_PI;
 800fdd0:	4b6f      	ldr	r3, [pc, #444]	; (800ff90 <Encoder_Refresh+0x290>)
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	f7f8 fae7 	bl	80083a8 <__aeabi_f2d>
 800fdda:	a369      	add	r3, pc, #420	; (adr r3, 800ff80 <Encoder_Refresh+0x280>)
 800fddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fde0:	f7f8 fdc0 	bl	8008964 <__aeabi_dcmpge>
 800fde4:	4603      	mov	r3, r0
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d013      	beq.n	800fe12 <Encoder_Refresh+0x112>
 800fdea:	4b69      	ldr	r3, [pc, #420]	; (800ff90 <Encoder_Refresh+0x290>)
 800fdec:	681b      	ldr	r3, [r3, #0]
 800fdee:	4618      	mov	r0, r3
 800fdf0:	f7f8 fada 	bl	80083a8 <__aeabi_f2d>
 800fdf4:	a362      	add	r3, pc, #392	; (adr r3, 800ff80 <Encoder_Refresh+0x280>)
 800fdf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdfa:	f7f8 f975 	bl	80080e8 <__aeabi_dsub>
 800fdfe:	4603      	mov	r3, r0
 800fe00:	460c      	mov	r4, r1
 800fe02:	4618      	mov	r0, r3
 800fe04:	4621      	mov	r1, r4
 800fe06:	f7f8 fdff 	bl	8008a08 <__aeabi_d2f>
 800fe0a:	4602      	mov	r2, r0
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	615a      	str	r2, [r3, #20]
 800fe10:	e003      	b.n	800fe1a <Encoder_Refresh+0x11a>
	else						hEncoder->theta = _theta;
 800fe12:	4b5f      	ldr	r3, [pc, #380]	; (800ff90 <Encoder_Refresh+0x290>)
 800fe14:	681a      	ldr	r2, [r3, #0]
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	615a      	str	r2, [r3, #20]

	_theta_re = fmodf((float)angle_raw / (float)ENCODER_RESOL * 2.0f * M_PI * POLES / 2, 2.0f * M_PI) + hEncoder->Init.theta_re_offset;
 800fe1a:	4b5b      	ldr	r3, [pc, #364]	; (800ff88 <Encoder_Refresh+0x288>)
 800fe1c:	881b      	ldrh	r3, [r3, #0]
 800fe1e:	ee07 3a90 	vmov	s15, r3
 800fe22:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800fe26:	eddf 6a59 	vldr	s13, [pc, #356]	; 800ff8c <Encoder_Refresh+0x28c>
 800fe2a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800fe2e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800fe32:	ee17 0a90 	vmov	r0, s15
 800fe36:	f7f8 fab7 	bl	80083a8 <__aeabi_f2d>
 800fe3a:	a34f      	add	r3, pc, #316	; (adr r3, 800ff78 <Encoder_Refresh+0x278>)
 800fe3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe40:	f7f8 fb0a 	bl	8008458 <__aeabi_dmul>
 800fe44:	4603      	mov	r3, r0
 800fe46:	460c      	mov	r4, r1
 800fe48:	4618      	mov	r0, r3
 800fe4a:	4621      	mov	r1, r4
 800fe4c:	f04f 0200 	mov.w	r2, #0
 800fe50:	4b50      	ldr	r3, [pc, #320]	; (800ff94 <Encoder_Refresh+0x294>)
 800fe52:	f7f8 fb01 	bl	8008458 <__aeabi_dmul>
 800fe56:	4603      	mov	r3, r0
 800fe58:	460c      	mov	r4, r1
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	4621      	mov	r1, r4
 800fe5e:	f04f 0200 	mov.w	r2, #0
 800fe62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fe66:	f7f8 fc21 	bl	80086ac <__aeabi_ddiv>
 800fe6a:	4603      	mov	r3, r0
 800fe6c:	460c      	mov	r4, r1
 800fe6e:	4618      	mov	r0, r3
 800fe70:	4621      	mov	r1, r4
 800fe72:	f7f8 fdc9 	bl	8008a08 <__aeabi_d2f>
 800fe76:	4603      	mov	r3, r0
 800fe78:	eddf 0a47 	vldr	s1, [pc, #284]	; 800ff98 <Encoder_Refresh+0x298>
 800fe7c:	ee00 3a10 	vmov	s0, r3
 800fe80:	f002 fc4e 	bl	8012720 <fmodf>
 800fe84:	eeb0 7a40 	vmov.f32	s14, s0
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	edd3 7a01 	vldr	s15, [r3, #4]
 800fe8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fe92:	4b42      	ldr	r3, [pc, #264]	; (800ff9c <Encoder_Refresh+0x29c>)
 800fe94:	edc3 7a00 	vstr	s15, [r3]

	if(_theta_re < 0.0f)			hEncoder->theta_re = _theta_re + 2 * M_PI;
 800fe98:	4b40      	ldr	r3, [pc, #256]	; (800ff9c <Encoder_Refresh+0x29c>)
 800fe9a:	edd3 7a00 	vldr	s15, [r3]
 800fe9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fea6:	d513      	bpl.n	800fed0 <Encoder_Refresh+0x1d0>
 800fea8:	4b3c      	ldr	r3, [pc, #240]	; (800ff9c <Encoder_Refresh+0x29c>)
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	4618      	mov	r0, r3
 800feae:	f7f8 fa7b 	bl	80083a8 <__aeabi_f2d>
 800feb2:	a333      	add	r3, pc, #204	; (adr r3, 800ff80 <Encoder_Refresh+0x280>)
 800feb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feb8:	f7f8 f918 	bl	80080ec <__adddf3>
 800febc:	4603      	mov	r3, r0
 800febe:	460c      	mov	r4, r1
 800fec0:	4618      	mov	r0, r3
 800fec2:	4621      	mov	r1, r4
 800fec4:	f7f8 fda0 	bl	8008a08 <__aeabi_d2f>
 800fec8:	4602      	mov	r2, r0
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	619a      	str	r2, [r3, #24]
 800fece:	e024      	b.n	800ff1a <Encoder_Refresh+0x21a>
	else if(_theta_re >= 2 * M_PI)	hEncoder->theta_re = _theta_re - 2 * M_PI;
 800fed0:	4b32      	ldr	r3, [pc, #200]	; (800ff9c <Encoder_Refresh+0x29c>)
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	4618      	mov	r0, r3
 800fed6:	f7f8 fa67 	bl	80083a8 <__aeabi_f2d>
 800feda:	a329      	add	r3, pc, #164	; (adr r3, 800ff80 <Encoder_Refresh+0x280>)
 800fedc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fee0:	f7f8 fd40 	bl	8008964 <__aeabi_dcmpge>
 800fee4:	4603      	mov	r3, r0
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d013      	beq.n	800ff12 <Encoder_Refresh+0x212>
 800feea:	4b2c      	ldr	r3, [pc, #176]	; (800ff9c <Encoder_Refresh+0x29c>)
 800feec:	681b      	ldr	r3, [r3, #0]
 800feee:	4618      	mov	r0, r3
 800fef0:	f7f8 fa5a 	bl	80083a8 <__aeabi_f2d>
 800fef4:	a322      	add	r3, pc, #136	; (adr r3, 800ff80 <Encoder_Refresh+0x280>)
 800fef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fefa:	f7f8 f8f5 	bl	80080e8 <__aeabi_dsub>
 800fefe:	4603      	mov	r3, r0
 800ff00:	460c      	mov	r4, r1
 800ff02:	4618      	mov	r0, r3
 800ff04:	4621      	mov	r1, r4
 800ff06:	f7f8 fd7f 	bl	8008a08 <__aeabi_d2f>
 800ff0a:	4602      	mov	r2, r0
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	619a      	str	r2, [r3, #24]
 800ff10:	e003      	b.n	800ff1a <Encoder_Refresh+0x21a>
	else							hEncoder->theta_re = _theta_re;
 800ff12:	4b22      	ldr	r3, [pc, #136]	; (800ff9c <Encoder_Refresh+0x29c>)
 800ff14:	681a      	ldr	r2, [r3, #0]
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	619a      	str	r2, [r3, #24]

	hEncoder->cos_theta_re = sin_table2[(int)((hEncoder->theta_re * 0.3183f + 0.5f) * 5000.0f)];
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	edd3 7a06 	vldr	s15, [r3, #24]
 800ff20:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800ffa0 <Encoder_Refresh+0x2a0>
 800ff24:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ff28:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800ff2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ff30:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800ffa4 <Encoder_Refresh+0x2a4>
 800ff34:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ff38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ff3c:	ee17 3a90 	vmov	r3, s15
 800ff40:	4a19      	ldr	r2, [pc, #100]	; (800ffa8 <Encoder_Refresh+0x2a8>)
 800ff42:	009b      	lsls	r3, r3, #2
 800ff44:	4413      	add	r3, r2
 800ff46:	681a      	ldr	r2, [r3, #0]
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	61da      	str	r2, [r3, #28]
	hEncoder->sin_theta_re = sin_table2[(int)(hEncoder->theta_re * 1591.54943f)];
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	edd3 7a06 	vldr	s15, [r3, #24]
 800ff52:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800ffac <Encoder_Refresh+0x2ac>
 800ff56:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ff5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ff5e:	ee17 3a90 	vmov	r3, s15
 800ff62:	4a11      	ldr	r2, [pc, #68]	; (800ffa8 <Encoder_Refresh+0x2a8>)
 800ff64:	009b      	lsls	r3, r3, #2
 800ff66:	4413      	add	r3, r2
 800ff68:	681a      	ldr	r2, [r3, #0]
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	621a      	str	r2, [r3, #32]


	return 0;
 800ff6e:	2300      	movs	r3, #0

}
 800ff70:	4618      	mov	r0, r3
 800ff72:	3708      	adds	r7, #8
 800ff74:	46bd      	mov	sp, r7
 800ff76:	bdb0      	pop	{r4, r5, r7, pc}
 800ff78:	54442d18 	.word	0x54442d18
 800ff7c:	400921fb 	.word	0x400921fb
 800ff80:	54442d18 	.word	0x54442d18
 800ff84:	401921fb 	.word	0x401921fb
 800ff88:	200000f2 	.word	0x200000f2
 800ff8c:	46800000 	.word	0x46800000
 800ff90:	200000f4 	.word	0x200000f4
 800ff94:	40360000 	.word	0x40360000
 800ff98:	40c90fdb 	.word	0x40c90fdb
 800ff9c:	200000f8 	.word	0x200000f8
 800ffa0:	3ea2f838 	.word	0x3ea2f838
 800ffa4:	459c4000 	.word	0x459c4000
 800ffa8:	08012c58 	.word	0x08012c58
 800ffac:	44c6f195 	.word	0x44c6f195

0800ffb0 <Flash_clear>:
extern char _backup_flash_start;


// Flashのsectoe1を消去
HAL_StatusTypeDef Flash_clear()
{
 800ffb0:	b580      	push	{r7, lr}
 800ffb2:	b088      	sub	sp, #32
 800ffb4:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 800ffb6:	f7fa fdf1 	bl	800ab9c <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800ffba:	2300      	movs	r3, #0
 800ffbc:	60bb      	str	r3, [r7, #8]
    EraseInitStruct.Sector = BACKUP_FLASH_SECTOR_NUM;
 800ffbe:	2301      	movs	r3, #1
 800ffc0:	613b      	str	r3, [r7, #16]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800ffc2:	2302      	movs	r3, #2
 800ffc4:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.NbSectors = 1;
 800ffc6:	2301      	movs	r3, #1
 800ffc8:	617b      	str	r3, [r7, #20]

    // Eraseに失敗したsector番号がerror_sectorに入る
    // 正常にEraseができたときは0xFFFFFFFFが入る
    uint32_t error_sector;
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 800ffca:	1d3a      	adds	r2, r7, #4
 800ffcc:	f107 0308 	add.w	r3, r7, #8
 800ffd0:	4611      	mov	r1, r2
 800ffd2:	4618      	mov	r0, r3
 800ffd4:	f7fa ff50 	bl	800ae78 <HAL_FLASHEx_Erase>
 800ffd8:	4603      	mov	r3, r0
 800ffda:	77fb      	strb	r3, [r7, #31]

    HAL_FLASH_Lock();
 800ffdc:	f7fa fe00 	bl	800abe0 <HAL_FLASH_Lock>

    return result == HAL_OK && error_sector == 0xFFFFFFFF;
 800ffe0:	7ffb      	ldrb	r3, [r7, #31]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d105      	bne.n	800fff2 <Flash_clear+0x42>
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffec:	d101      	bne.n	800fff2 <Flash_clear+0x42>
 800ffee:	2301      	movs	r3, #1
 800fff0:	e000      	b.n	800fff4 <Flash_clear+0x44>
 800fff2:	2300      	movs	r3, #0
 800fff4:	b2db      	uxtb	r3, r3
}
 800fff6:	4618      	mov	r0, r3
 800fff8:	3720      	adds	r7, #32
 800fffa:	46bd      	mov	sp, r7
 800fffc:	bd80      	pop	{r7, pc}
	...

08010000 <Flash_load>:

// Flashのsector1の内容を全てwork_ramに読み出す
// work_ramの先頭アドレスを返す
uint8_t* Flash_load()
{
 8010000:	b580      	push	{r7, lr}
 8010002:	af00      	add	r7, sp, #0
    memcpy(work_ram, &_backup_flash_start, BACKUP_FLASH_SECTOR_SIZE);
 8010004:	4a05      	ldr	r2, [pc, #20]	; (801001c <Flash_load+0x1c>)
 8010006:	4b06      	ldr	r3, [pc, #24]	; (8010020 <Flash_load+0x20>)
 8010008:	4610      	mov	r0, r2
 801000a:	4619      	mov	r1, r3
 801000c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010010:	461a      	mov	r2, r3
 8010012:	f001 fbc5 	bl	80117a0 <memcpy>
    return work_ram;
 8010016:	4b01      	ldr	r3, [pc, #4]	; (801001c <Flash_load+0x1c>)
}
 8010018:	4618      	mov	r0, r3
 801001a:	bd80      	pop	{r7, pc}
 801001c:	200000fc 	.word	0x200000fc
 8010020:	08004000 	.word	0x08004000

08010024 <Flash_store>:

// Flashのsector1を消去後、work_ramにあるデータを書き込む
HAL_StatusTypeDef Flash_store()
{
 8010024:	b590      	push	{r4, r7, lr}
 8010026:	b085      	sub	sp, #20
 8010028:	af00      	add	r7, sp, #0
    // Flashをclear
    if (!Flash_clear()) return HAL_ERROR;
 801002a:	f7ff ffc1 	bl	800ffb0 <Flash_clear>
 801002e:	4603      	mov	r3, r0
 8010030:	2b00      	cmp	r3, #0
 8010032:	d101      	bne.n	8010038 <Flash_store+0x14>
 8010034:	2301      	movs	r3, #1
 8010036:	e02f      	b.n	8010098 <Flash_store+0x74>

    uint32_t *p_work_ram = (uint32_t*)work_ram;
 8010038:	4b19      	ldr	r3, [pc, #100]	; (80100a0 <Flash_store+0x7c>)
 801003a:	607b      	str	r3, [r7, #4]

    HAL_FLASH_Unlock();
 801003c:	f7fa fdae 	bl	800ab9c <HAL_FLASH_Unlock>

    // work_ramにあるデータを4バイトごとまとめて書き込む
    HAL_StatusTypeDef result;
    const size_t write_cnt = BACKUP_FLASH_SECTOR_SIZE / sizeof(uint32_t);
 8010040:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010044:	603b      	str	r3, [r7, #0]

    for (size_t i=0; i<write_cnt; i++)
 8010046:	2300      	movs	r3, #0
 8010048:	60bb      	str	r3, [r7, #8]
 801004a:	e017      	b.n	801007c <Flash_store+0x58>
    {
        result = HAL_FLASH_Program(
                    FLASH_TYPEPROGRAM_WORD,
                    (uint32_t)(&_backup_flash_start) + sizeof(uint32_t) * i,
 801004c:	68bb      	ldr	r3, [r7, #8]
 801004e:	009b      	lsls	r3, r3, #2
 8010050:	4a14      	ldr	r2, [pc, #80]	; (80100a4 <Flash_store+0x80>)
        result = HAL_FLASH_Program(
 8010052:	1899      	adds	r1, r3, r2
                    p_work_ram[i]
 8010054:	68bb      	ldr	r3, [r7, #8]
 8010056:	009b      	lsls	r3, r3, #2
 8010058:	687a      	ldr	r2, [r7, #4]
 801005a:	4413      	add	r3, r2
 801005c:	681b      	ldr	r3, [r3, #0]
        result = HAL_FLASH_Program(
 801005e:	f04f 0400 	mov.w	r4, #0
 8010062:	461a      	mov	r2, r3
 8010064:	4623      	mov	r3, r4
 8010066:	2002      	movs	r0, #2
 8010068:	f7fa fd44 	bl	800aaf4 <HAL_FLASH_Program>
 801006c:	4603      	mov	r3, r0
 801006e:	73fb      	strb	r3, [r7, #15]
                );
        if (result != HAL_OK) break;
 8010070:	7bfb      	ldrb	r3, [r7, #15]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d107      	bne.n	8010086 <Flash_store+0x62>
    for (size_t i=0; i<write_cnt; i++)
 8010076:	68bb      	ldr	r3, [r7, #8]
 8010078:	3301      	adds	r3, #1
 801007a:	60bb      	str	r3, [r7, #8]
 801007c:	68ba      	ldr	r2, [r7, #8]
 801007e:	683b      	ldr	r3, [r7, #0]
 8010080:	429a      	cmp	r2, r3
 8010082:	d3e3      	bcc.n	801004c <Flash_store+0x28>
 8010084:	e000      	b.n	8010088 <Flash_store+0x64>
        if (result != HAL_OK) break;
 8010086:	bf00      	nop
    }

    HAL_FLASH_Lock();
 8010088:	f7fa fdaa 	bl	800abe0 <HAL_FLASH_Lock>

    return result == HAL_OK;
 801008c:	7bfb      	ldrb	r3, [r7, #15]
 801008e:	2b00      	cmp	r3, #0
 8010090:	bf0c      	ite	eq
 8010092:	2301      	moveq	r3, #1
 8010094:	2300      	movne	r3, #0
 8010096:	b2db      	uxtb	r3, r3
}
 8010098:	4618      	mov	r0, r3
 801009a:	3714      	adds	r7, #20
 801009c:	46bd      	mov	sp, r7
 801009e:	bd90      	pop	{r4, r7, pc}
 80100a0:	200000fc 	.word	0x200000fc
 80100a4:	08004000 	.word	0x08004000

080100a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80100a8:	b580      	push	{r7, lr}
 80100aa:	b08a      	sub	sp, #40	; 0x28
 80100ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80100ae:	f107 0314 	add.w	r3, r7, #20
 80100b2:	2200      	movs	r2, #0
 80100b4:	601a      	str	r2, [r3, #0]
 80100b6:	605a      	str	r2, [r3, #4]
 80100b8:	609a      	str	r2, [r3, #8]
 80100ba:	60da      	str	r2, [r3, #12]
 80100bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80100be:	2300      	movs	r3, #0
 80100c0:	613b      	str	r3, [r7, #16]
 80100c2:	4b45      	ldr	r3, [pc, #276]	; (80101d8 <MX_GPIO_Init+0x130>)
 80100c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100c6:	4a44      	ldr	r2, [pc, #272]	; (80101d8 <MX_GPIO_Init+0x130>)
 80100c8:	f043 0304 	orr.w	r3, r3, #4
 80100cc:	6313      	str	r3, [r2, #48]	; 0x30
 80100ce:	4b42      	ldr	r3, [pc, #264]	; (80101d8 <MX_GPIO_Init+0x130>)
 80100d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100d2:	f003 0304 	and.w	r3, r3, #4
 80100d6:	613b      	str	r3, [r7, #16]
 80100d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80100da:	2300      	movs	r3, #0
 80100dc:	60fb      	str	r3, [r7, #12]
 80100de:	4b3e      	ldr	r3, [pc, #248]	; (80101d8 <MX_GPIO_Init+0x130>)
 80100e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100e2:	4a3d      	ldr	r2, [pc, #244]	; (80101d8 <MX_GPIO_Init+0x130>)
 80100e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80100e8:	6313      	str	r3, [r2, #48]	; 0x30
 80100ea:	4b3b      	ldr	r3, [pc, #236]	; (80101d8 <MX_GPIO_Init+0x130>)
 80100ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80100f2:	60fb      	str	r3, [r7, #12]
 80100f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80100f6:	2300      	movs	r3, #0
 80100f8:	60bb      	str	r3, [r7, #8]
 80100fa:	4b37      	ldr	r3, [pc, #220]	; (80101d8 <MX_GPIO_Init+0x130>)
 80100fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80100fe:	4a36      	ldr	r2, [pc, #216]	; (80101d8 <MX_GPIO_Init+0x130>)
 8010100:	f043 0301 	orr.w	r3, r3, #1
 8010104:	6313      	str	r3, [r2, #48]	; 0x30
 8010106:	4b34      	ldr	r3, [pc, #208]	; (80101d8 <MX_GPIO_Init+0x130>)
 8010108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801010a:	f003 0301 	and.w	r3, r3, #1
 801010e:	60bb      	str	r3, [r7, #8]
 8010110:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8010112:	2300      	movs	r3, #0
 8010114:	607b      	str	r3, [r7, #4]
 8010116:	4b30      	ldr	r3, [pc, #192]	; (80101d8 <MX_GPIO_Init+0x130>)
 8010118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801011a:	4a2f      	ldr	r2, [pc, #188]	; (80101d8 <MX_GPIO_Init+0x130>)
 801011c:	f043 0302 	orr.w	r3, r3, #2
 8010120:	6313      	str	r3, [r2, #48]	; 0x30
 8010122:	4b2d      	ldr	r3, [pc, #180]	; (80101d8 <MX_GPIO_Init+0x130>)
 8010124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010126:	f003 0302 	and.w	r3, r3, #2
 801012a:	607b      	str	r3, [r7, #4]
 801012c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DB1_Pin|OP_CAL_Pin|GATE_EN_Pin, GPIO_PIN_RESET);
 801012e:	2200      	movs	r2, #0
 8010130:	f44f 61cc 	mov.w	r1, #1632	; 0x660
 8010134:	4829      	ldr	r0, [pc, #164]	; (80101dc <MX_GPIO_Init+0x134>)
 8010136:	f7fb f96b 	bl	800b410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_NSS_Pin|DB2_Pin|DB0_Pin, GPIO_PIN_RESET);
 801013a:	2200      	movs	r2, #0
 801013c:	f241 0150 	movw	r1, #4176	; 0x1050
 8010140:	4827      	ldr	r0, [pc, #156]	; (80101e0 <MX_GPIO_Init+0x138>)
 8010142:	f7fb f965 	bl	800b410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8010146:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801014a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 801014c:	4b25      	ldr	r3, [pc, #148]	; (80101e4 <MX_GPIO_Init+0x13c>)
 801014e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010150:	2300      	movs	r3, #0
 8010152:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8010154:	f107 0314 	add.w	r3, r7, #20
 8010158:	4619      	mov	r1, r3
 801015a:	4823      	ldr	r0, [pc, #140]	; (80101e8 <MX_GPIO_Init+0x140>)
 801015c:	f7fa ffae 	bl	800b0bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|DB1_Pin|OP_CAL_Pin|GATE_EN_Pin;
 8010160:	f44f 63cc 	mov.w	r3, #1632	; 0x660
 8010164:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010166:	2301      	movs	r3, #1
 8010168:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801016a:	2300      	movs	r3, #0
 801016c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801016e:	2300      	movs	r3, #0
 8010170:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010172:	f107 0314 	add.w	r3, r7, #20
 8010176:	4619      	mov	r1, r3
 8010178:	4818      	ldr	r0, [pc, #96]	; (80101dc <MX_GPIO_Init+0x134>)
 801017a:	f7fa ff9f 	bl	800b0bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|DB2_Pin|DB0_Pin;
 801017e:	f241 0350 	movw	r3, #4176	; 0x1050
 8010182:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010184:	2301      	movs	r3, #1
 8010186:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010188:	2300      	movs	r3, #0
 801018a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801018c:	2300      	movs	r3, #0
 801018e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010190:	f107 0314 	add.w	r3, r7, #20
 8010194:	4619      	mov	r1, r3
 8010196:	4812      	ldr	r0, [pc, #72]	; (80101e0 <MX_GPIO_Init+0x138>)
 8010198:	f7fa ff90 	bl	800b0bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CH_b0_Pin|CH_b1_Pin|CH_b2_Pin;
 801019c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80101a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80101a2:	2300      	movs	r3, #0
 80101a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80101a6:	2301      	movs	r3, #1
 80101a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80101aa:	f107 0314 	add.w	r3, r7, #20
 80101ae:	4619      	mov	r1, r3
 80101b0:	480b      	ldr	r0, [pc, #44]	; (80101e0 <MX_GPIO_Init+0x138>)
 80101b2:	f7fa ff83 	bl	800b0bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BR_FLT_Pin;
 80101b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80101ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80101bc:	2300      	movs	r3, #0
 80101be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80101c0:	2300      	movs	r3, #0
 80101c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BR_FLT_GPIO_Port, &GPIO_InitStruct);
 80101c4:	f107 0314 	add.w	r3, r7, #20
 80101c8:	4619      	mov	r1, r3
 80101ca:	4804      	ldr	r0, [pc, #16]	; (80101dc <MX_GPIO_Init+0x134>)
 80101cc:	f7fa ff76 	bl	800b0bc <HAL_GPIO_Init>

}
 80101d0:	bf00      	nop
 80101d2:	3728      	adds	r7, #40	; 0x28
 80101d4:	46bd      	mov	sp, r7
 80101d6:	bd80      	pop	{r7, pc}
 80101d8:	40023800 	.word	0x40023800
 80101dc:	40020000 	.word	0x40020000
 80101e0:	40020400 	.word	0x40020400
 80101e4:	10210000 	.word	0x10210000
 80101e8:	40020800 	.word	0x40020800

080101ec <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80101ec:	b480      	push	{r7}
 80101ee:	b083      	sub	sp, #12
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80101f4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80101f8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80101fc:	f003 0301 	and.w	r3, r3, #1
 8010200:	2b00      	cmp	r3, #0
 8010202:	d013      	beq.n	801022c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8010204:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8010208:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 801020c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8010210:	2b00      	cmp	r3, #0
 8010212:	d00b      	beq.n	801022c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8010214:	e000      	b.n	8010218 <ITM_SendChar+0x2c>
    {
      __NOP();
 8010216:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8010218:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	2b00      	cmp	r3, #0
 8010220:	d0f9      	beq.n	8010216 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8010222:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8010226:	687a      	ldr	r2, [r7, #4]
 8010228:	b2d2      	uxtb	r2, r2
 801022a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 801022c:	687b      	ldr	r3, [r7, #4]
}
 801022e:	4618      	mov	r0, r3
 8010230:	370c      	adds	r7, #12
 8010232:	46bd      	mov	sp, r7
 8010234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010238:	4770      	bx	lr

0801023a <_write>:
#endif



int _write(int file, char *ptr, int len)
{
 801023a:	b580      	push	{r7, lr}
 801023c:	b086      	sub	sp, #24
 801023e:	af00      	add	r7, sp, #0
 8010240:	60f8      	str	r0, [r7, #12]
 8010242:	60b9      	str	r1, [r7, #8]
 8010244:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 8010246:	2300      	movs	r3, #0
 8010248:	617b      	str	r3, [r7, #20]
 801024a:	e009      	b.n	8010260 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 801024c:	68bb      	ldr	r3, [r7, #8]
 801024e:	1c5a      	adds	r2, r3, #1
 8010250:	60ba      	str	r2, [r7, #8]
 8010252:	781b      	ldrb	r3, [r3, #0]
 8010254:	4618      	mov	r0, r3
 8010256:	f7ff ffc9 	bl	80101ec <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 801025a:	697b      	ldr	r3, [r7, #20]
 801025c:	3301      	adds	r3, #1
 801025e:	617b      	str	r3, [r7, #20]
 8010260:	697a      	ldr	r2, [r7, #20]
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	429a      	cmp	r2, r3
 8010266:	dbf1      	blt.n	801024c <_write+0x12>
  }
  return len;
 8010268:	687b      	ldr	r3, [r7, #4]
}
 801026a:	4618      	mov	r0, r3
 801026c:	3718      	adds	r7, #24
 801026e:	46bd      	mov	sp, r7
 8010270:	bd80      	pop	{r7, pc}
	...

08010274 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8010274:	b580      	push	{r7, lr}
 8010276:	b082      	sub	sp, #8
 8010278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */



	int count = 0;
 801027a:	2300      	movs	r3, #0
 801027c:	607b      	str	r3, [r7, #4]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 801027e:	f7f8 fd93 	bl	8008da8 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8010282:	f000 f8d3 	bl	801042c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8010286:	f7ff ff0f 	bl	80100a8 <MX_GPIO_Init>
  MX_DMA_Init();
 801028a:	f7ff fb47 	bl	800f91c <MX_DMA_Init>
  MX_ADC1_Init();
 801028e:	f7fe ff67 	bl	800f160 <MX_ADC1_Init>
  MX_ADC2_Init();
 8010292:	f7fe ffb7 	bl	800f204 <MX_ADC2_Init>
  MX_ADC3_Init();
 8010296:	f7ff f807 	bl	800f2a8 <MX_ADC3_Init>
  MX_CAN1_Init();
 801029a:	f7ff f9b5 	bl	800f608 <MX_CAN1_Init>
  MX_SPI2_Init();
 801029e:	f000 fd2b 	bl	8010cf8 <MX_SPI2_Init>
  MX_SPI3_Init();
 80102a2:	f000 fd61 	bl	8010d68 <MX_SPI3_Init>
  MX_TIM8_Init();
 80102a6:	f000 ffe3 	bl	8011270 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 80102aa:	f001 f9ab 	bl	8011604 <MX_USART2_UART_Init>



  //UartPrintf(&huart2, "Hello world\n");

  printf("Hello\n");
 80102ae:	4859      	ldr	r0, [pc, #356]	; (8010414 <main+0x1a0>)
 80102b0:	f001 fafe 	bl	80118b0 <puts>


  // Gate Enable
  HAL_GPIO_WritePin(GATE_EN_GPIO_Port, GATE_EN_Pin, GPIO_PIN_SET);
 80102b4:	2201      	movs	r2, #1
 80102b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80102ba:	4857      	ldr	r0, [pc, #348]	; (8010418 <main+0x1a4>)
 80102bc:	f7fb f8a8 	bl	800b410 <HAL_GPIO_WritePin>


  // Current Sensing Auto Offset Calibration
  HAL_GPIO_WritePin(OP_CAL_GPIO_Port, OP_CAL_Pin, GPIO_PIN_SET);
 80102c0:	2201      	movs	r2, #1
 80102c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80102c6:	4854      	ldr	r0, [pc, #336]	; (8010418 <main+0x1a4>)
 80102c8:	f7fb f8a2 	bl	800b410 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80102cc:	200a      	movs	r0, #10
 80102ce:	f7f8 fddd 	bl	8008e8c <HAL_Delay>
  HAL_GPIO_WritePin(OP_CAL_GPIO_Port, OP_CAL_Pin, GPIO_PIN_RESET);
 80102d2:	2200      	movs	r2, #0
 80102d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80102d8:	484f      	ldr	r0, [pc, #316]	; (8010418 <main+0x1a4>)
 80102da:	f7fb f899 	bl	800b410 <HAL_GPIO_WritePin>


  /******** DEBUG ********/

  HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_RESET);
 80102de:	2200      	movs	r2, #0
 80102e0:	2140      	movs	r1, #64	; 0x40
 80102e2:	484d      	ldr	r0, [pc, #308]	; (8010418 <main+0x1a4>)
 80102e4:	f7fb f894 	bl	800b410 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, GPIO_PIN_RESET);
 80102e8:	2200      	movs	r2, #0
 80102ea:	2110      	movs	r1, #16
 80102ec:	484b      	ldr	r0, [pc, #300]	; (801041c <main+0x1a8>)
 80102ee:	f7fb f88f 	bl	800b410 <HAL_GPIO_WritePin>


  p_ch = getChannel();
 80102f2:	f7ff fa67 	bl	800f7c4 <getChannel>
 80102f6:	4603      	mov	r3, r0
 80102f8:	70fb      	strb	r3, [r7, #3]


  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 80102fa:	2201      	movs	r2, #1
 80102fc:	2120      	movs	r1, #32
 80102fe:	4846      	ldr	r0, [pc, #280]	; (8010418 <main+0x1a4>)
 8010300:	f7fb f886 	bl	800b410 <HAL_GPIO_WritePin>
 8010304:	2064      	movs	r0, #100	; 0x64
 8010306:	f7f8 fdc1 	bl	8008e8c <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 801030a:	2200      	movs	r2, #0
 801030c:	2120      	movs	r1, #32
 801030e:	4842      	ldr	r0, [pc, #264]	; (8010418 <main+0x1a4>)
 8010310:	f7fb f87e 	bl	800b410 <HAL_GPIO_WritePin>
 8010314:	2064      	movs	r0, #100	; 0x64
 8010316:	f7f8 fdb9 	bl	8008e8c <HAL_Delay>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 801031a:	2201      	movs	r2, #1
 801031c:	2120      	movs	r1, #32
 801031e:	483e      	ldr	r0, [pc, #248]	; (8010418 <main+0x1a4>)
 8010320:	f7fb f876 	bl	800b410 <HAL_GPIO_WritePin>
 8010324:	2064      	movs	r0, #100	; 0x64
 8010326:	f7f8 fdb1 	bl	8008e8c <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 801032a:	2200      	movs	r2, #0
 801032c:	2120      	movs	r1, #32
 801032e:	483a      	ldr	r0, [pc, #232]	; (8010418 <main+0x1a4>)
 8010330:	f7fb f86e 	bl	800b410 <HAL_GPIO_WritePin>
 8010334:	2064      	movs	r0, #100	; 0x64
 8010336:	f7f8 fda9 	bl	8008e8c <HAL_Delay>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 801033a:	2201      	movs	r2, #1
 801033c:	2120      	movs	r1, #32
 801033e:	4836      	ldr	r0, [pc, #216]	; (8010418 <main+0x1a4>)
 8010340:	f7fb f866 	bl	800b410 <HAL_GPIO_WritePin>
 8010344:	2064      	movs	r0, #100	; 0x64
 8010346:	f7f8 fda1 	bl	8008e8c <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 801034a:	2200      	movs	r2, #0
 801034c:	2120      	movs	r1, #32
 801034e:	4832      	ldr	r0, [pc, #200]	; (8010418 <main+0x1a4>)
 8010350:	f7fb f85e 	bl	800b410 <HAL_GPIO_WritePin>
 8010354:	2064      	movs	r0, #100	; 0x64
 8010356:	f7f8 fd99 	bl	8008e8c <HAL_Delay>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 801035a:	2201      	movs	r2, #1
 801035c:	2120      	movs	r1, #32
 801035e:	482e      	ldr	r0, [pc, #184]	; (8010418 <main+0x1a4>)
 8010360:	f7fb f856 	bl	800b410 <HAL_GPIO_WritePin>
 8010364:	2064      	movs	r0, #100	; 0x64
 8010366:	f7f8 fd91 	bl	8008e8c <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 801036a:	2200      	movs	r2, #0
 801036c:	2120      	movs	r1, #32
 801036e:	482a      	ldr	r0, [pc, #168]	; (8010418 <main+0x1a4>)
 8010370:	f7fb f84e 	bl	800b410 <HAL_GPIO_WritePin>
 8010374:	2064      	movs	r0, #100	; 0x64
 8010376:	f7f8 fd89 	bl	8008e8c <HAL_Delay>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 801037a:	2201      	movs	r2, #1
 801037c:	2120      	movs	r1, #32
 801037e:	4826      	ldr	r0, [pc, #152]	; (8010418 <main+0x1a4>)
 8010380:	f7fb f846 	bl	800b410 <HAL_GPIO_WritePin>
 8010384:	2064      	movs	r0, #100	; 0x64
 8010386:	f7f8 fd81 	bl	8008e8c <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 801038a:	2200      	movs	r2, #0
 801038c:	2120      	movs	r1, #32
 801038e:	4822      	ldr	r0, [pc, #136]	; (8010418 <main+0x1a4>)
 8010390:	f7fb f83e 	bl	800b410 <HAL_GPIO_WritePin>
 8010394:	2064      	movs	r0, #100	; 0x64
 8010396:	f7f8 fd79 	bl	8008e8c <HAL_Delay>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 801039a:	2201      	movs	r2, #1
 801039c:	2120      	movs	r1, #32
 801039e:	481e      	ldr	r0, [pc, #120]	; (8010418 <main+0x1a4>)
 80103a0:	f7fb f836 	bl	800b410 <HAL_GPIO_WritePin>
 80103a4:	2064      	movs	r0, #100	; 0x64
 80103a6:	f7f8 fd71 	bl	8008e8c <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 80103aa:	2200      	movs	r2, #0
 80103ac:	2120      	movs	r1, #32
 80103ae:	481a      	ldr	r0, [pc, #104]	; (8010418 <main+0x1a4>)
 80103b0:	f7fb f82e 	bl	800b410 <HAL_GPIO_WritePin>
 80103b4:	2064      	movs	r0, #100	; 0x64
 80103b6:	f7f8 fd69 	bl	8008e8c <HAL_Delay>


  ch = getChannel();
 80103ba:	f7ff fa03 	bl	800f7c4 <getChannel>
 80103be:	4603      	mov	r3, r0
 80103c0:	70bb      	strb	r3, [r7, #2]




  CAN_Init();
 80103c2:	f7ff f9b1 	bl	800f728 <CAN_Init>


  Encoder_Init();
 80103c6:	f7ff fad9 	bl	800f97c <Encoder_Init>


  HAL_Delay(100);
 80103ca:	2064      	movs	r0, #100	; 0x64
 80103cc:	f7f8 fd5e 	bl	8008e8c <HAL_Delay>

  CurrentSensor_Init();
 80103d0:	f7fe fc5c 	bl	800ec8c <CurrentSensor_Init>

  CurrentSensor_Start(&mainCS);
 80103d4:	4812      	ldr	r0, [pc, #72]	; (8010420 <main+0x1ac>)
 80103d6:	f7fe fc91 	bl	800ecfc <CurrentSensor_Start>


  ACR_Init();
 80103da:	f7fd fef9 	bl	800e1d0 <ACR_Init>


  TIM_Init();
 80103de:	f001 f8a1 	bl	8011524 <TIM_Init>


  HAL_Delay(10);
 80103e2:	200a      	movs	r0, #10
 80103e4:	f7f8 fd52 	bl	8008e8c <HAL_Delay>



  ACR_Start(&mainACR);
 80103e8:	480e      	ldr	r0, [pc, #56]	; (8010424 <main+0x1b0>)
 80103ea:	f7fd ff2b 	bl	800e244 <ACR_Start>


  setZeroEncoder(0);//(p_ch != ch)? 1: 0);
 80103ee:	2000      	movs	r0, #0
 80103f0:	f7ff fb02 	bl	800f9f8 <setZeroEncoder>



  //while(1);

  ASR_Start();
 80103f4:	f7fe f9fc 	bl	800e7f0 <ASR_Start>


	  //mainACR.Vq_ref = 0.5;


	  if(ASR_flg == 1)
 80103f8:	4b0b      	ldr	r3, [pc, #44]	; (8010428 <main+0x1b4>)
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	2b01      	cmp	r3, #1
 80103fe:	d1fb      	bne.n	80103f8 <main+0x184>
	  {
		  HAL_GPIO_TogglePin(DB2_GPIO_Port, DB2_Pin);
 8010400:	2110      	movs	r1, #16
 8010402:	4806      	ldr	r0, [pc, #24]	; (801041c <main+0x1a8>)
 8010404:	f7fb f81d 	bl	800b442 <HAL_GPIO_TogglePin>
#endif

		  /********** ASR (Auto Speed Regulator) **********/


		  speedControl();
 8010408:	f7fe f9fe 	bl	800e808 <speedControl>


		  /********** end of ASR **********/


		  ASR_flg = 0;
 801040c:	4b06      	ldr	r3, [pc, #24]	; (8010428 <main+0x1b4>)
 801040e:	2200      	movs	r2, #0
 8010410:	601a      	str	r2, [r3, #0]
	  if(ASR_flg == 1)
 8010412:	e7f1      	b.n	80103f8 <main+0x184>
 8010414:	08012c10 	.word	0x08012c10
 8010418:	40020000 	.word	0x40020000
 801041c:	40020400 	.word	0x40020400
 8010420:	200041ec 	.word	0x200041ec
 8010424:	20004178 	.word	0x20004178
 8010428:	200000c8 	.word	0x200000c8

0801042c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 801042c:	b580      	push	{r7, lr}
 801042e:	b094      	sub	sp, #80	; 0x50
 8010430:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8010432:	f107 031c 	add.w	r3, r7, #28
 8010436:	2234      	movs	r2, #52	; 0x34
 8010438:	2100      	movs	r1, #0
 801043a:	4618      	mov	r0, r3
 801043c:	f001 f9bb 	bl	80117b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8010440:	f107 0308 	add.w	r3, r7, #8
 8010444:	2200      	movs	r2, #0
 8010446:	601a      	str	r2, [r3, #0]
 8010448:	605a      	str	r2, [r3, #4]
 801044a:	609a      	str	r2, [r3, #8]
 801044c:	60da      	str	r2, [r3, #12]
 801044e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8010450:	2300      	movs	r3, #0
 8010452:	607b      	str	r3, [r7, #4]
 8010454:	4b29      	ldr	r3, [pc, #164]	; (80104fc <SystemClock_Config+0xd0>)
 8010456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010458:	4a28      	ldr	r2, [pc, #160]	; (80104fc <SystemClock_Config+0xd0>)
 801045a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801045e:	6413      	str	r3, [r2, #64]	; 0x40
 8010460:	4b26      	ldr	r3, [pc, #152]	; (80104fc <SystemClock_Config+0xd0>)
 8010462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010468:	607b      	str	r3, [r7, #4]
 801046a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 801046c:	2300      	movs	r3, #0
 801046e:	603b      	str	r3, [r7, #0]
 8010470:	4b23      	ldr	r3, [pc, #140]	; (8010500 <SystemClock_Config+0xd4>)
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	4a22      	ldr	r2, [pc, #136]	; (8010500 <SystemClock_Config+0xd4>)
 8010476:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801047a:	6013      	str	r3, [r2, #0]
 801047c:	4b20      	ldr	r3, [pc, #128]	; (8010500 <SystemClock_Config+0xd4>)
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8010484:	603b      	str	r3, [r7, #0]
 8010486:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8010488:	2302      	movs	r3, #2
 801048a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 801048c:	2301      	movs	r3, #1
 801048e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8010490:	2310      	movs	r3, #16
 8010492:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8010494:	2302      	movs	r3, #2
 8010496:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8010498:	2300      	movs	r3, #0
 801049a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 801049c:	2310      	movs	r3, #16
 801049e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 320;
 80104a0:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80104a4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80104a6:	2302      	movs	r3, #2
 80104a8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80104aa:	2302      	movs	r3, #2
 80104ac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80104ae:	2302      	movs	r3, #2
 80104b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80104b2:	f107 031c 	add.w	r3, r7, #28
 80104b6:	4618      	mov	r0, r3
 80104b8:	f7fb fa94 	bl	800b9e4 <HAL_RCC_OscConfig>
 80104bc:	4603      	mov	r3, r0
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d001      	beq.n	80104c6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80104c2:	f000 f81f 	bl	8010504 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80104c6:	230f      	movs	r3, #15
 80104c8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80104ca:	2302      	movs	r3, #2
 80104cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80104ce:	2300      	movs	r3, #0
 80104d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80104d2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80104d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80104d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80104dc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80104de:	f107 0308 	add.w	r3, r7, #8
 80104e2:	2105      	movs	r1, #5
 80104e4:	4618      	mov	r0, r3
 80104e6:	f7fa ffc7 	bl	800b478 <HAL_RCC_ClockConfig>
 80104ea:	4603      	mov	r3, r0
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d001      	beq.n	80104f4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80104f0:	f000 f808 	bl	8010504 <Error_Handler>
  }
}
 80104f4:	bf00      	nop
 80104f6:	3750      	adds	r7, #80	; 0x50
 80104f8:	46bd      	mov	sp, r7
 80104fa:	bd80      	pop	{r7, pc}
 80104fc:	40023800 	.word	0x40023800
 8010500:	40007000 	.word	0x40007000

08010504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8010504:	b480      	push	{r7}
 8010506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8010508:	bf00      	nop
 801050a:	46bd      	mov	sp, r7
 801050c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010510:	4770      	bx	lr

08010512 <startPWM>:




inline void startPWM(TIM_HandleTypeDef *htim)
{
 8010512:	b580      	push	{r7, lr}
 8010514:	b082      	sub	sp, #8
 8010516:	af00      	add	r7, sp, #0
 8010518:	6078      	str	r0, [r7, #4]


	// 3phase PWM Starting
	HAL_TIM_PWM_Start_IT(htim, TIM_CHANNEL_1);
 801051a:	2100      	movs	r1, #0
 801051c:	6878      	ldr	r0, [r7, #4]
 801051e:	f7fc f927 	bl	800c770 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(htim, TIM_CHANNEL_2);
 8010522:	2104      	movs	r1, #4
 8010524:	6878      	ldr	r0, [r7, #4]
 8010526:	f7fc f923 	bl	800c770 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(htim, TIM_CHANNEL_3);
 801052a:	2108      	movs	r1, #8
 801052c:	6878      	ldr	r0, [r7, #4]
 801052e:	f7fc f91f 	bl	800c770 <HAL_TIM_PWM_Start_IT>

	HAL_TIMEx_PWMN_Start_IT(htim, TIM_CHANNEL_1);
 8010532:	2100      	movs	r1, #0
 8010534:	6878      	ldr	r0, [r7, #4]
 8010536:	f7fd f81c 	bl	800d572 <HAL_TIMEx_PWMN_Start_IT>
	HAL_TIMEx_PWMN_Start_IT(htim, TIM_CHANNEL_2);
 801053a:	2104      	movs	r1, #4
 801053c:	6878      	ldr	r0, [r7, #4]
 801053e:	f7fd f818 	bl	800d572 <HAL_TIMEx_PWMN_Start_IT>
	HAL_TIMEx_PWMN_Start_IT(htim, TIM_CHANNEL_3);
 8010542:	2108      	movs	r1, #8
 8010544:	6878      	ldr	r0, [r7, #4]
 8010546:	f7fd f814 	bl	800d572 <HAL_TIMEx_PWMN_Start_IT>

}
 801054a:	bf00      	nop
 801054c:	3708      	adds	r7, #8
 801054e:	46bd      	mov	sp, r7
 8010550:	bd80      	pop	{r7, pc}

08010552 <stopPWM>:



inline void stopPWM(TIM_HandleTypeDef *htim)
{
 8010552:	b580      	push	{r7, lr}
 8010554:	b082      	sub	sp, #8
 8010556:	af00      	add	r7, sp, #0
 8010558:	6078      	str	r0, [r7, #4]

	// 3phase PWM Stopping
	HAL_TIM_PWM_Stop_IT(htim, TIM_CHANNEL_1);
 801055a:	2100      	movs	r1, #0
 801055c:	6878      	ldr	r0, [r7, #4]
 801055e:	f7fc f98b 	bl	800c878 <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_PWM_Stop_IT(htim, TIM_CHANNEL_2);
 8010562:	2104      	movs	r1, #4
 8010564:	6878      	ldr	r0, [r7, #4]
 8010566:	f7fc f987 	bl	800c878 <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_PWM_Stop_IT(htim, TIM_CHANNEL_3);
 801056a:	2108      	movs	r1, #8
 801056c:	6878      	ldr	r0, [r7, #4]
 801056e:	f7fc f983 	bl	800c878 <HAL_TIM_PWM_Stop_IT>

	HAL_TIMEx_PWMN_Stop_IT(htim, TIM_CHANNEL_1);
 8010572:	2100      	movs	r1, #0
 8010574:	6878      	ldr	r0, [r7, #4]
 8010576:	f7fd f851 	bl	800d61c <HAL_TIMEx_PWMN_Stop_IT>
	HAL_TIMEx_PWMN_Stop_IT(htim, TIM_CHANNEL_2);
 801057a:	2104      	movs	r1, #4
 801057c:	6878      	ldr	r0, [r7, #4]
 801057e:	f7fd f84d 	bl	800d61c <HAL_TIMEx_PWMN_Stop_IT>
	HAL_TIMEx_PWMN_Stop_IT(htim, TIM_CHANNEL_3);
 8010582:	2108      	movs	r1, #8
 8010584:	6878      	ldr	r0, [r7, #4]
 8010586:	f7fd f849 	bl	800d61c <HAL_TIMEx_PWMN_Stop_IT>

}
 801058a:	bf00      	nop
 801058c:	3708      	adds	r7, #8
 801058e:	46bd      	mov	sp, r7
 8010590:	bd80      	pop	{r7, pc}
	...

08010594 <setSVM_dq>:


inline void setSVM_dq(TIM_HandleTypeDef *htim, float Vd_ref, float Vq_ref, float cos_theta_re, float sin_theta_re)
{
 8010594:	b5b0      	push	{r4, r5, r7, lr}
 8010596:	b086      	sub	sp, #24
 8010598:	af00      	add	r7, sp, #0
 801059a:	6178      	str	r0, [r7, #20]
 801059c:	ed87 0a04 	vstr	s0, [r7, #16]
 80105a0:	edc7 0a03 	vstr	s1, [r7, #12]
 80105a4:	ed87 1a02 	vstr	s2, [r7, #8]
 80105a8:	edc7 1a01 	vstr	s3, [r7, #4]
	static float x1, y1, x2, y2;
	static float x, y;
	static float vect1, vect2;


	x = Vd_ref * cos_theta_re - Vq_ref * sin_theta_re;
 80105ac:	ed97 7a04 	vldr	s14, [r7, #16]
 80105b0:	edd7 7a02 	vldr	s15, [r7, #8]
 80105b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80105b8:	edd7 6a03 	vldr	s13, [r7, #12]
 80105bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80105c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80105c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80105c8:	4bad      	ldr	r3, [pc, #692]	; (8010880 <setSVM_dq+0x2ec>)
 80105ca:	edc3 7a00 	vstr	s15, [r3]
	y = Vd_ref * sin_theta_re + Vq_ref * cos_theta_re;
 80105ce:	ed97 7a04 	vldr	s14, [r7, #16]
 80105d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80105d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80105da:	edd7 6a03 	vldr	s13, [r7, #12]
 80105de:	edd7 7a02 	vldr	s15, [r7, #8]
 80105e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80105e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80105ea:	4ba6      	ldr	r3, [pc, #664]	; (8010884 <setSVM_dq+0x2f0>)
 80105ec:	edc3 7a00 	vstr	s15, [r3]

	cross0 = refVector[0][0] * y - refVector[0][1] * x;
 80105f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80105f4:	4ba3      	ldr	r3, [pc, #652]	; (8010884 <setSVM_dq+0x2f0>)
 80105f6:	edd3 7a00 	vldr	s15, [r3]
 80105fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80105fe:	eddf 6aa2 	vldr	s13, [pc, #648]	; 8010888 <setSVM_dq+0x2f4>
 8010602:	4b9f      	ldr	r3, [pc, #636]	; (8010880 <setSVM_dq+0x2ec>)
 8010604:	edd3 7a00 	vldr	s15, [r3]
 8010608:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801060c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010610:	4b9e      	ldr	r3, [pc, #632]	; (801088c <setSVM_dq+0x2f8>)
 8010612:	edc3 7a00 	vstr	s15, [r3]
	cross1 = refVector[1][0] * y - refVector[1][1] * x;
 8010616:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801061a:	4b9a      	ldr	r3, [pc, #616]	; (8010884 <setSVM_dq+0x2f0>)
 801061c:	edd3 7a00 	vldr	s15, [r3]
 8010620:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010624:	eddf 6a9a 	vldr	s13, [pc, #616]	; 8010890 <setSVM_dq+0x2fc>
 8010628:	4b95      	ldr	r3, [pc, #596]	; (8010880 <setSVM_dq+0x2ec>)
 801062a:	edd3 7a00 	vldr	s15, [r3]
 801062e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010632:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010636:	4b97      	ldr	r3, [pc, #604]	; (8010894 <setSVM_dq+0x300>)
 8010638:	edc3 7a00 	vstr	s15, [r3]

	if(cross0 >= 0)
 801063c:	4b93      	ldr	r3, [pc, #588]	; (801088c <setSVM_dq+0x2f8>)
 801063e:	edd3 7a00 	vldr	s15, [r3]
 8010642:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801064a:	db1e      	blt.n	801068a <setSVM_dq+0xf6>
	{
		if(cross1 <= 0)				sector_SVM = 0;
 801064c:	4b91      	ldr	r3, [pc, #580]	; (8010894 <setSVM_dq+0x300>)
 801064e:	edd3 7a00 	vldr	s15, [r3]
 8010652:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801065a:	d803      	bhi.n	8010664 <setSVM_dq+0xd0>
 801065c:	4b8e      	ldr	r3, [pc, #568]	; (8010898 <setSVM_dq+0x304>)
 801065e:	2200      	movs	r2, #0
 8010660:	601a      	str	r2, [r3, #0]
 8010662:	e030      	b.n	80106c6 <setSVM_dq+0x132>
		else if(cross0 >= cross1)	sector_SVM = 1;
 8010664:	4b89      	ldr	r3, [pc, #548]	; (801088c <setSVM_dq+0x2f8>)
 8010666:	ed93 7a00 	vldr	s14, [r3]
 801066a:	4b8a      	ldr	r3, [pc, #552]	; (8010894 <setSVM_dq+0x300>)
 801066c:	edd3 7a00 	vldr	s15, [r3]
 8010670:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010678:	db03      	blt.n	8010682 <setSVM_dq+0xee>
 801067a:	4b87      	ldr	r3, [pc, #540]	; (8010898 <setSVM_dq+0x304>)
 801067c:	2201      	movs	r2, #1
 801067e:	601a      	str	r2, [r3, #0]
 8010680:	e021      	b.n	80106c6 <setSVM_dq+0x132>
		else						sector_SVM = 2;
 8010682:	4b85      	ldr	r3, [pc, #532]	; (8010898 <setSVM_dq+0x304>)
 8010684:	2202      	movs	r2, #2
 8010686:	601a      	str	r2, [r3, #0]
 8010688:	e01d      	b.n	80106c6 <setSVM_dq+0x132>
	}
	else
	{
		if(cross1 >= 0)				sector_SVM = 3;
 801068a:	4b82      	ldr	r3, [pc, #520]	; (8010894 <setSVM_dq+0x300>)
 801068c:	edd3 7a00 	vldr	s15, [r3]
 8010690:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010698:	db03      	blt.n	80106a2 <setSVM_dq+0x10e>
 801069a:	4b7f      	ldr	r3, [pc, #508]	; (8010898 <setSVM_dq+0x304>)
 801069c:	2203      	movs	r2, #3
 801069e:	601a      	str	r2, [r3, #0]
 80106a0:	e011      	b.n	80106c6 <setSVM_dq+0x132>
		else if(cross0 <= cross1)	sector_SVM = 4;
 80106a2:	4b7a      	ldr	r3, [pc, #488]	; (801088c <setSVM_dq+0x2f8>)
 80106a4:	ed93 7a00 	vldr	s14, [r3]
 80106a8:	4b7a      	ldr	r3, [pc, #488]	; (8010894 <setSVM_dq+0x300>)
 80106aa:	edd3 7a00 	vldr	s15, [r3]
 80106ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80106b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106b6:	d803      	bhi.n	80106c0 <setSVM_dq+0x12c>
 80106b8:	4b77      	ldr	r3, [pc, #476]	; (8010898 <setSVM_dq+0x304>)
 80106ba:	2204      	movs	r2, #4
 80106bc:	601a      	str	r2, [r3, #0]
 80106be:	e002      	b.n	80106c6 <setSVM_dq+0x132>
		else						sector_SVM = 5;
 80106c0:	4b75      	ldr	r3, [pc, #468]	; (8010898 <setSVM_dq+0x304>)
 80106c2:	2205      	movs	r2, #5
 80106c4:	601a      	str	r2, [r3, #0]
	}

	x1 = refVector[sector_SVM][0];
 80106c6:	4b74      	ldr	r3, [pc, #464]	; (8010898 <setSVM_dq+0x304>)
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	4a74      	ldr	r2, [pc, #464]	; (801089c <setSVM_dq+0x308>)
 80106cc:	00db      	lsls	r3, r3, #3
 80106ce:	4413      	add	r3, r2
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	4a73      	ldr	r2, [pc, #460]	; (80108a0 <setSVM_dq+0x30c>)
 80106d4:	6013      	str	r3, [r2, #0]
	y1 = refVector[sector_SVM][1];
 80106d6:	4b70      	ldr	r3, [pc, #448]	; (8010898 <setSVM_dq+0x304>)
 80106d8:	681b      	ldr	r3, [r3, #0]
 80106da:	4a70      	ldr	r2, [pc, #448]	; (801089c <setSVM_dq+0x308>)
 80106dc:	00db      	lsls	r3, r3, #3
 80106de:	4413      	add	r3, r2
 80106e0:	3304      	adds	r3, #4
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	4a6f      	ldr	r2, [pc, #444]	; (80108a4 <setSVM_dq+0x310>)
 80106e6:	6013      	str	r3, [r2, #0]
	x2 = refVector[sector_SVM + 1][0];
 80106e8:	4b6b      	ldr	r3, [pc, #428]	; (8010898 <setSVM_dq+0x304>)
 80106ea:	681b      	ldr	r3, [r3, #0]
 80106ec:	3301      	adds	r3, #1
 80106ee:	4a6b      	ldr	r2, [pc, #428]	; (801089c <setSVM_dq+0x308>)
 80106f0:	00db      	lsls	r3, r3, #3
 80106f2:	4413      	add	r3, r2
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	4a6c      	ldr	r2, [pc, #432]	; (80108a8 <setSVM_dq+0x314>)
 80106f8:	6013      	str	r3, [r2, #0]
	y2 = refVector[sector_SVM + 1][1];
 80106fa:	4b67      	ldr	r3, [pc, #412]	; (8010898 <setSVM_dq+0x304>)
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	3301      	adds	r3, #1
 8010700:	4a66      	ldr	r2, [pc, #408]	; (801089c <setSVM_dq+0x308>)
 8010702:	00db      	lsls	r3, r3, #3
 8010704:	4413      	add	r3, r2
 8010706:	3304      	adds	r3, #4
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	4a68      	ldr	r2, [pc, #416]	; (80108ac <setSVM_dq+0x318>)
 801070c:	6013      	str	r3, [r2, #0]

	vect1 = (y2 * x - x2 * y) / ((x1 * y2 - y1 * x2) * Vdc);
 801070e:	4b67      	ldr	r3, [pc, #412]	; (80108ac <setSVM_dq+0x318>)
 8010710:	ed93 7a00 	vldr	s14, [r3]
 8010714:	4b5a      	ldr	r3, [pc, #360]	; (8010880 <setSVM_dq+0x2ec>)
 8010716:	edd3 7a00 	vldr	s15, [r3]
 801071a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801071e:	4b62      	ldr	r3, [pc, #392]	; (80108a8 <setSVM_dq+0x314>)
 8010720:	edd3 6a00 	vldr	s13, [r3]
 8010724:	4b57      	ldr	r3, [pc, #348]	; (8010884 <setSVM_dq+0x2f0>)
 8010726:	edd3 7a00 	vldr	s15, [r3]
 801072a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801072e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8010732:	4b5b      	ldr	r3, [pc, #364]	; (80108a0 <setSVM_dq+0x30c>)
 8010734:	ed93 7a00 	vldr	s14, [r3]
 8010738:	4b5c      	ldr	r3, [pc, #368]	; (80108ac <setSVM_dq+0x318>)
 801073a:	edd3 7a00 	vldr	s15, [r3]
 801073e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010742:	4b58      	ldr	r3, [pc, #352]	; (80108a4 <setSVM_dq+0x310>)
 8010744:	ed93 6a00 	vldr	s12, [r3]
 8010748:	4b57      	ldr	r3, [pc, #348]	; (80108a8 <setSVM_dq+0x314>)
 801074a:	edd3 7a00 	vldr	s15, [r3]
 801074e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8010752:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010756:	4b56      	ldr	r3, [pc, #344]	; (80108b0 <setSVM_dq+0x31c>)
 8010758:	edd3 7a00 	vldr	s15, [r3]
 801075c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010760:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010764:	4b53      	ldr	r3, [pc, #332]	; (80108b4 <setSVM_dq+0x320>)
 8010766:	edc3 7a00 	vstr	s15, [r3]
	vect2 = (-y1 * x + x1 * y) / ((x1 * y2 - y1 * x2) * Vdc);
 801076a:	4b4e      	ldr	r3, [pc, #312]	; (80108a4 <setSVM_dq+0x310>)
 801076c:	edd3 7a00 	vldr	s15, [r3]
 8010770:	eeb1 7a67 	vneg.f32	s14, s15
 8010774:	4b42      	ldr	r3, [pc, #264]	; (8010880 <setSVM_dq+0x2ec>)
 8010776:	edd3 7a00 	vldr	s15, [r3]
 801077a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801077e:	4b48      	ldr	r3, [pc, #288]	; (80108a0 <setSVM_dq+0x30c>)
 8010780:	edd3 6a00 	vldr	s13, [r3]
 8010784:	4b3f      	ldr	r3, [pc, #252]	; (8010884 <setSVM_dq+0x2f0>)
 8010786:	edd3 7a00 	vldr	s15, [r3]
 801078a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801078e:	ee77 6a27 	vadd.f32	s13, s14, s15
 8010792:	4b43      	ldr	r3, [pc, #268]	; (80108a0 <setSVM_dq+0x30c>)
 8010794:	ed93 7a00 	vldr	s14, [r3]
 8010798:	4b44      	ldr	r3, [pc, #272]	; (80108ac <setSVM_dq+0x318>)
 801079a:	edd3 7a00 	vldr	s15, [r3]
 801079e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80107a2:	4b40      	ldr	r3, [pc, #256]	; (80108a4 <setSVM_dq+0x310>)
 80107a4:	ed93 6a00 	vldr	s12, [r3]
 80107a8:	4b3f      	ldr	r3, [pc, #252]	; (80108a8 <setSVM_dq+0x314>)
 80107aa:	edd3 7a00 	vldr	s15, [r3]
 80107ae:	ee66 7a27 	vmul.f32	s15, s12, s15
 80107b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80107b6:	4b3e      	ldr	r3, [pc, #248]	; (80108b0 <setSVM_dq+0x31c>)
 80107b8:	edd3 7a00 	vldr	s15, [r3]
 80107bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80107c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80107c4:	4b3c      	ldr	r3, [pc, #240]	; (80108b8 <setSVM_dq+0x324>)
 80107c6:	edc3 7a00 	vstr	s15, [r3]

	switch(sector_SVM)
 80107ca:	4b33      	ldr	r3, [pc, #204]	; (8010898 <setSVM_dq+0x304>)
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	2b05      	cmp	r3, #5
 80107d0:	f200 81d8 	bhi.w	8010b84 <setSVM_dq+0x5f0>
 80107d4:	a201      	add	r2, pc, #4	; (adr r2, 80107dc <setSVM_dq+0x248>)
 80107d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107da:	bf00      	nop
 80107dc:	080107f5 	.word	0x080107f5
 80107e0:	080108c9 	.word	0x080108c9
 80107e4:	08010955 	.word	0x08010955
 80107e8:	080109e1 	.word	0x080109e1
 80107ec:	08010a6d 	.word	0x08010a6d
 80107f0:	08010af9 	.word	0x08010af9
	{
	case 0: duty[2] = (1.0 - vect1 - vect2) * 0.5f; 	duty[1] = duty[2] + vect2; 	duty[0] = duty[1] + vect1;  break;
 80107f4:	4b2f      	ldr	r3, [pc, #188]	; (80108b4 <setSVM_dq+0x320>)
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	4618      	mov	r0, r3
 80107fa:	f7f7 fdd5 	bl	80083a8 <__aeabi_f2d>
 80107fe:	4603      	mov	r3, r0
 8010800:	460c      	mov	r4, r1
 8010802:	461a      	mov	r2, r3
 8010804:	4623      	mov	r3, r4
 8010806:	f04f 0000 	mov.w	r0, #0
 801080a:	492c      	ldr	r1, [pc, #176]	; (80108bc <setSVM_dq+0x328>)
 801080c:	f7f7 fc6c 	bl	80080e8 <__aeabi_dsub>
 8010810:	4603      	mov	r3, r0
 8010812:	460c      	mov	r4, r1
 8010814:	4625      	mov	r5, r4
 8010816:	461c      	mov	r4, r3
 8010818:	4b27      	ldr	r3, [pc, #156]	; (80108b8 <setSVM_dq+0x324>)
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	4618      	mov	r0, r3
 801081e:	f7f7 fdc3 	bl	80083a8 <__aeabi_f2d>
 8010822:	4602      	mov	r2, r0
 8010824:	460b      	mov	r3, r1
 8010826:	4620      	mov	r0, r4
 8010828:	4629      	mov	r1, r5
 801082a:	f7f7 fc5d 	bl	80080e8 <__aeabi_dsub>
 801082e:	4603      	mov	r3, r0
 8010830:	460c      	mov	r4, r1
 8010832:	4618      	mov	r0, r3
 8010834:	4621      	mov	r1, r4
 8010836:	f04f 0200 	mov.w	r2, #0
 801083a:	4b21      	ldr	r3, [pc, #132]	; (80108c0 <setSVM_dq+0x32c>)
 801083c:	f7f7 fe0c 	bl	8008458 <__aeabi_dmul>
 8010840:	4603      	mov	r3, r0
 8010842:	460c      	mov	r4, r1
 8010844:	4618      	mov	r0, r3
 8010846:	4621      	mov	r1, r4
 8010848:	f7f8 f8de 	bl	8008a08 <__aeabi_d2f>
 801084c:	4602      	mov	r2, r0
 801084e:	4b1d      	ldr	r3, [pc, #116]	; (80108c4 <setSVM_dq+0x330>)
 8010850:	609a      	str	r2, [r3, #8]
 8010852:	4b1c      	ldr	r3, [pc, #112]	; (80108c4 <setSVM_dq+0x330>)
 8010854:	ed93 7a02 	vldr	s14, [r3, #8]
 8010858:	4b17      	ldr	r3, [pc, #92]	; (80108b8 <setSVM_dq+0x324>)
 801085a:	edd3 7a00 	vldr	s15, [r3]
 801085e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010862:	4b18      	ldr	r3, [pc, #96]	; (80108c4 <setSVM_dq+0x330>)
 8010864:	edc3 7a01 	vstr	s15, [r3, #4]
 8010868:	4b16      	ldr	r3, [pc, #88]	; (80108c4 <setSVM_dq+0x330>)
 801086a:	ed93 7a01 	vldr	s14, [r3, #4]
 801086e:	4b11      	ldr	r3, [pc, #68]	; (80108b4 <setSVM_dq+0x320>)
 8010870:	edd3 7a00 	vldr	s15, [r3]
 8010874:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010878:	4b12      	ldr	r3, [pc, #72]	; (80108c4 <setSVM_dq+0x330>)
 801087a:	edc3 7a00 	vstr	s15, [r3]
 801087e:	e181      	b.n	8010b84 <setSVM_dq+0x5f0>
 8010880:	20004100 	.word	0x20004100
 8010884:	20004104 	.word	0x20004104
 8010888:	00000000 	.word	0x00000000
 801088c:	20004108 	.word	0x20004108
 8010890:	3f5db22d 	.word	0x3f5db22d
 8010894:	2000410c 	.word	0x2000410c
 8010898:	200040fc 	.word	0x200040fc
 801089c:	08012c20 	.word	0x08012c20
 80108a0:	20004110 	.word	0x20004110
 80108a4:	20004114 	.word	0x20004114
 80108a8:	20004118 	.word	0x20004118
 80108ac:	2000411c 	.word	0x2000411c
 80108b0:	20000014 	.word	0x20000014
 80108b4:	20004120 	.word	0x20004120
 80108b8:	20004124 	.word	0x20004124
 80108bc:	3ff00000 	.word	0x3ff00000
 80108c0:	3fe00000 	.word	0x3fe00000
 80108c4:	20004128 	.word	0x20004128
	case 1: duty[2] = (1.0 - vect1 - vect2) * 0.5f; 	duty[0] = duty[2] + vect1; 	duty[1] = duty[0] + vect2; 	break;
 80108c8:	4bc3      	ldr	r3, [pc, #780]	; (8010bd8 <setSVM_dq+0x644>)
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	4618      	mov	r0, r3
 80108ce:	f7f7 fd6b 	bl	80083a8 <__aeabi_f2d>
 80108d2:	4603      	mov	r3, r0
 80108d4:	460c      	mov	r4, r1
 80108d6:	461a      	mov	r2, r3
 80108d8:	4623      	mov	r3, r4
 80108da:	f04f 0000 	mov.w	r0, #0
 80108de:	49bf      	ldr	r1, [pc, #764]	; (8010bdc <setSVM_dq+0x648>)
 80108e0:	f7f7 fc02 	bl	80080e8 <__aeabi_dsub>
 80108e4:	4603      	mov	r3, r0
 80108e6:	460c      	mov	r4, r1
 80108e8:	4625      	mov	r5, r4
 80108ea:	461c      	mov	r4, r3
 80108ec:	4bbc      	ldr	r3, [pc, #752]	; (8010be0 <setSVM_dq+0x64c>)
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	4618      	mov	r0, r3
 80108f2:	f7f7 fd59 	bl	80083a8 <__aeabi_f2d>
 80108f6:	4602      	mov	r2, r0
 80108f8:	460b      	mov	r3, r1
 80108fa:	4620      	mov	r0, r4
 80108fc:	4629      	mov	r1, r5
 80108fe:	f7f7 fbf3 	bl	80080e8 <__aeabi_dsub>
 8010902:	4603      	mov	r3, r0
 8010904:	460c      	mov	r4, r1
 8010906:	4618      	mov	r0, r3
 8010908:	4621      	mov	r1, r4
 801090a:	f04f 0200 	mov.w	r2, #0
 801090e:	4bb5      	ldr	r3, [pc, #724]	; (8010be4 <setSVM_dq+0x650>)
 8010910:	f7f7 fda2 	bl	8008458 <__aeabi_dmul>
 8010914:	4603      	mov	r3, r0
 8010916:	460c      	mov	r4, r1
 8010918:	4618      	mov	r0, r3
 801091a:	4621      	mov	r1, r4
 801091c:	f7f8 f874 	bl	8008a08 <__aeabi_d2f>
 8010920:	4602      	mov	r2, r0
 8010922:	4bb1      	ldr	r3, [pc, #708]	; (8010be8 <setSVM_dq+0x654>)
 8010924:	609a      	str	r2, [r3, #8]
 8010926:	4bb0      	ldr	r3, [pc, #704]	; (8010be8 <setSVM_dq+0x654>)
 8010928:	ed93 7a02 	vldr	s14, [r3, #8]
 801092c:	4baa      	ldr	r3, [pc, #680]	; (8010bd8 <setSVM_dq+0x644>)
 801092e:	edd3 7a00 	vldr	s15, [r3]
 8010932:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010936:	4bac      	ldr	r3, [pc, #688]	; (8010be8 <setSVM_dq+0x654>)
 8010938:	edc3 7a00 	vstr	s15, [r3]
 801093c:	4baa      	ldr	r3, [pc, #680]	; (8010be8 <setSVM_dq+0x654>)
 801093e:	ed93 7a00 	vldr	s14, [r3]
 8010942:	4ba7      	ldr	r3, [pc, #668]	; (8010be0 <setSVM_dq+0x64c>)
 8010944:	edd3 7a00 	vldr	s15, [r3]
 8010948:	ee77 7a27 	vadd.f32	s15, s14, s15
 801094c:	4ba6      	ldr	r3, [pc, #664]	; (8010be8 <setSVM_dq+0x654>)
 801094e:	edc3 7a01 	vstr	s15, [r3, #4]
 8010952:	e117      	b.n	8010b84 <setSVM_dq+0x5f0>
	case 2: duty[0] = (1.0 - vect1 - vect2) * 0.5f; 	duty[2] = duty[0] + vect2; 	duty[1] = duty[2] + vect1; 	break;
 8010954:	4ba0      	ldr	r3, [pc, #640]	; (8010bd8 <setSVM_dq+0x644>)
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	4618      	mov	r0, r3
 801095a:	f7f7 fd25 	bl	80083a8 <__aeabi_f2d>
 801095e:	4603      	mov	r3, r0
 8010960:	460c      	mov	r4, r1
 8010962:	461a      	mov	r2, r3
 8010964:	4623      	mov	r3, r4
 8010966:	f04f 0000 	mov.w	r0, #0
 801096a:	499c      	ldr	r1, [pc, #624]	; (8010bdc <setSVM_dq+0x648>)
 801096c:	f7f7 fbbc 	bl	80080e8 <__aeabi_dsub>
 8010970:	4603      	mov	r3, r0
 8010972:	460c      	mov	r4, r1
 8010974:	4625      	mov	r5, r4
 8010976:	461c      	mov	r4, r3
 8010978:	4b99      	ldr	r3, [pc, #612]	; (8010be0 <setSVM_dq+0x64c>)
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	4618      	mov	r0, r3
 801097e:	f7f7 fd13 	bl	80083a8 <__aeabi_f2d>
 8010982:	4602      	mov	r2, r0
 8010984:	460b      	mov	r3, r1
 8010986:	4620      	mov	r0, r4
 8010988:	4629      	mov	r1, r5
 801098a:	f7f7 fbad 	bl	80080e8 <__aeabi_dsub>
 801098e:	4603      	mov	r3, r0
 8010990:	460c      	mov	r4, r1
 8010992:	4618      	mov	r0, r3
 8010994:	4621      	mov	r1, r4
 8010996:	f04f 0200 	mov.w	r2, #0
 801099a:	4b92      	ldr	r3, [pc, #584]	; (8010be4 <setSVM_dq+0x650>)
 801099c:	f7f7 fd5c 	bl	8008458 <__aeabi_dmul>
 80109a0:	4603      	mov	r3, r0
 80109a2:	460c      	mov	r4, r1
 80109a4:	4618      	mov	r0, r3
 80109a6:	4621      	mov	r1, r4
 80109a8:	f7f8 f82e 	bl	8008a08 <__aeabi_d2f>
 80109ac:	4602      	mov	r2, r0
 80109ae:	4b8e      	ldr	r3, [pc, #568]	; (8010be8 <setSVM_dq+0x654>)
 80109b0:	601a      	str	r2, [r3, #0]
 80109b2:	4b8d      	ldr	r3, [pc, #564]	; (8010be8 <setSVM_dq+0x654>)
 80109b4:	ed93 7a00 	vldr	s14, [r3]
 80109b8:	4b89      	ldr	r3, [pc, #548]	; (8010be0 <setSVM_dq+0x64c>)
 80109ba:	edd3 7a00 	vldr	s15, [r3]
 80109be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80109c2:	4b89      	ldr	r3, [pc, #548]	; (8010be8 <setSVM_dq+0x654>)
 80109c4:	edc3 7a02 	vstr	s15, [r3, #8]
 80109c8:	4b87      	ldr	r3, [pc, #540]	; (8010be8 <setSVM_dq+0x654>)
 80109ca:	ed93 7a02 	vldr	s14, [r3, #8]
 80109ce:	4b82      	ldr	r3, [pc, #520]	; (8010bd8 <setSVM_dq+0x644>)
 80109d0:	edd3 7a00 	vldr	s15, [r3]
 80109d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80109d8:	4b83      	ldr	r3, [pc, #524]	; (8010be8 <setSVM_dq+0x654>)
 80109da:	edc3 7a01 	vstr	s15, [r3, #4]
 80109de:	e0d1      	b.n	8010b84 <setSVM_dq+0x5f0>
	case 3: duty[0] = (1.0 - vect1 - vect2) * 0.5f; 	duty[1] = duty[0] + vect1; 	duty[2] = duty[1] + vect2; 	break;
 80109e0:	4b7d      	ldr	r3, [pc, #500]	; (8010bd8 <setSVM_dq+0x644>)
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	4618      	mov	r0, r3
 80109e6:	f7f7 fcdf 	bl	80083a8 <__aeabi_f2d>
 80109ea:	4603      	mov	r3, r0
 80109ec:	460c      	mov	r4, r1
 80109ee:	461a      	mov	r2, r3
 80109f0:	4623      	mov	r3, r4
 80109f2:	f04f 0000 	mov.w	r0, #0
 80109f6:	4979      	ldr	r1, [pc, #484]	; (8010bdc <setSVM_dq+0x648>)
 80109f8:	f7f7 fb76 	bl	80080e8 <__aeabi_dsub>
 80109fc:	4603      	mov	r3, r0
 80109fe:	460c      	mov	r4, r1
 8010a00:	4625      	mov	r5, r4
 8010a02:	461c      	mov	r4, r3
 8010a04:	4b76      	ldr	r3, [pc, #472]	; (8010be0 <setSVM_dq+0x64c>)
 8010a06:	681b      	ldr	r3, [r3, #0]
 8010a08:	4618      	mov	r0, r3
 8010a0a:	f7f7 fccd 	bl	80083a8 <__aeabi_f2d>
 8010a0e:	4602      	mov	r2, r0
 8010a10:	460b      	mov	r3, r1
 8010a12:	4620      	mov	r0, r4
 8010a14:	4629      	mov	r1, r5
 8010a16:	f7f7 fb67 	bl	80080e8 <__aeabi_dsub>
 8010a1a:	4603      	mov	r3, r0
 8010a1c:	460c      	mov	r4, r1
 8010a1e:	4618      	mov	r0, r3
 8010a20:	4621      	mov	r1, r4
 8010a22:	f04f 0200 	mov.w	r2, #0
 8010a26:	4b6f      	ldr	r3, [pc, #444]	; (8010be4 <setSVM_dq+0x650>)
 8010a28:	f7f7 fd16 	bl	8008458 <__aeabi_dmul>
 8010a2c:	4603      	mov	r3, r0
 8010a2e:	460c      	mov	r4, r1
 8010a30:	4618      	mov	r0, r3
 8010a32:	4621      	mov	r1, r4
 8010a34:	f7f7 ffe8 	bl	8008a08 <__aeabi_d2f>
 8010a38:	4602      	mov	r2, r0
 8010a3a:	4b6b      	ldr	r3, [pc, #428]	; (8010be8 <setSVM_dq+0x654>)
 8010a3c:	601a      	str	r2, [r3, #0]
 8010a3e:	4b6a      	ldr	r3, [pc, #424]	; (8010be8 <setSVM_dq+0x654>)
 8010a40:	ed93 7a00 	vldr	s14, [r3]
 8010a44:	4b64      	ldr	r3, [pc, #400]	; (8010bd8 <setSVM_dq+0x644>)
 8010a46:	edd3 7a00 	vldr	s15, [r3]
 8010a4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010a4e:	4b66      	ldr	r3, [pc, #408]	; (8010be8 <setSVM_dq+0x654>)
 8010a50:	edc3 7a01 	vstr	s15, [r3, #4]
 8010a54:	4b64      	ldr	r3, [pc, #400]	; (8010be8 <setSVM_dq+0x654>)
 8010a56:	ed93 7a01 	vldr	s14, [r3, #4]
 8010a5a:	4b61      	ldr	r3, [pc, #388]	; (8010be0 <setSVM_dq+0x64c>)
 8010a5c:	edd3 7a00 	vldr	s15, [r3]
 8010a60:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010a64:	4b60      	ldr	r3, [pc, #384]	; (8010be8 <setSVM_dq+0x654>)
 8010a66:	edc3 7a02 	vstr	s15, [r3, #8]
 8010a6a:	e08b      	b.n	8010b84 <setSVM_dq+0x5f0>
	case 4: duty[1] = (1.0 - vect1 - vect2) * 0.5f; 	duty[0] = duty[1] + vect2; 	duty[2] = duty[0] + vect1; 	break;
 8010a6c:	4b5a      	ldr	r3, [pc, #360]	; (8010bd8 <setSVM_dq+0x644>)
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	4618      	mov	r0, r3
 8010a72:	f7f7 fc99 	bl	80083a8 <__aeabi_f2d>
 8010a76:	4603      	mov	r3, r0
 8010a78:	460c      	mov	r4, r1
 8010a7a:	461a      	mov	r2, r3
 8010a7c:	4623      	mov	r3, r4
 8010a7e:	f04f 0000 	mov.w	r0, #0
 8010a82:	4956      	ldr	r1, [pc, #344]	; (8010bdc <setSVM_dq+0x648>)
 8010a84:	f7f7 fb30 	bl	80080e8 <__aeabi_dsub>
 8010a88:	4603      	mov	r3, r0
 8010a8a:	460c      	mov	r4, r1
 8010a8c:	4625      	mov	r5, r4
 8010a8e:	461c      	mov	r4, r3
 8010a90:	4b53      	ldr	r3, [pc, #332]	; (8010be0 <setSVM_dq+0x64c>)
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	4618      	mov	r0, r3
 8010a96:	f7f7 fc87 	bl	80083a8 <__aeabi_f2d>
 8010a9a:	4602      	mov	r2, r0
 8010a9c:	460b      	mov	r3, r1
 8010a9e:	4620      	mov	r0, r4
 8010aa0:	4629      	mov	r1, r5
 8010aa2:	f7f7 fb21 	bl	80080e8 <__aeabi_dsub>
 8010aa6:	4603      	mov	r3, r0
 8010aa8:	460c      	mov	r4, r1
 8010aaa:	4618      	mov	r0, r3
 8010aac:	4621      	mov	r1, r4
 8010aae:	f04f 0200 	mov.w	r2, #0
 8010ab2:	4b4c      	ldr	r3, [pc, #304]	; (8010be4 <setSVM_dq+0x650>)
 8010ab4:	f7f7 fcd0 	bl	8008458 <__aeabi_dmul>
 8010ab8:	4603      	mov	r3, r0
 8010aba:	460c      	mov	r4, r1
 8010abc:	4618      	mov	r0, r3
 8010abe:	4621      	mov	r1, r4
 8010ac0:	f7f7 ffa2 	bl	8008a08 <__aeabi_d2f>
 8010ac4:	4602      	mov	r2, r0
 8010ac6:	4b48      	ldr	r3, [pc, #288]	; (8010be8 <setSVM_dq+0x654>)
 8010ac8:	605a      	str	r2, [r3, #4]
 8010aca:	4b47      	ldr	r3, [pc, #284]	; (8010be8 <setSVM_dq+0x654>)
 8010acc:	ed93 7a01 	vldr	s14, [r3, #4]
 8010ad0:	4b43      	ldr	r3, [pc, #268]	; (8010be0 <setSVM_dq+0x64c>)
 8010ad2:	edd3 7a00 	vldr	s15, [r3]
 8010ad6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010ada:	4b43      	ldr	r3, [pc, #268]	; (8010be8 <setSVM_dq+0x654>)
 8010adc:	edc3 7a00 	vstr	s15, [r3]
 8010ae0:	4b41      	ldr	r3, [pc, #260]	; (8010be8 <setSVM_dq+0x654>)
 8010ae2:	ed93 7a00 	vldr	s14, [r3]
 8010ae6:	4b3c      	ldr	r3, [pc, #240]	; (8010bd8 <setSVM_dq+0x644>)
 8010ae8:	edd3 7a00 	vldr	s15, [r3]
 8010aec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010af0:	4b3d      	ldr	r3, [pc, #244]	; (8010be8 <setSVM_dq+0x654>)
 8010af2:	edc3 7a02 	vstr	s15, [r3, #8]
 8010af6:	e045      	b.n	8010b84 <setSVM_dq+0x5f0>
	case 5: duty[1] = (1.0 - vect1 - vect2) * 0.5f; 	duty[2] = duty[1] + vect1; 	duty[0] = duty[2] + vect2; 	break;
 8010af8:	4b37      	ldr	r3, [pc, #220]	; (8010bd8 <setSVM_dq+0x644>)
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	4618      	mov	r0, r3
 8010afe:	f7f7 fc53 	bl	80083a8 <__aeabi_f2d>
 8010b02:	4603      	mov	r3, r0
 8010b04:	460c      	mov	r4, r1
 8010b06:	461a      	mov	r2, r3
 8010b08:	4623      	mov	r3, r4
 8010b0a:	f04f 0000 	mov.w	r0, #0
 8010b0e:	4933      	ldr	r1, [pc, #204]	; (8010bdc <setSVM_dq+0x648>)
 8010b10:	f7f7 faea 	bl	80080e8 <__aeabi_dsub>
 8010b14:	4603      	mov	r3, r0
 8010b16:	460c      	mov	r4, r1
 8010b18:	4625      	mov	r5, r4
 8010b1a:	461c      	mov	r4, r3
 8010b1c:	4b30      	ldr	r3, [pc, #192]	; (8010be0 <setSVM_dq+0x64c>)
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	4618      	mov	r0, r3
 8010b22:	f7f7 fc41 	bl	80083a8 <__aeabi_f2d>
 8010b26:	4602      	mov	r2, r0
 8010b28:	460b      	mov	r3, r1
 8010b2a:	4620      	mov	r0, r4
 8010b2c:	4629      	mov	r1, r5
 8010b2e:	f7f7 fadb 	bl	80080e8 <__aeabi_dsub>
 8010b32:	4603      	mov	r3, r0
 8010b34:	460c      	mov	r4, r1
 8010b36:	4618      	mov	r0, r3
 8010b38:	4621      	mov	r1, r4
 8010b3a:	f04f 0200 	mov.w	r2, #0
 8010b3e:	4b29      	ldr	r3, [pc, #164]	; (8010be4 <setSVM_dq+0x650>)
 8010b40:	f7f7 fc8a 	bl	8008458 <__aeabi_dmul>
 8010b44:	4603      	mov	r3, r0
 8010b46:	460c      	mov	r4, r1
 8010b48:	4618      	mov	r0, r3
 8010b4a:	4621      	mov	r1, r4
 8010b4c:	f7f7 ff5c 	bl	8008a08 <__aeabi_d2f>
 8010b50:	4602      	mov	r2, r0
 8010b52:	4b25      	ldr	r3, [pc, #148]	; (8010be8 <setSVM_dq+0x654>)
 8010b54:	605a      	str	r2, [r3, #4]
 8010b56:	4b24      	ldr	r3, [pc, #144]	; (8010be8 <setSVM_dq+0x654>)
 8010b58:	ed93 7a01 	vldr	s14, [r3, #4]
 8010b5c:	4b1e      	ldr	r3, [pc, #120]	; (8010bd8 <setSVM_dq+0x644>)
 8010b5e:	edd3 7a00 	vldr	s15, [r3]
 8010b62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010b66:	4b20      	ldr	r3, [pc, #128]	; (8010be8 <setSVM_dq+0x654>)
 8010b68:	edc3 7a02 	vstr	s15, [r3, #8]
 8010b6c:	4b1e      	ldr	r3, [pc, #120]	; (8010be8 <setSVM_dq+0x654>)
 8010b6e:	ed93 7a02 	vldr	s14, [r3, #8]
 8010b72:	4b1b      	ldr	r3, [pc, #108]	; (8010be0 <setSVM_dq+0x64c>)
 8010b74:	edd3 7a00 	vldr	s15, [r3]
 8010b78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010b7c:	4b1a      	ldr	r3, [pc, #104]	; (8010be8 <setSVM_dq+0x654>)
 8010b7e:	edc3 7a00 	vstr	s15, [r3]
 8010b82:	bf00      	nop
	}


	if(duty[0] < -1.0f) duty[0] = -1.0f; else if (duty[0] > 1.0f) duty[0] = 1.0f;
 8010b84:	4b18      	ldr	r3, [pc, #96]	; (8010be8 <setSVM_dq+0x654>)
 8010b86:	edd3 7a00 	vldr	s15, [r3]
 8010b8a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8010b8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b96:	d503      	bpl.n	8010ba0 <setSVM_dq+0x60c>
 8010b98:	4b13      	ldr	r3, [pc, #76]	; (8010be8 <setSVM_dq+0x654>)
 8010b9a:	4a14      	ldr	r2, [pc, #80]	; (8010bec <setSVM_dq+0x658>)
 8010b9c:	601a      	str	r2, [r3, #0]
 8010b9e:	e00d      	b.n	8010bbc <setSVM_dq+0x628>
 8010ba0:	4b11      	ldr	r3, [pc, #68]	; (8010be8 <setSVM_dq+0x654>)
 8010ba2:	edd3 7a00 	vldr	s15, [r3]
 8010ba6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010baa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bb2:	dd03      	ble.n	8010bbc <setSVM_dq+0x628>
 8010bb4:	4b0c      	ldr	r3, [pc, #48]	; (8010be8 <setSVM_dq+0x654>)
 8010bb6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8010bba:	601a      	str	r2, [r3, #0]
	if(duty[1] < -1.0f) duty[1] = -1.0f; else if (duty[1] > 1.0f) duty[1] = 1.0f;
 8010bbc:	4b0a      	ldr	r3, [pc, #40]	; (8010be8 <setSVM_dq+0x654>)
 8010bbe:	edd3 7a01 	vldr	s15, [r3, #4]
 8010bc2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8010bc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bce:	d50f      	bpl.n	8010bf0 <setSVM_dq+0x65c>
 8010bd0:	4b05      	ldr	r3, [pc, #20]	; (8010be8 <setSVM_dq+0x654>)
 8010bd2:	4a06      	ldr	r2, [pc, #24]	; (8010bec <setSVM_dq+0x658>)
 8010bd4:	605a      	str	r2, [r3, #4]
 8010bd6:	e019      	b.n	8010c0c <setSVM_dq+0x678>
 8010bd8:	20004120 	.word	0x20004120
 8010bdc:	3ff00000 	.word	0x3ff00000
 8010be0:	20004124 	.word	0x20004124
 8010be4:	3fe00000 	.word	0x3fe00000
 8010be8:	20004128 	.word	0x20004128
 8010bec:	bf800000 	.word	0xbf800000
 8010bf0:	4b3c      	ldr	r3, [pc, #240]	; (8010ce4 <setSVM_dq+0x750>)
 8010bf2:	edd3 7a01 	vldr	s15, [r3, #4]
 8010bf6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010bfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c02:	dd03      	ble.n	8010c0c <setSVM_dq+0x678>
 8010c04:	4b37      	ldr	r3, [pc, #220]	; (8010ce4 <setSVM_dq+0x750>)
 8010c06:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8010c0a:	605a      	str	r2, [r3, #4]
	if(duty[2] < -1.0f) duty[2] = -1.0f; else if (duty[2] > 1.0f) duty[2] = 1.0f;
 8010c0c:	4b35      	ldr	r3, [pc, #212]	; (8010ce4 <setSVM_dq+0x750>)
 8010c0e:	edd3 7a02 	vldr	s15, [r3, #8]
 8010c12:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8010c16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c1e:	d503      	bpl.n	8010c28 <setSVM_dq+0x694>
 8010c20:	4b30      	ldr	r3, [pc, #192]	; (8010ce4 <setSVM_dq+0x750>)
 8010c22:	4a31      	ldr	r2, [pc, #196]	; (8010ce8 <setSVM_dq+0x754>)
 8010c24:	609a      	str	r2, [r3, #8]
 8010c26:	e00d      	b.n	8010c44 <setSVM_dq+0x6b0>
 8010c28:	4b2e      	ldr	r3, [pc, #184]	; (8010ce4 <setSVM_dq+0x750>)
 8010c2a:	edd3 7a02 	vldr	s15, [r3, #8]
 8010c2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010c32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c3a:	dd03      	ble.n	8010c44 <setSVM_dq+0x6b0>
 8010c3c:	4b29      	ldr	r3, [pc, #164]	; (8010ce4 <setSVM_dq+0x750>)
 8010c3e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8010c42:	609a      	str	r2, [r3, #8]

	__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, htim->Init.Period * (1.0f - (amp_u = duty[0])));
 8010c44:	697b      	ldr	r3, [r7, #20]
 8010c46:	68db      	ldr	r3, [r3, #12]
 8010c48:	ee07 3a90 	vmov	s15, r3
 8010c4c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8010c50:	4b24      	ldr	r3, [pc, #144]	; (8010ce4 <setSVM_dq+0x750>)
 8010c52:	edd3 7a00 	vldr	s15, [r3]
 8010c56:	4b25      	ldr	r3, [pc, #148]	; (8010cec <setSVM_dq+0x758>)
 8010c58:	edc3 7a00 	vstr	s15, [r3]
 8010c5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010c60:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8010c64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010c68:	697b      	ldr	r3, [r7, #20]
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010c70:	ee17 2a90 	vmov	r2, s15
 8010c74:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_2, htim->Init.Period * (1.0f - (amp_v = duty[1])));
 8010c76:	697b      	ldr	r3, [r7, #20]
 8010c78:	68db      	ldr	r3, [r3, #12]
 8010c7a:	ee07 3a90 	vmov	s15, r3
 8010c7e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8010c82:	4b18      	ldr	r3, [pc, #96]	; (8010ce4 <setSVM_dq+0x750>)
 8010c84:	edd3 7a01 	vldr	s15, [r3, #4]
 8010c88:	4b19      	ldr	r3, [pc, #100]	; (8010cf0 <setSVM_dq+0x75c>)
 8010c8a:	edc3 7a00 	vstr	s15, [r3]
 8010c8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010c92:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8010c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010c9a:	697b      	ldr	r3, [r7, #20]
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010ca2:	ee17 2a90 	vmov	r2, s15
 8010ca6:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_3, htim->Init.Period * (1.0f - (amp_w = duty[2])));
 8010ca8:	697b      	ldr	r3, [r7, #20]
 8010caa:	68db      	ldr	r3, [r3, #12]
 8010cac:	ee07 3a90 	vmov	s15, r3
 8010cb0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8010cb4:	4b0b      	ldr	r3, [pc, #44]	; (8010ce4 <setSVM_dq+0x750>)
 8010cb6:	edd3 7a02 	vldr	s15, [r3, #8]
 8010cba:	4b0e      	ldr	r3, [pc, #56]	; (8010cf4 <setSVM_dq+0x760>)
 8010cbc:	edc3 7a00 	vstr	s15, [r3]
 8010cc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010cc4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8010cc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010ccc:	697b      	ldr	r3, [r7, #20]
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010cd4:	ee17 2a90 	vmov	r2, s15
 8010cd8:	63da      	str	r2, [r3, #60]	; 0x3c


	return;
 8010cda:	bf00      	nop
}
 8010cdc:	3718      	adds	r7, #24
 8010cde:	46bd      	mov	sp, r7
 8010ce0:	bdb0      	pop	{r4, r5, r7, pc}
 8010ce2:	bf00      	nop
 8010ce4:	20004128 	.word	0x20004128
 8010ce8:	bf800000 	.word	0xbf800000
 8010cec:	20004138 	.word	0x20004138
 8010cf0:	2000413c 	.word	0x2000413c
 8010cf4:	20004140 	.word	0x20004140

08010cf8 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8010cf8:	b580      	push	{r7, lr}
 8010cfa:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8010cfc:	4b18      	ldr	r3, [pc, #96]	; (8010d60 <MX_SPI2_Init+0x68>)
 8010cfe:	4a19      	ldr	r2, [pc, #100]	; (8010d64 <MX_SPI2_Init+0x6c>)
 8010d00:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8010d02:	4b17      	ldr	r3, [pc, #92]	; (8010d60 <MX_SPI2_Init+0x68>)
 8010d04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8010d08:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8010d0a:	4b15      	ldr	r3, [pc, #84]	; (8010d60 <MX_SPI2_Init+0x68>)
 8010d0c:	2200      	movs	r2, #0
 8010d0e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8010d10:	4b13      	ldr	r3, [pc, #76]	; (8010d60 <MX_SPI2_Init+0x68>)
 8010d12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010d16:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8010d18:	4b11      	ldr	r3, [pc, #68]	; (8010d60 <MX_SPI2_Init+0x68>)
 8010d1a:	2200      	movs	r2, #0
 8010d1c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8010d1e:	4b10      	ldr	r3, [pc, #64]	; (8010d60 <MX_SPI2_Init+0x68>)
 8010d20:	2201      	movs	r2, #1
 8010d22:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8010d24:	4b0e      	ldr	r3, [pc, #56]	; (8010d60 <MX_SPI2_Init+0x68>)
 8010d26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010d2a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8010d2c:	4b0c      	ldr	r3, [pc, #48]	; (8010d60 <MX_SPI2_Init+0x68>)
 8010d2e:	2218      	movs	r2, #24
 8010d30:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8010d32:	4b0b      	ldr	r3, [pc, #44]	; (8010d60 <MX_SPI2_Init+0x68>)
 8010d34:	2200      	movs	r2, #0
 8010d36:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8010d38:	4b09      	ldr	r3, [pc, #36]	; (8010d60 <MX_SPI2_Init+0x68>)
 8010d3a:	2200      	movs	r2, #0
 8010d3c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010d3e:	4b08      	ldr	r3, [pc, #32]	; (8010d60 <MX_SPI2_Init+0x68>)
 8010d40:	2200      	movs	r2, #0
 8010d42:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8010d44:	4b06      	ldr	r3, [pc, #24]	; (8010d60 <MX_SPI2_Init+0x68>)
 8010d46:	220a      	movs	r2, #10
 8010d48:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8010d4a:	4805      	ldr	r0, [pc, #20]	; (8010d60 <MX_SPI2_Init+0x68>)
 8010d4c:	f7fb f8a4 	bl	800be98 <HAL_SPI_Init>
 8010d50:	4603      	mov	r3, r0
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d001      	beq.n	8010d5a <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8010d56:	f7ff fbd5 	bl	8010504 <Error_Handler>
  }

}
 8010d5a:	bf00      	nop
 8010d5c:	bd80      	pop	{r7, pc}
 8010d5e:	bf00      	nop
 8010d60:	200044f8 	.word	0x200044f8
 8010d64:	40003800 	.word	0x40003800

08010d68 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8010d68:	b580      	push	{r7, lr}
 8010d6a:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8010d6c:	4b17      	ldr	r3, [pc, #92]	; (8010dcc <MX_SPI3_Init+0x64>)
 8010d6e:	4a18      	ldr	r2, [pc, #96]	; (8010dd0 <MX_SPI3_Init+0x68>)
 8010d70:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8010d72:	4b16      	ldr	r3, [pc, #88]	; (8010dcc <MX_SPI3_Init+0x64>)
 8010d74:	f44f 7282 	mov.w	r2, #260	; 0x104
 8010d78:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8010d7a:	4b14      	ldr	r3, [pc, #80]	; (8010dcc <MX_SPI3_Init+0x64>)
 8010d7c:	2200      	movs	r2, #0
 8010d7e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8010d80:	4b12      	ldr	r3, [pc, #72]	; (8010dcc <MX_SPI3_Init+0x64>)
 8010d82:	2200      	movs	r2, #0
 8010d84:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8010d86:	4b11      	ldr	r3, [pc, #68]	; (8010dcc <MX_SPI3_Init+0x64>)
 8010d88:	2200      	movs	r2, #0
 8010d8a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8010d8c:	4b0f      	ldr	r3, [pc, #60]	; (8010dcc <MX_SPI3_Init+0x64>)
 8010d8e:	2200      	movs	r2, #0
 8010d90:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8010d92:	4b0e      	ldr	r3, [pc, #56]	; (8010dcc <MX_SPI3_Init+0x64>)
 8010d94:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8010d98:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8010d9a:	4b0c      	ldr	r3, [pc, #48]	; (8010dcc <MX_SPI3_Init+0x64>)
 8010d9c:	2200      	movs	r2, #0
 8010d9e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8010da0:	4b0a      	ldr	r3, [pc, #40]	; (8010dcc <MX_SPI3_Init+0x64>)
 8010da2:	2200      	movs	r2, #0
 8010da4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8010da6:	4b09      	ldr	r3, [pc, #36]	; (8010dcc <MX_SPI3_Init+0x64>)
 8010da8:	2200      	movs	r2, #0
 8010daa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8010dac:	4b07      	ldr	r3, [pc, #28]	; (8010dcc <MX_SPI3_Init+0x64>)
 8010dae:	2200      	movs	r2, #0
 8010db0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8010db2:	4b06      	ldr	r3, [pc, #24]	; (8010dcc <MX_SPI3_Init+0x64>)
 8010db4:	220a      	movs	r2, #10
 8010db6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8010db8:	4804      	ldr	r0, [pc, #16]	; (8010dcc <MX_SPI3_Init+0x64>)
 8010dba:	f7fb f86d 	bl	800be98 <HAL_SPI_Init>
 8010dbe:	4603      	mov	r3, r0
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d001      	beq.n	8010dc8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8010dc4:	f7ff fb9e 	bl	8010504 <Error_Handler>
  }

}
 8010dc8:	bf00      	nop
 8010dca:	bd80      	pop	{r7, pc}
 8010dcc:	20004550 	.word	0x20004550
 8010dd0:	40003c00 	.word	0x40003c00

08010dd4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8010dd4:	b580      	push	{r7, lr}
 8010dd6:	b08e      	sub	sp, #56	; 0x38
 8010dd8:	af00      	add	r7, sp, #0
 8010dda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010ddc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010de0:	2200      	movs	r2, #0
 8010de2:	601a      	str	r2, [r3, #0]
 8010de4:	605a      	str	r2, [r3, #4]
 8010de6:	609a      	str	r2, [r3, #8]
 8010de8:	60da      	str	r2, [r3, #12]
 8010dea:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	4a6c      	ldr	r2, [pc, #432]	; (8010fa4 <HAL_SPI_MspInit+0x1d0>)
 8010df2:	4293      	cmp	r3, r2
 8010df4:	d163      	bne.n	8010ebe <HAL_SPI_MspInit+0xea>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8010df6:	2300      	movs	r3, #0
 8010df8:	623b      	str	r3, [r7, #32]
 8010dfa:	4b6b      	ldr	r3, [pc, #428]	; (8010fa8 <HAL_SPI_MspInit+0x1d4>)
 8010dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010dfe:	4a6a      	ldr	r2, [pc, #424]	; (8010fa8 <HAL_SPI_MspInit+0x1d4>)
 8010e00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010e04:	6413      	str	r3, [r2, #64]	; 0x40
 8010e06:	4b68      	ldr	r3, [pc, #416]	; (8010fa8 <HAL_SPI_MspInit+0x1d4>)
 8010e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010e0e:	623b      	str	r3, [r7, #32]
 8010e10:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010e12:	2300      	movs	r3, #0
 8010e14:	61fb      	str	r3, [r7, #28]
 8010e16:	4b64      	ldr	r3, [pc, #400]	; (8010fa8 <HAL_SPI_MspInit+0x1d4>)
 8010e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e1a:	4a63      	ldr	r2, [pc, #396]	; (8010fa8 <HAL_SPI_MspInit+0x1d4>)
 8010e1c:	f043 0304 	orr.w	r3, r3, #4
 8010e20:	6313      	str	r3, [r2, #48]	; 0x30
 8010e22:	4b61      	ldr	r3, [pc, #388]	; (8010fa8 <HAL_SPI_MspInit+0x1d4>)
 8010e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e26:	f003 0304 	and.w	r3, r3, #4
 8010e2a:	61fb      	str	r3, [r7, #28]
 8010e2c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010e2e:	2300      	movs	r3, #0
 8010e30:	61bb      	str	r3, [r7, #24]
 8010e32:	4b5d      	ldr	r3, [pc, #372]	; (8010fa8 <HAL_SPI_MspInit+0x1d4>)
 8010e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e36:	4a5c      	ldr	r2, [pc, #368]	; (8010fa8 <HAL_SPI_MspInit+0x1d4>)
 8010e38:	f043 0302 	orr.w	r3, r3, #2
 8010e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8010e3e:	4b5a      	ldr	r3, [pc, #360]	; (8010fa8 <HAL_SPI_MspInit+0x1d4>)
 8010e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010e42:	f003 0302 	and.w	r3, r3, #2
 8010e46:	61bb      	str	r3, [r7, #24]
 8010e48:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration    
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8010e4a:	2302      	movs	r3, #2
 8010e4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010e4e:	2302      	movs	r3, #2
 8010e50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010e52:	2300      	movs	r3, #0
 8010e54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010e56:	2303      	movs	r3, #3
 8010e58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8010e5a:	2307      	movs	r3, #7
 8010e5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010e5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010e62:	4619      	mov	r1, r3
 8010e64:	4851      	ldr	r0, [pc, #324]	; (8010fac <HAL_SPI_MspInit+0x1d8>)
 8010e66:	f7fa f929 	bl	800b0bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8010e6a:	2304      	movs	r3, #4
 8010e6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010e6e:	2302      	movs	r3, #2
 8010e70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010e72:	2300      	movs	r3, #0
 8010e74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010e76:	2303      	movs	r3, #3
 8010e78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8010e7a:	2305      	movs	r3, #5
 8010e7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010e7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010e82:	4619      	mov	r1, r3
 8010e84:	4849      	ldr	r0, [pc, #292]	; (8010fac <HAL_SPI_MspInit+0x1d8>)
 8010e86:	f7fa f919 	bl	800b0bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8010e8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010e8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010e90:	2302      	movs	r3, #2
 8010e92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010e94:	2300      	movs	r3, #0
 8010e96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010e98:	2303      	movs	r3, #3
 8010e9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8010e9c:	2305      	movs	r3, #5
 8010e9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010ea0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010ea4:	4619      	mov	r1, r3
 8010ea6:	4842      	ldr	r0, [pc, #264]	; (8010fb0 <HAL_SPI_MspInit+0x1dc>)
 8010ea8:	f7fa f908 	bl	800b0bc <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8010eac:	2200      	movs	r2, #0
 8010eae:	2100      	movs	r1, #0
 8010eb0:	2024      	movs	r0, #36	; 0x24
 8010eb2:	f7f9 fa50 	bl	800a356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8010eb6:	2024      	movs	r0, #36	; 0x24
 8010eb8:	f7f9 fa69 	bl	800a38e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8010ebc:	e06e      	b.n	8010f9c <HAL_SPI_MspInit+0x1c8>
  else if(spiHandle->Instance==SPI3)
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	681b      	ldr	r3, [r3, #0]
 8010ec2:	4a3c      	ldr	r2, [pc, #240]	; (8010fb4 <HAL_SPI_MspInit+0x1e0>)
 8010ec4:	4293      	cmp	r3, r2
 8010ec6:	d169      	bne.n	8010f9c <HAL_SPI_MspInit+0x1c8>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8010ec8:	2300      	movs	r3, #0
 8010eca:	617b      	str	r3, [r7, #20]
 8010ecc:	4b36      	ldr	r3, [pc, #216]	; (8010fa8 <HAL_SPI_MspInit+0x1d4>)
 8010ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ed0:	4a35      	ldr	r2, [pc, #212]	; (8010fa8 <HAL_SPI_MspInit+0x1d4>)
 8010ed2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010ed6:	6413      	str	r3, [r2, #64]	; 0x40
 8010ed8:	4b33      	ldr	r3, [pc, #204]	; (8010fa8 <HAL_SPI_MspInit+0x1d4>)
 8010eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010edc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010ee0:	617b      	str	r3, [r7, #20]
 8010ee2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	613b      	str	r3, [r7, #16]
 8010ee8:	4b2f      	ldr	r3, [pc, #188]	; (8010fa8 <HAL_SPI_MspInit+0x1d4>)
 8010eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010eec:	4a2e      	ldr	r2, [pc, #184]	; (8010fa8 <HAL_SPI_MspInit+0x1d4>)
 8010eee:	f043 0302 	orr.w	r3, r3, #2
 8010ef2:	6313      	str	r3, [r2, #48]	; 0x30
 8010ef4:	4b2c      	ldr	r3, [pc, #176]	; (8010fa8 <HAL_SPI_MspInit+0x1d4>)
 8010ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ef8:	f003 0302 	and.w	r3, r3, #2
 8010efc:	613b      	str	r3, [r7, #16]
 8010efe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010f00:	2300      	movs	r3, #0
 8010f02:	60fb      	str	r3, [r7, #12]
 8010f04:	4b28      	ldr	r3, [pc, #160]	; (8010fa8 <HAL_SPI_MspInit+0x1d4>)
 8010f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f08:	4a27      	ldr	r2, [pc, #156]	; (8010fa8 <HAL_SPI_MspInit+0x1d4>)
 8010f0a:	f043 0301 	orr.w	r3, r3, #1
 8010f0e:	6313      	str	r3, [r2, #48]	; 0x30
 8010f10:	4b25      	ldr	r3, [pc, #148]	; (8010fa8 <HAL_SPI_MspInit+0x1d4>)
 8010f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f14:	f003 0301 	and.w	r3, r3, #1
 8010f18:	60fb      	str	r3, [r7, #12]
 8010f1a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010f1c:	2300      	movs	r3, #0
 8010f1e:	60bb      	str	r3, [r7, #8]
 8010f20:	4b21      	ldr	r3, [pc, #132]	; (8010fa8 <HAL_SPI_MspInit+0x1d4>)
 8010f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f24:	4a20      	ldr	r2, [pc, #128]	; (8010fa8 <HAL_SPI_MspInit+0x1d4>)
 8010f26:	f043 0304 	orr.w	r3, r3, #4
 8010f2a:	6313      	str	r3, [r2, #48]	; 0x30
 8010f2c:	4b1e      	ldr	r3, [pc, #120]	; (8010fa8 <HAL_SPI_MspInit+0x1d4>)
 8010f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f30:	f003 0304 	and.w	r3, r3, #4
 8010f34:	60bb      	str	r3, [r7, #8]
 8010f36:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8010f38:	2304      	movs	r3, #4
 8010f3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010f3c:	2302      	movs	r3, #2
 8010f3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010f40:	2300      	movs	r3, #0
 8010f42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010f44:	2303      	movs	r3, #3
 8010f46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8010f48:	2307      	movs	r3, #7
 8010f4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010f4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010f50:	4619      	mov	r1, r3
 8010f52:	4817      	ldr	r0, [pc, #92]	; (8010fb0 <HAL_SPI_MspInit+0x1dc>)
 8010f54:	f7fa f8b2 	bl	800b0bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8010f58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010f5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010f5e:	2302      	movs	r3, #2
 8010f60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010f62:	2300      	movs	r3, #0
 8010f64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010f66:	2303      	movs	r3, #3
 8010f68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8010f6a:	2306      	movs	r3, #6
 8010f6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010f6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010f72:	4619      	mov	r1, r3
 8010f74:	4810      	ldr	r0, [pc, #64]	; (8010fb8 <HAL_SPI_MspInit+0x1e4>)
 8010f76:	f7fa f8a1 	bl	800b0bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8010f7a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8010f7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010f80:	2302      	movs	r3, #2
 8010f82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010f84:	2300      	movs	r3, #0
 8010f86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010f88:	2303      	movs	r3, #3
 8010f8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8010f8c:	2306      	movs	r3, #6
 8010f8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010f90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010f94:	4619      	mov	r1, r3
 8010f96:	4805      	ldr	r0, [pc, #20]	; (8010fac <HAL_SPI_MspInit+0x1d8>)
 8010f98:	f7fa f890 	bl	800b0bc <HAL_GPIO_Init>
}
 8010f9c:	bf00      	nop
 8010f9e:	3738      	adds	r7, #56	; 0x38
 8010fa0:	46bd      	mov	sp, r7
 8010fa2:	bd80      	pop	{r7, pc}
 8010fa4:	40003800 	.word	0x40003800
 8010fa8:	40023800 	.word	0x40023800
 8010fac:	40020800 	.word	0x40020800
 8010fb0:	40020400 	.word	0x40020400
 8010fb4:	40003c00 	.word	0x40003c00
 8010fb8:	40020000 	.word	0x40020000

08010fbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8010fbc:	b580      	push	{r7, lr}
 8010fbe:	b082      	sub	sp, #8
 8010fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8010fc2:	2300      	movs	r3, #0
 8010fc4:	607b      	str	r3, [r7, #4]
 8010fc6:	4b10      	ldr	r3, [pc, #64]	; (8011008 <HAL_MspInit+0x4c>)
 8010fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010fca:	4a0f      	ldr	r2, [pc, #60]	; (8011008 <HAL_MspInit+0x4c>)
 8010fcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8010fd2:	4b0d      	ldr	r3, [pc, #52]	; (8011008 <HAL_MspInit+0x4c>)
 8010fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010fda:	607b      	str	r3, [r7, #4]
 8010fdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8010fde:	2300      	movs	r3, #0
 8010fe0:	603b      	str	r3, [r7, #0]
 8010fe2:	4b09      	ldr	r3, [pc, #36]	; (8011008 <HAL_MspInit+0x4c>)
 8010fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010fe6:	4a08      	ldr	r2, [pc, #32]	; (8011008 <HAL_MspInit+0x4c>)
 8010fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010fec:	6413      	str	r3, [r2, #64]	; 0x40
 8010fee:	4b06      	ldr	r3, [pc, #24]	; (8011008 <HAL_MspInit+0x4c>)
 8010ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010ff6:	603b      	str	r3, [r7, #0]
 8010ff8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8010ffa:	2007      	movs	r0, #7
 8010ffc:	f7f9 f9a0 	bl	800a340 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8011000:	bf00      	nop
 8011002:	3708      	adds	r7, #8
 8011004:	46bd      	mov	sp, r7
 8011006:	bd80      	pop	{r7, pc}
 8011008:	40023800 	.word	0x40023800

0801100c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 801100c:	b480      	push	{r7}
 801100e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8011010:	bf00      	nop
 8011012:	46bd      	mov	sp, r7
 8011014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011018:	4770      	bx	lr

0801101a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801101a:	b480      	push	{r7}
 801101c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801101e:	e7fe      	b.n	801101e <HardFault_Handler+0x4>

08011020 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8011020:	b480      	push	{r7}
 8011022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8011024:	e7fe      	b.n	8011024 <MemManage_Handler+0x4>

08011026 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8011026:	b480      	push	{r7}
 8011028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801102a:	e7fe      	b.n	801102a <BusFault_Handler+0x4>

0801102c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 801102c:	b480      	push	{r7}
 801102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8011030:	e7fe      	b.n	8011030 <UsageFault_Handler+0x4>

08011032 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8011032:	b480      	push	{r7}
 8011034:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8011036:	bf00      	nop
 8011038:	46bd      	mov	sp, r7
 801103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801103e:	4770      	bx	lr

08011040 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8011040:	b480      	push	{r7}
 8011042:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8011044:	bf00      	nop
 8011046:	46bd      	mov	sp, r7
 8011048:	f85d 7b04 	ldr.w	r7, [sp], #4
 801104c:	4770      	bx	lr

0801104e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 801104e:	b480      	push	{r7}
 8011050:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8011052:	bf00      	nop
 8011054:	46bd      	mov	sp, r7
 8011056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801105a:	4770      	bx	lr

0801105c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 801105c:	b580      	push	{r7, lr}
 801105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8011060:	f7f7 fef4 	bl	8008e4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8011064:	bf00      	nop
 8011066:	bd80      	pop	{r7, pc}

08011068 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8011068:	b580      	push	{r7, lr}
 801106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 801106c:	4802      	ldr	r0, [pc, #8]	; (8011078 <CAN1_TX_IRQHandler+0x10>)
 801106e:	f7f8 fe8c 	bl	8009d8a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8011072:	bf00      	nop
 8011074:	bd80      	pop	{r7, pc}
 8011076:	bf00      	nop
 8011078:	200044a0 	.word	0x200044a0

0801107c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 801107c:	b580      	push	{r7, lr}
 801107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8011080:	4802      	ldr	r0, [pc, #8]	; (801108c <CAN1_RX0_IRQHandler+0x10>)
 8011082:	f7f8 fe82 	bl	8009d8a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8011086:	bf00      	nop
 8011088:	bd80      	pop	{r7, pc}
 801108a:	bf00      	nop
 801108c:	200044a0 	.word	0x200044a0

08011090 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8011090:	b580      	push	{r7, lr}
 8011092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8011094:	4802      	ldr	r0, [pc, #8]	; (80110a0 <SPI2_IRQHandler+0x10>)
 8011096:	f7fa fff7 	bl	800c088 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 801109a:	bf00      	nop
 801109c:	bd80      	pop	{r7, pc}
 801109e:	bf00      	nop
 80110a0:	200044f8 	.word	0x200044f8

080110a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80110a4:	b580      	push	{r7, lr}
 80110a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80110a8:	4802      	ldr	r0, [pc, #8]	; (80110b4 <USART2_IRQHandler+0x10>)
 80110aa:	f7fc fc4b 	bl	800d944 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80110ae:	bf00      	nop
 80110b0:	bd80      	pop	{r7, pc}
 80110b2:	bf00      	nop
 80110b4:	200045e8 	.word	0x200045e8

080110b8 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80110b8:	b580      	push	{r7, lr}
 80110ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80110bc:	4802      	ldr	r0, [pc, #8]	; (80110c8 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80110be:	f7fb fc75 	bl	800c9ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80110c2:	bf00      	nop
 80110c4:	bd80      	pop	{r7, pc}
 80110c6:	bf00      	nop
 80110c8:	200045a8 	.word	0x200045a8

080110cc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80110cc:	b580      	push	{r7, lr}
 80110ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80110d0:	4802      	ldr	r0, [pc, #8]	; (80110dc <DMA2_Stream0_IRQHandler+0x10>)
 80110d2:	f7f9 faa7 	bl	800a624 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80110d6:	bf00      	nop
 80110d8:	bd80      	pop	{r7, pc}
 80110da:	bf00      	nop
 80110dc:	20004394 	.word	0x20004394

080110e0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80110e0:	b580      	push	{r7, lr}
 80110e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80110e4:	4802      	ldr	r0, [pc, #8]	; (80110f0 <DMA2_Stream1_IRQHandler+0x10>)
 80110e6:	f7f9 fa9d 	bl	800a624 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80110ea:	bf00      	nop
 80110ec:	bd80      	pop	{r7, pc}
 80110ee:	bf00      	nop
 80110f0:	200042a4 	.word	0x200042a4

080110f4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80110f4:	b580      	push	{r7, lr}
 80110f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80110f8:	4802      	ldr	r0, [pc, #8]	; (8011104 <DMA2_Stream2_IRQHandler+0x10>)
 80110fa:	f7f9 fa93 	bl	800a624 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80110fe:	bf00      	nop
 8011100:	bd80      	pop	{r7, pc}
 8011102:	bf00      	nop
 8011104:	200043f4 	.word	0x200043f4

08011108 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8011108:	b580      	push	{r7, lr}
 801110a:	b086      	sub	sp, #24
 801110c:	af00      	add	r7, sp, #0
 801110e:	60f8      	str	r0, [r7, #12]
 8011110:	60b9      	str	r1, [r7, #8]
 8011112:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011114:	2300      	movs	r3, #0
 8011116:	617b      	str	r3, [r7, #20]
 8011118:	e00a      	b.n	8011130 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 801111a:	f3af 8000 	nop.w
 801111e:	4601      	mov	r1, r0
 8011120:	68bb      	ldr	r3, [r7, #8]
 8011122:	1c5a      	adds	r2, r3, #1
 8011124:	60ba      	str	r2, [r7, #8]
 8011126:	b2ca      	uxtb	r2, r1
 8011128:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801112a:	697b      	ldr	r3, [r7, #20]
 801112c:	3301      	adds	r3, #1
 801112e:	617b      	str	r3, [r7, #20]
 8011130:	697a      	ldr	r2, [r7, #20]
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	429a      	cmp	r2, r3
 8011136:	dbf0      	blt.n	801111a <_read+0x12>
	}

return len;
 8011138:	687b      	ldr	r3, [r7, #4]
}
 801113a:	4618      	mov	r0, r3
 801113c:	3718      	adds	r7, #24
 801113e:	46bd      	mov	sp, r7
 8011140:	bd80      	pop	{r7, pc}

08011142 <_close>:
	}
	return len;
}

int _close(int file)
{
 8011142:	b480      	push	{r7}
 8011144:	b083      	sub	sp, #12
 8011146:	af00      	add	r7, sp, #0
 8011148:	6078      	str	r0, [r7, #4]
	return -1;
 801114a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801114e:	4618      	mov	r0, r3
 8011150:	370c      	adds	r7, #12
 8011152:	46bd      	mov	sp, r7
 8011154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011158:	4770      	bx	lr

0801115a <_fstat>:


int _fstat(int file, struct stat *st)
{
 801115a:	b480      	push	{r7}
 801115c:	b083      	sub	sp, #12
 801115e:	af00      	add	r7, sp, #0
 8011160:	6078      	str	r0, [r7, #4]
 8011162:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8011164:	683b      	ldr	r3, [r7, #0]
 8011166:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801116a:	605a      	str	r2, [r3, #4]
	return 0;
 801116c:	2300      	movs	r3, #0
}
 801116e:	4618      	mov	r0, r3
 8011170:	370c      	adds	r7, #12
 8011172:	46bd      	mov	sp, r7
 8011174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011178:	4770      	bx	lr

0801117a <_isatty>:

int _isatty(int file)
{
 801117a:	b480      	push	{r7}
 801117c:	b083      	sub	sp, #12
 801117e:	af00      	add	r7, sp, #0
 8011180:	6078      	str	r0, [r7, #4]
	return 1;
 8011182:	2301      	movs	r3, #1
}
 8011184:	4618      	mov	r0, r3
 8011186:	370c      	adds	r7, #12
 8011188:	46bd      	mov	sp, r7
 801118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801118e:	4770      	bx	lr

08011190 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8011190:	b480      	push	{r7}
 8011192:	b085      	sub	sp, #20
 8011194:	af00      	add	r7, sp, #0
 8011196:	60f8      	str	r0, [r7, #12]
 8011198:	60b9      	str	r1, [r7, #8]
 801119a:	607a      	str	r2, [r7, #4]
	return 0;
 801119c:	2300      	movs	r3, #0
}
 801119e:	4618      	mov	r0, r3
 80111a0:	3714      	adds	r7, #20
 80111a2:	46bd      	mov	sp, r7
 80111a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a8:	4770      	bx	lr
	...

080111ac <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80111ac:	b580      	push	{r7, lr}
 80111ae:	b084      	sub	sp, #16
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80111b4:	4b11      	ldr	r3, [pc, #68]	; (80111fc <_sbrk+0x50>)
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d102      	bne.n	80111c2 <_sbrk+0x16>
		heap_end = &end;
 80111bc:	4b0f      	ldr	r3, [pc, #60]	; (80111fc <_sbrk+0x50>)
 80111be:	4a10      	ldr	r2, [pc, #64]	; (8011200 <_sbrk+0x54>)
 80111c0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80111c2:	4b0e      	ldr	r3, [pc, #56]	; (80111fc <_sbrk+0x50>)
 80111c4:	681b      	ldr	r3, [r3, #0]
 80111c6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80111c8:	4b0c      	ldr	r3, [pc, #48]	; (80111fc <_sbrk+0x50>)
 80111ca:	681a      	ldr	r2, [r3, #0]
 80111cc:	687b      	ldr	r3, [r7, #4]
 80111ce:	4413      	add	r3, r2
 80111d0:	466a      	mov	r2, sp
 80111d2:	4293      	cmp	r3, r2
 80111d4:	d907      	bls.n	80111e6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80111d6:	f000 fab9 	bl	801174c <__errno>
 80111da:	4602      	mov	r2, r0
 80111dc:	230c      	movs	r3, #12
 80111de:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80111e0:	f04f 33ff 	mov.w	r3, #4294967295
 80111e4:	e006      	b.n	80111f4 <_sbrk+0x48>
	}

	heap_end += incr;
 80111e6:	4b05      	ldr	r3, [pc, #20]	; (80111fc <_sbrk+0x50>)
 80111e8:	681a      	ldr	r2, [r3, #0]
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	4413      	add	r3, r2
 80111ee:	4a03      	ldr	r2, [pc, #12]	; (80111fc <_sbrk+0x50>)
 80111f0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80111f2:	68fb      	ldr	r3, [r7, #12]
}
 80111f4:	4618      	mov	r0, r3
 80111f6:	3710      	adds	r7, #16
 80111f8:	46bd      	mov	sp, r7
 80111fa:	bd80      	pop	{r7, pc}
 80111fc:	20004134 	.word	0x20004134
 8011200:	20004630 	.word	0x20004630

08011204 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8011204:	b480      	push	{r7}
 8011206:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8011208:	4b16      	ldr	r3, [pc, #88]	; (8011264 <SystemInit+0x60>)
 801120a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801120e:	4a15      	ldr	r2, [pc, #84]	; (8011264 <SystemInit+0x60>)
 8011210:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011214:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8011218:	4b13      	ldr	r3, [pc, #76]	; (8011268 <SystemInit+0x64>)
 801121a:	681b      	ldr	r3, [r3, #0]
 801121c:	4a12      	ldr	r2, [pc, #72]	; (8011268 <SystemInit+0x64>)
 801121e:	f043 0301 	orr.w	r3, r3, #1
 8011222:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8011224:	4b10      	ldr	r3, [pc, #64]	; (8011268 <SystemInit+0x64>)
 8011226:	2200      	movs	r2, #0
 8011228:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 801122a:	4b0f      	ldr	r3, [pc, #60]	; (8011268 <SystemInit+0x64>)
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	4a0e      	ldr	r2, [pc, #56]	; (8011268 <SystemInit+0x64>)
 8011230:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8011234:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011238:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 801123a:	4b0b      	ldr	r3, [pc, #44]	; (8011268 <SystemInit+0x64>)
 801123c:	4a0b      	ldr	r2, [pc, #44]	; (801126c <SystemInit+0x68>)
 801123e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8011240:	4b09      	ldr	r3, [pc, #36]	; (8011268 <SystemInit+0x64>)
 8011242:	681b      	ldr	r3, [r3, #0]
 8011244:	4a08      	ldr	r2, [pc, #32]	; (8011268 <SystemInit+0x64>)
 8011246:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801124a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 801124c:	4b06      	ldr	r3, [pc, #24]	; (8011268 <SystemInit+0x64>)
 801124e:	2200      	movs	r2, #0
 8011250:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8011252:	4b04      	ldr	r3, [pc, #16]	; (8011264 <SystemInit+0x60>)
 8011254:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8011258:	609a      	str	r2, [r3, #8]
#endif
}
 801125a:	bf00      	nop
 801125c:	46bd      	mov	sp, r7
 801125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011262:	4770      	bx	lr
 8011264:	e000ed00 	.word	0xe000ed00
 8011268:	40023800 	.word	0x40023800
 801126c:	24003010 	.word	0x24003010

08011270 <MX_TIM8_Init>:

TIM_HandleTypeDef htim8;

/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8011270:	b580      	push	{r7, lr}
 8011272:	b096      	sub	sp, #88	; 0x58
 8011274:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8011276:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801127a:	2200      	movs	r2, #0
 801127c:	601a      	str	r2, [r3, #0]
 801127e:	605a      	str	r2, [r3, #4]
 8011280:	609a      	str	r2, [r3, #8]
 8011282:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8011284:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011288:	2200      	movs	r2, #0
 801128a:	601a      	str	r2, [r3, #0]
 801128c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 801128e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011292:	2200      	movs	r2, #0
 8011294:	601a      	str	r2, [r3, #0]
 8011296:	605a      	str	r2, [r3, #4]
 8011298:	609a      	str	r2, [r3, #8]
 801129a:	60da      	str	r2, [r3, #12]
 801129c:	611a      	str	r2, [r3, #16]
 801129e:	615a      	str	r2, [r3, #20]
 80112a0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80112a2:	1d3b      	adds	r3, r7, #4
 80112a4:	2220      	movs	r2, #32
 80112a6:	2100      	movs	r1, #0
 80112a8:	4618      	mov	r0, r3
 80112aa:	f000 fa84 	bl	80117b6 <memset>

  htim8.Instance = TIM8;
 80112ae:	4b4a      	ldr	r3, [pc, #296]	; (80113d8 <MX_TIM8_Init+0x168>)
 80112b0:	4a4a      	ldr	r2, [pc, #296]	; (80113dc <MX_TIM8_Init+0x16c>)
 80112b2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80112b4:	4b48      	ldr	r3, [pc, #288]	; (80113d8 <MX_TIM8_Init+0x168>)
 80112b6:	2200      	movs	r2, #0
 80112b8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80112ba:	4b47      	ldr	r3, [pc, #284]	; (80113d8 <MX_TIM8_Init+0x168>)
 80112bc:	2220      	movs	r2, #32
 80112be:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 8000;
 80112c0:	4b45      	ldr	r3, [pc, #276]	; (80113d8 <MX_TIM8_Init+0x168>)
 80112c2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80112c6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80112c8:	4b43      	ldr	r3, [pc, #268]	; (80113d8 <MX_TIM8_Init+0x168>)
 80112ca:	2200      	movs	r2, #0
 80112cc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80112ce:	4b42      	ldr	r3, [pc, #264]	; (80113d8 <MX_TIM8_Init+0x168>)
 80112d0:	2200      	movs	r2, #0
 80112d2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80112d4:	4b40      	ldr	r3, [pc, #256]	; (80113d8 <MX_TIM8_Init+0x168>)
 80112d6:	2200      	movs	r2, #0
 80112d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80112da:	483f      	ldr	r0, [pc, #252]	; (80113d8 <MX_TIM8_Init+0x168>)
 80112dc:	f7fb f9e8 	bl	800c6b0 <HAL_TIM_Base_Init>
 80112e0:	4603      	mov	r3, r0
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d001      	beq.n	80112ea <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80112e6:	f7ff f90d 	bl	8010504 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80112ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80112ee:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80112f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80112f4:	4619      	mov	r1, r3
 80112f6:	4838      	ldr	r0, [pc, #224]	; (80113d8 <MX_TIM8_Init+0x168>)
 80112f8:	f7fb fd4d 	bl	800cd96 <HAL_TIM_ConfigClockSource>
 80112fc:	4603      	mov	r3, r0
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d001      	beq.n	8011306 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8011302:	f7ff f8ff 	bl	8010504 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8011306:	4834      	ldr	r0, [pc, #208]	; (80113d8 <MX_TIM8_Init+0x168>)
 8011308:	f7fb f9fd 	bl	800c706 <HAL_TIM_PWM_Init>
 801130c:	4603      	mov	r3, r0
 801130e:	2b00      	cmp	r3, #0
 8011310:	d001      	beq.n	8011316 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8011312:	f7ff f8f7 	bl	8010504 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8011316:	2320      	movs	r3, #32
 8011318:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801131a:	2300      	movs	r3, #0
 801131c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 801131e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011322:	4619      	mov	r1, r3
 8011324:	482c      	ldr	r0, [pc, #176]	; (80113d8 <MX_TIM8_Init+0x168>)
 8011326:	f7fc f9ef 	bl	800d708 <HAL_TIMEx_MasterConfigSynchronization>
 801132a:	4603      	mov	r3, r0
 801132c:	2b00      	cmp	r3, #0
 801132e:	d001      	beq.n	8011334 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8011330:	f7ff f8e8 	bl	8010504 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8011334:	2360      	movs	r3, #96	; 0x60
 8011336:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 4000;
 8011338:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 801133c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801133e:	2300      	movs	r3, #0
 8011340:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8011342:	2300      	movs	r3, #0
 8011344:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8011346:	2300      	movs	r3, #0
 8011348:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 801134a:	2300      	movs	r3, #0
 801134c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 801134e:	2300      	movs	r3, #0
 8011350:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8011352:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011356:	2200      	movs	r2, #0
 8011358:	4619      	mov	r1, r3
 801135a:	481f      	ldr	r0, [pc, #124]	; (80113d8 <MX_TIM8_Init+0x168>)
 801135c:	f7fb fc2e 	bl	800cbbc <HAL_TIM_PWM_ConfigChannel>
 8011360:	4603      	mov	r3, r0
 8011362:	2b00      	cmp	r3, #0
 8011364:	d001      	beq.n	801136a <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 8011366:	f7ff f8cd 	bl	8010504 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 801136a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801136e:	2204      	movs	r2, #4
 8011370:	4619      	mov	r1, r3
 8011372:	4819      	ldr	r0, [pc, #100]	; (80113d8 <MX_TIM8_Init+0x168>)
 8011374:	f7fb fc22 	bl	800cbbc <HAL_TIM_PWM_ConfigChannel>
 8011378:	4603      	mov	r3, r0
 801137a:	2b00      	cmp	r3, #0
 801137c:	d001      	beq.n	8011382 <MX_TIM8_Init+0x112>
  {
    Error_Handler();
 801137e:	f7ff f8c1 	bl	8010504 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8011382:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011386:	2208      	movs	r2, #8
 8011388:	4619      	mov	r1, r3
 801138a:	4813      	ldr	r0, [pc, #76]	; (80113d8 <MX_TIM8_Init+0x168>)
 801138c:	f7fb fc16 	bl	800cbbc <HAL_TIM_PWM_ConfigChannel>
 8011390:	4603      	mov	r3, r0
 8011392:	2b00      	cmp	r3, #0
 8011394:	d001      	beq.n	801139a <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 8011396:	f7ff f8b5 	bl	8010504 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 801139a:	2300      	movs	r3, #0
 801139c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 801139e:	2300      	movs	r3, #0
 80113a0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80113a2:	2300      	movs	r3, #0
 80113a4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80113a6:	2300      	movs	r3, #0
 80113a8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80113aa:	2300      	movs	r3, #0
 80113ac:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 80113ae:	2300      	movs	r3, #0
 80113b0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80113b2:	2300      	movs	r3, #0
 80113b4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80113b6:	1d3b      	adds	r3, r7, #4
 80113b8:	4619      	mov	r1, r3
 80113ba:	4807      	ldr	r0, [pc, #28]	; (80113d8 <MX_TIM8_Init+0x168>)
 80113bc:	f7fc f9e9 	bl	800d792 <HAL_TIMEx_ConfigBreakDeadTime>
 80113c0:	4603      	mov	r3, r0
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d001      	beq.n	80113ca <MX_TIM8_Init+0x15a>
  {
    Error_Handler();
 80113c6:	f7ff f89d 	bl	8010504 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 80113ca:	4803      	ldr	r0, [pc, #12]	; (80113d8 <MX_TIM8_Init+0x168>)
 80113cc:	f000 f830 	bl	8011430 <HAL_TIM_MspPostInit>

}
 80113d0:	bf00      	nop
 80113d2:	3758      	adds	r7, #88	; 0x58
 80113d4:	46bd      	mov	sp, r7
 80113d6:	bd80      	pop	{r7, pc}
 80113d8:	200045a8 	.word	0x200045a8
 80113dc:	40010400 	.word	0x40010400

080113e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80113e0:	b580      	push	{r7, lr}
 80113e2:	b084      	sub	sp, #16
 80113e4:	af00      	add	r7, sp, #0
 80113e6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	681b      	ldr	r3, [r3, #0]
 80113ec:	4a0e      	ldr	r2, [pc, #56]	; (8011428 <HAL_TIM_Base_MspInit+0x48>)
 80113ee:	4293      	cmp	r3, r2
 80113f0:	d115      	bne.n	801141e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80113f2:	2300      	movs	r3, #0
 80113f4:	60fb      	str	r3, [r7, #12]
 80113f6:	4b0d      	ldr	r3, [pc, #52]	; (801142c <HAL_TIM_Base_MspInit+0x4c>)
 80113f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80113fa:	4a0c      	ldr	r2, [pc, #48]	; (801142c <HAL_TIM_Base_MspInit+0x4c>)
 80113fc:	f043 0302 	orr.w	r3, r3, #2
 8011400:	6453      	str	r3, [r2, #68]	; 0x44
 8011402:	4b0a      	ldr	r3, [pc, #40]	; (801142c <HAL_TIM_Base_MspInit+0x4c>)
 8011404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011406:	f003 0302 	and.w	r3, r3, #2
 801140a:	60fb      	str	r3, [r7, #12]
 801140c:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 801140e:	2200      	movs	r2, #0
 8011410:	2100      	movs	r1, #0
 8011412:	202c      	movs	r0, #44	; 0x2c
 8011414:	f7f8 ff9f 	bl	800a356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8011418:	202c      	movs	r0, #44	; 0x2c
 801141a:	f7f8 ffb8 	bl	800a38e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 801141e:	bf00      	nop
 8011420:	3710      	adds	r7, #16
 8011422:	46bd      	mov	sp, r7
 8011424:	bd80      	pop	{r7, pc}
 8011426:	bf00      	nop
 8011428:	40010400 	.word	0x40010400
 801142c:	40023800 	.word	0x40023800

08011430 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8011430:	b580      	push	{r7, lr}
 8011432:	b08a      	sub	sp, #40	; 0x28
 8011434:	af00      	add	r7, sp, #0
 8011436:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011438:	f107 0314 	add.w	r3, r7, #20
 801143c:	2200      	movs	r2, #0
 801143e:	601a      	str	r2, [r3, #0]
 8011440:	605a      	str	r2, [r3, #4]
 8011442:	609a      	str	r2, [r3, #8]
 8011444:	60da      	str	r2, [r3, #12]
 8011446:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	4a30      	ldr	r2, [pc, #192]	; (8011510 <HAL_TIM_MspPostInit+0xe0>)
 801144e:	4293      	cmp	r3, r2
 8011450:	d15a      	bne.n	8011508 <HAL_TIM_MspPostInit+0xd8>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011452:	2300      	movs	r3, #0
 8011454:	613b      	str	r3, [r7, #16]
 8011456:	4b2f      	ldr	r3, [pc, #188]	; (8011514 <HAL_TIM_MspPostInit+0xe4>)
 8011458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801145a:	4a2e      	ldr	r2, [pc, #184]	; (8011514 <HAL_TIM_MspPostInit+0xe4>)
 801145c:	f043 0301 	orr.w	r3, r3, #1
 8011460:	6313      	str	r3, [r2, #48]	; 0x30
 8011462:	4b2c      	ldr	r3, [pc, #176]	; (8011514 <HAL_TIM_MspPostInit+0xe4>)
 8011464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011466:	f003 0301 	and.w	r3, r3, #1
 801146a:	613b      	str	r3, [r7, #16]
 801146c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801146e:	2300      	movs	r3, #0
 8011470:	60fb      	str	r3, [r7, #12]
 8011472:	4b28      	ldr	r3, [pc, #160]	; (8011514 <HAL_TIM_MspPostInit+0xe4>)
 8011474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011476:	4a27      	ldr	r2, [pc, #156]	; (8011514 <HAL_TIM_MspPostInit+0xe4>)
 8011478:	f043 0302 	orr.w	r3, r3, #2
 801147c:	6313      	str	r3, [r2, #48]	; 0x30
 801147e:	4b25      	ldr	r3, [pc, #148]	; (8011514 <HAL_TIM_MspPostInit+0xe4>)
 8011480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011482:	f003 0302 	and.w	r3, r3, #2
 8011486:	60fb      	str	r3, [r7, #12]
 8011488:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801148a:	2300      	movs	r3, #0
 801148c:	60bb      	str	r3, [r7, #8]
 801148e:	4b21      	ldr	r3, [pc, #132]	; (8011514 <HAL_TIM_MspPostInit+0xe4>)
 8011490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011492:	4a20      	ldr	r2, [pc, #128]	; (8011514 <HAL_TIM_MspPostInit+0xe4>)
 8011494:	f043 0304 	orr.w	r3, r3, #4
 8011498:	6313      	str	r3, [r2, #48]	; 0x30
 801149a:	4b1e      	ldr	r3, [pc, #120]	; (8011514 <HAL_TIM_MspPostInit+0xe4>)
 801149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801149e:	f003 0304 	and.w	r3, r3, #4
 80114a2:	60bb      	str	r3, [r7, #8]
 80114a4:	68bb      	ldr	r3, [r7, #8]
    PB1     ------> TIM8_CH3N
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80114a6:	2380      	movs	r3, #128	; 0x80
 80114a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80114aa:	2302      	movs	r3, #2
 80114ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80114ae:	2300      	movs	r3, #0
 80114b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80114b2:	2300      	movs	r3, #0
 80114b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80114b6:	2303      	movs	r3, #3
 80114b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80114ba:	f107 0314 	add.w	r3, r7, #20
 80114be:	4619      	mov	r1, r3
 80114c0:	4815      	ldr	r0, [pc, #84]	; (8011518 <HAL_TIM_MspPostInit+0xe8>)
 80114c2:	f7f9 fdfb 	bl	800b0bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80114c6:	2303      	movs	r3, #3
 80114c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80114ca:	2302      	movs	r3, #2
 80114cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80114ce:	2300      	movs	r3, #0
 80114d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80114d2:	2300      	movs	r3, #0
 80114d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80114d6:	2303      	movs	r3, #3
 80114d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80114da:	f107 0314 	add.w	r3, r7, #20
 80114de:	4619      	mov	r1, r3
 80114e0:	480e      	ldr	r0, [pc, #56]	; (801151c <HAL_TIM_MspPostInit+0xec>)
 80114e2:	f7f9 fdeb 	bl	800b0bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80114e6:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80114ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80114ec:	2302      	movs	r3, #2
 80114ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80114f0:	2300      	movs	r3, #0
 80114f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80114f4:	2300      	movs	r3, #0
 80114f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80114f8:	2303      	movs	r3, #3
 80114fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80114fc:	f107 0314 	add.w	r3, r7, #20
 8011500:	4619      	mov	r1, r3
 8011502:	4807      	ldr	r0, [pc, #28]	; (8011520 <HAL_TIM_MspPostInit+0xf0>)
 8011504:	f7f9 fdda 	bl	800b0bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8011508:	bf00      	nop
 801150a:	3728      	adds	r7, #40	; 0x28
 801150c:	46bd      	mov	sp, r7
 801150e:	bd80      	pop	{r7, pc}
 8011510:	40010400 	.word	0x40010400
 8011514:	40023800 	.word	0x40023800
 8011518:	40020000 	.word	0x40020000
 801151c:	40020400 	.word	0x40020400
 8011520:	40020800 	.word	0x40020800

08011524 <TIM_Init>:
/* USER CODE BEGIN 1 */



void TIM_Init()
{
 8011524:	b580      	push	{r7, lr}
 8011526:	af00      	add	r7, sp, #0
	  __HAL_TIM_DISABLE_IT(&htim8, TIM_IT_CC2);
	  __HAL_TIM_DISABLE_IT(&htim8, TIM_IT_CC3);
	  __HAL_TIM_DISABLE_IT(&htim8, TIM_IT_CC4);
	  __HAL_TIM_DISABLE_IT(&htim8, TIM_IT_COM);
	  __HAL_TIM_DISABLE_IT(&htim8, TIM_IT_BREAK);*/
	  __HAL_TIM_CLEAR_FLAG(&htim8, TIM_FLAG_UPDATE);
 8011528:	4b0a      	ldr	r3, [pc, #40]	; (8011554 <TIM_Init+0x30>)
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	f06f 0201 	mvn.w	r2, #1
 8011530:	611a      	str	r2, [r3, #16]
	  __HAL_TIM_ENABLE_IT(&htim8, TIM_IT_UPDATE);
 8011532:	4b08      	ldr	r3, [pc, #32]	; (8011554 <TIM_Init+0x30>)
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	68da      	ldr	r2, [r3, #12]
 8011538:	4b06      	ldr	r3, [pc, #24]	; (8011554 <TIM_Init+0x30>)
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	f042 0201 	orr.w	r2, r2, #1
 8011540:	60da      	str	r2, [r3, #12]


	  HAL_TIM_GenerateEvent(&htim8, TIM_EVENTSOURCE_UPDATE);
 8011542:	2101      	movs	r1, #1
 8011544:	4803      	ldr	r0, [pc, #12]	; (8011554 <TIM_Init+0x30>)
 8011546:	f7fb fbff 	bl	800cd48 <HAL_TIM_GenerateEvent>
	  //HAL_TIM_GenerateEvent(&htim8, TIM_EVENTSOURCE_TRIGGER);


	  startPWM(&htim8);
 801154a:	4802      	ldr	r0, [pc, #8]	; (8011554 <TIM_Init+0x30>)
 801154c:	f7fe ffe1 	bl	8010512 <startPWM>


}
 8011550:	bf00      	nop
 8011552:	bd80      	pop	{r7, pc}
 8011554:	200045a8 	.word	0x200045a8

08011558 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim)
{
 8011558:	b580      	push	{r7, lr}
 801155a:	b082      	sub	sp, #8
 801155c:	af00      	add	r7, sp, #0
 801155e:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM8)
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	4a12      	ldr	r2, [pc, #72]	; (80115b0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8011566:	4293      	cmp	r3, r2
 8011568:	d11d      	bne.n	80115a6 <HAL_TIM_PeriodElapsedCallback+0x4e>
	{

		if(!__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	f003 0310 	and.w	r3, r3, #16
 8011574:	2b10      	cmp	r3, #16
 8011576:	d016      	beq.n	80115a6 <HAL_TIM_PeriodElapsedCallback+0x4e>
		{

			ACR_Refresh(&mainACR);
 8011578:	480e      	ldr	r0, [pc, #56]	; (80115b4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 801157a:	f7fc fe75 	bl	800e268 <ACR_Refresh>

			// timeout control
			if(timeoutCount < TIMEOUT_MS * PWM_FREQ / 1000)
 801157e:	4b0e      	ldr	r3, [pc, #56]	; (80115b8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8011586:	d205      	bcs.n	8011594 <HAL_TIM_PeriodElapsedCallback+0x3c>
			{
				timeoutCount += 1;
 8011588:	4b0b      	ldr	r3, [pc, #44]	; (80115b8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	3301      	adds	r3, #1
 801158e:	4a0a      	ldr	r2, [pc, #40]	; (80115b8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8011590:	6013      	str	r3, [r2, #0]
		}


	}

}
 8011592:	e008      	b.n	80115a6 <HAL_TIM_PeriodElapsedCallback+0x4e>
				stopPWM(&htim8);
 8011594:	4809      	ldr	r0, [pc, #36]	; (80115bc <HAL_TIM_PeriodElapsedCallback+0x64>)
 8011596:	f7fe ffdc 	bl	8010552 <stopPWM>
				timeoutCount = 0;
 801159a:	4b07      	ldr	r3, [pc, #28]	; (80115b8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 801159c:	2200      	movs	r2, #0
 801159e:	601a      	str	r2, [r3, #0]
				timeoutState = 1;
 80115a0:	4b07      	ldr	r3, [pc, #28]	; (80115c0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80115a2:	2201      	movs	r2, #1
 80115a4:	701a      	strb	r2, [r3, #0]
}
 80115a6:	bf00      	nop
 80115a8:	3708      	adds	r7, #8
 80115aa:	46bd      	mov	sp, r7
 80115ac:	bd80      	pop	{r7, pc}
 80115ae:	bf00      	nop
 80115b0:	40010400 	.word	0x40010400
 80115b4:	20004178 	.word	0x20004178
 80115b8:	20004144 	.word	0x20004144
 80115bc:	200045a8 	.word	0x200045a8
 80115c0:	20004148 	.word	0x20004148

080115c4 <timeoutReset>:


inline void timeoutReset()
{
 80115c4:	b580      	push	{r7, lr}
 80115c6:	af00      	add	r7, sp, #0
	timeoutCount = 0;
 80115c8:	4b0a      	ldr	r3, [pc, #40]	; (80115f4 <timeoutReset+0x30>)
 80115ca:	2200      	movs	r2, #0
 80115cc:	601a      	str	r2, [r3, #0]
	if(timeoutState == 1)
 80115ce:	4b0a      	ldr	r3, [pc, #40]	; (80115f8 <timeoutReset+0x34>)
 80115d0:	781b      	ldrb	r3, [r3, #0]
 80115d2:	b2db      	uxtb	r3, r3
 80115d4:	2b01      	cmp	r3, #1
 80115d6:	d10a      	bne.n	80115ee <timeoutReset+0x2a>
	{
		timeoutState = 0;
 80115d8:	4b07      	ldr	r3, [pc, #28]	; (80115f8 <timeoutReset+0x34>)
 80115da:	2200      	movs	r2, #0
 80115dc:	701a      	strb	r2, [r3, #0]
		ASR_Reset();
 80115de:	f7fd fb2d 	bl	800ec3c <ASR_Reset>
		ACR_Reset(&mainACR);
 80115e2:	4806      	ldr	r0, [pc, #24]	; (80115fc <timeoutReset+0x38>)
 80115e4:	f7fd f8da 	bl	800e79c <ACR_Reset>
		startPWM(&htim8);
 80115e8:	4805      	ldr	r0, [pc, #20]	; (8011600 <timeoutReset+0x3c>)
 80115ea:	f7fe ff92 	bl	8010512 <startPWM>
	}
}
 80115ee:	bf00      	nop
 80115f0:	bd80      	pop	{r7, pc}
 80115f2:	bf00      	nop
 80115f4:	20004144 	.word	0x20004144
 80115f8:	20004148 	.word	0x20004148
 80115fc:	20004178 	.word	0x20004178
 8011600:	200045a8 	.word	0x200045a8

08011604 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8011604:	b580      	push	{r7, lr}
 8011606:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8011608:	4b11      	ldr	r3, [pc, #68]	; (8011650 <MX_USART2_UART_Init+0x4c>)
 801160a:	4a12      	ldr	r2, [pc, #72]	; (8011654 <MX_USART2_UART_Init+0x50>)
 801160c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 801160e:	4b10      	ldr	r3, [pc, #64]	; (8011650 <MX_USART2_UART_Init+0x4c>)
 8011610:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8011614:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8011616:	4b0e      	ldr	r3, [pc, #56]	; (8011650 <MX_USART2_UART_Init+0x4c>)
 8011618:	2200      	movs	r2, #0
 801161a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 801161c:	4b0c      	ldr	r3, [pc, #48]	; (8011650 <MX_USART2_UART_Init+0x4c>)
 801161e:	2200      	movs	r2, #0
 8011620:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8011622:	4b0b      	ldr	r3, [pc, #44]	; (8011650 <MX_USART2_UART_Init+0x4c>)
 8011624:	2200      	movs	r2, #0
 8011626:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8011628:	4b09      	ldr	r3, [pc, #36]	; (8011650 <MX_USART2_UART_Init+0x4c>)
 801162a:	220c      	movs	r2, #12
 801162c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801162e:	4b08      	ldr	r3, [pc, #32]	; (8011650 <MX_USART2_UART_Init+0x4c>)
 8011630:	2200      	movs	r2, #0
 8011632:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8011634:	4b06      	ldr	r3, [pc, #24]	; (8011650 <MX_USART2_UART_Init+0x4c>)
 8011636:	2200      	movs	r2, #0
 8011638:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 801163a:	4805      	ldr	r0, [pc, #20]	; (8011650 <MX_USART2_UART_Init+0x4c>)
 801163c:	f7fc f934 	bl	800d8a8 <HAL_UART_Init>
 8011640:	4603      	mov	r3, r0
 8011642:	2b00      	cmp	r3, #0
 8011644:	d001      	beq.n	801164a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8011646:	f7fe ff5d 	bl	8010504 <Error_Handler>
  }

}
 801164a:	bf00      	nop
 801164c:	bd80      	pop	{r7, pc}
 801164e:	bf00      	nop
 8011650:	200045e8 	.word	0x200045e8
 8011654:	40004400 	.word	0x40004400

08011658 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8011658:	b580      	push	{r7, lr}
 801165a:	b08a      	sub	sp, #40	; 0x28
 801165c:	af00      	add	r7, sp, #0
 801165e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011660:	f107 0314 	add.w	r3, r7, #20
 8011664:	2200      	movs	r2, #0
 8011666:	601a      	str	r2, [r3, #0]
 8011668:	605a      	str	r2, [r3, #4]
 801166a:	609a      	str	r2, [r3, #8]
 801166c:	60da      	str	r2, [r3, #12]
 801166e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	4a1d      	ldr	r2, [pc, #116]	; (80116ec <HAL_UART_MspInit+0x94>)
 8011676:	4293      	cmp	r3, r2
 8011678:	d133      	bne.n	80116e2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 801167a:	2300      	movs	r3, #0
 801167c:	613b      	str	r3, [r7, #16]
 801167e:	4b1c      	ldr	r3, [pc, #112]	; (80116f0 <HAL_UART_MspInit+0x98>)
 8011680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011682:	4a1b      	ldr	r2, [pc, #108]	; (80116f0 <HAL_UART_MspInit+0x98>)
 8011684:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011688:	6413      	str	r3, [r2, #64]	; 0x40
 801168a:	4b19      	ldr	r3, [pc, #100]	; (80116f0 <HAL_UART_MspInit+0x98>)
 801168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801168e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011692:	613b      	str	r3, [r7, #16]
 8011694:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011696:	2300      	movs	r3, #0
 8011698:	60fb      	str	r3, [r7, #12]
 801169a:	4b15      	ldr	r3, [pc, #84]	; (80116f0 <HAL_UART_MspInit+0x98>)
 801169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801169e:	4a14      	ldr	r2, [pc, #80]	; (80116f0 <HAL_UART_MspInit+0x98>)
 80116a0:	f043 0301 	orr.w	r3, r3, #1
 80116a4:	6313      	str	r3, [r2, #48]	; 0x30
 80116a6:	4b12      	ldr	r3, [pc, #72]	; (80116f0 <HAL_UART_MspInit+0x98>)
 80116a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116aa:	f003 0301 	and.w	r3, r3, #1
 80116ae:	60fb      	str	r3, [r7, #12]
 80116b0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80116b2:	230c      	movs	r3, #12
 80116b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80116b6:	2302      	movs	r3, #2
 80116b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80116ba:	2301      	movs	r3, #1
 80116bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80116be:	2303      	movs	r3, #3
 80116c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80116c2:	2307      	movs	r3, #7
 80116c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80116c6:	f107 0314 	add.w	r3, r7, #20
 80116ca:	4619      	mov	r1, r3
 80116cc:	4809      	ldr	r0, [pc, #36]	; (80116f4 <HAL_UART_MspInit+0x9c>)
 80116ce:	f7f9 fcf5 	bl	800b0bc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80116d2:	2200      	movs	r2, #0
 80116d4:	2100      	movs	r1, #0
 80116d6:	2026      	movs	r0, #38	; 0x26
 80116d8:	f7f8 fe3d 	bl	800a356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80116dc:	2026      	movs	r0, #38	; 0x26
 80116de:	f7f8 fe56 	bl	800a38e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80116e2:	bf00      	nop
 80116e4:	3728      	adds	r7, #40	; 0x28
 80116e6:	46bd      	mov	sp, r7
 80116e8:	bd80      	pop	{r7, pc}
 80116ea:	bf00      	nop
 80116ec:	40004400 	.word	0x40004400
 80116f0:	40023800 	.word	0x40023800
 80116f4:	40020000 	.word	0x40020000

080116f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80116f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8011730 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80116fc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80116fe:	e003      	b.n	8011708 <LoopCopyDataInit>

08011700 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8011700:	4b0c      	ldr	r3, [pc, #48]	; (8011734 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8011702:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8011704:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8011706:	3104      	adds	r1, #4

08011708 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8011708:	480b      	ldr	r0, [pc, #44]	; (8011738 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 801170a:	4b0c      	ldr	r3, [pc, #48]	; (801173c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 801170c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 801170e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8011710:	d3f6      	bcc.n	8011700 <CopyDataInit>
  ldr  r2, =_sbss
 8011712:	4a0b      	ldr	r2, [pc, #44]	; (8011740 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8011714:	e002      	b.n	801171c <LoopFillZerobss>

08011716 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8011716:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8011718:	f842 3b04 	str.w	r3, [r2], #4

0801171c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 801171c:	4b09      	ldr	r3, [pc, #36]	; (8011744 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 801171e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8011720:	d3f9      	bcc.n	8011716 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8011722:	f7ff fd6f 	bl	8011204 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8011726:	f000 f817 	bl	8011758 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801172a:	f7fe fda3 	bl	8010274 <main>
  bx  lr    
 801172e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8011730:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8011734:	080265c0 	.word	0x080265c0
  ldr  r0, =_sdata
 8011738:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 801173c:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 8011740:	20000084 	.word	0x20000084
  ldr  r3, = _ebss
 8011744:	2000462c 	.word	0x2000462c

08011748 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8011748:	e7fe      	b.n	8011748 <ADC_IRQHandler>
	...

0801174c <__errno>:
 801174c:	4b01      	ldr	r3, [pc, #4]	; (8011754 <__errno+0x8>)
 801174e:	6818      	ldr	r0, [r3, #0]
 8011750:	4770      	bx	lr
 8011752:	bf00      	nop
 8011754:	2000001c 	.word	0x2000001c

08011758 <__libc_init_array>:
 8011758:	b570      	push	{r4, r5, r6, lr}
 801175a:	4e0d      	ldr	r6, [pc, #52]	; (8011790 <__libc_init_array+0x38>)
 801175c:	4c0d      	ldr	r4, [pc, #52]	; (8011794 <__libc_init_array+0x3c>)
 801175e:	1ba4      	subs	r4, r4, r6
 8011760:	10a4      	asrs	r4, r4, #2
 8011762:	2500      	movs	r5, #0
 8011764:	42a5      	cmp	r5, r4
 8011766:	d109      	bne.n	801177c <__libc_init_array+0x24>
 8011768:	4e0b      	ldr	r6, [pc, #44]	; (8011798 <__libc_init_array+0x40>)
 801176a:	4c0c      	ldr	r4, [pc, #48]	; (801179c <__libc_init_array+0x44>)
 801176c:	f001 f9d0 	bl	8012b10 <_init>
 8011770:	1ba4      	subs	r4, r4, r6
 8011772:	10a4      	asrs	r4, r4, #2
 8011774:	2500      	movs	r5, #0
 8011776:	42a5      	cmp	r5, r4
 8011778:	d105      	bne.n	8011786 <__libc_init_array+0x2e>
 801177a:	bd70      	pop	{r4, r5, r6, pc}
 801177c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011780:	4798      	blx	r3
 8011782:	3501      	adds	r5, #1
 8011784:	e7ee      	b.n	8011764 <__libc_init_array+0xc>
 8011786:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801178a:	4798      	blx	r3
 801178c:	3501      	adds	r5, #1
 801178e:	e7f2      	b.n	8011776 <__libc_init_array+0x1e>
 8011790:	080265b8 	.word	0x080265b8
 8011794:	080265b8 	.word	0x080265b8
 8011798:	080265b8 	.word	0x080265b8
 801179c:	080265bc 	.word	0x080265bc

080117a0 <memcpy>:
 80117a0:	b510      	push	{r4, lr}
 80117a2:	1e43      	subs	r3, r0, #1
 80117a4:	440a      	add	r2, r1
 80117a6:	4291      	cmp	r1, r2
 80117a8:	d100      	bne.n	80117ac <memcpy+0xc>
 80117aa:	bd10      	pop	{r4, pc}
 80117ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80117b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80117b4:	e7f7      	b.n	80117a6 <memcpy+0x6>

080117b6 <memset>:
 80117b6:	4402      	add	r2, r0
 80117b8:	4603      	mov	r3, r0
 80117ba:	4293      	cmp	r3, r2
 80117bc:	d100      	bne.n	80117c0 <memset+0xa>
 80117be:	4770      	bx	lr
 80117c0:	f803 1b01 	strb.w	r1, [r3], #1
 80117c4:	e7f9      	b.n	80117ba <memset+0x4>
	...

080117c8 <iprintf>:
 80117c8:	b40f      	push	{r0, r1, r2, r3}
 80117ca:	4b0a      	ldr	r3, [pc, #40]	; (80117f4 <iprintf+0x2c>)
 80117cc:	b513      	push	{r0, r1, r4, lr}
 80117ce:	681c      	ldr	r4, [r3, #0]
 80117d0:	b124      	cbz	r4, 80117dc <iprintf+0x14>
 80117d2:	69a3      	ldr	r3, [r4, #24]
 80117d4:	b913      	cbnz	r3, 80117dc <iprintf+0x14>
 80117d6:	4620      	mov	r0, r4
 80117d8:	f000 fa22 	bl	8011c20 <__sinit>
 80117dc:	ab05      	add	r3, sp, #20
 80117de:	9a04      	ldr	r2, [sp, #16]
 80117e0:	68a1      	ldr	r1, [r4, #8]
 80117e2:	9301      	str	r3, [sp, #4]
 80117e4:	4620      	mov	r0, r4
 80117e6:	f000 fbdb 	bl	8011fa0 <_vfiprintf_r>
 80117ea:	b002      	add	sp, #8
 80117ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80117f0:	b004      	add	sp, #16
 80117f2:	4770      	bx	lr
 80117f4:	2000001c 	.word	0x2000001c

080117f8 <_puts_r>:
 80117f8:	b570      	push	{r4, r5, r6, lr}
 80117fa:	460e      	mov	r6, r1
 80117fc:	4605      	mov	r5, r0
 80117fe:	b118      	cbz	r0, 8011808 <_puts_r+0x10>
 8011800:	6983      	ldr	r3, [r0, #24]
 8011802:	b90b      	cbnz	r3, 8011808 <_puts_r+0x10>
 8011804:	f000 fa0c 	bl	8011c20 <__sinit>
 8011808:	69ab      	ldr	r3, [r5, #24]
 801180a:	68ac      	ldr	r4, [r5, #8]
 801180c:	b913      	cbnz	r3, 8011814 <_puts_r+0x1c>
 801180e:	4628      	mov	r0, r5
 8011810:	f000 fa06 	bl	8011c20 <__sinit>
 8011814:	4b23      	ldr	r3, [pc, #140]	; (80118a4 <_puts_r+0xac>)
 8011816:	429c      	cmp	r4, r3
 8011818:	d117      	bne.n	801184a <_puts_r+0x52>
 801181a:	686c      	ldr	r4, [r5, #4]
 801181c:	89a3      	ldrh	r3, [r4, #12]
 801181e:	071b      	lsls	r3, r3, #28
 8011820:	d51d      	bpl.n	801185e <_puts_r+0x66>
 8011822:	6923      	ldr	r3, [r4, #16]
 8011824:	b1db      	cbz	r3, 801185e <_puts_r+0x66>
 8011826:	3e01      	subs	r6, #1
 8011828:	68a3      	ldr	r3, [r4, #8]
 801182a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801182e:	3b01      	subs	r3, #1
 8011830:	60a3      	str	r3, [r4, #8]
 8011832:	b9e9      	cbnz	r1, 8011870 <_puts_r+0x78>
 8011834:	2b00      	cmp	r3, #0
 8011836:	da2e      	bge.n	8011896 <_puts_r+0x9e>
 8011838:	4622      	mov	r2, r4
 801183a:	210a      	movs	r1, #10
 801183c:	4628      	mov	r0, r5
 801183e:	f000 f83f 	bl	80118c0 <__swbuf_r>
 8011842:	3001      	adds	r0, #1
 8011844:	d011      	beq.n	801186a <_puts_r+0x72>
 8011846:	200a      	movs	r0, #10
 8011848:	e011      	b.n	801186e <_puts_r+0x76>
 801184a:	4b17      	ldr	r3, [pc, #92]	; (80118a8 <_puts_r+0xb0>)
 801184c:	429c      	cmp	r4, r3
 801184e:	d101      	bne.n	8011854 <_puts_r+0x5c>
 8011850:	68ac      	ldr	r4, [r5, #8]
 8011852:	e7e3      	b.n	801181c <_puts_r+0x24>
 8011854:	4b15      	ldr	r3, [pc, #84]	; (80118ac <_puts_r+0xb4>)
 8011856:	429c      	cmp	r4, r3
 8011858:	bf08      	it	eq
 801185a:	68ec      	ldreq	r4, [r5, #12]
 801185c:	e7de      	b.n	801181c <_puts_r+0x24>
 801185e:	4621      	mov	r1, r4
 8011860:	4628      	mov	r0, r5
 8011862:	f000 f87f 	bl	8011964 <__swsetup_r>
 8011866:	2800      	cmp	r0, #0
 8011868:	d0dd      	beq.n	8011826 <_puts_r+0x2e>
 801186a:	f04f 30ff 	mov.w	r0, #4294967295
 801186e:	bd70      	pop	{r4, r5, r6, pc}
 8011870:	2b00      	cmp	r3, #0
 8011872:	da04      	bge.n	801187e <_puts_r+0x86>
 8011874:	69a2      	ldr	r2, [r4, #24]
 8011876:	429a      	cmp	r2, r3
 8011878:	dc06      	bgt.n	8011888 <_puts_r+0x90>
 801187a:	290a      	cmp	r1, #10
 801187c:	d004      	beq.n	8011888 <_puts_r+0x90>
 801187e:	6823      	ldr	r3, [r4, #0]
 8011880:	1c5a      	adds	r2, r3, #1
 8011882:	6022      	str	r2, [r4, #0]
 8011884:	7019      	strb	r1, [r3, #0]
 8011886:	e7cf      	b.n	8011828 <_puts_r+0x30>
 8011888:	4622      	mov	r2, r4
 801188a:	4628      	mov	r0, r5
 801188c:	f000 f818 	bl	80118c0 <__swbuf_r>
 8011890:	3001      	adds	r0, #1
 8011892:	d1c9      	bne.n	8011828 <_puts_r+0x30>
 8011894:	e7e9      	b.n	801186a <_puts_r+0x72>
 8011896:	6823      	ldr	r3, [r4, #0]
 8011898:	200a      	movs	r0, #10
 801189a:	1c5a      	adds	r2, r3, #1
 801189c:	6022      	str	r2, [r4, #0]
 801189e:	7018      	strb	r0, [r3, #0]
 80118a0:	e7e5      	b.n	801186e <_puts_r+0x76>
 80118a2:	bf00      	nop
 80118a4:	08026514 	.word	0x08026514
 80118a8:	08026534 	.word	0x08026534
 80118ac:	080264f4 	.word	0x080264f4

080118b0 <puts>:
 80118b0:	4b02      	ldr	r3, [pc, #8]	; (80118bc <puts+0xc>)
 80118b2:	4601      	mov	r1, r0
 80118b4:	6818      	ldr	r0, [r3, #0]
 80118b6:	f7ff bf9f 	b.w	80117f8 <_puts_r>
 80118ba:	bf00      	nop
 80118bc:	2000001c 	.word	0x2000001c

080118c0 <__swbuf_r>:
 80118c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118c2:	460e      	mov	r6, r1
 80118c4:	4614      	mov	r4, r2
 80118c6:	4605      	mov	r5, r0
 80118c8:	b118      	cbz	r0, 80118d2 <__swbuf_r+0x12>
 80118ca:	6983      	ldr	r3, [r0, #24]
 80118cc:	b90b      	cbnz	r3, 80118d2 <__swbuf_r+0x12>
 80118ce:	f000 f9a7 	bl	8011c20 <__sinit>
 80118d2:	4b21      	ldr	r3, [pc, #132]	; (8011958 <__swbuf_r+0x98>)
 80118d4:	429c      	cmp	r4, r3
 80118d6:	d12a      	bne.n	801192e <__swbuf_r+0x6e>
 80118d8:	686c      	ldr	r4, [r5, #4]
 80118da:	69a3      	ldr	r3, [r4, #24]
 80118dc:	60a3      	str	r3, [r4, #8]
 80118de:	89a3      	ldrh	r3, [r4, #12]
 80118e0:	071a      	lsls	r2, r3, #28
 80118e2:	d52e      	bpl.n	8011942 <__swbuf_r+0x82>
 80118e4:	6923      	ldr	r3, [r4, #16]
 80118e6:	b363      	cbz	r3, 8011942 <__swbuf_r+0x82>
 80118e8:	6923      	ldr	r3, [r4, #16]
 80118ea:	6820      	ldr	r0, [r4, #0]
 80118ec:	1ac0      	subs	r0, r0, r3
 80118ee:	6963      	ldr	r3, [r4, #20]
 80118f0:	b2f6      	uxtb	r6, r6
 80118f2:	4283      	cmp	r3, r0
 80118f4:	4637      	mov	r7, r6
 80118f6:	dc04      	bgt.n	8011902 <__swbuf_r+0x42>
 80118f8:	4621      	mov	r1, r4
 80118fa:	4628      	mov	r0, r5
 80118fc:	f000 f926 	bl	8011b4c <_fflush_r>
 8011900:	bb28      	cbnz	r0, 801194e <__swbuf_r+0x8e>
 8011902:	68a3      	ldr	r3, [r4, #8]
 8011904:	3b01      	subs	r3, #1
 8011906:	60a3      	str	r3, [r4, #8]
 8011908:	6823      	ldr	r3, [r4, #0]
 801190a:	1c5a      	adds	r2, r3, #1
 801190c:	6022      	str	r2, [r4, #0]
 801190e:	701e      	strb	r6, [r3, #0]
 8011910:	6963      	ldr	r3, [r4, #20]
 8011912:	3001      	adds	r0, #1
 8011914:	4283      	cmp	r3, r0
 8011916:	d004      	beq.n	8011922 <__swbuf_r+0x62>
 8011918:	89a3      	ldrh	r3, [r4, #12]
 801191a:	07db      	lsls	r3, r3, #31
 801191c:	d519      	bpl.n	8011952 <__swbuf_r+0x92>
 801191e:	2e0a      	cmp	r6, #10
 8011920:	d117      	bne.n	8011952 <__swbuf_r+0x92>
 8011922:	4621      	mov	r1, r4
 8011924:	4628      	mov	r0, r5
 8011926:	f000 f911 	bl	8011b4c <_fflush_r>
 801192a:	b190      	cbz	r0, 8011952 <__swbuf_r+0x92>
 801192c:	e00f      	b.n	801194e <__swbuf_r+0x8e>
 801192e:	4b0b      	ldr	r3, [pc, #44]	; (801195c <__swbuf_r+0x9c>)
 8011930:	429c      	cmp	r4, r3
 8011932:	d101      	bne.n	8011938 <__swbuf_r+0x78>
 8011934:	68ac      	ldr	r4, [r5, #8]
 8011936:	e7d0      	b.n	80118da <__swbuf_r+0x1a>
 8011938:	4b09      	ldr	r3, [pc, #36]	; (8011960 <__swbuf_r+0xa0>)
 801193a:	429c      	cmp	r4, r3
 801193c:	bf08      	it	eq
 801193e:	68ec      	ldreq	r4, [r5, #12]
 8011940:	e7cb      	b.n	80118da <__swbuf_r+0x1a>
 8011942:	4621      	mov	r1, r4
 8011944:	4628      	mov	r0, r5
 8011946:	f000 f80d 	bl	8011964 <__swsetup_r>
 801194a:	2800      	cmp	r0, #0
 801194c:	d0cc      	beq.n	80118e8 <__swbuf_r+0x28>
 801194e:	f04f 37ff 	mov.w	r7, #4294967295
 8011952:	4638      	mov	r0, r7
 8011954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011956:	bf00      	nop
 8011958:	08026514 	.word	0x08026514
 801195c:	08026534 	.word	0x08026534
 8011960:	080264f4 	.word	0x080264f4

08011964 <__swsetup_r>:
 8011964:	4b32      	ldr	r3, [pc, #200]	; (8011a30 <__swsetup_r+0xcc>)
 8011966:	b570      	push	{r4, r5, r6, lr}
 8011968:	681d      	ldr	r5, [r3, #0]
 801196a:	4606      	mov	r6, r0
 801196c:	460c      	mov	r4, r1
 801196e:	b125      	cbz	r5, 801197a <__swsetup_r+0x16>
 8011970:	69ab      	ldr	r3, [r5, #24]
 8011972:	b913      	cbnz	r3, 801197a <__swsetup_r+0x16>
 8011974:	4628      	mov	r0, r5
 8011976:	f000 f953 	bl	8011c20 <__sinit>
 801197a:	4b2e      	ldr	r3, [pc, #184]	; (8011a34 <__swsetup_r+0xd0>)
 801197c:	429c      	cmp	r4, r3
 801197e:	d10f      	bne.n	80119a0 <__swsetup_r+0x3c>
 8011980:	686c      	ldr	r4, [r5, #4]
 8011982:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011986:	b29a      	uxth	r2, r3
 8011988:	0715      	lsls	r5, r2, #28
 801198a:	d42c      	bmi.n	80119e6 <__swsetup_r+0x82>
 801198c:	06d0      	lsls	r0, r2, #27
 801198e:	d411      	bmi.n	80119b4 <__swsetup_r+0x50>
 8011990:	2209      	movs	r2, #9
 8011992:	6032      	str	r2, [r6, #0]
 8011994:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011998:	81a3      	strh	r3, [r4, #12]
 801199a:	f04f 30ff 	mov.w	r0, #4294967295
 801199e:	e03e      	b.n	8011a1e <__swsetup_r+0xba>
 80119a0:	4b25      	ldr	r3, [pc, #148]	; (8011a38 <__swsetup_r+0xd4>)
 80119a2:	429c      	cmp	r4, r3
 80119a4:	d101      	bne.n	80119aa <__swsetup_r+0x46>
 80119a6:	68ac      	ldr	r4, [r5, #8]
 80119a8:	e7eb      	b.n	8011982 <__swsetup_r+0x1e>
 80119aa:	4b24      	ldr	r3, [pc, #144]	; (8011a3c <__swsetup_r+0xd8>)
 80119ac:	429c      	cmp	r4, r3
 80119ae:	bf08      	it	eq
 80119b0:	68ec      	ldreq	r4, [r5, #12]
 80119b2:	e7e6      	b.n	8011982 <__swsetup_r+0x1e>
 80119b4:	0751      	lsls	r1, r2, #29
 80119b6:	d512      	bpl.n	80119de <__swsetup_r+0x7a>
 80119b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80119ba:	b141      	cbz	r1, 80119ce <__swsetup_r+0x6a>
 80119bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80119c0:	4299      	cmp	r1, r3
 80119c2:	d002      	beq.n	80119ca <__swsetup_r+0x66>
 80119c4:	4630      	mov	r0, r6
 80119c6:	f000 fa19 	bl	8011dfc <_free_r>
 80119ca:	2300      	movs	r3, #0
 80119cc:	6363      	str	r3, [r4, #52]	; 0x34
 80119ce:	89a3      	ldrh	r3, [r4, #12]
 80119d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80119d4:	81a3      	strh	r3, [r4, #12]
 80119d6:	2300      	movs	r3, #0
 80119d8:	6063      	str	r3, [r4, #4]
 80119da:	6923      	ldr	r3, [r4, #16]
 80119dc:	6023      	str	r3, [r4, #0]
 80119de:	89a3      	ldrh	r3, [r4, #12]
 80119e0:	f043 0308 	orr.w	r3, r3, #8
 80119e4:	81a3      	strh	r3, [r4, #12]
 80119e6:	6923      	ldr	r3, [r4, #16]
 80119e8:	b94b      	cbnz	r3, 80119fe <__swsetup_r+0x9a>
 80119ea:	89a3      	ldrh	r3, [r4, #12]
 80119ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80119f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80119f4:	d003      	beq.n	80119fe <__swsetup_r+0x9a>
 80119f6:	4621      	mov	r1, r4
 80119f8:	4630      	mov	r0, r6
 80119fa:	f000 f9bf 	bl	8011d7c <__smakebuf_r>
 80119fe:	89a2      	ldrh	r2, [r4, #12]
 8011a00:	f012 0301 	ands.w	r3, r2, #1
 8011a04:	d00c      	beq.n	8011a20 <__swsetup_r+0xbc>
 8011a06:	2300      	movs	r3, #0
 8011a08:	60a3      	str	r3, [r4, #8]
 8011a0a:	6963      	ldr	r3, [r4, #20]
 8011a0c:	425b      	negs	r3, r3
 8011a0e:	61a3      	str	r3, [r4, #24]
 8011a10:	6923      	ldr	r3, [r4, #16]
 8011a12:	b953      	cbnz	r3, 8011a2a <__swsetup_r+0xc6>
 8011a14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a18:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8011a1c:	d1ba      	bne.n	8011994 <__swsetup_r+0x30>
 8011a1e:	bd70      	pop	{r4, r5, r6, pc}
 8011a20:	0792      	lsls	r2, r2, #30
 8011a22:	bf58      	it	pl
 8011a24:	6963      	ldrpl	r3, [r4, #20]
 8011a26:	60a3      	str	r3, [r4, #8]
 8011a28:	e7f2      	b.n	8011a10 <__swsetup_r+0xac>
 8011a2a:	2000      	movs	r0, #0
 8011a2c:	e7f7      	b.n	8011a1e <__swsetup_r+0xba>
 8011a2e:	bf00      	nop
 8011a30:	2000001c 	.word	0x2000001c
 8011a34:	08026514 	.word	0x08026514
 8011a38:	08026534 	.word	0x08026534
 8011a3c:	080264f4 	.word	0x080264f4

08011a40 <__sflush_r>:
 8011a40:	898a      	ldrh	r2, [r1, #12]
 8011a42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a46:	4605      	mov	r5, r0
 8011a48:	0710      	lsls	r0, r2, #28
 8011a4a:	460c      	mov	r4, r1
 8011a4c:	d458      	bmi.n	8011b00 <__sflush_r+0xc0>
 8011a4e:	684b      	ldr	r3, [r1, #4]
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	dc05      	bgt.n	8011a60 <__sflush_r+0x20>
 8011a54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	dc02      	bgt.n	8011a60 <__sflush_r+0x20>
 8011a5a:	2000      	movs	r0, #0
 8011a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011a62:	2e00      	cmp	r6, #0
 8011a64:	d0f9      	beq.n	8011a5a <__sflush_r+0x1a>
 8011a66:	2300      	movs	r3, #0
 8011a68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011a6c:	682f      	ldr	r7, [r5, #0]
 8011a6e:	6a21      	ldr	r1, [r4, #32]
 8011a70:	602b      	str	r3, [r5, #0]
 8011a72:	d032      	beq.n	8011ada <__sflush_r+0x9a>
 8011a74:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011a76:	89a3      	ldrh	r3, [r4, #12]
 8011a78:	075a      	lsls	r2, r3, #29
 8011a7a:	d505      	bpl.n	8011a88 <__sflush_r+0x48>
 8011a7c:	6863      	ldr	r3, [r4, #4]
 8011a7e:	1ac0      	subs	r0, r0, r3
 8011a80:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011a82:	b10b      	cbz	r3, 8011a88 <__sflush_r+0x48>
 8011a84:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011a86:	1ac0      	subs	r0, r0, r3
 8011a88:	2300      	movs	r3, #0
 8011a8a:	4602      	mov	r2, r0
 8011a8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011a8e:	6a21      	ldr	r1, [r4, #32]
 8011a90:	4628      	mov	r0, r5
 8011a92:	47b0      	blx	r6
 8011a94:	1c43      	adds	r3, r0, #1
 8011a96:	89a3      	ldrh	r3, [r4, #12]
 8011a98:	d106      	bne.n	8011aa8 <__sflush_r+0x68>
 8011a9a:	6829      	ldr	r1, [r5, #0]
 8011a9c:	291d      	cmp	r1, #29
 8011a9e:	d848      	bhi.n	8011b32 <__sflush_r+0xf2>
 8011aa0:	4a29      	ldr	r2, [pc, #164]	; (8011b48 <__sflush_r+0x108>)
 8011aa2:	40ca      	lsrs	r2, r1
 8011aa4:	07d6      	lsls	r6, r2, #31
 8011aa6:	d544      	bpl.n	8011b32 <__sflush_r+0xf2>
 8011aa8:	2200      	movs	r2, #0
 8011aaa:	6062      	str	r2, [r4, #4]
 8011aac:	04d9      	lsls	r1, r3, #19
 8011aae:	6922      	ldr	r2, [r4, #16]
 8011ab0:	6022      	str	r2, [r4, #0]
 8011ab2:	d504      	bpl.n	8011abe <__sflush_r+0x7e>
 8011ab4:	1c42      	adds	r2, r0, #1
 8011ab6:	d101      	bne.n	8011abc <__sflush_r+0x7c>
 8011ab8:	682b      	ldr	r3, [r5, #0]
 8011aba:	b903      	cbnz	r3, 8011abe <__sflush_r+0x7e>
 8011abc:	6560      	str	r0, [r4, #84]	; 0x54
 8011abe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011ac0:	602f      	str	r7, [r5, #0]
 8011ac2:	2900      	cmp	r1, #0
 8011ac4:	d0c9      	beq.n	8011a5a <__sflush_r+0x1a>
 8011ac6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011aca:	4299      	cmp	r1, r3
 8011acc:	d002      	beq.n	8011ad4 <__sflush_r+0x94>
 8011ace:	4628      	mov	r0, r5
 8011ad0:	f000 f994 	bl	8011dfc <_free_r>
 8011ad4:	2000      	movs	r0, #0
 8011ad6:	6360      	str	r0, [r4, #52]	; 0x34
 8011ad8:	e7c0      	b.n	8011a5c <__sflush_r+0x1c>
 8011ada:	2301      	movs	r3, #1
 8011adc:	4628      	mov	r0, r5
 8011ade:	47b0      	blx	r6
 8011ae0:	1c41      	adds	r1, r0, #1
 8011ae2:	d1c8      	bne.n	8011a76 <__sflush_r+0x36>
 8011ae4:	682b      	ldr	r3, [r5, #0]
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d0c5      	beq.n	8011a76 <__sflush_r+0x36>
 8011aea:	2b1d      	cmp	r3, #29
 8011aec:	d001      	beq.n	8011af2 <__sflush_r+0xb2>
 8011aee:	2b16      	cmp	r3, #22
 8011af0:	d101      	bne.n	8011af6 <__sflush_r+0xb6>
 8011af2:	602f      	str	r7, [r5, #0]
 8011af4:	e7b1      	b.n	8011a5a <__sflush_r+0x1a>
 8011af6:	89a3      	ldrh	r3, [r4, #12]
 8011af8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011afc:	81a3      	strh	r3, [r4, #12]
 8011afe:	e7ad      	b.n	8011a5c <__sflush_r+0x1c>
 8011b00:	690f      	ldr	r7, [r1, #16]
 8011b02:	2f00      	cmp	r7, #0
 8011b04:	d0a9      	beq.n	8011a5a <__sflush_r+0x1a>
 8011b06:	0793      	lsls	r3, r2, #30
 8011b08:	680e      	ldr	r6, [r1, #0]
 8011b0a:	bf08      	it	eq
 8011b0c:	694b      	ldreq	r3, [r1, #20]
 8011b0e:	600f      	str	r7, [r1, #0]
 8011b10:	bf18      	it	ne
 8011b12:	2300      	movne	r3, #0
 8011b14:	eba6 0807 	sub.w	r8, r6, r7
 8011b18:	608b      	str	r3, [r1, #8]
 8011b1a:	f1b8 0f00 	cmp.w	r8, #0
 8011b1e:	dd9c      	ble.n	8011a5a <__sflush_r+0x1a>
 8011b20:	4643      	mov	r3, r8
 8011b22:	463a      	mov	r2, r7
 8011b24:	6a21      	ldr	r1, [r4, #32]
 8011b26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011b28:	4628      	mov	r0, r5
 8011b2a:	47b0      	blx	r6
 8011b2c:	2800      	cmp	r0, #0
 8011b2e:	dc06      	bgt.n	8011b3e <__sflush_r+0xfe>
 8011b30:	89a3      	ldrh	r3, [r4, #12]
 8011b32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b36:	81a3      	strh	r3, [r4, #12]
 8011b38:	f04f 30ff 	mov.w	r0, #4294967295
 8011b3c:	e78e      	b.n	8011a5c <__sflush_r+0x1c>
 8011b3e:	4407      	add	r7, r0
 8011b40:	eba8 0800 	sub.w	r8, r8, r0
 8011b44:	e7e9      	b.n	8011b1a <__sflush_r+0xda>
 8011b46:	bf00      	nop
 8011b48:	20400001 	.word	0x20400001

08011b4c <_fflush_r>:
 8011b4c:	b538      	push	{r3, r4, r5, lr}
 8011b4e:	690b      	ldr	r3, [r1, #16]
 8011b50:	4605      	mov	r5, r0
 8011b52:	460c      	mov	r4, r1
 8011b54:	b1db      	cbz	r3, 8011b8e <_fflush_r+0x42>
 8011b56:	b118      	cbz	r0, 8011b60 <_fflush_r+0x14>
 8011b58:	6983      	ldr	r3, [r0, #24]
 8011b5a:	b90b      	cbnz	r3, 8011b60 <_fflush_r+0x14>
 8011b5c:	f000 f860 	bl	8011c20 <__sinit>
 8011b60:	4b0c      	ldr	r3, [pc, #48]	; (8011b94 <_fflush_r+0x48>)
 8011b62:	429c      	cmp	r4, r3
 8011b64:	d109      	bne.n	8011b7a <_fflush_r+0x2e>
 8011b66:	686c      	ldr	r4, [r5, #4]
 8011b68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b6c:	b17b      	cbz	r3, 8011b8e <_fflush_r+0x42>
 8011b6e:	4621      	mov	r1, r4
 8011b70:	4628      	mov	r0, r5
 8011b72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011b76:	f7ff bf63 	b.w	8011a40 <__sflush_r>
 8011b7a:	4b07      	ldr	r3, [pc, #28]	; (8011b98 <_fflush_r+0x4c>)
 8011b7c:	429c      	cmp	r4, r3
 8011b7e:	d101      	bne.n	8011b84 <_fflush_r+0x38>
 8011b80:	68ac      	ldr	r4, [r5, #8]
 8011b82:	e7f1      	b.n	8011b68 <_fflush_r+0x1c>
 8011b84:	4b05      	ldr	r3, [pc, #20]	; (8011b9c <_fflush_r+0x50>)
 8011b86:	429c      	cmp	r4, r3
 8011b88:	bf08      	it	eq
 8011b8a:	68ec      	ldreq	r4, [r5, #12]
 8011b8c:	e7ec      	b.n	8011b68 <_fflush_r+0x1c>
 8011b8e:	2000      	movs	r0, #0
 8011b90:	bd38      	pop	{r3, r4, r5, pc}
 8011b92:	bf00      	nop
 8011b94:	08026514 	.word	0x08026514
 8011b98:	08026534 	.word	0x08026534
 8011b9c:	080264f4 	.word	0x080264f4

08011ba0 <std>:
 8011ba0:	2300      	movs	r3, #0
 8011ba2:	b510      	push	{r4, lr}
 8011ba4:	4604      	mov	r4, r0
 8011ba6:	e9c0 3300 	strd	r3, r3, [r0]
 8011baa:	6083      	str	r3, [r0, #8]
 8011bac:	8181      	strh	r1, [r0, #12]
 8011bae:	6643      	str	r3, [r0, #100]	; 0x64
 8011bb0:	81c2      	strh	r2, [r0, #14]
 8011bb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011bb6:	6183      	str	r3, [r0, #24]
 8011bb8:	4619      	mov	r1, r3
 8011bba:	2208      	movs	r2, #8
 8011bbc:	305c      	adds	r0, #92	; 0x5c
 8011bbe:	f7ff fdfa 	bl	80117b6 <memset>
 8011bc2:	4b05      	ldr	r3, [pc, #20]	; (8011bd8 <std+0x38>)
 8011bc4:	6263      	str	r3, [r4, #36]	; 0x24
 8011bc6:	4b05      	ldr	r3, [pc, #20]	; (8011bdc <std+0x3c>)
 8011bc8:	62a3      	str	r3, [r4, #40]	; 0x28
 8011bca:	4b05      	ldr	r3, [pc, #20]	; (8011be0 <std+0x40>)
 8011bcc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011bce:	4b05      	ldr	r3, [pc, #20]	; (8011be4 <std+0x44>)
 8011bd0:	6224      	str	r4, [r4, #32]
 8011bd2:	6323      	str	r3, [r4, #48]	; 0x30
 8011bd4:	bd10      	pop	{r4, pc}
 8011bd6:	bf00      	nop
 8011bd8:	080124fd 	.word	0x080124fd
 8011bdc:	0801251f 	.word	0x0801251f
 8011be0:	08012557 	.word	0x08012557
 8011be4:	0801257b 	.word	0x0801257b

08011be8 <_cleanup_r>:
 8011be8:	4901      	ldr	r1, [pc, #4]	; (8011bf0 <_cleanup_r+0x8>)
 8011bea:	f000 b885 	b.w	8011cf8 <_fwalk_reent>
 8011bee:	bf00      	nop
 8011bf0:	08011b4d 	.word	0x08011b4d

08011bf4 <__sfmoreglue>:
 8011bf4:	b570      	push	{r4, r5, r6, lr}
 8011bf6:	1e4a      	subs	r2, r1, #1
 8011bf8:	2568      	movs	r5, #104	; 0x68
 8011bfa:	4355      	muls	r5, r2
 8011bfc:	460e      	mov	r6, r1
 8011bfe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011c02:	f000 f949 	bl	8011e98 <_malloc_r>
 8011c06:	4604      	mov	r4, r0
 8011c08:	b140      	cbz	r0, 8011c1c <__sfmoreglue+0x28>
 8011c0a:	2100      	movs	r1, #0
 8011c0c:	e9c0 1600 	strd	r1, r6, [r0]
 8011c10:	300c      	adds	r0, #12
 8011c12:	60a0      	str	r0, [r4, #8]
 8011c14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011c18:	f7ff fdcd 	bl	80117b6 <memset>
 8011c1c:	4620      	mov	r0, r4
 8011c1e:	bd70      	pop	{r4, r5, r6, pc}

08011c20 <__sinit>:
 8011c20:	6983      	ldr	r3, [r0, #24]
 8011c22:	b510      	push	{r4, lr}
 8011c24:	4604      	mov	r4, r0
 8011c26:	bb33      	cbnz	r3, 8011c76 <__sinit+0x56>
 8011c28:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8011c2c:	6503      	str	r3, [r0, #80]	; 0x50
 8011c2e:	4b12      	ldr	r3, [pc, #72]	; (8011c78 <__sinit+0x58>)
 8011c30:	4a12      	ldr	r2, [pc, #72]	; (8011c7c <__sinit+0x5c>)
 8011c32:	681b      	ldr	r3, [r3, #0]
 8011c34:	6282      	str	r2, [r0, #40]	; 0x28
 8011c36:	4298      	cmp	r0, r3
 8011c38:	bf04      	itt	eq
 8011c3a:	2301      	moveq	r3, #1
 8011c3c:	6183      	streq	r3, [r0, #24]
 8011c3e:	f000 f81f 	bl	8011c80 <__sfp>
 8011c42:	6060      	str	r0, [r4, #4]
 8011c44:	4620      	mov	r0, r4
 8011c46:	f000 f81b 	bl	8011c80 <__sfp>
 8011c4a:	60a0      	str	r0, [r4, #8]
 8011c4c:	4620      	mov	r0, r4
 8011c4e:	f000 f817 	bl	8011c80 <__sfp>
 8011c52:	2200      	movs	r2, #0
 8011c54:	60e0      	str	r0, [r4, #12]
 8011c56:	2104      	movs	r1, #4
 8011c58:	6860      	ldr	r0, [r4, #4]
 8011c5a:	f7ff ffa1 	bl	8011ba0 <std>
 8011c5e:	2201      	movs	r2, #1
 8011c60:	2109      	movs	r1, #9
 8011c62:	68a0      	ldr	r0, [r4, #8]
 8011c64:	f7ff ff9c 	bl	8011ba0 <std>
 8011c68:	2202      	movs	r2, #2
 8011c6a:	2112      	movs	r1, #18
 8011c6c:	68e0      	ldr	r0, [r4, #12]
 8011c6e:	f7ff ff97 	bl	8011ba0 <std>
 8011c72:	2301      	movs	r3, #1
 8011c74:	61a3      	str	r3, [r4, #24]
 8011c76:	bd10      	pop	{r4, pc}
 8011c78:	080264f0 	.word	0x080264f0
 8011c7c:	08011be9 	.word	0x08011be9

08011c80 <__sfp>:
 8011c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c82:	4b1b      	ldr	r3, [pc, #108]	; (8011cf0 <__sfp+0x70>)
 8011c84:	681e      	ldr	r6, [r3, #0]
 8011c86:	69b3      	ldr	r3, [r6, #24]
 8011c88:	4607      	mov	r7, r0
 8011c8a:	b913      	cbnz	r3, 8011c92 <__sfp+0x12>
 8011c8c:	4630      	mov	r0, r6
 8011c8e:	f7ff ffc7 	bl	8011c20 <__sinit>
 8011c92:	3648      	adds	r6, #72	; 0x48
 8011c94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011c98:	3b01      	subs	r3, #1
 8011c9a:	d503      	bpl.n	8011ca4 <__sfp+0x24>
 8011c9c:	6833      	ldr	r3, [r6, #0]
 8011c9e:	b133      	cbz	r3, 8011cae <__sfp+0x2e>
 8011ca0:	6836      	ldr	r6, [r6, #0]
 8011ca2:	e7f7      	b.n	8011c94 <__sfp+0x14>
 8011ca4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011ca8:	b16d      	cbz	r5, 8011cc6 <__sfp+0x46>
 8011caa:	3468      	adds	r4, #104	; 0x68
 8011cac:	e7f4      	b.n	8011c98 <__sfp+0x18>
 8011cae:	2104      	movs	r1, #4
 8011cb0:	4638      	mov	r0, r7
 8011cb2:	f7ff ff9f 	bl	8011bf4 <__sfmoreglue>
 8011cb6:	6030      	str	r0, [r6, #0]
 8011cb8:	2800      	cmp	r0, #0
 8011cba:	d1f1      	bne.n	8011ca0 <__sfp+0x20>
 8011cbc:	230c      	movs	r3, #12
 8011cbe:	603b      	str	r3, [r7, #0]
 8011cc0:	4604      	mov	r4, r0
 8011cc2:	4620      	mov	r0, r4
 8011cc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011cc6:	4b0b      	ldr	r3, [pc, #44]	; (8011cf4 <__sfp+0x74>)
 8011cc8:	6665      	str	r5, [r4, #100]	; 0x64
 8011cca:	e9c4 5500 	strd	r5, r5, [r4]
 8011cce:	60a5      	str	r5, [r4, #8]
 8011cd0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8011cd4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8011cd8:	2208      	movs	r2, #8
 8011cda:	4629      	mov	r1, r5
 8011cdc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011ce0:	f7ff fd69 	bl	80117b6 <memset>
 8011ce4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011ce8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011cec:	e7e9      	b.n	8011cc2 <__sfp+0x42>
 8011cee:	bf00      	nop
 8011cf0:	080264f0 	.word	0x080264f0
 8011cf4:	ffff0001 	.word	0xffff0001

08011cf8 <_fwalk_reent>:
 8011cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011cfc:	4680      	mov	r8, r0
 8011cfe:	4689      	mov	r9, r1
 8011d00:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011d04:	2600      	movs	r6, #0
 8011d06:	b914      	cbnz	r4, 8011d0e <_fwalk_reent+0x16>
 8011d08:	4630      	mov	r0, r6
 8011d0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011d0e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8011d12:	3f01      	subs	r7, #1
 8011d14:	d501      	bpl.n	8011d1a <_fwalk_reent+0x22>
 8011d16:	6824      	ldr	r4, [r4, #0]
 8011d18:	e7f5      	b.n	8011d06 <_fwalk_reent+0xe>
 8011d1a:	89ab      	ldrh	r3, [r5, #12]
 8011d1c:	2b01      	cmp	r3, #1
 8011d1e:	d907      	bls.n	8011d30 <_fwalk_reent+0x38>
 8011d20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011d24:	3301      	adds	r3, #1
 8011d26:	d003      	beq.n	8011d30 <_fwalk_reent+0x38>
 8011d28:	4629      	mov	r1, r5
 8011d2a:	4640      	mov	r0, r8
 8011d2c:	47c8      	blx	r9
 8011d2e:	4306      	orrs	r6, r0
 8011d30:	3568      	adds	r5, #104	; 0x68
 8011d32:	e7ee      	b.n	8011d12 <_fwalk_reent+0x1a>

08011d34 <__swhatbuf_r>:
 8011d34:	b570      	push	{r4, r5, r6, lr}
 8011d36:	460e      	mov	r6, r1
 8011d38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011d3c:	2900      	cmp	r1, #0
 8011d3e:	b096      	sub	sp, #88	; 0x58
 8011d40:	4614      	mov	r4, r2
 8011d42:	461d      	mov	r5, r3
 8011d44:	da07      	bge.n	8011d56 <__swhatbuf_r+0x22>
 8011d46:	2300      	movs	r3, #0
 8011d48:	602b      	str	r3, [r5, #0]
 8011d4a:	89b3      	ldrh	r3, [r6, #12]
 8011d4c:	061a      	lsls	r2, r3, #24
 8011d4e:	d410      	bmi.n	8011d72 <__swhatbuf_r+0x3e>
 8011d50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011d54:	e00e      	b.n	8011d74 <__swhatbuf_r+0x40>
 8011d56:	466a      	mov	r2, sp
 8011d58:	f000 fc36 	bl	80125c8 <_fstat_r>
 8011d5c:	2800      	cmp	r0, #0
 8011d5e:	dbf2      	blt.n	8011d46 <__swhatbuf_r+0x12>
 8011d60:	9a01      	ldr	r2, [sp, #4]
 8011d62:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011d66:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011d6a:	425a      	negs	r2, r3
 8011d6c:	415a      	adcs	r2, r3
 8011d6e:	602a      	str	r2, [r5, #0]
 8011d70:	e7ee      	b.n	8011d50 <__swhatbuf_r+0x1c>
 8011d72:	2340      	movs	r3, #64	; 0x40
 8011d74:	2000      	movs	r0, #0
 8011d76:	6023      	str	r3, [r4, #0]
 8011d78:	b016      	add	sp, #88	; 0x58
 8011d7a:	bd70      	pop	{r4, r5, r6, pc}

08011d7c <__smakebuf_r>:
 8011d7c:	898b      	ldrh	r3, [r1, #12]
 8011d7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011d80:	079d      	lsls	r5, r3, #30
 8011d82:	4606      	mov	r6, r0
 8011d84:	460c      	mov	r4, r1
 8011d86:	d507      	bpl.n	8011d98 <__smakebuf_r+0x1c>
 8011d88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011d8c:	6023      	str	r3, [r4, #0]
 8011d8e:	6123      	str	r3, [r4, #16]
 8011d90:	2301      	movs	r3, #1
 8011d92:	6163      	str	r3, [r4, #20]
 8011d94:	b002      	add	sp, #8
 8011d96:	bd70      	pop	{r4, r5, r6, pc}
 8011d98:	ab01      	add	r3, sp, #4
 8011d9a:	466a      	mov	r2, sp
 8011d9c:	f7ff ffca 	bl	8011d34 <__swhatbuf_r>
 8011da0:	9900      	ldr	r1, [sp, #0]
 8011da2:	4605      	mov	r5, r0
 8011da4:	4630      	mov	r0, r6
 8011da6:	f000 f877 	bl	8011e98 <_malloc_r>
 8011daa:	b948      	cbnz	r0, 8011dc0 <__smakebuf_r+0x44>
 8011dac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011db0:	059a      	lsls	r2, r3, #22
 8011db2:	d4ef      	bmi.n	8011d94 <__smakebuf_r+0x18>
 8011db4:	f023 0303 	bic.w	r3, r3, #3
 8011db8:	f043 0302 	orr.w	r3, r3, #2
 8011dbc:	81a3      	strh	r3, [r4, #12]
 8011dbe:	e7e3      	b.n	8011d88 <__smakebuf_r+0xc>
 8011dc0:	4b0d      	ldr	r3, [pc, #52]	; (8011df8 <__smakebuf_r+0x7c>)
 8011dc2:	62b3      	str	r3, [r6, #40]	; 0x28
 8011dc4:	89a3      	ldrh	r3, [r4, #12]
 8011dc6:	6020      	str	r0, [r4, #0]
 8011dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011dcc:	81a3      	strh	r3, [r4, #12]
 8011dce:	9b00      	ldr	r3, [sp, #0]
 8011dd0:	6163      	str	r3, [r4, #20]
 8011dd2:	9b01      	ldr	r3, [sp, #4]
 8011dd4:	6120      	str	r0, [r4, #16]
 8011dd6:	b15b      	cbz	r3, 8011df0 <__smakebuf_r+0x74>
 8011dd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011ddc:	4630      	mov	r0, r6
 8011dde:	f000 fc05 	bl	80125ec <_isatty_r>
 8011de2:	b128      	cbz	r0, 8011df0 <__smakebuf_r+0x74>
 8011de4:	89a3      	ldrh	r3, [r4, #12]
 8011de6:	f023 0303 	bic.w	r3, r3, #3
 8011dea:	f043 0301 	orr.w	r3, r3, #1
 8011dee:	81a3      	strh	r3, [r4, #12]
 8011df0:	89a3      	ldrh	r3, [r4, #12]
 8011df2:	431d      	orrs	r5, r3
 8011df4:	81a5      	strh	r5, [r4, #12]
 8011df6:	e7cd      	b.n	8011d94 <__smakebuf_r+0x18>
 8011df8:	08011be9 	.word	0x08011be9

08011dfc <_free_r>:
 8011dfc:	b538      	push	{r3, r4, r5, lr}
 8011dfe:	4605      	mov	r5, r0
 8011e00:	2900      	cmp	r1, #0
 8011e02:	d045      	beq.n	8011e90 <_free_r+0x94>
 8011e04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011e08:	1f0c      	subs	r4, r1, #4
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	bfb8      	it	lt
 8011e0e:	18e4      	addlt	r4, r4, r3
 8011e10:	f000 fc0e 	bl	8012630 <__malloc_lock>
 8011e14:	4a1f      	ldr	r2, [pc, #124]	; (8011e94 <_free_r+0x98>)
 8011e16:	6813      	ldr	r3, [r2, #0]
 8011e18:	4610      	mov	r0, r2
 8011e1a:	b933      	cbnz	r3, 8011e2a <_free_r+0x2e>
 8011e1c:	6063      	str	r3, [r4, #4]
 8011e1e:	6014      	str	r4, [r2, #0]
 8011e20:	4628      	mov	r0, r5
 8011e22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011e26:	f000 bc04 	b.w	8012632 <__malloc_unlock>
 8011e2a:	42a3      	cmp	r3, r4
 8011e2c:	d90c      	bls.n	8011e48 <_free_r+0x4c>
 8011e2e:	6821      	ldr	r1, [r4, #0]
 8011e30:	1862      	adds	r2, r4, r1
 8011e32:	4293      	cmp	r3, r2
 8011e34:	bf04      	itt	eq
 8011e36:	681a      	ldreq	r2, [r3, #0]
 8011e38:	685b      	ldreq	r3, [r3, #4]
 8011e3a:	6063      	str	r3, [r4, #4]
 8011e3c:	bf04      	itt	eq
 8011e3e:	1852      	addeq	r2, r2, r1
 8011e40:	6022      	streq	r2, [r4, #0]
 8011e42:	6004      	str	r4, [r0, #0]
 8011e44:	e7ec      	b.n	8011e20 <_free_r+0x24>
 8011e46:	4613      	mov	r3, r2
 8011e48:	685a      	ldr	r2, [r3, #4]
 8011e4a:	b10a      	cbz	r2, 8011e50 <_free_r+0x54>
 8011e4c:	42a2      	cmp	r2, r4
 8011e4e:	d9fa      	bls.n	8011e46 <_free_r+0x4a>
 8011e50:	6819      	ldr	r1, [r3, #0]
 8011e52:	1858      	adds	r0, r3, r1
 8011e54:	42a0      	cmp	r0, r4
 8011e56:	d10b      	bne.n	8011e70 <_free_r+0x74>
 8011e58:	6820      	ldr	r0, [r4, #0]
 8011e5a:	4401      	add	r1, r0
 8011e5c:	1858      	adds	r0, r3, r1
 8011e5e:	4282      	cmp	r2, r0
 8011e60:	6019      	str	r1, [r3, #0]
 8011e62:	d1dd      	bne.n	8011e20 <_free_r+0x24>
 8011e64:	6810      	ldr	r0, [r2, #0]
 8011e66:	6852      	ldr	r2, [r2, #4]
 8011e68:	605a      	str	r2, [r3, #4]
 8011e6a:	4401      	add	r1, r0
 8011e6c:	6019      	str	r1, [r3, #0]
 8011e6e:	e7d7      	b.n	8011e20 <_free_r+0x24>
 8011e70:	d902      	bls.n	8011e78 <_free_r+0x7c>
 8011e72:	230c      	movs	r3, #12
 8011e74:	602b      	str	r3, [r5, #0]
 8011e76:	e7d3      	b.n	8011e20 <_free_r+0x24>
 8011e78:	6820      	ldr	r0, [r4, #0]
 8011e7a:	1821      	adds	r1, r4, r0
 8011e7c:	428a      	cmp	r2, r1
 8011e7e:	bf04      	itt	eq
 8011e80:	6811      	ldreq	r1, [r2, #0]
 8011e82:	6852      	ldreq	r2, [r2, #4]
 8011e84:	6062      	str	r2, [r4, #4]
 8011e86:	bf04      	itt	eq
 8011e88:	1809      	addeq	r1, r1, r0
 8011e8a:	6021      	streq	r1, [r4, #0]
 8011e8c:	605c      	str	r4, [r3, #4]
 8011e8e:	e7c7      	b.n	8011e20 <_free_r+0x24>
 8011e90:	bd38      	pop	{r3, r4, r5, pc}
 8011e92:	bf00      	nop
 8011e94:	2000414c 	.word	0x2000414c

08011e98 <_malloc_r>:
 8011e98:	b570      	push	{r4, r5, r6, lr}
 8011e9a:	1ccd      	adds	r5, r1, #3
 8011e9c:	f025 0503 	bic.w	r5, r5, #3
 8011ea0:	3508      	adds	r5, #8
 8011ea2:	2d0c      	cmp	r5, #12
 8011ea4:	bf38      	it	cc
 8011ea6:	250c      	movcc	r5, #12
 8011ea8:	2d00      	cmp	r5, #0
 8011eaa:	4606      	mov	r6, r0
 8011eac:	db01      	blt.n	8011eb2 <_malloc_r+0x1a>
 8011eae:	42a9      	cmp	r1, r5
 8011eb0:	d903      	bls.n	8011eba <_malloc_r+0x22>
 8011eb2:	230c      	movs	r3, #12
 8011eb4:	6033      	str	r3, [r6, #0]
 8011eb6:	2000      	movs	r0, #0
 8011eb8:	bd70      	pop	{r4, r5, r6, pc}
 8011eba:	f000 fbb9 	bl	8012630 <__malloc_lock>
 8011ebe:	4a21      	ldr	r2, [pc, #132]	; (8011f44 <_malloc_r+0xac>)
 8011ec0:	6814      	ldr	r4, [r2, #0]
 8011ec2:	4621      	mov	r1, r4
 8011ec4:	b991      	cbnz	r1, 8011eec <_malloc_r+0x54>
 8011ec6:	4c20      	ldr	r4, [pc, #128]	; (8011f48 <_malloc_r+0xb0>)
 8011ec8:	6823      	ldr	r3, [r4, #0]
 8011eca:	b91b      	cbnz	r3, 8011ed4 <_malloc_r+0x3c>
 8011ecc:	4630      	mov	r0, r6
 8011ece:	f000 fb05 	bl	80124dc <_sbrk_r>
 8011ed2:	6020      	str	r0, [r4, #0]
 8011ed4:	4629      	mov	r1, r5
 8011ed6:	4630      	mov	r0, r6
 8011ed8:	f000 fb00 	bl	80124dc <_sbrk_r>
 8011edc:	1c43      	adds	r3, r0, #1
 8011ede:	d124      	bne.n	8011f2a <_malloc_r+0x92>
 8011ee0:	230c      	movs	r3, #12
 8011ee2:	6033      	str	r3, [r6, #0]
 8011ee4:	4630      	mov	r0, r6
 8011ee6:	f000 fba4 	bl	8012632 <__malloc_unlock>
 8011eea:	e7e4      	b.n	8011eb6 <_malloc_r+0x1e>
 8011eec:	680b      	ldr	r3, [r1, #0]
 8011eee:	1b5b      	subs	r3, r3, r5
 8011ef0:	d418      	bmi.n	8011f24 <_malloc_r+0x8c>
 8011ef2:	2b0b      	cmp	r3, #11
 8011ef4:	d90f      	bls.n	8011f16 <_malloc_r+0x7e>
 8011ef6:	600b      	str	r3, [r1, #0]
 8011ef8:	50cd      	str	r5, [r1, r3]
 8011efa:	18cc      	adds	r4, r1, r3
 8011efc:	4630      	mov	r0, r6
 8011efe:	f000 fb98 	bl	8012632 <__malloc_unlock>
 8011f02:	f104 000b 	add.w	r0, r4, #11
 8011f06:	1d23      	adds	r3, r4, #4
 8011f08:	f020 0007 	bic.w	r0, r0, #7
 8011f0c:	1ac3      	subs	r3, r0, r3
 8011f0e:	d0d3      	beq.n	8011eb8 <_malloc_r+0x20>
 8011f10:	425a      	negs	r2, r3
 8011f12:	50e2      	str	r2, [r4, r3]
 8011f14:	e7d0      	b.n	8011eb8 <_malloc_r+0x20>
 8011f16:	428c      	cmp	r4, r1
 8011f18:	684b      	ldr	r3, [r1, #4]
 8011f1a:	bf16      	itet	ne
 8011f1c:	6063      	strne	r3, [r4, #4]
 8011f1e:	6013      	streq	r3, [r2, #0]
 8011f20:	460c      	movne	r4, r1
 8011f22:	e7eb      	b.n	8011efc <_malloc_r+0x64>
 8011f24:	460c      	mov	r4, r1
 8011f26:	6849      	ldr	r1, [r1, #4]
 8011f28:	e7cc      	b.n	8011ec4 <_malloc_r+0x2c>
 8011f2a:	1cc4      	adds	r4, r0, #3
 8011f2c:	f024 0403 	bic.w	r4, r4, #3
 8011f30:	42a0      	cmp	r0, r4
 8011f32:	d005      	beq.n	8011f40 <_malloc_r+0xa8>
 8011f34:	1a21      	subs	r1, r4, r0
 8011f36:	4630      	mov	r0, r6
 8011f38:	f000 fad0 	bl	80124dc <_sbrk_r>
 8011f3c:	3001      	adds	r0, #1
 8011f3e:	d0cf      	beq.n	8011ee0 <_malloc_r+0x48>
 8011f40:	6025      	str	r5, [r4, #0]
 8011f42:	e7db      	b.n	8011efc <_malloc_r+0x64>
 8011f44:	2000414c 	.word	0x2000414c
 8011f48:	20004150 	.word	0x20004150

08011f4c <__sfputc_r>:
 8011f4c:	6893      	ldr	r3, [r2, #8]
 8011f4e:	3b01      	subs	r3, #1
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	b410      	push	{r4}
 8011f54:	6093      	str	r3, [r2, #8]
 8011f56:	da08      	bge.n	8011f6a <__sfputc_r+0x1e>
 8011f58:	6994      	ldr	r4, [r2, #24]
 8011f5a:	42a3      	cmp	r3, r4
 8011f5c:	db01      	blt.n	8011f62 <__sfputc_r+0x16>
 8011f5e:	290a      	cmp	r1, #10
 8011f60:	d103      	bne.n	8011f6a <__sfputc_r+0x1e>
 8011f62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f66:	f7ff bcab 	b.w	80118c0 <__swbuf_r>
 8011f6a:	6813      	ldr	r3, [r2, #0]
 8011f6c:	1c58      	adds	r0, r3, #1
 8011f6e:	6010      	str	r0, [r2, #0]
 8011f70:	7019      	strb	r1, [r3, #0]
 8011f72:	4608      	mov	r0, r1
 8011f74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f78:	4770      	bx	lr

08011f7a <__sfputs_r>:
 8011f7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f7c:	4606      	mov	r6, r0
 8011f7e:	460f      	mov	r7, r1
 8011f80:	4614      	mov	r4, r2
 8011f82:	18d5      	adds	r5, r2, r3
 8011f84:	42ac      	cmp	r4, r5
 8011f86:	d101      	bne.n	8011f8c <__sfputs_r+0x12>
 8011f88:	2000      	movs	r0, #0
 8011f8a:	e007      	b.n	8011f9c <__sfputs_r+0x22>
 8011f8c:	463a      	mov	r2, r7
 8011f8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f92:	4630      	mov	r0, r6
 8011f94:	f7ff ffda 	bl	8011f4c <__sfputc_r>
 8011f98:	1c43      	adds	r3, r0, #1
 8011f9a:	d1f3      	bne.n	8011f84 <__sfputs_r+0xa>
 8011f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011fa0 <_vfiprintf_r>:
 8011fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fa4:	460c      	mov	r4, r1
 8011fa6:	b09d      	sub	sp, #116	; 0x74
 8011fa8:	4617      	mov	r7, r2
 8011faa:	461d      	mov	r5, r3
 8011fac:	4606      	mov	r6, r0
 8011fae:	b118      	cbz	r0, 8011fb8 <_vfiprintf_r+0x18>
 8011fb0:	6983      	ldr	r3, [r0, #24]
 8011fb2:	b90b      	cbnz	r3, 8011fb8 <_vfiprintf_r+0x18>
 8011fb4:	f7ff fe34 	bl	8011c20 <__sinit>
 8011fb8:	4b7c      	ldr	r3, [pc, #496]	; (80121ac <_vfiprintf_r+0x20c>)
 8011fba:	429c      	cmp	r4, r3
 8011fbc:	d158      	bne.n	8012070 <_vfiprintf_r+0xd0>
 8011fbe:	6874      	ldr	r4, [r6, #4]
 8011fc0:	89a3      	ldrh	r3, [r4, #12]
 8011fc2:	0718      	lsls	r0, r3, #28
 8011fc4:	d55e      	bpl.n	8012084 <_vfiprintf_r+0xe4>
 8011fc6:	6923      	ldr	r3, [r4, #16]
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d05b      	beq.n	8012084 <_vfiprintf_r+0xe4>
 8011fcc:	2300      	movs	r3, #0
 8011fce:	9309      	str	r3, [sp, #36]	; 0x24
 8011fd0:	2320      	movs	r3, #32
 8011fd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011fd6:	2330      	movs	r3, #48	; 0x30
 8011fd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011fdc:	9503      	str	r5, [sp, #12]
 8011fde:	f04f 0b01 	mov.w	fp, #1
 8011fe2:	46b8      	mov	r8, r7
 8011fe4:	4645      	mov	r5, r8
 8011fe6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011fea:	b10b      	cbz	r3, 8011ff0 <_vfiprintf_r+0x50>
 8011fec:	2b25      	cmp	r3, #37	; 0x25
 8011fee:	d154      	bne.n	801209a <_vfiprintf_r+0xfa>
 8011ff0:	ebb8 0a07 	subs.w	sl, r8, r7
 8011ff4:	d00b      	beq.n	801200e <_vfiprintf_r+0x6e>
 8011ff6:	4653      	mov	r3, sl
 8011ff8:	463a      	mov	r2, r7
 8011ffa:	4621      	mov	r1, r4
 8011ffc:	4630      	mov	r0, r6
 8011ffe:	f7ff ffbc 	bl	8011f7a <__sfputs_r>
 8012002:	3001      	adds	r0, #1
 8012004:	f000 80c2 	beq.w	801218c <_vfiprintf_r+0x1ec>
 8012008:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801200a:	4453      	add	r3, sl
 801200c:	9309      	str	r3, [sp, #36]	; 0x24
 801200e:	f898 3000 	ldrb.w	r3, [r8]
 8012012:	2b00      	cmp	r3, #0
 8012014:	f000 80ba 	beq.w	801218c <_vfiprintf_r+0x1ec>
 8012018:	2300      	movs	r3, #0
 801201a:	f04f 32ff 	mov.w	r2, #4294967295
 801201e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012022:	9304      	str	r3, [sp, #16]
 8012024:	9307      	str	r3, [sp, #28]
 8012026:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801202a:	931a      	str	r3, [sp, #104]	; 0x68
 801202c:	46a8      	mov	r8, r5
 801202e:	2205      	movs	r2, #5
 8012030:	f818 1b01 	ldrb.w	r1, [r8], #1
 8012034:	485e      	ldr	r0, [pc, #376]	; (80121b0 <_vfiprintf_r+0x210>)
 8012036:	f7f6 f803 	bl	8008040 <memchr>
 801203a:	9b04      	ldr	r3, [sp, #16]
 801203c:	bb78      	cbnz	r0, 801209e <_vfiprintf_r+0xfe>
 801203e:	06d9      	lsls	r1, r3, #27
 8012040:	bf44      	itt	mi
 8012042:	2220      	movmi	r2, #32
 8012044:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012048:	071a      	lsls	r2, r3, #28
 801204a:	bf44      	itt	mi
 801204c:	222b      	movmi	r2, #43	; 0x2b
 801204e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012052:	782a      	ldrb	r2, [r5, #0]
 8012054:	2a2a      	cmp	r2, #42	; 0x2a
 8012056:	d02a      	beq.n	80120ae <_vfiprintf_r+0x10e>
 8012058:	9a07      	ldr	r2, [sp, #28]
 801205a:	46a8      	mov	r8, r5
 801205c:	2000      	movs	r0, #0
 801205e:	250a      	movs	r5, #10
 8012060:	4641      	mov	r1, r8
 8012062:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012066:	3b30      	subs	r3, #48	; 0x30
 8012068:	2b09      	cmp	r3, #9
 801206a:	d969      	bls.n	8012140 <_vfiprintf_r+0x1a0>
 801206c:	b360      	cbz	r0, 80120c8 <_vfiprintf_r+0x128>
 801206e:	e024      	b.n	80120ba <_vfiprintf_r+0x11a>
 8012070:	4b50      	ldr	r3, [pc, #320]	; (80121b4 <_vfiprintf_r+0x214>)
 8012072:	429c      	cmp	r4, r3
 8012074:	d101      	bne.n	801207a <_vfiprintf_r+0xda>
 8012076:	68b4      	ldr	r4, [r6, #8]
 8012078:	e7a2      	b.n	8011fc0 <_vfiprintf_r+0x20>
 801207a:	4b4f      	ldr	r3, [pc, #316]	; (80121b8 <_vfiprintf_r+0x218>)
 801207c:	429c      	cmp	r4, r3
 801207e:	bf08      	it	eq
 8012080:	68f4      	ldreq	r4, [r6, #12]
 8012082:	e79d      	b.n	8011fc0 <_vfiprintf_r+0x20>
 8012084:	4621      	mov	r1, r4
 8012086:	4630      	mov	r0, r6
 8012088:	f7ff fc6c 	bl	8011964 <__swsetup_r>
 801208c:	2800      	cmp	r0, #0
 801208e:	d09d      	beq.n	8011fcc <_vfiprintf_r+0x2c>
 8012090:	f04f 30ff 	mov.w	r0, #4294967295
 8012094:	b01d      	add	sp, #116	; 0x74
 8012096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801209a:	46a8      	mov	r8, r5
 801209c:	e7a2      	b.n	8011fe4 <_vfiprintf_r+0x44>
 801209e:	4a44      	ldr	r2, [pc, #272]	; (80121b0 <_vfiprintf_r+0x210>)
 80120a0:	1a80      	subs	r0, r0, r2
 80120a2:	fa0b f000 	lsl.w	r0, fp, r0
 80120a6:	4318      	orrs	r0, r3
 80120a8:	9004      	str	r0, [sp, #16]
 80120aa:	4645      	mov	r5, r8
 80120ac:	e7be      	b.n	801202c <_vfiprintf_r+0x8c>
 80120ae:	9a03      	ldr	r2, [sp, #12]
 80120b0:	1d11      	adds	r1, r2, #4
 80120b2:	6812      	ldr	r2, [r2, #0]
 80120b4:	9103      	str	r1, [sp, #12]
 80120b6:	2a00      	cmp	r2, #0
 80120b8:	db01      	blt.n	80120be <_vfiprintf_r+0x11e>
 80120ba:	9207      	str	r2, [sp, #28]
 80120bc:	e004      	b.n	80120c8 <_vfiprintf_r+0x128>
 80120be:	4252      	negs	r2, r2
 80120c0:	f043 0302 	orr.w	r3, r3, #2
 80120c4:	9207      	str	r2, [sp, #28]
 80120c6:	9304      	str	r3, [sp, #16]
 80120c8:	f898 3000 	ldrb.w	r3, [r8]
 80120cc:	2b2e      	cmp	r3, #46	; 0x2e
 80120ce:	d10e      	bne.n	80120ee <_vfiprintf_r+0x14e>
 80120d0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80120d4:	2b2a      	cmp	r3, #42	; 0x2a
 80120d6:	d138      	bne.n	801214a <_vfiprintf_r+0x1aa>
 80120d8:	9b03      	ldr	r3, [sp, #12]
 80120da:	1d1a      	adds	r2, r3, #4
 80120dc:	681b      	ldr	r3, [r3, #0]
 80120de:	9203      	str	r2, [sp, #12]
 80120e0:	2b00      	cmp	r3, #0
 80120e2:	bfb8      	it	lt
 80120e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80120e8:	f108 0802 	add.w	r8, r8, #2
 80120ec:	9305      	str	r3, [sp, #20]
 80120ee:	4d33      	ldr	r5, [pc, #204]	; (80121bc <_vfiprintf_r+0x21c>)
 80120f0:	f898 1000 	ldrb.w	r1, [r8]
 80120f4:	2203      	movs	r2, #3
 80120f6:	4628      	mov	r0, r5
 80120f8:	f7f5 ffa2 	bl	8008040 <memchr>
 80120fc:	b140      	cbz	r0, 8012110 <_vfiprintf_r+0x170>
 80120fe:	2340      	movs	r3, #64	; 0x40
 8012100:	1b40      	subs	r0, r0, r5
 8012102:	fa03 f000 	lsl.w	r0, r3, r0
 8012106:	9b04      	ldr	r3, [sp, #16]
 8012108:	4303      	orrs	r3, r0
 801210a:	f108 0801 	add.w	r8, r8, #1
 801210e:	9304      	str	r3, [sp, #16]
 8012110:	f898 1000 	ldrb.w	r1, [r8]
 8012114:	482a      	ldr	r0, [pc, #168]	; (80121c0 <_vfiprintf_r+0x220>)
 8012116:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801211a:	2206      	movs	r2, #6
 801211c:	f108 0701 	add.w	r7, r8, #1
 8012120:	f7f5 ff8e 	bl	8008040 <memchr>
 8012124:	2800      	cmp	r0, #0
 8012126:	d037      	beq.n	8012198 <_vfiprintf_r+0x1f8>
 8012128:	4b26      	ldr	r3, [pc, #152]	; (80121c4 <_vfiprintf_r+0x224>)
 801212a:	bb1b      	cbnz	r3, 8012174 <_vfiprintf_r+0x1d4>
 801212c:	9b03      	ldr	r3, [sp, #12]
 801212e:	3307      	adds	r3, #7
 8012130:	f023 0307 	bic.w	r3, r3, #7
 8012134:	3308      	adds	r3, #8
 8012136:	9303      	str	r3, [sp, #12]
 8012138:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801213a:	444b      	add	r3, r9
 801213c:	9309      	str	r3, [sp, #36]	; 0x24
 801213e:	e750      	b.n	8011fe2 <_vfiprintf_r+0x42>
 8012140:	fb05 3202 	mla	r2, r5, r2, r3
 8012144:	2001      	movs	r0, #1
 8012146:	4688      	mov	r8, r1
 8012148:	e78a      	b.n	8012060 <_vfiprintf_r+0xc0>
 801214a:	2300      	movs	r3, #0
 801214c:	f108 0801 	add.w	r8, r8, #1
 8012150:	9305      	str	r3, [sp, #20]
 8012152:	4619      	mov	r1, r3
 8012154:	250a      	movs	r5, #10
 8012156:	4640      	mov	r0, r8
 8012158:	f810 2b01 	ldrb.w	r2, [r0], #1
 801215c:	3a30      	subs	r2, #48	; 0x30
 801215e:	2a09      	cmp	r2, #9
 8012160:	d903      	bls.n	801216a <_vfiprintf_r+0x1ca>
 8012162:	2b00      	cmp	r3, #0
 8012164:	d0c3      	beq.n	80120ee <_vfiprintf_r+0x14e>
 8012166:	9105      	str	r1, [sp, #20]
 8012168:	e7c1      	b.n	80120ee <_vfiprintf_r+0x14e>
 801216a:	fb05 2101 	mla	r1, r5, r1, r2
 801216e:	2301      	movs	r3, #1
 8012170:	4680      	mov	r8, r0
 8012172:	e7f0      	b.n	8012156 <_vfiprintf_r+0x1b6>
 8012174:	ab03      	add	r3, sp, #12
 8012176:	9300      	str	r3, [sp, #0]
 8012178:	4622      	mov	r2, r4
 801217a:	4b13      	ldr	r3, [pc, #76]	; (80121c8 <_vfiprintf_r+0x228>)
 801217c:	a904      	add	r1, sp, #16
 801217e:	4630      	mov	r0, r6
 8012180:	f3af 8000 	nop.w
 8012184:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012188:	4681      	mov	r9, r0
 801218a:	d1d5      	bne.n	8012138 <_vfiprintf_r+0x198>
 801218c:	89a3      	ldrh	r3, [r4, #12]
 801218e:	065b      	lsls	r3, r3, #25
 8012190:	f53f af7e 	bmi.w	8012090 <_vfiprintf_r+0xf0>
 8012194:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012196:	e77d      	b.n	8012094 <_vfiprintf_r+0xf4>
 8012198:	ab03      	add	r3, sp, #12
 801219a:	9300      	str	r3, [sp, #0]
 801219c:	4622      	mov	r2, r4
 801219e:	4b0a      	ldr	r3, [pc, #40]	; (80121c8 <_vfiprintf_r+0x228>)
 80121a0:	a904      	add	r1, sp, #16
 80121a2:	4630      	mov	r0, r6
 80121a4:	f000 f888 	bl	80122b8 <_printf_i>
 80121a8:	e7ec      	b.n	8012184 <_vfiprintf_r+0x1e4>
 80121aa:	bf00      	nop
 80121ac:	08026514 	.word	0x08026514
 80121b0:	08026554 	.word	0x08026554
 80121b4:	08026534 	.word	0x08026534
 80121b8:	080264f4 	.word	0x080264f4
 80121bc:	0802655a 	.word	0x0802655a
 80121c0:	0802655e 	.word	0x0802655e
 80121c4:	00000000 	.word	0x00000000
 80121c8:	08011f7b 	.word	0x08011f7b

080121cc <_printf_common>:
 80121cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80121d0:	4691      	mov	r9, r2
 80121d2:	461f      	mov	r7, r3
 80121d4:	688a      	ldr	r2, [r1, #8]
 80121d6:	690b      	ldr	r3, [r1, #16]
 80121d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80121dc:	4293      	cmp	r3, r2
 80121de:	bfb8      	it	lt
 80121e0:	4613      	movlt	r3, r2
 80121e2:	f8c9 3000 	str.w	r3, [r9]
 80121e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80121ea:	4606      	mov	r6, r0
 80121ec:	460c      	mov	r4, r1
 80121ee:	b112      	cbz	r2, 80121f6 <_printf_common+0x2a>
 80121f0:	3301      	adds	r3, #1
 80121f2:	f8c9 3000 	str.w	r3, [r9]
 80121f6:	6823      	ldr	r3, [r4, #0]
 80121f8:	0699      	lsls	r1, r3, #26
 80121fa:	bf42      	ittt	mi
 80121fc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8012200:	3302      	addmi	r3, #2
 8012202:	f8c9 3000 	strmi.w	r3, [r9]
 8012206:	6825      	ldr	r5, [r4, #0]
 8012208:	f015 0506 	ands.w	r5, r5, #6
 801220c:	d107      	bne.n	801221e <_printf_common+0x52>
 801220e:	f104 0a19 	add.w	sl, r4, #25
 8012212:	68e3      	ldr	r3, [r4, #12]
 8012214:	f8d9 2000 	ldr.w	r2, [r9]
 8012218:	1a9b      	subs	r3, r3, r2
 801221a:	42ab      	cmp	r3, r5
 801221c:	dc28      	bgt.n	8012270 <_printf_common+0xa4>
 801221e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8012222:	6822      	ldr	r2, [r4, #0]
 8012224:	3300      	adds	r3, #0
 8012226:	bf18      	it	ne
 8012228:	2301      	movne	r3, #1
 801222a:	0692      	lsls	r2, r2, #26
 801222c:	d42d      	bmi.n	801228a <_printf_common+0xbe>
 801222e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012232:	4639      	mov	r1, r7
 8012234:	4630      	mov	r0, r6
 8012236:	47c0      	blx	r8
 8012238:	3001      	adds	r0, #1
 801223a:	d020      	beq.n	801227e <_printf_common+0xb2>
 801223c:	6823      	ldr	r3, [r4, #0]
 801223e:	68e5      	ldr	r5, [r4, #12]
 8012240:	f8d9 2000 	ldr.w	r2, [r9]
 8012244:	f003 0306 	and.w	r3, r3, #6
 8012248:	2b04      	cmp	r3, #4
 801224a:	bf08      	it	eq
 801224c:	1aad      	subeq	r5, r5, r2
 801224e:	68a3      	ldr	r3, [r4, #8]
 8012250:	6922      	ldr	r2, [r4, #16]
 8012252:	bf0c      	ite	eq
 8012254:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012258:	2500      	movne	r5, #0
 801225a:	4293      	cmp	r3, r2
 801225c:	bfc4      	itt	gt
 801225e:	1a9b      	subgt	r3, r3, r2
 8012260:	18ed      	addgt	r5, r5, r3
 8012262:	f04f 0900 	mov.w	r9, #0
 8012266:	341a      	adds	r4, #26
 8012268:	454d      	cmp	r5, r9
 801226a:	d11a      	bne.n	80122a2 <_printf_common+0xd6>
 801226c:	2000      	movs	r0, #0
 801226e:	e008      	b.n	8012282 <_printf_common+0xb6>
 8012270:	2301      	movs	r3, #1
 8012272:	4652      	mov	r2, sl
 8012274:	4639      	mov	r1, r7
 8012276:	4630      	mov	r0, r6
 8012278:	47c0      	blx	r8
 801227a:	3001      	adds	r0, #1
 801227c:	d103      	bne.n	8012286 <_printf_common+0xba>
 801227e:	f04f 30ff 	mov.w	r0, #4294967295
 8012282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012286:	3501      	adds	r5, #1
 8012288:	e7c3      	b.n	8012212 <_printf_common+0x46>
 801228a:	18e1      	adds	r1, r4, r3
 801228c:	1c5a      	adds	r2, r3, #1
 801228e:	2030      	movs	r0, #48	; 0x30
 8012290:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012294:	4422      	add	r2, r4
 8012296:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801229a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801229e:	3302      	adds	r3, #2
 80122a0:	e7c5      	b.n	801222e <_printf_common+0x62>
 80122a2:	2301      	movs	r3, #1
 80122a4:	4622      	mov	r2, r4
 80122a6:	4639      	mov	r1, r7
 80122a8:	4630      	mov	r0, r6
 80122aa:	47c0      	blx	r8
 80122ac:	3001      	adds	r0, #1
 80122ae:	d0e6      	beq.n	801227e <_printf_common+0xb2>
 80122b0:	f109 0901 	add.w	r9, r9, #1
 80122b4:	e7d8      	b.n	8012268 <_printf_common+0x9c>
	...

080122b8 <_printf_i>:
 80122b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80122bc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80122c0:	460c      	mov	r4, r1
 80122c2:	7e09      	ldrb	r1, [r1, #24]
 80122c4:	b085      	sub	sp, #20
 80122c6:	296e      	cmp	r1, #110	; 0x6e
 80122c8:	4617      	mov	r7, r2
 80122ca:	4606      	mov	r6, r0
 80122cc:	4698      	mov	r8, r3
 80122ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80122d0:	f000 80b3 	beq.w	801243a <_printf_i+0x182>
 80122d4:	d822      	bhi.n	801231c <_printf_i+0x64>
 80122d6:	2963      	cmp	r1, #99	; 0x63
 80122d8:	d036      	beq.n	8012348 <_printf_i+0x90>
 80122da:	d80a      	bhi.n	80122f2 <_printf_i+0x3a>
 80122dc:	2900      	cmp	r1, #0
 80122de:	f000 80b9 	beq.w	8012454 <_printf_i+0x19c>
 80122e2:	2958      	cmp	r1, #88	; 0x58
 80122e4:	f000 8083 	beq.w	80123ee <_printf_i+0x136>
 80122e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80122ec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80122f0:	e032      	b.n	8012358 <_printf_i+0xa0>
 80122f2:	2964      	cmp	r1, #100	; 0x64
 80122f4:	d001      	beq.n	80122fa <_printf_i+0x42>
 80122f6:	2969      	cmp	r1, #105	; 0x69
 80122f8:	d1f6      	bne.n	80122e8 <_printf_i+0x30>
 80122fa:	6820      	ldr	r0, [r4, #0]
 80122fc:	6813      	ldr	r3, [r2, #0]
 80122fe:	0605      	lsls	r5, r0, #24
 8012300:	f103 0104 	add.w	r1, r3, #4
 8012304:	d52a      	bpl.n	801235c <_printf_i+0xa4>
 8012306:	681b      	ldr	r3, [r3, #0]
 8012308:	6011      	str	r1, [r2, #0]
 801230a:	2b00      	cmp	r3, #0
 801230c:	da03      	bge.n	8012316 <_printf_i+0x5e>
 801230e:	222d      	movs	r2, #45	; 0x2d
 8012310:	425b      	negs	r3, r3
 8012312:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8012316:	486f      	ldr	r0, [pc, #444]	; (80124d4 <_printf_i+0x21c>)
 8012318:	220a      	movs	r2, #10
 801231a:	e039      	b.n	8012390 <_printf_i+0xd8>
 801231c:	2973      	cmp	r1, #115	; 0x73
 801231e:	f000 809d 	beq.w	801245c <_printf_i+0x1a4>
 8012322:	d808      	bhi.n	8012336 <_printf_i+0x7e>
 8012324:	296f      	cmp	r1, #111	; 0x6f
 8012326:	d020      	beq.n	801236a <_printf_i+0xb2>
 8012328:	2970      	cmp	r1, #112	; 0x70
 801232a:	d1dd      	bne.n	80122e8 <_printf_i+0x30>
 801232c:	6823      	ldr	r3, [r4, #0]
 801232e:	f043 0320 	orr.w	r3, r3, #32
 8012332:	6023      	str	r3, [r4, #0]
 8012334:	e003      	b.n	801233e <_printf_i+0x86>
 8012336:	2975      	cmp	r1, #117	; 0x75
 8012338:	d017      	beq.n	801236a <_printf_i+0xb2>
 801233a:	2978      	cmp	r1, #120	; 0x78
 801233c:	d1d4      	bne.n	80122e8 <_printf_i+0x30>
 801233e:	2378      	movs	r3, #120	; 0x78
 8012340:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012344:	4864      	ldr	r0, [pc, #400]	; (80124d8 <_printf_i+0x220>)
 8012346:	e055      	b.n	80123f4 <_printf_i+0x13c>
 8012348:	6813      	ldr	r3, [r2, #0]
 801234a:	1d19      	adds	r1, r3, #4
 801234c:	681b      	ldr	r3, [r3, #0]
 801234e:	6011      	str	r1, [r2, #0]
 8012350:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012354:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012358:	2301      	movs	r3, #1
 801235a:	e08c      	b.n	8012476 <_printf_i+0x1be>
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	6011      	str	r1, [r2, #0]
 8012360:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012364:	bf18      	it	ne
 8012366:	b21b      	sxthne	r3, r3
 8012368:	e7cf      	b.n	801230a <_printf_i+0x52>
 801236a:	6813      	ldr	r3, [r2, #0]
 801236c:	6825      	ldr	r5, [r4, #0]
 801236e:	1d18      	adds	r0, r3, #4
 8012370:	6010      	str	r0, [r2, #0]
 8012372:	0628      	lsls	r0, r5, #24
 8012374:	d501      	bpl.n	801237a <_printf_i+0xc2>
 8012376:	681b      	ldr	r3, [r3, #0]
 8012378:	e002      	b.n	8012380 <_printf_i+0xc8>
 801237a:	0668      	lsls	r0, r5, #25
 801237c:	d5fb      	bpl.n	8012376 <_printf_i+0xbe>
 801237e:	881b      	ldrh	r3, [r3, #0]
 8012380:	4854      	ldr	r0, [pc, #336]	; (80124d4 <_printf_i+0x21c>)
 8012382:	296f      	cmp	r1, #111	; 0x6f
 8012384:	bf14      	ite	ne
 8012386:	220a      	movne	r2, #10
 8012388:	2208      	moveq	r2, #8
 801238a:	2100      	movs	r1, #0
 801238c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012390:	6865      	ldr	r5, [r4, #4]
 8012392:	60a5      	str	r5, [r4, #8]
 8012394:	2d00      	cmp	r5, #0
 8012396:	f2c0 8095 	blt.w	80124c4 <_printf_i+0x20c>
 801239a:	6821      	ldr	r1, [r4, #0]
 801239c:	f021 0104 	bic.w	r1, r1, #4
 80123a0:	6021      	str	r1, [r4, #0]
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d13d      	bne.n	8012422 <_printf_i+0x16a>
 80123a6:	2d00      	cmp	r5, #0
 80123a8:	f040 808e 	bne.w	80124c8 <_printf_i+0x210>
 80123ac:	4665      	mov	r5, ip
 80123ae:	2a08      	cmp	r2, #8
 80123b0:	d10b      	bne.n	80123ca <_printf_i+0x112>
 80123b2:	6823      	ldr	r3, [r4, #0]
 80123b4:	07db      	lsls	r3, r3, #31
 80123b6:	d508      	bpl.n	80123ca <_printf_i+0x112>
 80123b8:	6923      	ldr	r3, [r4, #16]
 80123ba:	6862      	ldr	r2, [r4, #4]
 80123bc:	429a      	cmp	r2, r3
 80123be:	bfde      	ittt	le
 80123c0:	2330      	movle	r3, #48	; 0x30
 80123c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80123c6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80123ca:	ebac 0305 	sub.w	r3, ip, r5
 80123ce:	6123      	str	r3, [r4, #16]
 80123d0:	f8cd 8000 	str.w	r8, [sp]
 80123d4:	463b      	mov	r3, r7
 80123d6:	aa03      	add	r2, sp, #12
 80123d8:	4621      	mov	r1, r4
 80123da:	4630      	mov	r0, r6
 80123dc:	f7ff fef6 	bl	80121cc <_printf_common>
 80123e0:	3001      	adds	r0, #1
 80123e2:	d14d      	bne.n	8012480 <_printf_i+0x1c8>
 80123e4:	f04f 30ff 	mov.w	r0, #4294967295
 80123e8:	b005      	add	sp, #20
 80123ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80123ee:	4839      	ldr	r0, [pc, #228]	; (80124d4 <_printf_i+0x21c>)
 80123f0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80123f4:	6813      	ldr	r3, [r2, #0]
 80123f6:	6821      	ldr	r1, [r4, #0]
 80123f8:	1d1d      	adds	r5, r3, #4
 80123fa:	681b      	ldr	r3, [r3, #0]
 80123fc:	6015      	str	r5, [r2, #0]
 80123fe:	060a      	lsls	r2, r1, #24
 8012400:	d50b      	bpl.n	801241a <_printf_i+0x162>
 8012402:	07ca      	lsls	r2, r1, #31
 8012404:	bf44      	itt	mi
 8012406:	f041 0120 	orrmi.w	r1, r1, #32
 801240a:	6021      	strmi	r1, [r4, #0]
 801240c:	b91b      	cbnz	r3, 8012416 <_printf_i+0x15e>
 801240e:	6822      	ldr	r2, [r4, #0]
 8012410:	f022 0220 	bic.w	r2, r2, #32
 8012414:	6022      	str	r2, [r4, #0]
 8012416:	2210      	movs	r2, #16
 8012418:	e7b7      	b.n	801238a <_printf_i+0xd2>
 801241a:	064d      	lsls	r5, r1, #25
 801241c:	bf48      	it	mi
 801241e:	b29b      	uxthmi	r3, r3
 8012420:	e7ef      	b.n	8012402 <_printf_i+0x14a>
 8012422:	4665      	mov	r5, ip
 8012424:	fbb3 f1f2 	udiv	r1, r3, r2
 8012428:	fb02 3311 	mls	r3, r2, r1, r3
 801242c:	5cc3      	ldrb	r3, [r0, r3]
 801242e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8012432:	460b      	mov	r3, r1
 8012434:	2900      	cmp	r1, #0
 8012436:	d1f5      	bne.n	8012424 <_printf_i+0x16c>
 8012438:	e7b9      	b.n	80123ae <_printf_i+0xf6>
 801243a:	6813      	ldr	r3, [r2, #0]
 801243c:	6825      	ldr	r5, [r4, #0]
 801243e:	6961      	ldr	r1, [r4, #20]
 8012440:	1d18      	adds	r0, r3, #4
 8012442:	6010      	str	r0, [r2, #0]
 8012444:	0628      	lsls	r0, r5, #24
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	d501      	bpl.n	801244e <_printf_i+0x196>
 801244a:	6019      	str	r1, [r3, #0]
 801244c:	e002      	b.n	8012454 <_printf_i+0x19c>
 801244e:	066a      	lsls	r2, r5, #25
 8012450:	d5fb      	bpl.n	801244a <_printf_i+0x192>
 8012452:	8019      	strh	r1, [r3, #0]
 8012454:	2300      	movs	r3, #0
 8012456:	6123      	str	r3, [r4, #16]
 8012458:	4665      	mov	r5, ip
 801245a:	e7b9      	b.n	80123d0 <_printf_i+0x118>
 801245c:	6813      	ldr	r3, [r2, #0]
 801245e:	1d19      	adds	r1, r3, #4
 8012460:	6011      	str	r1, [r2, #0]
 8012462:	681d      	ldr	r5, [r3, #0]
 8012464:	6862      	ldr	r2, [r4, #4]
 8012466:	2100      	movs	r1, #0
 8012468:	4628      	mov	r0, r5
 801246a:	f7f5 fde9 	bl	8008040 <memchr>
 801246e:	b108      	cbz	r0, 8012474 <_printf_i+0x1bc>
 8012470:	1b40      	subs	r0, r0, r5
 8012472:	6060      	str	r0, [r4, #4]
 8012474:	6863      	ldr	r3, [r4, #4]
 8012476:	6123      	str	r3, [r4, #16]
 8012478:	2300      	movs	r3, #0
 801247a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801247e:	e7a7      	b.n	80123d0 <_printf_i+0x118>
 8012480:	6923      	ldr	r3, [r4, #16]
 8012482:	462a      	mov	r2, r5
 8012484:	4639      	mov	r1, r7
 8012486:	4630      	mov	r0, r6
 8012488:	47c0      	blx	r8
 801248a:	3001      	adds	r0, #1
 801248c:	d0aa      	beq.n	80123e4 <_printf_i+0x12c>
 801248e:	6823      	ldr	r3, [r4, #0]
 8012490:	079b      	lsls	r3, r3, #30
 8012492:	d413      	bmi.n	80124bc <_printf_i+0x204>
 8012494:	68e0      	ldr	r0, [r4, #12]
 8012496:	9b03      	ldr	r3, [sp, #12]
 8012498:	4298      	cmp	r0, r3
 801249a:	bfb8      	it	lt
 801249c:	4618      	movlt	r0, r3
 801249e:	e7a3      	b.n	80123e8 <_printf_i+0x130>
 80124a0:	2301      	movs	r3, #1
 80124a2:	464a      	mov	r2, r9
 80124a4:	4639      	mov	r1, r7
 80124a6:	4630      	mov	r0, r6
 80124a8:	47c0      	blx	r8
 80124aa:	3001      	adds	r0, #1
 80124ac:	d09a      	beq.n	80123e4 <_printf_i+0x12c>
 80124ae:	3501      	adds	r5, #1
 80124b0:	68e3      	ldr	r3, [r4, #12]
 80124b2:	9a03      	ldr	r2, [sp, #12]
 80124b4:	1a9b      	subs	r3, r3, r2
 80124b6:	42ab      	cmp	r3, r5
 80124b8:	dcf2      	bgt.n	80124a0 <_printf_i+0x1e8>
 80124ba:	e7eb      	b.n	8012494 <_printf_i+0x1dc>
 80124bc:	2500      	movs	r5, #0
 80124be:	f104 0919 	add.w	r9, r4, #25
 80124c2:	e7f5      	b.n	80124b0 <_printf_i+0x1f8>
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d1ac      	bne.n	8012422 <_printf_i+0x16a>
 80124c8:	7803      	ldrb	r3, [r0, #0]
 80124ca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80124ce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80124d2:	e76c      	b.n	80123ae <_printf_i+0xf6>
 80124d4:	08026565 	.word	0x08026565
 80124d8:	08026576 	.word	0x08026576

080124dc <_sbrk_r>:
 80124dc:	b538      	push	{r3, r4, r5, lr}
 80124de:	4c06      	ldr	r4, [pc, #24]	; (80124f8 <_sbrk_r+0x1c>)
 80124e0:	2300      	movs	r3, #0
 80124e2:	4605      	mov	r5, r0
 80124e4:	4608      	mov	r0, r1
 80124e6:	6023      	str	r3, [r4, #0]
 80124e8:	f7fe fe60 	bl	80111ac <_sbrk>
 80124ec:	1c43      	adds	r3, r0, #1
 80124ee:	d102      	bne.n	80124f6 <_sbrk_r+0x1a>
 80124f0:	6823      	ldr	r3, [r4, #0]
 80124f2:	b103      	cbz	r3, 80124f6 <_sbrk_r+0x1a>
 80124f4:	602b      	str	r3, [r5, #0]
 80124f6:	bd38      	pop	{r3, r4, r5, pc}
 80124f8:	20004628 	.word	0x20004628

080124fc <__sread>:
 80124fc:	b510      	push	{r4, lr}
 80124fe:	460c      	mov	r4, r1
 8012500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012504:	f000 f896 	bl	8012634 <_read_r>
 8012508:	2800      	cmp	r0, #0
 801250a:	bfab      	itete	ge
 801250c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801250e:	89a3      	ldrhlt	r3, [r4, #12]
 8012510:	181b      	addge	r3, r3, r0
 8012512:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012516:	bfac      	ite	ge
 8012518:	6563      	strge	r3, [r4, #84]	; 0x54
 801251a:	81a3      	strhlt	r3, [r4, #12]
 801251c:	bd10      	pop	{r4, pc}

0801251e <__swrite>:
 801251e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012522:	461f      	mov	r7, r3
 8012524:	898b      	ldrh	r3, [r1, #12]
 8012526:	05db      	lsls	r3, r3, #23
 8012528:	4605      	mov	r5, r0
 801252a:	460c      	mov	r4, r1
 801252c:	4616      	mov	r6, r2
 801252e:	d505      	bpl.n	801253c <__swrite+0x1e>
 8012530:	2302      	movs	r3, #2
 8012532:	2200      	movs	r2, #0
 8012534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012538:	f000 f868 	bl	801260c <_lseek_r>
 801253c:	89a3      	ldrh	r3, [r4, #12]
 801253e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012542:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012546:	81a3      	strh	r3, [r4, #12]
 8012548:	4632      	mov	r2, r6
 801254a:	463b      	mov	r3, r7
 801254c:	4628      	mov	r0, r5
 801254e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012552:	f000 b817 	b.w	8012584 <_write_r>

08012556 <__sseek>:
 8012556:	b510      	push	{r4, lr}
 8012558:	460c      	mov	r4, r1
 801255a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801255e:	f000 f855 	bl	801260c <_lseek_r>
 8012562:	1c43      	adds	r3, r0, #1
 8012564:	89a3      	ldrh	r3, [r4, #12]
 8012566:	bf15      	itete	ne
 8012568:	6560      	strne	r0, [r4, #84]	; 0x54
 801256a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801256e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012572:	81a3      	strheq	r3, [r4, #12]
 8012574:	bf18      	it	ne
 8012576:	81a3      	strhne	r3, [r4, #12]
 8012578:	bd10      	pop	{r4, pc}

0801257a <__sclose>:
 801257a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801257e:	f000 b813 	b.w	80125a8 <_close_r>
	...

08012584 <_write_r>:
 8012584:	b538      	push	{r3, r4, r5, lr}
 8012586:	4c07      	ldr	r4, [pc, #28]	; (80125a4 <_write_r+0x20>)
 8012588:	4605      	mov	r5, r0
 801258a:	4608      	mov	r0, r1
 801258c:	4611      	mov	r1, r2
 801258e:	2200      	movs	r2, #0
 8012590:	6022      	str	r2, [r4, #0]
 8012592:	461a      	mov	r2, r3
 8012594:	f7fd fe51 	bl	801023a <_write>
 8012598:	1c43      	adds	r3, r0, #1
 801259a:	d102      	bne.n	80125a2 <_write_r+0x1e>
 801259c:	6823      	ldr	r3, [r4, #0]
 801259e:	b103      	cbz	r3, 80125a2 <_write_r+0x1e>
 80125a0:	602b      	str	r3, [r5, #0]
 80125a2:	bd38      	pop	{r3, r4, r5, pc}
 80125a4:	20004628 	.word	0x20004628

080125a8 <_close_r>:
 80125a8:	b538      	push	{r3, r4, r5, lr}
 80125aa:	4c06      	ldr	r4, [pc, #24]	; (80125c4 <_close_r+0x1c>)
 80125ac:	2300      	movs	r3, #0
 80125ae:	4605      	mov	r5, r0
 80125b0:	4608      	mov	r0, r1
 80125b2:	6023      	str	r3, [r4, #0]
 80125b4:	f7fe fdc5 	bl	8011142 <_close>
 80125b8:	1c43      	adds	r3, r0, #1
 80125ba:	d102      	bne.n	80125c2 <_close_r+0x1a>
 80125bc:	6823      	ldr	r3, [r4, #0]
 80125be:	b103      	cbz	r3, 80125c2 <_close_r+0x1a>
 80125c0:	602b      	str	r3, [r5, #0]
 80125c2:	bd38      	pop	{r3, r4, r5, pc}
 80125c4:	20004628 	.word	0x20004628

080125c8 <_fstat_r>:
 80125c8:	b538      	push	{r3, r4, r5, lr}
 80125ca:	4c07      	ldr	r4, [pc, #28]	; (80125e8 <_fstat_r+0x20>)
 80125cc:	2300      	movs	r3, #0
 80125ce:	4605      	mov	r5, r0
 80125d0:	4608      	mov	r0, r1
 80125d2:	4611      	mov	r1, r2
 80125d4:	6023      	str	r3, [r4, #0]
 80125d6:	f7fe fdc0 	bl	801115a <_fstat>
 80125da:	1c43      	adds	r3, r0, #1
 80125dc:	d102      	bne.n	80125e4 <_fstat_r+0x1c>
 80125de:	6823      	ldr	r3, [r4, #0]
 80125e0:	b103      	cbz	r3, 80125e4 <_fstat_r+0x1c>
 80125e2:	602b      	str	r3, [r5, #0]
 80125e4:	bd38      	pop	{r3, r4, r5, pc}
 80125e6:	bf00      	nop
 80125e8:	20004628 	.word	0x20004628

080125ec <_isatty_r>:
 80125ec:	b538      	push	{r3, r4, r5, lr}
 80125ee:	4c06      	ldr	r4, [pc, #24]	; (8012608 <_isatty_r+0x1c>)
 80125f0:	2300      	movs	r3, #0
 80125f2:	4605      	mov	r5, r0
 80125f4:	4608      	mov	r0, r1
 80125f6:	6023      	str	r3, [r4, #0]
 80125f8:	f7fe fdbf 	bl	801117a <_isatty>
 80125fc:	1c43      	adds	r3, r0, #1
 80125fe:	d102      	bne.n	8012606 <_isatty_r+0x1a>
 8012600:	6823      	ldr	r3, [r4, #0]
 8012602:	b103      	cbz	r3, 8012606 <_isatty_r+0x1a>
 8012604:	602b      	str	r3, [r5, #0]
 8012606:	bd38      	pop	{r3, r4, r5, pc}
 8012608:	20004628 	.word	0x20004628

0801260c <_lseek_r>:
 801260c:	b538      	push	{r3, r4, r5, lr}
 801260e:	4c07      	ldr	r4, [pc, #28]	; (801262c <_lseek_r+0x20>)
 8012610:	4605      	mov	r5, r0
 8012612:	4608      	mov	r0, r1
 8012614:	4611      	mov	r1, r2
 8012616:	2200      	movs	r2, #0
 8012618:	6022      	str	r2, [r4, #0]
 801261a:	461a      	mov	r2, r3
 801261c:	f7fe fdb8 	bl	8011190 <_lseek>
 8012620:	1c43      	adds	r3, r0, #1
 8012622:	d102      	bne.n	801262a <_lseek_r+0x1e>
 8012624:	6823      	ldr	r3, [r4, #0]
 8012626:	b103      	cbz	r3, 801262a <_lseek_r+0x1e>
 8012628:	602b      	str	r3, [r5, #0]
 801262a:	bd38      	pop	{r3, r4, r5, pc}
 801262c:	20004628 	.word	0x20004628

08012630 <__malloc_lock>:
 8012630:	4770      	bx	lr

08012632 <__malloc_unlock>:
 8012632:	4770      	bx	lr

08012634 <_read_r>:
 8012634:	b538      	push	{r3, r4, r5, lr}
 8012636:	4c07      	ldr	r4, [pc, #28]	; (8012654 <_read_r+0x20>)
 8012638:	4605      	mov	r5, r0
 801263a:	4608      	mov	r0, r1
 801263c:	4611      	mov	r1, r2
 801263e:	2200      	movs	r2, #0
 8012640:	6022      	str	r2, [r4, #0]
 8012642:	461a      	mov	r2, r3
 8012644:	f7fe fd60 	bl	8011108 <_read>
 8012648:	1c43      	adds	r3, r0, #1
 801264a:	d102      	bne.n	8012652 <_read_r+0x1e>
 801264c:	6823      	ldr	r3, [r4, #0]
 801264e:	b103      	cbz	r3, 8012652 <_read_r+0x1e>
 8012650:	602b      	str	r3, [r5, #0]
 8012652:	bd38      	pop	{r3, r4, r5, pc}
 8012654:	20004628 	.word	0x20004628

08012658 <fmod>:
 8012658:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801265c:	ed2d 8b02 	vpush	{d8}
 8012660:	b08b      	sub	sp, #44	; 0x2c
 8012662:	ec55 4b10 	vmov	r4, r5, d0
 8012666:	ec57 6b11 	vmov	r6, r7, d1
 801266a:	f000 f8b5 	bl	80127d8 <__ieee754_fmod>
 801266e:	4b2a      	ldr	r3, [pc, #168]	; (8012718 <fmod+0xc0>)
 8012670:	eeb0 8a40 	vmov.f32	s16, s0
 8012674:	eef0 8a60 	vmov.f32	s17, s1
 8012678:	f993 8000 	ldrsb.w	r8, [r3]
 801267c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8012680:	d030      	beq.n	80126e4 <fmod+0x8c>
 8012682:	4632      	mov	r2, r6
 8012684:	463b      	mov	r3, r7
 8012686:	4630      	mov	r0, r6
 8012688:	4639      	mov	r1, r7
 801268a:	f7f6 f97f 	bl	800898c <__aeabi_dcmpun>
 801268e:	bb48      	cbnz	r0, 80126e4 <fmod+0x8c>
 8012690:	4622      	mov	r2, r4
 8012692:	462b      	mov	r3, r5
 8012694:	4620      	mov	r0, r4
 8012696:	4629      	mov	r1, r5
 8012698:	f7f6 f978 	bl	800898c <__aeabi_dcmpun>
 801269c:	4681      	mov	r9, r0
 801269e:	bb08      	cbnz	r0, 80126e4 <fmod+0x8c>
 80126a0:	2200      	movs	r2, #0
 80126a2:	2300      	movs	r3, #0
 80126a4:	4630      	mov	r0, r6
 80126a6:	4639      	mov	r1, r7
 80126a8:	f7f6 f93e 	bl	8008928 <__aeabi_dcmpeq>
 80126ac:	b1d0      	cbz	r0, 80126e4 <fmod+0x8c>
 80126ae:	2301      	movs	r3, #1
 80126b0:	9300      	str	r3, [sp, #0]
 80126b2:	4b1a      	ldr	r3, [pc, #104]	; (801271c <fmod+0xc4>)
 80126b4:	9301      	str	r3, [sp, #4]
 80126b6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80126ba:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80126be:	f8cd 9020 	str.w	r9, [sp, #32]
 80126c2:	f1b8 0f00 	cmp.w	r8, #0
 80126c6:	d116      	bne.n	80126f6 <fmod+0x9e>
 80126c8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80126cc:	4668      	mov	r0, sp
 80126ce:	f000 fa1d 	bl	8012b0c <matherr>
 80126d2:	b1d8      	cbz	r0, 801270c <fmod+0xb4>
 80126d4:	9b08      	ldr	r3, [sp, #32]
 80126d6:	b11b      	cbz	r3, 80126e0 <fmod+0x88>
 80126d8:	f7ff f838 	bl	801174c <__errno>
 80126dc:	9b08      	ldr	r3, [sp, #32]
 80126de:	6003      	str	r3, [r0, #0]
 80126e0:	ed9d 8b06 	vldr	d8, [sp, #24]
 80126e4:	eeb0 0a48 	vmov.f32	s0, s16
 80126e8:	eef0 0a68 	vmov.f32	s1, s17
 80126ec:	b00b      	add	sp, #44	; 0x2c
 80126ee:	ecbd 8b02 	vpop	{d8}
 80126f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80126f6:	2200      	movs	r2, #0
 80126f8:	2300      	movs	r3, #0
 80126fa:	4610      	mov	r0, r2
 80126fc:	4619      	mov	r1, r3
 80126fe:	f7f5 ffd5 	bl	80086ac <__aeabi_ddiv>
 8012702:	f1b8 0f02 	cmp.w	r8, #2
 8012706:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801270a:	d1df      	bne.n	80126cc <fmod+0x74>
 801270c:	f7ff f81e 	bl	801174c <__errno>
 8012710:	2321      	movs	r3, #33	; 0x21
 8012712:	6003      	str	r3, [r0, #0]
 8012714:	e7de      	b.n	80126d4 <fmod+0x7c>
 8012716:	bf00      	nop
 8012718:	20000080 	.word	0x20000080
 801271c:	08026587 	.word	0x08026587

08012720 <fmodf>:
 8012720:	b5d0      	push	{r4, r6, r7, lr}
 8012722:	ed2d 8b02 	vpush	{d8}
 8012726:	b08a      	sub	sp, #40	; 0x28
 8012728:	eef0 8a40 	vmov.f32	s17, s0
 801272c:	eeb0 8a60 	vmov.f32	s16, s1
 8012730:	f000 f964 	bl	80129fc <__ieee754_fmodf>
 8012734:	4b26      	ldr	r3, [pc, #152]	; (80127d0 <fmodf+0xb0>)
 8012736:	f993 4000 	ldrsb.w	r4, [r3]
 801273a:	1c63      	adds	r3, r4, #1
 801273c:	d035      	beq.n	80127aa <fmodf+0x8a>
 801273e:	eeb4 8a48 	vcmp.f32	s16, s16
 8012742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012746:	d630      	bvs.n	80127aa <fmodf+0x8a>
 8012748:	eef4 8a68 	vcmp.f32	s17, s17
 801274c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012750:	d62b      	bvs.n	80127aa <fmodf+0x8a>
 8012752:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8012756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801275a:	d126      	bne.n	80127aa <fmodf+0x8a>
 801275c:	2301      	movs	r3, #1
 801275e:	9300      	str	r3, [sp, #0]
 8012760:	4b1c      	ldr	r3, [pc, #112]	; (80127d4 <fmodf+0xb4>)
 8012762:	9301      	str	r3, [sp, #4]
 8012764:	ee18 0a90 	vmov	r0, s17
 8012768:	2300      	movs	r3, #0
 801276a:	9308      	str	r3, [sp, #32]
 801276c:	f7f5 fe1c 	bl	80083a8 <__aeabi_f2d>
 8012770:	4606      	mov	r6, r0
 8012772:	460f      	mov	r7, r1
 8012774:	ee18 0a10 	vmov	r0, s16
 8012778:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801277c:	f7f5 fe14 	bl	80083a8 <__aeabi_f2d>
 8012780:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8012784:	b9ac      	cbnz	r4, 80127b2 <fmodf+0x92>
 8012786:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801278a:	4668      	mov	r0, sp
 801278c:	f000 f9be 	bl	8012b0c <matherr>
 8012790:	b1c8      	cbz	r0, 80127c6 <fmodf+0xa6>
 8012792:	9b08      	ldr	r3, [sp, #32]
 8012794:	b11b      	cbz	r3, 801279e <fmodf+0x7e>
 8012796:	f7fe ffd9 	bl	801174c <__errno>
 801279a:	9b08      	ldr	r3, [sp, #32]
 801279c:	6003      	str	r3, [r0, #0]
 801279e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80127a2:	f7f6 f931 	bl	8008a08 <__aeabi_d2f>
 80127a6:	ee00 0a10 	vmov	s0, r0
 80127aa:	b00a      	add	sp, #40	; 0x28
 80127ac:	ecbd 8b02 	vpop	{d8}
 80127b0:	bdd0      	pop	{r4, r6, r7, pc}
 80127b2:	2200      	movs	r2, #0
 80127b4:	2300      	movs	r3, #0
 80127b6:	4610      	mov	r0, r2
 80127b8:	4619      	mov	r1, r3
 80127ba:	f7f5 ff77 	bl	80086ac <__aeabi_ddiv>
 80127be:	2c02      	cmp	r4, #2
 80127c0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80127c4:	d1e1      	bne.n	801278a <fmodf+0x6a>
 80127c6:	f7fe ffc1 	bl	801174c <__errno>
 80127ca:	2321      	movs	r3, #33	; 0x21
 80127cc:	6003      	str	r3, [r0, #0]
 80127ce:	e7e0      	b.n	8012792 <fmodf+0x72>
 80127d0:	20000080 	.word	0x20000080
 80127d4:	0802658c 	.word	0x0802658c

080127d8 <__ieee754_fmod>:
 80127d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80127dc:	ec53 2b11 	vmov	r2, r3, d1
 80127e0:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 80127e4:	ea5e 0402 	orrs.w	r4, lr, r2
 80127e8:	ec51 0b10 	vmov	r0, r1, d0
 80127ec:	461e      	mov	r6, r3
 80127ee:	ee11 5a10 	vmov	r5, s2
 80127f2:	4694      	mov	ip, r2
 80127f4:	d00c      	beq.n	8012810 <__ieee754_fmod+0x38>
 80127f6:	4c7a      	ldr	r4, [pc, #488]	; (80129e0 <__ieee754_fmod+0x208>)
 80127f8:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 80127fc:	45a0      	cmp	r8, r4
 80127fe:	4689      	mov	r9, r1
 8012800:	dc06      	bgt.n	8012810 <__ieee754_fmod+0x38>
 8012802:	4254      	negs	r4, r2
 8012804:	4314      	orrs	r4, r2
 8012806:	4f77      	ldr	r7, [pc, #476]	; (80129e4 <__ieee754_fmod+0x20c>)
 8012808:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 801280c:	42bc      	cmp	r4, r7
 801280e:	d909      	bls.n	8012824 <__ieee754_fmod+0x4c>
 8012810:	f7f5 fe22 	bl	8008458 <__aeabi_dmul>
 8012814:	4602      	mov	r2, r0
 8012816:	460b      	mov	r3, r1
 8012818:	f7f5 ff48 	bl	80086ac <__aeabi_ddiv>
 801281c:	ec41 0b10 	vmov	d0, r0, r1
 8012820:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012824:	45f0      	cmp	r8, lr
 8012826:	ee10 2a10 	vmov	r2, s0
 801282a:	4607      	mov	r7, r0
 801282c:	f001 4400 	and.w	r4, r1, #2147483648	; 0x80000000
 8012830:	dc0a      	bgt.n	8012848 <__ieee754_fmod+0x70>
 8012832:	dbf3      	blt.n	801281c <__ieee754_fmod+0x44>
 8012834:	42a8      	cmp	r0, r5
 8012836:	d3f1      	bcc.n	801281c <__ieee754_fmod+0x44>
 8012838:	d106      	bne.n	8012848 <__ieee754_fmod+0x70>
 801283a:	496b      	ldr	r1, [pc, #428]	; (80129e8 <__ieee754_fmod+0x210>)
 801283c:	0fe4      	lsrs	r4, r4, #31
 801283e:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8012842:	e9d4 0100 	ldrd	r0, r1, [r4]
 8012846:	e7e9      	b.n	801281c <__ieee754_fmod+0x44>
 8012848:	4b68      	ldr	r3, [pc, #416]	; (80129ec <__ieee754_fmod+0x214>)
 801284a:	4598      	cmp	r8, r3
 801284c:	dc49      	bgt.n	80128e2 <__ieee754_fmod+0x10a>
 801284e:	f1b8 0f00 	cmp.w	r8, #0
 8012852:	d13d      	bne.n	80128d0 <__ieee754_fmod+0xf8>
 8012854:	4866      	ldr	r0, [pc, #408]	; (80129f0 <__ieee754_fmod+0x218>)
 8012856:	4611      	mov	r1, r2
 8012858:	2900      	cmp	r1, #0
 801285a:	dc36      	bgt.n	80128ca <__ieee754_fmod+0xf2>
 801285c:	459e      	cmp	lr, r3
 801285e:	dc51      	bgt.n	8012904 <__ieee754_fmod+0x12c>
 8012860:	f1be 0f00 	cmp.w	lr, #0
 8012864:	d145      	bne.n	80128f2 <__ieee754_fmod+0x11a>
 8012866:	4b62      	ldr	r3, [pc, #392]	; (80129f0 <__ieee754_fmod+0x218>)
 8012868:	4629      	mov	r1, r5
 801286a:	2900      	cmp	r1, #0
 801286c:	dc3e      	bgt.n	80128ec <__ieee754_fmod+0x114>
 801286e:	4961      	ldr	r1, [pc, #388]	; (80129f4 <__ieee754_fmod+0x21c>)
 8012870:	4288      	cmp	r0, r1
 8012872:	db4c      	blt.n	801290e <__ieee754_fmod+0x136>
 8012874:	f3c9 0113 	ubfx	r1, r9, #0, #20
 8012878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801287c:	4a5d      	ldr	r2, [pc, #372]	; (80129f4 <__ieee754_fmod+0x21c>)
 801287e:	4293      	cmp	r3, r2
 8012880:	db59      	blt.n	8012936 <__ieee754_fmod+0x15e>
 8012882:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8012886:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 801288a:	1ac0      	subs	r0, r0, r3
 801288c:	1b8a      	subs	r2, r1, r6
 801288e:	eba7 050c 	sub.w	r5, r7, ip
 8012892:	2800      	cmp	r0, #0
 8012894:	d166      	bne.n	8012964 <__ieee754_fmod+0x18c>
 8012896:	4567      	cmp	r7, ip
 8012898:	bf38      	it	cc
 801289a:	f102 32ff 	addcc.w	r2, r2, #4294967295
 801289e:	2a00      	cmp	r2, #0
 80128a0:	bfbc      	itt	lt
 80128a2:	463d      	movlt	r5, r7
 80128a4:	460a      	movlt	r2, r1
 80128a6:	ea52 0105 	orrs.w	r1, r2, r5
 80128aa:	d0c6      	beq.n	801283a <__ieee754_fmod+0x62>
 80128ac:	494f      	ldr	r1, [pc, #316]	; (80129ec <__ieee754_fmod+0x214>)
 80128ae:	428a      	cmp	r2, r1
 80128b0:	dd6d      	ble.n	801298e <__ieee754_fmod+0x1b6>
 80128b2:	4950      	ldr	r1, [pc, #320]	; (80129f4 <__ieee754_fmod+0x21c>)
 80128b4:	428b      	cmp	r3, r1
 80128b6:	db70      	blt.n	801299a <__ieee754_fmod+0x1c2>
 80128b8:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 80128bc:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 80128c0:	4314      	orrs	r4, r2
 80128c2:	ea44 5103 	orr.w	r1, r4, r3, lsl #20
 80128c6:	4628      	mov	r0, r5
 80128c8:	e7a8      	b.n	801281c <__ieee754_fmod+0x44>
 80128ca:	3801      	subs	r0, #1
 80128cc:	0049      	lsls	r1, r1, #1
 80128ce:	e7c3      	b.n	8012858 <__ieee754_fmod+0x80>
 80128d0:	4848      	ldr	r0, [pc, #288]	; (80129f4 <__ieee754_fmod+0x21c>)
 80128d2:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 80128d6:	0049      	lsls	r1, r1, #1
 80128d8:	2900      	cmp	r1, #0
 80128da:	f100 30ff 	add.w	r0, r0, #4294967295
 80128de:	dcfa      	bgt.n	80128d6 <__ieee754_fmod+0xfe>
 80128e0:	e7bc      	b.n	801285c <__ieee754_fmod+0x84>
 80128e2:	ea4f 5028 	mov.w	r0, r8, asr #20
 80128e6:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 80128ea:	e7b7      	b.n	801285c <__ieee754_fmod+0x84>
 80128ec:	3b01      	subs	r3, #1
 80128ee:	0049      	lsls	r1, r1, #1
 80128f0:	e7bb      	b.n	801286a <__ieee754_fmod+0x92>
 80128f2:	4b40      	ldr	r3, [pc, #256]	; (80129f4 <__ieee754_fmod+0x21c>)
 80128f4:	ea4f 21ce 	mov.w	r1, lr, lsl #11
 80128f8:	0049      	lsls	r1, r1, #1
 80128fa:	2900      	cmp	r1, #0
 80128fc:	f103 33ff 	add.w	r3, r3, #4294967295
 8012900:	dcfa      	bgt.n	80128f8 <__ieee754_fmod+0x120>
 8012902:	e7b4      	b.n	801286e <__ieee754_fmod+0x96>
 8012904:	ea4f 532e 	mov.w	r3, lr, asr #20
 8012908:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801290c:	e7af      	b.n	801286e <__ieee754_fmod+0x96>
 801290e:	1a0f      	subs	r7, r1, r0
 8012910:	2f1f      	cmp	r7, #31
 8012912:	dc0a      	bgt.n	801292a <__ieee754_fmod+0x152>
 8012914:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 8012918:	fa08 f807 	lsl.w	r8, r8, r7
 801291c:	fa22 f101 	lsr.w	r1, r2, r1
 8012920:	ea41 0108 	orr.w	r1, r1, r8
 8012924:	fa02 f707 	lsl.w	r7, r2, r7
 8012928:	e7a8      	b.n	801287c <__ieee754_fmod+0xa4>
 801292a:	4933      	ldr	r1, [pc, #204]	; (80129f8 <__ieee754_fmod+0x220>)
 801292c:	1a09      	subs	r1, r1, r0
 801292e:	fa02 f101 	lsl.w	r1, r2, r1
 8012932:	2700      	movs	r7, #0
 8012934:	e7a2      	b.n	801287c <__ieee754_fmod+0xa4>
 8012936:	eba2 0c03 	sub.w	ip, r2, r3
 801293a:	f1bc 0f1f 	cmp.w	ip, #31
 801293e:	dc0a      	bgt.n	8012956 <__ieee754_fmod+0x17e>
 8012940:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 8012944:	fa0e fe0c 	lsl.w	lr, lr, ip
 8012948:	fa25 f606 	lsr.w	r6, r5, r6
 801294c:	ea46 060e 	orr.w	r6, r6, lr
 8012950:	fa05 fc0c 	lsl.w	ip, r5, ip
 8012954:	e799      	b.n	801288a <__ieee754_fmod+0xb2>
 8012956:	4e28      	ldr	r6, [pc, #160]	; (80129f8 <__ieee754_fmod+0x220>)
 8012958:	1af6      	subs	r6, r6, r3
 801295a:	fa05 f606 	lsl.w	r6, r5, r6
 801295e:	f04f 0c00 	mov.w	ip, #0
 8012962:	e792      	b.n	801288a <__ieee754_fmod+0xb2>
 8012964:	4567      	cmp	r7, ip
 8012966:	bf38      	it	cc
 8012968:	f102 32ff 	addcc.w	r2, r2, #4294967295
 801296c:	2a00      	cmp	r2, #0
 801296e:	da05      	bge.n	801297c <__ieee754_fmod+0x1a4>
 8012970:	0ffa      	lsrs	r2, r7, #31
 8012972:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8012976:	007f      	lsls	r7, r7, #1
 8012978:	3801      	subs	r0, #1
 801297a:	e787      	b.n	801288c <__ieee754_fmod+0xb4>
 801297c:	ea52 0105 	orrs.w	r1, r2, r5
 8012980:	f43f af5b 	beq.w	801283a <__ieee754_fmod+0x62>
 8012984:	0fe9      	lsrs	r1, r5, #31
 8012986:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 801298a:	006f      	lsls	r7, r5, #1
 801298c:	e7f4      	b.n	8012978 <__ieee754_fmod+0x1a0>
 801298e:	0fe8      	lsrs	r0, r5, #31
 8012990:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8012994:	006d      	lsls	r5, r5, #1
 8012996:	3b01      	subs	r3, #1
 8012998:	e789      	b.n	80128ae <__ieee754_fmod+0xd6>
 801299a:	1ac9      	subs	r1, r1, r3
 801299c:	2914      	cmp	r1, #20
 801299e:	dc0a      	bgt.n	80129b6 <__ieee754_fmod+0x1de>
 80129a0:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 80129a4:	fa02 f303 	lsl.w	r3, r2, r3
 80129a8:	40cd      	lsrs	r5, r1
 80129aa:	432b      	orrs	r3, r5
 80129ac:	410a      	asrs	r2, r1
 80129ae:	ea42 0104 	orr.w	r1, r2, r4
 80129b2:	4618      	mov	r0, r3
 80129b4:	e732      	b.n	801281c <__ieee754_fmod+0x44>
 80129b6:	291f      	cmp	r1, #31
 80129b8:	dc07      	bgt.n	80129ca <__ieee754_fmod+0x1f2>
 80129ba:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 80129be:	40cd      	lsrs	r5, r1
 80129c0:	fa02 f303 	lsl.w	r3, r2, r3
 80129c4:	432b      	orrs	r3, r5
 80129c6:	4622      	mov	r2, r4
 80129c8:	e7f1      	b.n	80129ae <__ieee754_fmod+0x1d6>
 80129ca:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 80129ce:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 80129d2:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 80129d6:	33e2      	adds	r3, #226	; 0xe2
 80129d8:	fa42 f303 	asr.w	r3, r2, r3
 80129dc:	e7f3      	b.n	80129c6 <__ieee754_fmod+0x1ee>
 80129de:	bf00      	nop
 80129e0:	7fefffff 	.word	0x7fefffff
 80129e4:	7ff00000 	.word	0x7ff00000
 80129e8:	08026598 	.word	0x08026598
 80129ec:	000fffff 	.word	0x000fffff
 80129f0:	fffffbed 	.word	0xfffffbed
 80129f4:	fffffc02 	.word	0xfffffc02
 80129f8:	fffffbe2 	.word	0xfffffbe2

080129fc <__ieee754_fmodf>:
 80129fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80129fe:	ee10 6a90 	vmov	r6, s1
 8012a02:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 8012a06:	ee10 3a10 	vmov	r3, s0
 8012a0a:	d009      	beq.n	8012a20 <__ieee754_fmodf+0x24>
 8012a0c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8012a10:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8012a14:	ee10 7a10 	vmov	r7, s0
 8012a18:	da02      	bge.n	8012a20 <__ieee754_fmodf+0x24>
 8012a1a:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8012a1e:	dd0a      	ble.n	8012a36 <__ieee754_fmodf+0x3a>
 8012a20:	ee07 3a90 	vmov	s15, r3
 8012a24:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8012a28:	eec0 7aa0 	vdiv.f32	s15, s1, s1
 8012a2c:	ee17 3a90 	vmov	r3, s15
 8012a30:	ee00 3a10 	vmov	s0, r3
 8012a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012a36:	42a9      	cmp	r1, r5
 8012a38:	dbfa      	blt.n	8012a30 <__ieee754_fmodf+0x34>
 8012a3a:	f003 4400 	and.w	r4, r3, #2147483648	; 0x80000000
 8012a3e:	d105      	bne.n	8012a4c <__ieee754_fmodf+0x50>
 8012a40:	4a30      	ldr	r2, [pc, #192]	; (8012b04 <__ieee754_fmodf+0x108>)
 8012a42:	0fe3      	lsrs	r3, r4, #31
 8012a44:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	e7f1      	b.n	8012a30 <__ieee754_fmodf+0x34>
 8012a4c:	4b2e      	ldr	r3, [pc, #184]	; (8012b08 <__ieee754_fmodf+0x10c>)
 8012a4e:	4299      	cmp	r1, r3
 8012a50:	dc3e      	bgt.n	8012ad0 <__ieee754_fmodf+0xd4>
 8012a52:	020a      	lsls	r2, r1, #8
 8012a54:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8012a58:	2a00      	cmp	r2, #0
 8012a5a:	dc36      	bgt.n	8012aca <__ieee754_fmodf+0xce>
 8012a5c:	429d      	cmp	r5, r3
 8012a5e:	dc3a      	bgt.n	8012ad6 <__ieee754_fmodf+0xda>
 8012a60:	022b      	lsls	r3, r5, #8
 8012a62:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 8012a66:	005b      	lsls	r3, r3, #1
 8012a68:	f102 32ff 	add.w	r2, r2, #4294967295
 8012a6c:	d5fb      	bpl.n	8012a66 <__ieee754_fmodf+0x6a>
 8012a6e:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 8012a72:	bfbb      	ittet	lt
 8012a74:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 8012a78:	1a1b      	sublt	r3, r3, r0
 8012a7a:	f3c7 0116 	ubfxge	r1, r7, #0, #23
 8012a7e:	4099      	lsllt	r1, r3
 8012a80:	bfa8      	it	ge
 8012a82:	f441 0100 	orrge.w	r1, r1, #8388608	; 0x800000
 8012a86:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 8012a8a:	bfb5      	itete	lt
 8012a8c:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 8012a90:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 8012a94:	1a9b      	sublt	r3, r3, r2
 8012a96:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 8012a9a:	bfb8      	it	lt
 8012a9c:	409d      	lsllt	r5, r3
 8012a9e:	1a80      	subs	r0, r0, r2
 8012aa0:	1b4b      	subs	r3, r1, r5
 8012aa2:	b9d8      	cbnz	r0, 8012adc <__ieee754_fmodf+0xe0>
 8012aa4:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 8012aa8:	bf28      	it	cs
 8012aaa:	460b      	movcs	r3, r1
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d0c7      	beq.n	8012a40 <__ieee754_fmodf+0x44>
 8012ab0:	4915      	ldr	r1, [pc, #84]	; (8012b08 <__ieee754_fmodf+0x10c>)
 8012ab2:	428b      	cmp	r3, r1
 8012ab4:	dd1a      	ble.n	8012aec <__ieee754_fmodf+0xf0>
 8012ab6:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 8012aba:	db1a      	blt.n	8012af2 <__ieee754_fmodf+0xf6>
 8012abc:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8012ac0:	4323      	orrs	r3, r4
 8012ac2:	327f      	adds	r2, #127	; 0x7f
 8012ac4:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8012ac8:	e7b2      	b.n	8012a30 <__ieee754_fmodf+0x34>
 8012aca:	3801      	subs	r0, #1
 8012acc:	0052      	lsls	r2, r2, #1
 8012ace:	e7c3      	b.n	8012a58 <__ieee754_fmodf+0x5c>
 8012ad0:	15c8      	asrs	r0, r1, #23
 8012ad2:	387f      	subs	r0, #127	; 0x7f
 8012ad4:	e7c2      	b.n	8012a5c <__ieee754_fmodf+0x60>
 8012ad6:	15ea      	asrs	r2, r5, #23
 8012ad8:	3a7f      	subs	r2, #127	; 0x7f
 8012ada:	e7c8      	b.n	8012a6e <__ieee754_fmodf+0x72>
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	da02      	bge.n	8012ae6 <__ieee754_fmodf+0xea>
 8012ae0:	0049      	lsls	r1, r1, #1
 8012ae2:	3801      	subs	r0, #1
 8012ae4:	e7dc      	b.n	8012aa0 <__ieee754_fmodf+0xa4>
 8012ae6:	d0ab      	beq.n	8012a40 <__ieee754_fmodf+0x44>
 8012ae8:	0059      	lsls	r1, r3, #1
 8012aea:	e7fa      	b.n	8012ae2 <__ieee754_fmodf+0xe6>
 8012aec:	005b      	lsls	r3, r3, #1
 8012aee:	3a01      	subs	r2, #1
 8012af0:	e7df      	b.n	8012ab2 <__ieee754_fmodf+0xb6>
 8012af2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8012af6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8012afa:	3282      	adds	r2, #130	; 0x82
 8012afc:	4113      	asrs	r3, r2
 8012afe:	4323      	orrs	r3, r4
 8012b00:	e796      	b.n	8012a30 <__ieee754_fmodf+0x34>
 8012b02:	bf00      	nop
 8012b04:	080265a8 	.word	0x080265a8
 8012b08:	007fffff 	.word	0x007fffff

08012b0c <matherr>:
 8012b0c:	2000      	movs	r0, #0
 8012b0e:	4770      	bx	lr

08012b10 <_init>:
 8012b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b12:	bf00      	nop
 8012b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012b16:	bc08      	pop	{r3}
 8012b18:	469e      	mov	lr, r3
 8012b1a:	4770      	bx	lr

08012b1c <_fini>:
 8012b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b1e:	bf00      	nop
 8012b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012b22:	bc08      	pop	{r3}
 8012b24:	469e      	mov	lr, r3
 8012b26:	4770      	bx	lr
