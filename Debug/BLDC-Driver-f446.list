
BLDC-Driver-f446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .backup_flash 00004000  08004000  08004000  00014000  2**0
                  ALLOC
  2 .text         0000aa4c  08008000  08008000  00018000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00013ba0  08012a4c  08012a4c  00022a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  080265ec  080265ec  000400a4  2**0
                  CONTENTS
  5 .ARM          00000008  080265ec  080265ec  000365ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  080265f4  080265f4  000400a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  080265f4  080265f4  000365f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  080265f8  080265f8  000365f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000000a4  20000000  080265fc  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000456c  200000a4  080266a0  000400a4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004610  080266a0  00044610  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000400a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c4af  00000000  00000000  000400d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00004185  00000000  00000000  0005c583  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001528  00000000  00000000  00060708  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001320  00000000  00000000  00061c30  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00026473  00000000  00000000  00062f50  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00014032  00000000  00000000  000893c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000da868  00000000  00000000  0009d3f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00177c5d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005eb8  00000000  00000000  00177cd8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008000 <__do_global_dtors_aux>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4c05      	ldr	r4, [pc, #20]	; (8008018 <__do_global_dtors_aux+0x18>)
 8008004:	7823      	ldrb	r3, [r4, #0]
 8008006:	b933      	cbnz	r3, 8008016 <__do_global_dtors_aux+0x16>
 8008008:	4b04      	ldr	r3, [pc, #16]	; (800801c <__do_global_dtors_aux+0x1c>)
 800800a:	b113      	cbz	r3, 8008012 <__do_global_dtors_aux+0x12>
 800800c:	4804      	ldr	r0, [pc, #16]	; (8008020 <__do_global_dtors_aux+0x20>)
 800800e:	f3af 8000 	nop.w
 8008012:	2301      	movs	r3, #1
 8008014:	7023      	strb	r3, [r4, #0]
 8008016:	bd10      	pop	{r4, pc}
 8008018:	200000a4 	.word	0x200000a4
 800801c:	00000000 	.word	0x00000000
 8008020:	08012a34 	.word	0x08012a34

08008024 <frame_dummy>:
 8008024:	b508      	push	{r3, lr}
 8008026:	4b03      	ldr	r3, [pc, #12]	; (8008034 <frame_dummy+0x10>)
 8008028:	b11b      	cbz	r3, 8008032 <frame_dummy+0xe>
 800802a:	4903      	ldr	r1, [pc, #12]	; (8008038 <frame_dummy+0x14>)
 800802c:	4803      	ldr	r0, [pc, #12]	; (800803c <frame_dummy+0x18>)
 800802e:	f3af 8000 	nop.w
 8008032:	bd08      	pop	{r3, pc}
 8008034:	00000000 	.word	0x00000000
 8008038:	200000a8 	.word	0x200000a8
 800803c:	08012a34 	.word	0x08012a34

08008040 <memchr>:
 8008040:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008044:	2a10      	cmp	r2, #16
 8008046:	db2b      	blt.n	80080a0 <memchr+0x60>
 8008048:	f010 0f07 	tst.w	r0, #7
 800804c:	d008      	beq.n	8008060 <memchr+0x20>
 800804e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008052:	3a01      	subs	r2, #1
 8008054:	428b      	cmp	r3, r1
 8008056:	d02d      	beq.n	80080b4 <memchr+0x74>
 8008058:	f010 0f07 	tst.w	r0, #7
 800805c:	b342      	cbz	r2, 80080b0 <memchr+0x70>
 800805e:	d1f6      	bne.n	800804e <memchr+0xe>
 8008060:	b4f0      	push	{r4, r5, r6, r7}
 8008062:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008066:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800806a:	f022 0407 	bic.w	r4, r2, #7
 800806e:	f07f 0700 	mvns.w	r7, #0
 8008072:	2300      	movs	r3, #0
 8008074:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008078:	3c08      	subs	r4, #8
 800807a:	ea85 0501 	eor.w	r5, r5, r1
 800807e:	ea86 0601 	eor.w	r6, r6, r1
 8008082:	fa85 f547 	uadd8	r5, r5, r7
 8008086:	faa3 f587 	sel	r5, r3, r7
 800808a:	fa86 f647 	uadd8	r6, r6, r7
 800808e:	faa5 f687 	sel	r6, r5, r7
 8008092:	b98e      	cbnz	r6, 80080b8 <memchr+0x78>
 8008094:	d1ee      	bne.n	8008074 <memchr+0x34>
 8008096:	bcf0      	pop	{r4, r5, r6, r7}
 8008098:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800809c:	f002 0207 	and.w	r2, r2, #7
 80080a0:	b132      	cbz	r2, 80080b0 <memchr+0x70>
 80080a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80080a6:	3a01      	subs	r2, #1
 80080a8:	ea83 0301 	eor.w	r3, r3, r1
 80080ac:	b113      	cbz	r3, 80080b4 <memchr+0x74>
 80080ae:	d1f8      	bne.n	80080a2 <memchr+0x62>
 80080b0:	2000      	movs	r0, #0
 80080b2:	4770      	bx	lr
 80080b4:	3801      	subs	r0, #1
 80080b6:	4770      	bx	lr
 80080b8:	2d00      	cmp	r5, #0
 80080ba:	bf06      	itte	eq
 80080bc:	4635      	moveq	r5, r6
 80080be:	3803      	subeq	r0, #3
 80080c0:	3807      	subne	r0, #7
 80080c2:	f015 0f01 	tst.w	r5, #1
 80080c6:	d107      	bne.n	80080d8 <memchr+0x98>
 80080c8:	3001      	adds	r0, #1
 80080ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80080ce:	bf02      	ittt	eq
 80080d0:	3001      	addeq	r0, #1
 80080d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80080d6:	3001      	addeq	r0, #1
 80080d8:	bcf0      	pop	{r4, r5, r6, r7}
 80080da:	3801      	subs	r0, #1
 80080dc:	4770      	bx	lr
 80080de:	bf00      	nop

080080e0 <__aeabi_drsub>:
 80080e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80080e4:	e002      	b.n	80080ec <__adddf3>
 80080e6:	bf00      	nop

080080e8 <__aeabi_dsub>:
 80080e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080080ec <__adddf3>:
 80080ec:	b530      	push	{r4, r5, lr}
 80080ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80080f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80080f6:	ea94 0f05 	teq	r4, r5
 80080fa:	bf08      	it	eq
 80080fc:	ea90 0f02 	teqeq	r0, r2
 8008100:	bf1f      	itttt	ne
 8008102:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008106:	ea55 0c02 	orrsne.w	ip, r5, r2
 800810a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800810e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008112:	f000 80e2 	beq.w	80082da <__adddf3+0x1ee>
 8008116:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800811a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800811e:	bfb8      	it	lt
 8008120:	426d      	neglt	r5, r5
 8008122:	dd0c      	ble.n	800813e <__adddf3+0x52>
 8008124:	442c      	add	r4, r5
 8008126:	ea80 0202 	eor.w	r2, r0, r2
 800812a:	ea81 0303 	eor.w	r3, r1, r3
 800812e:	ea82 0000 	eor.w	r0, r2, r0
 8008132:	ea83 0101 	eor.w	r1, r3, r1
 8008136:	ea80 0202 	eor.w	r2, r0, r2
 800813a:	ea81 0303 	eor.w	r3, r1, r3
 800813e:	2d36      	cmp	r5, #54	; 0x36
 8008140:	bf88      	it	hi
 8008142:	bd30      	pophi	{r4, r5, pc}
 8008144:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008148:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800814c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008150:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008154:	d002      	beq.n	800815c <__adddf3+0x70>
 8008156:	4240      	negs	r0, r0
 8008158:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800815c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008160:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008164:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008168:	d002      	beq.n	8008170 <__adddf3+0x84>
 800816a:	4252      	negs	r2, r2
 800816c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008170:	ea94 0f05 	teq	r4, r5
 8008174:	f000 80a7 	beq.w	80082c6 <__adddf3+0x1da>
 8008178:	f1a4 0401 	sub.w	r4, r4, #1
 800817c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008180:	db0d      	blt.n	800819e <__adddf3+0xb2>
 8008182:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008186:	fa22 f205 	lsr.w	r2, r2, r5
 800818a:	1880      	adds	r0, r0, r2
 800818c:	f141 0100 	adc.w	r1, r1, #0
 8008190:	fa03 f20e 	lsl.w	r2, r3, lr
 8008194:	1880      	adds	r0, r0, r2
 8008196:	fa43 f305 	asr.w	r3, r3, r5
 800819a:	4159      	adcs	r1, r3
 800819c:	e00e      	b.n	80081bc <__adddf3+0xd0>
 800819e:	f1a5 0520 	sub.w	r5, r5, #32
 80081a2:	f10e 0e20 	add.w	lr, lr, #32
 80081a6:	2a01      	cmp	r2, #1
 80081a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80081ac:	bf28      	it	cs
 80081ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80081b2:	fa43 f305 	asr.w	r3, r3, r5
 80081b6:	18c0      	adds	r0, r0, r3
 80081b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80081bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80081c0:	d507      	bpl.n	80081d2 <__adddf3+0xe6>
 80081c2:	f04f 0e00 	mov.w	lr, #0
 80081c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80081ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80081ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80081d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80081d6:	d31b      	bcc.n	8008210 <__adddf3+0x124>
 80081d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80081dc:	d30c      	bcc.n	80081f8 <__adddf3+0x10c>
 80081de:	0849      	lsrs	r1, r1, #1
 80081e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80081e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80081e8:	f104 0401 	add.w	r4, r4, #1
 80081ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80081f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80081f4:	f080 809a 	bcs.w	800832c <__adddf3+0x240>
 80081f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80081fc:	bf08      	it	eq
 80081fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008202:	f150 0000 	adcs.w	r0, r0, #0
 8008206:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800820a:	ea41 0105 	orr.w	r1, r1, r5
 800820e:	bd30      	pop	{r4, r5, pc}
 8008210:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008214:	4140      	adcs	r0, r0
 8008216:	eb41 0101 	adc.w	r1, r1, r1
 800821a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800821e:	f1a4 0401 	sub.w	r4, r4, #1
 8008222:	d1e9      	bne.n	80081f8 <__adddf3+0x10c>
 8008224:	f091 0f00 	teq	r1, #0
 8008228:	bf04      	itt	eq
 800822a:	4601      	moveq	r1, r0
 800822c:	2000      	moveq	r0, #0
 800822e:	fab1 f381 	clz	r3, r1
 8008232:	bf08      	it	eq
 8008234:	3320      	addeq	r3, #32
 8008236:	f1a3 030b 	sub.w	r3, r3, #11
 800823a:	f1b3 0220 	subs.w	r2, r3, #32
 800823e:	da0c      	bge.n	800825a <__adddf3+0x16e>
 8008240:	320c      	adds	r2, #12
 8008242:	dd08      	ble.n	8008256 <__adddf3+0x16a>
 8008244:	f102 0c14 	add.w	ip, r2, #20
 8008248:	f1c2 020c 	rsb	r2, r2, #12
 800824c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008250:	fa21 f102 	lsr.w	r1, r1, r2
 8008254:	e00c      	b.n	8008270 <__adddf3+0x184>
 8008256:	f102 0214 	add.w	r2, r2, #20
 800825a:	bfd8      	it	le
 800825c:	f1c2 0c20 	rsble	ip, r2, #32
 8008260:	fa01 f102 	lsl.w	r1, r1, r2
 8008264:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008268:	bfdc      	itt	le
 800826a:	ea41 010c 	orrle.w	r1, r1, ip
 800826e:	4090      	lslle	r0, r2
 8008270:	1ae4      	subs	r4, r4, r3
 8008272:	bfa2      	ittt	ge
 8008274:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008278:	4329      	orrge	r1, r5
 800827a:	bd30      	popge	{r4, r5, pc}
 800827c:	ea6f 0404 	mvn.w	r4, r4
 8008280:	3c1f      	subs	r4, #31
 8008282:	da1c      	bge.n	80082be <__adddf3+0x1d2>
 8008284:	340c      	adds	r4, #12
 8008286:	dc0e      	bgt.n	80082a6 <__adddf3+0x1ba>
 8008288:	f104 0414 	add.w	r4, r4, #20
 800828c:	f1c4 0220 	rsb	r2, r4, #32
 8008290:	fa20 f004 	lsr.w	r0, r0, r4
 8008294:	fa01 f302 	lsl.w	r3, r1, r2
 8008298:	ea40 0003 	orr.w	r0, r0, r3
 800829c:	fa21 f304 	lsr.w	r3, r1, r4
 80082a0:	ea45 0103 	orr.w	r1, r5, r3
 80082a4:	bd30      	pop	{r4, r5, pc}
 80082a6:	f1c4 040c 	rsb	r4, r4, #12
 80082aa:	f1c4 0220 	rsb	r2, r4, #32
 80082ae:	fa20 f002 	lsr.w	r0, r0, r2
 80082b2:	fa01 f304 	lsl.w	r3, r1, r4
 80082b6:	ea40 0003 	orr.w	r0, r0, r3
 80082ba:	4629      	mov	r1, r5
 80082bc:	bd30      	pop	{r4, r5, pc}
 80082be:	fa21 f004 	lsr.w	r0, r1, r4
 80082c2:	4629      	mov	r1, r5
 80082c4:	bd30      	pop	{r4, r5, pc}
 80082c6:	f094 0f00 	teq	r4, #0
 80082ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80082ce:	bf06      	itte	eq
 80082d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80082d4:	3401      	addeq	r4, #1
 80082d6:	3d01      	subne	r5, #1
 80082d8:	e74e      	b.n	8008178 <__adddf3+0x8c>
 80082da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80082de:	bf18      	it	ne
 80082e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80082e4:	d029      	beq.n	800833a <__adddf3+0x24e>
 80082e6:	ea94 0f05 	teq	r4, r5
 80082ea:	bf08      	it	eq
 80082ec:	ea90 0f02 	teqeq	r0, r2
 80082f0:	d005      	beq.n	80082fe <__adddf3+0x212>
 80082f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80082f6:	bf04      	itt	eq
 80082f8:	4619      	moveq	r1, r3
 80082fa:	4610      	moveq	r0, r2
 80082fc:	bd30      	pop	{r4, r5, pc}
 80082fe:	ea91 0f03 	teq	r1, r3
 8008302:	bf1e      	ittt	ne
 8008304:	2100      	movne	r1, #0
 8008306:	2000      	movne	r0, #0
 8008308:	bd30      	popne	{r4, r5, pc}
 800830a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800830e:	d105      	bne.n	800831c <__adddf3+0x230>
 8008310:	0040      	lsls	r0, r0, #1
 8008312:	4149      	adcs	r1, r1
 8008314:	bf28      	it	cs
 8008316:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800831a:	bd30      	pop	{r4, r5, pc}
 800831c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008320:	bf3c      	itt	cc
 8008322:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008326:	bd30      	popcc	{r4, r5, pc}
 8008328:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800832c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008330:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008334:	f04f 0000 	mov.w	r0, #0
 8008338:	bd30      	pop	{r4, r5, pc}
 800833a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800833e:	bf1a      	itte	ne
 8008340:	4619      	movne	r1, r3
 8008342:	4610      	movne	r0, r2
 8008344:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008348:	bf1c      	itt	ne
 800834a:	460b      	movne	r3, r1
 800834c:	4602      	movne	r2, r0
 800834e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008352:	bf06      	itte	eq
 8008354:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008358:	ea91 0f03 	teqeq	r1, r3
 800835c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008360:	bd30      	pop	{r4, r5, pc}
 8008362:	bf00      	nop

08008364 <__aeabi_ui2d>:
 8008364:	f090 0f00 	teq	r0, #0
 8008368:	bf04      	itt	eq
 800836a:	2100      	moveq	r1, #0
 800836c:	4770      	bxeq	lr
 800836e:	b530      	push	{r4, r5, lr}
 8008370:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008374:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008378:	f04f 0500 	mov.w	r5, #0
 800837c:	f04f 0100 	mov.w	r1, #0
 8008380:	e750      	b.n	8008224 <__adddf3+0x138>
 8008382:	bf00      	nop

08008384 <__aeabi_i2d>:
 8008384:	f090 0f00 	teq	r0, #0
 8008388:	bf04      	itt	eq
 800838a:	2100      	moveq	r1, #0
 800838c:	4770      	bxeq	lr
 800838e:	b530      	push	{r4, r5, lr}
 8008390:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008394:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008398:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800839c:	bf48      	it	mi
 800839e:	4240      	negmi	r0, r0
 80083a0:	f04f 0100 	mov.w	r1, #0
 80083a4:	e73e      	b.n	8008224 <__adddf3+0x138>
 80083a6:	bf00      	nop

080083a8 <__aeabi_f2d>:
 80083a8:	0042      	lsls	r2, r0, #1
 80083aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80083ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80083b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80083b6:	bf1f      	itttt	ne
 80083b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80083bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80083c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80083c4:	4770      	bxne	lr
 80083c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80083ca:	bf08      	it	eq
 80083cc:	4770      	bxeq	lr
 80083ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80083d2:	bf04      	itt	eq
 80083d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80083d8:	4770      	bxeq	lr
 80083da:	b530      	push	{r4, r5, lr}
 80083dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80083e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80083e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80083e8:	e71c      	b.n	8008224 <__adddf3+0x138>
 80083ea:	bf00      	nop

080083ec <__aeabi_ul2d>:
 80083ec:	ea50 0201 	orrs.w	r2, r0, r1
 80083f0:	bf08      	it	eq
 80083f2:	4770      	bxeq	lr
 80083f4:	b530      	push	{r4, r5, lr}
 80083f6:	f04f 0500 	mov.w	r5, #0
 80083fa:	e00a      	b.n	8008412 <__aeabi_l2d+0x16>

080083fc <__aeabi_l2d>:
 80083fc:	ea50 0201 	orrs.w	r2, r0, r1
 8008400:	bf08      	it	eq
 8008402:	4770      	bxeq	lr
 8008404:	b530      	push	{r4, r5, lr}
 8008406:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800840a:	d502      	bpl.n	8008412 <__aeabi_l2d+0x16>
 800840c:	4240      	negs	r0, r0
 800840e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008412:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008416:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800841a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800841e:	f43f aed8 	beq.w	80081d2 <__adddf3+0xe6>
 8008422:	f04f 0203 	mov.w	r2, #3
 8008426:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800842a:	bf18      	it	ne
 800842c:	3203      	addne	r2, #3
 800842e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008432:	bf18      	it	ne
 8008434:	3203      	addne	r2, #3
 8008436:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800843a:	f1c2 0320 	rsb	r3, r2, #32
 800843e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008442:	fa20 f002 	lsr.w	r0, r0, r2
 8008446:	fa01 fe03 	lsl.w	lr, r1, r3
 800844a:	ea40 000e 	orr.w	r0, r0, lr
 800844e:	fa21 f102 	lsr.w	r1, r1, r2
 8008452:	4414      	add	r4, r2
 8008454:	e6bd      	b.n	80081d2 <__adddf3+0xe6>
 8008456:	bf00      	nop

08008458 <__aeabi_dmul>:
 8008458:	b570      	push	{r4, r5, r6, lr}
 800845a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800845e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008462:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008466:	bf1d      	ittte	ne
 8008468:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800846c:	ea94 0f0c 	teqne	r4, ip
 8008470:	ea95 0f0c 	teqne	r5, ip
 8008474:	f000 f8de 	bleq	8008634 <__aeabi_dmul+0x1dc>
 8008478:	442c      	add	r4, r5
 800847a:	ea81 0603 	eor.w	r6, r1, r3
 800847e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008482:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008486:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800848a:	bf18      	it	ne
 800848c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8008490:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008494:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008498:	d038      	beq.n	800850c <__aeabi_dmul+0xb4>
 800849a:	fba0 ce02 	umull	ip, lr, r0, r2
 800849e:	f04f 0500 	mov.w	r5, #0
 80084a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80084a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80084aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80084ae:	f04f 0600 	mov.w	r6, #0
 80084b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80084b6:	f09c 0f00 	teq	ip, #0
 80084ba:	bf18      	it	ne
 80084bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80084c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80084c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80084c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80084cc:	d204      	bcs.n	80084d8 <__aeabi_dmul+0x80>
 80084ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80084d2:	416d      	adcs	r5, r5
 80084d4:	eb46 0606 	adc.w	r6, r6, r6
 80084d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80084dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80084e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80084e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80084e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80084ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80084f0:	bf88      	it	hi
 80084f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80084f6:	d81e      	bhi.n	8008536 <__aeabi_dmul+0xde>
 80084f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80084fc:	bf08      	it	eq
 80084fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008502:	f150 0000 	adcs.w	r0, r0, #0
 8008506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800850a:	bd70      	pop	{r4, r5, r6, pc}
 800850c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008510:	ea46 0101 	orr.w	r1, r6, r1
 8008514:	ea40 0002 	orr.w	r0, r0, r2
 8008518:	ea81 0103 	eor.w	r1, r1, r3
 800851c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008520:	bfc2      	ittt	gt
 8008522:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008526:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800852a:	bd70      	popgt	{r4, r5, r6, pc}
 800852c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008530:	f04f 0e00 	mov.w	lr, #0
 8008534:	3c01      	subs	r4, #1
 8008536:	f300 80ab 	bgt.w	8008690 <__aeabi_dmul+0x238>
 800853a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800853e:	bfde      	ittt	le
 8008540:	2000      	movle	r0, #0
 8008542:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008546:	bd70      	pople	{r4, r5, r6, pc}
 8008548:	f1c4 0400 	rsb	r4, r4, #0
 800854c:	3c20      	subs	r4, #32
 800854e:	da35      	bge.n	80085bc <__aeabi_dmul+0x164>
 8008550:	340c      	adds	r4, #12
 8008552:	dc1b      	bgt.n	800858c <__aeabi_dmul+0x134>
 8008554:	f104 0414 	add.w	r4, r4, #20
 8008558:	f1c4 0520 	rsb	r5, r4, #32
 800855c:	fa00 f305 	lsl.w	r3, r0, r5
 8008560:	fa20 f004 	lsr.w	r0, r0, r4
 8008564:	fa01 f205 	lsl.w	r2, r1, r5
 8008568:	ea40 0002 	orr.w	r0, r0, r2
 800856c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008570:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008574:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008578:	fa21 f604 	lsr.w	r6, r1, r4
 800857c:	eb42 0106 	adc.w	r1, r2, r6
 8008580:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008584:	bf08      	it	eq
 8008586:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800858a:	bd70      	pop	{r4, r5, r6, pc}
 800858c:	f1c4 040c 	rsb	r4, r4, #12
 8008590:	f1c4 0520 	rsb	r5, r4, #32
 8008594:	fa00 f304 	lsl.w	r3, r0, r4
 8008598:	fa20 f005 	lsr.w	r0, r0, r5
 800859c:	fa01 f204 	lsl.w	r2, r1, r4
 80085a0:	ea40 0002 	orr.w	r0, r0, r2
 80085a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80085ac:	f141 0100 	adc.w	r1, r1, #0
 80085b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085b4:	bf08      	it	eq
 80085b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085ba:	bd70      	pop	{r4, r5, r6, pc}
 80085bc:	f1c4 0520 	rsb	r5, r4, #32
 80085c0:	fa00 f205 	lsl.w	r2, r0, r5
 80085c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80085c8:	fa20 f304 	lsr.w	r3, r0, r4
 80085cc:	fa01 f205 	lsl.w	r2, r1, r5
 80085d0:	ea43 0302 	orr.w	r3, r3, r2
 80085d4:	fa21 f004 	lsr.w	r0, r1, r4
 80085d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085dc:	fa21 f204 	lsr.w	r2, r1, r4
 80085e0:	ea20 0002 	bic.w	r0, r0, r2
 80085e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80085e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085ec:	bf08      	it	eq
 80085ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085f2:	bd70      	pop	{r4, r5, r6, pc}
 80085f4:	f094 0f00 	teq	r4, #0
 80085f8:	d10f      	bne.n	800861a <__aeabi_dmul+0x1c2>
 80085fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80085fe:	0040      	lsls	r0, r0, #1
 8008600:	eb41 0101 	adc.w	r1, r1, r1
 8008604:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008608:	bf08      	it	eq
 800860a:	3c01      	subeq	r4, #1
 800860c:	d0f7      	beq.n	80085fe <__aeabi_dmul+0x1a6>
 800860e:	ea41 0106 	orr.w	r1, r1, r6
 8008612:	f095 0f00 	teq	r5, #0
 8008616:	bf18      	it	ne
 8008618:	4770      	bxne	lr
 800861a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800861e:	0052      	lsls	r2, r2, #1
 8008620:	eb43 0303 	adc.w	r3, r3, r3
 8008624:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008628:	bf08      	it	eq
 800862a:	3d01      	subeq	r5, #1
 800862c:	d0f7      	beq.n	800861e <__aeabi_dmul+0x1c6>
 800862e:	ea43 0306 	orr.w	r3, r3, r6
 8008632:	4770      	bx	lr
 8008634:	ea94 0f0c 	teq	r4, ip
 8008638:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800863c:	bf18      	it	ne
 800863e:	ea95 0f0c 	teqne	r5, ip
 8008642:	d00c      	beq.n	800865e <__aeabi_dmul+0x206>
 8008644:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008648:	bf18      	it	ne
 800864a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800864e:	d1d1      	bne.n	80085f4 <__aeabi_dmul+0x19c>
 8008650:	ea81 0103 	eor.w	r1, r1, r3
 8008654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008658:	f04f 0000 	mov.w	r0, #0
 800865c:	bd70      	pop	{r4, r5, r6, pc}
 800865e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008662:	bf06      	itte	eq
 8008664:	4610      	moveq	r0, r2
 8008666:	4619      	moveq	r1, r3
 8008668:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800866c:	d019      	beq.n	80086a2 <__aeabi_dmul+0x24a>
 800866e:	ea94 0f0c 	teq	r4, ip
 8008672:	d102      	bne.n	800867a <__aeabi_dmul+0x222>
 8008674:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008678:	d113      	bne.n	80086a2 <__aeabi_dmul+0x24a>
 800867a:	ea95 0f0c 	teq	r5, ip
 800867e:	d105      	bne.n	800868c <__aeabi_dmul+0x234>
 8008680:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008684:	bf1c      	itt	ne
 8008686:	4610      	movne	r0, r2
 8008688:	4619      	movne	r1, r3
 800868a:	d10a      	bne.n	80086a2 <__aeabi_dmul+0x24a>
 800868c:	ea81 0103 	eor.w	r1, r1, r3
 8008690:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008694:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8008698:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800869c:	f04f 0000 	mov.w	r0, #0
 80086a0:	bd70      	pop	{r4, r5, r6, pc}
 80086a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80086aa:	bd70      	pop	{r4, r5, r6, pc}

080086ac <__aeabi_ddiv>:
 80086ac:	b570      	push	{r4, r5, r6, lr}
 80086ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80086b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80086b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80086ba:	bf1d      	ittte	ne
 80086bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80086c0:	ea94 0f0c 	teqne	r4, ip
 80086c4:	ea95 0f0c 	teqne	r5, ip
 80086c8:	f000 f8a7 	bleq	800881a <__aeabi_ddiv+0x16e>
 80086cc:	eba4 0405 	sub.w	r4, r4, r5
 80086d0:	ea81 0e03 	eor.w	lr, r1, r3
 80086d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80086d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80086dc:	f000 8088 	beq.w	80087f0 <__aeabi_ddiv+0x144>
 80086e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80086e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80086e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80086ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80086f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80086f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80086f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80086fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008700:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008704:	429d      	cmp	r5, r3
 8008706:	bf08      	it	eq
 8008708:	4296      	cmpeq	r6, r2
 800870a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800870e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008712:	d202      	bcs.n	800871a <__aeabi_ddiv+0x6e>
 8008714:	085b      	lsrs	r3, r3, #1
 8008716:	ea4f 0232 	mov.w	r2, r2, rrx
 800871a:	1ab6      	subs	r6, r6, r2
 800871c:	eb65 0503 	sbc.w	r5, r5, r3
 8008720:	085b      	lsrs	r3, r3, #1
 8008722:	ea4f 0232 	mov.w	r2, r2, rrx
 8008726:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800872a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800872e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008732:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008736:	bf22      	ittt	cs
 8008738:	1ab6      	subcs	r6, r6, r2
 800873a:	4675      	movcs	r5, lr
 800873c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008740:	085b      	lsrs	r3, r3, #1
 8008742:	ea4f 0232 	mov.w	r2, r2, rrx
 8008746:	ebb6 0e02 	subs.w	lr, r6, r2
 800874a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800874e:	bf22      	ittt	cs
 8008750:	1ab6      	subcs	r6, r6, r2
 8008752:	4675      	movcs	r5, lr
 8008754:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008758:	085b      	lsrs	r3, r3, #1
 800875a:	ea4f 0232 	mov.w	r2, r2, rrx
 800875e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008762:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008766:	bf22      	ittt	cs
 8008768:	1ab6      	subcs	r6, r6, r2
 800876a:	4675      	movcs	r5, lr
 800876c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008770:	085b      	lsrs	r3, r3, #1
 8008772:	ea4f 0232 	mov.w	r2, r2, rrx
 8008776:	ebb6 0e02 	subs.w	lr, r6, r2
 800877a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800877e:	bf22      	ittt	cs
 8008780:	1ab6      	subcs	r6, r6, r2
 8008782:	4675      	movcs	r5, lr
 8008784:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008788:	ea55 0e06 	orrs.w	lr, r5, r6
 800878c:	d018      	beq.n	80087c0 <__aeabi_ddiv+0x114>
 800878e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8008792:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8008796:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800879a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800879e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80087a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80087a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80087aa:	d1c0      	bne.n	800872e <__aeabi_ddiv+0x82>
 80087ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087b0:	d10b      	bne.n	80087ca <__aeabi_ddiv+0x11e>
 80087b2:	ea41 0100 	orr.w	r1, r1, r0
 80087b6:	f04f 0000 	mov.w	r0, #0
 80087ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80087be:	e7b6      	b.n	800872e <__aeabi_ddiv+0x82>
 80087c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087c4:	bf04      	itt	eq
 80087c6:	4301      	orreq	r1, r0
 80087c8:	2000      	moveq	r0, #0
 80087ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80087ce:	bf88      	it	hi
 80087d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80087d4:	f63f aeaf 	bhi.w	8008536 <__aeabi_dmul+0xde>
 80087d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80087dc:	bf04      	itt	eq
 80087de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80087e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80087e6:	f150 0000 	adcs.w	r0, r0, #0
 80087ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80087ee:	bd70      	pop	{r4, r5, r6, pc}
 80087f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80087f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80087f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80087fc:	bfc2      	ittt	gt
 80087fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008802:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008806:	bd70      	popgt	{r4, r5, r6, pc}
 8008808:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800880c:	f04f 0e00 	mov.w	lr, #0
 8008810:	3c01      	subs	r4, #1
 8008812:	e690      	b.n	8008536 <__aeabi_dmul+0xde>
 8008814:	ea45 0e06 	orr.w	lr, r5, r6
 8008818:	e68d      	b.n	8008536 <__aeabi_dmul+0xde>
 800881a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800881e:	ea94 0f0c 	teq	r4, ip
 8008822:	bf08      	it	eq
 8008824:	ea95 0f0c 	teqeq	r5, ip
 8008828:	f43f af3b 	beq.w	80086a2 <__aeabi_dmul+0x24a>
 800882c:	ea94 0f0c 	teq	r4, ip
 8008830:	d10a      	bne.n	8008848 <__aeabi_ddiv+0x19c>
 8008832:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008836:	f47f af34 	bne.w	80086a2 <__aeabi_dmul+0x24a>
 800883a:	ea95 0f0c 	teq	r5, ip
 800883e:	f47f af25 	bne.w	800868c <__aeabi_dmul+0x234>
 8008842:	4610      	mov	r0, r2
 8008844:	4619      	mov	r1, r3
 8008846:	e72c      	b.n	80086a2 <__aeabi_dmul+0x24a>
 8008848:	ea95 0f0c 	teq	r5, ip
 800884c:	d106      	bne.n	800885c <__aeabi_ddiv+0x1b0>
 800884e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008852:	f43f aefd 	beq.w	8008650 <__aeabi_dmul+0x1f8>
 8008856:	4610      	mov	r0, r2
 8008858:	4619      	mov	r1, r3
 800885a:	e722      	b.n	80086a2 <__aeabi_dmul+0x24a>
 800885c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008860:	bf18      	it	ne
 8008862:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008866:	f47f aec5 	bne.w	80085f4 <__aeabi_dmul+0x19c>
 800886a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800886e:	f47f af0d 	bne.w	800868c <__aeabi_dmul+0x234>
 8008872:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008876:	f47f aeeb 	bne.w	8008650 <__aeabi_dmul+0x1f8>
 800887a:	e712      	b.n	80086a2 <__aeabi_dmul+0x24a>

0800887c <__gedf2>:
 800887c:	f04f 3cff 	mov.w	ip, #4294967295
 8008880:	e006      	b.n	8008890 <__cmpdf2+0x4>
 8008882:	bf00      	nop

08008884 <__ledf2>:
 8008884:	f04f 0c01 	mov.w	ip, #1
 8008888:	e002      	b.n	8008890 <__cmpdf2+0x4>
 800888a:	bf00      	nop

0800888c <__cmpdf2>:
 800888c:	f04f 0c01 	mov.w	ip, #1
 8008890:	f84d cd04 	str.w	ip, [sp, #-4]!
 8008894:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8008898:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800889c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80088a0:	bf18      	it	ne
 80088a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80088a6:	d01b      	beq.n	80088e0 <__cmpdf2+0x54>
 80088a8:	b001      	add	sp, #4
 80088aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80088ae:	bf0c      	ite	eq
 80088b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80088b4:	ea91 0f03 	teqne	r1, r3
 80088b8:	bf02      	ittt	eq
 80088ba:	ea90 0f02 	teqeq	r0, r2
 80088be:	2000      	moveq	r0, #0
 80088c0:	4770      	bxeq	lr
 80088c2:	f110 0f00 	cmn.w	r0, #0
 80088c6:	ea91 0f03 	teq	r1, r3
 80088ca:	bf58      	it	pl
 80088cc:	4299      	cmppl	r1, r3
 80088ce:	bf08      	it	eq
 80088d0:	4290      	cmpeq	r0, r2
 80088d2:	bf2c      	ite	cs
 80088d4:	17d8      	asrcs	r0, r3, #31
 80088d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80088da:	f040 0001 	orr.w	r0, r0, #1
 80088de:	4770      	bx	lr
 80088e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088e8:	d102      	bne.n	80088f0 <__cmpdf2+0x64>
 80088ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80088ee:	d107      	bne.n	8008900 <__cmpdf2+0x74>
 80088f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80088f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088f8:	d1d6      	bne.n	80088a8 <__cmpdf2+0x1c>
 80088fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80088fe:	d0d3      	beq.n	80088a8 <__cmpdf2+0x1c>
 8008900:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008904:	4770      	bx	lr
 8008906:	bf00      	nop

08008908 <__aeabi_cdrcmple>:
 8008908:	4684      	mov	ip, r0
 800890a:	4610      	mov	r0, r2
 800890c:	4662      	mov	r2, ip
 800890e:	468c      	mov	ip, r1
 8008910:	4619      	mov	r1, r3
 8008912:	4663      	mov	r3, ip
 8008914:	e000      	b.n	8008918 <__aeabi_cdcmpeq>
 8008916:	bf00      	nop

08008918 <__aeabi_cdcmpeq>:
 8008918:	b501      	push	{r0, lr}
 800891a:	f7ff ffb7 	bl	800888c <__cmpdf2>
 800891e:	2800      	cmp	r0, #0
 8008920:	bf48      	it	mi
 8008922:	f110 0f00 	cmnmi.w	r0, #0
 8008926:	bd01      	pop	{r0, pc}

08008928 <__aeabi_dcmpeq>:
 8008928:	f84d ed08 	str.w	lr, [sp, #-8]!
 800892c:	f7ff fff4 	bl	8008918 <__aeabi_cdcmpeq>
 8008930:	bf0c      	ite	eq
 8008932:	2001      	moveq	r0, #1
 8008934:	2000      	movne	r0, #0
 8008936:	f85d fb08 	ldr.w	pc, [sp], #8
 800893a:	bf00      	nop

0800893c <__aeabi_dcmplt>:
 800893c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008940:	f7ff ffea 	bl	8008918 <__aeabi_cdcmpeq>
 8008944:	bf34      	ite	cc
 8008946:	2001      	movcc	r0, #1
 8008948:	2000      	movcs	r0, #0
 800894a:	f85d fb08 	ldr.w	pc, [sp], #8
 800894e:	bf00      	nop

08008950 <__aeabi_dcmple>:
 8008950:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008954:	f7ff ffe0 	bl	8008918 <__aeabi_cdcmpeq>
 8008958:	bf94      	ite	ls
 800895a:	2001      	movls	r0, #1
 800895c:	2000      	movhi	r0, #0
 800895e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008962:	bf00      	nop

08008964 <__aeabi_dcmpge>:
 8008964:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008968:	f7ff ffce 	bl	8008908 <__aeabi_cdrcmple>
 800896c:	bf94      	ite	ls
 800896e:	2001      	movls	r0, #1
 8008970:	2000      	movhi	r0, #0
 8008972:	f85d fb08 	ldr.w	pc, [sp], #8
 8008976:	bf00      	nop

08008978 <__aeabi_dcmpgt>:
 8008978:	f84d ed08 	str.w	lr, [sp, #-8]!
 800897c:	f7ff ffc4 	bl	8008908 <__aeabi_cdrcmple>
 8008980:	bf34      	ite	cc
 8008982:	2001      	movcc	r0, #1
 8008984:	2000      	movcs	r0, #0
 8008986:	f85d fb08 	ldr.w	pc, [sp], #8
 800898a:	bf00      	nop

0800898c <__aeabi_d2f>:
 800898c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008990:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8008994:	bf24      	itt	cs
 8008996:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800899a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800899e:	d90d      	bls.n	80089bc <__aeabi_d2f+0x30>
 80089a0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80089a4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80089a8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80089ac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80089b0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80089b4:	bf08      	it	eq
 80089b6:	f020 0001 	biceq.w	r0, r0, #1
 80089ba:	4770      	bx	lr
 80089bc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80089c0:	d121      	bne.n	8008a06 <__aeabi_d2f+0x7a>
 80089c2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80089c6:	bfbc      	itt	lt
 80089c8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80089cc:	4770      	bxlt	lr
 80089ce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80089d2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80089d6:	f1c2 0218 	rsb	r2, r2, #24
 80089da:	f1c2 0c20 	rsb	ip, r2, #32
 80089de:	fa10 f30c 	lsls.w	r3, r0, ip
 80089e2:	fa20 f002 	lsr.w	r0, r0, r2
 80089e6:	bf18      	it	ne
 80089e8:	f040 0001 	orrne.w	r0, r0, #1
 80089ec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80089f0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80089f4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80089f8:	ea40 000c 	orr.w	r0, r0, ip
 80089fc:	fa23 f302 	lsr.w	r3, r3, r2
 8008a00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008a04:	e7cc      	b.n	80089a0 <__aeabi_d2f+0x14>
 8008a06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008a0a:	d107      	bne.n	8008a1c <__aeabi_d2f+0x90>
 8008a0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008a10:	bf1e      	ittt	ne
 8008a12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8008a16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8008a1a:	4770      	bxne	lr
 8008a1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8008a20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008a24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008a28:	4770      	bx	lr
 8008a2a:	bf00      	nop

08008a2c <__aeabi_uldivmod>:
 8008a2c:	b953      	cbnz	r3, 8008a44 <__aeabi_uldivmod+0x18>
 8008a2e:	b94a      	cbnz	r2, 8008a44 <__aeabi_uldivmod+0x18>
 8008a30:	2900      	cmp	r1, #0
 8008a32:	bf08      	it	eq
 8008a34:	2800      	cmpeq	r0, #0
 8008a36:	bf1c      	itt	ne
 8008a38:	f04f 31ff 	movne.w	r1, #4294967295
 8008a3c:	f04f 30ff 	movne.w	r0, #4294967295
 8008a40:	f000 b972 	b.w	8008d28 <__aeabi_idiv0>
 8008a44:	f1ad 0c08 	sub.w	ip, sp, #8
 8008a48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008a4c:	f000 f806 	bl	8008a5c <__udivmoddi4>
 8008a50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008a54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a58:	b004      	add	sp, #16
 8008a5a:	4770      	bx	lr

08008a5c <__udivmoddi4>:
 8008a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a60:	9e08      	ldr	r6, [sp, #32]
 8008a62:	4604      	mov	r4, r0
 8008a64:	4688      	mov	r8, r1
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d14b      	bne.n	8008b02 <__udivmoddi4+0xa6>
 8008a6a:	428a      	cmp	r2, r1
 8008a6c:	4615      	mov	r5, r2
 8008a6e:	d967      	bls.n	8008b40 <__udivmoddi4+0xe4>
 8008a70:	fab2 f282 	clz	r2, r2
 8008a74:	b14a      	cbz	r2, 8008a8a <__udivmoddi4+0x2e>
 8008a76:	f1c2 0720 	rsb	r7, r2, #32
 8008a7a:	fa01 f302 	lsl.w	r3, r1, r2
 8008a7e:	fa20 f707 	lsr.w	r7, r0, r7
 8008a82:	4095      	lsls	r5, r2
 8008a84:	ea47 0803 	orr.w	r8, r7, r3
 8008a88:	4094      	lsls	r4, r2
 8008a8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008a8e:	0c23      	lsrs	r3, r4, #16
 8008a90:	fbb8 f7fe 	udiv	r7, r8, lr
 8008a94:	fa1f fc85 	uxth.w	ip, r5
 8008a98:	fb0e 8817 	mls	r8, lr, r7, r8
 8008a9c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008aa0:	fb07 f10c 	mul.w	r1, r7, ip
 8008aa4:	4299      	cmp	r1, r3
 8008aa6:	d909      	bls.n	8008abc <__udivmoddi4+0x60>
 8008aa8:	18eb      	adds	r3, r5, r3
 8008aaa:	f107 30ff 	add.w	r0, r7, #4294967295
 8008aae:	f080 811b 	bcs.w	8008ce8 <__udivmoddi4+0x28c>
 8008ab2:	4299      	cmp	r1, r3
 8008ab4:	f240 8118 	bls.w	8008ce8 <__udivmoddi4+0x28c>
 8008ab8:	3f02      	subs	r7, #2
 8008aba:	442b      	add	r3, r5
 8008abc:	1a5b      	subs	r3, r3, r1
 8008abe:	b2a4      	uxth	r4, r4
 8008ac0:	fbb3 f0fe 	udiv	r0, r3, lr
 8008ac4:	fb0e 3310 	mls	r3, lr, r0, r3
 8008ac8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008acc:	fb00 fc0c 	mul.w	ip, r0, ip
 8008ad0:	45a4      	cmp	ip, r4
 8008ad2:	d909      	bls.n	8008ae8 <__udivmoddi4+0x8c>
 8008ad4:	192c      	adds	r4, r5, r4
 8008ad6:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ada:	f080 8107 	bcs.w	8008cec <__udivmoddi4+0x290>
 8008ade:	45a4      	cmp	ip, r4
 8008ae0:	f240 8104 	bls.w	8008cec <__udivmoddi4+0x290>
 8008ae4:	3802      	subs	r0, #2
 8008ae6:	442c      	add	r4, r5
 8008ae8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008aec:	eba4 040c 	sub.w	r4, r4, ip
 8008af0:	2700      	movs	r7, #0
 8008af2:	b11e      	cbz	r6, 8008afc <__udivmoddi4+0xa0>
 8008af4:	40d4      	lsrs	r4, r2
 8008af6:	2300      	movs	r3, #0
 8008af8:	e9c6 4300 	strd	r4, r3, [r6]
 8008afc:	4639      	mov	r1, r7
 8008afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b02:	428b      	cmp	r3, r1
 8008b04:	d909      	bls.n	8008b1a <__udivmoddi4+0xbe>
 8008b06:	2e00      	cmp	r6, #0
 8008b08:	f000 80eb 	beq.w	8008ce2 <__udivmoddi4+0x286>
 8008b0c:	2700      	movs	r7, #0
 8008b0e:	e9c6 0100 	strd	r0, r1, [r6]
 8008b12:	4638      	mov	r0, r7
 8008b14:	4639      	mov	r1, r7
 8008b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b1a:	fab3 f783 	clz	r7, r3
 8008b1e:	2f00      	cmp	r7, #0
 8008b20:	d147      	bne.n	8008bb2 <__udivmoddi4+0x156>
 8008b22:	428b      	cmp	r3, r1
 8008b24:	d302      	bcc.n	8008b2c <__udivmoddi4+0xd0>
 8008b26:	4282      	cmp	r2, r0
 8008b28:	f200 80fa 	bhi.w	8008d20 <__udivmoddi4+0x2c4>
 8008b2c:	1a84      	subs	r4, r0, r2
 8008b2e:	eb61 0303 	sbc.w	r3, r1, r3
 8008b32:	2001      	movs	r0, #1
 8008b34:	4698      	mov	r8, r3
 8008b36:	2e00      	cmp	r6, #0
 8008b38:	d0e0      	beq.n	8008afc <__udivmoddi4+0xa0>
 8008b3a:	e9c6 4800 	strd	r4, r8, [r6]
 8008b3e:	e7dd      	b.n	8008afc <__udivmoddi4+0xa0>
 8008b40:	b902      	cbnz	r2, 8008b44 <__udivmoddi4+0xe8>
 8008b42:	deff      	udf	#255	; 0xff
 8008b44:	fab2 f282 	clz	r2, r2
 8008b48:	2a00      	cmp	r2, #0
 8008b4a:	f040 808f 	bne.w	8008c6c <__udivmoddi4+0x210>
 8008b4e:	1b49      	subs	r1, r1, r5
 8008b50:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008b54:	fa1f f885 	uxth.w	r8, r5
 8008b58:	2701      	movs	r7, #1
 8008b5a:	fbb1 fcfe 	udiv	ip, r1, lr
 8008b5e:	0c23      	lsrs	r3, r4, #16
 8008b60:	fb0e 111c 	mls	r1, lr, ip, r1
 8008b64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008b68:	fb08 f10c 	mul.w	r1, r8, ip
 8008b6c:	4299      	cmp	r1, r3
 8008b6e:	d907      	bls.n	8008b80 <__udivmoddi4+0x124>
 8008b70:	18eb      	adds	r3, r5, r3
 8008b72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8008b76:	d202      	bcs.n	8008b7e <__udivmoddi4+0x122>
 8008b78:	4299      	cmp	r1, r3
 8008b7a:	f200 80cd 	bhi.w	8008d18 <__udivmoddi4+0x2bc>
 8008b7e:	4684      	mov	ip, r0
 8008b80:	1a59      	subs	r1, r3, r1
 8008b82:	b2a3      	uxth	r3, r4
 8008b84:	fbb1 f0fe 	udiv	r0, r1, lr
 8008b88:	fb0e 1410 	mls	r4, lr, r0, r1
 8008b8c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008b90:	fb08 f800 	mul.w	r8, r8, r0
 8008b94:	45a0      	cmp	r8, r4
 8008b96:	d907      	bls.n	8008ba8 <__udivmoddi4+0x14c>
 8008b98:	192c      	adds	r4, r5, r4
 8008b9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b9e:	d202      	bcs.n	8008ba6 <__udivmoddi4+0x14a>
 8008ba0:	45a0      	cmp	r8, r4
 8008ba2:	f200 80b6 	bhi.w	8008d12 <__udivmoddi4+0x2b6>
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	eba4 0408 	sub.w	r4, r4, r8
 8008bac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008bb0:	e79f      	b.n	8008af2 <__udivmoddi4+0x96>
 8008bb2:	f1c7 0c20 	rsb	ip, r7, #32
 8008bb6:	40bb      	lsls	r3, r7
 8008bb8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8008bbc:	ea4e 0e03 	orr.w	lr, lr, r3
 8008bc0:	fa01 f407 	lsl.w	r4, r1, r7
 8008bc4:	fa20 f50c 	lsr.w	r5, r0, ip
 8008bc8:	fa21 f30c 	lsr.w	r3, r1, ip
 8008bcc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8008bd0:	4325      	orrs	r5, r4
 8008bd2:	fbb3 f9f8 	udiv	r9, r3, r8
 8008bd6:	0c2c      	lsrs	r4, r5, #16
 8008bd8:	fb08 3319 	mls	r3, r8, r9, r3
 8008bdc:	fa1f fa8e 	uxth.w	sl, lr
 8008be0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8008be4:	fb09 f40a 	mul.w	r4, r9, sl
 8008be8:	429c      	cmp	r4, r3
 8008bea:	fa02 f207 	lsl.w	r2, r2, r7
 8008bee:	fa00 f107 	lsl.w	r1, r0, r7
 8008bf2:	d90b      	bls.n	8008c0c <__udivmoddi4+0x1b0>
 8008bf4:	eb1e 0303 	adds.w	r3, lr, r3
 8008bf8:	f109 30ff 	add.w	r0, r9, #4294967295
 8008bfc:	f080 8087 	bcs.w	8008d0e <__udivmoddi4+0x2b2>
 8008c00:	429c      	cmp	r4, r3
 8008c02:	f240 8084 	bls.w	8008d0e <__udivmoddi4+0x2b2>
 8008c06:	f1a9 0902 	sub.w	r9, r9, #2
 8008c0a:	4473      	add	r3, lr
 8008c0c:	1b1b      	subs	r3, r3, r4
 8008c0e:	b2ad      	uxth	r5, r5
 8008c10:	fbb3 f0f8 	udiv	r0, r3, r8
 8008c14:	fb08 3310 	mls	r3, r8, r0, r3
 8008c18:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8008c1c:	fb00 fa0a 	mul.w	sl, r0, sl
 8008c20:	45a2      	cmp	sl, r4
 8008c22:	d908      	bls.n	8008c36 <__udivmoddi4+0x1da>
 8008c24:	eb1e 0404 	adds.w	r4, lr, r4
 8008c28:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c2c:	d26b      	bcs.n	8008d06 <__udivmoddi4+0x2aa>
 8008c2e:	45a2      	cmp	sl, r4
 8008c30:	d969      	bls.n	8008d06 <__udivmoddi4+0x2aa>
 8008c32:	3802      	subs	r0, #2
 8008c34:	4474      	add	r4, lr
 8008c36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8008c3a:	fba0 8902 	umull	r8, r9, r0, r2
 8008c3e:	eba4 040a 	sub.w	r4, r4, sl
 8008c42:	454c      	cmp	r4, r9
 8008c44:	46c2      	mov	sl, r8
 8008c46:	464b      	mov	r3, r9
 8008c48:	d354      	bcc.n	8008cf4 <__udivmoddi4+0x298>
 8008c4a:	d051      	beq.n	8008cf0 <__udivmoddi4+0x294>
 8008c4c:	2e00      	cmp	r6, #0
 8008c4e:	d069      	beq.n	8008d24 <__udivmoddi4+0x2c8>
 8008c50:	ebb1 050a 	subs.w	r5, r1, sl
 8008c54:	eb64 0403 	sbc.w	r4, r4, r3
 8008c58:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008c5c:	40fd      	lsrs	r5, r7
 8008c5e:	40fc      	lsrs	r4, r7
 8008c60:	ea4c 0505 	orr.w	r5, ip, r5
 8008c64:	e9c6 5400 	strd	r5, r4, [r6]
 8008c68:	2700      	movs	r7, #0
 8008c6a:	e747      	b.n	8008afc <__udivmoddi4+0xa0>
 8008c6c:	f1c2 0320 	rsb	r3, r2, #32
 8008c70:	fa20 f703 	lsr.w	r7, r0, r3
 8008c74:	4095      	lsls	r5, r2
 8008c76:	fa01 f002 	lsl.w	r0, r1, r2
 8008c7a:	fa21 f303 	lsr.w	r3, r1, r3
 8008c7e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008c82:	4338      	orrs	r0, r7
 8008c84:	0c01      	lsrs	r1, r0, #16
 8008c86:	fbb3 f7fe 	udiv	r7, r3, lr
 8008c8a:	fa1f f885 	uxth.w	r8, r5
 8008c8e:	fb0e 3317 	mls	r3, lr, r7, r3
 8008c92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008c96:	fb07 f308 	mul.w	r3, r7, r8
 8008c9a:	428b      	cmp	r3, r1
 8008c9c:	fa04 f402 	lsl.w	r4, r4, r2
 8008ca0:	d907      	bls.n	8008cb2 <__udivmoddi4+0x256>
 8008ca2:	1869      	adds	r1, r5, r1
 8008ca4:	f107 3cff 	add.w	ip, r7, #4294967295
 8008ca8:	d22f      	bcs.n	8008d0a <__udivmoddi4+0x2ae>
 8008caa:	428b      	cmp	r3, r1
 8008cac:	d92d      	bls.n	8008d0a <__udivmoddi4+0x2ae>
 8008cae:	3f02      	subs	r7, #2
 8008cb0:	4429      	add	r1, r5
 8008cb2:	1acb      	subs	r3, r1, r3
 8008cb4:	b281      	uxth	r1, r0
 8008cb6:	fbb3 f0fe 	udiv	r0, r3, lr
 8008cba:	fb0e 3310 	mls	r3, lr, r0, r3
 8008cbe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008cc2:	fb00 f308 	mul.w	r3, r0, r8
 8008cc6:	428b      	cmp	r3, r1
 8008cc8:	d907      	bls.n	8008cda <__udivmoddi4+0x27e>
 8008cca:	1869      	adds	r1, r5, r1
 8008ccc:	f100 3cff 	add.w	ip, r0, #4294967295
 8008cd0:	d217      	bcs.n	8008d02 <__udivmoddi4+0x2a6>
 8008cd2:	428b      	cmp	r3, r1
 8008cd4:	d915      	bls.n	8008d02 <__udivmoddi4+0x2a6>
 8008cd6:	3802      	subs	r0, #2
 8008cd8:	4429      	add	r1, r5
 8008cda:	1ac9      	subs	r1, r1, r3
 8008cdc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8008ce0:	e73b      	b.n	8008b5a <__udivmoddi4+0xfe>
 8008ce2:	4637      	mov	r7, r6
 8008ce4:	4630      	mov	r0, r6
 8008ce6:	e709      	b.n	8008afc <__udivmoddi4+0xa0>
 8008ce8:	4607      	mov	r7, r0
 8008cea:	e6e7      	b.n	8008abc <__udivmoddi4+0x60>
 8008cec:	4618      	mov	r0, r3
 8008cee:	e6fb      	b.n	8008ae8 <__udivmoddi4+0x8c>
 8008cf0:	4541      	cmp	r1, r8
 8008cf2:	d2ab      	bcs.n	8008c4c <__udivmoddi4+0x1f0>
 8008cf4:	ebb8 0a02 	subs.w	sl, r8, r2
 8008cf8:	eb69 020e 	sbc.w	r2, r9, lr
 8008cfc:	3801      	subs	r0, #1
 8008cfe:	4613      	mov	r3, r2
 8008d00:	e7a4      	b.n	8008c4c <__udivmoddi4+0x1f0>
 8008d02:	4660      	mov	r0, ip
 8008d04:	e7e9      	b.n	8008cda <__udivmoddi4+0x27e>
 8008d06:	4618      	mov	r0, r3
 8008d08:	e795      	b.n	8008c36 <__udivmoddi4+0x1da>
 8008d0a:	4667      	mov	r7, ip
 8008d0c:	e7d1      	b.n	8008cb2 <__udivmoddi4+0x256>
 8008d0e:	4681      	mov	r9, r0
 8008d10:	e77c      	b.n	8008c0c <__udivmoddi4+0x1b0>
 8008d12:	3802      	subs	r0, #2
 8008d14:	442c      	add	r4, r5
 8008d16:	e747      	b.n	8008ba8 <__udivmoddi4+0x14c>
 8008d18:	f1ac 0c02 	sub.w	ip, ip, #2
 8008d1c:	442b      	add	r3, r5
 8008d1e:	e72f      	b.n	8008b80 <__udivmoddi4+0x124>
 8008d20:	4638      	mov	r0, r7
 8008d22:	e708      	b.n	8008b36 <__udivmoddi4+0xda>
 8008d24:	4637      	mov	r7, r6
 8008d26:	e6e9      	b.n	8008afc <__udivmoddi4+0xa0>

08008d28 <__aeabi_idiv0>:
 8008d28:	4770      	bx	lr
 8008d2a:	bf00      	nop

08008d2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008d30:	4b0e      	ldr	r3, [pc, #56]	; (8008d6c <HAL_Init+0x40>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a0d      	ldr	r2, [pc, #52]	; (8008d6c <HAL_Init+0x40>)
 8008d36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008d3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008d3c:	4b0b      	ldr	r3, [pc, #44]	; (8008d6c <HAL_Init+0x40>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a0a      	ldr	r2, [pc, #40]	; (8008d6c <HAL_Init+0x40>)
 8008d42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008d46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008d48:	4b08      	ldr	r3, [pc, #32]	; (8008d6c <HAL_Init+0x40>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4a07      	ldr	r2, [pc, #28]	; (8008d6c <HAL_Init+0x40>)
 8008d4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008d54:	2003      	movs	r0, #3
 8008d56:	f001 fab5 	bl	800a2c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008d5a:	2000      	movs	r0, #0
 8008d5c:	f000 f808 	bl	8008d70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008d60:	f008 fa08 	bl	8011174 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008d64:	2300      	movs	r3, #0
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	bd80      	pop	{r7, pc}
 8008d6a:	bf00      	nop
 8008d6c:	40023c00 	.word	0x40023c00

08008d70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b082      	sub	sp, #8
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008d78:	4b12      	ldr	r3, [pc, #72]	; (8008dc4 <HAL_InitTick+0x54>)
 8008d7a:	681a      	ldr	r2, [r3, #0]
 8008d7c:	4b12      	ldr	r3, [pc, #72]	; (8008dc8 <HAL_InitTick+0x58>)
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	4619      	mov	r1, r3
 8008d82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008d86:	fbb3 f3f1 	udiv	r3, r3, r1
 8008d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f001 facd 	bl	800a32e <HAL_SYSTICK_Config>
 8008d94:	4603      	mov	r3, r0
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d001      	beq.n	8008d9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	e00e      	b.n	8008dbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2b0f      	cmp	r3, #15
 8008da2:	d80a      	bhi.n	8008dba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008da4:	2200      	movs	r2, #0
 8008da6:	6879      	ldr	r1, [r7, #4]
 8008da8:	f04f 30ff 	mov.w	r0, #4294967295
 8008dac:	f001 fa95 	bl	800a2da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008db0:	4a06      	ldr	r2, [pc, #24]	; (8008dcc <HAL_InitTick+0x5c>)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008db6:	2300      	movs	r3, #0
 8008db8:	e000      	b.n	8008dbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008dba:	2301      	movs	r3, #1
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3708      	adds	r7, #8
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	bd80      	pop	{r7, pc}
 8008dc4:	20000038 	.word	0x20000038
 8008dc8:	20000004 	.word	0x20000004
 8008dcc:	20000000 	.word	0x20000000

08008dd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008dd4:	4b06      	ldr	r3, [pc, #24]	; (8008df0 <HAL_IncTick+0x20>)
 8008dd6:	781b      	ldrb	r3, [r3, #0]
 8008dd8:	461a      	mov	r2, r3
 8008dda:	4b06      	ldr	r3, [pc, #24]	; (8008df4 <HAL_IncTick+0x24>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4413      	add	r3, r2
 8008de0:	4a04      	ldr	r2, [pc, #16]	; (8008df4 <HAL_IncTick+0x24>)
 8008de2:	6013      	str	r3, [r2, #0]
}
 8008de4:	bf00      	nop
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr
 8008dee:	bf00      	nop
 8008df0:	20000004 	.word	0x20000004
 8008df4:	2000420c 	.word	0x2000420c

08008df8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	af00      	add	r7, sp, #0
  return uwTick;
 8008dfc:	4b03      	ldr	r3, [pc, #12]	; (8008e0c <HAL_GetTick+0x14>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	46bd      	mov	sp, r7
 8008e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e08:	4770      	bx	lr
 8008e0a:	bf00      	nop
 8008e0c:	2000420c 	.word	0x2000420c

08008e10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b084      	sub	sp, #16
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008e18:	f7ff ffee 	bl	8008df8 <HAL_GetTick>
 8008e1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e28:	d005      	beq.n	8008e36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008e2a:	4b09      	ldr	r3, [pc, #36]	; (8008e50 <HAL_Delay+0x40>)
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	461a      	mov	r2, r3
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	4413      	add	r3, r2
 8008e34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008e36:	bf00      	nop
 8008e38:	f7ff ffde 	bl	8008df8 <HAL_GetTick>
 8008e3c:	4602      	mov	r2, r0
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	1ad3      	subs	r3, r2, r3
 8008e42:	68fa      	ldr	r2, [r7, #12]
 8008e44:	429a      	cmp	r2, r3
 8008e46:	d8f7      	bhi.n	8008e38 <HAL_Delay+0x28>
  {
  }
}
 8008e48:	bf00      	nop
 8008e4a:	3710      	adds	r7, #16
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}
 8008e50:	20000004 	.word	0x20000004

08008e54 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b084      	sub	sp, #16
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d101      	bne.n	8008e6a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8008e66:	2301      	movs	r3, #1
 8008e68:	e033      	b.n	8008ed2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d109      	bne.n	8008e86 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f006 f900 	bl	800f078 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2200      	movs	r2, #0
 8008e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e8a:	f003 0310 	and.w	r3, r3, #16
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d118      	bne.n	8008ec4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e96:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008e9a:	f023 0302 	bic.w	r3, r3, #2
 8008e9e:	f043 0202 	orr.w	r2, r3, #2
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 fa5a 	bl	8009360 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eb6:	f023 0303 	bic.w	r3, r3, #3
 8008eba:	f043 0201 	orr.w	r2, r3, #1
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	641a      	str	r2, [r3, #64]	; 0x40
 8008ec2:	e001      	b.n	8008ec8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8008ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3710      	adds	r7, #16
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}
	...

08008edc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b086      	sub	sp, #24
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	60f8      	str	r0, [r7, #12]
 8008ee4:	60b9      	str	r1, [r7, #8]
 8008ee6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ef2:	2b01      	cmp	r3, #1
 8008ef4:	d101      	bne.n	8008efa <HAL_ADC_Start_DMA+0x1e>
 8008ef6:	2302      	movs	r3, #2
 8008ef8:	e0cc      	b.n	8009094 <HAL_ADC_Start_DMA+0x1b8>
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	2201      	movs	r2, #1
 8008efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	689b      	ldr	r3, [r3, #8]
 8008f08:	f003 0301 	and.w	r3, r3, #1
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d018      	beq.n	8008f42 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	689a      	ldr	r2, [r3, #8]
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	f042 0201 	orr.w	r2, r2, #1
 8008f1e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8008f20:	4b5e      	ldr	r3, [pc, #376]	; (800909c <HAL_ADC_Start_DMA+0x1c0>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4a5e      	ldr	r2, [pc, #376]	; (80090a0 <HAL_ADC_Start_DMA+0x1c4>)
 8008f26:	fba2 2303 	umull	r2, r3, r2, r3
 8008f2a:	0c9a      	lsrs	r2, r3, #18
 8008f2c:	4613      	mov	r3, r2
 8008f2e:	005b      	lsls	r3, r3, #1
 8008f30:	4413      	add	r3, r2
 8008f32:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8008f34:	e002      	b.n	8008f3c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	3b01      	subs	r3, #1
 8008f3a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d1f9      	bne.n	8008f36 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	689b      	ldr	r3, [r3, #8]
 8008f48:	f003 0301 	and.w	r3, r3, #1
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	f040 80a0 	bne.w	8009092 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f56:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008f5a:	f023 0301 	bic.w	r3, r3, #1
 8008f5e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d007      	beq.n	8008f84 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f78:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008f7c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f90:	d106      	bne.n	8008fa0 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f96:	f023 0206 	bic.w	r2, r3, #6
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	645a      	str	r2, [r3, #68]	; 0x44
 8008f9e:	e002      	b.n	8008fa6 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008fae:	4b3d      	ldr	r3, [pc, #244]	; (80090a4 <HAL_ADC_Start_DMA+0x1c8>)
 8008fb0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fb6:	4a3c      	ldr	r2, [pc, #240]	; (80090a8 <HAL_ADC_Start_DMA+0x1cc>)
 8008fb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fbe:	4a3b      	ldr	r2, [pc, #236]	; (80090ac <HAL_ADC_Start_DMA+0x1d0>)
 8008fc0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fc6:	4a3a      	ldr	r2, [pc, #232]	; (80090b0 <HAL_ADC_Start_DMA+0x1d4>)
 8008fc8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8008fd2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	685a      	ldr	r2, [r3, #4]
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008fe2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	689a      	ldr	r2, [r3, #8]
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ff2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	334c      	adds	r3, #76	; 0x4c
 8008ffe:	4619      	mov	r1, r3
 8009000:	68ba      	ldr	r2, [r7, #8]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f001 fa4e 	bl	800a4a4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	f003 031f 	and.w	r3, r3, #31
 8009010:	2b00      	cmp	r3, #0
 8009012:	d12a      	bne.n	800906a <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4a26      	ldr	r2, [pc, #152]	; (80090b4 <HAL_ADC_Start_DMA+0x1d8>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d015      	beq.n	800904a <HAL_ADC_Start_DMA+0x16e>
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a25      	ldr	r2, [pc, #148]	; (80090b8 <HAL_ADC_Start_DMA+0x1dc>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d105      	bne.n	8009034 <HAL_ADC_Start_DMA+0x158>
 8009028:	4b1e      	ldr	r3, [pc, #120]	; (80090a4 <HAL_ADC_Start_DMA+0x1c8>)
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	f003 031f 	and.w	r3, r3, #31
 8009030:	2b00      	cmp	r3, #0
 8009032:	d00a      	beq.n	800904a <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4a20      	ldr	r2, [pc, #128]	; (80090bc <HAL_ADC_Start_DMA+0x1e0>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d129      	bne.n	8009092 <HAL_ADC_Start_DMA+0x1b6>
 800903e:	4b19      	ldr	r3, [pc, #100]	; (80090a4 <HAL_ADC_Start_DMA+0x1c8>)
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	f003 031f 	and.w	r3, r3, #31
 8009046:	2b0f      	cmp	r3, #15
 8009048:	d823      	bhi.n	8009092 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	689b      	ldr	r3, [r3, #8]
 8009050:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009054:	2b00      	cmp	r3, #0
 8009056:	d11c      	bne.n	8009092 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	689a      	ldr	r2, [r3, #8]
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009066:	609a      	str	r2, [r3, #8]
 8009068:	e013      	b.n	8009092 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	4a11      	ldr	r2, [pc, #68]	; (80090b4 <HAL_ADC_Start_DMA+0x1d8>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d10e      	bne.n	8009092 <HAL_ADC_Start_DMA+0x1b6>
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800907e:	2b00      	cmp	r3, #0
 8009080:	d107      	bne.n	8009092 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	689a      	ldr	r2, [r3, #8]
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009090:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8009092:	2300      	movs	r3, #0
}
 8009094:	4618      	mov	r0, r3
 8009096:	3718      	adds	r7, #24
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}
 800909c:	20000038 	.word	0x20000038
 80090a0:	431bde83 	.word	0x431bde83
 80090a4:	40012300 	.word	0x40012300
 80090a8:	08009559 	.word	0x08009559
 80090ac:	08009613 	.word	0x08009613
 80090b0:	0800962f 	.word	0x0800962f
 80090b4:	40012000 	.word	0x40012000
 80090b8:	40012100 	.word	0x40012100
 80090bc:	40012200 	.word	0x40012200

080090c0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b083      	sub	sp, #12
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80090c8:	bf00      	nop
 80090ca:	370c      	adds	r7, #12
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b083      	sub	sp, #12
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80090dc:	bf00      	nop
 80090de:	370c      	adds	r7, #12
 80090e0:	46bd      	mov	sp, r7
 80090e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e6:	4770      	bx	lr

080090e8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b083      	sub	sp, #12
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80090f0:	bf00      	nop
 80090f2:	370c      	adds	r7, #12
 80090f4:	46bd      	mov	sp, r7
 80090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fa:	4770      	bx	lr

080090fc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b085      	sub	sp, #20
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
 8009104:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8009106:	2300      	movs	r3, #0
 8009108:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009110:	2b01      	cmp	r3, #1
 8009112:	d101      	bne.n	8009118 <HAL_ADC_ConfigChannel+0x1c>
 8009114:	2302      	movs	r3, #2
 8009116:	e113      	b.n	8009340 <HAL_ADC_ConfigChannel+0x244>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2201      	movs	r2, #1
 800911c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	2b09      	cmp	r3, #9
 8009126:	d925      	bls.n	8009174 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	68d9      	ldr	r1, [r3, #12]
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	b29b      	uxth	r3, r3
 8009134:	461a      	mov	r2, r3
 8009136:	4613      	mov	r3, r2
 8009138:	005b      	lsls	r3, r3, #1
 800913a:	4413      	add	r3, r2
 800913c:	3b1e      	subs	r3, #30
 800913e:	2207      	movs	r2, #7
 8009140:	fa02 f303 	lsl.w	r3, r2, r3
 8009144:	43da      	mvns	r2, r3
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	400a      	ands	r2, r1
 800914c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	68d9      	ldr	r1, [r3, #12]
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	689a      	ldr	r2, [r3, #8]
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	b29b      	uxth	r3, r3
 800915e:	4618      	mov	r0, r3
 8009160:	4603      	mov	r3, r0
 8009162:	005b      	lsls	r3, r3, #1
 8009164:	4403      	add	r3, r0
 8009166:	3b1e      	subs	r3, #30
 8009168:	409a      	lsls	r2, r3
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	430a      	orrs	r2, r1
 8009170:	60da      	str	r2, [r3, #12]
 8009172:	e022      	b.n	80091ba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	6919      	ldr	r1, [r3, #16]
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	b29b      	uxth	r3, r3
 8009180:	461a      	mov	r2, r3
 8009182:	4613      	mov	r3, r2
 8009184:	005b      	lsls	r3, r3, #1
 8009186:	4413      	add	r3, r2
 8009188:	2207      	movs	r2, #7
 800918a:	fa02 f303 	lsl.w	r3, r2, r3
 800918e:	43da      	mvns	r2, r3
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	400a      	ands	r2, r1
 8009196:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	6919      	ldr	r1, [r3, #16]
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	689a      	ldr	r2, [r3, #8]
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	4618      	mov	r0, r3
 80091aa:	4603      	mov	r3, r0
 80091ac:	005b      	lsls	r3, r3, #1
 80091ae:	4403      	add	r3, r0
 80091b0:	409a      	lsls	r2, r3
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	430a      	orrs	r2, r1
 80091b8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	685b      	ldr	r3, [r3, #4]
 80091be:	2b06      	cmp	r3, #6
 80091c0:	d824      	bhi.n	800920c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	685a      	ldr	r2, [r3, #4]
 80091cc:	4613      	mov	r3, r2
 80091ce:	009b      	lsls	r3, r3, #2
 80091d0:	4413      	add	r3, r2
 80091d2:	3b05      	subs	r3, #5
 80091d4:	221f      	movs	r2, #31
 80091d6:	fa02 f303 	lsl.w	r3, r2, r3
 80091da:	43da      	mvns	r2, r3
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	400a      	ands	r2, r1
 80091e2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	4618      	mov	r0, r3
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	685a      	ldr	r2, [r3, #4]
 80091f6:	4613      	mov	r3, r2
 80091f8:	009b      	lsls	r3, r3, #2
 80091fa:	4413      	add	r3, r2
 80091fc:	3b05      	subs	r3, #5
 80091fe:	fa00 f203 	lsl.w	r2, r0, r3
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	430a      	orrs	r2, r1
 8009208:	635a      	str	r2, [r3, #52]	; 0x34
 800920a:	e04c      	b.n	80092a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	2b0c      	cmp	r3, #12
 8009212:	d824      	bhi.n	800925e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	685a      	ldr	r2, [r3, #4]
 800921e:	4613      	mov	r3, r2
 8009220:	009b      	lsls	r3, r3, #2
 8009222:	4413      	add	r3, r2
 8009224:	3b23      	subs	r3, #35	; 0x23
 8009226:	221f      	movs	r2, #31
 8009228:	fa02 f303 	lsl.w	r3, r2, r3
 800922c:	43da      	mvns	r2, r3
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	400a      	ands	r2, r1
 8009234:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	b29b      	uxth	r3, r3
 8009242:	4618      	mov	r0, r3
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	685a      	ldr	r2, [r3, #4]
 8009248:	4613      	mov	r3, r2
 800924a:	009b      	lsls	r3, r3, #2
 800924c:	4413      	add	r3, r2
 800924e:	3b23      	subs	r3, #35	; 0x23
 8009250:	fa00 f203 	lsl.w	r2, r0, r3
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	430a      	orrs	r2, r1
 800925a:	631a      	str	r2, [r3, #48]	; 0x30
 800925c:	e023      	b.n	80092a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	685a      	ldr	r2, [r3, #4]
 8009268:	4613      	mov	r3, r2
 800926a:	009b      	lsls	r3, r3, #2
 800926c:	4413      	add	r3, r2
 800926e:	3b41      	subs	r3, #65	; 0x41
 8009270:	221f      	movs	r2, #31
 8009272:	fa02 f303 	lsl.w	r3, r2, r3
 8009276:	43da      	mvns	r2, r3
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	400a      	ands	r2, r1
 800927e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	b29b      	uxth	r3, r3
 800928c:	4618      	mov	r0, r3
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	685a      	ldr	r2, [r3, #4]
 8009292:	4613      	mov	r3, r2
 8009294:	009b      	lsls	r3, r3, #2
 8009296:	4413      	add	r3, r2
 8009298:	3b41      	subs	r3, #65	; 0x41
 800929a:	fa00 f203 	lsl.w	r2, r0, r3
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	430a      	orrs	r2, r1
 80092a4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80092a6:	4b29      	ldr	r3, [pc, #164]	; (800934c <HAL_ADC_ConfigChannel+0x250>)
 80092a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4a28      	ldr	r2, [pc, #160]	; (8009350 <HAL_ADC_ConfigChannel+0x254>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d10f      	bne.n	80092d4 <HAL_ADC_ConfigChannel+0x1d8>
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	2b12      	cmp	r3, #18
 80092ba:	d10b      	bne.n	80092d4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	685b      	ldr	r3, [r3, #4]
 80092cc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4a1d      	ldr	r2, [pc, #116]	; (8009350 <HAL_ADC_ConfigChannel+0x254>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d12b      	bne.n	8009336 <HAL_ADC_ConfigChannel+0x23a>
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4a1c      	ldr	r2, [pc, #112]	; (8009354 <HAL_ADC_ConfigChannel+0x258>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d003      	beq.n	80092f0 <HAL_ADC_ConfigChannel+0x1f4>
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	2b11      	cmp	r3, #17
 80092ee:	d122      	bne.n	8009336 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	685b      	ldr	r3, [r3, #4]
 8009300:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4a11      	ldr	r2, [pc, #68]	; (8009354 <HAL_ADC_ConfigChannel+0x258>)
 800930e:	4293      	cmp	r3, r2
 8009310:	d111      	bne.n	8009336 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8009312:	4b11      	ldr	r3, [pc, #68]	; (8009358 <HAL_ADC_ConfigChannel+0x25c>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4a11      	ldr	r2, [pc, #68]	; (800935c <HAL_ADC_ConfigChannel+0x260>)
 8009318:	fba2 2303 	umull	r2, r3, r2, r3
 800931c:	0c9a      	lsrs	r2, r3, #18
 800931e:	4613      	mov	r3, r2
 8009320:	009b      	lsls	r3, r3, #2
 8009322:	4413      	add	r3, r2
 8009324:	005b      	lsls	r3, r3, #1
 8009326:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009328:	e002      	b.n	8009330 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	3b01      	subs	r3, #1
 800932e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d1f9      	bne.n	800932a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2200      	movs	r2, #0
 800933a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800933e:	2300      	movs	r3, #0
}
 8009340:	4618      	mov	r0, r3
 8009342:	3714      	adds	r7, #20
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr
 800934c:	40012300 	.word	0x40012300
 8009350:	40012000 	.word	0x40012000
 8009354:	10000012 	.word	0x10000012
 8009358:	20000038 	.word	0x20000038
 800935c:	431bde83 	.word	0x431bde83

08009360 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009360:	b480      	push	{r7}
 8009362:	b085      	sub	sp, #20
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009368:	4b79      	ldr	r3, [pc, #484]	; (8009550 <ADC_Init+0x1f0>)
 800936a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	685a      	ldr	r2, [r3, #4]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	431a      	orrs	r2, r3
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	685a      	ldr	r2, [r3, #4]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009394:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	6859      	ldr	r1, [r3, #4]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	691b      	ldr	r3, [r3, #16]
 80093a0:	021a      	lsls	r2, r3, #8
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	430a      	orrs	r2, r1
 80093a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	685a      	ldr	r2, [r3, #4]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80093b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	6859      	ldr	r1, [r3, #4]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	689a      	ldr	r2, [r3, #8]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	430a      	orrs	r2, r1
 80093ca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	689a      	ldr	r2, [r3, #8]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80093da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	6899      	ldr	r1, [r3, #8]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	68da      	ldr	r2, [r3, #12]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	430a      	orrs	r2, r1
 80093ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093f2:	4a58      	ldr	r2, [pc, #352]	; (8009554 <ADC_Init+0x1f4>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d022      	beq.n	800943e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	689a      	ldr	r2, [r3, #8]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009406:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	6899      	ldr	r1, [r3, #8]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	430a      	orrs	r2, r1
 8009418:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	689a      	ldr	r2, [r3, #8]
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009428:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	6899      	ldr	r1, [r3, #8]
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	430a      	orrs	r2, r1
 800943a:	609a      	str	r2, [r3, #8]
 800943c:	e00f      	b.n	800945e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	689a      	ldr	r2, [r3, #8]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800944c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	689a      	ldr	r2, [r3, #8]
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800945c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	689a      	ldr	r2, [r3, #8]
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f022 0202 	bic.w	r2, r2, #2
 800946c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	6899      	ldr	r1, [r3, #8]
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	7e1b      	ldrb	r3, [r3, #24]
 8009478:	005a      	lsls	r2, r3, #1
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	430a      	orrs	r2, r1
 8009480:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d01b      	beq.n	80094c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	685a      	ldr	r2, [r3, #4]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800949a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	685a      	ldr	r2, [r3, #4]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80094aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	6859      	ldr	r1, [r3, #4]
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b6:	3b01      	subs	r3, #1
 80094b8:	035a      	lsls	r2, r3, #13
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	430a      	orrs	r2, r1
 80094c0:	605a      	str	r2, [r3, #4]
 80094c2:	e007      	b.n	80094d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	685a      	ldr	r2, [r3, #4]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80094d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80094e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	69db      	ldr	r3, [r3, #28]
 80094ee:	3b01      	subs	r3, #1
 80094f0:	051a      	lsls	r2, r3, #20
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	430a      	orrs	r2, r1
 80094f8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	689a      	ldr	r2, [r3, #8]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009508:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	6899      	ldr	r1, [r3, #8]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009516:	025a      	lsls	r2, r3, #9
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	430a      	orrs	r2, r1
 800951e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	689a      	ldr	r2, [r3, #8]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800952e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	6899      	ldr	r1, [r3, #8]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	695b      	ldr	r3, [r3, #20]
 800953a:	029a      	lsls	r2, r3, #10
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	430a      	orrs	r2, r1
 8009542:	609a      	str	r2, [r3, #8]
}
 8009544:	bf00      	nop
 8009546:	3714      	adds	r7, #20
 8009548:	46bd      	mov	sp, r7
 800954a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954e:	4770      	bx	lr
 8009550:	40012300 	.word	0x40012300
 8009554:	0f000001 	.word	0x0f000001

08009558 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b084      	sub	sp, #16
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009564:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800956a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800956e:	2b00      	cmp	r3, #0
 8009570:	d13c      	bne.n	80095ec <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009576:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	689b      	ldr	r3, [r3, #8]
 8009584:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009588:	2b00      	cmp	r3, #0
 800958a:	d12b      	bne.n	80095e4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009590:	2b00      	cmp	r3, #0
 8009592:	d127      	bne.n	80095e4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800959a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d006      	beq.n	80095b0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	689b      	ldr	r3, [r3, #8]
 80095a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d119      	bne.n	80095e4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	685a      	ldr	r2, [r3, #4]
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f022 0220 	bic.w	r2, r2, #32
 80095be:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d105      	bne.n	80095e4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095dc:	f043 0201 	orr.w	r2, r3, #1
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80095e4:	68f8      	ldr	r0, [r7, #12]
 80095e6:	f7ff fd6b 	bl	80090c0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80095ea:	e00e      	b.n	800960a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095f0:	f003 0310 	and.w	r3, r3, #16
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d003      	beq.n	8009600 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80095f8:	68f8      	ldr	r0, [r7, #12]
 80095fa:	f7ff fd75 	bl	80090e8 <HAL_ADC_ErrorCallback>
}
 80095fe:	e004      	b.n	800960a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	4798      	blx	r3
}
 800960a:	bf00      	nop
 800960c:	3710      	adds	r7, #16
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}

08009612 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009612:	b580      	push	{r7, lr}
 8009614:	b084      	sub	sp, #16
 8009616:	af00      	add	r7, sp, #0
 8009618:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800961e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8009620:	68f8      	ldr	r0, [r7, #12]
 8009622:	f7ff fd57 	bl	80090d4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009626:	bf00      	nop
 8009628:	3710      	adds	r7, #16
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}

0800962e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800962e:	b580      	push	{r7, lr}
 8009630:	b084      	sub	sp, #16
 8009632:	af00      	add	r7, sp, #0
 8009634:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800963a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2240      	movs	r2, #64	; 0x40
 8009640:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009646:	f043 0204 	orr.w	r2, r3, #4
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800964e:	68f8      	ldr	r0, [r7, #12]
 8009650:	f7ff fd4a 	bl	80090e8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009654:	bf00      	nop
 8009656:	3710      	adds	r7, #16
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d101      	bne.n	800966e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800966a:	2301      	movs	r3, #1
 800966c:	e0ed      	b.n	800984a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009674:	b2db      	uxtb	r3, r3
 8009676:	2b00      	cmp	r3, #0
 8009678:	d102      	bne.n	8009680 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f006 f8b0 	bl	800f7e0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	681a      	ldr	r2, [r3, #0]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f022 0202 	bic.w	r2, r2, #2
 800968e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009690:	f7ff fbb2 	bl	8008df8 <HAL_GetTick>
 8009694:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009696:	e012      	b.n	80096be <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009698:	f7ff fbae 	bl	8008df8 <HAL_GetTick>
 800969c:	4602      	mov	r2, r0
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	1ad3      	subs	r3, r2, r3
 80096a2:	2b0a      	cmp	r3, #10
 80096a4:	d90b      	bls.n	80096be <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2205      	movs	r2, #5
 80096b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80096ba:	2301      	movs	r3, #1
 80096bc:	e0c5      	b.n	800984a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	f003 0302 	and.w	r3, r3, #2
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d1e5      	bne.n	8009698 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	681a      	ldr	r2, [r3, #0]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	f042 0201 	orr.w	r2, r2, #1
 80096da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80096dc:	f7ff fb8c 	bl	8008df8 <HAL_GetTick>
 80096e0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80096e2:	e012      	b.n	800970a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80096e4:	f7ff fb88 	bl	8008df8 <HAL_GetTick>
 80096e8:	4602      	mov	r2, r0
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	1ad3      	subs	r3, r2, r3
 80096ee:	2b0a      	cmp	r3, #10
 80096f0:	d90b      	bls.n	800970a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2205      	movs	r2, #5
 8009702:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009706:	2301      	movs	r3, #1
 8009708:	e09f      	b.n	800984a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	685b      	ldr	r3, [r3, #4]
 8009710:	f003 0301 	and.w	r3, r3, #1
 8009714:	2b00      	cmp	r3, #0
 8009716:	d0e5      	beq.n	80096e4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	7e1b      	ldrb	r3, [r3, #24]
 800971c:	2b01      	cmp	r3, #1
 800971e:	d108      	bne.n	8009732 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	681a      	ldr	r2, [r3, #0]
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800972e:	601a      	str	r2, [r3, #0]
 8009730:	e007      	b.n	8009742 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	681a      	ldr	r2, [r3, #0]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009740:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	7e5b      	ldrb	r3, [r3, #25]
 8009746:	2b01      	cmp	r3, #1
 8009748:	d108      	bne.n	800975c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	681a      	ldr	r2, [r3, #0]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009758:	601a      	str	r2, [r3, #0]
 800975a:	e007      	b.n	800976c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	681a      	ldr	r2, [r3, #0]
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800976a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	7e9b      	ldrb	r3, [r3, #26]
 8009770:	2b01      	cmp	r3, #1
 8009772:	d108      	bne.n	8009786 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	681a      	ldr	r2, [r3, #0]
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f042 0220 	orr.w	r2, r2, #32
 8009782:	601a      	str	r2, [r3, #0]
 8009784:	e007      	b.n	8009796 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f022 0220 	bic.w	r2, r2, #32
 8009794:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	7edb      	ldrb	r3, [r3, #27]
 800979a:	2b01      	cmp	r3, #1
 800979c:	d108      	bne.n	80097b0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	681a      	ldr	r2, [r3, #0]
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	f022 0210 	bic.w	r2, r2, #16
 80097ac:	601a      	str	r2, [r3, #0]
 80097ae:	e007      	b.n	80097c0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	681a      	ldr	r2, [r3, #0]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f042 0210 	orr.w	r2, r2, #16
 80097be:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	7f1b      	ldrb	r3, [r3, #28]
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d108      	bne.n	80097da <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	681a      	ldr	r2, [r3, #0]
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f042 0208 	orr.w	r2, r2, #8
 80097d6:	601a      	str	r2, [r3, #0]
 80097d8:	e007      	b.n	80097ea <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	681a      	ldr	r2, [r3, #0]
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	f022 0208 	bic.w	r2, r2, #8
 80097e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	7f5b      	ldrb	r3, [r3, #29]
 80097ee:	2b01      	cmp	r3, #1
 80097f0:	d108      	bne.n	8009804 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	681a      	ldr	r2, [r3, #0]
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f042 0204 	orr.w	r2, r2, #4
 8009800:	601a      	str	r2, [r3, #0]
 8009802:	e007      	b.n	8009814 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	681a      	ldr	r2, [r3, #0]
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	f022 0204 	bic.w	r2, r2, #4
 8009812:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	689a      	ldr	r2, [r3, #8]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	68db      	ldr	r3, [r3, #12]
 800981c:	431a      	orrs	r2, r3
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	691b      	ldr	r3, [r3, #16]
 8009822:	431a      	orrs	r2, r3
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	695b      	ldr	r3, [r3, #20]
 8009828:	ea42 0103 	orr.w	r1, r2, r3
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	1e5a      	subs	r2, r3, #1
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	430a      	orrs	r2, r1
 8009838:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2200      	movs	r2, #0
 800983e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2201      	movs	r2, #1
 8009844:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8009848:	2300      	movs	r3, #0
}
 800984a:	4618      	mov	r0, r3
 800984c:	3710      	adds	r7, #16
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}
	...

08009854 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8009854:	b480      	push	{r7}
 8009856:	b087      	sub	sp, #28
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f893 3020 	ldrb.w	r3, [r3, #32]
 800986a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800986c:	7cfb      	ldrb	r3, [r7, #19]
 800986e:	2b01      	cmp	r3, #1
 8009870:	d003      	beq.n	800987a <HAL_CAN_ConfigFilter+0x26>
 8009872:	7cfb      	ldrb	r3, [r7, #19]
 8009874:	2b02      	cmp	r3, #2
 8009876:	f040 80be 	bne.w	80099f6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800987a:	4b65      	ldr	r3, [pc, #404]	; (8009a10 <HAL_CAN_ConfigFilter+0x1bc>)
 800987c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009884:	f043 0201 	orr.w	r2, r3, #1
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009894:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a8:	021b      	lsls	r3, r3, #8
 80098aa:	431a      	orrs	r2, r3
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	695b      	ldr	r3, [r3, #20]
 80098b6:	f003 031f 	and.w	r3, r3, #31
 80098ba:	2201      	movs	r2, #1
 80098bc:	fa02 f303 	lsl.w	r3, r2, r3
 80098c0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	43db      	mvns	r3, r3
 80098cc:	401a      	ands	r2, r3
 80098ce:	697b      	ldr	r3, [r7, #20]
 80098d0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	69db      	ldr	r3, [r3, #28]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d123      	bne.n	8009924 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	43db      	mvns	r3, r3
 80098e6:	401a      	ands	r2, r3
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	68db      	ldr	r3, [r3, #12]
 80098f2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	685b      	ldr	r3, [r3, #4]
 80098f8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80098fa:	683a      	ldr	r2, [r7, #0]
 80098fc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80098fe:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	3248      	adds	r2, #72	; 0x48
 8009904:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	689b      	ldr	r3, [r3, #8]
 800990c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009918:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800991a:	6979      	ldr	r1, [r7, #20]
 800991c:	3348      	adds	r3, #72	; 0x48
 800991e:	00db      	lsls	r3, r3, #3
 8009920:	440b      	add	r3, r1
 8009922:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	69db      	ldr	r3, [r3, #28]
 8009928:	2b01      	cmp	r3, #1
 800992a:	d122      	bne.n	8009972 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	431a      	orrs	r2, r3
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009948:	683a      	ldr	r2, [r7, #0]
 800994a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800994c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	3248      	adds	r2, #72	; 0x48
 8009952:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	689b      	ldr	r3, [r3, #8]
 800995a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	68db      	ldr	r3, [r3, #12]
 8009960:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009966:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8009968:	6979      	ldr	r1, [r7, #20]
 800996a:	3348      	adds	r3, #72	; 0x48
 800996c:	00db      	lsls	r3, r3, #3
 800996e:	440b      	add	r3, r1
 8009970:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	699b      	ldr	r3, [r3, #24]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d109      	bne.n	800998e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	43db      	mvns	r3, r3
 8009984:	401a      	ands	r2, r3
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800998c:	e007      	b.n	800999e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	431a      	orrs	r2, r3
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	691b      	ldr	r3, [r3, #16]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d109      	bne.n	80099ba <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	43db      	mvns	r3, r3
 80099b0:	401a      	ands	r2, r3
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80099b8:	e007      	b.n	80099ca <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	431a      	orrs	r2, r3
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	6a1b      	ldr	r3, [r3, #32]
 80099ce:	2b01      	cmp	r3, #1
 80099d0:	d107      	bne.n	80099e2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	431a      	orrs	r2, r3
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80099e8:	f023 0201 	bic.w	r2, r3, #1
 80099ec:	697b      	ldr	r3, [r7, #20]
 80099ee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80099f2:	2300      	movs	r3, #0
 80099f4:	e006      	b.n	8009a04 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099fa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009a02:	2301      	movs	r3, #1
  }
}
 8009a04:	4618      	mov	r0, r3
 8009a06:	371c      	adds	r7, #28
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0e:	4770      	bx	lr
 8009a10:	40006400 	.word	0x40006400

08009a14 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b084      	sub	sp, #16
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009a22:	b2db      	uxtb	r3, r3
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d12e      	bne.n	8009a86 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2202      	movs	r2, #2
 8009a2c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	681a      	ldr	r2, [r3, #0]
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f022 0201 	bic.w	r2, r2, #1
 8009a3e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009a40:	f7ff f9da 	bl	8008df8 <HAL_GetTick>
 8009a44:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8009a46:	e012      	b.n	8009a6e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009a48:	f7ff f9d6 	bl	8008df8 <HAL_GetTick>
 8009a4c:	4602      	mov	r2, r0
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	1ad3      	subs	r3, r2, r3
 8009a52:	2b0a      	cmp	r3, #10
 8009a54:	d90b      	bls.n	8009a6e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a5a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2205      	movs	r2, #5
 8009a66:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	e012      	b.n	8009a94 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	685b      	ldr	r3, [r3, #4]
 8009a74:	f003 0301 	and.w	r3, r3, #1
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d1e5      	bne.n	8009a48 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8009a82:	2300      	movs	r3, #0
 8009a84:	e006      	b.n	8009a94 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a8a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009a92:	2301      	movs	r3, #1
  }
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3710      	adds	r7, #16
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b087      	sub	sp, #28
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	60f8      	str	r0, [r7, #12]
 8009aa4:	60b9      	str	r1, [r7, #8]
 8009aa6:	607a      	str	r2, [r7, #4]
 8009aa8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009ab0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8009ab2:	7dfb      	ldrb	r3, [r7, #23]
 8009ab4:	2b01      	cmp	r3, #1
 8009ab6:	d003      	beq.n	8009ac0 <HAL_CAN_GetRxMessage+0x24>
 8009ab8:	7dfb      	ldrb	r3, [r7, #23]
 8009aba:	2b02      	cmp	r3, #2
 8009abc:	f040 80f4 	bne.w	8009ca8 <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d10e      	bne.n	8009ae4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	68db      	ldr	r3, [r3, #12]
 8009acc:	f003 0303 	and.w	r3, r3, #3
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d116      	bne.n	8009b02 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	e0e8      	b.n	8009cb6 <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	691b      	ldr	r3, [r3, #16]
 8009aea:	f003 0303 	and.w	r3, r3, #3
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d107      	bne.n	8009b02 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8009afe:	2301      	movs	r3, #1
 8009b00:	e0d9      	b.n	8009cb6 <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681a      	ldr	r2, [r3, #0]
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	331b      	adds	r3, #27
 8009b0a:	011b      	lsls	r3, r3, #4
 8009b0c:	4413      	add	r3, r2
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f003 0204 	and.w	r2, r3, #4
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	689b      	ldr	r3, [r3, #8]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d10c      	bne.n	8009b3a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681a      	ldr	r2, [r3, #0]
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	331b      	adds	r3, #27
 8009b28:	011b      	lsls	r3, r3, #4
 8009b2a:	4413      	add	r3, r2
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	0d5b      	lsrs	r3, r3, #21
 8009b30:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	601a      	str	r2, [r3, #0]
 8009b38:	e00b      	b.n	8009b52 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	681a      	ldr	r2, [r3, #0]
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	331b      	adds	r3, #27
 8009b42:	011b      	lsls	r3, r3, #4
 8009b44:	4413      	add	r3, r2
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	08db      	lsrs	r3, r3, #3
 8009b4a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681a      	ldr	r2, [r3, #0]
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	331b      	adds	r3, #27
 8009b5a:	011b      	lsls	r3, r3, #4
 8009b5c:	4413      	add	r3, r2
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	085b      	lsrs	r3, r3, #1
 8009b62:	f003 0201 	and.w	r2, r3, #1
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681a      	ldr	r2, [r3, #0]
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	331b      	adds	r3, #27
 8009b72:	011b      	lsls	r3, r3, #4
 8009b74:	4413      	add	r3, r2
 8009b76:	3304      	adds	r3, #4
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f003 020f 	and.w	r2, r3, #15
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681a      	ldr	r2, [r3, #0]
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	331b      	adds	r3, #27
 8009b8a:	011b      	lsls	r3, r3, #4
 8009b8c:	4413      	add	r3, r2
 8009b8e:	3304      	adds	r3, #4
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	0a1b      	lsrs	r3, r3, #8
 8009b94:	b2da      	uxtb	r2, r3
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681a      	ldr	r2, [r3, #0]
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	331b      	adds	r3, #27
 8009ba2:	011b      	lsls	r3, r3, #4
 8009ba4:	4413      	add	r3, r2
 8009ba6:	3304      	adds	r3, #4
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	0c1b      	lsrs	r3, r3, #16
 8009bac:	b29a      	uxth	r2, r3
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681a      	ldr	r2, [r3, #0]
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	011b      	lsls	r3, r3, #4
 8009bba:	4413      	add	r3, r2
 8009bbc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	b2da      	uxtb	r2, r3
 8009bc4:	683b      	ldr	r3, [r7, #0]
 8009bc6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681a      	ldr	r2, [r3, #0]
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	011b      	lsls	r3, r3, #4
 8009bd0:	4413      	add	r3, r2
 8009bd2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	0a1a      	lsrs	r2, r3, #8
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	3301      	adds	r3, #1
 8009bde:	b2d2      	uxtb	r2, r2
 8009be0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681a      	ldr	r2, [r3, #0]
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	011b      	lsls	r3, r3, #4
 8009bea:	4413      	add	r3, r2
 8009bec:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	0c1a      	lsrs	r2, r3, #16
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	3302      	adds	r3, #2
 8009bf8:	b2d2      	uxtb	r2, r2
 8009bfa:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	681a      	ldr	r2, [r3, #0]
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	011b      	lsls	r3, r3, #4
 8009c04:	4413      	add	r3, r2
 8009c06:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	0e1a      	lsrs	r2, r3, #24
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	3303      	adds	r3, #3
 8009c12:	b2d2      	uxtb	r2, r2
 8009c14:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	681a      	ldr	r2, [r3, #0]
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	011b      	lsls	r3, r3, #4
 8009c1e:	4413      	add	r3, r2
 8009c20:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009c24:	681a      	ldr	r2, [r3, #0]
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	3304      	adds	r3, #4
 8009c2a:	b2d2      	uxtb	r2, r2
 8009c2c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681a      	ldr	r2, [r3, #0]
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	011b      	lsls	r3, r3, #4
 8009c36:	4413      	add	r3, r2
 8009c38:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	0a1a      	lsrs	r2, r3, #8
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	3305      	adds	r3, #5
 8009c44:	b2d2      	uxtb	r2, r2
 8009c46:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681a      	ldr	r2, [r3, #0]
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	011b      	lsls	r3, r3, #4
 8009c50:	4413      	add	r3, r2
 8009c52:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	0c1a      	lsrs	r2, r3, #16
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	3306      	adds	r3, #6
 8009c5e:	b2d2      	uxtb	r2, r2
 8009c60:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681a      	ldr	r2, [r3, #0]
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	011b      	lsls	r3, r3, #4
 8009c6a:	4413      	add	r3, r2
 8009c6c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	0e1a      	lsrs	r2, r3, #24
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	3307      	adds	r3, #7
 8009c78:	b2d2      	uxtb	r2, r2
 8009c7a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d108      	bne.n	8009c94 <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	68da      	ldr	r2, [r3, #12]
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f042 0220 	orr.w	r2, r2, #32
 8009c90:	60da      	str	r2, [r3, #12]
 8009c92:	e007      	b.n	8009ca4 <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	691a      	ldr	r2, [r3, #16]
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f042 0220 	orr.w	r2, r2, #32
 8009ca2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	e006      	b.n	8009cb6 <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009cb4:	2301      	movs	r3, #1
  }
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	371c      	adds	r7, #28
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc0:	4770      	bx	lr

08009cc2 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8009cc2:	b480      	push	{r7}
 8009cc4:	b085      	sub	sp, #20
 8009cc6:	af00      	add	r7, sp, #0
 8009cc8:	6078      	str	r0, [r7, #4]
 8009cca:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009cd2:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8009cd4:	7bfb      	ldrb	r3, [r7, #15]
 8009cd6:	2b01      	cmp	r3, #1
 8009cd8:	d002      	beq.n	8009ce0 <HAL_CAN_ActivateNotification+0x1e>
 8009cda:	7bfb      	ldrb	r3, [r7, #15]
 8009cdc:	2b02      	cmp	r3, #2
 8009cde:	d109      	bne.n	8009cf4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	6959      	ldr	r1, [r3, #20]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	683a      	ldr	r2, [r7, #0]
 8009cec:	430a      	orrs	r2, r1
 8009cee:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	e006      	b.n	8009d02 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009d00:	2301      	movs	r3, #1
  }
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3714      	adds	r7, #20
 8009d06:	46bd      	mov	sp, r7
 8009d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0c:	4770      	bx	lr

08009d0e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8009d0e:	b580      	push	{r7, lr}
 8009d10:	b08a      	sub	sp, #40	; 0x28
 8009d12:	af00      	add	r7, sp, #0
 8009d14:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8009d16:	2300      	movs	r3, #0
 8009d18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	695b      	ldr	r3, [r3, #20]
 8009d20:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	685b      	ldr	r3, [r3, #4]
 8009d28:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	689b      	ldr	r3, [r3, #8]
 8009d30:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	68db      	ldr	r3, [r3, #12]
 8009d38:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	691b      	ldr	r3, [r3, #16]
 8009d40:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	699b      	ldr	r3, [r3, #24]
 8009d48:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8009d4a:	6a3b      	ldr	r3, [r7, #32]
 8009d4c:	f003 0301 	and.w	r3, r3, #1
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d07c      	beq.n	8009e4e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8009d54:	69bb      	ldr	r3, [r7, #24]
 8009d56:	f003 0301 	and.w	r3, r3, #1
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d023      	beq.n	8009da6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	2201      	movs	r2, #1
 8009d64:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8009d66:	69bb      	ldr	r3, [r7, #24]
 8009d68:	f003 0302 	and.w	r3, r3, #2
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d003      	beq.n	8009d78 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f005 fe1b 	bl	800f9ac <HAL_CAN_TxMailbox0CompleteCallback>
 8009d76:	e016      	b.n	8009da6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8009d78:	69bb      	ldr	r3, [r7, #24]
 8009d7a:	f003 0304 	and.w	r3, r3, #4
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d004      	beq.n	8009d8c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8009d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d84:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009d88:	627b      	str	r3, [r7, #36]	; 0x24
 8009d8a:	e00c      	b.n	8009da6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8009d8c:	69bb      	ldr	r3, [r7, #24]
 8009d8e:	f003 0308 	and.w	r3, r3, #8
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d004      	beq.n	8009da0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8009d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8009d9e:	e002      	b.n	8009da6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8009da0:	6878      	ldr	r0, [r7, #4]
 8009da2:	f000 f965 	bl	800a070 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8009da6:	69bb      	ldr	r3, [r7, #24]
 8009da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d024      	beq.n	8009dfa <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009db8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8009dba:	69bb      	ldr	r3, [r7, #24]
 8009dbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d003      	beq.n	8009dcc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f005 fe01 	bl	800f9cc <HAL_CAN_TxMailbox1CompleteCallback>
 8009dca:	e016      	b.n	8009dfa <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8009dcc:	69bb      	ldr	r3, [r7, #24]
 8009dce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d004      	beq.n	8009de0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8009dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009ddc:	627b      	str	r3, [r7, #36]	; 0x24
 8009dde:	e00c      	b.n	8009dfa <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8009de0:	69bb      	ldr	r3, [r7, #24]
 8009de2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d004      	beq.n	8009df4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8009dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009df0:	627b      	str	r3, [r7, #36]	; 0x24
 8009df2:	e002      	b.n	8009dfa <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f000 f945 	bl	800a084 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8009dfa:	69bb      	ldr	r3, [r7, #24]
 8009dfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d024      	beq.n	8009e4e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009e0c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8009e0e:	69bb      	ldr	r3, [r7, #24]
 8009e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d003      	beq.n	8009e20 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f005 fde7 	bl	800f9ec <HAL_CAN_TxMailbox2CompleteCallback>
 8009e1e:	e016      	b.n	8009e4e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8009e20:	69bb      	ldr	r3, [r7, #24]
 8009e22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d004      	beq.n	8009e34 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8009e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e30:	627b      	str	r3, [r7, #36]	; 0x24
 8009e32:	e00c      	b.n	8009e4e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8009e34:	69bb      	ldr	r3, [r7, #24]
 8009e36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d004      	beq.n	8009e48 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8009e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e44:	627b      	str	r3, [r7, #36]	; 0x24
 8009e46:	e002      	b.n	8009e4e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f000 f925 	bl	800a098 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8009e4e:	6a3b      	ldr	r3, [r7, #32]
 8009e50:	f003 0308 	and.w	r3, r3, #8
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d00c      	beq.n	8009e72 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	f003 0310 	and.w	r3, r3, #16
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d007      	beq.n	8009e72 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8009e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009e68:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	2210      	movs	r2, #16
 8009e70:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8009e72:	6a3b      	ldr	r3, [r7, #32]
 8009e74:	f003 0304 	and.w	r3, r3, #4
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d00b      	beq.n	8009e94 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8009e7c:	697b      	ldr	r3, [r7, #20]
 8009e7e:	f003 0308 	and.w	r3, r3, #8
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d006      	beq.n	8009e94 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	2208      	movs	r2, #8
 8009e8c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f000 f90c 	bl	800a0ac <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8009e94:	6a3b      	ldr	r3, [r7, #32]
 8009e96:	f003 0302 	and.w	r3, r3, #2
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d009      	beq.n	8009eb2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	68db      	ldr	r3, [r3, #12]
 8009ea4:	f003 0303 	and.w	r3, r3, #3
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d002      	beq.n	8009eb2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	f005 fdad 	bl	800fa0c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8009eb2:	6a3b      	ldr	r3, [r7, #32]
 8009eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d00c      	beq.n	8009ed6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	f003 0310 	and.w	r3, r3, #16
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d007      	beq.n	8009ed6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8009ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009ecc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	2210      	movs	r2, #16
 8009ed4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8009ed6:	6a3b      	ldr	r3, [r7, #32]
 8009ed8:	f003 0320 	and.w	r3, r3, #32
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d00b      	beq.n	8009ef8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8009ee0:	693b      	ldr	r3, [r7, #16]
 8009ee2:	f003 0308 	and.w	r3, r3, #8
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d006      	beq.n	8009ef8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	2208      	movs	r2, #8
 8009ef0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f000 f8ee 	bl	800a0d4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8009ef8:	6a3b      	ldr	r3, [r7, #32]
 8009efa:	f003 0310 	and.w	r3, r3, #16
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d009      	beq.n	8009f16 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	691b      	ldr	r3, [r3, #16]
 8009f08:	f003 0303 	and.w	r3, r3, #3
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d002      	beq.n	8009f16 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f000 f8d5 	bl	800a0c0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8009f16:	6a3b      	ldr	r3, [r7, #32]
 8009f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d00b      	beq.n	8009f38 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8009f20:	69fb      	ldr	r3, [r7, #28]
 8009f22:	f003 0310 	and.w	r3, r3, #16
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d006      	beq.n	8009f38 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	2210      	movs	r2, #16
 8009f30:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f000 f8d8 	bl	800a0e8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8009f38:	6a3b      	ldr	r3, [r7, #32]
 8009f3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d00b      	beq.n	8009f5a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8009f42:	69fb      	ldr	r3, [r7, #28]
 8009f44:	f003 0308 	and.w	r3, r3, #8
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d006      	beq.n	8009f5a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	2208      	movs	r2, #8
 8009f52:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f000 f8d1 	bl	800a0fc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8009f5a:	6a3b      	ldr	r3, [r7, #32]
 8009f5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d075      	beq.n	800a050 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8009f64:	69fb      	ldr	r3, [r7, #28]
 8009f66:	f003 0304 	and.w	r3, r3, #4
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d06c      	beq.n	800a048 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8009f6e:	6a3b      	ldr	r3, [r7, #32]
 8009f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d008      	beq.n	8009f8a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d003      	beq.n	8009f8a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8009f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f84:	f043 0301 	orr.w	r3, r3, #1
 8009f88:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8009f8a:	6a3b      	ldr	r3, [r7, #32]
 8009f8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d008      	beq.n	8009fa6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d003      	beq.n	8009fa6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8009f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa0:	f043 0302 	orr.w	r3, r3, #2
 8009fa4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8009fa6:	6a3b      	ldr	r3, [r7, #32]
 8009fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d008      	beq.n	8009fc2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d003      	beq.n	8009fc2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8009fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fbc:	f043 0304 	orr.w	r3, r3, #4
 8009fc0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8009fc2:	6a3b      	ldr	r3, [r7, #32]
 8009fc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d03d      	beq.n	800a048 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d038      	beq.n	800a048 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009fdc:	2b30      	cmp	r3, #48	; 0x30
 8009fde:	d017      	beq.n	800a010 <HAL_CAN_IRQHandler+0x302>
 8009fe0:	2b30      	cmp	r3, #48	; 0x30
 8009fe2:	d804      	bhi.n	8009fee <HAL_CAN_IRQHandler+0x2e0>
 8009fe4:	2b10      	cmp	r3, #16
 8009fe6:	d009      	beq.n	8009ffc <HAL_CAN_IRQHandler+0x2ee>
 8009fe8:	2b20      	cmp	r3, #32
 8009fea:	d00c      	beq.n	800a006 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8009fec:	e024      	b.n	800a038 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8009fee:	2b50      	cmp	r3, #80	; 0x50
 8009ff0:	d018      	beq.n	800a024 <HAL_CAN_IRQHandler+0x316>
 8009ff2:	2b60      	cmp	r3, #96	; 0x60
 8009ff4:	d01b      	beq.n	800a02e <HAL_CAN_IRQHandler+0x320>
 8009ff6:	2b40      	cmp	r3, #64	; 0x40
 8009ff8:	d00f      	beq.n	800a01a <HAL_CAN_IRQHandler+0x30c>
            break;
 8009ffa:	e01d      	b.n	800a038 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8009ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ffe:	f043 0308 	orr.w	r3, r3, #8
 800a002:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a004:	e018      	b.n	800a038 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 800a006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a008:	f043 0310 	orr.w	r3, r3, #16
 800a00c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a00e:	e013      	b.n	800a038 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 800a010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a012:	f043 0320 	orr.w	r3, r3, #32
 800a016:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a018:	e00e      	b.n	800a038 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 800a01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a01c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a020:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a022:	e009      	b.n	800a038 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 800a024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a02a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a02c:	e004      	b.n	800a038 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 800a02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a030:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a034:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a036:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	699a      	ldr	r2, [r3, #24]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a046:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	2204      	movs	r2, #4
 800a04e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800a050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a052:	2b00      	cmp	r3, #0
 800a054:	d008      	beq.n	800a068 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a05c:	431a      	orrs	r2, r3
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f000 f854 	bl	800a110 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800a068:	bf00      	nop
 800a06a:	3728      	adds	r7, #40	; 0x28
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}

0800a070 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800a070:	b480      	push	{r7}
 800a072:	b083      	sub	sp, #12
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800a078:	bf00      	nop
 800a07a:	370c      	adds	r7, #12
 800a07c:	46bd      	mov	sp, r7
 800a07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a082:	4770      	bx	lr

0800a084 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800a084:	b480      	push	{r7}
 800a086:	b083      	sub	sp, #12
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800a08c:	bf00      	nop
 800a08e:	370c      	adds	r7, #12
 800a090:	46bd      	mov	sp, r7
 800a092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a096:	4770      	bx	lr

0800a098 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800a098:	b480      	push	{r7}
 800a09a:	b083      	sub	sp, #12
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800a0a0:	bf00      	nop
 800a0a2:	370c      	adds	r7, #12
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0aa:	4770      	bx	lr

0800a0ac <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b083      	sub	sp, #12
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800a0b4:	bf00      	nop
 800a0b6:	370c      	adds	r7, #12
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0be:	4770      	bx	lr

0800a0c0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b083      	sub	sp, #12
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800a0c8:	bf00      	nop
 800a0ca:	370c      	adds	r7, #12
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d2:	4770      	bx	lr

0800a0d4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b083      	sub	sp, #12
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800a0dc:	bf00      	nop
 800a0de:	370c      	adds	r7, #12
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e6:	4770      	bx	lr

0800a0e8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b083      	sub	sp, #12
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800a0f0:	bf00      	nop
 800a0f2:	370c      	adds	r7, #12
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr

0800a0fc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b083      	sub	sp, #12
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800a104:	bf00      	nop
 800a106:	370c      	adds	r7, #12
 800a108:	46bd      	mov	sp, r7
 800a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10e:	4770      	bx	lr

0800a110 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800a110:	b480      	push	{r7}
 800a112:	b083      	sub	sp, #12
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800a118:	bf00      	nop
 800a11a:	370c      	adds	r7, #12
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr

0800a124 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a124:	b480      	push	{r7}
 800a126:	b085      	sub	sp, #20
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f003 0307 	and.w	r3, r3, #7
 800a132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a134:	4b0c      	ldr	r3, [pc, #48]	; (800a168 <__NVIC_SetPriorityGrouping+0x44>)
 800a136:	68db      	ldr	r3, [r3, #12]
 800a138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a13a:	68ba      	ldr	r2, [r7, #8]
 800a13c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a140:	4013      	ands	r3, r2
 800a142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a14c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a150:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a156:	4a04      	ldr	r2, [pc, #16]	; (800a168 <__NVIC_SetPriorityGrouping+0x44>)
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	60d3      	str	r3, [r2, #12]
}
 800a15c:	bf00      	nop
 800a15e:	3714      	adds	r7, #20
 800a160:	46bd      	mov	sp, r7
 800a162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a166:	4770      	bx	lr
 800a168:	e000ed00 	.word	0xe000ed00

0800a16c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a16c:	b480      	push	{r7}
 800a16e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a170:	4b04      	ldr	r3, [pc, #16]	; (800a184 <__NVIC_GetPriorityGrouping+0x18>)
 800a172:	68db      	ldr	r3, [r3, #12]
 800a174:	0a1b      	lsrs	r3, r3, #8
 800a176:	f003 0307 	and.w	r3, r3, #7
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	46bd      	mov	sp, r7
 800a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a182:	4770      	bx	lr
 800a184:	e000ed00 	.word	0xe000ed00

0800a188 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a188:	b480      	push	{r7}
 800a18a:	b083      	sub	sp, #12
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	4603      	mov	r3, r0
 800a190:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a196:	2b00      	cmp	r3, #0
 800a198:	db0b      	blt.n	800a1b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a19a:	79fb      	ldrb	r3, [r7, #7]
 800a19c:	f003 021f 	and.w	r2, r3, #31
 800a1a0:	4907      	ldr	r1, [pc, #28]	; (800a1c0 <__NVIC_EnableIRQ+0x38>)
 800a1a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1a6:	095b      	lsrs	r3, r3, #5
 800a1a8:	2001      	movs	r0, #1
 800a1aa:	fa00 f202 	lsl.w	r2, r0, r2
 800a1ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a1b2:	bf00      	nop
 800a1b4:	370c      	adds	r7, #12
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1bc:	4770      	bx	lr
 800a1be:	bf00      	nop
 800a1c0:	e000e100 	.word	0xe000e100

0800a1c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b083      	sub	sp, #12
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	6039      	str	r1, [r7, #0]
 800a1ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a1d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	db0a      	blt.n	800a1ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	b2da      	uxtb	r2, r3
 800a1dc:	490c      	ldr	r1, [pc, #48]	; (800a210 <__NVIC_SetPriority+0x4c>)
 800a1de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1e2:	0112      	lsls	r2, r2, #4
 800a1e4:	b2d2      	uxtb	r2, r2
 800a1e6:	440b      	add	r3, r1
 800a1e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a1ec:	e00a      	b.n	800a204 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	b2da      	uxtb	r2, r3
 800a1f2:	4908      	ldr	r1, [pc, #32]	; (800a214 <__NVIC_SetPriority+0x50>)
 800a1f4:	79fb      	ldrb	r3, [r7, #7]
 800a1f6:	f003 030f 	and.w	r3, r3, #15
 800a1fa:	3b04      	subs	r3, #4
 800a1fc:	0112      	lsls	r2, r2, #4
 800a1fe:	b2d2      	uxtb	r2, r2
 800a200:	440b      	add	r3, r1
 800a202:	761a      	strb	r2, [r3, #24]
}
 800a204:	bf00      	nop
 800a206:	370c      	adds	r7, #12
 800a208:	46bd      	mov	sp, r7
 800a20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20e:	4770      	bx	lr
 800a210:	e000e100 	.word	0xe000e100
 800a214:	e000ed00 	.word	0xe000ed00

0800a218 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a218:	b480      	push	{r7}
 800a21a:	b089      	sub	sp, #36	; 0x24
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	60f8      	str	r0, [r7, #12]
 800a220:	60b9      	str	r1, [r7, #8]
 800a222:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f003 0307 	and.w	r3, r3, #7
 800a22a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a22c:	69fb      	ldr	r3, [r7, #28]
 800a22e:	f1c3 0307 	rsb	r3, r3, #7
 800a232:	2b04      	cmp	r3, #4
 800a234:	bf28      	it	cs
 800a236:	2304      	movcs	r3, #4
 800a238:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a23a:	69fb      	ldr	r3, [r7, #28]
 800a23c:	3304      	adds	r3, #4
 800a23e:	2b06      	cmp	r3, #6
 800a240:	d902      	bls.n	800a248 <NVIC_EncodePriority+0x30>
 800a242:	69fb      	ldr	r3, [r7, #28]
 800a244:	3b03      	subs	r3, #3
 800a246:	e000      	b.n	800a24a <NVIC_EncodePriority+0x32>
 800a248:	2300      	movs	r3, #0
 800a24a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a24c:	f04f 32ff 	mov.w	r2, #4294967295
 800a250:	69bb      	ldr	r3, [r7, #24]
 800a252:	fa02 f303 	lsl.w	r3, r2, r3
 800a256:	43da      	mvns	r2, r3
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	401a      	ands	r2, r3
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a260:	f04f 31ff 	mov.w	r1, #4294967295
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	fa01 f303 	lsl.w	r3, r1, r3
 800a26a:	43d9      	mvns	r1, r3
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a270:	4313      	orrs	r3, r2
         );
}
 800a272:	4618      	mov	r0, r3
 800a274:	3724      	adds	r7, #36	; 0x24
 800a276:	46bd      	mov	sp, r7
 800a278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27c:	4770      	bx	lr
	...

0800a280 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b082      	sub	sp, #8
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	3b01      	subs	r3, #1
 800a28c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a290:	d301      	bcc.n	800a296 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a292:	2301      	movs	r3, #1
 800a294:	e00f      	b.n	800a2b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a296:	4a0a      	ldr	r2, [pc, #40]	; (800a2c0 <SysTick_Config+0x40>)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	3b01      	subs	r3, #1
 800a29c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a29e:	210f      	movs	r1, #15
 800a2a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a2a4:	f7ff ff8e 	bl	800a1c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a2a8:	4b05      	ldr	r3, [pc, #20]	; (800a2c0 <SysTick_Config+0x40>)
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a2ae:	4b04      	ldr	r3, [pc, #16]	; (800a2c0 <SysTick_Config+0x40>)
 800a2b0:	2207      	movs	r2, #7
 800a2b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a2b4:	2300      	movs	r3, #0
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3708      	adds	r7, #8
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
 800a2be:	bf00      	nop
 800a2c0:	e000e010 	.word	0xe000e010

0800a2c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b082      	sub	sp, #8
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f7ff ff29 	bl	800a124 <__NVIC_SetPriorityGrouping>
}
 800a2d2:	bf00      	nop
 800a2d4:	3708      	adds	r7, #8
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}

0800a2da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a2da:	b580      	push	{r7, lr}
 800a2dc:	b086      	sub	sp, #24
 800a2de:	af00      	add	r7, sp, #0
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	60b9      	str	r1, [r7, #8]
 800a2e4:	607a      	str	r2, [r7, #4]
 800a2e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a2ec:	f7ff ff3e 	bl	800a16c <__NVIC_GetPriorityGrouping>
 800a2f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a2f2:	687a      	ldr	r2, [r7, #4]
 800a2f4:	68b9      	ldr	r1, [r7, #8]
 800a2f6:	6978      	ldr	r0, [r7, #20]
 800a2f8:	f7ff ff8e 	bl	800a218 <NVIC_EncodePriority>
 800a2fc:	4602      	mov	r2, r0
 800a2fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a302:	4611      	mov	r1, r2
 800a304:	4618      	mov	r0, r3
 800a306:	f7ff ff5d 	bl	800a1c4 <__NVIC_SetPriority>
}
 800a30a:	bf00      	nop
 800a30c:	3718      	adds	r7, #24
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}

0800a312 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a312:	b580      	push	{r7, lr}
 800a314:	b082      	sub	sp, #8
 800a316:	af00      	add	r7, sp, #0
 800a318:	4603      	mov	r3, r0
 800a31a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a31c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a320:	4618      	mov	r0, r3
 800a322:	f7ff ff31 	bl	800a188 <__NVIC_EnableIRQ>
}
 800a326:	bf00      	nop
 800a328:	3708      	adds	r7, #8
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}

0800a32e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a32e:	b580      	push	{r7, lr}
 800a330:	b082      	sub	sp, #8
 800a332:	af00      	add	r7, sp, #0
 800a334:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a336:	6878      	ldr	r0, [r7, #4]
 800a338:	f7ff ffa2 	bl	800a280 <SysTick_Config>
 800a33c:	4603      	mov	r3, r0
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3708      	adds	r7, #8
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}
	...

0800a348 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b086      	sub	sp, #24
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a350:	2300      	movs	r3, #0
 800a352:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a354:	f7fe fd50 	bl	8008df8 <HAL_GetTick>
 800a358:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d101      	bne.n	800a364 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a360:	2301      	movs	r3, #1
 800a362:	e099      	b.n	800a498 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2200      	movs	r2, #0
 800a368:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	2202      	movs	r2, #2
 800a370:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	681a      	ldr	r2, [r3, #0]
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f022 0201 	bic.w	r2, r2, #1
 800a382:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a384:	e00f      	b.n	800a3a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a386:	f7fe fd37 	bl	8008df8 <HAL_GetTick>
 800a38a:	4602      	mov	r2, r0
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	1ad3      	subs	r3, r2, r3
 800a390:	2b05      	cmp	r3, #5
 800a392:	d908      	bls.n	800a3a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2220      	movs	r2, #32
 800a398:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	2203      	movs	r2, #3
 800a39e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a3a2:	2303      	movs	r3, #3
 800a3a4:	e078      	b.n	800a498 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f003 0301 	and.w	r3, r3, #1
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d1e8      	bne.n	800a386 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a3bc:	697a      	ldr	r2, [r7, #20]
 800a3be:	4b38      	ldr	r3, [pc, #224]	; (800a4a0 <HAL_DMA_Init+0x158>)
 800a3c0:	4013      	ands	r3, r2
 800a3c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	685a      	ldr	r2, [r3, #4]
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	689b      	ldr	r3, [r3, #8]
 800a3cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a3d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	691b      	ldr	r3, [r3, #16]
 800a3d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a3de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	699b      	ldr	r3, [r3, #24]
 800a3e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a3ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6a1b      	ldr	r3, [r3, #32]
 800a3f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a3f2:	697a      	ldr	r2, [r7, #20]
 800a3f4:	4313      	orrs	r3, r2
 800a3f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3fc:	2b04      	cmp	r3, #4
 800a3fe:	d107      	bne.n	800a410 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a408:	4313      	orrs	r3, r2
 800a40a:	697a      	ldr	r2, [r7, #20]
 800a40c:	4313      	orrs	r3, r2
 800a40e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	697a      	ldr	r2, [r7, #20]
 800a416:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	695b      	ldr	r3, [r3, #20]
 800a41e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a420:	697b      	ldr	r3, [r7, #20]
 800a422:	f023 0307 	bic.w	r3, r3, #7
 800a426:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a42c:	697a      	ldr	r2, [r7, #20]
 800a42e:	4313      	orrs	r3, r2
 800a430:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a436:	2b04      	cmp	r3, #4
 800a438:	d117      	bne.n	800a46a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a43e:	697a      	ldr	r2, [r7, #20]
 800a440:	4313      	orrs	r3, r2
 800a442:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d00e      	beq.n	800a46a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a44c:	6878      	ldr	r0, [r7, #4]
 800a44e:	f000 fa99 	bl	800a984 <DMA_CheckFifoParam>
 800a452:	4603      	mov	r3, r0
 800a454:	2b00      	cmp	r3, #0
 800a456:	d008      	beq.n	800a46a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2240      	movs	r2, #64	; 0x40
 800a45c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2201      	movs	r2, #1
 800a462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a466:	2301      	movs	r3, #1
 800a468:	e016      	b.n	800a498 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	697a      	ldr	r2, [r7, #20]
 800a470:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f000 fa50 	bl	800a918 <DMA_CalcBaseAndBitshift>
 800a478:	4603      	mov	r3, r0
 800a47a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a480:	223f      	movs	r2, #63	; 0x3f
 800a482:	409a      	lsls	r2, r3
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2200      	movs	r2, #0
 800a48c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2201      	movs	r2, #1
 800a492:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a496:	2300      	movs	r3, #0
}
 800a498:	4618      	mov	r0, r3
 800a49a:	3718      	adds	r7, #24
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}
 800a4a0:	f010803f 	.word	0xf010803f

0800a4a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b086      	sub	sp, #24
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	60f8      	str	r0, [r7, #12]
 800a4ac:	60b9      	str	r1, [r7, #8]
 800a4ae:	607a      	str	r2, [r7, #4]
 800a4b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a4c2:	2b01      	cmp	r3, #1
 800a4c4:	d101      	bne.n	800a4ca <HAL_DMA_Start_IT+0x26>
 800a4c6:	2302      	movs	r3, #2
 800a4c8:	e048      	b.n	800a55c <HAL_DMA_Start_IT+0xb8>
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	2201      	movs	r2, #1
 800a4ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a4d8:	b2db      	uxtb	r3, r3
 800a4da:	2b01      	cmp	r3, #1
 800a4dc:	d137      	bne.n	800a54e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	2202      	movs	r2, #2
 800a4e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	687a      	ldr	r2, [r7, #4]
 800a4f0:	68b9      	ldr	r1, [r7, #8]
 800a4f2:	68f8      	ldr	r0, [r7, #12]
 800a4f4:	f000 f9e2 	bl	800a8bc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4fc:	223f      	movs	r2, #63	; 0x3f
 800a4fe:	409a      	lsls	r2, r3
 800a500:	693b      	ldr	r3, [r7, #16]
 800a502:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	681a      	ldr	r2, [r3, #0]
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	f042 0216 	orr.w	r2, r2, #22
 800a512:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	695a      	ldr	r2, [r3, #20]
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a522:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d007      	beq.n	800a53c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	681a      	ldr	r2, [r3, #0]
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f042 0208 	orr.w	r2, r2, #8
 800a53a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	681a      	ldr	r2, [r3, #0]
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f042 0201 	orr.w	r2, r2, #1
 800a54a:	601a      	str	r2, [r3, #0]
 800a54c:	e005      	b.n	800a55a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	2200      	movs	r2, #0
 800a552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a556:	2302      	movs	r3, #2
 800a558:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a55a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	3718      	adds	r7, #24
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}

0800a564 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a564:	b480      	push	{r7}
 800a566:	b083      	sub	sp, #12
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a572:	b2db      	uxtb	r3, r3
 800a574:	2b02      	cmp	r3, #2
 800a576:	d004      	beq.n	800a582 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2280      	movs	r2, #128	; 0x80
 800a57c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a57e:	2301      	movs	r3, #1
 800a580:	e00c      	b.n	800a59c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	2205      	movs	r2, #5
 800a586:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	681a      	ldr	r2, [r3, #0]
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f022 0201 	bic.w	r2, r2, #1
 800a598:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a59a:	2300      	movs	r3, #0
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	370c      	adds	r7, #12
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a6:	4770      	bx	lr

0800a5a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b086      	sub	sp, #24
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a5b4:	4b92      	ldr	r3, [pc, #584]	; (800a800 <HAL_DMA_IRQHandler+0x258>)
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	4a92      	ldr	r2, [pc, #584]	; (800a804 <HAL_DMA_IRQHandler+0x25c>)
 800a5ba:	fba2 2303 	umull	r2, r3, r2, r3
 800a5be:	0a9b      	lsrs	r3, r3, #10
 800a5c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a5c8:	693b      	ldr	r3, [r7, #16]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5d2:	2208      	movs	r2, #8
 800a5d4:	409a      	lsls	r2, r3
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	4013      	ands	r3, r2
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d01a      	beq.n	800a614 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f003 0304 	and.w	r3, r3, #4
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d013      	beq.n	800a614 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	681a      	ldr	r2, [r3, #0]
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f022 0204 	bic.w	r2, r2, #4
 800a5fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a600:	2208      	movs	r2, #8
 800a602:	409a      	lsls	r2, r3
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a60c:	f043 0201 	orr.w	r2, r3, #1
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a618:	2201      	movs	r2, #1
 800a61a:	409a      	lsls	r2, r3
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	4013      	ands	r3, r2
 800a620:	2b00      	cmp	r3, #0
 800a622:	d012      	beq.n	800a64a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	695b      	ldr	r3, [r3, #20]
 800a62a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d00b      	beq.n	800a64a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a636:	2201      	movs	r2, #1
 800a638:	409a      	lsls	r2, r3
 800a63a:	693b      	ldr	r3, [r7, #16]
 800a63c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a642:	f043 0202 	orr.w	r2, r3, #2
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a64e:	2204      	movs	r2, #4
 800a650:	409a      	lsls	r2, r3
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	4013      	ands	r3, r2
 800a656:	2b00      	cmp	r3, #0
 800a658:	d012      	beq.n	800a680 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	f003 0302 	and.w	r3, r3, #2
 800a664:	2b00      	cmp	r3, #0
 800a666:	d00b      	beq.n	800a680 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a66c:	2204      	movs	r2, #4
 800a66e:	409a      	lsls	r2, r3
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a678:	f043 0204 	orr.w	r2, r3, #4
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a684:	2210      	movs	r2, #16
 800a686:	409a      	lsls	r2, r3
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	4013      	ands	r3, r2
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d043      	beq.n	800a718 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f003 0308 	and.w	r3, r3, #8
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d03c      	beq.n	800a718 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6a2:	2210      	movs	r2, #16
 800a6a4:	409a      	lsls	r2, r3
 800a6a6:	693b      	ldr	r3, [r7, #16]
 800a6a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d018      	beq.n	800a6ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d108      	bne.n	800a6d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d024      	beq.n	800a718 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	4798      	blx	r3
 800a6d6:	e01f      	b.n	800a718 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d01b      	beq.n	800a718 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	4798      	blx	r3
 800a6e8:	e016      	b.n	800a718 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d107      	bne.n	800a708 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	681a      	ldr	r2, [r3, #0]
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f022 0208 	bic.w	r2, r2, #8
 800a706:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d003      	beq.n	800a718 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a71c:	2220      	movs	r2, #32
 800a71e:	409a      	lsls	r2, r3
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	4013      	ands	r3, r2
 800a724:	2b00      	cmp	r3, #0
 800a726:	f000 808e 	beq.w	800a846 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	f003 0310 	and.w	r3, r3, #16
 800a734:	2b00      	cmp	r3, #0
 800a736:	f000 8086 	beq.w	800a846 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a73e:	2220      	movs	r2, #32
 800a740:	409a      	lsls	r2, r3
 800a742:	693b      	ldr	r3, [r7, #16]
 800a744:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a74c:	b2db      	uxtb	r3, r3
 800a74e:	2b05      	cmp	r3, #5
 800a750:	d136      	bne.n	800a7c0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	681a      	ldr	r2, [r3, #0]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f022 0216 	bic.w	r2, r2, #22
 800a760:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	695a      	ldr	r2, [r3, #20]
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a770:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a776:	2b00      	cmp	r3, #0
 800a778:	d103      	bne.n	800a782 <HAL_DMA_IRQHandler+0x1da>
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d007      	beq.n	800a792 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	681a      	ldr	r2, [r3, #0]
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f022 0208 	bic.w	r2, r2, #8
 800a790:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a796:	223f      	movs	r2, #63	; 0x3f
 800a798:	409a      	lsls	r2, r3
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2201      	movs	r2, #1
 800a7aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d07d      	beq.n	800a8b2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	4798      	blx	r3
        }
        return;
 800a7be:	e078      	b.n	800a8b2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d01c      	beq.n	800a808 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d108      	bne.n	800a7ee <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d030      	beq.n	800a846 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	4798      	blx	r3
 800a7ec:	e02b      	b.n	800a846 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d027      	beq.n	800a846 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	4798      	blx	r3
 800a7fe:	e022      	b.n	800a846 <HAL_DMA_IRQHandler+0x29e>
 800a800:	20000038 	.word	0x20000038
 800a804:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a812:	2b00      	cmp	r3, #0
 800a814:	d10f      	bne.n	800a836 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	681a      	ldr	r2, [r3, #0]
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	f022 0210 	bic.w	r2, r2, #16
 800a824:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2200      	movs	r2, #0
 800a82a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2201      	movs	r2, #1
 800a832:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d003      	beq.n	800a846 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d032      	beq.n	800a8b4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a852:	f003 0301 	and.w	r3, r3, #1
 800a856:	2b00      	cmp	r3, #0
 800a858:	d022      	beq.n	800a8a0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2205      	movs	r2, #5
 800a85e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	681a      	ldr	r2, [r3, #0]
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f022 0201 	bic.w	r2, r2, #1
 800a870:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	3301      	adds	r3, #1
 800a876:	60bb      	str	r3, [r7, #8]
 800a878:	697a      	ldr	r2, [r7, #20]
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d307      	bcc.n	800a88e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f003 0301 	and.w	r3, r3, #1
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d1f2      	bne.n	800a872 <HAL_DMA_IRQHandler+0x2ca>
 800a88c:	e000      	b.n	800a890 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800a88e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	2200      	movs	r2, #0
 800a894:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	2201      	movs	r2, #1
 800a89c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d005      	beq.n	800a8b4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8ac:	6878      	ldr	r0, [r7, #4]
 800a8ae:	4798      	blx	r3
 800a8b0:	e000      	b.n	800a8b4 <HAL_DMA_IRQHandler+0x30c>
        return;
 800a8b2:	bf00      	nop
    }
  }
}
 800a8b4:	3718      	adds	r7, #24
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}
 800a8ba:	bf00      	nop

0800a8bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b085      	sub	sp, #20
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	60f8      	str	r0, [r7, #12]
 800a8c4:	60b9      	str	r1, [r7, #8]
 800a8c6:	607a      	str	r2, [r7, #4]
 800a8c8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	681a      	ldr	r2, [r3, #0]
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a8d8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	683a      	ldr	r2, [r7, #0]
 800a8e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	689b      	ldr	r3, [r3, #8]
 800a8e6:	2b40      	cmp	r3, #64	; 0x40
 800a8e8:	d108      	bne.n	800a8fc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	687a      	ldr	r2, [r7, #4]
 800a8f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	68ba      	ldr	r2, [r7, #8]
 800a8f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a8fa:	e007      	b.n	800a90c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	68ba      	ldr	r2, [r7, #8]
 800a902:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	687a      	ldr	r2, [r7, #4]
 800a90a:	60da      	str	r2, [r3, #12]
}
 800a90c:	bf00      	nop
 800a90e:	3714      	adds	r7, #20
 800a910:	46bd      	mov	sp, r7
 800a912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a916:	4770      	bx	lr

0800a918 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a918:	b480      	push	{r7}
 800a91a:	b085      	sub	sp, #20
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	b2db      	uxtb	r3, r3
 800a926:	3b10      	subs	r3, #16
 800a928:	4a14      	ldr	r2, [pc, #80]	; (800a97c <DMA_CalcBaseAndBitshift+0x64>)
 800a92a:	fba2 2303 	umull	r2, r3, r2, r3
 800a92e:	091b      	lsrs	r3, r3, #4
 800a930:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a932:	4a13      	ldr	r2, [pc, #76]	; (800a980 <DMA_CalcBaseAndBitshift+0x68>)
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	4413      	add	r3, r2
 800a938:	781b      	ldrb	r3, [r3, #0]
 800a93a:	461a      	mov	r2, r3
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	2b03      	cmp	r3, #3
 800a944:	d909      	bls.n	800a95a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a94e:	f023 0303 	bic.w	r3, r3, #3
 800a952:	1d1a      	adds	r2, r3, #4
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	659a      	str	r2, [r3, #88]	; 0x58
 800a958:	e007      	b.n	800a96a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a962:	f023 0303 	bic.w	r3, r3, #3
 800a966:	687a      	ldr	r2, [r7, #4]
 800a968:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3714      	adds	r7, #20
 800a972:	46bd      	mov	sp, r7
 800a974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a978:	4770      	bx	lr
 800a97a:	bf00      	nop
 800a97c:	aaaaaaab 	.word	0xaaaaaaab
 800a980:	08012c6c 	.word	0x08012c6c

0800a984 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a984:	b480      	push	{r7}
 800a986:	b085      	sub	sp, #20
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a98c:	2300      	movs	r3, #0
 800a98e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a994:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	699b      	ldr	r3, [r3, #24]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d11f      	bne.n	800a9de <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	2b03      	cmp	r3, #3
 800a9a2:	d855      	bhi.n	800aa50 <DMA_CheckFifoParam+0xcc>
 800a9a4:	a201      	add	r2, pc, #4	; (adr r2, 800a9ac <DMA_CheckFifoParam+0x28>)
 800a9a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9aa:	bf00      	nop
 800a9ac:	0800a9bd 	.word	0x0800a9bd
 800a9b0:	0800a9cf 	.word	0x0800a9cf
 800a9b4:	0800a9bd 	.word	0x0800a9bd
 800a9b8:	0800aa51 	.word	0x0800aa51
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d045      	beq.n	800aa54 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a9cc:	e042      	b.n	800aa54 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a9d6:	d13f      	bne.n	800aa58 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800a9d8:	2301      	movs	r3, #1
 800a9da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a9dc:	e03c      	b.n	800aa58 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	699b      	ldr	r3, [r3, #24]
 800a9e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a9e6:	d121      	bne.n	800aa2c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	2b03      	cmp	r3, #3
 800a9ec:	d836      	bhi.n	800aa5c <DMA_CheckFifoParam+0xd8>
 800a9ee:	a201      	add	r2, pc, #4	; (adr r2, 800a9f4 <DMA_CheckFifoParam+0x70>)
 800a9f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9f4:	0800aa05 	.word	0x0800aa05
 800a9f8:	0800aa0b 	.word	0x0800aa0b
 800a9fc:	0800aa05 	.word	0x0800aa05
 800aa00:	0800aa1d 	.word	0x0800aa1d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800aa04:	2301      	movs	r3, #1
 800aa06:	73fb      	strb	r3, [r7, #15]
      break;
 800aa08:	e02f      	b.n	800aa6a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d024      	beq.n	800aa60 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800aa16:	2301      	movs	r3, #1
 800aa18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aa1a:	e021      	b.n	800aa60 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa20:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800aa24:	d11e      	bne.n	800aa64 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800aa26:	2301      	movs	r3, #1
 800aa28:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800aa2a:	e01b      	b.n	800aa64 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	2b02      	cmp	r3, #2
 800aa30:	d902      	bls.n	800aa38 <DMA_CheckFifoParam+0xb4>
 800aa32:	2b03      	cmp	r3, #3
 800aa34:	d003      	beq.n	800aa3e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800aa36:	e018      	b.n	800aa6a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800aa38:	2301      	movs	r3, #1
 800aa3a:	73fb      	strb	r3, [r7, #15]
      break;
 800aa3c:	e015      	b.n	800aa6a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d00e      	beq.n	800aa68 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	73fb      	strb	r3, [r7, #15]
      break;
 800aa4e:	e00b      	b.n	800aa68 <DMA_CheckFifoParam+0xe4>
      break;
 800aa50:	bf00      	nop
 800aa52:	e00a      	b.n	800aa6a <DMA_CheckFifoParam+0xe6>
      break;
 800aa54:	bf00      	nop
 800aa56:	e008      	b.n	800aa6a <DMA_CheckFifoParam+0xe6>
      break;
 800aa58:	bf00      	nop
 800aa5a:	e006      	b.n	800aa6a <DMA_CheckFifoParam+0xe6>
      break;
 800aa5c:	bf00      	nop
 800aa5e:	e004      	b.n	800aa6a <DMA_CheckFifoParam+0xe6>
      break;
 800aa60:	bf00      	nop
 800aa62:	e002      	b.n	800aa6a <DMA_CheckFifoParam+0xe6>
      break;   
 800aa64:	bf00      	nop
 800aa66:	e000      	b.n	800aa6a <DMA_CheckFifoParam+0xe6>
      break;
 800aa68:	bf00      	nop
    }
  } 
  
  return status; 
 800aa6a:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	3714      	adds	r7, #20
 800aa70:	46bd      	mov	sp, r7
 800aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa76:	4770      	bx	lr

0800aa78 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b086      	sub	sp, #24
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	60f8      	str	r0, [r7, #12]
 800aa80:	60b9      	str	r1, [r7, #8]
 800aa82:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800aa86:	2301      	movs	r3, #1
 800aa88:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800aa8a:	4b23      	ldr	r3, [pc, #140]	; (800ab18 <HAL_FLASH_Program+0xa0>)
 800aa8c:	7e1b      	ldrb	r3, [r3, #24]
 800aa8e:	2b01      	cmp	r3, #1
 800aa90:	d101      	bne.n	800aa96 <HAL_FLASH_Program+0x1e>
 800aa92:	2302      	movs	r3, #2
 800aa94:	e03b      	b.n	800ab0e <HAL_FLASH_Program+0x96>
 800aa96:	4b20      	ldr	r3, [pc, #128]	; (800ab18 <HAL_FLASH_Program+0xa0>)
 800aa98:	2201      	movs	r2, #1
 800aa9a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800aa9c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800aaa0:	f000 f870 	bl	800ab84 <FLASH_WaitForLastOperation>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800aaa8:	7dfb      	ldrb	r3, [r7, #23]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d12b      	bne.n	800ab06 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d105      	bne.n	800aac0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800aab4:	783b      	ldrb	r3, [r7, #0]
 800aab6:	4619      	mov	r1, r3
 800aab8:	68b8      	ldr	r0, [r7, #8]
 800aaba:	f000 f917 	bl	800acec <FLASH_Program_Byte>
 800aabe:	e016      	b.n	800aaee <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	2b01      	cmp	r3, #1
 800aac4:	d105      	bne.n	800aad2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800aac6:	883b      	ldrh	r3, [r7, #0]
 800aac8:	4619      	mov	r1, r3
 800aaca:	68b8      	ldr	r0, [r7, #8]
 800aacc:	f000 f8ea 	bl	800aca4 <FLASH_Program_HalfWord>
 800aad0:	e00d      	b.n	800aaee <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	2b02      	cmp	r3, #2
 800aad6:	d105      	bne.n	800aae4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	4619      	mov	r1, r3
 800aadc:	68b8      	ldr	r0, [r7, #8]
 800aade:	f000 f8bf 	bl	800ac60 <FLASH_Program_Word>
 800aae2:	e004      	b.n	800aaee <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800aae4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aae8:	68b8      	ldr	r0, [r7, #8]
 800aaea:	f000 f88b 	bl	800ac04 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800aaee:	f24c 3050 	movw	r0, #50000	; 0xc350
 800aaf2:	f000 f847 	bl	800ab84 <FLASH_WaitForLastOperation>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800aafa:	4b08      	ldr	r3, [pc, #32]	; (800ab1c <HAL_FLASH_Program+0xa4>)
 800aafc:	691b      	ldr	r3, [r3, #16]
 800aafe:	4a07      	ldr	r2, [pc, #28]	; (800ab1c <HAL_FLASH_Program+0xa4>)
 800ab00:	f023 0301 	bic.w	r3, r3, #1
 800ab04:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800ab06:	4b04      	ldr	r3, [pc, #16]	; (800ab18 <HAL_FLASH_Program+0xa0>)
 800ab08:	2200      	movs	r2, #0
 800ab0a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800ab0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3718      	adds	r7, #24
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}
 800ab16:	bf00      	nop
 800ab18:	20004210 	.word	0x20004210
 800ab1c:	40023c00 	.word	0x40023c00

0800ab20 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b083      	sub	sp, #12
 800ab24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800ab26:	2300      	movs	r3, #0
 800ab28:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800ab2a:	4b0b      	ldr	r3, [pc, #44]	; (800ab58 <HAL_FLASH_Unlock+0x38>)
 800ab2c:	691b      	ldr	r3, [r3, #16]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	da0b      	bge.n	800ab4a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800ab32:	4b09      	ldr	r3, [pc, #36]	; (800ab58 <HAL_FLASH_Unlock+0x38>)
 800ab34:	4a09      	ldr	r2, [pc, #36]	; (800ab5c <HAL_FLASH_Unlock+0x3c>)
 800ab36:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800ab38:	4b07      	ldr	r3, [pc, #28]	; (800ab58 <HAL_FLASH_Unlock+0x38>)
 800ab3a:	4a09      	ldr	r2, [pc, #36]	; (800ab60 <HAL_FLASH_Unlock+0x40>)
 800ab3c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800ab3e:	4b06      	ldr	r3, [pc, #24]	; (800ab58 <HAL_FLASH_Unlock+0x38>)
 800ab40:	691b      	ldr	r3, [r3, #16]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	da01      	bge.n	800ab4a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800ab46:	2301      	movs	r3, #1
 800ab48:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800ab4a:	79fb      	ldrb	r3, [r7, #7]
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	370c      	adds	r7, #12
 800ab50:	46bd      	mov	sp, r7
 800ab52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab56:	4770      	bx	lr
 800ab58:	40023c00 	.word	0x40023c00
 800ab5c:	45670123 	.word	0x45670123
 800ab60:	cdef89ab 	.word	0xcdef89ab

0800ab64 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800ab64:	b480      	push	{r7}
 800ab66:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800ab68:	4b05      	ldr	r3, [pc, #20]	; (800ab80 <HAL_FLASH_Lock+0x1c>)
 800ab6a:	691b      	ldr	r3, [r3, #16]
 800ab6c:	4a04      	ldr	r2, [pc, #16]	; (800ab80 <HAL_FLASH_Lock+0x1c>)
 800ab6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ab72:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800ab74:	2300      	movs	r3, #0
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7e:	4770      	bx	lr
 800ab80:	40023c00 	.word	0x40023c00

0800ab84 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b084      	sub	sp, #16
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800ab90:	4b1a      	ldr	r3, [pc, #104]	; (800abfc <FLASH_WaitForLastOperation+0x78>)
 800ab92:	2200      	movs	r2, #0
 800ab94:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800ab96:	f7fe f92f 	bl	8008df8 <HAL_GetTick>
 800ab9a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800ab9c:	e010      	b.n	800abc0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aba4:	d00c      	beq.n	800abc0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d007      	beq.n	800abbc <FLASH_WaitForLastOperation+0x38>
 800abac:	f7fe f924 	bl	8008df8 <HAL_GetTick>
 800abb0:	4602      	mov	r2, r0
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	1ad3      	subs	r3, r2, r3
 800abb6:	687a      	ldr	r2, [r7, #4]
 800abb8:	429a      	cmp	r2, r3
 800abba:	d201      	bcs.n	800abc0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800abbc:	2303      	movs	r3, #3
 800abbe:	e019      	b.n	800abf4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800abc0:	4b0f      	ldr	r3, [pc, #60]	; (800ac00 <FLASH_WaitForLastOperation+0x7c>)
 800abc2:	68db      	ldr	r3, [r3, #12]
 800abc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d1e8      	bne.n	800ab9e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800abcc:	4b0c      	ldr	r3, [pc, #48]	; (800ac00 <FLASH_WaitForLastOperation+0x7c>)
 800abce:	68db      	ldr	r3, [r3, #12]
 800abd0:	f003 0301 	and.w	r3, r3, #1
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d002      	beq.n	800abde <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800abd8:	4b09      	ldr	r3, [pc, #36]	; (800ac00 <FLASH_WaitForLastOperation+0x7c>)
 800abda:	2201      	movs	r2, #1
 800abdc:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800abde:	4b08      	ldr	r3, [pc, #32]	; (800ac00 <FLASH_WaitForLastOperation+0x7c>)
 800abe0:	68db      	ldr	r3, [r3, #12]
 800abe2:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d003      	beq.n	800abf2 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800abea:	f000 f8a1 	bl	800ad30 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800abee:	2301      	movs	r3, #1
 800abf0:	e000      	b.n	800abf4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800abf2:	2300      	movs	r3, #0
  
}  
 800abf4:	4618      	mov	r0, r3
 800abf6:	3710      	adds	r7, #16
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}
 800abfc:	20004210 	.word	0x20004210
 800ac00:	40023c00 	.word	0x40023c00

0800ac04 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800ac04:	b490      	push	{r4, r7}
 800ac06:	b084      	sub	sp, #16
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	60f8      	str	r0, [r7, #12]
 800ac0c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800ac10:	4b12      	ldr	r3, [pc, #72]	; (800ac5c <FLASH_Program_DoubleWord+0x58>)
 800ac12:	691b      	ldr	r3, [r3, #16]
 800ac14:	4a11      	ldr	r2, [pc, #68]	; (800ac5c <FLASH_Program_DoubleWord+0x58>)
 800ac16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac1a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800ac1c:	4b0f      	ldr	r3, [pc, #60]	; (800ac5c <FLASH_Program_DoubleWord+0x58>)
 800ac1e:	691b      	ldr	r3, [r3, #16]
 800ac20:	4a0e      	ldr	r2, [pc, #56]	; (800ac5c <FLASH_Program_DoubleWord+0x58>)
 800ac22:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800ac26:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800ac28:	4b0c      	ldr	r3, [pc, #48]	; (800ac5c <FLASH_Program_DoubleWord+0x58>)
 800ac2a:	691b      	ldr	r3, [r3, #16]
 800ac2c:	4a0b      	ldr	r2, [pc, #44]	; (800ac5c <FLASH_Program_DoubleWord+0x58>)
 800ac2e:	f043 0301 	orr.w	r3, r3, #1
 800ac32:	6113      	str	r3, [r2, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	683a      	ldr	r2, [r7, #0]
 800ac38:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800ac3a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800ac3e:	f04f 0300 	mov.w	r3, #0
 800ac42:	f04f 0400 	mov.w	r4, #0
 800ac46:	0013      	movs	r3, r2
 800ac48:	2400      	movs	r4, #0
 800ac4a:	68fa      	ldr	r2, [r7, #12]
 800ac4c:	3204      	adds	r2, #4
 800ac4e:	6013      	str	r3, [r2, #0]
}
 800ac50:	bf00      	nop
 800ac52:	3710      	adds	r7, #16
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bc90      	pop	{r4, r7}
 800ac58:	4770      	bx	lr
 800ac5a:	bf00      	nop
 800ac5c:	40023c00 	.word	0x40023c00

0800ac60 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800ac60:	b480      	push	{r7}
 800ac62:	b083      	sub	sp, #12
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	6078      	str	r0, [r7, #4]
 800ac68:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800ac6a:	4b0d      	ldr	r3, [pc, #52]	; (800aca0 <FLASH_Program_Word+0x40>)
 800ac6c:	691b      	ldr	r3, [r3, #16]
 800ac6e:	4a0c      	ldr	r2, [pc, #48]	; (800aca0 <FLASH_Program_Word+0x40>)
 800ac70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac74:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800ac76:	4b0a      	ldr	r3, [pc, #40]	; (800aca0 <FLASH_Program_Word+0x40>)
 800ac78:	691b      	ldr	r3, [r3, #16]
 800ac7a:	4a09      	ldr	r2, [pc, #36]	; (800aca0 <FLASH_Program_Word+0x40>)
 800ac7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ac80:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800ac82:	4b07      	ldr	r3, [pc, #28]	; (800aca0 <FLASH_Program_Word+0x40>)
 800ac84:	691b      	ldr	r3, [r3, #16]
 800ac86:	4a06      	ldr	r2, [pc, #24]	; (800aca0 <FLASH_Program_Word+0x40>)
 800ac88:	f043 0301 	orr.w	r3, r3, #1
 800ac8c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	683a      	ldr	r2, [r7, #0]
 800ac92:	601a      	str	r2, [r3, #0]
}
 800ac94:	bf00      	nop
 800ac96:	370c      	adds	r7, #12
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9e:	4770      	bx	lr
 800aca0:	40023c00 	.word	0x40023c00

0800aca4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800aca4:	b480      	push	{r7}
 800aca6:	b083      	sub	sp, #12
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
 800acac:	460b      	mov	r3, r1
 800acae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800acb0:	4b0d      	ldr	r3, [pc, #52]	; (800ace8 <FLASH_Program_HalfWord+0x44>)
 800acb2:	691b      	ldr	r3, [r3, #16]
 800acb4:	4a0c      	ldr	r2, [pc, #48]	; (800ace8 <FLASH_Program_HalfWord+0x44>)
 800acb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800acba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800acbc:	4b0a      	ldr	r3, [pc, #40]	; (800ace8 <FLASH_Program_HalfWord+0x44>)
 800acbe:	691b      	ldr	r3, [r3, #16]
 800acc0:	4a09      	ldr	r2, [pc, #36]	; (800ace8 <FLASH_Program_HalfWord+0x44>)
 800acc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800acc6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800acc8:	4b07      	ldr	r3, [pc, #28]	; (800ace8 <FLASH_Program_HalfWord+0x44>)
 800acca:	691b      	ldr	r3, [r3, #16]
 800accc:	4a06      	ldr	r2, [pc, #24]	; (800ace8 <FLASH_Program_HalfWord+0x44>)
 800acce:	f043 0301 	orr.w	r3, r3, #1
 800acd2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	887a      	ldrh	r2, [r7, #2]
 800acd8:	801a      	strh	r2, [r3, #0]
}
 800acda:	bf00      	nop
 800acdc:	370c      	adds	r7, #12
 800acde:	46bd      	mov	sp, r7
 800ace0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace4:	4770      	bx	lr
 800ace6:	bf00      	nop
 800ace8:	40023c00 	.word	0x40023c00

0800acec <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800acec:	b480      	push	{r7}
 800acee:	b083      	sub	sp, #12
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	460b      	mov	r3, r1
 800acf6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800acf8:	4b0c      	ldr	r3, [pc, #48]	; (800ad2c <FLASH_Program_Byte+0x40>)
 800acfa:	691b      	ldr	r3, [r3, #16]
 800acfc:	4a0b      	ldr	r2, [pc, #44]	; (800ad2c <FLASH_Program_Byte+0x40>)
 800acfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad02:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800ad04:	4b09      	ldr	r3, [pc, #36]	; (800ad2c <FLASH_Program_Byte+0x40>)
 800ad06:	4a09      	ldr	r2, [pc, #36]	; (800ad2c <FLASH_Program_Byte+0x40>)
 800ad08:	691b      	ldr	r3, [r3, #16]
 800ad0a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800ad0c:	4b07      	ldr	r3, [pc, #28]	; (800ad2c <FLASH_Program_Byte+0x40>)
 800ad0e:	691b      	ldr	r3, [r3, #16]
 800ad10:	4a06      	ldr	r2, [pc, #24]	; (800ad2c <FLASH_Program_Byte+0x40>)
 800ad12:	f043 0301 	orr.w	r3, r3, #1
 800ad16:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	78fa      	ldrb	r2, [r7, #3]
 800ad1c:	701a      	strb	r2, [r3, #0]
}
 800ad1e:	bf00      	nop
 800ad20:	370c      	adds	r7, #12
 800ad22:	46bd      	mov	sp, r7
 800ad24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad28:	4770      	bx	lr
 800ad2a:	bf00      	nop
 800ad2c:	40023c00 	.word	0x40023c00

0800ad30 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800ad30:	b480      	push	{r7}
 800ad32:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800ad34:	4b2f      	ldr	r3, [pc, #188]	; (800adf4 <FLASH_SetErrorCode+0xc4>)
 800ad36:	68db      	ldr	r3, [r3, #12]
 800ad38:	f003 0310 	and.w	r3, r3, #16
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d008      	beq.n	800ad52 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800ad40:	4b2d      	ldr	r3, [pc, #180]	; (800adf8 <FLASH_SetErrorCode+0xc8>)
 800ad42:	69db      	ldr	r3, [r3, #28]
 800ad44:	f043 0310 	orr.w	r3, r3, #16
 800ad48:	4a2b      	ldr	r2, [pc, #172]	; (800adf8 <FLASH_SetErrorCode+0xc8>)
 800ad4a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800ad4c:	4b29      	ldr	r3, [pc, #164]	; (800adf4 <FLASH_SetErrorCode+0xc4>)
 800ad4e:	2210      	movs	r2, #16
 800ad50:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800ad52:	4b28      	ldr	r3, [pc, #160]	; (800adf4 <FLASH_SetErrorCode+0xc4>)
 800ad54:	68db      	ldr	r3, [r3, #12]
 800ad56:	f003 0320 	and.w	r3, r3, #32
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d008      	beq.n	800ad70 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800ad5e:	4b26      	ldr	r3, [pc, #152]	; (800adf8 <FLASH_SetErrorCode+0xc8>)
 800ad60:	69db      	ldr	r3, [r3, #28]
 800ad62:	f043 0308 	orr.w	r3, r3, #8
 800ad66:	4a24      	ldr	r2, [pc, #144]	; (800adf8 <FLASH_SetErrorCode+0xc8>)
 800ad68:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800ad6a:	4b22      	ldr	r3, [pc, #136]	; (800adf4 <FLASH_SetErrorCode+0xc4>)
 800ad6c:	2220      	movs	r2, #32
 800ad6e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800ad70:	4b20      	ldr	r3, [pc, #128]	; (800adf4 <FLASH_SetErrorCode+0xc4>)
 800ad72:	68db      	ldr	r3, [r3, #12]
 800ad74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d008      	beq.n	800ad8e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800ad7c:	4b1e      	ldr	r3, [pc, #120]	; (800adf8 <FLASH_SetErrorCode+0xc8>)
 800ad7e:	69db      	ldr	r3, [r3, #28]
 800ad80:	f043 0304 	orr.w	r3, r3, #4
 800ad84:	4a1c      	ldr	r2, [pc, #112]	; (800adf8 <FLASH_SetErrorCode+0xc8>)
 800ad86:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800ad88:	4b1a      	ldr	r3, [pc, #104]	; (800adf4 <FLASH_SetErrorCode+0xc4>)
 800ad8a:	2240      	movs	r2, #64	; 0x40
 800ad8c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800ad8e:	4b19      	ldr	r3, [pc, #100]	; (800adf4 <FLASH_SetErrorCode+0xc4>)
 800ad90:	68db      	ldr	r3, [r3, #12]
 800ad92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d008      	beq.n	800adac <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800ad9a:	4b17      	ldr	r3, [pc, #92]	; (800adf8 <FLASH_SetErrorCode+0xc8>)
 800ad9c:	69db      	ldr	r3, [r3, #28]
 800ad9e:	f043 0302 	orr.w	r3, r3, #2
 800ada2:	4a15      	ldr	r2, [pc, #84]	; (800adf8 <FLASH_SetErrorCode+0xc8>)
 800ada4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800ada6:	4b13      	ldr	r3, [pc, #76]	; (800adf4 <FLASH_SetErrorCode+0xc4>)
 800ada8:	2280      	movs	r2, #128	; 0x80
 800adaa:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800adac:	4b11      	ldr	r3, [pc, #68]	; (800adf4 <FLASH_SetErrorCode+0xc4>)
 800adae:	68db      	ldr	r3, [r3, #12]
 800adb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d009      	beq.n	800adcc <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800adb8:	4b0f      	ldr	r3, [pc, #60]	; (800adf8 <FLASH_SetErrorCode+0xc8>)
 800adba:	69db      	ldr	r3, [r3, #28]
 800adbc:	f043 0301 	orr.w	r3, r3, #1
 800adc0:	4a0d      	ldr	r2, [pc, #52]	; (800adf8 <FLASH_SetErrorCode+0xc8>)
 800adc2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800adc4:	4b0b      	ldr	r3, [pc, #44]	; (800adf4 <FLASH_SetErrorCode+0xc4>)
 800adc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800adca:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800adcc:	4b09      	ldr	r3, [pc, #36]	; (800adf4 <FLASH_SetErrorCode+0xc4>)
 800adce:	68db      	ldr	r3, [r3, #12]
 800add0:	f003 0302 	and.w	r3, r3, #2
 800add4:	2b00      	cmp	r3, #0
 800add6:	d008      	beq.n	800adea <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800add8:	4b07      	ldr	r3, [pc, #28]	; (800adf8 <FLASH_SetErrorCode+0xc8>)
 800adda:	69db      	ldr	r3, [r3, #28]
 800addc:	f043 0320 	orr.w	r3, r3, #32
 800ade0:	4a05      	ldr	r2, [pc, #20]	; (800adf8 <FLASH_SetErrorCode+0xc8>)
 800ade2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800ade4:	4b03      	ldr	r3, [pc, #12]	; (800adf4 <FLASH_SetErrorCode+0xc4>)
 800ade6:	2202      	movs	r2, #2
 800ade8:	60da      	str	r2, [r3, #12]
  }
}
 800adea:	bf00      	nop
 800adec:	46bd      	mov	sp, r7
 800adee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf2:	4770      	bx	lr
 800adf4:	40023c00 	.word	0x40023c00
 800adf8:	20004210 	.word	0x20004210

0800adfc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b084      	sub	sp, #16
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800ae06:	2301      	movs	r3, #1
 800ae08:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800ae0e:	4b31      	ldr	r3, [pc, #196]	; (800aed4 <HAL_FLASHEx_Erase+0xd8>)
 800ae10:	7e1b      	ldrb	r3, [r3, #24]
 800ae12:	2b01      	cmp	r3, #1
 800ae14:	d101      	bne.n	800ae1a <HAL_FLASHEx_Erase+0x1e>
 800ae16:	2302      	movs	r3, #2
 800ae18:	e058      	b.n	800aecc <HAL_FLASHEx_Erase+0xd0>
 800ae1a:	4b2e      	ldr	r3, [pc, #184]	; (800aed4 <HAL_FLASHEx_Erase+0xd8>)
 800ae1c:	2201      	movs	r2, #1
 800ae1e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ae20:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ae24:	f7ff feae 	bl	800ab84 <FLASH_WaitForLastOperation>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800ae2c:	7bfb      	ldrb	r3, [r7, #15]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d148      	bne.n	800aec4 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	f04f 32ff 	mov.w	r2, #4294967295
 800ae38:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	2b01      	cmp	r3, #1
 800ae40:	d115      	bne.n	800ae6e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	691b      	ldr	r3, [r3, #16]
 800ae46:	b2da      	uxtb	r2, r3
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	685b      	ldr	r3, [r3, #4]
 800ae4c:	4619      	mov	r1, r3
 800ae4e:	4610      	mov	r0, r2
 800ae50:	f000 f844 	bl	800aedc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ae54:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ae58:	f7ff fe94 	bl	800ab84 <FLASH_WaitForLastOperation>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800ae60:	4b1d      	ldr	r3, [pc, #116]	; (800aed8 <HAL_FLASHEx_Erase+0xdc>)
 800ae62:	691b      	ldr	r3, [r3, #16]
 800ae64:	4a1c      	ldr	r2, [pc, #112]	; (800aed8 <HAL_FLASHEx_Erase+0xdc>)
 800ae66:	f023 0304 	bic.w	r3, r3, #4
 800ae6a:	6113      	str	r3, [r2, #16]
 800ae6c:	e028      	b.n	800aec0 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	689b      	ldr	r3, [r3, #8]
 800ae72:	60bb      	str	r3, [r7, #8]
 800ae74:	e01c      	b.n	800aeb0 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	691b      	ldr	r3, [r3, #16]
 800ae7a:	b2db      	uxtb	r3, r3
 800ae7c:	4619      	mov	r1, r3
 800ae7e:	68b8      	ldr	r0, [r7, #8]
 800ae80:	f000 f850 	bl	800af24 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ae84:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ae88:	f7ff fe7c 	bl	800ab84 <FLASH_WaitForLastOperation>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800ae90:	4b11      	ldr	r3, [pc, #68]	; (800aed8 <HAL_FLASHEx_Erase+0xdc>)
 800ae92:	691b      	ldr	r3, [r3, #16]
 800ae94:	4a10      	ldr	r2, [pc, #64]	; (800aed8 <HAL_FLASHEx_Erase+0xdc>)
 800ae96:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800ae9a:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 800ae9c:	7bfb      	ldrb	r3, [r7, #15]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d003      	beq.n	800aeaa <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	68ba      	ldr	r2, [r7, #8]
 800aea6:	601a      	str	r2, [r3, #0]
          break;
 800aea8:	e00a      	b.n	800aec0 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	3301      	adds	r3, #1
 800aeae:	60bb      	str	r3, [r7, #8]
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	68da      	ldr	r2, [r3, #12]
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	689b      	ldr	r3, [r3, #8]
 800aeb8:	4413      	add	r3, r2
 800aeba:	68ba      	ldr	r2, [r7, #8]
 800aebc:	429a      	cmp	r2, r3
 800aebe:	d3da      	bcc.n	800ae76 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 800aec0:	f000 f878 	bl	800afb4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800aec4:	4b03      	ldr	r3, [pc, #12]	; (800aed4 <HAL_FLASHEx_Erase+0xd8>)
 800aec6:	2200      	movs	r2, #0
 800aec8:	761a      	strb	r2, [r3, #24]

  return status;
 800aeca:	7bfb      	ldrb	r3, [r7, #15]
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3710      	adds	r7, #16
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}
 800aed4:	20004210 	.word	0x20004210
 800aed8:	40023c00 	.word	0x40023c00

0800aedc <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800aedc:	b480      	push	{r7}
 800aede:	b083      	sub	sp, #12
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	4603      	mov	r3, r0
 800aee4:	6039      	str	r1, [r7, #0]
 800aee6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800aee8:	4b0d      	ldr	r3, [pc, #52]	; (800af20 <FLASH_MassErase+0x44>)
 800aeea:	691b      	ldr	r3, [r3, #16]
 800aeec:	4a0c      	ldr	r2, [pc, #48]	; (800af20 <FLASH_MassErase+0x44>)
 800aeee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aef2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800aef4:	4b0a      	ldr	r3, [pc, #40]	; (800af20 <FLASH_MassErase+0x44>)
 800aef6:	691b      	ldr	r3, [r3, #16]
 800aef8:	4a09      	ldr	r2, [pc, #36]	; (800af20 <FLASH_MassErase+0x44>)
 800aefa:	f043 0304 	orr.w	r3, r3, #4
 800aefe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 800af00:	4b07      	ldr	r3, [pc, #28]	; (800af20 <FLASH_MassErase+0x44>)
 800af02:	691a      	ldr	r2, [r3, #16]
 800af04:	79fb      	ldrb	r3, [r7, #7]
 800af06:	021b      	lsls	r3, r3, #8
 800af08:	4313      	orrs	r3, r2
 800af0a:	4a05      	ldr	r2, [pc, #20]	; (800af20 <FLASH_MassErase+0x44>)
 800af0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af10:	6113      	str	r3, [r2, #16]
}
 800af12:	bf00      	nop
 800af14:	370c      	adds	r7, #12
 800af16:	46bd      	mov	sp, r7
 800af18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1c:	4770      	bx	lr
 800af1e:	bf00      	nop
 800af20:	40023c00 	.word	0x40023c00

0800af24 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800af24:	b480      	push	{r7}
 800af26:	b085      	sub	sp, #20
 800af28:	af00      	add	r7, sp, #0
 800af2a:	6078      	str	r0, [r7, #4]
 800af2c:	460b      	mov	r3, r1
 800af2e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800af30:	2300      	movs	r3, #0
 800af32:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800af34:	78fb      	ldrb	r3, [r7, #3]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d102      	bne.n	800af40 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800af3a:	2300      	movs	r3, #0
 800af3c:	60fb      	str	r3, [r7, #12]
 800af3e:	e010      	b.n	800af62 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800af40:	78fb      	ldrb	r3, [r7, #3]
 800af42:	2b01      	cmp	r3, #1
 800af44:	d103      	bne.n	800af4e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800af46:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af4a:	60fb      	str	r3, [r7, #12]
 800af4c:	e009      	b.n	800af62 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800af4e:	78fb      	ldrb	r3, [r7, #3]
 800af50:	2b02      	cmp	r3, #2
 800af52:	d103      	bne.n	800af5c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800af54:	f44f 7300 	mov.w	r3, #512	; 0x200
 800af58:	60fb      	str	r3, [r7, #12]
 800af5a:	e002      	b.n	800af62 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800af5c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800af60:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800af62:	4b13      	ldr	r3, [pc, #76]	; (800afb0 <FLASH_Erase_Sector+0x8c>)
 800af64:	691b      	ldr	r3, [r3, #16]
 800af66:	4a12      	ldr	r2, [pc, #72]	; (800afb0 <FLASH_Erase_Sector+0x8c>)
 800af68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af6c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800af6e:	4b10      	ldr	r3, [pc, #64]	; (800afb0 <FLASH_Erase_Sector+0x8c>)
 800af70:	691a      	ldr	r2, [r3, #16]
 800af72:	490f      	ldr	r1, [pc, #60]	; (800afb0 <FLASH_Erase_Sector+0x8c>)
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	4313      	orrs	r3, r2
 800af78:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800af7a:	4b0d      	ldr	r3, [pc, #52]	; (800afb0 <FLASH_Erase_Sector+0x8c>)
 800af7c:	691b      	ldr	r3, [r3, #16]
 800af7e:	4a0c      	ldr	r2, [pc, #48]	; (800afb0 <FLASH_Erase_Sector+0x8c>)
 800af80:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800af84:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800af86:	4b0a      	ldr	r3, [pc, #40]	; (800afb0 <FLASH_Erase_Sector+0x8c>)
 800af88:	691a      	ldr	r2, [r3, #16]
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	00db      	lsls	r3, r3, #3
 800af8e:	4313      	orrs	r3, r2
 800af90:	4a07      	ldr	r2, [pc, #28]	; (800afb0 <FLASH_Erase_Sector+0x8c>)
 800af92:	f043 0302 	orr.w	r3, r3, #2
 800af96:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800af98:	4b05      	ldr	r3, [pc, #20]	; (800afb0 <FLASH_Erase_Sector+0x8c>)
 800af9a:	691b      	ldr	r3, [r3, #16]
 800af9c:	4a04      	ldr	r2, [pc, #16]	; (800afb0 <FLASH_Erase_Sector+0x8c>)
 800af9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800afa2:	6113      	str	r3, [r2, #16]
}
 800afa4:	bf00      	nop
 800afa6:	3714      	adds	r7, #20
 800afa8:	46bd      	mov	sp, r7
 800afaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afae:	4770      	bx	lr
 800afb0:	40023c00 	.word	0x40023c00

0800afb4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800afb4:	b480      	push	{r7}
 800afb6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 800afb8:	4b20      	ldr	r3, [pc, #128]	; (800b03c <FLASH_FlushCaches+0x88>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d017      	beq.n	800aff4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800afc4:	4b1d      	ldr	r3, [pc, #116]	; (800b03c <FLASH_FlushCaches+0x88>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	4a1c      	ldr	r2, [pc, #112]	; (800b03c <FLASH_FlushCaches+0x88>)
 800afca:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800afce:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800afd0:	4b1a      	ldr	r3, [pc, #104]	; (800b03c <FLASH_FlushCaches+0x88>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	4a19      	ldr	r2, [pc, #100]	; (800b03c <FLASH_FlushCaches+0x88>)
 800afd6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800afda:	6013      	str	r3, [r2, #0]
 800afdc:	4b17      	ldr	r3, [pc, #92]	; (800b03c <FLASH_FlushCaches+0x88>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	4a16      	ldr	r2, [pc, #88]	; (800b03c <FLASH_FlushCaches+0x88>)
 800afe2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800afe6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800afe8:	4b14      	ldr	r3, [pc, #80]	; (800b03c <FLASH_FlushCaches+0x88>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	4a13      	ldr	r2, [pc, #76]	; (800b03c <FLASH_FlushCaches+0x88>)
 800afee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800aff2:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800aff4:	4b11      	ldr	r3, [pc, #68]	; (800b03c <FLASH_FlushCaches+0x88>)
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800affc:	2b00      	cmp	r3, #0
 800affe:	d017      	beq.n	800b030 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800b000:	4b0e      	ldr	r3, [pc, #56]	; (800b03c <FLASH_FlushCaches+0x88>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	4a0d      	ldr	r2, [pc, #52]	; (800b03c <FLASH_FlushCaches+0x88>)
 800b006:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b00a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800b00c:	4b0b      	ldr	r3, [pc, #44]	; (800b03c <FLASH_FlushCaches+0x88>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	4a0a      	ldr	r2, [pc, #40]	; (800b03c <FLASH_FlushCaches+0x88>)
 800b012:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b016:	6013      	str	r3, [r2, #0]
 800b018:	4b08      	ldr	r3, [pc, #32]	; (800b03c <FLASH_FlushCaches+0x88>)
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	4a07      	ldr	r2, [pc, #28]	; (800b03c <FLASH_FlushCaches+0x88>)
 800b01e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b022:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800b024:	4b05      	ldr	r3, [pc, #20]	; (800b03c <FLASH_FlushCaches+0x88>)
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	4a04      	ldr	r2, [pc, #16]	; (800b03c <FLASH_FlushCaches+0x88>)
 800b02a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b02e:	6013      	str	r3, [r2, #0]
  }
}
 800b030:	bf00      	nop
 800b032:	46bd      	mov	sp, r7
 800b034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b038:	4770      	bx	lr
 800b03a:	bf00      	nop
 800b03c:	40023c00 	.word	0x40023c00

0800b040 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b040:	b480      	push	{r7}
 800b042:	b089      	sub	sp, #36	; 0x24
 800b044:	af00      	add	r7, sp, #0
 800b046:	6078      	str	r0, [r7, #4]
 800b048:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800b04a:	2300      	movs	r3, #0
 800b04c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b04e:	2300      	movs	r3, #0
 800b050:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800b052:	2300      	movs	r3, #0
 800b054:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b056:	2300      	movs	r3, #0
 800b058:	61fb      	str	r3, [r7, #28]
 800b05a:	e165      	b.n	800b328 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800b05c:	2201      	movs	r2, #1
 800b05e:	69fb      	ldr	r3, [r7, #28]
 800b060:	fa02 f303 	lsl.w	r3, r2, r3
 800b064:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b066:	683b      	ldr	r3, [r7, #0]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	697a      	ldr	r2, [r7, #20]
 800b06c:	4013      	ands	r3, r2
 800b06e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b070:	693a      	ldr	r2, [r7, #16]
 800b072:	697b      	ldr	r3, [r7, #20]
 800b074:	429a      	cmp	r2, r3
 800b076:	f040 8154 	bne.w	800b322 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	685b      	ldr	r3, [r3, #4]
 800b07e:	2b02      	cmp	r3, #2
 800b080:	d003      	beq.n	800b08a <HAL_GPIO_Init+0x4a>
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	685b      	ldr	r3, [r3, #4]
 800b086:	2b12      	cmp	r3, #18
 800b088:	d123      	bne.n	800b0d2 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b08a:	69fb      	ldr	r3, [r7, #28]
 800b08c:	08da      	lsrs	r2, r3, #3
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	3208      	adds	r2, #8
 800b092:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b096:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b098:	69fb      	ldr	r3, [r7, #28]
 800b09a:	f003 0307 	and.w	r3, r3, #7
 800b09e:	009b      	lsls	r3, r3, #2
 800b0a0:	220f      	movs	r2, #15
 800b0a2:	fa02 f303 	lsl.w	r3, r2, r3
 800b0a6:	43db      	mvns	r3, r3
 800b0a8:	69ba      	ldr	r2, [r7, #24]
 800b0aa:	4013      	ands	r3, r2
 800b0ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	691a      	ldr	r2, [r3, #16]
 800b0b2:	69fb      	ldr	r3, [r7, #28]
 800b0b4:	f003 0307 	and.w	r3, r3, #7
 800b0b8:	009b      	lsls	r3, r3, #2
 800b0ba:	fa02 f303 	lsl.w	r3, r2, r3
 800b0be:	69ba      	ldr	r2, [r7, #24]
 800b0c0:	4313      	orrs	r3, r2
 800b0c2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b0c4:	69fb      	ldr	r3, [r7, #28]
 800b0c6:	08da      	lsrs	r2, r3, #3
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	3208      	adds	r2, #8
 800b0cc:	69b9      	ldr	r1, [r7, #24]
 800b0ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b0d8:	69fb      	ldr	r3, [r7, #28]
 800b0da:	005b      	lsls	r3, r3, #1
 800b0dc:	2203      	movs	r2, #3
 800b0de:	fa02 f303 	lsl.w	r3, r2, r3
 800b0e2:	43db      	mvns	r3, r3
 800b0e4:	69ba      	ldr	r2, [r7, #24]
 800b0e6:	4013      	ands	r3, r2
 800b0e8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	685b      	ldr	r3, [r3, #4]
 800b0ee:	f003 0203 	and.w	r2, r3, #3
 800b0f2:	69fb      	ldr	r3, [r7, #28]
 800b0f4:	005b      	lsls	r3, r3, #1
 800b0f6:	fa02 f303 	lsl.w	r3, r2, r3
 800b0fa:	69ba      	ldr	r2, [r7, #24]
 800b0fc:	4313      	orrs	r3, r2
 800b0fe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	69ba      	ldr	r2, [r7, #24]
 800b104:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	685b      	ldr	r3, [r3, #4]
 800b10a:	2b01      	cmp	r3, #1
 800b10c:	d00b      	beq.n	800b126 <HAL_GPIO_Init+0xe6>
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	685b      	ldr	r3, [r3, #4]
 800b112:	2b02      	cmp	r3, #2
 800b114:	d007      	beq.n	800b126 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b11a:	2b11      	cmp	r3, #17
 800b11c:	d003      	beq.n	800b126 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	685b      	ldr	r3, [r3, #4]
 800b122:	2b12      	cmp	r3, #18
 800b124:	d130      	bne.n	800b188 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	689b      	ldr	r3, [r3, #8]
 800b12a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b12c:	69fb      	ldr	r3, [r7, #28]
 800b12e:	005b      	lsls	r3, r3, #1
 800b130:	2203      	movs	r2, #3
 800b132:	fa02 f303 	lsl.w	r3, r2, r3
 800b136:	43db      	mvns	r3, r3
 800b138:	69ba      	ldr	r2, [r7, #24]
 800b13a:	4013      	ands	r3, r2
 800b13c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b13e:	683b      	ldr	r3, [r7, #0]
 800b140:	68da      	ldr	r2, [r3, #12]
 800b142:	69fb      	ldr	r3, [r7, #28]
 800b144:	005b      	lsls	r3, r3, #1
 800b146:	fa02 f303 	lsl.w	r3, r2, r3
 800b14a:	69ba      	ldr	r2, [r7, #24]
 800b14c:	4313      	orrs	r3, r2
 800b14e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	69ba      	ldr	r2, [r7, #24]
 800b154:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	685b      	ldr	r3, [r3, #4]
 800b15a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b15c:	2201      	movs	r2, #1
 800b15e:	69fb      	ldr	r3, [r7, #28]
 800b160:	fa02 f303 	lsl.w	r3, r2, r3
 800b164:	43db      	mvns	r3, r3
 800b166:	69ba      	ldr	r2, [r7, #24]
 800b168:	4013      	ands	r3, r2
 800b16a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800b16c:	683b      	ldr	r3, [r7, #0]
 800b16e:	685b      	ldr	r3, [r3, #4]
 800b170:	091b      	lsrs	r3, r3, #4
 800b172:	f003 0201 	and.w	r2, r3, #1
 800b176:	69fb      	ldr	r3, [r7, #28]
 800b178:	fa02 f303 	lsl.w	r3, r2, r3
 800b17c:	69ba      	ldr	r2, [r7, #24]
 800b17e:	4313      	orrs	r3, r2
 800b180:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	69ba      	ldr	r2, [r7, #24]
 800b186:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	68db      	ldr	r3, [r3, #12]
 800b18c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b18e:	69fb      	ldr	r3, [r7, #28]
 800b190:	005b      	lsls	r3, r3, #1
 800b192:	2203      	movs	r2, #3
 800b194:	fa02 f303 	lsl.w	r3, r2, r3
 800b198:	43db      	mvns	r3, r3
 800b19a:	69ba      	ldr	r2, [r7, #24]
 800b19c:	4013      	ands	r3, r2
 800b19e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	689a      	ldr	r2, [r3, #8]
 800b1a4:	69fb      	ldr	r3, [r7, #28]
 800b1a6:	005b      	lsls	r3, r3, #1
 800b1a8:	fa02 f303 	lsl.w	r3, r2, r3
 800b1ac:	69ba      	ldr	r2, [r7, #24]
 800b1ae:	4313      	orrs	r3, r2
 800b1b0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	69ba      	ldr	r2, [r7, #24]
 800b1b6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	685b      	ldr	r3, [r3, #4]
 800b1bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	f000 80ae 	beq.w	800b322 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	60fb      	str	r3, [r7, #12]
 800b1ca:	4b5c      	ldr	r3, [pc, #368]	; (800b33c <HAL_GPIO_Init+0x2fc>)
 800b1cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1ce:	4a5b      	ldr	r2, [pc, #364]	; (800b33c <HAL_GPIO_Init+0x2fc>)
 800b1d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b1d4:	6453      	str	r3, [r2, #68]	; 0x44
 800b1d6:	4b59      	ldr	r3, [pc, #356]	; (800b33c <HAL_GPIO_Init+0x2fc>)
 800b1d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b1de:	60fb      	str	r3, [r7, #12]
 800b1e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b1e2:	4a57      	ldr	r2, [pc, #348]	; (800b340 <HAL_GPIO_Init+0x300>)
 800b1e4:	69fb      	ldr	r3, [r7, #28]
 800b1e6:	089b      	lsrs	r3, r3, #2
 800b1e8:	3302      	adds	r3, #2
 800b1ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b1ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b1f0:	69fb      	ldr	r3, [r7, #28]
 800b1f2:	f003 0303 	and.w	r3, r3, #3
 800b1f6:	009b      	lsls	r3, r3, #2
 800b1f8:	220f      	movs	r2, #15
 800b1fa:	fa02 f303 	lsl.w	r3, r2, r3
 800b1fe:	43db      	mvns	r3, r3
 800b200:	69ba      	ldr	r2, [r7, #24]
 800b202:	4013      	ands	r3, r2
 800b204:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	4a4e      	ldr	r2, [pc, #312]	; (800b344 <HAL_GPIO_Init+0x304>)
 800b20a:	4293      	cmp	r3, r2
 800b20c:	d025      	beq.n	800b25a <HAL_GPIO_Init+0x21a>
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	4a4d      	ldr	r2, [pc, #308]	; (800b348 <HAL_GPIO_Init+0x308>)
 800b212:	4293      	cmp	r3, r2
 800b214:	d01f      	beq.n	800b256 <HAL_GPIO_Init+0x216>
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	4a4c      	ldr	r2, [pc, #304]	; (800b34c <HAL_GPIO_Init+0x30c>)
 800b21a:	4293      	cmp	r3, r2
 800b21c:	d019      	beq.n	800b252 <HAL_GPIO_Init+0x212>
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	4a4b      	ldr	r2, [pc, #300]	; (800b350 <HAL_GPIO_Init+0x310>)
 800b222:	4293      	cmp	r3, r2
 800b224:	d013      	beq.n	800b24e <HAL_GPIO_Init+0x20e>
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	4a4a      	ldr	r2, [pc, #296]	; (800b354 <HAL_GPIO_Init+0x314>)
 800b22a:	4293      	cmp	r3, r2
 800b22c:	d00d      	beq.n	800b24a <HAL_GPIO_Init+0x20a>
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	4a49      	ldr	r2, [pc, #292]	; (800b358 <HAL_GPIO_Init+0x318>)
 800b232:	4293      	cmp	r3, r2
 800b234:	d007      	beq.n	800b246 <HAL_GPIO_Init+0x206>
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	4a48      	ldr	r2, [pc, #288]	; (800b35c <HAL_GPIO_Init+0x31c>)
 800b23a:	4293      	cmp	r3, r2
 800b23c:	d101      	bne.n	800b242 <HAL_GPIO_Init+0x202>
 800b23e:	2306      	movs	r3, #6
 800b240:	e00c      	b.n	800b25c <HAL_GPIO_Init+0x21c>
 800b242:	2307      	movs	r3, #7
 800b244:	e00a      	b.n	800b25c <HAL_GPIO_Init+0x21c>
 800b246:	2305      	movs	r3, #5
 800b248:	e008      	b.n	800b25c <HAL_GPIO_Init+0x21c>
 800b24a:	2304      	movs	r3, #4
 800b24c:	e006      	b.n	800b25c <HAL_GPIO_Init+0x21c>
 800b24e:	2303      	movs	r3, #3
 800b250:	e004      	b.n	800b25c <HAL_GPIO_Init+0x21c>
 800b252:	2302      	movs	r3, #2
 800b254:	e002      	b.n	800b25c <HAL_GPIO_Init+0x21c>
 800b256:	2301      	movs	r3, #1
 800b258:	e000      	b.n	800b25c <HAL_GPIO_Init+0x21c>
 800b25a:	2300      	movs	r3, #0
 800b25c:	69fa      	ldr	r2, [r7, #28]
 800b25e:	f002 0203 	and.w	r2, r2, #3
 800b262:	0092      	lsls	r2, r2, #2
 800b264:	4093      	lsls	r3, r2
 800b266:	69ba      	ldr	r2, [r7, #24]
 800b268:	4313      	orrs	r3, r2
 800b26a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b26c:	4934      	ldr	r1, [pc, #208]	; (800b340 <HAL_GPIO_Init+0x300>)
 800b26e:	69fb      	ldr	r3, [r7, #28]
 800b270:	089b      	lsrs	r3, r3, #2
 800b272:	3302      	adds	r3, #2
 800b274:	69ba      	ldr	r2, [r7, #24]
 800b276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b27a:	4b39      	ldr	r3, [pc, #228]	; (800b360 <HAL_GPIO_Init+0x320>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b280:	693b      	ldr	r3, [r7, #16]
 800b282:	43db      	mvns	r3, r3
 800b284:	69ba      	ldr	r2, [r7, #24]
 800b286:	4013      	ands	r3, r2
 800b288:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	685b      	ldr	r3, [r3, #4]
 800b28e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b292:	2b00      	cmp	r3, #0
 800b294:	d003      	beq.n	800b29e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800b296:	69ba      	ldr	r2, [r7, #24]
 800b298:	693b      	ldr	r3, [r7, #16]
 800b29a:	4313      	orrs	r3, r2
 800b29c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b29e:	4a30      	ldr	r2, [pc, #192]	; (800b360 <HAL_GPIO_Init+0x320>)
 800b2a0:	69bb      	ldr	r3, [r7, #24]
 800b2a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800b2a4:	4b2e      	ldr	r3, [pc, #184]	; (800b360 <HAL_GPIO_Init+0x320>)
 800b2a6:	685b      	ldr	r3, [r3, #4]
 800b2a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b2aa:	693b      	ldr	r3, [r7, #16]
 800b2ac:	43db      	mvns	r3, r3
 800b2ae:	69ba      	ldr	r2, [r7, #24]
 800b2b0:	4013      	ands	r3, r2
 800b2b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b2b4:	683b      	ldr	r3, [r7, #0]
 800b2b6:	685b      	ldr	r3, [r3, #4]
 800b2b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d003      	beq.n	800b2c8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800b2c0:	69ba      	ldr	r2, [r7, #24]
 800b2c2:	693b      	ldr	r3, [r7, #16]
 800b2c4:	4313      	orrs	r3, r2
 800b2c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b2c8:	4a25      	ldr	r2, [pc, #148]	; (800b360 <HAL_GPIO_Init+0x320>)
 800b2ca:	69bb      	ldr	r3, [r7, #24]
 800b2cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b2ce:	4b24      	ldr	r3, [pc, #144]	; (800b360 <HAL_GPIO_Init+0x320>)
 800b2d0:	689b      	ldr	r3, [r3, #8]
 800b2d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	43db      	mvns	r3, r3
 800b2d8:	69ba      	ldr	r2, [r7, #24]
 800b2da:	4013      	ands	r3, r2
 800b2dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	685b      	ldr	r3, [r3, #4]
 800b2e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	d003      	beq.n	800b2f2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800b2ea:	69ba      	ldr	r2, [r7, #24]
 800b2ec:	693b      	ldr	r3, [r7, #16]
 800b2ee:	4313      	orrs	r3, r2
 800b2f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b2f2:	4a1b      	ldr	r2, [pc, #108]	; (800b360 <HAL_GPIO_Init+0x320>)
 800b2f4:	69bb      	ldr	r3, [r7, #24]
 800b2f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b2f8:	4b19      	ldr	r3, [pc, #100]	; (800b360 <HAL_GPIO_Init+0x320>)
 800b2fa:	68db      	ldr	r3, [r3, #12]
 800b2fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b2fe:	693b      	ldr	r3, [r7, #16]
 800b300:	43db      	mvns	r3, r3
 800b302:	69ba      	ldr	r2, [r7, #24]
 800b304:	4013      	ands	r3, r2
 800b306:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b308:	683b      	ldr	r3, [r7, #0]
 800b30a:	685b      	ldr	r3, [r3, #4]
 800b30c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b310:	2b00      	cmp	r3, #0
 800b312:	d003      	beq.n	800b31c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800b314:	69ba      	ldr	r2, [r7, #24]
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	4313      	orrs	r3, r2
 800b31a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b31c:	4a10      	ldr	r2, [pc, #64]	; (800b360 <HAL_GPIO_Init+0x320>)
 800b31e:	69bb      	ldr	r3, [r7, #24]
 800b320:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b322:	69fb      	ldr	r3, [r7, #28]
 800b324:	3301      	adds	r3, #1
 800b326:	61fb      	str	r3, [r7, #28]
 800b328:	69fb      	ldr	r3, [r7, #28]
 800b32a:	2b0f      	cmp	r3, #15
 800b32c:	f67f ae96 	bls.w	800b05c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b330:	bf00      	nop
 800b332:	3724      	adds	r7, #36	; 0x24
 800b334:	46bd      	mov	sp, r7
 800b336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33a:	4770      	bx	lr
 800b33c:	40023800 	.word	0x40023800
 800b340:	40013800 	.word	0x40013800
 800b344:	40020000 	.word	0x40020000
 800b348:	40020400 	.word	0x40020400
 800b34c:	40020800 	.word	0x40020800
 800b350:	40020c00 	.word	0x40020c00
 800b354:	40021000 	.word	0x40021000
 800b358:	40021400 	.word	0x40021400
 800b35c:	40021800 	.word	0x40021800
 800b360:	40013c00 	.word	0x40013c00

0800b364 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b364:	b480      	push	{r7}
 800b366:	b085      	sub	sp, #20
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
 800b36c:	460b      	mov	r3, r1
 800b36e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	691a      	ldr	r2, [r3, #16]
 800b374:	887b      	ldrh	r3, [r7, #2]
 800b376:	4013      	ands	r3, r2
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d002      	beq.n	800b382 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b37c:	2301      	movs	r3, #1
 800b37e:	73fb      	strb	r3, [r7, #15]
 800b380:	e001      	b.n	800b386 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b382:	2300      	movs	r3, #0
 800b384:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b386:	7bfb      	ldrb	r3, [r7, #15]
}
 800b388:	4618      	mov	r0, r3
 800b38a:	3714      	adds	r7, #20
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr

0800b394 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b394:	b480      	push	{r7}
 800b396:	b083      	sub	sp, #12
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
 800b39c:	460b      	mov	r3, r1
 800b39e:	807b      	strh	r3, [r7, #2]
 800b3a0:	4613      	mov	r3, r2
 800b3a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b3a4:	787b      	ldrb	r3, [r7, #1]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d003      	beq.n	800b3b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b3aa:	887a      	ldrh	r2, [r7, #2]
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b3b0:	e003      	b.n	800b3ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b3b2:	887b      	ldrh	r3, [r7, #2]
 800b3b4:	041a      	lsls	r2, r3, #16
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	619a      	str	r2, [r3, #24]
}
 800b3ba:	bf00      	nop
 800b3bc:	370c      	adds	r7, #12
 800b3be:	46bd      	mov	sp, r7
 800b3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c4:	4770      	bx	lr

0800b3c6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b3c6:	b480      	push	{r7}
 800b3c8:	b083      	sub	sp, #12
 800b3ca:	af00      	add	r7, sp, #0
 800b3cc:	6078      	str	r0, [r7, #4]
 800b3ce:	460b      	mov	r3, r1
 800b3d0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	695a      	ldr	r2, [r3, #20]
 800b3d6:	887b      	ldrh	r3, [r7, #2]
 800b3d8:	401a      	ands	r2, r3
 800b3da:	887b      	ldrh	r3, [r7, #2]
 800b3dc:	429a      	cmp	r2, r3
 800b3de:	d104      	bne.n	800b3ea <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800b3e0:	887b      	ldrh	r3, [r7, #2]
 800b3e2:	041a      	lsls	r2, r3, #16
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800b3e8:	e002      	b.n	800b3f0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800b3ea:	887a      	ldrh	r2, [r7, #2]
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	619a      	str	r2, [r3, #24]
}
 800b3f0:	bf00      	nop
 800b3f2:	370c      	adds	r7, #12
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fa:	4770      	bx	lr

0800b3fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b084      	sub	sp, #16
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
 800b404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d101      	bne.n	800b410 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b40c:	2301      	movs	r3, #1
 800b40e:	e0ca      	b.n	800b5a6 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b410:	4b67      	ldr	r3, [pc, #412]	; (800b5b0 <HAL_RCC_ClockConfig+0x1b4>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	f003 030f 	and.w	r3, r3, #15
 800b418:	683a      	ldr	r2, [r7, #0]
 800b41a:	429a      	cmp	r2, r3
 800b41c:	d90c      	bls.n	800b438 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b41e:	4b64      	ldr	r3, [pc, #400]	; (800b5b0 <HAL_RCC_ClockConfig+0x1b4>)
 800b420:	683a      	ldr	r2, [r7, #0]
 800b422:	b2d2      	uxtb	r2, r2
 800b424:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b426:	4b62      	ldr	r3, [pc, #392]	; (800b5b0 <HAL_RCC_ClockConfig+0x1b4>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	f003 030f 	and.w	r3, r3, #15
 800b42e:	683a      	ldr	r2, [r7, #0]
 800b430:	429a      	cmp	r2, r3
 800b432:	d001      	beq.n	800b438 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b434:	2301      	movs	r3, #1
 800b436:	e0b6      	b.n	800b5a6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	f003 0302 	and.w	r3, r3, #2
 800b440:	2b00      	cmp	r3, #0
 800b442:	d020      	beq.n	800b486 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f003 0304 	and.w	r3, r3, #4
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d005      	beq.n	800b45c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b450:	4b58      	ldr	r3, [pc, #352]	; (800b5b4 <HAL_RCC_ClockConfig+0x1b8>)
 800b452:	689b      	ldr	r3, [r3, #8]
 800b454:	4a57      	ldr	r2, [pc, #348]	; (800b5b4 <HAL_RCC_ClockConfig+0x1b8>)
 800b456:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b45a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	f003 0308 	and.w	r3, r3, #8
 800b464:	2b00      	cmp	r3, #0
 800b466:	d005      	beq.n	800b474 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b468:	4b52      	ldr	r3, [pc, #328]	; (800b5b4 <HAL_RCC_ClockConfig+0x1b8>)
 800b46a:	689b      	ldr	r3, [r3, #8]
 800b46c:	4a51      	ldr	r2, [pc, #324]	; (800b5b4 <HAL_RCC_ClockConfig+0x1b8>)
 800b46e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b472:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b474:	4b4f      	ldr	r3, [pc, #316]	; (800b5b4 <HAL_RCC_ClockConfig+0x1b8>)
 800b476:	689b      	ldr	r3, [r3, #8]
 800b478:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	689b      	ldr	r3, [r3, #8]
 800b480:	494c      	ldr	r1, [pc, #304]	; (800b5b4 <HAL_RCC_ClockConfig+0x1b8>)
 800b482:	4313      	orrs	r3, r2
 800b484:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f003 0301 	and.w	r3, r3, #1
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d044      	beq.n	800b51c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	685b      	ldr	r3, [r3, #4]
 800b496:	2b01      	cmp	r3, #1
 800b498:	d107      	bne.n	800b4aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b49a:	4b46      	ldr	r3, [pc, #280]	; (800b5b4 <HAL_RCC_ClockConfig+0x1b8>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d119      	bne.n	800b4da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	e07d      	b.n	800b5a6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	685b      	ldr	r3, [r3, #4]
 800b4ae:	2b02      	cmp	r3, #2
 800b4b0:	d003      	beq.n	800b4ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b4b6:	2b03      	cmp	r3, #3
 800b4b8:	d107      	bne.n	800b4ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b4ba:	4b3e      	ldr	r3, [pc, #248]	; (800b5b4 <HAL_RCC_ClockConfig+0x1b8>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d109      	bne.n	800b4da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	e06d      	b.n	800b5a6 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b4ca:	4b3a      	ldr	r3, [pc, #232]	; (800b5b4 <HAL_RCC_ClockConfig+0x1b8>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	f003 0302 	and.w	r3, r3, #2
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d101      	bne.n	800b4da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	e065      	b.n	800b5a6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b4da:	4b36      	ldr	r3, [pc, #216]	; (800b5b4 <HAL_RCC_ClockConfig+0x1b8>)
 800b4dc:	689b      	ldr	r3, [r3, #8]
 800b4de:	f023 0203 	bic.w	r2, r3, #3
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	685b      	ldr	r3, [r3, #4]
 800b4e6:	4933      	ldr	r1, [pc, #204]	; (800b5b4 <HAL_RCC_ClockConfig+0x1b8>)
 800b4e8:	4313      	orrs	r3, r2
 800b4ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b4ec:	f7fd fc84 	bl	8008df8 <HAL_GetTick>
 800b4f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b4f2:	e00a      	b.n	800b50a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b4f4:	f7fd fc80 	bl	8008df8 <HAL_GetTick>
 800b4f8:	4602      	mov	r2, r0
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	1ad3      	subs	r3, r2, r3
 800b4fe:	f241 3288 	movw	r2, #5000	; 0x1388
 800b502:	4293      	cmp	r3, r2
 800b504:	d901      	bls.n	800b50a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b506:	2303      	movs	r3, #3
 800b508:	e04d      	b.n	800b5a6 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b50a:	4b2a      	ldr	r3, [pc, #168]	; (800b5b4 <HAL_RCC_ClockConfig+0x1b8>)
 800b50c:	689b      	ldr	r3, [r3, #8]
 800b50e:	f003 020c 	and.w	r2, r3, #12
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	685b      	ldr	r3, [r3, #4]
 800b516:	009b      	lsls	r3, r3, #2
 800b518:	429a      	cmp	r2, r3
 800b51a:	d1eb      	bne.n	800b4f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b51c:	4b24      	ldr	r3, [pc, #144]	; (800b5b0 <HAL_RCC_ClockConfig+0x1b4>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f003 030f 	and.w	r3, r3, #15
 800b524:	683a      	ldr	r2, [r7, #0]
 800b526:	429a      	cmp	r2, r3
 800b528:	d20c      	bcs.n	800b544 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b52a:	4b21      	ldr	r3, [pc, #132]	; (800b5b0 <HAL_RCC_ClockConfig+0x1b4>)
 800b52c:	683a      	ldr	r2, [r7, #0]
 800b52e:	b2d2      	uxtb	r2, r2
 800b530:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b532:	4b1f      	ldr	r3, [pc, #124]	; (800b5b0 <HAL_RCC_ClockConfig+0x1b4>)
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	f003 030f 	and.w	r3, r3, #15
 800b53a:	683a      	ldr	r2, [r7, #0]
 800b53c:	429a      	cmp	r2, r3
 800b53e:	d001      	beq.n	800b544 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b540:	2301      	movs	r3, #1
 800b542:	e030      	b.n	800b5a6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	f003 0304 	and.w	r3, r3, #4
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d008      	beq.n	800b562 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b550:	4b18      	ldr	r3, [pc, #96]	; (800b5b4 <HAL_RCC_ClockConfig+0x1b8>)
 800b552:	689b      	ldr	r3, [r3, #8]
 800b554:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	68db      	ldr	r3, [r3, #12]
 800b55c:	4915      	ldr	r1, [pc, #84]	; (800b5b4 <HAL_RCC_ClockConfig+0x1b8>)
 800b55e:	4313      	orrs	r3, r2
 800b560:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f003 0308 	and.w	r3, r3, #8
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d009      	beq.n	800b582 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b56e:	4b11      	ldr	r3, [pc, #68]	; (800b5b4 <HAL_RCC_ClockConfig+0x1b8>)
 800b570:	689b      	ldr	r3, [r3, #8]
 800b572:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	691b      	ldr	r3, [r3, #16]
 800b57a:	00db      	lsls	r3, r3, #3
 800b57c:	490d      	ldr	r1, [pc, #52]	; (800b5b4 <HAL_RCC_ClockConfig+0x1b8>)
 800b57e:	4313      	orrs	r3, r2
 800b580:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b582:	f000 f851 	bl	800b628 <HAL_RCC_GetSysClockFreq>
 800b586:	4601      	mov	r1, r0
 800b588:	4b0a      	ldr	r3, [pc, #40]	; (800b5b4 <HAL_RCC_ClockConfig+0x1b8>)
 800b58a:	689b      	ldr	r3, [r3, #8]
 800b58c:	091b      	lsrs	r3, r3, #4
 800b58e:	f003 030f 	and.w	r3, r3, #15
 800b592:	4a09      	ldr	r2, [pc, #36]	; (800b5b8 <HAL_RCC_ClockConfig+0x1bc>)
 800b594:	5cd3      	ldrb	r3, [r2, r3]
 800b596:	fa21 f303 	lsr.w	r3, r1, r3
 800b59a:	4a08      	ldr	r2, [pc, #32]	; (800b5bc <HAL_RCC_ClockConfig+0x1c0>)
 800b59c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800b59e:	2000      	movs	r0, #0
 800b5a0:	f7fd fbe6 	bl	8008d70 <HAL_InitTick>

  return HAL_OK;
 800b5a4:	2300      	movs	r3, #0
}
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	3710      	adds	r7, #16
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}
 800b5ae:	bf00      	nop
 800b5b0:	40023c00 	.word	0x40023c00
 800b5b4:	40023800 	.word	0x40023800
 800b5b8:	0802652c 	.word	0x0802652c
 800b5bc:	20000038 	.word	0x20000038

0800b5c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b5c0:	b480      	push	{r7}
 800b5c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b5c4:	4b03      	ldr	r3, [pc, #12]	; (800b5d4 <HAL_RCC_GetHCLKFreq+0x14>)
 800b5c6:	681b      	ldr	r3, [r3, #0]
}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d0:	4770      	bx	lr
 800b5d2:	bf00      	nop
 800b5d4:	20000038 	.word	0x20000038

0800b5d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b5dc:	f7ff fff0 	bl	800b5c0 <HAL_RCC_GetHCLKFreq>
 800b5e0:	4601      	mov	r1, r0
 800b5e2:	4b05      	ldr	r3, [pc, #20]	; (800b5f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b5e4:	689b      	ldr	r3, [r3, #8]
 800b5e6:	0a9b      	lsrs	r3, r3, #10
 800b5e8:	f003 0307 	and.w	r3, r3, #7
 800b5ec:	4a03      	ldr	r2, [pc, #12]	; (800b5fc <HAL_RCC_GetPCLK1Freq+0x24>)
 800b5ee:	5cd3      	ldrb	r3, [r2, r3]
 800b5f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	bd80      	pop	{r7, pc}
 800b5f8:	40023800 	.word	0x40023800
 800b5fc:	0802653c 	.word	0x0802653c

0800b600 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b604:	f7ff ffdc 	bl	800b5c0 <HAL_RCC_GetHCLKFreq>
 800b608:	4601      	mov	r1, r0
 800b60a:	4b05      	ldr	r3, [pc, #20]	; (800b620 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b60c:	689b      	ldr	r3, [r3, #8]
 800b60e:	0b5b      	lsrs	r3, r3, #13
 800b610:	f003 0307 	and.w	r3, r3, #7
 800b614:	4a03      	ldr	r2, [pc, #12]	; (800b624 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b616:	5cd3      	ldrb	r3, [r2, r3]
 800b618:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	bd80      	pop	{r7, pc}
 800b620:	40023800 	.word	0x40023800
 800b624:	0802653c 	.word	0x0802653c

0800b628 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b628:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b62a:	b087      	sub	sp, #28
 800b62c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800b62e:	2300      	movs	r3, #0
 800b630:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800b632:	2300      	movs	r3, #0
 800b634:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800b636:	2300      	movs	r3, #0
 800b638:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800b63a:	2300      	movs	r3, #0
 800b63c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800b63e:	2300      	movs	r3, #0
 800b640:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b642:	4bc6      	ldr	r3, [pc, #792]	; (800b95c <HAL_RCC_GetSysClockFreq+0x334>)
 800b644:	689b      	ldr	r3, [r3, #8]
 800b646:	f003 030c 	and.w	r3, r3, #12
 800b64a:	2b0c      	cmp	r3, #12
 800b64c:	f200 817e 	bhi.w	800b94c <HAL_RCC_GetSysClockFreq+0x324>
 800b650:	a201      	add	r2, pc, #4	; (adr r2, 800b658 <HAL_RCC_GetSysClockFreq+0x30>)
 800b652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b656:	bf00      	nop
 800b658:	0800b68d 	.word	0x0800b68d
 800b65c:	0800b94d 	.word	0x0800b94d
 800b660:	0800b94d 	.word	0x0800b94d
 800b664:	0800b94d 	.word	0x0800b94d
 800b668:	0800b693 	.word	0x0800b693
 800b66c:	0800b94d 	.word	0x0800b94d
 800b670:	0800b94d 	.word	0x0800b94d
 800b674:	0800b94d 	.word	0x0800b94d
 800b678:	0800b699 	.word	0x0800b699
 800b67c:	0800b94d 	.word	0x0800b94d
 800b680:	0800b94d 	.word	0x0800b94d
 800b684:	0800b94d 	.word	0x0800b94d
 800b688:	0800b7f5 	.word	0x0800b7f5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b68c:	4bb4      	ldr	r3, [pc, #720]	; (800b960 <HAL_RCC_GetSysClockFreq+0x338>)
 800b68e:	613b      	str	r3, [r7, #16]
       break;
 800b690:	e15f      	b.n	800b952 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b692:	4bb4      	ldr	r3, [pc, #720]	; (800b964 <HAL_RCC_GetSysClockFreq+0x33c>)
 800b694:	613b      	str	r3, [r7, #16]
      break;
 800b696:	e15c      	b.n	800b952 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b698:	4bb0      	ldr	r3, [pc, #704]	; (800b95c <HAL_RCC_GetSysClockFreq+0x334>)
 800b69a:	685b      	ldr	r3, [r3, #4]
 800b69c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b6a0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b6a2:	4bae      	ldr	r3, [pc, #696]	; (800b95c <HAL_RCC_GetSysClockFreq+0x334>)
 800b6a4:	685b      	ldr	r3, [r3, #4]
 800b6a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d04a      	beq.n	800b744 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b6ae:	4bab      	ldr	r3, [pc, #684]	; (800b95c <HAL_RCC_GetSysClockFreq+0x334>)
 800b6b0:	685b      	ldr	r3, [r3, #4]
 800b6b2:	099b      	lsrs	r3, r3, #6
 800b6b4:	f04f 0400 	mov.w	r4, #0
 800b6b8:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b6bc:	f04f 0200 	mov.w	r2, #0
 800b6c0:	ea03 0501 	and.w	r5, r3, r1
 800b6c4:	ea04 0602 	and.w	r6, r4, r2
 800b6c8:	4629      	mov	r1, r5
 800b6ca:	4632      	mov	r2, r6
 800b6cc:	f04f 0300 	mov.w	r3, #0
 800b6d0:	f04f 0400 	mov.w	r4, #0
 800b6d4:	0154      	lsls	r4, r2, #5
 800b6d6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b6da:	014b      	lsls	r3, r1, #5
 800b6dc:	4619      	mov	r1, r3
 800b6de:	4622      	mov	r2, r4
 800b6e0:	1b49      	subs	r1, r1, r5
 800b6e2:	eb62 0206 	sbc.w	r2, r2, r6
 800b6e6:	f04f 0300 	mov.w	r3, #0
 800b6ea:	f04f 0400 	mov.w	r4, #0
 800b6ee:	0194      	lsls	r4, r2, #6
 800b6f0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b6f4:	018b      	lsls	r3, r1, #6
 800b6f6:	1a5b      	subs	r3, r3, r1
 800b6f8:	eb64 0402 	sbc.w	r4, r4, r2
 800b6fc:	f04f 0100 	mov.w	r1, #0
 800b700:	f04f 0200 	mov.w	r2, #0
 800b704:	00e2      	lsls	r2, r4, #3
 800b706:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b70a:	00d9      	lsls	r1, r3, #3
 800b70c:	460b      	mov	r3, r1
 800b70e:	4614      	mov	r4, r2
 800b710:	195b      	adds	r3, r3, r5
 800b712:	eb44 0406 	adc.w	r4, r4, r6
 800b716:	f04f 0100 	mov.w	r1, #0
 800b71a:	f04f 0200 	mov.w	r2, #0
 800b71e:	0262      	lsls	r2, r4, #9
 800b720:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800b724:	0259      	lsls	r1, r3, #9
 800b726:	460b      	mov	r3, r1
 800b728:	4614      	mov	r4, r2
 800b72a:	4618      	mov	r0, r3
 800b72c:	4621      	mov	r1, r4
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	f04f 0400 	mov.w	r4, #0
 800b734:	461a      	mov	r2, r3
 800b736:	4623      	mov	r3, r4
 800b738:	f7fd f978 	bl	8008a2c <__aeabi_uldivmod>
 800b73c:	4603      	mov	r3, r0
 800b73e:	460c      	mov	r4, r1
 800b740:	617b      	str	r3, [r7, #20]
 800b742:	e049      	b.n	800b7d8 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b744:	4b85      	ldr	r3, [pc, #532]	; (800b95c <HAL_RCC_GetSysClockFreq+0x334>)
 800b746:	685b      	ldr	r3, [r3, #4]
 800b748:	099b      	lsrs	r3, r3, #6
 800b74a:	f04f 0400 	mov.w	r4, #0
 800b74e:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b752:	f04f 0200 	mov.w	r2, #0
 800b756:	ea03 0501 	and.w	r5, r3, r1
 800b75a:	ea04 0602 	and.w	r6, r4, r2
 800b75e:	4629      	mov	r1, r5
 800b760:	4632      	mov	r2, r6
 800b762:	f04f 0300 	mov.w	r3, #0
 800b766:	f04f 0400 	mov.w	r4, #0
 800b76a:	0154      	lsls	r4, r2, #5
 800b76c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b770:	014b      	lsls	r3, r1, #5
 800b772:	4619      	mov	r1, r3
 800b774:	4622      	mov	r2, r4
 800b776:	1b49      	subs	r1, r1, r5
 800b778:	eb62 0206 	sbc.w	r2, r2, r6
 800b77c:	f04f 0300 	mov.w	r3, #0
 800b780:	f04f 0400 	mov.w	r4, #0
 800b784:	0194      	lsls	r4, r2, #6
 800b786:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b78a:	018b      	lsls	r3, r1, #6
 800b78c:	1a5b      	subs	r3, r3, r1
 800b78e:	eb64 0402 	sbc.w	r4, r4, r2
 800b792:	f04f 0100 	mov.w	r1, #0
 800b796:	f04f 0200 	mov.w	r2, #0
 800b79a:	00e2      	lsls	r2, r4, #3
 800b79c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b7a0:	00d9      	lsls	r1, r3, #3
 800b7a2:	460b      	mov	r3, r1
 800b7a4:	4614      	mov	r4, r2
 800b7a6:	195b      	adds	r3, r3, r5
 800b7a8:	eb44 0406 	adc.w	r4, r4, r6
 800b7ac:	f04f 0100 	mov.w	r1, #0
 800b7b0:	f04f 0200 	mov.w	r2, #0
 800b7b4:	02a2      	lsls	r2, r4, #10
 800b7b6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800b7ba:	0299      	lsls	r1, r3, #10
 800b7bc:	460b      	mov	r3, r1
 800b7be:	4614      	mov	r4, r2
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	4621      	mov	r1, r4
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	f04f 0400 	mov.w	r4, #0
 800b7ca:	461a      	mov	r2, r3
 800b7cc:	4623      	mov	r3, r4
 800b7ce:	f7fd f92d 	bl	8008a2c <__aeabi_uldivmod>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	460c      	mov	r4, r1
 800b7d6:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b7d8:	4b60      	ldr	r3, [pc, #384]	; (800b95c <HAL_RCC_GetSysClockFreq+0x334>)
 800b7da:	685b      	ldr	r3, [r3, #4]
 800b7dc:	0c1b      	lsrs	r3, r3, #16
 800b7de:	f003 0303 	and.w	r3, r3, #3
 800b7e2:	3301      	adds	r3, #1
 800b7e4:	005b      	lsls	r3, r3, #1
 800b7e6:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800b7e8:	697a      	ldr	r2, [r7, #20]
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800b7f0:	613b      	str	r3, [r7, #16]
      break;
 800b7f2:	e0ae      	b.n	800b952 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b7f4:	4b59      	ldr	r3, [pc, #356]	; (800b95c <HAL_RCC_GetSysClockFreq+0x334>)
 800b7f6:	685b      	ldr	r3, [r3, #4]
 800b7f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b7fc:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b7fe:	4b57      	ldr	r3, [pc, #348]	; (800b95c <HAL_RCC_GetSysClockFreq+0x334>)
 800b800:	685b      	ldr	r3, [r3, #4]
 800b802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b806:	2b00      	cmp	r3, #0
 800b808:	d04a      	beq.n	800b8a0 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b80a:	4b54      	ldr	r3, [pc, #336]	; (800b95c <HAL_RCC_GetSysClockFreq+0x334>)
 800b80c:	685b      	ldr	r3, [r3, #4]
 800b80e:	099b      	lsrs	r3, r3, #6
 800b810:	f04f 0400 	mov.w	r4, #0
 800b814:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b818:	f04f 0200 	mov.w	r2, #0
 800b81c:	ea03 0501 	and.w	r5, r3, r1
 800b820:	ea04 0602 	and.w	r6, r4, r2
 800b824:	4629      	mov	r1, r5
 800b826:	4632      	mov	r2, r6
 800b828:	f04f 0300 	mov.w	r3, #0
 800b82c:	f04f 0400 	mov.w	r4, #0
 800b830:	0154      	lsls	r4, r2, #5
 800b832:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b836:	014b      	lsls	r3, r1, #5
 800b838:	4619      	mov	r1, r3
 800b83a:	4622      	mov	r2, r4
 800b83c:	1b49      	subs	r1, r1, r5
 800b83e:	eb62 0206 	sbc.w	r2, r2, r6
 800b842:	f04f 0300 	mov.w	r3, #0
 800b846:	f04f 0400 	mov.w	r4, #0
 800b84a:	0194      	lsls	r4, r2, #6
 800b84c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b850:	018b      	lsls	r3, r1, #6
 800b852:	1a5b      	subs	r3, r3, r1
 800b854:	eb64 0402 	sbc.w	r4, r4, r2
 800b858:	f04f 0100 	mov.w	r1, #0
 800b85c:	f04f 0200 	mov.w	r2, #0
 800b860:	00e2      	lsls	r2, r4, #3
 800b862:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b866:	00d9      	lsls	r1, r3, #3
 800b868:	460b      	mov	r3, r1
 800b86a:	4614      	mov	r4, r2
 800b86c:	195b      	adds	r3, r3, r5
 800b86e:	eb44 0406 	adc.w	r4, r4, r6
 800b872:	f04f 0100 	mov.w	r1, #0
 800b876:	f04f 0200 	mov.w	r2, #0
 800b87a:	0262      	lsls	r2, r4, #9
 800b87c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800b880:	0259      	lsls	r1, r3, #9
 800b882:	460b      	mov	r3, r1
 800b884:	4614      	mov	r4, r2
 800b886:	4618      	mov	r0, r3
 800b888:	4621      	mov	r1, r4
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	f04f 0400 	mov.w	r4, #0
 800b890:	461a      	mov	r2, r3
 800b892:	4623      	mov	r3, r4
 800b894:	f7fd f8ca 	bl	8008a2c <__aeabi_uldivmod>
 800b898:	4603      	mov	r3, r0
 800b89a:	460c      	mov	r4, r1
 800b89c:	617b      	str	r3, [r7, #20]
 800b89e:	e049      	b.n	800b934 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b8a0:	4b2e      	ldr	r3, [pc, #184]	; (800b95c <HAL_RCC_GetSysClockFreq+0x334>)
 800b8a2:	685b      	ldr	r3, [r3, #4]
 800b8a4:	099b      	lsrs	r3, r3, #6
 800b8a6:	f04f 0400 	mov.w	r4, #0
 800b8aa:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b8ae:	f04f 0200 	mov.w	r2, #0
 800b8b2:	ea03 0501 	and.w	r5, r3, r1
 800b8b6:	ea04 0602 	and.w	r6, r4, r2
 800b8ba:	4629      	mov	r1, r5
 800b8bc:	4632      	mov	r2, r6
 800b8be:	f04f 0300 	mov.w	r3, #0
 800b8c2:	f04f 0400 	mov.w	r4, #0
 800b8c6:	0154      	lsls	r4, r2, #5
 800b8c8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b8cc:	014b      	lsls	r3, r1, #5
 800b8ce:	4619      	mov	r1, r3
 800b8d0:	4622      	mov	r2, r4
 800b8d2:	1b49      	subs	r1, r1, r5
 800b8d4:	eb62 0206 	sbc.w	r2, r2, r6
 800b8d8:	f04f 0300 	mov.w	r3, #0
 800b8dc:	f04f 0400 	mov.w	r4, #0
 800b8e0:	0194      	lsls	r4, r2, #6
 800b8e2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b8e6:	018b      	lsls	r3, r1, #6
 800b8e8:	1a5b      	subs	r3, r3, r1
 800b8ea:	eb64 0402 	sbc.w	r4, r4, r2
 800b8ee:	f04f 0100 	mov.w	r1, #0
 800b8f2:	f04f 0200 	mov.w	r2, #0
 800b8f6:	00e2      	lsls	r2, r4, #3
 800b8f8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b8fc:	00d9      	lsls	r1, r3, #3
 800b8fe:	460b      	mov	r3, r1
 800b900:	4614      	mov	r4, r2
 800b902:	195b      	adds	r3, r3, r5
 800b904:	eb44 0406 	adc.w	r4, r4, r6
 800b908:	f04f 0100 	mov.w	r1, #0
 800b90c:	f04f 0200 	mov.w	r2, #0
 800b910:	02a2      	lsls	r2, r4, #10
 800b912:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800b916:	0299      	lsls	r1, r3, #10
 800b918:	460b      	mov	r3, r1
 800b91a:	4614      	mov	r4, r2
 800b91c:	4618      	mov	r0, r3
 800b91e:	4621      	mov	r1, r4
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	f04f 0400 	mov.w	r4, #0
 800b926:	461a      	mov	r2, r3
 800b928:	4623      	mov	r3, r4
 800b92a:	f7fd f87f 	bl	8008a2c <__aeabi_uldivmod>
 800b92e:	4603      	mov	r3, r0
 800b930:	460c      	mov	r4, r1
 800b932:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800b934:	4b09      	ldr	r3, [pc, #36]	; (800b95c <HAL_RCC_GetSysClockFreq+0x334>)
 800b936:	685b      	ldr	r3, [r3, #4]
 800b938:	0f1b      	lsrs	r3, r3, #28
 800b93a:	f003 0307 	and.w	r3, r3, #7
 800b93e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 800b940:	697a      	ldr	r2, [r7, #20]
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	fbb2 f3f3 	udiv	r3, r2, r3
 800b948:	613b      	str	r3, [r7, #16]
      break;
 800b94a:	e002      	b.n	800b952 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b94c:	4b04      	ldr	r3, [pc, #16]	; (800b960 <HAL_RCC_GetSysClockFreq+0x338>)
 800b94e:	613b      	str	r3, [r7, #16]
      break;
 800b950:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b952:	693b      	ldr	r3, [r7, #16]
}
 800b954:	4618      	mov	r0, r3
 800b956:	371c      	adds	r7, #28
 800b958:	46bd      	mov	sp, r7
 800b95a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b95c:	40023800 	.word	0x40023800
 800b960:	00f42400 	.word	0x00f42400
 800b964:	007a1200 	.word	0x007a1200

0800b968 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	b086      	sub	sp, #24
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b970:	2300      	movs	r3, #0
 800b972:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	f003 0301 	and.w	r3, r3, #1
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	f000 8083 	beq.w	800ba88 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b982:	4b95      	ldr	r3, [pc, #596]	; (800bbd8 <HAL_RCC_OscConfig+0x270>)
 800b984:	689b      	ldr	r3, [r3, #8]
 800b986:	f003 030c 	and.w	r3, r3, #12
 800b98a:	2b04      	cmp	r3, #4
 800b98c:	d019      	beq.n	800b9c2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b98e:	4b92      	ldr	r3, [pc, #584]	; (800bbd8 <HAL_RCC_OscConfig+0x270>)
 800b990:	689b      	ldr	r3, [r3, #8]
 800b992:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b996:	2b08      	cmp	r3, #8
 800b998:	d106      	bne.n	800b9a8 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b99a:	4b8f      	ldr	r3, [pc, #572]	; (800bbd8 <HAL_RCC_OscConfig+0x270>)
 800b99c:	685b      	ldr	r3, [r3, #4]
 800b99e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b9a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b9a6:	d00c      	beq.n	800b9c2 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b9a8:	4b8b      	ldr	r3, [pc, #556]	; (800bbd8 <HAL_RCC_OscConfig+0x270>)
 800b9aa:	689b      	ldr	r3, [r3, #8]
 800b9ac:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b9b0:	2b0c      	cmp	r3, #12
 800b9b2:	d112      	bne.n	800b9da <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b9b4:	4b88      	ldr	r3, [pc, #544]	; (800bbd8 <HAL_RCC_OscConfig+0x270>)
 800b9b6:	685b      	ldr	r3, [r3, #4]
 800b9b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b9bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b9c0:	d10b      	bne.n	800b9da <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b9c2:	4b85      	ldr	r3, [pc, #532]	; (800bbd8 <HAL_RCC_OscConfig+0x270>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d05b      	beq.n	800ba86 <HAL_RCC_OscConfig+0x11e>
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	685b      	ldr	r3, [r3, #4]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d157      	bne.n	800ba86 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	e216      	b.n	800be08 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	685b      	ldr	r3, [r3, #4]
 800b9de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9e2:	d106      	bne.n	800b9f2 <HAL_RCC_OscConfig+0x8a>
 800b9e4:	4b7c      	ldr	r3, [pc, #496]	; (800bbd8 <HAL_RCC_OscConfig+0x270>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	4a7b      	ldr	r2, [pc, #492]	; (800bbd8 <HAL_RCC_OscConfig+0x270>)
 800b9ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b9ee:	6013      	str	r3, [r2, #0]
 800b9f0:	e01d      	b.n	800ba2e <HAL_RCC_OscConfig+0xc6>
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	685b      	ldr	r3, [r3, #4]
 800b9f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b9fa:	d10c      	bne.n	800ba16 <HAL_RCC_OscConfig+0xae>
 800b9fc:	4b76      	ldr	r3, [pc, #472]	; (800bbd8 <HAL_RCC_OscConfig+0x270>)
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	4a75      	ldr	r2, [pc, #468]	; (800bbd8 <HAL_RCC_OscConfig+0x270>)
 800ba02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ba06:	6013      	str	r3, [r2, #0]
 800ba08:	4b73      	ldr	r3, [pc, #460]	; (800bbd8 <HAL_RCC_OscConfig+0x270>)
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	4a72      	ldr	r2, [pc, #456]	; (800bbd8 <HAL_RCC_OscConfig+0x270>)
 800ba0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ba12:	6013      	str	r3, [r2, #0]
 800ba14:	e00b      	b.n	800ba2e <HAL_RCC_OscConfig+0xc6>
 800ba16:	4b70      	ldr	r3, [pc, #448]	; (800bbd8 <HAL_RCC_OscConfig+0x270>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	4a6f      	ldr	r2, [pc, #444]	; (800bbd8 <HAL_RCC_OscConfig+0x270>)
 800ba1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ba20:	6013      	str	r3, [r2, #0]
 800ba22:	4b6d      	ldr	r3, [pc, #436]	; (800bbd8 <HAL_RCC_OscConfig+0x270>)
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	4a6c      	ldr	r2, [pc, #432]	; (800bbd8 <HAL_RCC_OscConfig+0x270>)
 800ba28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ba2c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	685b      	ldr	r3, [r3, #4]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d013      	beq.n	800ba5e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba36:	f7fd f9df 	bl	8008df8 <HAL_GetTick>
 800ba3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ba3c:	e008      	b.n	800ba50 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ba3e:	f7fd f9db 	bl	8008df8 <HAL_GetTick>
 800ba42:	4602      	mov	r2, r0
 800ba44:	693b      	ldr	r3, [r7, #16]
 800ba46:	1ad3      	subs	r3, r2, r3
 800ba48:	2b64      	cmp	r3, #100	; 0x64
 800ba4a:	d901      	bls.n	800ba50 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800ba4c:	2303      	movs	r3, #3
 800ba4e:	e1db      	b.n	800be08 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ba50:	4b61      	ldr	r3, [pc, #388]	; (800bbd8 <HAL_RCC_OscConfig+0x270>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d0f0      	beq.n	800ba3e <HAL_RCC_OscConfig+0xd6>
 800ba5c:	e014      	b.n	800ba88 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba5e:	f7fd f9cb 	bl	8008df8 <HAL_GetTick>
 800ba62:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ba64:	e008      	b.n	800ba78 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ba66:	f7fd f9c7 	bl	8008df8 <HAL_GetTick>
 800ba6a:	4602      	mov	r2, r0
 800ba6c:	693b      	ldr	r3, [r7, #16]
 800ba6e:	1ad3      	subs	r3, r2, r3
 800ba70:	2b64      	cmp	r3, #100	; 0x64
 800ba72:	d901      	bls.n	800ba78 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 800ba74:	2303      	movs	r3, #3
 800ba76:	e1c7      	b.n	800be08 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ba78:	4b57      	ldr	r3, [pc, #348]	; (800bbd8 <HAL_RCC_OscConfig+0x270>)
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d1f0      	bne.n	800ba66 <HAL_RCC_OscConfig+0xfe>
 800ba84:	e000      	b.n	800ba88 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ba86:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	f003 0302 	and.w	r3, r3, #2
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d06f      	beq.n	800bb74 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800ba94:	4b50      	ldr	r3, [pc, #320]	; (800bbd8 <HAL_RCC_OscConfig+0x270>)
 800ba96:	689b      	ldr	r3, [r3, #8]
 800ba98:	f003 030c 	and.w	r3, r3, #12
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d017      	beq.n	800bad0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800baa0:	4b4d      	ldr	r3, [pc, #308]	; (800bbd8 <HAL_RCC_OscConfig+0x270>)
 800baa2:	689b      	ldr	r3, [r3, #8]
 800baa4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800baa8:	2b08      	cmp	r3, #8
 800baaa:	d105      	bne.n	800bab8 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800baac:	4b4a      	ldr	r3, [pc, #296]	; (800bbd8 <HAL_RCC_OscConfig+0x270>)
 800baae:	685b      	ldr	r3, [r3, #4]
 800bab0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d00b      	beq.n	800bad0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bab8:	4b47      	ldr	r3, [pc, #284]	; (800bbd8 <HAL_RCC_OscConfig+0x270>)
 800baba:	689b      	ldr	r3, [r3, #8]
 800babc:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800bac0:	2b0c      	cmp	r3, #12
 800bac2:	d11c      	bne.n	800bafe <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bac4:	4b44      	ldr	r3, [pc, #272]	; (800bbd8 <HAL_RCC_OscConfig+0x270>)
 800bac6:	685b      	ldr	r3, [r3, #4]
 800bac8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d116      	bne.n	800bafe <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bad0:	4b41      	ldr	r3, [pc, #260]	; (800bbd8 <HAL_RCC_OscConfig+0x270>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	f003 0302 	and.w	r3, r3, #2
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d005      	beq.n	800bae8 <HAL_RCC_OscConfig+0x180>
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	68db      	ldr	r3, [r3, #12]
 800bae0:	2b01      	cmp	r3, #1
 800bae2:	d001      	beq.n	800bae8 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 800bae4:	2301      	movs	r3, #1
 800bae6:	e18f      	b.n	800be08 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bae8:	4b3b      	ldr	r3, [pc, #236]	; (800bbd8 <HAL_RCC_OscConfig+0x270>)
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	691b      	ldr	r3, [r3, #16]
 800baf4:	00db      	lsls	r3, r3, #3
 800baf6:	4938      	ldr	r1, [pc, #224]	; (800bbd8 <HAL_RCC_OscConfig+0x270>)
 800baf8:	4313      	orrs	r3, r2
 800bafa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bafc:	e03a      	b.n	800bb74 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	68db      	ldr	r3, [r3, #12]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d020      	beq.n	800bb48 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bb06:	4b35      	ldr	r3, [pc, #212]	; (800bbdc <HAL_RCC_OscConfig+0x274>)
 800bb08:	2201      	movs	r2, #1
 800bb0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb0c:	f7fd f974 	bl	8008df8 <HAL_GetTick>
 800bb10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bb12:	e008      	b.n	800bb26 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bb14:	f7fd f970 	bl	8008df8 <HAL_GetTick>
 800bb18:	4602      	mov	r2, r0
 800bb1a:	693b      	ldr	r3, [r7, #16]
 800bb1c:	1ad3      	subs	r3, r2, r3
 800bb1e:	2b02      	cmp	r3, #2
 800bb20:	d901      	bls.n	800bb26 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800bb22:	2303      	movs	r3, #3
 800bb24:	e170      	b.n	800be08 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bb26:	4b2c      	ldr	r3, [pc, #176]	; (800bbd8 <HAL_RCC_OscConfig+0x270>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	f003 0302 	and.w	r3, r3, #2
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d0f0      	beq.n	800bb14 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bb32:	4b29      	ldr	r3, [pc, #164]	; (800bbd8 <HAL_RCC_OscConfig+0x270>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	691b      	ldr	r3, [r3, #16]
 800bb3e:	00db      	lsls	r3, r3, #3
 800bb40:	4925      	ldr	r1, [pc, #148]	; (800bbd8 <HAL_RCC_OscConfig+0x270>)
 800bb42:	4313      	orrs	r3, r2
 800bb44:	600b      	str	r3, [r1, #0]
 800bb46:	e015      	b.n	800bb74 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bb48:	4b24      	ldr	r3, [pc, #144]	; (800bbdc <HAL_RCC_OscConfig+0x274>)
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb4e:	f7fd f953 	bl	8008df8 <HAL_GetTick>
 800bb52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bb54:	e008      	b.n	800bb68 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bb56:	f7fd f94f 	bl	8008df8 <HAL_GetTick>
 800bb5a:	4602      	mov	r2, r0
 800bb5c:	693b      	ldr	r3, [r7, #16]
 800bb5e:	1ad3      	subs	r3, r2, r3
 800bb60:	2b02      	cmp	r3, #2
 800bb62:	d901      	bls.n	800bb68 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800bb64:	2303      	movs	r3, #3
 800bb66:	e14f      	b.n	800be08 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bb68:	4b1b      	ldr	r3, [pc, #108]	; (800bbd8 <HAL_RCC_OscConfig+0x270>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f003 0302 	and.w	r3, r3, #2
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d1f0      	bne.n	800bb56 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	f003 0308 	and.w	r3, r3, #8
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d037      	beq.n	800bbf0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	695b      	ldr	r3, [r3, #20]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d016      	beq.n	800bbb6 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bb88:	4b15      	ldr	r3, [pc, #84]	; (800bbe0 <HAL_RCC_OscConfig+0x278>)
 800bb8a:	2201      	movs	r2, #1
 800bb8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb8e:	f7fd f933 	bl	8008df8 <HAL_GetTick>
 800bb92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bb94:	e008      	b.n	800bba8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bb96:	f7fd f92f 	bl	8008df8 <HAL_GetTick>
 800bb9a:	4602      	mov	r2, r0
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	1ad3      	subs	r3, r2, r3
 800bba0:	2b02      	cmp	r3, #2
 800bba2:	d901      	bls.n	800bba8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800bba4:	2303      	movs	r3, #3
 800bba6:	e12f      	b.n	800be08 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bba8:	4b0b      	ldr	r3, [pc, #44]	; (800bbd8 <HAL_RCC_OscConfig+0x270>)
 800bbaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bbac:	f003 0302 	and.w	r3, r3, #2
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d0f0      	beq.n	800bb96 <HAL_RCC_OscConfig+0x22e>
 800bbb4:	e01c      	b.n	800bbf0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bbb6:	4b0a      	ldr	r3, [pc, #40]	; (800bbe0 <HAL_RCC_OscConfig+0x278>)
 800bbb8:	2200      	movs	r2, #0
 800bbba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bbbc:	f7fd f91c 	bl	8008df8 <HAL_GetTick>
 800bbc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bbc2:	e00f      	b.n	800bbe4 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bbc4:	f7fd f918 	bl	8008df8 <HAL_GetTick>
 800bbc8:	4602      	mov	r2, r0
 800bbca:	693b      	ldr	r3, [r7, #16]
 800bbcc:	1ad3      	subs	r3, r2, r3
 800bbce:	2b02      	cmp	r3, #2
 800bbd0:	d908      	bls.n	800bbe4 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800bbd2:	2303      	movs	r3, #3
 800bbd4:	e118      	b.n	800be08 <HAL_RCC_OscConfig+0x4a0>
 800bbd6:	bf00      	nop
 800bbd8:	40023800 	.word	0x40023800
 800bbdc:	42470000 	.word	0x42470000
 800bbe0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bbe4:	4b8a      	ldr	r3, [pc, #552]	; (800be10 <HAL_RCC_OscConfig+0x4a8>)
 800bbe6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bbe8:	f003 0302 	and.w	r3, r3, #2
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d1e9      	bne.n	800bbc4 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	f003 0304 	and.w	r3, r3, #4
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	f000 8097 	beq.w	800bd2c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bbfe:	2300      	movs	r3, #0
 800bc00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bc02:	4b83      	ldr	r3, [pc, #524]	; (800be10 <HAL_RCC_OscConfig+0x4a8>)
 800bc04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d10f      	bne.n	800bc2e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bc0e:	2300      	movs	r3, #0
 800bc10:	60fb      	str	r3, [r7, #12]
 800bc12:	4b7f      	ldr	r3, [pc, #508]	; (800be10 <HAL_RCC_OscConfig+0x4a8>)
 800bc14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc16:	4a7e      	ldr	r2, [pc, #504]	; (800be10 <HAL_RCC_OscConfig+0x4a8>)
 800bc18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bc1c:	6413      	str	r3, [r2, #64]	; 0x40
 800bc1e:	4b7c      	ldr	r3, [pc, #496]	; (800be10 <HAL_RCC_OscConfig+0x4a8>)
 800bc20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc26:	60fb      	str	r3, [r7, #12]
 800bc28:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bc2e:	4b79      	ldr	r3, [pc, #484]	; (800be14 <HAL_RCC_OscConfig+0x4ac>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d118      	bne.n	800bc6c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800bc3a:	4b76      	ldr	r3, [pc, #472]	; (800be14 <HAL_RCC_OscConfig+0x4ac>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	4a75      	ldr	r2, [pc, #468]	; (800be14 <HAL_RCC_OscConfig+0x4ac>)
 800bc40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bc46:	f7fd f8d7 	bl	8008df8 <HAL_GetTick>
 800bc4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bc4c:	e008      	b.n	800bc60 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bc4e:	f7fd f8d3 	bl	8008df8 <HAL_GetTick>
 800bc52:	4602      	mov	r2, r0
 800bc54:	693b      	ldr	r3, [r7, #16]
 800bc56:	1ad3      	subs	r3, r2, r3
 800bc58:	2b02      	cmp	r3, #2
 800bc5a:	d901      	bls.n	800bc60 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800bc5c:	2303      	movs	r3, #3
 800bc5e:	e0d3      	b.n	800be08 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bc60:	4b6c      	ldr	r3, [pc, #432]	; (800be14 <HAL_RCC_OscConfig+0x4ac>)
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d0f0      	beq.n	800bc4e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	689b      	ldr	r3, [r3, #8]
 800bc70:	2b01      	cmp	r3, #1
 800bc72:	d106      	bne.n	800bc82 <HAL_RCC_OscConfig+0x31a>
 800bc74:	4b66      	ldr	r3, [pc, #408]	; (800be10 <HAL_RCC_OscConfig+0x4a8>)
 800bc76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc78:	4a65      	ldr	r2, [pc, #404]	; (800be10 <HAL_RCC_OscConfig+0x4a8>)
 800bc7a:	f043 0301 	orr.w	r3, r3, #1
 800bc7e:	6713      	str	r3, [r2, #112]	; 0x70
 800bc80:	e01c      	b.n	800bcbc <HAL_RCC_OscConfig+0x354>
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	689b      	ldr	r3, [r3, #8]
 800bc86:	2b05      	cmp	r3, #5
 800bc88:	d10c      	bne.n	800bca4 <HAL_RCC_OscConfig+0x33c>
 800bc8a:	4b61      	ldr	r3, [pc, #388]	; (800be10 <HAL_RCC_OscConfig+0x4a8>)
 800bc8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc8e:	4a60      	ldr	r2, [pc, #384]	; (800be10 <HAL_RCC_OscConfig+0x4a8>)
 800bc90:	f043 0304 	orr.w	r3, r3, #4
 800bc94:	6713      	str	r3, [r2, #112]	; 0x70
 800bc96:	4b5e      	ldr	r3, [pc, #376]	; (800be10 <HAL_RCC_OscConfig+0x4a8>)
 800bc98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc9a:	4a5d      	ldr	r2, [pc, #372]	; (800be10 <HAL_RCC_OscConfig+0x4a8>)
 800bc9c:	f043 0301 	orr.w	r3, r3, #1
 800bca0:	6713      	str	r3, [r2, #112]	; 0x70
 800bca2:	e00b      	b.n	800bcbc <HAL_RCC_OscConfig+0x354>
 800bca4:	4b5a      	ldr	r3, [pc, #360]	; (800be10 <HAL_RCC_OscConfig+0x4a8>)
 800bca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bca8:	4a59      	ldr	r2, [pc, #356]	; (800be10 <HAL_RCC_OscConfig+0x4a8>)
 800bcaa:	f023 0301 	bic.w	r3, r3, #1
 800bcae:	6713      	str	r3, [r2, #112]	; 0x70
 800bcb0:	4b57      	ldr	r3, [pc, #348]	; (800be10 <HAL_RCC_OscConfig+0x4a8>)
 800bcb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcb4:	4a56      	ldr	r2, [pc, #344]	; (800be10 <HAL_RCC_OscConfig+0x4a8>)
 800bcb6:	f023 0304 	bic.w	r3, r3, #4
 800bcba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	689b      	ldr	r3, [r3, #8]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d015      	beq.n	800bcf0 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bcc4:	f7fd f898 	bl	8008df8 <HAL_GetTick>
 800bcc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bcca:	e00a      	b.n	800bce2 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bccc:	f7fd f894 	bl	8008df8 <HAL_GetTick>
 800bcd0:	4602      	mov	r2, r0
 800bcd2:	693b      	ldr	r3, [r7, #16]
 800bcd4:	1ad3      	subs	r3, r2, r3
 800bcd6:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcda:	4293      	cmp	r3, r2
 800bcdc:	d901      	bls.n	800bce2 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800bcde:	2303      	movs	r3, #3
 800bce0:	e092      	b.n	800be08 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bce2:	4b4b      	ldr	r3, [pc, #300]	; (800be10 <HAL_RCC_OscConfig+0x4a8>)
 800bce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bce6:	f003 0302 	and.w	r3, r3, #2
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d0ee      	beq.n	800bccc <HAL_RCC_OscConfig+0x364>
 800bcee:	e014      	b.n	800bd1a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bcf0:	f7fd f882 	bl	8008df8 <HAL_GetTick>
 800bcf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bcf6:	e00a      	b.n	800bd0e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bcf8:	f7fd f87e 	bl	8008df8 <HAL_GetTick>
 800bcfc:	4602      	mov	r2, r0
 800bcfe:	693b      	ldr	r3, [r7, #16]
 800bd00:	1ad3      	subs	r3, r2, r3
 800bd02:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd06:	4293      	cmp	r3, r2
 800bd08:	d901      	bls.n	800bd0e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800bd0a:	2303      	movs	r3, #3
 800bd0c:	e07c      	b.n	800be08 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bd0e:	4b40      	ldr	r3, [pc, #256]	; (800be10 <HAL_RCC_OscConfig+0x4a8>)
 800bd10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd12:	f003 0302 	and.w	r3, r3, #2
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d1ee      	bne.n	800bcf8 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bd1a:	7dfb      	ldrb	r3, [r7, #23]
 800bd1c:	2b01      	cmp	r3, #1
 800bd1e:	d105      	bne.n	800bd2c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bd20:	4b3b      	ldr	r3, [pc, #236]	; (800be10 <HAL_RCC_OscConfig+0x4a8>)
 800bd22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd24:	4a3a      	ldr	r2, [pc, #232]	; (800be10 <HAL_RCC_OscConfig+0x4a8>)
 800bd26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bd2a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	699b      	ldr	r3, [r3, #24]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d068      	beq.n	800be06 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800bd34:	4b36      	ldr	r3, [pc, #216]	; (800be10 <HAL_RCC_OscConfig+0x4a8>)
 800bd36:	689b      	ldr	r3, [r3, #8]
 800bd38:	f003 030c 	and.w	r3, r3, #12
 800bd3c:	2b08      	cmp	r3, #8
 800bd3e:	d060      	beq.n	800be02 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	699b      	ldr	r3, [r3, #24]
 800bd44:	2b02      	cmp	r3, #2
 800bd46:	d145      	bne.n	800bdd4 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bd48:	4b33      	ldr	r3, [pc, #204]	; (800be18 <HAL_RCC_OscConfig+0x4b0>)
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd4e:	f7fd f853 	bl	8008df8 <HAL_GetTick>
 800bd52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bd54:	e008      	b.n	800bd68 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bd56:	f7fd f84f 	bl	8008df8 <HAL_GetTick>
 800bd5a:	4602      	mov	r2, r0
 800bd5c:	693b      	ldr	r3, [r7, #16]
 800bd5e:	1ad3      	subs	r3, r2, r3
 800bd60:	2b02      	cmp	r3, #2
 800bd62:	d901      	bls.n	800bd68 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 800bd64:	2303      	movs	r3, #3
 800bd66:	e04f      	b.n	800be08 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bd68:	4b29      	ldr	r3, [pc, #164]	; (800be10 <HAL_RCC_OscConfig+0x4a8>)
 800bd6a:	681b      	ldr	r3, [r3, #0]
 800bd6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d1f0      	bne.n	800bd56 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	69da      	ldr	r2, [r3, #28]
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	6a1b      	ldr	r3, [r3, #32]
 800bd7c:	431a      	orrs	r2, r3
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd82:	019b      	lsls	r3, r3, #6
 800bd84:	431a      	orrs	r2, r3
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd8a:	085b      	lsrs	r3, r3, #1
 800bd8c:	3b01      	subs	r3, #1
 800bd8e:	041b      	lsls	r3, r3, #16
 800bd90:	431a      	orrs	r2, r3
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd96:	061b      	lsls	r3, r3, #24
 800bd98:	431a      	orrs	r2, r3
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd9e:	071b      	lsls	r3, r3, #28
 800bda0:	491b      	ldr	r1, [pc, #108]	; (800be10 <HAL_RCC_OscConfig+0x4a8>)
 800bda2:	4313      	orrs	r3, r2
 800bda4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bda6:	4b1c      	ldr	r3, [pc, #112]	; (800be18 <HAL_RCC_OscConfig+0x4b0>)
 800bda8:	2201      	movs	r2, #1
 800bdaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bdac:	f7fd f824 	bl	8008df8 <HAL_GetTick>
 800bdb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bdb2:	e008      	b.n	800bdc6 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bdb4:	f7fd f820 	bl	8008df8 <HAL_GetTick>
 800bdb8:	4602      	mov	r2, r0
 800bdba:	693b      	ldr	r3, [r7, #16]
 800bdbc:	1ad3      	subs	r3, r2, r3
 800bdbe:	2b02      	cmp	r3, #2
 800bdc0:	d901      	bls.n	800bdc6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800bdc2:	2303      	movs	r3, #3
 800bdc4:	e020      	b.n	800be08 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bdc6:	4b12      	ldr	r3, [pc, #72]	; (800be10 <HAL_RCC_OscConfig+0x4a8>)
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d0f0      	beq.n	800bdb4 <HAL_RCC_OscConfig+0x44c>
 800bdd2:	e018      	b.n	800be06 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bdd4:	4b10      	ldr	r3, [pc, #64]	; (800be18 <HAL_RCC_OscConfig+0x4b0>)
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bdda:	f7fd f80d 	bl	8008df8 <HAL_GetTick>
 800bdde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bde0:	e008      	b.n	800bdf4 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bde2:	f7fd f809 	bl	8008df8 <HAL_GetTick>
 800bde6:	4602      	mov	r2, r0
 800bde8:	693b      	ldr	r3, [r7, #16]
 800bdea:	1ad3      	subs	r3, r2, r3
 800bdec:	2b02      	cmp	r3, #2
 800bdee:	d901      	bls.n	800bdf4 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800bdf0:	2303      	movs	r3, #3
 800bdf2:	e009      	b.n	800be08 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bdf4:	4b06      	ldr	r3, [pc, #24]	; (800be10 <HAL_RCC_OscConfig+0x4a8>)
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d1f0      	bne.n	800bde2 <HAL_RCC_OscConfig+0x47a>
 800be00:	e001      	b.n	800be06 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800be02:	2301      	movs	r3, #1
 800be04:	e000      	b.n	800be08 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800be06:	2300      	movs	r3, #0
}
 800be08:	4618      	mov	r0, r3
 800be0a:	3718      	adds	r7, #24
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd80      	pop	{r7, pc}
 800be10:	40023800 	.word	0x40023800
 800be14:	40007000 	.word	0x40007000
 800be18:	42470060 	.word	0x42470060

0800be1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b082      	sub	sp, #8
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d101      	bne.n	800be2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800be2a:	2301      	movs	r3, #1
 800be2c:	e056      	b.n	800bedc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	2200      	movs	r2, #0
 800be32:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800be3a:	b2db      	uxtb	r3, r3
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d106      	bne.n	800be4e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2200      	movs	r2, #0
 800be44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800be48:	6878      	ldr	r0, [r7, #4]
 800be4a:	f004 fdcb 	bl	80109e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	2202      	movs	r2, #2
 800be52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	681a      	ldr	r2, [r3, #0]
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800be64:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	685a      	ldr	r2, [r3, #4]
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	689b      	ldr	r3, [r3, #8]
 800be6e:	431a      	orrs	r2, r3
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	68db      	ldr	r3, [r3, #12]
 800be74:	431a      	orrs	r2, r3
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	691b      	ldr	r3, [r3, #16]
 800be7a:	431a      	orrs	r2, r3
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	695b      	ldr	r3, [r3, #20]
 800be80:	431a      	orrs	r2, r3
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	699b      	ldr	r3, [r3, #24]
 800be86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800be8a:	431a      	orrs	r2, r3
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	69db      	ldr	r3, [r3, #28]
 800be90:	431a      	orrs	r2, r3
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	6a1b      	ldr	r3, [r3, #32]
 800be96:	ea42 0103 	orr.w	r1, r2, r3
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	430a      	orrs	r2, r1
 800bea4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	699b      	ldr	r3, [r3, #24]
 800beaa:	0c1b      	lsrs	r3, r3, #16
 800beac:	f003 0104 	and.w	r1, r3, #4
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	430a      	orrs	r2, r1
 800beba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	69da      	ldr	r2, [r3, #28]
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800beca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2200      	movs	r2, #0
 800bed0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	2201      	movs	r2, #1
 800bed6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800beda:	2300      	movs	r3, #0
}
 800bedc:	4618      	mov	r0, r3
 800bede:	3708      	adds	r7, #8
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}

0800bee4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b08c      	sub	sp, #48	; 0x30
 800bee8:	af00      	add	r7, sp, #0
 800beea:	60f8      	str	r0, [r7, #12]
 800beec:	60b9      	str	r1, [r7, #8]
 800beee:	607a      	str	r2, [r7, #4]
 800bef0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800bef2:	2301      	movs	r3, #1
 800bef4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800bef6:	2300      	movs	r3, #0
 800bef8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bf02:	2b01      	cmp	r3, #1
 800bf04:	d101      	bne.n	800bf0a <HAL_SPI_TransmitReceive+0x26>
 800bf06:	2302      	movs	r3, #2
 800bf08:	e18a      	b.n	800c220 <HAL_SPI_TransmitReceive+0x33c>
 800bf0a:	68fb      	ldr	r3, [r7, #12]
 800bf0c:	2201      	movs	r2, #1
 800bf0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bf12:	f7fc ff71 	bl	8008df8 <HAL_GetTick>
 800bf16:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bf1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	685b      	ldr	r3, [r3, #4]
 800bf26:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800bf28:	887b      	ldrh	r3, [r7, #2]
 800bf2a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bf2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bf30:	2b01      	cmp	r3, #1
 800bf32:	d00f      	beq.n	800bf54 <HAL_SPI_TransmitReceive+0x70>
 800bf34:	69fb      	ldr	r3, [r7, #28]
 800bf36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bf3a:	d107      	bne.n	800bf4c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	689b      	ldr	r3, [r3, #8]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d103      	bne.n	800bf4c <HAL_SPI_TransmitReceive+0x68>
 800bf44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bf48:	2b04      	cmp	r3, #4
 800bf4a:	d003      	beq.n	800bf54 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800bf4c:	2302      	movs	r3, #2
 800bf4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800bf52:	e15b      	b.n	800c20c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d005      	beq.n	800bf66 <HAL_SPI_TransmitReceive+0x82>
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d002      	beq.n	800bf66 <HAL_SPI_TransmitReceive+0x82>
 800bf60:	887b      	ldrh	r3, [r7, #2]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d103      	bne.n	800bf6e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800bf66:	2301      	movs	r3, #1
 800bf68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800bf6c:	e14e      	b.n	800c20c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bf74:	b2db      	uxtb	r3, r3
 800bf76:	2b04      	cmp	r3, #4
 800bf78:	d003      	beq.n	800bf82 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	2205      	movs	r2, #5
 800bf7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	2200      	movs	r2, #0
 800bf86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	687a      	ldr	r2, [r7, #4]
 800bf8c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	887a      	ldrh	r2, [r7, #2]
 800bf92:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	887a      	ldrh	r2, [r7, #2]
 800bf98:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	68ba      	ldr	r2, [r7, #8]
 800bf9e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	887a      	ldrh	r2, [r7, #2]
 800bfa4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	887a      	ldrh	r2, [r7, #2]
 800bfaa:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	2200      	movs	r2, #0
 800bfb0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfc2:	2b40      	cmp	r3, #64	; 0x40
 800bfc4:	d007      	beq.n	800bfd6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	681a      	ldr	r2, [r3, #0]
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bfd4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	68db      	ldr	r3, [r3, #12]
 800bfda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bfde:	d178      	bne.n	800c0d2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	685b      	ldr	r3, [r3, #4]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d002      	beq.n	800bfee <HAL_SPI_TransmitReceive+0x10a>
 800bfe8:	8b7b      	ldrh	r3, [r7, #26]
 800bfea:	2b01      	cmp	r3, #1
 800bfec:	d166      	bne.n	800c0bc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bff2:	881a      	ldrh	r2, [r3, #0]
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bffe:	1c9a      	adds	r2, r3, #2
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c008:	b29b      	uxth	r3, r3
 800c00a:	3b01      	subs	r3, #1
 800c00c:	b29a      	uxth	r2, r3
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c012:	e053      	b.n	800c0bc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	689b      	ldr	r3, [r3, #8]
 800c01a:	f003 0302 	and.w	r3, r3, #2
 800c01e:	2b02      	cmp	r3, #2
 800c020:	d11b      	bne.n	800c05a <HAL_SPI_TransmitReceive+0x176>
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c026:	b29b      	uxth	r3, r3
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d016      	beq.n	800c05a <HAL_SPI_TransmitReceive+0x176>
 800c02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c02e:	2b01      	cmp	r3, #1
 800c030:	d113      	bne.n	800c05a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c036:	881a      	ldrh	r2, [r3, #0]
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c042:	1c9a      	adds	r2, r3, #2
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c04c:	b29b      	uxth	r3, r3
 800c04e:	3b01      	subs	r3, #1
 800c050:	b29a      	uxth	r2, r3
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c056:	2300      	movs	r3, #0
 800c058:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	689b      	ldr	r3, [r3, #8]
 800c060:	f003 0301 	and.w	r3, r3, #1
 800c064:	2b01      	cmp	r3, #1
 800c066:	d119      	bne.n	800c09c <HAL_SPI_TransmitReceive+0x1b8>
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c06c:	b29b      	uxth	r3, r3
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d014      	beq.n	800c09c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	68da      	ldr	r2, [r3, #12]
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c07c:	b292      	uxth	r2, r2
 800c07e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c084:	1c9a      	adds	r2, r3, #2
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c08e:	b29b      	uxth	r3, r3
 800c090:	3b01      	subs	r3, #1
 800c092:	b29a      	uxth	r2, r3
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c098:	2301      	movs	r3, #1
 800c09a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c09c:	f7fc feac 	bl	8008df8 <HAL_GetTick>
 800c0a0:	4602      	mov	r2, r0
 800c0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0a4:	1ad3      	subs	r3, r2, r3
 800c0a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c0a8:	429a      	cmp	r2, r3
 800c0aa:	d807      	bhi.n	800c0bc <HAL_SPI_TransmitReceive+0x1d8>
 800c0ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0b2:	d003      	beq.n	800c0bc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800c0b4:	2303      	movs	r3, #3
 800c0b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c0ba:	e0a7      	b.n	800c20c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c0c0:	b29b      	uxth	r3, r3
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d1a6      	bne.n	800c014 <HAL_SPI_TransmitReceive+0x130>
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c0ca:	b29b      	uxth	r3, r3
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d1a1      	bne.n	800c014 <HAL_SPI_TransmitReceive+0x130>
 800c0d0:	e07c      	b.n	800c1cc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	685b      	ldr	r3, [r3, #4]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d002      	beq.n	800c0e0 <HAL_SPI_TransmitReceive+0x1fc>
 800c0da:	8b7b      	ldrh	r3, [r7, #26]
 800c0dc:	2b01      	cmp	r3, #1
 800c0de:	d16b      	bne.n	800c1b8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	330c      	adds	r3, #12
 800c0ea:	7812      	ldrb	r2, [r2, #0]
 800c0ec:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0f2:	1c5a      	adds	r2, r3, #1
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c0fc:	b29b      	uxth	r3, r3
 800c0fe:	3b01      	subs	r3, #1
 800c100:	b29a      	uxth	r2, r3
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c106:	e057      	b.n	800c1b8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	689b      	ldr	r3, [r3, #8]
 800c10e:	f003 0302 	and.w	r3, r3, #2
 800c112:	2b02      	cmp	r3, #2
 800c114:	d11c      	bne.n	800c150 <HAL_SPI_TransmitReceive+0x26c>
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c11a:	b29b      	uxth	r3, r3
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d017      	beq.n	800c150 <HAL_SPI_TransmitReceive+0x26c>
 800c120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c122:	2b01      	cmp	r3, #1
 800c124:	d114      	bne.n	800c150 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	330c      	adds	r3, #12
 800c130:	7812      	ldrb	r2, [r2, #0]
 800c132:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c138:	1c5a      	adds	r2, r3, #1
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c142:	b29b      	uxth	r3, r3
 800c144:	3b01      	subs	r3, #1
 800c146:	b29a      	uxth	r2, r3
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c14c:	2300      	movs	r3, #0
 800c14e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	689b      	ldr	r3, [r3, #8]
 800c156:	f003 0301 	and.w	r3, r3, #1
 800c15a:	2b01      	cmp	r3, #1
 800c15c:	d119      	bne.n	800c192 <HAL_SPI_TransmitReceive+0x2ae>
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c162:	b29b      	uxth	r3, r3
 800c164:	2b00      	cmp	r3, #0
 800c166:	d014      	beq.n	800c192 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	68da      	ldr	r2, [r3, #12]
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c172:	b2d2      	uxtb	r2, r2
 800c174:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c17a:	1c5a      	adds	r2, r3, #1
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c184:	b29b      	uxth	r3, r3
 800c186:	3b01      	subs	r3, #1
 800c188:	b29a      	uxth	r2, r3
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c18e:	2301      	movs	r3, #1
 800c190:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c192:	f7fc fe31 	bl	8008df8 <HAL_GetTick>
 800c196:	4602      	mov	r2, r0
 800c198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c19a:	1ad3      	subs	r3, r2, r3
 800c19c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c19e:	429a      	cmp	r2, r3
 800c1a0:	d803      	bhi.n	800c1aa <HAL_SPI_TransmitReceive+0x2c6>
 800c1a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1a8:	d102      	bne.n	800c1b0 <HAL_SPI_TransmitReceive+0x2cc>
 800c1aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d103      	bne.n	800c1b8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800c1b0:	2303      	movs	r3, #3
 800c1b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c1b6:	e029      	b.n	800c20c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c1bc:	b29b      	uxth	r3, r3
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d1a2      	bne.n	800c108 <HAL_SPI_TransmitReceive+0x224>
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c1c6:	b29b      	uxth	r3, r3
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d19d      	bne.n	800c108 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c1cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1ce:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c1d0:	68f8      	ldr	r0, [r7, #12]
 800c1d2:	f000 fb1b 	bl	800c80c <SPI_EndRxTxTransaction>
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d006      	beq.n	800c1ea <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800c1dc:	2301      	movs	r3, #1
 800c1de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	2220      	movs	r2, #32
 800c1e6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800c1e8:	e010      	b.n	800c20c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	689b      	ldr	r3, [r3, #8]
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d10b      	bne.n	800c20a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	617b      	str	r3, [r7, #20]
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	68db      	ldr	r3, [r3, #12]
 800c1fc:	617b      	str	r3, [r7, #20]
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	689b      	ldr	r3, [r3, #8]
 800c204:	617b      	str	r3, [r7, #20]
 800c206:	697b      	ldr	r3, [r7, #20]
 800c208:	e000      	b.n	800c20c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800c20a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	2201      	movs	r2, #1
 800c210:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	2200      	movs	r2, #0
 800c218:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c21c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800c220:	4618      	mov	r0, r3
 800c222:	3730      	adds	r7, #48	; 0x30
 800c224:	46bd      	mov	sp, r7
 800c226:	bd80      	pop	{r7, pc}

0800c228 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800c228:	b480      	push	{r7}
 800c22a:	b087      	sub	sp, #28
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	60f8      	str	r0, [r7, #12]
 800c230:	60b9      	str	r1, [r7, #8]
 800c232:	607a      	str	r2, [r7, #4]
 800c234:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c236:	2300      	movs	r3, #0
 800c238:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c240:	2b01      	cmp	r3, #1
 800c242:	d101      	bne.n	800c248 <HAL_SPI_TransmitReceive_IT+0x20>
 800c244:	2302      	movs	r3, #2
 800c246:	e075      	b.n	800c334 <HAL_SPI_TransmitReceive_IT+0x10c>
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	2201      	movs	r2, #1
 800c24c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c256:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	685b      	ldr	r3, [r3, #4]
 800c25c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c25e:	7dbb      	ldrb	r3, [r7, #22]
 800c260:	2b01      	cmp	r3, #1
 800c262:	d00d      	beq.n	800c280 <HAL_SPI_TransmitReceive_IT+0x58>
 800c264:	693b      	ldr	r3, [r7, #16]
 800c266:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c26a:	d106      	bne.n	800c27a <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	689b      	ldr	r3, [r3, #8]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d102      	bne.n	800c27a <HAL_SPI_TransmitReceive_IT+0x52>
 800c274:	7dbb      	ldrb	r3, [r7, #22]
 800c276:	2b04      	cmp	r3, #4
 800c278:	d002      	beq.n	800c280 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800c27a:	2302      	movs	r3, #2
 800c27c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c27e:	e054      	b.n	800c32a <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d005      	beq.n	800c292 <HAL_SPI_TransmitReceive_IT+0x6a>
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d002      	beq.n	800c292 <HAL_SPI_TransmitReceive_IT+0x6a>
 800c28c:	887b      	ldrh	r3, [r7, #2]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d102      	bne.n	800c298 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800c292:	2301      	movs	r3, #1
 800c294:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c296:	e048      	b.n	800c32a <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c29e:	b2db      	uxtb	r3, r3
 800c2a0:	2b04      	cmp	r3, #4
 800c2a2:	d003      	beq.n	800c2ac <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	2205      	movs	r2, #5
 800c2a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	68ba      	ldr	r2, [r7, #8]
 800c2b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	887a      	ldrh	r2, [r7, #2]
 800c2bc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	887a      	ldrh	r2, [r7, #2]
 800c2c2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	687a      	ldr	r2, [r7, #4]
 800c2c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	887a      	ldrh	r2, [r7, #2]
 800c2ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	887a      	ldrh	r2, [r7, #2]
 800c2d4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	68db      	ldr	r3, [r3, #12]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d006      	beq.n	800c2ec <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	4a17      	ldr	r2, [pc, #92]	; (800c340 <HAL_SPI_TransmitReceive_IT+0x118>)
 800c2e2:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	4a17      	ldr	r2, [pc, #92]	; (800c344 <HAL_SPI_TransmitReceive_IT+0x11c>)
 800c2e8:	645a      	str	r2, [r3, #68]	; 0x44
 800c2ea:	e005      	b.n	800c2f8 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	4a16      	ldr	r2, [pc, #88]	; (800c348 <HAL_SPI_TransmitReceive_IT+0x120>)
 800c2f0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	4a15      	ldr	r2, [pc, #84]	; (800c34c <HAL_SPI_TransmitReceive_IT+0x124>)
 800c2f6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	685a      	ldr	r2, [r3, #4]
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800c306:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c312:	2b40      	cmp	r3, #64	; 0x40
 800c314:	d008      	beq.n	800c328 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	681a      	ldr	r2, [r3, #0]
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c324:	601a      	str	r2, [r3, #0]
 800c326:	e000      	b.n	800c32a <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 800c328:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	2200      	movs	r2, #0
 800c32e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c332:	7dfb      	ldrb	r3, [r7, #23]
}
 800c334:	4618      	mov	r0, r3
 800c336:	371c      	adds	r7, #28
 800c338:	46bd      	mov	sp, r7
 800c33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33e:	4770      	bx	lr
 800c340:	0800c679 	.word	0x0800c679
 800c344:	0800c6d9 	.word	0x0800c6d9
 800c348:	0800c5b5 	.word	0x0800c5b5
 800c34c:	0800c619 	.word	0x0800c619

0800c350 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800c350:	b580      	push	{r7, lr}
 800c352:	b088      	sub	sp, #32
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	685b      	ldr	r3, [r3, #4]
 800c35e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	689b      	ldr	r3, [r3, #8]
 800c366:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800c368:	69bb      	ldr	r3, [r7, #24]
 800c36a:	099b      	lsrs	r3, r3, #6
 800c36c:	f003 0301 	and.w	r3, r3, #1
 800c370:	2b00      	cmp	r3, #0
 800c372:	d10f      	bne.n	800c394 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800c374:	69bb      	ldr	r3, [r7, #24]
 800c376:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d00a      	beq.n	800c394 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800c37e:	69fb      	ldr	r3, [r7, #28]
 800c380:	099b      	lsrs	r3, r3, #6
 800c382:	f003 0301 	and.w	r3, r3, #1
 800c386:	2b00      	cmp	r3, #0
 800c388:	d004      	beq.n	800c394 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c38e:	6878      	ldr	r0, [r7, #4]
 800c390:	4798      	blx	r3
    return;
 800c392:	e0d8      	b.n	800c546 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800c394:	69bb      	ldr	r3, [r7, #24]
 800c396:	085b      	lsrs	r3, r3, #1
 800c398:	f003 0301 	and.w	r3, r3, #1
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d00a      	beq.n	800c3b6 <HAL_SPI_IRQHandler+0x66>
 800c3a0:	69fb      	ldr	r3, [r7, #28]
 800c3a2:	09db      	lsrs	r3, r3, #7
 800c3a4:	f003 0301 	and.w	r3, r3, #1
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d004      	beq.n	800c3b6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3b0:	6878      	ldr	r0, [r7, #4]
 800c3b2:	4798      	blx	r3
    return;
 800c3b4:	e0c7      	b.n	800c546 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800c3b6:	69bb      	ldr	r3, [r7, #24]
 800c3b8:	095b      	lsrs	r3, r3, #5
 800c3ba:	f003 0301 	and.w	r3, r3, #1
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d10c      	bne.n	800c3dc <HAL_SPI_IRQHandler+0x8c>
 800c3c2:	69bb      	ldr	r3, [r7, #24]
 800c3c4:	099b      	lsrs	r3, r3, #6
 800c3c6:	f003 0301 	and.w	r3, r3, #1
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d106      	bne.n	800c3dc <HAL_SPI_IRQHandler+0x8c>
 800c3ce:	69bb      	ldr	r3, [r7, #24]
 800c3d0:	0a1b      	lsrs	r3, r3, #8
 800c3d2:	f003 0301 	and.w	r3, r3, #1
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	f000 80b5 	beq.w	800c546 <HAL_SPI_IRQHandler+0x1f6>
 800c3dc:	69fb      	ldr	r3, [r7, #28]
 800c3de:	095b      	lsrs	r3, r3, #5
 800c3e0:	f003 0301 	and.w	r3, r3, #1
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	f000 80ae 	beq.w	800c546 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800c3ea:	69bb      	ldr	r3, [r7, #24]
 800c3ec:	099b      	lsrs	r3, r3, #6
 800c3ee:	f003 0301 	and.w	r3, r3, #1
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d023      	beq.n	800c43e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c3fc:	b2db      	uxtb	r3, r3
 800c3fe:	2b03      	cmp	r3, #3
 800c400:	d011      	beq.n	800c426 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c406:	f043 0204 	orr.w	r2, r3, #4
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c40e:	2300      	movs	r3, #0
 800c410:	617b      	str	r3, [r7, #20]
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	68db      	ldr	r3, [r3, #12]
 800c418:	617b      	str	r3, [r7, #20]
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	689b      	ldr	r3, [r3, #8]
 800c420:	617b      	str	r3, [r7, #20]
 800c422:	697b      	ldr	r3, [r7, #20]
 800c424:	e00b      	b.n	800c43e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c426:	2300      	movs	r3, #0
 800c428:	613b      	str	r3, [r7, #16]
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	68db      	ldr	r3, [r3, #12]
 800c430:	613b      	str	r3, [r7, #16]
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	689b      	ldr	r3, [r3, #8]
 800c438:	613b      	str	r3, [r7, #16]
 800c43a:	693b      	ldr	r3, [r7, #16]
        return;
 800c43c:	e083      	b.n	800c546 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800c43e:	69bb      	ldr	r3, [r7, #24]
 800c440:	095b      	lsrs	r3, r3, #5
 800c442:	f003 0301 	and.w	r3, r3, #1
 800c446:	2b00      	cmp	r3, #0
 800c448:	d014      	beq.n	800c474 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c44e:	f043 0201 	orr.w	r2, r3, #1
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c456:	2300      	movs	r3, #0
 800c458:	60fb      	str	r3, [r7, #12]
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	689b      	ldr	r3, [r3, #8]
 800c460:	60fb      	str	r3, [r7, #12]
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	681a      	ldr	r2, [r3, #0]
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c470:	601a      	str	r2, [r3, #0]
 800c472:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800c474:	69bb      	ldr	r3, [r7, #24]
 800c476:	0a1b      	lsrs	r3, r3, #8
 800c478:	f003 0301 	and.w	r3, r3, #1
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d00c      	beq.n	800c49a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c484:	f043 0208 	orr.w	r2, r3, #8
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c48c:	2300      	movs	r3, #0
 800c48e:	60bb      	str	r3, [r7, #8]
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	689b      	ldr	r3, [r3, #8]
 800c496:	60bb      	str	r3, [r7, #8]
 800c498:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d050      	beq.n	800c544 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	685a      	ldr	r2, [r3, #4]
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c4b0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	2201      	movs	r2, #1
 800c4b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800c4ba:	69fb      	ldr	r3, [r7, #28]
 800c4bc:	f003 0302 	and.w	r3, r3, #2
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d104      	bne.n	800c4ce <HAL_SPI_IRQHandler+0x17e>
 800c4c4:	69fb      	ldr	r3, [r7, #28]
 800c4c6:	f003 0301 	and.w	r3, r3, #1
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d034      	beq.n	800c538 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	685a      	ldr	r2, [r3, #4]
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	f022 0203 	bic.w	r2, r2, #3
 800c4dc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d011      	beq.n	800c50a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c4ea:	4a18      	ldr	r2, [pc, #96]	; (800c54c <HAL_SPI_IRQHandler+0x1fc>)
 800c4ec:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	f7fe f836 	bl	800a564 <HAL_DMA_Abort_IT>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d005      	beq.n	800c50a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c502:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d016      	beq.n	800c540 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c516:	4a0d      	ldr	r2, [pc, #52]	; (800c54c <HAL_SPI_IRQHandler+0x1fc>)
 800c518:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c51e:	4618      	mov	r0, r3
 800c520:	f7fe f820 	bl	800a564 <HAL_DMA_Abort_IT>
 800c524:	4603      	mov	r3, r0
 800c526:	2b00      	cmp	r3, #0
 800c528:	d00a      	beq.n	800c540 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c52e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800c536:	e003      	b.n	800c540 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800c538:	6878      	ldr	r0, [r7, #4]
 800c53a:	f000 f81d 	bl	800c578 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800c53e:	e000      	b.n	800c542 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800c540:	bf00      	nop
    return;
 800c542:	bf00      	nop
 800c544:	bf00      	nop
  }
}
 800c546:	3720      	adds	r7, #32
 800c548:	46bd      	mov	sp, r7
 800c54a:	bd80      	pop	{r7, pc}
 800c54c:	0800c58d 	.word	0x0800c58d

0800c550 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c550:	b480      	push	{r7}
 800c552:	b083      	sub	sp, #12
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800c558:	bf00      	nop
 800c55a:	370c      	adds	r7, #12
 800c55c:	46bd      	mov	sp, r7
 800c55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c562:	4770      	bx	lr

0800c564 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c564:	b480      	push	{r7}
 800c566:	b083      	sub	sp, #12
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800c56c:	bf00      	nop
 800c56e:	370c      	adds	r7, #12
 800c570:	46bd      	mov	sp, r7
 800c572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c576:	4770      	bx	lr

0800c578 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800c578:	b480      	push	{r7}
 800c57a:	b083      	sub	sp, #12
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800c580:	bf00      	nop
 800c582:	370c      	adds	r7, #12
 800c584:	46bd      	mov	sp, r7
 800c586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58a:	4770      	bx	lr

0800c58c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b084      	sub	sp, #16
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c598:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	2200      	movs	r2, #0
 800c59e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800c5a6:	68f8      	ldr	r0, [r7, #12]
 800c5a8:	f7ff ffe6 	bl	800c578 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c5ac:	bf00      	nop
 800c5ae:	3710      	adds	r7, #16
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bd80      	pop	{r7, pc}

0800c5b4 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b082      	sub	sp, #8
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	f103 020c 	add.w	r2, r3, #12
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5c8:	7812      	ldrb	r2, [r2, #0]
 800c5ca:	b2d2      	uxtb	r2, r2
 800c5cc:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5d2:	1c5a      	adds	r2, r3, #1
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c5dc:	b29b      	uxth	r3, r3
 800c5de:	3b01      	subs	r3, #1
 800c5e0:	b29a      	uxth	r2, r3
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c5ea:	b29b      	uxth	r3, r3
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	d10f      	bne.n	800c610 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	685a      	ldr	r2, [r3, #4]
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800c5fe:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c604:	b29b      	uxth	r3, r3
 800c606:	2b00      	cmp	r3, #0
 800c608:	d102      	bne.n	800c610 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 800c60a:	6878      	ldr	r0, [r7, #4]
 800c60c:	f000 f940 	bl	800c890 <SPI_CloseRxTx_ISR>
    }
  }
}
 800c610:	bf00      	nop
 800c612:	3708      	adds	r7, #8
 800c614:	46bd      	mov	sp, r7
 800c616:	bd80      	pop	{r7, pc}

0800c618 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b082      	sub	sp, #8
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	330c      	adds	r3, #12
 800c62a:	7812      	ldrb	r2, [r2, #0]
 800c62c:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c632:	1c5a      	adds	r2, r3, #1
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c63c:	b29b      	uxth	r3, r3
 800c63e:	3b01      	subs	r3, #1
 800c640:	b29a      	uxth	r2, r3
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c64a:	b29b      	uxth	r3, r3
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d10f      	bne.n	800c670 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	685a      	ldr	r2, [r3, #4]
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c65e:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c664:	b29b      	uxth	r3, r3
 800c666:	2b00      	cmp	r3, #0
 800c668:	d102      	bne.n	800c670 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800c66a:	6878      	ldr	r0, [r7, #4]
 800c66c:	f000 f910 	bl	800c890 <SPI_CloseRxTx_ISR>
    }
  }
}
 800c670:	bf00      	nop
 800c672:	3708      	adds	r7, #8
 800c674:	46bd      	mov	sp, r7
 800c676:	bd80      	pop	{r7, pc}

0800c678 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b082      	sub	sp, #8
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	68da      	ldr	r2, [r3, #12]
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c68a:	b292      	uxth	r2, r2
 800c68c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c692:	1c9a      	adds	r2, r3, #2
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c69c:	b29b      	uxth	r3, r3
 800c69e:	3b01      	subs	r3, #1
 800c6a0:	b29a      	uxth	r2, r3
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c6aa:	b29b      	uxth	r3, r3
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d10f      	bne.n	800c6d0 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	685a      	ldr	r2, [r3, #4]
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c6be:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c6c4:	b29b      	uxth	r3, r3
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d102      	bne.n	800c6d0 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f000 f8e0 	bl	800c890 <SPI_CloseRxTx_ISR>
    }
  }
}
 800c6d0:	bf00      	nop
 800c6d2:	3708      	adds	r7, #8
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bd80      	pop	{r7, pc}

0800c6d8 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b082      	sub	sp, #8
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6e4:	881a      	ldrh	r2, [r3, #0]
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6f0:	1c9a      	adds	r2, r3, #2
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c6fa:	b29b      	uxth	r3, r3
 800c6fc:	3b01      	subs	r3, #1
 800c6fe:	b29a      	uxth	r2, r3
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c708:	b29b      	uxth	r3, r3
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d10f      	bne.n	800c72e <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	685a      	ldr	r2, [r3, #4]
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c71c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c722:	b29b      	uxth	r3, r3
 800c724:	2b00      	cmp	r3, #0
 800c726:	d102      	bne.n	800c72e <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 800c728:	6878      	ldr	r0, [r7, #4]
 800c72a:	f000 f8b1 	bl	800c890 <SPI_CloseRxTx_ISR>
    }
  }
}
 800c72e:	bf00      	nop
 800c730:	3708      	adds	r7, #8
 800c732:	46bd      	mov	sp, r7
 800c734:	bd80      	pop	{r7, pc}

0800c736 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c736:	b580      	push	{r7, lr}
 800c738:	b084      	sub	sp, #16
 800c73a:	af00      	add	r7, sp, #0
 800c73c:	60f8      	str	r0, [r7, #12]
 800c73e:	60b9      	str	r1, [r7, #8]
 800c740:	603b      	str	r3, [r7, #0]
 800c742:	4613      	mov	r3, r2
 800c744:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c746:	e04c      	b.n	800c7e2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c74e:	d048      	beq.n	800c7e2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800c750:	f7fc fb52 	bl	8008df8 <HAL_GetTick>
 800c754:	4602      	mov	r2, r0
 800c756:	69bb      	ldr	r3, [r7, #24]
 800c758:	1ad3      	subs	r3, r2, r3
 800c75a:	683a      	ldr	r2, [r7, #0]
 800c75c:	429a      	cmp	r2, r3
 800c75e:	d902      	bls.n	800c766 <SPI_WaitFlagStateUntilTimeout+0x30>
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d13d      	bne.n	800c7e2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	685a      	ldr	r2, [r3, #4]
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c774:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	685b      	ldr	r3, [r3, #4]
 800c77a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c77e:	d111      	bne.n	800c7a4 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	689b      	ldr	r3, [r3, #8]
 800c784:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c788:	d004      	beq.n	800c794 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	689b      	ldr	r3, [r3, #8]
 800c78e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c792:	d107      	bne.n	800c7a4 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	681a      	ldr	r2, [r3, #0]
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c7a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c7ac:	d10f      	bne.n	800c7ce <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	681a      	ldr	r2, [r3, #0]
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c7bc:	601a      	str	r2, [r3, #0]
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	681a      	ldr	r2, [r3, #0]
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c7cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	2201      	movs	r2, #1
 800c7d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	2200      	movs	r2, #0
 800c7da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800c7de:	2303      	movs	r3, #3
 800c7e0:	e00f      	b.n	800c802 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	689a      	ldr	r2, [r3, #8]
 800c7e8:	68bb      	ldr	r3, [r7, #8]
 800c7ea:	4013      	ands	r3, r2
 800c7ec:	68ba      	ldr	r2, [r7, #8]
 800c7ee:	429a      	cmp	r2, r3
 800c7f0:	bf0c      	ite	eq
 800c7f2:	2301      	moveq	r3, #1
 800c7f4:	2300      	movne	r3, #0
 800c7f6:	b2db      	uxtb	r3, r3
 800c7f8:	461a      	mov	r2, r3
 800c7fa:	79fb      	ldrb	r3, [r7, #7]
 800c7fc:	429a      	cmp	r2, r3
 800c7fe:	d1a3      	bne.n	800c748 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800c800:	2300      	movs	r3, #0
}
 800c802:	4618      	mov	r0, r3
 800c804:	3710      	adds	r7, #16
 800c806:	46bd      	mov	sp, r7
 800c808:	bd80      	pop	{r7, pc}
	...

0800c80c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b088      	sub	sp, #32
 800c810:	af02      	add	r7, sp, #8
 800c812:	60f8      	str	r0, [r7, #12]
 800c814:	60b9      	str	r1, [r7, #8]
 800c816:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c818:	4b1b      	ldr	r3, [pc, #108]	; (800c888 <SPI_EndRxTxTransaction+0x7c>)
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	4a1b      	ldr	r2, [pc, #108]	; (800c88c <SPI_EndRxTxTransaction+0x80>)
 800c81e:	fba2 2303 	umull	r2, r3, r2, r3
 800c822:	0d5b      	lsrs	r3, r3, #21
 800c824:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c828:	fb02 f303 	mul.w	r3, r2, r3
 800c82c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	685b      	ldr	r3, [r3, #4]
 800c832:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c836:	d112      	bne.n	800c85e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	9300      	str	r3, [sp, #0]
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	2200      	movs	r2, #0
 800c840:	2180      	movs	r1, #128	; 0x80
 800c842:	68f8      	ldr	r0, [r7, #12]
 800c844:	f7ff ff77 	bl	800c736 <SPI_WaitFlagStateUntilTimeout>
 800c848:	4603      	mov	r3, r0
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d016      	beq.n	800c87c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c852:	f043 0220 	orr.w	r2, r3, #32
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c85a:	2303      	movs	r3, #3
 800c85c:	e00f      	b.n	800c87e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c85e:	697b      	ldr	r3, [r7, #20]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d00a      	beq.n	800c87a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800c864:	697b      	ldr	r3, [r7, #20]
 800c866:	3b01      	subs	r3, #1
 800c868:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	689b      	ldr	r3, [r3, #8]
 800c870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c874:	2b80      	cmp	r3, #128	; 0x80
 800c876:	d0f2      	beq.n	800c85e <SPI_EndRxTxTransaction+0x52>
 800c878:	e000      	b.n	800c87c <SPI_EndRxTxTransaction+0x70>
        break;
 800c87a:	bf00      	nop
  }

  return HAL_OK;
 800c87c:	2300      	movs	r3, #0
}
 800c87e:	4618      	mov	r0, r3
 800c880:	3718      	adds	r7, #24
 800c882:	46bd      	mov	sp, r7
 800c884:	bd80      	pop	{r7, pc}
 800c886:	bf00      	nop
 800c888:	20000038 	.word	0x20000038
 800c88c:	165e9f81 	.word	0x165e9f81

0800c890 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b086      	sub	sp, #24
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800c898:	4b35      	ldr	r3, [pc, #212]	; (800c970 <SPI_CloseRxTx_ISR+0xe0>)
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	4a35      	ldr	r2, [pc, #212]	; (800c974 <SPI_CloseRxTx_ISR+0xe4>)
 800c89e:	fba2 2303 	umull	r2, r3, r2, r3
 800c8a2:	0a5b      	lsrs	r3, r3, #9
 800c8a4:	2264      	movs	r2, #100	; 0x64
 800c8a6:	fb02 f303 	mul.w	r3, r2, r3
 800c8aa:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800c8ac:	f7fc faa4 	bl	8008df8 <HAL_GetTick>
 800c8b0:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	685a      	ldr	r2, [r3, #4]
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	f022 0220 	bic.w	r2, r2, #32
 800c8c0:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800c8c2:	693b      	ldr	r3, [r7, #16]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d106      	bne.n	800c8d6 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8cc:	f043 0220 	orr.w	r2, r3, #32
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c8d4:	e009      	b.n	800c8ea <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 800c8d6:	693b      	ldr	r3, [r7, #16]
 800c8d8:	3b01      	subs	r3, #1
 800c8da:	613b      	str	r3, [r7, #16]
  }
  while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	689b      	ldr	r3, [r3, #8]
 800c8e2:	f003 0302 	and.w	r3, r3, #2
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d0eb      	beq.n	800c8c2 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800c8ea:	697a      	ldr	r2, [r7, #20]
 800c8ec:	2164      	movs	r1, #100	; 0x64
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	f7ff ff8c 	bl	800c80c <SPI_EndRxTxTransaction>
 800c8f4:	4603      	mov	r3, r0
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d005      	beq.n	800c906 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8fe:	f043 0220 	orr.w	r2, r3, #32
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	689b      	ldr	r3, [r3, #8]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d10a      	bne.n	800c924 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c90e:	2300      	movs	r3, #0
 800c910:	60fb      	str	r3, [r7, #12]
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	68db      	ldr	r3, [r3, #12]
 800c918:	60fb      	str	r3, [r7, #12]
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	689b      	ldr	r3, [r3, #8]
 800c920:	60fb      	str	r3, [r7, #12]
 800c922:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d115      	bne.n	800c958 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c932:	b2db      	uxtb	r3, r3
 800c934:	2b04      	cmp	r3, #4
 800c936:	d107      	bne.n	800c948 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	2201      	movs	r2, #1
 800c93c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800c940:	6878      	ldr	r0, [r7, #4]
 800c942:	f7ff fe05 	bl	800c550 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800c946:	e00e      	b.n	800c966 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2201      	movs	r2, #1
 800c94c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 800c950:	6878      	ldr	r0, [r7, #4]
 800c952:	f7ff fe07 	bl	800c564 <HAL_SPI_TxRxCpltCallback>
}
 800c956:	e006      	b.n	800c966 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	2201      	movs	r2, #1
 800c95c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f7ff fe09 	bl	800c578 <HAL_SPI_ErrorCallback>
}
 800c966:	bf00      	nop
 800c968:	3718      	adds	r7, #24
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}
 800c96e:	bf00      	nop
 800c970:	20000038 	.word	0x20000038
 800c974:	057619f1 	.word	0x057619f1

0800c978 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b082      	sub	sp, #8
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d101      	bne.n	800c98a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c986:	2301      	movs	r3, #1
 800c988:	e01d      	b.n	800c9c6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c990:	b2db      	uxtb	r3, r3
 800c992:	2b00      	cmp	r3, #0
 800c994:	d106      	bne.n	800c9a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	2200      	movs	r2, #0
 800c99a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c99e:	6878      	ldr	r0, [r7, #4]
 800c9a0:	f004 fdfa 	bl	8011598 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2202      	movs	r2, #2
 800c9a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681a      	ldr	r2, [r3, #0]
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	3304      	adds	r3, #4
 800c9b4:	4619      	mov	r1, r3
 800c9b6:	4610      	mov	r0, r2
 800c9b8:	f000 fc0a 	bl	800d1d0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2201      	movs	r2, #1
 800c9c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c9c4:	2300      	movs	r3, #0
}
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	3708      	adds	r7, #8
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bd80      	pop	{r7, pc}

0800c9ce <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c9ce:	b580      	push	{r7, lr}
 800c9d0:	b082      	sub	sp, #8
 800c9d2:	af00      	add	r7, sp, #0
 800c9d4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d101      	bne.n	800c9e0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c9dc:	2301      	movs	r3, #1
 800c9de:	e01d      	b.n	800ca1c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c9e6:	b2db      	uxtb	r3, r3
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d106      	bne.n	800c9fa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c9f4:	6878      	ldr	r0, [r7, #4]
 800c9f6:	f000 f815 	bl	800ca24 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2202      	movs	r2, #2
 800c9fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681a      	ldr	r2, [r3, #0]
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	3304      	adds	r3, #4
 800ca0a:	4619      	mov	r1, r3
 800ca0c:	4610      	mov	r0, r2
 800ca0e:	f000 fbdf 	bl	800d1d0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	2201      	movs	r2, #1
 800ca16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ca1a:	2300      	movs	r3, #0
}
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	3708      	adds	r7, #8
 800ca20:	46bd      	mov	sp, r7
 800ca22:	bd80      	pop	{r7, pc}

0800ca24 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ca24:	b480      	push	{r7}
 800ca26:	b083      	sub	sp, #12
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ca2c:	bf00      	nop
 800ca2e:	370c      	adds	r7, #12
 800ca30:	46bd      	mov	sp, r7
 800ca32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca36:	4770      	bx	lr

0800ca38 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b084      	sub	sp, #16
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
 800ca40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	2b0c      	cmp	r3, #12
 800ca46:	d841      	bhi.n	800cacc <HAL_TIM_PWM_Start_IT+0x94>
 800ca48:	a201      	add	r2, pc, #4	; (adr r2, 800ca50 <HAL_TIM_PWM_Start_IT+0x18>)
 800ca4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca4e:	bf00      	nop
 800ca50:	0800ca85 	.word	0x0800ca85
 800ca54:	0800cacd 	.word	0x0800cacd
 800ca58:	0800cacd 	.word	0x0800cacd
 800ca5c:	0800cacd 	.word	0x0800cacd
 800ca60:	0800ca97 	.word	0x0800ca97
 800ca64:	0800cacd 	.word	0x0800cacd
 800ca68:	0800cacd 	.word	0x0800cacd
 800ca6c:	0800cacd 	.word	0x0800cacd
 800ca70:	0800caa9 	.word	0x0800caa9
 800ca74:	0800cacd 	.word	0x0800cacd
 800ca78:	0800cacd 	.word	0x0800cacd
 800ca7c:	0800cacd 	.word	0x0800cacd
 800ca80:	0800cabb 	.word	0x0800cabb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	68da      	ldr	r2, [r3, #12]
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	f042 0202 	orr.w	r2, r2, #2
 800ca92:	60da      	str	r2, [r3, #12]
      break;
 800ca94:	e01b      	b.n	800cace <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	68da      	ldr	r2, [r3, #12]
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	f042 0204 	orr.w	r2, r2, #4
 800caa4:	60da      	str	r2, [r3, #12]
      break;
 800caa6:	e012      	b.n	800cace <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	68da      	ldr	r2, [r3, #12]
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	f042 0208 	orr.w	r2, r2, #8
 800cab6:	60da      	str	r2, [r3, #12]
      break;
 800cab8:	e009      	b.n	800cace <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	68da      	ldr	r2, [r3, #12]
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	f042 0210 	orr.w	r2, r2, #16
 800cac8:	60da      	str	r2, [r3, #12]
      break;
 800caca:	e000      	b.n	800cace <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 800cacc:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	2201      	movs	r2, #1
 800cad4:	6839      	ldr	r1, [r7, #0]
 800cad6:	4618      	mov	r0, r3
 800cad8:	f000 fe64 	bl	800d7a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	4a15      	ldr	r2, [pc, #84]	; (800cb38 <HAL_TIM_PWM_Start_IT+0x100>)
 800cae2:	4293      	cmp	r3, r2
 800cae4:	d004      	beq.n	800caf0 <HAL_TIM_PWM_Start_IT+0xb8>
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	4a14      	ldr	r2, [pc, #80]	; (800cb3c <HAL_TIM_PWM_Start_IT+0x104>)
 800caec:	4293      	cmp	r3, r2
 800caee:	d101      	bne.n	800caf4 <HAL_TIM_PWM_Start_IT+0xbc>
 800caf0:	2301      	movs	r3, #1
 800caf2:	e000      	b.n	800caf6 <HAL_TIM_PWM_Start_IT+0xbe>
 800caf4:	2300      	movs	r3, #0
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d007      	beq.n	800cb0a <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cb08:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	689b      	ldr	r3, [r3, #8]
 800cb10:	f003 0307 	and.w	r3, r3, #7
 800cb14:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	2b06      	cmp	r3, #6
 800cb1a:	d007      	beq.n	800cb2c <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	681a      	ldr	r2, [r3, #0]
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	f042 0201 	orr.w	r2, r2, #1
 800cb2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800cb2c:	2300      	movs	r3, #0
}
 800cb2e:	4618      	mov	r0, r3
 800cb30:	3710      	adds	r7, #16
 800cb32:	46bd      	mov	sp, r7
 800cb34:	bd80      	pop	{r7, pc}
 800cb36:	bf00      	nop
 800cb38:	40010000 	.word	0x40010000
 800cb3c:	40010400 	.word	0x40010400

0800cb40 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b082      	sub	sp, #8
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]
 800cb48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	2b0c      	cmp	r3, #12
 800cb4e:	d841      	bhi.n	800cbd4 <HAL_TIM_PWM_Stop_IT+0x94>
 800cb50:	a201      	add	r2, pc, #4	; (adr r2, 800cb58 <HAL_TIM_PWM_Stop_IT+0x18>)
 800cb52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb56:	bf00      	nop
 800cb58:	0800cb8d 	.word	0x0800cb8d
 800cb5c:	0800cbd5 	.word	0x0800cbd5
 800cb60:	0800cbd5 	.word	0x0800cbd5
 800cb64:	0800cbd5 	.word	0x0800cbd5
 800cb68:	0800cb9f 	.word	0x0800cb9f
 800cb6c:	0800cbd5 	.word	0x0800cbd5
 800cb70:	0800cbd5 	.word	0x0800cbd5
 800cb74:	0800cbd5 	.word	0x0800cbd5
 800cb78:	0800cbb1 	.word	0x0800cbb1
 800cb7c:	0800cbd5 	.word	0x0800cbd5
 800cb80:	0800cbd5 	.word	0x0800cbd5
 800cb84:	0800cbd5 	.word	0x0800cbd5
 800cb88:	0800cbc3 	.word	0x0800cbc3
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	68da      	ldr	r2, [r3, #12]
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	f022 0202 	bic.w	r2, r2, #2
 800cb9a:	60da      	str	r2, [r3, #12]
      break;
 800cb9c:	e01b      	b.n	800cbd6 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	68da      	ldr	r2, [r3, #12]
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	f022 0204 	bic.w	r2, r2, #4
 800cbac:	60da      	str	r2, [r3, #12]
      break;
 800cbae:	e012      	b.n	800cbd6 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	68da      	ldr	r2, [r3, #12]
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	f022 0208 	bic.w	r2, r2, #8
 800cbbe:	60da      	str	r2, [r3, #12]
      break;
 800cbc0:	e009      	b.n	800cbd6 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	68da      	ldr	r2, [r3, #12]
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	f022 0210 	bic.w	r2, r2, #16
 800cbd0:	60da      	str	r2, [r3, #12]
      break;
 800cbd2:	e000      	b.n	800cbd6 <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 800cbd4:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	2200      	movs	r2, #0
 800cbdc:	6839      	ldr	r1, [r7, #0]
 800cbde:	4618      	mov	r0, r3
 800cbe0:	f000 fde0 	bl	800d7a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	4a20      	ldr	r2, [pc, #128]	; (800cc6c <HAL_TIM_PWM_Stop_IT+0x12c>)
 800cbea:	4293      	cmp	r3, r2
 800cbec:	d004      	beq.n	800cbf8 <HAL_TIM_PWM_Stop_IT+0xb8>
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	4a1f      	ldr	r2, [pc, #124]	; (800cc70 <HAL_TIM_PWM_Stop_IT+0x130>)
 800cbf4:	4293      	cmp	r3, r2
 800cbf6:	d101      	bne.n	800cbfc <HAL_TIM_PWM_Stop_IT+0xbc>
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	e000      	b.n	800cbfe <HAL_TIM_PWM_Stop_IT+0xbe>
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d017      	beq.n	800cc32 <HAL_TIM_PWM_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	6a1a      	ldr	r2, [r3, #32]
 800cc08:	f241 1311 	movw	r3, #4369	; 0x1111
 800cc0c:	4013      	ands	r3, r2
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d10f      	bne.n	800cc32 <HAL_TIM_PWM_Stop_IT+0xf2>
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	6a1a      	ldr	r2, [r3, #32]
 800cc18:	f240 4344 	movw	r3, #1092	; 0x444
 800cc1c:	4013      	ands	r3, r2
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d107      	bne.n	800cc32 <HAL_TIM_PWM_Stop_IT+0xf2>
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cc30:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	6a1a      	ldr	r2, [r3, #32]
 800cc38:	f241 1311 	movw	r3, #4369	; 0x1111
 800cc3c:	4013      	ands	r3, r2
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d10f      	bne.n	800cc62 <HAL_TIM_PWM_Stop_IT+0x122>
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	6a1a      	ldr	r2, [r3, #32]
 800cc48:	f240 4344 	movw	r3, #1092	; 0x444
 800cc4c:	4013      	ands	r3, r2
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d107      	bne.n	800cc62 <HAL_TIM_PWM_Stop_IT+0x122>
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	681a      	ldr	r2, [r3, #0]
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	f022 0201 	bic.w	r2, r2, #1
 800cc60:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800cc62:	2300      	movs	r3, #0
}
 800cc64:	4618      	mov	r0, r3
 800cc66:	3708      	adds	r7, #8
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	bd80      	pop	{r7, pc}
 800cc6c:	40010000 	.word	0x40010000
 800cc70:	40010400 	.word	0x40010400

0800cc74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b082      	sub	sp, #8
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	691b      	ldr	r3, [r3, #16]
 800cc82:	f003 0302 	and.w	r3, r3, #2
 800cc86:	2b02      	cmp	r3, #2
 800cc88:	d122      	bne.n	800ccd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	68db      	ldr	r3, [r3, #12]
 800cc90:	f003 0302 	and.w	r3, r3, #2
 800cc94:	2b02      	cmp	r3, #2
 800cc96:	d11b      	bne.n	800ccd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	f06f 0202 	mvn.w	r2, #2
 800cca0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	2201      	movs	r2, #1
 800cca6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	699b      	ldr	r3, [r3, #24]
 800ccae:	f003 0303 	and.w	r3, r3, #3
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d003      	beq.n	800ccbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ccb6:	6878      	ldr	r0, [r7, #4]
 800ccb8:	f000 fa6b 	bl	800d192 <HAL_TIM_IC_CaptureCallback>
 800ccbc:	e005      	b.n	800ccca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	f000 fa5d 	bl	800d17e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ccc4:	6878      	ldr	r0, [r7, #4]
 800ccc6:	f000 fa6e 	bl	800d1a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	2200      	movs	r2, #0
 800ccce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	691b      	ldr	r3, [r3, #16]
 800ccd6:	f003 0304 	and.w	r3, r3, #4
 800ccda:	2b04      	cmp	r3, #4
 800ccdc:	d122      	bne.n	800cd24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	68db      	ldr	r3, [r3, #12]
 800cce4:	f003 0304 	and.w	r3, r3, #4
 800cce8:	2b04      	cmp	r3, #4
 800ccea:	d11b      	bne.n	800cd24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	f06f 0204 	mvn.w	r2, #4
 800ccf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	2202      	movs	r2, #2
 800ccfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	699b      	ldr	r3, [r3, #24]
 800cd02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d003      	beq.n	800cd12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cd0a:	6878      	ldr	r0, [r7, #4]
 800cd0c:	f000 fa41 	bl	800d192 <HAL_TIM_IC_CaptureCallback>
 800cd10:	e005      	b.n	800cd1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cd12:	6878      	ldr	r0, [r7, #4]
 800cd14:	f000 fa33 	bl	800d17e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cd18:	6878      	ldr	r0, [r7, #4]
 800cd1a:	f000 fa44 	bl	800d1a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	2200      	movs	r2, #0
 800cd22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	691b      	ldr	r3, [r3, #16]
 800cd2a:	f003 0308 	and.w	r3, r3, #8
 800cd2e:	2b08      	cmp	r3, #8
 800cd30:	d122      	bne.n	800cd78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	68db      	ldr	r3, [r3, #12]
 800cd38:	f003 0308 	and.w	r3, r3, #8
 800cd3c:	2b08      	cmp	r3, #8
 800cd3e:	d11b      	bne.n	800cd78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	f06f 0208 	mvn.w	r2, #8
 800cd48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	2204      	movs	r2, #4
 800cd4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	69db      	ldr	r3, [r3, #28]
 800cd56:	f003 0303 	and.w	r3, r3, #3
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d003      	beq.n	800cd66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cd5e:	6878      	ldr	r0, [r7, #4]
 800cd60:	f000 fa17 	bl	800d192 <HAL_TIM_IC_CaptureCallback>
 800cd64:	e005      	b.n	800cd72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cd66:	6878      	ldr	r0, [r7, #4]
 800cd68:	f000 fa09 	bl	800d17e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cd6c:	6878      	ldr	r0, [r7, #4]
 800cd6e:	f000 fa1a 	bl	800d1a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	2200      	movs	r2, #0
 800cd76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	691b      	ldr	r3, [r3, #16]
 800cd7e:	f003 0310 	and.w	r3, r3, #16
 800cd82:	2b10      	cmp	r3, #16
 800cd84:	d122      	bne.n	800cdcc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	68db      	ldr	r3, [r3, #12]
 800cd8c:	f003 0310 	and.w	r3, r3, #16
 800cd90:	2b10      	cmp	r3, #16
 800cd92:	d11b      	bne.n	800cdcc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	f06f 0210 	mvn.w	r2, #16
 800cd9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	2208      	movs	r2, #8
 800cda2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	69db      	ldr	r3, [r3, #28]
 800cdaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d003      	beq.n	800cdba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cdb2:	6878      	ldr	r0, [r7, #4]
 800cdb4:	f000 f9ed 	bl	800d192 <HAL_TIM_IC_CaptureCallback>
 800cdb8:	e005      	b.n	800cdc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cdba:	6878      	ldr	r0, [r7, #4]
 800cdbc:	f000 f9df 	bl	800d17e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cdc0:	6878      	ldr	r0, [r7, #4]
 800cdc2:	f000 f9f0 	bl	800d1a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	2200      	movs	r2, #0
 800cdca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	691b      	ldr	r3, [r3, #16]
 800cdd2:	f003 0301 	and.w	r3, r3, #1
 800cdd6:	2b01      	cmp	r3, #1
 800cdd8:	d10e      	bne.n	800cdf8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	68db      	ldr	r3, [r3, #12]
 800cde0:	f003 0301 	and.w	r3, r3, #1
 800cde4:	2b01      	cmp	r3, #1
 800cde6:	d107      	bne.n	800cdf8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	f06f 0201 	mvn.w	r2, #1
 800cdf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800cdf2:	6878      	ldr	r0, [r7, #4]
 800cdf4:	f004 fcc4 	bl	8011780 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	691b      	ldr	r3, [r3, #16]
 800cdfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce02:	2b80      	cmp	r3, #128	; 0x80
 800ce04:	d10e      	bne.n	800ce24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	68db      	ldr	r3, [r3, #12]
 800ce0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce10:	2b80      	cmp	r3, #128	; 0x80
 800ce12:	d107      	bne.n	800ce24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ce1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ce1e:	6878      	ldr	r0, [r7, #4]
 800ce20:	f000 fe51 	bl	800dac6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	691b      	ldr	r3, [r3, #16]
 800ce2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce2e:	2b40      	cmp	r3, #64	; 0x40
 800ce30:	d10e      	bne.n	800ce50 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	68db      	ldr	r3, [r3, #12]
 800ce38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce3c:	2b40      	cmp	r3, #64	; 0x40
 800ce3e:	d107      	bne.n	800ce50 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ce48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ce4a:	6878      	ldr	r0, [r7, #4]
 800ce4c:	f000 f9b5 	bl	800d1ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	691b      	ldr	r3, [r3, #16]
 800ce56:	f003 0320 	and.w	r3, r3, #32
 800ce5a:	2b20      	cmp	r3, #32
 800ce5c:	d10e      	bne.n	800ce7c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	68db      	ldr	r3, [r3, #12]
 800ce64:	f003 0320 	and.w	r3, r3, #32
 800ce68:	2b20      	cmp	r3, #32
 800ce6a:	d107      	bne.n	800ce7c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	f06f 0220 	mvn.w	r2, #32
 800ce74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ce76:	6878      	ldr	r0, [r7, #4]
 800ce78:	f000 fe1b 	bl	800dab2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ce7c:	bf00      	nop
 800ce7e:	3708      	adds	r7, #8
 800ce80:	46bd      	mov	sp, r7
 800ce82:	bd80      	pop	{r7, pc}

0800ce84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	b084      	sub	sp, #16
 800ce88:	af00      	add	r7, sp, #0
 800ce8a:	60f8      	str	r0, [r7, #12]
 800ce8c:	60b9      	str	r1, [r7, #8]
 800ce8e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ce96:	2b01      	cmp	r3, #1
 800ce98:	d101      	bne.n	800ce9e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800ce9a:	2302      	movs	r3, #2
 800ce9c:	e0b4      	b.n	800d008 <HAL_TIM_PWM_ConfigChannel+0x184>
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	2201      	movs	r2, #1
 800cea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	2202      	movs	r2, #2
 800ceaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	2b0c      	cmp	r3, #12
 800ceb2:	f200 809f 	bhi.w	800cff4 <HAL_TIM_PWM_ConfigChannel+0x170>
 800ceb6:	a201      	add	r2, pc, #4	; (adr r2, 800cebc <HAL_TIM_PWM_ConfigChannel+0x38>)
 800ceb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cebc:	0800cef1 	.word	0x0800cef1
 800cec0:	0800cff5 	.word	0x0800cff5
 800cec4:	0800cff5 	.word	0x0800cff5
 800cec8:	0800cff5 	.word	0x0800cff5
 800cecc:	0800cf31 	.word	0x0800cf31
 800ced0:	0800cff5 	.word	0x0800cff5
 800ced4:	0800cff5 	.word	0x0800cff5
 800ced8:	0800cff5 	.word	0x0800cff5
 800cedc:	0800cf73 	.word	0x0800cf73
 800cee0:	0800cff5 	.word	0x0800cff5
 800cee4:	0800cff5 	.word	0x0800cff5
 800cee8:	0800cff5 	.word	0x0800cff5
 800ceec:	0800cfb3 	.word	0x0800cfb3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cef0:	68fb      	ldr	r3, [r7, #12]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	68b9      	ldr	r1, [r7, #8]
 800cef6:	4618      	mov	r0, r3
 800cef8:	f000 fa0a 	bl	800d310 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	699a      	ldr	r2, [r3, #24]
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	f042 0208 	orr.w	r2, r2, #8
 800cf0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	699a      	ldr	r2, [r3, #24]
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	f022 0204 	bic.w	r2, r2, #4
 800cf1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	6999      	ldr	r1, [r3, #24]
 800cf22:	68bb      	ldr	r3, [r7, #8]
 800cf24:	691a      	ldr	r2, [r3, #16]
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	430a      	orrs	r2, r1
 800cf2c:	619a      	str	r2, [r3, #24]
      break;
 800cf2e:	e062      	b.n	800cff6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	68b9      	ldr	r1, [r7, #8]
 800cf36:	4618      	mov	r0, r3
 800cf38:	f000 fa5a 	bl	800d3f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	699a      	ldr	r2, [r3, #24]
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cf4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	699a      	ldr	r2, [r3, #24]
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cf5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	6999      	ldr	r1, [r3, #24]
 800cf62:	68bb      	ldr	r3, [r7, #8]
 800cf64:	691b      	ldr	r3, [r3, #16]
 800cf66:	021a      	lsls	r2, r3, #8
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	430a      	orrs	r2, r1
 800cf6e:	619a      	str	r2, [r3, #24]
      break;
 800cf70:	e041      	b.n	800cff6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	68b9      	ldr	r1, [r7, #8]
 800cf78:	4618      	mov	r0, r3
 800cf7a:	f000 faaf 	bl	800d4dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	69da      	ldr	r2, [r3, #28]
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	f042 0208 	orr.w	r2, r2, #8
 800cf8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	69da      	ldr	r2, [r3, #28]
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	f022 0204 	bic.w	r2, r2, #4
 800cf9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	69d9      	ldr	r1, [r3, #28]
 800cfa4:	68bb      	ldr	r3, [r7, #8]
 800cfa6:	691a      	ldr	r2, [r3, #16]
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	430a      	orrs	r2, r1
 800cfae:	61da      	str	r2, [r3, #28]
      break;
 800cfb0:	e021      	b.n	800cff6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	68b9      	ldr	r1, [r7, #8]
 800cfb8:	4618      	mov	r0, r3
 800cfba:	f000 fb03 	bl	800d5c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	69da      	ldr	r2, [r3, #28]
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cfcc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	69da      	ldr	r2, [r3, #28]
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cfdc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	69d9      	ldr	r1, [r3, #28]
 800cfe4:	68bb      	ldr	r3, [r7, #8]
 800cfe6:	691b      	ldr	r3, [r3, #16]
 800cfe8:	021a      	lsls	r2, r3, #8
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	430a      	orrs	r2, r1
 800cff0:	61da      	str	r2, [r3, #28]
      break;
 800cff2:	e000      	b.n	800cff6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800cff4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	2201      	movs	r2, #1
 800cffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	2200      	movs	r2, #0
 800d002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d006:	2300      	movs	r3, #0
}
 800d008:	4618      	mov	r0, r3
 800d00a:	3710      	adds	r7, #16
 800d00c:	46bd      	mov	sp, r7
 800d00e:	bd80      	pop	{r7, pc}

0800d010 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d010:	b580      	push	{r7, lr}
 800d012:	b084      	sub	sp, #16
 800d014:	af00      	add	r7, sp, #0
 800d016:	6078      	str	r0, [r7, #4]
 800d018:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d020:	2b01      	cmp	r3, #1
 800d022:	d101      	bne.n	800d028 <HAL_TIM_ConfigClockSource+0x18>
 800d024:	2302      	movs	r3, #2
 800d026:	e0a6      	b.n	800d176 <HAL_TIM_ConfigClockSource+0x166>
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2201      	movs	r2, #1
 800d02c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	2202      	movs	r2, #2
 800d034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	689b      	ldr	r3, [r3, #8]
 800d03e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800d046:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d04e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	68fa      	ldr	r2, [r7, #12]
 800d056:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d058:	683b      	ldr	r3, [r7, #0]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	2b40      	cmp	r3, #64	; 0x40
 800d05e:	d067      	beq.n	800d130 <HAL_TIM_ConfigClockSource+0x120>
 800d060:	2b40      	cmp	r3, #64	; 0x40
 800d062:	d80b      	bhi.n	800d07c <HAL_TIM_ConfigClockSource+0x6c>
 800d064:	2b10      	cmp	r3, #16
 800d066:	d073      	beq.n	800d150 <HAL_TIM_ConfigClockSource+0x140>
 800d068:	2b10      	cmp	r3, #16
 800d06a:	d802      	bhi.n	800d072 <HAL_TIM_ConfigClockSource+0x62>
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d06f      	beq.n	800d150 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800d070:	e078      	b.n	800d164 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800d072:	2b20      	cmp	r3, #32
 800d074:	d06c      	beq.n	800d150 <HAL_TIM_ConfigClockSource+0x140>
 800d076:	2b30      	cmp	r3, #48	; 0x30
 800d078:	d06a      	beq.n	800d150 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800d07a:	e073      	b.n	800d164 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800d07c:	2b70      	cmp	r3, #112	; 0x70
 800d07e:	d00d      	beq.n	800d09c <HAL_TIM_ConfigClockSource+0x8c>
 800d080:	2b70      	cmp	r3, #112	; 0x70
 800d082:	d804      	bhi.n	800d08e <HAL_TIM_ConfigClockSource+0x7e>
 800d084:	2b50      	cmp	r3, #80	; 0x50
 800d086:	d033      	beq.n	800d0f0 <HAL_TIM_ConfigClockSource+0xe0>
 800d088:	2b60      	cmp	r3, #96	; 0x60
 800d08a:	d041      	beq.n	800d110 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800d08c:	e06a      	b.n	800d164 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800d08e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d092:	d066      	beq.n	800d162 <HAL_TIM_ConfigClockSource+0x152>
 800d094:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d098:	d017      	beq.n	800d0ca <HAL_TIM_ConfigClockSource+0xba>
      break;
 800d09a:	e063      	b.n	800d164 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	6818      	ldr	r0, [r3, #0]
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	6899      	ldr	r1, [r3, #8]
 800d0a4:	683b      	ldr	r3, [r7, #0]
 800d0a6:	685a      	ldr	r2, [r3, #4]
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	68db      	ldr	r3, [r3, #12]
 800d0ac:	f000 fb5a 	bl	800d764 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	689b      	ldr	r3, [r3, #8]
 800d0b6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d0be:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	68fa      	ldr	r2, [r7, #12]
 800d0c6:	609a      	str	r2, [r3, #8]
      break;
 800d0c8:	e04c      	b.n	800d164 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	6818      	ldr	r0, [r3, #0]
 800d0ce:	683b      	ldr	r3, [r7, #0]
 800d0d0:	6899      	ldr	r1, [r3, #8]
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	685a      	ldr	r2, [r3, #4]
 800d0d6:	683b      	ldr	r3, [r7, #0]
 800d0d8:	68db      	ldr	r3, [r3, #12]
 800d0da:	f000 fb43 	bl	800d764 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	689a      	ldr	r2, [r3, #8]
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d0ec:	609a      	str	r2, [r3, #8]
      break;
 800d0ee:	e039      	b.n	800d164 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	6818      	ldr	r0, [r3, #0]
 800d0f4:	683b      	ldr	r3, [r7, #0]
 800d0f6:	6859      	ldr	r1, [r3, #4]
 800d0f8:	683b      	ldr	r3, [r7, #0]
 800d0fa:	68db      	ldr	r3, [r3, #12]
 800d0fc:	461a      	mov	r2, r3
 800d0fe:	f000 fab7 	bl	800d670 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	681b      	ldr	r3, [r3, #0]
 800d106:	2150      	movs	r1, #80	; 0x50
 800d108:	4618      	mov	r0, r3
 800d10a:	f000 fb10 	bl	800d72e <TIM_ITRx_SetConfig>
      break;
 800d10e:	e029      	b.n	800d164 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	6818      	ldr	r0, [r3, #0]
 800d114:	683b      	ldr	r3, [r7, #0]
 800d116:	6859      	ldr	r1, [r3, #4]
 800d118:	683b      	ldr	r3, [r7, #0]
 800d11a:	68db      	ldr	r3, [r3, #12]
 800d11c:	461a      	mov	r2, r3
 800d11e:	f000 fad6 	bl	800d6ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	2160      	movs	r1, #96	; 0x60
 800d128:	4618      	mov	r0, r3
 800d12a:	f000 fb00 	bl	800d72e <TIM_ITRx_SetConfig>
      break;
 800d12e:	e019      	b.n	800d164 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	6818      	ldr	r0, [r3, #0]
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	6859      	ldr	r1, [r3, #4]
 800d138:	683b      	ldr	r3, [r7, #0]
 800d13a:	68db      	ldr	r3, [r3, #12]
 800d13c:	461a      	mov	r2, r3
 800d13e:	f000 fa97 	bl	800d670 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	2140      	movs	r1, #64	; 0x40
 800d148:	4618      	mov	r0, r3
 800d14a:	f000 faf0 	bl	800d72e <TIM_ITRx_SetConfig>
      break;
 800d14e:	e009      	b.n	800d164 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681a      	ldr	r2, [r3, #0]
 800d154:	683b      	ldr	r3, [r7, #0]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	4619      	mov	r1, r3
 800d15a:	4610      	mov	r0, r2
 800d15c:	f000 fae7 	bl	800d72e <TIM_ITRx_SetConfig>
      break;
 800d160:	e000      	b.n	800d164 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800d162:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2201      	movs	r2, #1
 800d168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2200      	movs	r2, #0
 800d170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d174:	2300      	movs	r3, #0
}
 800d176:	4618      	mov	r0, r3
 800d178:	3710      	adds	r7, #16
 800d17a:	46bd      	mov	sp, r7
 800d17c:	bd80      	pop	{r7, pc}

0800d17e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d17e:	b480      	push	{r7}
 800d180:	b083      	sub	sp, #12
 800d182:	af00      	add	r7, sp, #0
 800d184:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d186:	bf00      	nop
 800d188:	370c      	adds	r7, #12
 800d18a:	46bd      	mov	sp, r7
 800d18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d190:	4770      	bx	lr

0800d192 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d192:	b480      	push	{r7}
 800d194:	b083      	sub	sp, #12
 800d196:	af00      	add	r7, sp, #0
 800d198:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d19a:	bf00      	nop
 800d19c:	370c      	adds	r7, #12
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a4:	4770      	bx	lr

0800d1a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d1a6:	b480      	push	{r7}
 800d1a8:	b083      	sub	sp, #12
 800d1aa:	af00      	add	r7, sp, #0
 800d1ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d1ae:	bf00      	nop
 800d1b0:	370c      	adds	r7, #12
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b8:	4770      	bx	lr

0800d1ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d1ba:	b480      	push	{r7}
 800d1bc:	b083      	sub	sp, #12
 800d1be:	af00      	add	r7, sp, #0
 800d1c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d1c2:	bf00      	nop
 800d1c4:	370c      	adds	r7, #12
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1cc:	4770      	bx	lr
	...

0800d1d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d1d0:	b480      	push	{r7}
 800d1d2:	b085      	sub	sp, #20
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
 800d1d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	4a40      	ldr	r2, [pc, #256]	; (800d2e4 <TIM_Base_SetConfig+0x114>)
 800d1e4:	4293      	cmp	r3, r2
 800d1e6:	d013      	beq.n	800d210 <TIM_Base_SetConfig+0x40>
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d1ee:	d00f      	beq.n	800d210 <TIM_Base_SetConfig+0x40>
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	4a3d      	ldr	r2, [pc, #244]	; (800d2e8 <TIM_Base_SetConfig+0x118>)
 800d1f4:	4293      	cmp	r3, r2
 800d1f6:	d00b      	beq.n	800d210 <TIM_Base_SetConfig+0x40>
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	4a3c      	ldr	r2, [pc, #240]	; (800d2ec <TIM_Base_SetConfig+0x11c>)
 800d1fc:	4293      	cmp	r3, r2
 800d1fe:	d007      	beq.n	800d210 <TIM_Base_SetConfig+0x40>
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	4a3b      	ldr	r2, [pc, #236]	; (800d2f0 <TIM_Base_SetConfig+0x120>)
 800d204:	4293      	cmp	r3, r2
 800d206:	d003      	beq.n	800d210 <TIM_Base_SetConfig+0x40>
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	4a3a      	ldr	r2, [pc, #232]	; (800d2f4 <TIM_Base_SetConfig+0x124>)
 800d20c:	4293      	cmp	r3, r2
 800d20e:	d108      	bne.n	800d222 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d216:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	685b      	ldr	r3, [r3, #4]
 800d21c:	68fa      	ldr	r2, [r7, #12]
 800d21e:	4313      	orrs	r3, r2
 800d220:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	4a2f      	ldr	r2, [pc, #188]	; (800d2e4 <TIM_Base_SetConfig+0x114>)
 800d226:	4293      	cmp	r3, r2
 800d228:	d02b      	beq.n	800d282 <TIM_Base_SetConfig+0xb2>
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d230:	d027      	beq.n	800d282 <TIM_Base_SetConfig+0xb2>
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	4a2c      	ldr	r2, [pc, #176]	; (800d2e8 <TIM_Base_SetConfig+0x118>)
 800d236:	4293      	cmp	r3, r2
 800d238:	d023      	beq.n	800d282 <TIM_Base_SetConfig+0xb2>
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	4a2b      	ldr	r2, [pc, #172]	; (800d2ec <TIM_Base_SetConfig+0x11c>)
 800d23e:	4293      	cmp	r3, r2
 800d240:	d01f      	beq.n	800d282 <TIM_Base_SetConfig+0xb2>
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	4a2a      	ldr	r2, [pc, #168]	; (800d2f0 <TIM_Base_SetConfig+0x120>)
 800d246:	4293      	cmp	r3, r2
 800d248:	d01b      	beq.n	800d282 <TIM_Base_SetConfig+0xb2>
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	4a29      	ldr	r2, [pc, #164]	; (800d2f4 <TIM_Base_SetConfig+0x124>)
 800d24e:	4293      	cmp	r3, r2
 800d250:	d017      	beq.n	800d282 <TIM_Base_SetConfig+0xb2>
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	4a28      	ldr	r2, [pc, #160]	; (800d2f8 <TIM_Base_SetConfig+0x128>)
 800d256:	4293      	cmp	r3, r2
 800d258:	d013      	beq.n	800d282 <TIM_Base_SetConfig+0xb2>
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	4a27      	ldr	r2, [pc, #156]	; (800d2fc <TIM_Base_SetConfig+0x12c>)
 800d25e:	4293      	cmp	r3, r2
 800d260:	d00f      	beq.n	800d282 <TIM_Base_SetConfig+0xb2>
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	4a26      	ldr	r2, [pc, #152]	; (800d300 <TIM_Base_SetConfig+0x130>)
 800d266:	4293      	cmp	r3, r2
 800d268:	d00b      	beq.n	800d282 <TIM_Base_SetConfig+0xb2>
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	4a25      	ldr	r2, [pc, #148]	; (800d304 <TIM_Base_SetConfig+0x134>)
 800d26e:	4293      	cmp	r3, r2
 800d270:	d007      	beq.n	800d282 <TIM_Base_SetConfig+0xb2>
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	4a24      	ldr	r2, [pc, #144]	; (800d308 <TIM_Base_SetConfig+0x138>)
 800d276:	4293      	cmp	r3, r2
 800d278:	d003      	beq.n	800d282 <TIM_Base_SetConfig+0xb2>
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	4a23      	ldr	r2, [pc, #140]	; (800d30c <TIM_Base_SetConfig+0x13c>)
 800d27e:	4293      	cmp	r3, r2
 800d280:	d108      	bne.n	800d294 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d288:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d28a:	683b      	ldr	r3, [r7, #0]
 800d28c:	68db      	ldr	r3, [r3, #12]
 800d28e:	68fa      	ldr	r2, [r7, #12]
 800d290:	4313      	orrs	r3, r2
 800d292:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	695b      	ldr	r3, [r3, #20]
 800d29e:	4313      	orrs	r3, r2
 800d2a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	68fa      	ldr	r2, [r7, #12]
 800d2a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d2a8:	683b      	ldr	r3, [r7, #0]
 800d2aa:	689a      	ldr	r2, [r3, #8]
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d2b0:	683b      	ldr	r3, [r7, #0]
 800d2b2:	681a      	ldr	r2, [r3, #0]
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	4a0a      	ldr	r2, [pc, #40]	; (800d2e4 <TIM_Base_SetConfig+0x114>)
 800d2bc:	4293      	cmp	r3, r2
 800d2be:	d003      	beq.n	800d2c8 <TIM_Base_SetConfig+0xf8>
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	4a0c      	ldr	r2, [pc, #48]	; (800d2f4 <TIM_Base_SetConfig+0x124>)
 800d2c4:	4293      	cmp	r3, r2
 800d2c6:	d103      	bne.n	800d2d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d2c8:	683b      	ldr	r3, [r7, #0]
 800d2ca:	691a      	ldr	r2, [r3, #16]
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2201      	movs	r2, #1
 800d2d4:	615a      	str	r2, [r3, #20]
}
 800d2d6:	bf00      	nop
 800d2d8:	3714      	adds	r7, #20
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e0:	4770      	bx	lr
 800d2e2:	bf00      	nop
 800d2e4:	40010000 	.word	0x40010000
 800d2e8:	40000400 	.word	0x40000400
 800d2ec:	40000800 	.word	0x40000800
 800d2f0:	40000c00 	.word	0x40000c00
 800d2f4:	40010400 	.word	0x40010400
 800d2f8:	40014000 	.word	0x40014000
 800d2fc:	40014400 	.word	0x40014400
 800d300:	40014800 	.word	0x40014800
 800d304:	40001800 	.word	0x40001800
 800d308:	40001c00 	.word	0x40001c00
 800d30c:	40002000 	.word	0x40002000

0800d310 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d310:	b480      	push	{r7}
 800d312:	b087      	sub	sp, #28
 800d314:	af00      	add	r7, sp, #0
 800d316:	6078      	str	r0, [r7, #4]
 800d318:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	6a1b      	ldr	r3, [r3, #32]
 800d31e:	f023 0201 	bic.w	r2, r3, #1
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	6a1b      	ldr	r3, [r3, #32]
 800d32a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	685b      	ldr	r3, [r3, #4]
 800d330:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	699b      	ldr	r3, [r3, #24]
 800d336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d33e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	f023 0303 	bic.w	r3, r3, #3
 800d346:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d348:	683b      	ldr	r3, [r7, #0]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	68fa      	ldr	r2, [r7, #12]
 800d34e:	4313      	orrs	r3, r2
 800d350:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d352:	697b      	ldr	r3, [r7, #20]
 800d354:	f023 0302 	bic.w	r3, r3, #2
 800d358:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d35a:	683b      	ldr	r3, [r7, #0]
 800d35c:	689b      	ldr	r3, [r3, #8]
 800d35e:	697a      	ldr	r2, [r7, #20]
 800d360:	4313      	orrs	r3, r2
 800d362:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	4a20      	ldr	r2, [pc, #128]	; (800d3e8 <TIM_OC1_SetConfig+0xd8>)
 800d368:	4293      	cmp	r3, r2
 800d36a:	d003      	beq.n	800d374 <TIM_OC1_SetConfig+0x64>
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	4a1f      	ldr	r2, [pc, #124]	; (800d3ec <TIM_OC1_SetConfig+0xdc>)
 800d370:	4293      	cmp	r3, r2
 800d372:	d10c      	bne.n	800d38e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d374:	697b      	ldr	r3, [r7, #20]
 800d376:	f023 0308 	bic.w	r3, r3, #8
 800d37a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d37c:	683b      	ldr	r3, [r7, #0]
 800d37e:	68db      	ldr	r3, [r3, #12]
 800d380:	697a      	ldr	r2, [r7, #20]
 800d382:	4313      	orrs	r3, r2
 800d384:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d386:	697b      	ldr	r3, [r7, #20]
 800d388:	f023 0304 	bic.w	r3, r3, #4
 800d38c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	4a15      	ldr	r2, [pc, #84]	; (800d3e8 <TIM_OC1_SetConfig+0xd8>)
 800d392:	4293      	cmp	r3, r2
 800d394:	d003      	beq.n	800d39e <TIM_OC1_SetConfig+0x8e>
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	4a14      	ldr	r2, [pc, #80]	; (800d3ec <TIM_OC1_SetConfig+0xdc>)
 800d39a:	4293      	cmp	r3, r2
 800d39c:	d111      	bne.n	800d3c2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d39e:	693b      	ldr	r3, [r7, #16]
 800d3a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d3a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d3a6:	693b      	ldr	r3, [r7, #16]
 800d3a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d3ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d3ae:	683b      	ldr	r3, [r7, #0]
 800d3b0:	695b      	ldr	r3, [r3, #20]
 800d3b2:	693a      	ldr	r2, [r7, #16]
 800d3b4:	4313      	orrs	r3, r2
 800d3b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d3b8:	683b      	ldr	r3, [r7, #0]
 800d3ba:	699b      	ldr	r3, [r3, #24]
 800d3bc:	693a      	ldr	r2, [r7, #16]
 800d3be:	4313      	orrs	r3, r2
 800d3c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	693a      	ldr	r2, [r7, #16]
 800d3c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	68fa      	ldr	r2, [r7, #12]
 800d3cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d3ce:	683b      	ldr	r3, [r7, #0]
 800d3d0:	685a      	ldr	r2, [r3, #4]
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	697a      	ldr	r2, [r7, #20]
 800d3da:	621a      	str	r2, [r3, #32]
}
 800d3dc:	bf00      	nop
 800d3de:	371c      	adds	r7, #28
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e6:	4770      	bx	lr
 800d3e8:	40010000 	.word	0x40010000
 800d3ec:	40010400 	.word	0x40010400

0800d3f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d3f0:	b480      	push	{r7}
 800d3f2:	b087      	sub	sp, #28
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
 800d3f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	6a1b      	ldr	r3, [r3, #32]
 800d3fe:	f023 0210 	bic.w	r2, r3, #16
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	6a1b      	ldr	r3, [r3, #32]
 800d40a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	685b      	ldr	r3, [r3, #4]
 800d410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	699b      	ldr	r3, [r3, #24]
 800d416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d41e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d426:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d428:	683b      	ldr	r3, [r7, #0]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	021b      	lsls	r3, r3, #8
 800d42e:	68fa      	ldr	r2, [r7, #12]
 800d430:	4313      	orrs	r3, r2
 800d432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d434:	697b      	ldr	r3, [r7, #20]
 800d436:	f023 0320 	bic.w	r3, r3, #32
 800d43a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	689b      	ldr	r3, [r3, #8]
 800d440:	011b      	lsls	r3, r3, #4
 800d442:	697a      	ldr	r2, [r7, #20]
 800d444:	4313      	orrs	r3, r2
 800d446:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	4a22      	ldr	r2, [pc, #136]	; (800d4d4 <TIM_OC2_SetConfig+0xe4>)
 800d44c:	4293      	cmp	r3, r2
 800d44e:	d003      	beq.n	800d458 <TIM_OC2_SetConfig+0x68>
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	4a21      	ldr	r2, [pc, #132]	; (800d4d8 <TIM_OC2_SetConfig+0xe8>)
 800d454:	4293      	cmp	r3, r2
 800d456:	d10d      	bne.n	800d474 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d458:	697b      	ldr	r3, [r7, #20]
 800d45a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d45e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d460:	683b      	ldr	r3, [r7, #0]
 800d462:	68db      	ldr	r3, [r3, #12]
 800d464:	011b      	lsls	r3, r3, #4
 800d466:	697a      	ldr	r2, [r7, #20]
 800d468:	4313      	orrs	r3, r2
 800d46a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d46c:	697b      	ldr	r3, [r7, #20]
 800d46e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d472:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	4a17      	ldr	r2, [pc, #92]	; (800d4d4 <TIM_OC2_SetConfig+0xe4>)
 800d478:	4293      	cmp	r3, r2
 800d47a:	d003      	beq.n	800d484 <TIM_OC2_SetConfig+0x94>
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	4a16      	ldr	r2, [pc, #88]	; (800d4d8 <TIM_OC2_SetConfig+0xe8>)
 800d480:	4293      	cmp	r3, r2
 800d482:	d113      	bne.n	800d4ac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d484:	693b      	ldr	r3, [r7, #16]
 800d486:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d48a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d48c:	693b      	ldr	r3, [r7, #16]
 800d48e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d492:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d494:	683b      	ldr	r3, [r7, #0]
 800d496:	695b      	ldr	r3, [r3, #20]
 800d498:	009b      	lsls	r3, r3, #2
 800d49a:	693a      	ldr	r2, [r7, #16]
 800d49c:	4313      	orrs	r3, r2
 800d49e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d4a0:	683b      	ldr	r3, [r7, #0]
 800d4a2:	699b      	ldr	r3, [r3, #24]
 800d4a4:	009b      	lsls	r3, r3, #2
 800d4a6:	693a      	ldr	r2, [r7, #16]
 800d4a8:	4313      	orrs	r3, r2
 800d4aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	693a      	ldr	r2, [r7, #16]
 800d4b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	68fa      	ldr	r2, [r7, #12]
 800d4b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d4b8:	683b      	ldr	r3, [r7, #0]
 800d4ba:	685a      	ldr	r2, [r3, #4]
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	697a      	ldr	r2, [r7, #20]
 800d4c4:	621a      	str	r2, [r3, #32]
}
 800d4c6:	bf00      	nop
 800d4c8:	371c      	adds	r7, #28
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d0:	4770      	bx	lr
 800d4d2:	bf00      	nop
 800d4d4:	40010000 	.word	0x40010000
 800d4d8:	40010400 	.word	0x40010400

0800d4dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d4dc:	b480      	push	{r7}
 800d4de:	b087      	sub	sp, #28
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	6078      	str	r0, [r7, #4]
 800d4e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	6a1b      	ldr	r3, [r3, #32]
 800d4ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	6a1b      	ldr	r3, [r3, #32]
 800d4f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	685b      	ldr	r3, [r3, #4]
 800d4fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	69db      	ldr	r3, [r3, #28]
 800d502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d50a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	f023 0303 	bic.w	r3, r3, #3
 800d512:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	68fa      	ldr	r2, [r7, #12]
 800d51a:	4313      	orrs	r3, r2
 800d51c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d51e:	697b      	ldr	r3, [r7, #20]
 800d520:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d524:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d526:	683b      	ldr	r3, [r7, #0]
 800d528:	689b      	ldr	r3, [r3, #8]
 800d52a:	021b      	lsls	r3, r3, #8
 800d52c:	697a      	ldr	r2, [r7, #20]
 800d52e:	4313      	orrs	r3, r2
 800d530:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	4a21      	ldr	r2, [pc, #132]	; (800d5bc <TIM_OC3_SetConfig+0xe0>)
 800d536:	4293      	cmp	r3, r2
 800d538:	d003      	beq.n	800d542 <TIM_OC3_SetConfig+0x66>
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	4a20      	ldr	r2, [pc, #128]	; (800d5c0 <TIM_OC3_SetConfig+0xe4>)
 800d53e:	4293      	cmp	r3, r2
 800d540:	d10d      	bne.n	800d55e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d542:	697b      	ldr	r3, [r7, #20]
 800d544:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d548:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d54a:	683b      	ldr	r3, [r7, #0]
 800d54c:	68db      	ldr	r3, [r3, #12]
 800d54e:	021b      	lsls	r3, r3, #8
 800d550:	697a      	ldr	r2, [r7, #20]
 800d552:	4313      	orrs	r3, r2
 800d554:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d556:	697b      	ldr	r3, [r7, #20]
 800d558:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d55c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	4a16      	ldr	r2, [pc, #88]	; (800d5bc <TIM_OC3_SetConfig+0xe0>)
 800d562:	4293      	cmp	r3, r2
 800d564:	d003      	beq.n	800d56e <TIM_OC3_SetConfig+0x92>
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	4a15      	ldr	r2, [pc, #84]	; (800d5c0 <TIM_OC3_SetConfig+0xe4>)
 800d56a:	4293      	cmp	r3, r2
 800d56c:	d113      	bne.n	800d596 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d56e:	693b      	ldr	r3, [r7, #16]
 800d570:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d574:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d576:	693b      	ldr	r3, [r7, #16]
 800d578:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d57c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d57e:	683b      	ldr	r3, [r7, #0]
 800d580:	695b      	ldr	r3, [r3, #20]
 800d582:	011b      	lsls	r3, r3, #4
 800d584:	693a      	ldr	r2, [r7, #16]
 800d586:	4313      	orrs	r3, r2
 800d588:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d58a:	683b      	ldr	r3, [r7, #0]
 800d58c:	699b      	ldr	r3, [r3, #24]
 800d58e:	011b      	lsls	r3, r3, #4
 800d590:	693a      	ldr	r2, [r7, #16]
 800d592:	4313      	orrs	r3, r2
 800d594:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	693a      	ldr	r2, [r7, #16]
 800d59a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	68fa      	ldr	r2, [r7, #12]
 800d5a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	685a      	ldr	r2, [r3, #4]
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	697a      	ldr	r2, [r7, #20]
 800d5ae:	621a      	str	r2, [r3, #32]
}
 800d5b0:	bf00      	nop
 800d5b2:	371c      	adds	r7, #28
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ba:	4770      	bx	lr
 800d5bc:	40010000 	.word	0x40010000
 800d5c0:	40010400 	.word	0x40010400

0800d5c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d5c4:	b480      	push	{r7}
 800d5c6:	b087      	sub	sp, #28
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
 800d5cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	6a1b      	ldr	r3, [r3, #32]
 800d5d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	6a1b      	ldr	r3, [r3, #32]
 800d5de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	685b      	ldr	r3, [r3, #4]
 800d5e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	69db      	ldr	r3, [r3, #28]
 800d5ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d5f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d5fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d5fc:	683b      	ldr	r3, [r7, #0]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	021b      	lsls	r3, r3, #8
 800d602:	68fa      	ldr	r2, [r7, #12]
 800d604:	4313      	orrs	r3, r2
 800d606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d608:	693b      	ldr	r3, [r7, #16]
 800d60a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d60e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d610:	683b      	ldr	r3, [r7, #0]
 800d612:	689b      	ldr	r3, [r3, #8]
 800d614:	031b      	lsls	r3, r3, #12
 800d616:	693a      	ldr	r2, [r7, #16]
 800d618:	4313      	orrs	r3, r2
 800d61a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	4a12      	ldr	r2, [pc, #72]	; (800d668 <TIM_OC4_SetConfig+0xa4>)
 800d620:	4293      	cmp	r3, r2
 800d622:	d003      	beq.n	800d62c <TIM_OC4_SetConfig+0x68>
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	4a11      	ldr	r2, [pc, #68]	; (800d66c <TIM_OC4_SetConfig+0xa8>)
 800d628:	4293      	cmp	r3, r2
 800d62a:	d109      	bne.n	800d640 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d62c:	697b      	ldr	r3, [r7, #20]
 800d62e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d632:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d634:	683b      	ldr	r3, [r7, #0]
 800d636:	695b      	ldr	r3, [r3, #20]
 800d638:	019b      	lsls	r3, r3, #6
 800d63a:	697a      	ldr	r2, [r7, #20]
 800d63c:	4313      	orrs	r3, r2
 800d63e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	697a      	ldr	r2, [r7, #20]
 800d644:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	68fa      	ldr	r2, [r7, #12]
 800d64a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d64c:	683b      	ldr	r3, [r7, #0]
 800d64e:	685a      	ldr	r2, [r3, #4]
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	693a      	ldr	r2, [r7, #16]
 800d658:	621a      	str	r2, [r3, #32]
}
 800d65a:	bf00      	nop
 800d65c:	371c      	adds	r7, #28
 800d65e:	46bd      	mov	sp, r7
 800d660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d664:	4770      	bx	lr
 800d666:	bf00      	nop
 800d668:	40010000 	.word	0x40010000
 800d66c:	40010400 	.word	0x40010400

0800d670 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d670:	b480      	push	{r7}
 800d672:	b087      	sub	sp, #28
 800d674:	af00      	add	r7, sp, #0
 800d676:	60f8      	str	r0, [r7, #12]
 800d678:	60b9      	str	r1, [r7, #8]
 800d67a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	6a1b      	ldr	r3, [r3, #32]
 800d680:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	6a1b      	ldr	r3, [r3, #32]
 800d686:	f023 0201 	bic.w	r2, r3, #1
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	699b      	ldr	r3, [r3, #24]
 800d692:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d694:	693b      	ldr	r3, [r7, #16]
 800d696:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d69a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	011b      	lsls	r3, r3, #4
 800d6a0:	693a      	ldr	r2, [r7, #16]
 800d6a2:	4313      	orrs	r3, r2
 800d6a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d6a6:	697b      	ldr	r3, [r7, #20]
 800d6a8:	f023 030a 	bic.w	r3, r3, #10
 800d6ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d6ae:	697a      	ldr	r2, [r7, #20]
 800d6b0:	68bb      	ldr	r3, [r7, #8]
 800d6b2:	4313      	orrs	r3, r2
 800d6b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	693a      	ldr	r2, [r7, #16]
 800d6ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	697a      	ldr	r2, [r7, #20]
 800d6c0:	621a      	str	r2, [r3, #32]
}
 800d6c2:	bf00      	nop
 800d6c4:	371c      	adds	r7, #28
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6cc:	4770      	bx	lr

0800d6ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d6ce:	b480      	push	{r7}
 800d6d0:	b087      	sub	sp, #28
 800d6d2:	af00      	add	r7, sp, #0
 800d6d4:	60f8      	str	r0, [r7, #12]
 800d6d6:	60b9      	str	r1, [r7, #8]
 800d6d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	6a1b      	ldr	r3, [r3, #32]
 800d6de:	f023 0210 	bic.w	r2, r3, #16
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	699b      	ldr	r3, [r3, #24]
 800d6ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	6a1b      	ldr	r3, [r3, #32]
 800d6f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d6f2:	697b      	ldr	r3, [r7, #20]
 800d6f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d6f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	031b      	lsls	r3, r3, #12
 800d6fe:	697a      	ldr	r2, [r7, #20]
 800d700:	4313      	orrs	r3, r2
 800d702:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d704:	693b      	ldr	r3, [r7, #16]
 800d706:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d70a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d70c:	68bb      	ldr	r3, [r7, #8]
 800d70e:	011b      	lsls	r3, r3, #4
 800d710:	693a      	ldr	r2, [r7, #16]
 800d712:	4313      	orrs	r3, r2
 800d714:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	697a      	ldr	r2, [r7, #20]
 800d71a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	693a      	ldr	r2, [r7, #16]
 800d720:	621a      	str	r2, [r3, #32]
}
 800d722:	bf00      	nop
 800d724:	371c      	adds	r7, #28
 800d726:	46bd      	mov	sp, r7
 800d728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72c:	4770      	bx	lr

0800d72e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d72e:	b480      	push	{r7}
 800d730:	b085      	sub	sp, #20
 800d732:	af00      	add	r7, sp, #0
 800d734:	6078      	str	r0, [r7, #4]
 800d736:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	689b      	ldr	r3, [r3, #8]
 800d73c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d744:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d746:	683a      	ldr	r2, [r7, #0]
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	4313      	orrs	r3, r2
 800d74c:	f043 0307 	orr.w	r3, r3, #7
 800d750:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	68fa      	ldr	r2, [r7, #12]
 800d756:	609a      	str	r2, [r3, #8]
}
 800d758:	bf00      	nop
 800d75a:	3714      	adds	r7, #20
 800d75c:	46bd      	mov	sp, r7
 800d75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d762:	4770      	bx	lr

0800d764 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d764:	b480      	push	{r7}
 800d766:	b087      	sub	sp, #28
 800d768:	af00      	add	r7, sp, #0
 800d76a:	60f8      	str	r0, [r7, #12]
 800d76c:	60b9      	str	r1, [r7, #8]
 800d76e:	607a      	str	r2, [r7, #4]
 800d770:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	689b      	ldr	r3, [r3, #8]
 800d776:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d778:	697b      	ldr	r3, [r7, #20]
 800d77a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d77e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d780:	683b      	ldr	r3, [r7, #0]
 800d782:	021a      	lsls	r2, r3, #8
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	431a      	orrs	r2, r3
 800d788:	68bb      	ldr	r3, [r7, #8]
 800d78a:	4313      	orrs	r3, r2
 800d78c:	697a      	ldr	r2, [r7, #20]
 800d78e:	4313      	orrs	r3, r2
 800d790:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	697a      	ldr	r2, [r7, #20]
 800d796:	609a      	str	r2, [r3, #8]
}
 800d798:	bf00      	nop
 800d79a:	371c      	adds	r7, #28
 800d79c:	46bd      	mov	sp, r7
 800d79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a2:	4770      	bx	lr

0800d7a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d7a4:	b480      	push	{r7}
 800d7a6:	b087      	sub	sp, #28
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	60f8      	str	r0, [r7, #12]
 800d7ac:	60b9      	str	r1, [r7, #8]
 800d7ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d7b0:	68bb      	ldr	r3, [r7, #8]
 800d7b2:	f003 031f 	and.w	r3, r3, #31
 800d7b6:	2201      	movs	r2, #1
 800d7b8:	fa02 f303 	lsl.w	r3, r2, r3
 800d7bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	6a1a      	ldr	r2, [r3, #32]
 800d7c2:	697b      	ldr	r3, [r7, #20]
 800d7c4:	43db      	mvns	r3, r3
 800d7c6:	401a      	ands	r2, r3
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	6a1a      	ldr	r2, [r3, #32]
 800d7d0:	68bb      	ldr	r3, [r7, #8]
 800d7d2:	f003 031f 	and.w	r3, r3, #31
 800d7d6:	6879      	ldr	r1, [r7, #4]
 800d7d8:	fa01 f303 	lsl.w	r3, r1, r3
 800d7dc:	431a      	orrs	r2, r3
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	621a      	str	r2, [r3, #32]
}
 800d7e2:	bf00      	nop
 800d7e4:	371c      	adds	r7, #28
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ec:	4770      	bx	lr

0800d7ee <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d7ee:	b580      	push	{r7, lr}
 800d7f0:	b084      	sub	sp, #16
 800d7f2:	af00      	add	r7, sp, #0
 800d7f4:	6078      	str	r0, [r7, #4]
 800d7f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800d7f8:	683b      	ldr	r3, [r7, #0]
 800d7fa:	2b04      	cmp	r3, #4
 800d7fc:	d00d      	beq.n	800d81a <HAL_TIMEx_PWMN_Start_IT+0x2c>
 800d7fe:	2b08      	cmp	r3, #8
 800d800:	d014      	beq.n	800d82c <HAL_TIMEx_PWMN_Start_IT+0x3e>
 800d802:	2b00      	cmp	r3, #0
 800d804:	d000      	beq.n	800d808 <HAL_TIMEx_PWMN_Start_IT+0x1a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 800d806:	e01a      	b.n	800d83e <HAL_TIMEx_PWMN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	68da      	ldr	r2, [r3, #12]
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	f042 0202 	orr.w	r2, r2, #2
 800d816:	60da      	str	r2, [r3, #12]
      break;
 800d818:	e011      	b.n	800d83e <HAL_TIMEx_PWMN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	68da      	ldr	r2, [r3, #12]
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	f042 0204 	orr.w	r2, r2, #4
 800d828:	60da      	str	r2, [r3, #12]
      break;
 800d82a:	e008      	b.n	800d83e <HAL_TIMEx_PWMN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	68da      	ldr	r2, [r3, #12]
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	f042 0208 	orr.w	r2, r2, #8
 800d83a:	60da      	str	r2, [r3, #12]
      break;
 800d83c:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	68da      	ldr	r2, [r3, #12]
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d84c:	60da      	str	r2, [r3, #12]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	2204      	movs	r2, #4
 800d854:	6839      	ldr	r1, [r7, #0]
 800d856:	4618      	mov	r0, r3
 800d858:	f000 f93f 	bl	800dada <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d86a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	689b      	ldr	r3, [r3, #8]
 800d872:	f003 0307 	and.w	r3, r3, #7
 800d876:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	2b06      	cmp	r3, #6
 800d87c:	d007      	beq.n	800d88e <HAL_TIMEx_PWMN_Start_IT+0xa0>
  {
    __HAL_TIM_ENABLE(htim);
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	681a      	ldr	r2, [r3, #0]
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	f042 0201 	orr.w	r2, r2, #1
 800d88c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d88e:	2300      	movs	r3, #0
}
 800d890:	4618      	mov	r0, r3
 800d892:	3710      	adds	r7, #16
 800d894:	46bd      	mov	sp, r7
 800d896:	bd80      	pop	{r7, pc}

0800d898 <HAL_TIMEx_PWMN_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b084      	sub	sp, #16
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	6078      	str	r0, [r7, #4]
 800d8a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccer;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800d8a2:	683b      	ldr	r3, [r7, #0]
 800d8a4:	2b04      	cmp	r3, #4
 800d8a6:	d00d      	beq.n	800d8c4 <HAL_TIMEx_PWMN_Stop_IT+0x2c>
 800d8a8:	2b08      	cmp	r3, #8
 800d8aa:	d014      	beq.n	800d8d6 <HAL_TIMEx_PWMN_Stop_IT+0x3e>
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d000      	beq.n	800d8b2 <HAL_TIMEx_PWMN_Stop_IT+0x1a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 800d8b0:	e01a      	b.n	800d8e8 <HAL_TIMEx_PWMN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	68da      	ldr	r2, [r3, #12]
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	f022 0202 	bic.w	r2, r2, #2
 800d8c0:	60da      	str	r2, [r3, #12]
      break;
 800d8c2:	e011      	b.n	800d8e8 <HAL_TIMEx_PWMN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	68da      	ldr	r2, [r3, #12]
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	f022 0204 	bic.w	r2, r2, #4
 800d8d2:	60da      	str	r2, [r3, #12]
      break;
 800d8d4:	e008      	b.n	800d8e8 <HAL_TIMEx_PWMN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	68da      	ldr	r2, [r3, #12]
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	f022 0208 	bic.w	r2, r2, #8
 800d8e4:	60da      	str	r2, [r3, #12]
      break;
 800d8e6:	bf00      	nop
  }

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	6839      	ldr	r1, [r7, #0]
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	f000 f8f2 	bl	800dada <TIM_CCxNChannelCmd>

  /* Disable the TIM Break interrupt (only if no more channel is active) */
  tmpccer = htim->Instance->CCER;
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	6a1b      	ldr	r3, [r3, #32]
 800d8fc:	60fb      	str	r3, [r7, #12]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 800d8fe:	68fa      	ldr	r2, [r7, #12]
 800d900:	f240 4344 	movw	r3, #1092	; 0x444
 800d904:	4013      	ands	r3, r2
 800d906:	2b00      	cmp	r3, #0
 800d908:	d107      	bne.n	800d91a <HAL_TIMEx_PWMN_Stop_IT+0x82>
  {
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	68da      	ldr	r2, [r3, #12]
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d918:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	6a1a      	ldr	r2, [r3, #32]
 800d920:	f241 1311 	movw	r3, #4369	; 0x1111
 800d924:	4013      	ands	r3, r2
 800d926:	2b00      	cmp	r3, #0
 800d928:	d10f      	bne.n	800d94a <HAL_TIMEx_PWMN_Stop_IT+0xb2>
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	6a1a      	ldr	r2, [r3, #32]
 800d930:	f240 4344 	movw	r3, #1092	; 0x444
 800d934:	4013      	ands	r3, r2
 800d936:	2b00      	cmp	r3, #0
 800d938:	d107      	bne.n	800d94a <HAL_TIMEx_PWMN_Stop_IT+0xb2>
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d948:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	6a1a      	ldr	r2, [r3, #32]
 800d950:	f241 1311 	movw	r3, #4369	; 0x1111
 800d954:	4013      	ands	r3, r2
 800d956:	2b00      	cmp	r3, #0
 800d958:	d10f      	bne.n	800d97a <HAL_TIMEx_PWMN_Stop_IT+0xe2>
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	6a1a      	ldr	r2, [r3, #32]
 800d960:	f240 4344 	movw	r3, #1092	; 0x444
 800d964:	4013      	ands	r3, r2
 800d966:	2b00      	cmp	r3, #0
 800d968:	d107      	bne.n	800d97a <HAL_TIMEx_PWMN_Stop_IT+0xe2>
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	681a      	ldr	r2, [r3, #0]
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	f022 0201 	bic.w	r2, r2, #1
 800d978:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800d97a:	2300      	movs	r3, #0
}
 800d97c:	4618      	mov	r0, r3
 800d97e:	3710      	adds	r7, #16
 800d980:	46bd      	mov	sp, r7
 800d982:	bd80      	pop	{r7, pc}

0800d984 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d984:	b480      	push	{r7}
 800d986:	b085      	sub	sp, #20
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]
 800d98c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d994:	2b01      	cmp	r3, #1
 800d996:	d101      	bne.n	800d99c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d998:	2302      	movs	r3, #2
 800d99a:	e032      	b.n	800da02 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	2201      	movs	r2, #1
 800d9a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	2202      	movs	r2, #2
 800d9a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	685b      	ldr	r3, [r3, #4]
 800d9b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	689b      	ldr	r3, [r3, #8]
 800d9ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d9c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d9c4:	683b      	ldr	r3, [r7, #0]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	68fa      	ldr	r2, [r7, #12]
 800d9ca:	4313      	orrs	r3, r2
 800d9cc:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800d9ce:	68bb      	ldr	r3, [r7, #8]
 800d9d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d9d4:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d9d6:	683b      	ldr	r3, [r7, #0]
 800d9d8:	685b      	ldr	r3, [r3, #4]
 800d9da:	68ba      	ldr	r2, [r7, #8]
 800d9dc:	4313      	orrs	r3, r2
 800d9de:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	68fa      	ldr	r2, [r7, #12]
 800d9e6:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	68ba      	ldr	r2, [r7, #8]
 800d9ee:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	2201      	movs	r2, #1
 800d9f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800da00:	2300      	movs	r3, #0
}
 800da02:	4618      	mov	r0, r3
 800da04:	3714      	adds	r7, #20
 800da06:	46bd      	mov	sp, r7
 800da08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0c:	4770      	bx	lr

0800da0e <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800da0e:	b480      	push	{r7}
 800da10:	b085      	sub	sp, #20
 800da12:	af00      	add	r7, sp, #0
 800da14:	6078      	str	r0, [r7, #4]
 800da16:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800da18:	2300      	movs	r3, #0
 800da1a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800da22:	2b01      	cmp	r3, #1
 800da24:	d101      	bne.n	800da2a <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800da26:	2302      	movs	r3, #2
 800da28:	e03d      	b.n	800daa6 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	2201      	movs	r2, #1
 800da2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800da38:	683b      	ldr	r3, [r7, #0]
 800da3a:	68db      	ldr	r3, [r3, #12]
 800da3c:	4313      	orrs	r3, r2
 800da3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	689b      	ldr	r3, [r3, #8]
 800da4a:	4313      	orrs	r3, r2
 800da4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800da54:	683b      	ldr	r3, [r7, #0]
 800da56:	685b      	ldr	r3, [r3, #4]
 800da58:	4313      	orrs	r3, r2
 800da5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800da62:	683b      	ldr	r3, [r7, #0]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	4313      	orrs	r3, r2
 800da68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800da70:	683b      	ldr	r3, [r7, #0]
 800da72:	691b      	ldr	r3, [r3, #16]
 800da74:	4313      	orrs	r3, r2
 800da76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800da7e:	683b      	ldr	r3, [r7, #0]
 800da80:	695b      	ldr	r3, [r3, #20]
 800da82:	4313      	orrs	r3, r2
 800da84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800da8c:	683b      	ldr	r3, [r7, #0]
 800da8e:	69db      	ldr	r3, [r3, #28]
 800da90:	4313      	orrs	r3, r2
 800da92:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	68fa      	ldr	r2, [r7, #12]
 800da9a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	2200      	movs	r2, #0
 800daa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800daa4:	2300      	movs	r3, #0
}
 800daa6:	4618      	mov	r0, r3
 800daa8:	3714      	adds	r7, #20
 800daaa:	46bd      	mov	sp, r7
 800daac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab0:	4770      	bx	lr

0800dab2 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dab2:	b480      	push	{r7}
 800dab4:	b083      	sub	sp, #12
 800dab6:	af00      	add	r7, sp, #0
 800dab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800daba:	bf00      	nop
 800dabc:	370c      	adds	r7, #12
 800dabe:	46bd      	mov	sp, r7
 800dac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac4:	4770      	bx	lr

0800dac6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dac6:	b480      	push	{r7}
 800dac8:	b083      	sub	sp, #12
 800daca:	af00      	add	r7, sp, #0
 800dacc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dace:	bf00      	nop
 800dad0:	370c      	adds	r7, #12
 800dad2:	46bd      	mov	sp, r7
 800dad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad8:	4770      	bx	lr

0800dada <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800dada:	b480      	push	{r7}
 800dadc:	b087      	sub	sp, #28
 800dade:	af00      	add	r7, sp, #0
 800dae0:	60f8      	str	r0, [r7, #12]
 800dae2:	60b9      	str	r1, [r7, #8]
 800dae4:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800dae6:	68bb      	ldr	r3, [r7, #8]
 800dae8:	f003 031f 	and.w	r3, r3, #31
 800daec:	2204      	movs	r2, #4
 800daee:	fa02 f303 	lsl.w	r3, r2, r3
 800daf2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	6a1a      	ldr	r2, [r3, #32]
 800daf8:	697b      	ldr	r3, [r7, #20]
 800dafa:	43db      	mvns	r3, r3
 800dafc:	401a      	ands	r2, r3
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	6a1a      	ldr	r2, [r3, #32]
 800db06:	68bb      	ldr	r3, [r7, #8]
 800db08:	f003 031f 	and.w	r3, r3, #31
 800db0c:	6879      	ldr	r1, [r7, #4]
 800db0e:	fa01 f303 	lsl.w	r3, r1, r3
 800db12:	431a      	orrs	r2, r3
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	621a      	str	r2, [r3, #32]
}
 800db18:	bf00      	nop
 800db1a:	371c      	adds	r7, #28
 800db1c:	46bd      	mov	sp, r7
 800db1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db22:	4770      	bx	lr

0800db24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b082      	sub	sp, #8
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d101      	bne.n	800db36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800db32:	2301      	movs	r3, #1
 800db34:	e03f      	b.n	800dbb6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800db3c:	b2db      	uxtb	r3, r3
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d106      	bne.n	800db50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	2200      	movs	r2, #0
 800db46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800db4a:	6878      	ldr	r0, [r7, #4]
 800db4c:	f003 fe8c 	bl	8011868 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	2224      	movs	r2, #36	; 0x24
 800db54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	68da      	ldr	r2, [r3, #12]
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800db66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800db68:	6878      	ldr	r0, [r7, #4]
 800db6a:	f000 fa65 	bl	800e038 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	691a      	ldr	r2, [r3, #16]
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800db7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	695a      	ldr	r2, [r3, #20]
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800db8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	68da      	ldr	r2, [r3, #12]
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800db9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	2200      	movs	r2, #0
 800dba2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	2220      	movs	r2, #32
 800dba8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	2220      	movs	r2, #32
 800dbb0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800dbb4:	2300      	movs	r3, #0
}
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	3708      	adds	r7, #8
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	bd80      	pop	{r7, pc}
	...

0800dbc0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b088      	sub	sp, #32
 800dbc4:	af00      	add	r7, sp, #0
 800dbc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	68db      	ldr	r3, [r3, #12]
 800dbd6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	695b      	ldr	r3, [r3, #20]
 800dbde:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800dbe0:	2300      	movs	r3, #0
 800dbe2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800dbe8:	69fb      	ldr	r3, [r7, #28]
 800dbea:	f003 030f 	and.w	r3, r3, #15
 800dbee:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800dbf0:	693b      	ldr	r3, [r7, #16]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d10d      	bne.n	800dc12 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800dbf6:	69fb      	ldr	r3, [r7, #28]
 800dbf8:	f003 0320 	and.w	r3, r3, #32
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d008      	beq.n	800dc12 <HAL_UART_IRQHandler+0x52>
 800dc00:	69bb      	ldr	r3, [r7, #24]
 800dc02:	f003 0320 	and.w	r3, r3, #32
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d003      	beq.n	800dc12 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800dc0a:	6878      	ldr	r0, [r7, #4]
 800dc0c:	f000 f992 	bl	800df34 <UART_Receive_IT>
      return;
 800dc10:	e0cc      	b.n	800ddac <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800dc12:	693b      	ldr	r3, [r7, #16]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	f000 80ab 	beq.w	800dd70 <HAL_UART_IRQHandler+0x1b0>
 800dc1a:	697b      	ldr	r3, [r7, #20]
 800dc1c:	f003 0301 	and.w	r3, r3, #1
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d105      	bne.n	800dc30 <HAL_UART_IRQHandler+0x70>
 800dc24:	69bb      	ldr	r3, [r7, #24]
 800dc26:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	f000 80a0 	beq.w	800dd70 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800dc30:	69fb      	ldr	r3, [r7, #28]
 800dc32:	f003 0301 	and.w	r3, r3, #1
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d00a      	beq.n	800dc50 <HAL_UART_IRQHandler+0x90>
 800dc3a:	69bb      	ldr	r3, [r7, #24]
 800dc3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d005      	beq.n	800dc50 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc48:	f043 0201 	orr.w	r2, r3, #1
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800dc50:	69fb      	ldr	r3, [r7, #28]
 800dc52:	f003 0304 	and.w	r3, r3, #4
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d00a      	beq.n	800dc70 <HAL_UART_IRQHandler+0xb0>
 800dc5a:	697b      	ldr	r3, [r7, #20]
 800dc5c:	f003 0301 	and.w	r3, r3, #1
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d005      	beq.n	800dc70 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc68:	f043 0202 	orr.w	r2, r3, #2
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800dc70:	69fb      	ldr	r3, [r7, #28]
 800dc72:	f003 0302 	and.w	r3, r3, #2
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d00a      	beq.n	800dc90 <HAL_UART_IRQHandler+0xd0>
 800dc7a:	697b      	ldr	r3, [r7, #20]
 800dc7c:	f003 0301 	and.w	r3, r3, #1
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d005      	beq.n	800dc90 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc88:	f043 0204 	orr.w	r2, r3, #4
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800dc90:	69fb      	ldr	r3, [r7, #28]
 800dc92:	f003 0308 	and.w	r3, r3, #8
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d00a      	beq.n	800dcb0 <HAL_UART_IRQHandler+0xf0>
 800dc9a:	697b      	ldr	r3, [r7, #20]
 800dc9c:	f003 0301 	and.w	r3, r3, #1
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d005      	beq.n	800dcb0 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dca8:	f043 0208 	orr.w	r2, r3, #8
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d078      	beq.n	800ddaa <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800dcb8:	69fb      	ldr	r3, [r7, #28]
 800dcba:	f003 0320 	and.w	r3, r3, #32
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d007      	beq.n	800dcd2 <HAL_UART_IRQHandler+0x112>
 800dcc2:	69bb      	ldr	r3, [r7, #24]
 800dcc4:	f003 0320 	and.w	r3, r3, #32
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d002      	beq.n	800dcd2 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800dccc:	6878      	ldr	r0, [r7, #4]
 800dcce:	f000 f931 	bl	800df34 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	695b      	ldr	r3, [r3, #20]
 800dcd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dcdc:	2b40      	cmp	r3, #64	; 0x40
 800dcde:	bf0c      	ite	eq
 800dce0:	2301      	moveq	r3, #1
 800dce2:	2300      	movne	r3, #0
 800dce4:	b2db      	uxtb	r3, r3
 800dce6:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcec:	f003 0308 	and.w	r3, r3, #8
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d102      	bne.n	800dcfa <HAL_UART_IRQHandler+0x13a>
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d031      	beq.n	800dd5e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800dcfa:	6878      	ldr	r0, [r7, #4]
 800dcfc:	f000 f87a 	bl	800ddf4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	695b      	ldr	r3, [r3, #20]
 800dd06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd0a:	2b40      	cmp	r3, #64	; 0x40
 800dd0c:	d123      	bne.n	800dd56 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	695a      	ldr	r2, [r3, #20]
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dd1c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d013      	beq.n	800dd4e <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd2a:	4a22      	ldr	r2, [pc, #136]	; (800ddb4 <HAL_UART_IRQHandler+0x1f4>)
 800dd2c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd32:	4618      	mov	r0, r3
 800dd34:	f7fc fc16 	bl	800a564 <HAL_DMA_Abort_IT>
 800dd38:	4603      	mov	r3, r0
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d016      	beq.n	800dd6c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd44:	687a      	ldr	r2, [r7, #4]
 800dd46:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800dd48:	4610      	mov	r0, r2
 800dd4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dd4c:	e00e      	b.n	800dd6c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800dd4e:	6878      	ldr	r0, [r7, #4]
 800dd50:	f000 f846 	bl	800dde0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dd54:	e00a      	b.n	800dd6c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800dd56:	6878      	ldr	r0, [r7, #4]
 800dd58:	f000 f842 	bl	800dde0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dd5c:	e006      	b.n	800dd6c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800dd5e:	6878      	ldr	r0, [r7, #4]
 800dd60:	f000 f83e 	bl	800dde0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	2200      	movs	r2, #0
 800dd68:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800dd6a:	e01e      	b.n	800ddaa <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800dd6c:	bf00      	nop
    return;
 800dd6e:	e01c      	b.n	800ddaa <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800dd70:	69fb      	ldr	r3, [r7, #28]
 800dd72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d008      	beq.n	800dd8c <HAL_UART_IRQHandler+0x1cc>
 800dd7a:	69bb      	ldr	r3, [r7, #24]
 800dd7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d003      	beq.n	800dd8c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 800dd84:	6878      	ldr	r0, [r7, #4]
 800dd86:	f000 f867 	bl	800de58 <UART_Transmit_IT>
    return;
 800dd8a:	e00f      	b.n	800ddac <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800dd8c:	69fb      	ldr	r3, [r7, #28]
 800dd8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d00a      	beq.n	800ddac <HAL_UART_IRQHandler+0x1ec>
 800dd96:	69bb      	ldr	r3, [r7, #24]
 800dd98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d005      	beq.n	800ddac <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800dda0:	6878      	ldr	r0, [r7, #4]
 800dda2:	f000 f8af 	bl	800df04 <UART_EndTransmit_IT>
    return;
 800dda6:	bf00      	nop
 800dda8:	e000      	b.n	800ddac <HAL_UART_IRQHandler+0x1ec>
    return;
 800ddaa:	bf00      	nop
  }
}
 800ddac:	3720      	adds	r7, #32
 800ddae:	46bd      	mov	sp, r7
 800ddb0:	bd80      	pop	{r7, pc}
 800ddb2:	bf00      	nop
 800ddb4:	0800de31 	.word	0x0800de31

0800ddb8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ddb8:	b480      	push	{r7}
 800ddba:	b083      	sub	sp, #12
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800ddc0:	bf00      	nop
 800ddc2:	370c      	adds	r7, #12
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddca:	4770      	bx	lr

0800ddcc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ddcc:	b480      	push	{r7}
 800ddce:	b083      	sub	sp, #12
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800ddd4:	bf00      	nop
 800ddd6:	370c      	adds	r7, #12
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddde:	4770      	bx	lr

0800dde0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800dde0:	b480      	push	{r7}
 800dde2:	b083      	sub	sp, #12
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800dde8:	bf00      	nop
 800ddea:	370c      	adds	r7, #12
 800ddec:	46bd      	mov	sp, r7
 800ddee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf2:	4770      	bx	lr

0800ddf4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ddf4:	b480      	push	{r7}
 800ddf6:	b083      	sub	sp, #12
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	68da      	ldr	r2, [r3, #12]
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800de0a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	695a      	ldr	r2, [r3, #20]
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	f022 0201 	bic.w	r2, r2, #1
 800de1a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	2220      	movs	r2, #32
 800de20:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800de24:	bf00      	nop
 800de26:	370c      	adds	r7, #12
 800de28:	46bd      	mov	sp, r7
 800de2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de2e:	4770      	bx	lr

0800de30 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800de30:	b580      	push	{r7, lr}
 800de32:	b084      	sub	sp, #16
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de3c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	2200      	movs	r2, #0
 800de42:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	2200      	movs	r2, #0
 800de48:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800de4a:	68f8      	ldr	r0, [r7, #12]
 800de4c:	f7ff ffc8 	bl	800dde0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800de50:	bf00      	nop
 800de52:	3710      	adds	r7, #16
 800de54:	46bd      	mov	sp, r7
 800de56:	bd80      	pop	{r7, pc}

0800de58 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800de58:	b480      	push	{r7}
 800de5a:	b085      	sub	sp, #20
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800de66:	b2db      	uxtb	r3, r3
 800de68:	2b21      	cmp	r3, #33	; 0x21
 800de6a:	d144      	bne.n	800def6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	689b      	ldr	r3, [r3, #8]
 800de70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800de74:	d11a      	bne.n	800deac <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	6a1b      	ldr	r3, [r3, #32]
 800de7a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	881b      	ldrh	r3, [r3, #0]
 800de80:	461a      	mov	r2, r3
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800de8a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	691b      	ldr	r3, [r3, #16]
 800de90:	2b00      	cmp	r3, #0
 800de92:	d105      	bne.n	800dea0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	6a1b      	ldr	r3, [r3, #32]
 800de98:	1c9a      	adds	r2, r3, #2
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	621a      	str	r2, [r3, #32]
 800de9e:	e00e      	b.n	800debe <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	6a1b      	ldr	r3, [r3, #32]
 800dea4:	1c5a      	adds	r2, r3, #1
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	621a      	str	r2, [r3, #32]
 800deaa:	e008      	b.n	800debe <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	6a1b      	ldr	r3, [r3, #32]
 800deb0:	1c59      	adds	r1, r3, #1
 800deb2:	687a      	ldr	r2, [r7, #4]
 800deb4:	6211      	str	r1, [r2, #32]
 800deb6:	781a      	ldrb	r2, [r3, #0]
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800dec2:	b29b      	uxth	r3, r3
 800dec4:	3b01      	subs	r3, #1
 800dec6:	b29b      	uxth	r3, r3
 800dec8:	687a      	ldr	r2, [r7, #4]
 800deca:	4619      	mov	r1, r3
 800decc:	84d1      	strh	r1, [r2, #38]	; 0x26
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d10f      	bne.n	800def2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	681b      	ldr	r3, [r3, #0]
 800ded6:	68da      	ldr	r2, [r3, #12]
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dee0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	68da      	ldr	r2, [r3, #12]
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800def0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800def2:	2300      	movs	r3, #0
 800def4:	e000      	b.n	800def8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800def6:	2302      	movs	r3, #2
  }
}
 800def8:	4618      	mov	r0, r3
 800defa:	3714      	adds	r7, #20
 800defc:	46bd      	mov	sp, r7
 800defe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df02:	4770      	bx	lr

0800df04 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800df04:	b580      	push	{r7, lr}
 800df06:	b082      	sub	sp, #8
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	68da      	ldr	r2, [r3, #12]
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800df1a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	2220      	movs	r2, #32
 800df20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800df24:	6878      	ldr	r0, [r7, #4]
 800df26:	f7ff ff47 	bl	800ddb8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800df2a:	2300      	movs	r3, #0
}
 800df2c:	4618      	mov	r0, r3
 800df2e:	3708      	adds	r7, #8
 800df30:	46bd      	mov	sp, r7
 800df32:	bd80      	pop	{r7, pc}

0800df34 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800df34:	b580      	push	{r7, lr}
 800df36:	b084      	sub	sp, #16
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800df42:	b2db      	uxtb	r3, r3
 800df44:	2b22      	cmp	r3, #34	; 0x22
 800df46:	d171      	bne.n	800e02c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	689b      	ldr	r3, [r3, #8]
 800df4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800df50:	d123      	bne.n	800df9a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df56:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	691b      	ldr	r3, [r3, #16]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d10e      	bne.n	800df7e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	685b      	ldr	r3, [r3, #4]
 800df66:	b29b      	uxth	r3, r3
 800df68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df6c:	b29a      	uxth	r2, r3
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df76:	1c9a      	adds	r2, r3, #2
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	629a      	str	r2, [r3, #40]	; 0x28
 800df7c:	e029      	b.n	800dfd2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	685b      	ldr	r3, [r3, #4]
 800df84:	b29b      	uxth	r3, r3
 800df86:	b2db      	uxtb	r3, r3
 800df88:	b29a      	uxth	r2, r3
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800df92:	1c5a      	adds	r2, r3, #1
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	629a      	str	r2, [r3, #40]	; 0x28
 800df98:	e01b      	b.n	800dfd2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	691b      	ldr	r3, [r3, #16]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d10a      	bne.n	800dfb8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	6858      	ldr	r0, [r3, #4]
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfac:	1c59      	adds	r1, r3, #1
 800dfae:	687a      	ldr	r2, [r7, #4]
 800dfb0:	6291      	str	r1, [r2, #40]	; 0x28
 800dfb2:	b2c2      	uxtb	r2, r0
 800dfb4:	701a      	strb	r2, [r3, #0]
 800dfb6:	e00c      	b.n	800dfd2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	685b      	ldr	r3, [r3, #4]
 800dfbe:	b2da      	uxtb	r2, r3
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfc4:	1c58      	adds	r0, r3, #1
 800dfc6:	6879      	ldr	r1, [r7, #4]
 800dfc8:	6288      	str	r0, [r1, #40]	; 0x28
 800dfca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800dfce:	b2d2      	uxtb	r2, r2
 800dfd0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800dfd6:	b29b      	uxth	r3, r3
 800dfd8:	3b01      	subs	r3, #1
 800dfda:	b29b      	uxth	r3, r3
 800dfdc:	687a      	ldr	r2, [r7, #4]
 800dfde:	4619      	mov	r1, r3
 800dfe0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d120      	bne.n	800e028 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	68da      	ldr	r2, [r3, #12]
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	f022 0220 	bic.w	r2, r2, #32
 800dff4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	68da      	ldr	r2, [r3, #12]
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e004:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	695a      	ldr	r2, [r3, #20]
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	f022 0201 	bic.w	r2, r2, #1
 800e014:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	2220      	movs	r2, #32
 800e01a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800e01e:	6878      	ldr	r0, [r7, #4]
 800e020:	f7ff fed4 	bl	800ddcc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800e024:	2300      	movs	r3, #0
 800e026:	e002      	b.n	800e02e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800e028:	2300      	movs	r3, #0
 800e02a:	e000      	b.n	800e02e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800e02c:	2302      	movs	r3, #2
  }
}
 800e02e:	4618      	mov	r0, r3
 800e030:	3710      	adds	r7, #16
 800e032:	46bd      	mov	sp, r7
 800e034:	bd80      	pop	{r7, pc}
	...

0800e038 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e038:	b5b0      	push	{r4, r5, r7, lr}
 800e03a:	b084      	sub	sp, #16
 800e03c:	af00      	add	r7, sp, #0
 800e03e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	691b      	ldr	r3, [r3, #16]
 800e046:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	68da      	ldr	r2, [r3, #12]
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	430a      	orrs	r2, r1
 800e054:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	689a      	ldr	r2, [r3, #8]
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	691b      	ldr	r3, [r3, #16]
 800e05e:	431a      	orrs	r2, r3
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	695b      	ldr	r3, [r3, #20]
 800e064:	431a      	orrs	r2, r3
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	69db      	ldr	r3, [r3, #28]
 800e06a:	4313      	orrs	r3, r2
 800e06c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	68db      	ldr	r3, [r3, #12]
 800e074:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800e078:	f023 030c 	bic.w	r3, r3, #12
 800e07c:	687a      	ldr	r2, [r7, #4]
 800e07e:	6812      	ldr	r2, [r2, #0]
 800e080:	68f9      	ldr	r1, [r7, #12]
 800e082:	430b      	orrs	r3, r1
 800e084:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	695b      	ldr	r3, [r3, #20]
 800e08c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	699a      	ldr	r2, [r3, #24]
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	430a      	orrs	r2, r1
 800e09a:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	69db      	ldr	r3, [r3, #28]
 800e0a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e0a4:	f040 80e4 	bne.w	800e270 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	4aab      	ldr	r2, [pc, #684]	; (800e35c <UART_SetConfig+0x324>)
 800e0ae:	4293      	cmp	r3, r2
 800e0b0:	d004      	beq.n	800e0bc <UART_SetConfig+0x84>
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	4aaa      	ldr	r2, [pc, #680]	; (800e360 <UART_SetConfig+0x328>)
 800e0b8:	4293      	cmp	r3, r2
 800e0ba:	d16c      	bne.n	800e196 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800e0bc:	f7fd faa0 	bl	800b600 <HAL_RCC_GetPCLK2Freq>
 800e0c0:	4602      	mov	r2, r0
 800e0c2:	4613      	mov	r3, r2
 800e0c4:	009b      	lsls	r3, r3, #2
 800e0c6:	4413      	add	r3, r2
 800e0c8:	009a      	lsls	r2, r3, #2
 800e0ca:	441a      	add	r2, r3
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	685b      	ldr	r3, [r3, #4]
 800e0d0:	005b      	lsls	r3, r3, #1
 800e0d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800e0d6:	4aa3      	ldr	r2, [pc, #652]	; (800e364 <UART_SetConfig+0x32c>)
 800e0d8:	fba2 2303 	umull	r2, r3, r2, r3
 800e0dc:	095b      	lsrs	r3, r3, #5
 800e0de:	011c      	lsls	r4, r3, #4
 800e0e0:	f7fd fa8e 	bl	800b600 <HAL_RCC_GetPCLK2Freq>
 800e0e4:	4602      	mov	r2, r0
 800e0e6:	4613      	mov	r3, r2
 800e0e8:	009b      	lsls	r3, r3, #2
 800e0ea:	4413      	add	r3, r2
 800e0ec:	009a      	lsls	r2, r3, #2
 800e0ee:	441a      	add	r2, r3
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	685b      	ldr	r3, [r3, #4]
 800e0f4:	005b      	lsls	r3, r3, #1
 800e0f6:	fbb2 f5f3 	udiv	r5, r2, r3
 800e0fa:	f7fd fa81 	bl	800b600 <HAL_RCC_GetPCLK2Freq>
 800e0fe:	4602      	mov	r2, r0
 800e100:	4613      	mov	r3, r2
 800e102:	009b      	lsls	r3, r3, #2
 800e104:	4413      	add	r3, r2
 800e106:	009a      	lsls	r2, r3, #2
 800e108:	441a      	add	r2, r3
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	685b      	ldr	r3, [r3, #4]
 800e10e:	005b      	lsls	r3, r3, #1
 800e110:	fbb2 f3f3 	udiv	r3, r2, r3
 800e114:	4a93      	ldr	r2, [pc, #588]	; (800e364 <UART_SetConfig+0x32c>)
 800e116:	fba2 2303 	umull	r2, r3, r2, r3
 800e11a:	095b      	lsrs	r3, r3, #5
 800e11c:	2264      	movs	r2, #100	; 0x64
 800e11e:	fb02 f303 	mul.w	r3, r2, r3
 800e122:	1aeb      	subs	r3, r5, r3
 800e124:	00db      	lsls	r3, r3, #3
 800e126:	3332      	adds	r3, #50	; 0x32
 800e128:	4a8e      	ldr	r2, [pc, #568]	; (800e364 <UART_SetConfig+0x32c>)
 800e12a:	fba2 2303 	umull	r2, r3, r2, r3
 800e12e:	095b      	lsrs	r3, r3, #5
 800e130:	005b      	lsls	r3, r3, #1
 800e132:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e136:	441c      	add	r4, r3
 800e138:	f7fd fa62 	bl	800b600 <HAL_RCC_GetPCLK2Freq>
 800e13c:	4602      	mov	r2, r0
 800e13e:	4613      	mov	r3, r2
 800e140:	009b      	lsls	r3, r3, #2
 800e142:	4413      	add	r3, r2
 800e144:	009a      	lsls	r2, r3, #2
 800e146:	441a      	add	r2, r3
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	685b      	ldr	r3, [r3, #4]
 800e14c:	005b      	lsls	r3, r3, #1
 800e14e:	fbb2 f5f3 	udiv	r5, r2, r3
 800e152:	f7fd fa55 	bl	800b600 <HAL_RCC_GetPCLK2Freq>
 800e156:	4602      	mov	r2, r0
 800e158:	4613      	mov	r3, r2
 800e15a:	009b      	lsls	r3, r3, #2
 800e15c:	4413      	add	r3, r2
 800e15e:	009a      	lsls	r2, r3, #2
 800e160:	441a      	add	r2, r3
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	685b      	ldr	r3, [r3, #4]
 800e166:	005b      	lsls	r3, r3, #1
 800e168:	fbb2 f3f3 	udiv	r3, r2, r3
 800e16c:	4a7d      	ldr	r2, [pc, #500]	; (800e364 <UART_SetConfig+0x32c>)
 800e16e:	fba2 2303 	umull	r2, r3, r2, r3
 800e172:	095b      	lsrs	r3, r3, #5
 800e174:	2264      	movs	r2, #100	; 0x64
 800e176:	fb02 f303 	mul.w	r3, r2, r3
 800e17a:	1aeb      	subs	r3, r5, r3
 800e17c:	00db      	lsls	r3, r3, #3
 800e17e:	3332      	adds	r3, #50	; 0x32
 800e180:	4a78      	ldr	r2, [pc, #480]	; (800e364 <UART_SetConfig+0x32c>)
 800e182:	fba2 2303 	umull	r2, r3, r2, r3
 800e186:	095b      	lsrs	r3, r3, #5
 800e188:	f003 0207 	and.w	r2, r3, #7
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	4422      	add	r2, r4
 800e192:	609a      	str	r2, [r3, #8]
 800e194:	e154      	b.n	800e440 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800e196:	f7fd fa1f 	bl	800b5d8 <HAL_RCC_GetPCLK1Freq>
 800e19a:	4602      	mov	r2, r0
 800e19c:	4613      	mov	r3, r2
 800e19e:	009b      	lsls	r3, r3, #2
 800e1a0:	4413      	add	r3, r2
 800e1a2:	009a      	lsls	r2, r3, #2
 800e1a4:	441a      	add	r2, r3
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	685b      	ldr	r3, [r3, #4]
 800e1aa:	005b      	lsls	r3, r3, #1
 800e1ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1b0:	4a6c      	ldr	r2, [pc, #432]	; (800e364 <UART_SetConfig+0x32c>)
 800e1b2:	fba2 2303 	umull	r2, r3, r2, r3
 800e1b6:	095b      	lsrs	r3, r3, #5
 800e1b8:	011c      	lsls	r4, r3, #4
 800e1ba:	f7fd fa0d 	bl	800b5d8 <HAL_RCC_GetPCLK1Freq>
 800e1be:	4602      	mov	r2, r0
 800e1c0:	4613      	mov	r3, r2
 800e1c2:	009b      	lsls	r3, r3, #2
 800e1c4:	4413      	add	r3, r2
 800e1c6:	009a      	lsls	r2, r3, #2
 800e1c8:	441a      	add	r2, r3
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	685b      	ldr	r3, [r3, #4]
 800e1ce:	005b      	lsls	r3, r3, #1
 800e1d0:	fbb2 f5f3 	udiv	r5, r2, r3
 800e1d4:	f7fd fa00 	bl	800b5d8 <HAL_RCC_GetPCLK1Freq>
 800e1d8:	4602      	mov	r2, r0
 800e1da:	4613      	mov	r3, r2
 800e1dc:	009b      	lsls	r3, r3, #2
 800e1de:	4413      	add	r3, r2
 800e1e0:	009a      	lsls	r2, r3, #2
 800e1e2:	441a      	add	r2, r3
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	685b      	ldr	r3, [r3, #4]
 800e1e8:	005b      	lsls	r3, r3, #1
 800e1ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800e1ee:	4a5d      	ldr	r2, [pc, #372]	; (800e364 <UART_SetConfig+0x32c>)
 800e1f0:	fba2 2303 	umull	r2, r3, r2, r3
 800e1f4:	095b      	lsrs	r3, r3, #5
 800e1f6:	2264      	movs	r2, #100	; 0x64
 800e1f8:	fb02 f303 	mul.w	r3, r2, r3
 800e1fc:	1aeb      	subs	r3, r5, r3
 800e1fe:	00db      	lsls	r3, r3, #3
 800e200:	3332      	adds	r3, #50	; 0x32
 800e202:	4a58      	ldr	r2, [pc, #352]	; (800e364 <UART_SetConfig+0x32c>)
 800e204:	fba2 2303 	umull	r2, r3, r2, r3
 800e208:	095b      	lsrs	r3, r3, #5
 800e20a:	005b      	lsls	r3, r3, #1
 800e20c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e210:	441c      	add	r4, r3
 800e212:	f7fd f9e1 	bl	800b5d8 <HAL_RCC_GetPCLK1Freq>
 800e216:	4602      	mov	r2, r0
 800e218:	4613      	mov	r3, r2
 800e21a:	009b      	lsls	r3, r3, #2
 800e21c:	4413      	add	r3, r2
 800e21e:	009a      	lsls	r2, r3, #2
 800e220:	441a      	add	r2, r3
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	685b      	ldr	r3, [r3, #4]
 800e226:	005b      	lsls	r3, r3, #1
 800e228:	fbb2 f5f3 	udiv	r5, r2, r3
 800e22c:	f7fd f9d4 	bl	800b5d8 <HAL_RCC_GetPCLK1Freq>
 800e230:	4602      	mov	r2, r0
 800e232:	4613      	mov	r3, r2
 800e234:	009b      	lsls	r3, r3, #2
 800e236:	4413      	add	r3, r2
 800e238:	009a      	lsls	r2, r3, #2
 800e23a:	441a      	add	r2, r3
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	685b      	ldr	r3, [r3, #4]
 800e240:	005b      	lsls	r3, r3, #1
 800e242:	fbb2 f3f3 	udiv	r3, r2, r3
 800e246:	4a47      	ldr	r2, [pc, #284]	; (800e364 <UART_SetConfig+0x32c>)
 800e248:	fba2 2303 	umull	r2, r3, r2, r3
 800e24c:	095b      	lsrs	r3, r3, #5
 800e24e:	2264      	movs	r2, #100	; 0x64
 800e250:	fb02 f303 	mul.w	r3, r2, r3
 800e254:	1aeb      	subs	r3, r5, r3
 800e256:	00db      	lsls	r3, r3, #3
 800e258:	3332      	adds	r3, #50	; 0x32
 800e25a:	4a42      	ldr	r2, [pc, #264]	; (800e364 <UART_SetConfig+0x32c>)
 800e25c:	fba2 2303 	umull	r2, r3, r2, r3
 800e260:	095b      	lsrs	r3, r3, #5
 800e262:	f003 0207 	and.w	r2, r3, #7
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	4422      	add	r2, r4
 800e26c:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800e26e:	e0e7      	b.n	800e440 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	4a39      	ldr	r2, [pc, #228]	; (800e35c <UART_SetConfig+0x324>)
 800e276:	4293      	cmp	r3, r2
 800e278:	d004      	beq.n	800e284 <UART_SetConfig+0x24c>
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	4a38      	ldr	r2, [pc, #224]	; (800e360 <UART_SetConfig+0x328>)
 800e280:	4293      	cmp	r3, r2
 800e282:	d171      	bne.n	800e368 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800e284:	f7fd f9bc 	bl	800b600 <HAL_RCC_GetPCLK2Freq>
 800e288:	4602      	mov	r2, r0
 800e28a:	4613      	mov	r3, r2
 800e28c:	009b      	lsls	r3, r3, #2
 800e28e:	4413      	add	r3, r2
 800e290:	009a      	lsls	r2, r3, #2
 800e292:	441a      	add	r2, r3
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	685b      	ldr	r3, [r3, #4]
 800e298:	009b      	lsls	r3, r3, #2
 800e29a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e29e:	4a31      	ldr	r2, [pc, #196]	; (800e364 <UART_SetConfig+0x32c>)
 800e2a0:	fba2 2303 	umull	r2, r3, r2, r3
 800e2a4:	095b      	lsrs	r3, r3, #5
 800e2a6:	011c      	lsls	r4, r3, #4
 800e2a8:	f7fd f9aa 	bl	800b600 <HAL_RCC_GetPCLK2Freq>
 800e2ac:	4602      	mov	r2, r0
 800e2ae:	4613      	mov	r3, r2
 800e2b0:	009b      	lsls	r3, r3, #2
 800e2b2:	4413      	add	r3, r2
 800e2b4:	009a      	lsls	r2, r3, #2
 800e2b6:	441a      	add	r2, r3
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	685b      	ldr	r3, [r3, #4]
 800e2bc:	009b      	lsls	r3, r3, #2
 800e2be:	fbb2 f5f3 	udiv	r5, r2, r3
 800e2c2:	f7fd f99d 	bl	800b600 <HAL_RCC_GetPCLK2Freq>
 800e2c6:	4602      	mov	r2, r0
 800e2c8:	4613      	mov	r3, r2
 800e2ca:	009b      	lsls	r3, r3, #2
 800e2cc:	4413      	add	r3, r2
 800e2ce:	009a      	lsls	r2, r3, #2
 800e2d0:	441a      	add	r2, r3
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	685b      	ldr	r3, [r3, #4]
 800e2d6:	009b      	lsls	r3, r3, #2
 800e2d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800e2dc:	4a21      	ldr	r2, [pc, #132]	; (800e364 <UART_SetConfig+0x32c>)
 800e2de:	fba2 2303 	umull	r2, r3, r2, r3
 800e2e2:	095b      	lsrs	r3, r3, #5
 800e2e4:	2264      	movs	r2, #100	; 0x64
 800e2e6:	fb02 f303 	mul.w	r3, r2, r3
 800e2ea:	1aeb      	subs	r3, r5, r3
 800e2ec:	011b      	lsls	r3, r3, #4
 800e2ee:	3332      	adds	r3, #50	; 0x32
 800e2f0:	4a1c      	ldr	r2, [pc, #112]	; (800e364 <UART_SetConfig+0x32c>)
 800e2f2:	fba2 2303 	umull	r2, r3, r2, r3
 800e2f6:	095b      	lsrs	r3, r3, #5
 800e2f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e2fc:	441c      	add	r4, r3
 800e2fe:	f7fd f97f 	bl	800b600 <HAL_RCC_GetPCLK2Freq>
 800e302:	4602      	mov	r2, r0
 800e304:	4613      	mov	r3, r2
 800e306:	009b      	lsls	r3, r3, #2
 800e308:	4413      	add	r3, r2
 800e30a:	009a      	lsls	r2, r3, #2
 800e30c:	441a      	add	r2, r3
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	685b      	ldr	r3, [r3, #4]
 800e312:	009b      	lsls	r3, r3, #2
 800e314:	fbb2 f5f3 	udiv	r5, r2, r3
 800e318:	f7fd f972 	bl	800b600 <HAL_RCC_GetPCLK2Freq>
 800e31c:	4602      	mov	r2, r0
 800e31e:	4613      	mov	r3, r2
 800e320:	009b      	lsls	r3, r3, #2
 800e322:	4413      	add	r3, r2
 800e324:	009a      	lsls	r2, r3, #2
 800e326:	441a      	add	r2, r3
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	685b      	ldr	r3, [r3, #4]
 800e32c:	009b      	lsls	r3, r3, #2
 800e32e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e332:	4a0c      	ldr	r2, [pc, #48]	; (800e364 <UART_SetConfig+0x32c>)
 800e334:	fba2 2303 	umull	r2, r3, r2, r3
 800e338:	095b      	lsrs	r3, r3, #5
 800e33a:	2264      	movs	r2, #100	; 0x64
 800e33c:	fb02 f303 	mul.w	r3, r2, r3
 800e340:	1aeb      	subs	r3, r5, r3
 800e342:	011b      	lsls	r3, r3, #4
 800e344:	3332      	adds	r3, #50	; 0x32
 800e346:	4a07      	ldr	r2, [pc, #28]	; (800e364 <UART_SetConfig+0x32c>)
 800e348:	fba2 2303 	umull	r2, r3, r2, r3
 800e34c:	095b      	lsrs	r3, r3, #5
 800e34e:	f003 020f 	and.w	r2, r3, #15
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	4422      	add	r2, r4
 800e358:	609a      	str	r2, [r3, #8]
 800e35a:	e071      	b.n	800e440 <UART_SetConfig+0x408>
 800e35c:	40011000 	.word	0x40011000
 800e360:	40011400 	.word	0x40011400
 800e364:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800e368:	f7fd f936 	bl	800b5d8 <HAL_RCC_GetPCLK1Freq>
 800e36c:	4602      	mov	r2, r0
 800e36e:	4613      	mov	r3, r2
 800e370:	009b      	lsls	r3, r3, #2
 800e372:	4413      	add	r3, r2
 800e374:	009a      	lsls	r2, r3, #2
 800e376:	441a      	add	r2, r3
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	685b      	ldr	r3, [r3, #4]
 800e37c:	009b      	lsls	r3, r3, #2
 800e37e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e382:	4a31      	ldr	r2, [pc, #196]	; (800e448 <UART_SetConfig+0x410>)
 800e384:	fba2 2303 	umull	r2, r3, r2, r3
 800e388:	095b      	lsrs	r3, r3, #5
 800e38a:	011c      	lsls	r4, r3, #4
 800e38c:	f7fd f924 	bl	800b5d8 <HAL_RCC_GetPCLK1Freq>
 800e390:	4602      	mov	r2, r0
 800e392:	4613      	mov	r3, r2
 800e394:	009b      	lsls	r3, r3, #2
 800e396:	4413      	add	r3, r2
 800e398:	009a      	lsls	r2, r3, #2
 800e39a:	441a      	add	r2, r3
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	685b      	ldr	r3, [r3, #4]
 800e3a0:	009b      	lsls	r3, r3, #2
 800e3a2:	fbb2 f5f3 	udiv	r5, r2, r3
 800e3a6:	f7fd f917 	bl	800b5d8 <HAL_RCC_GetPCLK1Freq>
 800e3aa:	4602      	mov	r2, r0
 800e3ac:	4613      	mov	r3, r2
 800e3ae:	009b      	lsls	r3, r3, #2
 800e3b0:	4413      	add	r3, r2
 800e3b2:	009a      	lsls	r2, r3, #2
 800e3b4:	441a      	add	r2, r3
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	685b      	ldr	r3, [r3, #4]
 800e3ba:	009b      	lsls	r3, r3, #2
 800e3bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800e3c0:	4a21      	ldr	r2, [pc, #132]	; (800e448 <UART_SetConfig+0x410>)
 800e3c2:	fba2 2303 	umull	r2, r3, r2, r3
 800e3c6:	095b      	lsrs	r3, r3, #5
 800e3c8:	2264      	movs	r2, #100	; 0x64
 800e3ca:	fb02 f303 	mul.w	r3, r2, r3
 800e3ce:	1aeb      	subs	r3, r5, r3
 800e3d0:	011b      	lsls	r3, r3, #4
 800e3d2:	3332      	adds	r3, #50	; 0x32
 800e3d4:	4a1c      	ldr	r2, [pc, #112]	; (800e448 <UART_SetConfig+0x410>)
 800e3d6:	fba2 2303 	umull	r2, r3, r2, r3
 800e3da:	095b      	lsrs	r3, r3, #5
 800e3dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e3e0:	441c      	add	r4, r3
 800e3e2:	f7fd f8f9 	bl	800b5d8 <HAL_RCC_GetPCLK1Freq>
 800e3e6:	4602      	mov	r2, r0
 800e3e8:	4613      	mov	r3, r2
 800e3ea:	009b      	lsls	r3, r3, #2
 800e3ec:	4413      	add	r3, r2
 800e3ee:	009a      	lsls	r2, r3, #2
 800e3f0:	441a      	add	r2, r3
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	685b      	ldr	r3, [r3, #4]
 800e3f6:	009b      	lsls	r3, r3, #2
 800e3f8:	fbb2 f5f3 	udiv	r5, r2, r3
 800e3fc:	f7fd f8ec 	bl	800b5d8 <HAL_RCC_GetPCLK1Freq>
 800e400:	4602      	mov	r2, r0
 800e402:	4613      	mov	r3, r2
 800e404:	009b      	lsls	r3, r3, #2
 800e406:	4413      	add	r3, r2
 800e408:	009a      	lsls	r2, r3, #2
 800e40a:	441a      	add	r2, r3
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	685b      	ldr	r3, [r3, #4]
 800e410:	009b      	lsls	r3, r3, #2
 800e412:	fbb2 f3f3 	udiv	r3, r2, r3
 800e416:	4a0c      	ldr	r2, [pc, #48]	; (800e448 <UART_SetConfig+0x410>)
 800e418:	fba2 2303 	umull	r2, r3, r2, r3
 800e41c:	095b      	lsrs	r3, r3, #5
 800e41e:	2264      	movs	r2, #100	; 0x64
 800e420:	fb02 f303 	mul.w	r3, r2, r3
 800e424:	1aeb      	subs	r3, r5, r3
 800e426:	011b      	lsls	r3, r3, #4
 800e428:	3332      	adds	r3, #50	; 0x32
 800e42a:	4a07      	ldr	r2, [pc, #28]	; (800e448 <UART_SetConfig+0x410>)
 800e42c:	fba2 2303 	umull	r2, r3, r2, r3
 800e430:	095b      	lsrs	r3, r3, #5
 800e432:	f003 020f 	and.w	r2, r3, #15
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	681b      	ldr	r3, [r3, #0]
 800e43a:	4422      	add	r2, r4
 800e43c:	609a      	str	r2, [r3, #8]
}
 800e43e:	e7ff      	b.n	800e440 <UART_SetConfig+0x408>
 800e440:	bf00      	nop
 800e442:	3710      	adds	r7, #16
 800e444:	46bd      	mov	sp, r7
 800e446:	bdb0      	pop	{r4, r5, r7, pc}
 800e448:	51eb851f 	.word	0x51eb851f

0800e44c <ACR_Start>:
int soundCount = 0;



void ACR_Start()
{
 800e44c:	b580      	push	{r7, lr}
 800e44e:	af00      	add	r7, sp, #0

	ACR_enable = 1;
 800e450:	4b03      	ldr	r3, [pc, #12]	; (800e460 <ACR_Start+0x14>)
 800e452:	2201      	movs	r2, #1
 800e454:	701a      	strb	r2, [r3, #0]
	ACR_Reset();
 800e456:	f000 fa61 	bl	800e91c <ACR_Reset>

}
 800e45a:	bf00      	nop
 800e45c:	bd80      	pop	{r7, pc}
 800e45e:	bf00      	nop
 800e460:	200000c0 	.word	0x200000c0
 800e464:	00000000 	.word	0x00000000

0800e468 <currentControl>:
}



inline void currentControl(void)
{
 800e468:	b590      	push	{r4, r7, lr}
 800e46a:	b083      	sub	sp, #12
 800e46c:	af00      	add	r7, sp, #0



	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_SET);
 800e46e:	2201      	movs	r2, #1
 800e470:	2140      	movs	r1, #64	; 0x40
 800e472:	48bb      	ldr	r0, [pc, #748]	; (800e760 <currentControl+0x2f8>)
 800e474:	f7fc ff8e 	bl	800b394 <HAL_GPIO_WritePin>



	if(forced_commute_enable)
 800e478:	4bba      	ldr	r3, [pc, #744]	; (800e764 <currentControl+0x2fc>)
 800e47a:	781b      	ldrb	r3, [r3, #0]
 800e47c:	b2db      	uxtb	r3, r3
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d076      	beq.n	800e570 <currentControl+0x108>
	{
		float _forced_theta_re = fmodf(forced_theta * POLES / 2, 2.0f * M_PI);
 800e482:	4bb9      	ldr	r3, [pc, #740]	; (800e768 <currentControl+0x300>)
 800e484:	edd3 7a00 	vldr	s15, [r3]
 800e488:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 800e48c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e490:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800e494:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800e498:	eddf 0ab4 	vldr	s1, [pc, #720]	; 800e76c <currentControl+0x304>
 800e49c:	eeb0 0a66 	vmov.f32	s0, s13
 800e4a0:	f004 f9e2 	bl	8012868 <fmodf>
 800e4a4:	ed87 0a01 	vstr	s0, [r7, #4]

		if(_forced_theta_re < 0.0f)				forced_theta_re = _forced_theta_re + 2 * M_PI;
 800e4a8:	edd7 7a01 	vldr	s15, [r7, #4]
 800e4ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e4b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4b4:	d511      	bpl.n	800e4da <currentControl+0x72>
 800e4b6:	6878      	ldr	r0, [r7, #4]
 800e4b8:	f7f9 ff76 	bl	80083a8 <__aeabi_f2d>
 800e4bc:	a3a4      	add	r3, pc, #656	; (adr r3, 800e750 <currentControl+0x2e8>)
 800e4be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4c2:	f7f9 fe13 	bl	80080ec <__adddf3>
 800e4c6:	4603      	mov	r3, r0
 800e4c8:	460c      	mov	r4, r1
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	4621      	mov	r1, r4
 800e4ce:	f7fa fa5d 	bl	800898c <__aeabi_d2f>
 800e4d2:	4602      	mov	r2, r0
 800e4d4:	4ba6      	ldr	r3, [pc, #664]	; (800e770 <currentControl+0x308>)
 800e4d6:	601a      	str	r2, [r3, #0]
 800e4d8:	e01f      	b.n	800e51a <currentControl+0xb2>
		else if(_forced_theta_re >= 2 * M_PI)	forced_theta_re = _forced_theta_re - 2 * M_PI;
 800e4da:	6878      	ldr	r0, [r7, #4]
 800e4dc:	f7f9 ff64 	bl	80083a8 <__aeabi_f2d>
 800e4e0:	a39b      	add	r3, pc, #620	; (adr r3, 800e750 <currentControl+0x2e8>)
 800e4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4e6:	f7fa fa3d 	bl	8008964 <__aeabi_dcmpge>
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d011      	beq.n	800e514 <currentControl+0xac>
 800e4f0:	6878      	ldr	r0, [r7, #4]
 800e4f2:	f7f9 ff59 	bl	80083a8 <__aeabi_f2d>
 800e4f6:	a396      	add	r3, pc, #600	; (adr r3, 800e750 <currentControl+0x2e8>)
 800e4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4fc:	f7f9 fdf4 	bl	80080e8 <__aeabi_dsub>
 800e500:	4603      	mov	r3, r0
 800e502:	460c      	mov	r4, r1
 800e504:	4618      	mov	r0, r3
 800e506:	4621      	mov	r1, r4
 800e508:	f7fa fa40 	bl	800898c <__aeabi_d2f>
 800e50c:	4602      	mov	r2, r0
 800e50e:	4b98      	ldr	r3, [pc, #608]	; (800e770 <currentControl+0x308>)
 800e510:	601a      	str	r2, [r3, #0]
 800e512:	e002      	b.n	800e51a <currentControl+0xb2>
		else									forced_theta_re = _forced_theta_re;
 800e514:	4a96      	ldr	r2, [pc, #600]	; (800e770 <currentControl+0x308>)
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	6013      	str	r3, [r2, #0]

		cos_theta_re = sin_table2[(int)((forced_theta_re * 0.3183f + 0.5f) * 5000.0f)];
 800e51a:	4b95      	ldr	r3, [pc, #596]	; (800e770 <currentControl+0x308>)
 800e51c:	edd3 7a00 	vldr	s15, [r3]
 800e520:	ed9f 7a94 	vldr	s14, [pc, #592]	; 800e774 <currentControl+0x30c>
 800e524:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e528:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800e52c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e530:	ed9f 7a91 	vldr	s14, [pc, #580]	; 800e778 <currentControl+0x310>
 800e534:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e538:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e53c:	ee17 3a90 	vmov	r3, s15
 800e540:	4a8e      	ldr	r2, [pc, #568]	; (800e77c <currentControl+0x314>)
 800e542:	009b      	lsls	r3, r3, #2
 800e544:	4413      	add	r3, r2
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	4a8d      	ldr	r2, [pc, #564]	; (800e780 <currentControl+0x318>)
 800e54a:	6013      	str	r3, [r2, #0]
		sin_theta_re = sin_table2[(int)(forced_theta_re * 1591.54943f)];
 800e54c:	4b88      	ldr	r3, [pc, #544]	; (800e770 <currentControl+0x308>)
 800e54e:	edd3 7a00 	vldr	s15, [r3]
 800e552:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 800e784 <currentControl+0x31c>
 800e556:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e55a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e55e:	ee17 3a90 	vmov	r3, s15
 800e562:	4a86      	ldr	r2, [pc, #536]	; (800e77c <currentControl+0x314>)
 800e564:	009b      	lsls	r3, r3, #2
 800e566:	4413      	add	r3, r2
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	4a87      	ldr	r2, [pc, #540]	; (800e788 <currentControl+0x320>)
 800e56c:	6013      	str	r3, [r2, #0]
 800e56e:	e001      	b.n	800e574 <currentControl+0x10c>
	}
	else
	{
		refreshEncoder();
 800e570:	f002 fcb6 	bl	8010ee0 <refreshEncoder>
	}

	get_current_dq(&Id, &Iq, sector_SVM, cos_theta_re, sin_theta_re);
 800e574:	4b85      	ldr	r3, [pc, #532]	; (800e78c <currentControl+0x324>)
 800e576:	681a      	ldr	r2, [r3, #0]
 800e578:	4b81      	ldr	r3, [pc, #516]	; (800e780 <currentControl+0x318>)
 800e57a:	edd3 7a00 	vldr	s15, [r3]
 800e57e:	4b82      	ldr	r3, [pc, #520]	; (800e788 <currentControl+0x320>)
 800e580:	ed93 7a00 	vldr	s14, [r3]
 800e584:	eef0 0a47 	vmov.f32	s1, s14
 800e588:	eeb0 0a67 	vmov.f32	s0, s15
 800e58c:	4980      	ldr	r1, [pc, #512]	; (800e790 <currentControl+0x328>)
 800e58e:	4881      	ldr	r0, [pc, #516]	; (800e794 <currentControl+0x32c>)
 800e590:	f000 fef0 	bl	800f374 <get_current_dq>


	if(theta_re < M_PI)
 800e594:	4b80      	ldr	r3, [pc, #512]	; (800e798 <currentControl+0x330>)
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	4618      	mov	r0, r3
 800e59a:	f7f9 ff05 	bl	80083a8 <__aeabi_f2d>
 800e59e:	a36e      	add	r3, pc, #440	; (adr r3, 800e758 <currentControl+0x2f0>)
 800e5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5a4:	f7fa f9ca 	bl	800893c <__aeabi_dcmplt>
 800e5a8:	4603      	mov	r3, r0
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d005      	beq.n	800e5ba <currentControl+0x152>
		HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_RESET);
 800e5ae:	2200      	movs	r2, #0
 800e5b0:	2140      	movs	r1, #64	; 0x40
 800e5b2:	487a      	ldr	r0, [pc, #488]	; (800e79c <currentControl+0x334>)
 800e5b4:	f7fc feee 	bl	800b394 <HAL_GPIO_WritePin>
 800e5b8:	e004      	b.n	800e5c4 <currentControl+0x15c>
	else
		HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_SET);
 800e5ba:	2201      	movs	r2, #1
 800e5bc:	2140      	movs	r1, #64	; 0x40
 800e5be:	4877      	ldr	r0, [pc, #476]	; (800e79c <currentControl+0x334>)
 800e5c0:	f7fc fee8 	bl	800b394 <HAL_GPIO_WritePin>



	/********** ACR (Auto Current Regulator) **********/

	if(ACR_enable /*&& soundCount == -1*/)
 800e5c4:	4b76      	ldr	r3, [pc, #472]	; (800e7a0 <currentControl+0x338>)
 800e5c6:	781b      	ldrb	r3, [r3, #0]
 800e5c8:	b2db      	uxtb	r3, r3
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	f000 815c 	beq.w	800e888 <currentControl+0x420>
	{

		if(Id_ref < -Id_limit)		_Id_ref = -Id_limit;
 800e5d0:	4b74      	ldr	r3, [pc, #464]	; (800e7a4 <currentControl+0x33c>)
 800e5d2:	edd3 7a00 	vldr	s15, [r3]
 800e5d6:	eeb1 7a67 	vneg.f32	s14, s15
 800e5da:	4b73      	ldr	r3, [pc, #460]	; (800e7a8 <currentControl+0x340>)
 800e5dc:	edd3 7a00 	vldr	s15, [r3]
 800e5e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e5e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5e8:	dd08      	ble.n	800e5fc <currentControl+0x194>
 800e5ea:	4b6e      	ldr	r3, [pc, #440]	; (800e7a4 <currentControl+0x33c>)
 800e5ec:	edd3 7a00 	vldr	s15, [r3]
 800e5f0:	eef1 7a67 	vneg.f32	s15, s15
 800e5f4:	4b6d      	ldr	r3, [pc, #436]	; (800e7ac <currentControl+0x344>)
 800e5f6:	edc3 7a00 	vstr	s15, [r3]
 800e5fa:	e013      	b.n	800e624 <currentControl+0x1bc>
		else if(Id_ref > Id_limit)	_Id_ref = Id_limit;
 800e5fc:	4b6a      	ldr	r3, [pc, #424]	; (800e7a8 <currentControl+0x340>)
 800e5fe:	ed93 7a00 	vldr	s14, [r3]
 800e602:	4b68      	ldr	r3, [pc, #416]	; (800e7a4 <currentControl+0x33c>)
 800e604:	edd3 7a00 	vldr	s15, [r3]
 800e608:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e60c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e610:	dd04      	ble.n	800e61c <currentControl+0x1b4>
 800e612:	4b64      	ldr	r3, [pc, #400]	; (800e7a4 <currentControl+0x33c>)
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	4a65      	ldr	r2, [pc, #404]	; (800e7ac <currentControl+0x344>)
 800e618:	6013      	str	r3, [r2, #0]
 800e61a:	e003      	b.n	800e624 <currentControl+0x1bc>
		else						_Id_ref = Id_ref;
 800e61c:	4b62      	ldr	r3, [pc, #392]	; (800e7a8 <currentControl+0x340>)
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	4a62      	ldr	r2, [pc, #392]	; (800e7ac <currentControl+0x344>)
 800e622:	6013      	str	r3, [r2, #0]

		if(Iq_ref < -Iq_limit)		_Iq_ref = -Iq_limit;
 800e624:	4b62      	ldr	r3, [pc, #392]	; (800e7b0 <currentControl+0x348>)
 800e626:	edd3 7a00 	vldr	s15, [r3]
 800e62a:	eeb1 7a67 	vneg.f32	s14, s15
 800e62e:	4b61      	ldr	r3, [pc, #388]	; (800e7b4 <currentControl+0x34c>)
 800e630:	edd3 7a00 	vldr	s15, [r3]
 800e634:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e63c:	dd08      	ble.n	800e650 <currentControl+0x1e8>
 800e63e:	4b5c      	ldr	r3, [pc, #368]	; (800e7b0 <currentControl+0x348>)
 800e640:	edd3 7a00 	vldr	s15, [r3]
 800e644:	eef1 7a67 	vneg.f32	s15, s15
 800e648:	4b5b      	ldr	r3, [pc, #364]	; (800e7b8 <currentControl+0x350>)
 800e64a:	edc3 7a00 	vstr	s15, [r3]
 800e64e:	e013      	b.n	800e678 <currentControl+0x210>
		else if(Iq_ref > Iq_limit)	_Iq_ref = Iq_limit;
 800e650:	4b58      	ldr	r3, [pc, #352]	; (800e7b4 <currentControl+0x34c>)
 800e652:	ed93 7a00 	vldr	s14, [r3]
 800e656:	4b56      	ldr	r3, [pc, #344]	; (800e7b0 <currentControl+0x348>)
 800e658:	edd3 7a00 	vldr	s15, [r3]
 800e65c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e664:	dd04      	ble.n	800e670 <currentControl+0x208>
 800e666:	4b52      	ldr	r3, [pc, #328]	; (800e7b0 <currentControl+0x348>)
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	4a53      	ldr	r2, [pc, #332]	; (800e7b8 <currentControl+0x350>)
 800e66c:	6013      	str	r3, [r2, #0]
 800e66e:	e003      	b.n	800e678 <currentControl+0x210>
		else						_Iq_ref = Iq_ref;
 800e670:	4b50      	ldr	r3, [pc, #320]	; (800e7b4 <currentControl+0x34c>)
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	4a50      	ldr	r2, [pc, #320]	; (800e7b8 <currentControl+0x350>)
 800e676:	6013      	str	r3, [r2, #0]


		Id_error = _Id_ref - Id;
 800e678:	4b4c      	ldr	r3, [pc, #304]	; (800e7ac <currentControl+0x344>)
 800e67a:	ed93 7a00 	vldr	s14, [r3]
 800e67e:	4b45      	ldr	r3, [pc, #276]	; (800e794 <currentControl+0x32c>)
 800e680:	edd3 7a00 	vldr	s15, [r3]
 800e684:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e688:	4b4c      	ldr	r3, [pc, #304]	; (800e7bc <currentControl+0x354>)
 800e68a:	edc3 7a00 	vstr	s15, [r3]
		Iq_error = _Iq_ref - Iq;
 800e68e:	4b4a      	ldr	r3, [pc, #296]	; (800e7b8 <currentControl+0x350>)
 800e690:	ed93 7a00 	vldr	s14, [r3]
 800e694:	4b3e      	ldr	r3, [pc, #248]	; (800e790 <currentControl+0x328>)
 800e696:	edd3 7a00 	vldr	s15, [r3]
 800e69a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e69e:	4b48      	ldr	r3, [pc, #288]	; (800e7c0 <currentControl+0x358>)
 800e6a0:	edc3 7a00 	vstr	s15, [r3]


		// integral
		Id_error_integ_temp1 = Id_error + Id_error_integ_temp2;
 800e6a4:	4b45      	ldr	r3, [pc, #276]	; (800e7bc <currentControl+0x354>)
 800e6a6:	ed93 7a00 	vldr	s14, [r3]
 800e6aa:	4b46      	ldr	r3, [pc, #280]	; (800e7c4 <currentControl+0x35c>)
 800e6ac:	edd3 7a00 	vldr	s15, [r3]
 800e6b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e6b4:	4b44      	ldr	r3, [pc, #272]	; (800e7c8 <currentControl+0x360>)
 800e6b6:	edc3 7a00 	vstr	s15, [r3]
		if(Id_error_integ_temp1 < -1000000.0) Id_error_integ_temp1 = -1000000.0;
 800e6ba:	4b43      	ldr	r3, [pc, #268]	; (800e7c8 <currentControl+0x360>)
 800e6bc:	edd3 7a00 	vldr	s15, [r3]
 800e6c0:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800e7cc <currentControl+0x364>
 800e6c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e6c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6cc:	d503      	bpl.n	800e6d6 <currentControl+0x26e>
 800e6ce:	4b3e      	ldr	r3, [pc, #248]	; (800e7c8 <currentControl+0x360>)
 800e6d0:	4a3f      	ldr	r2, [pc, #252]	; (800e7d0 <currentControl+0x368>)
 800e6d2:	601a      	str	r2, [r3, #0]
 800e6d4:	e00c      	b.n	800e6f0 <currentControl+0x288>
		else if(Id_error_integ_temp1 > 1000000.0) Id_error_integ_temp1 = 1000000.0;
 800e6d6:	4b3c      	ldr	r3, [pc, #240]	; (800e7c8 <currentControl+0x360>)
 800e6d8:	edd3 7a00 	vldr	s15, [r3]
 800e6dc:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800e7d4 <currentControl+0x36c>
 800e6e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e6e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6e8:	dd02      	ble.n	800e6f0 <currentControl+0x288>
 800e6ea:	4b37      	ldr	r3, [pc, #220]	; (800e7c8 <currentControl+0x360>)
 800e6ec:	4a3a      	ldr	r2, [pc, #232]	; (800e7d8 <currentControl+0x370>)
 800e6ee:	601a      	str	r2, [r3, #0]
		Id_error_integ = ACR_cycleTime * 0.5f * (Id_error_integ_temp1 + Id_error_integ_temp2);
 800e6f0:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800e7dc <currentControl+0x374>
 800e6f4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e6f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e6fc:	4b32      	ldr	r3, [pc, #200]	; (800e7c8 <currentControl+0x360>)
 800e6fe:	edd3 6a00 	vldr	s13, [r3]
 800e702:	4b30      	ldr	r3, [pc, #192]	; (800e7c4 <currentControl+0x35c>)
 800e704:	edd3 7a00 	vldr	s15, [r3]
 800e708:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e70c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e710:	4b33      	ldr	r3, [pc, #204]	; (800e7e0 <currentControl+0x378>)
 800e712:	edc3 7a00 	vstr	s15, [r3]
		Id_error_integ_temp2 = Id_error_integ_temp1;
 800e716:	4b2c      	ldr	r3, [pc, #176]	; (800e7c8 <currentControl+0x360>)
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	4a2a      	ldr	r2, [pc, #168]	; (800e7c4 <currentControl+0x35c>)
 800e71c:	6013      	str	r3, [r2, #0]

		Iq_error_integ_temp1 = Iq_error + Iq_error_integ_temp2;
 800e71e:	4b28      	ldr	r3, [pc, #160]	; (800e7c0 <currentControl+0x358>)
 800e720:	ed93 7a00 	vldr	s14, [r3]
 800e724:	4b2f      	ldr	r3, [pc, #188]	; (800e7e4 <currentControl+0x37c>)
 800e726:	edd3 7a00 	vldr	s15, [r3]
 800e72a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e72e:	4b2e      	ldr	r3, [pc, #184]	; (800e7e8 <currentControl+0x380>)
 800e730:	edc3 7a00 	vstr	s15, [r3]
		if(Iq_error_integ_temp1 < -1000000.0) Iq_error_integ_temp1 = -1000000.0;
 800e734:	4b2c      	ldr	r3, [pc, #176]	; (800e7e8 <currentControl+0x380>)
 800e736:	edd3 7a00 	vldr	s15, [r3]
 800e73a:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800e7cc <currentControl+0x364>
 800e73e:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e746:	d551      	bpl.n	800e7ec <currentControl+0x384>
 800e748:	4b27      	ldr	r3, [pc, #156]	; (800e7e8 <currentControl+0x380>)
 800e74a:	4a21      	ldr	r2, [pc, #132]	; (800e7d0 <currentControl+0x368>)
 800e74c:	601a      	str	r2, [r3, #0]
 800e74e:	e05a      	b.n	800e806 <currentControl+0x39e>
 800e750:	54442d18 	.word	0x54442d18
 800e754:	401921fb 	.word	0x401921fb
 800e758:	54442d18 	.word	0x54442d18
 800e75c:	400921fb 	.word	0x400921fb
 800e760:	40020400 	.word	0x40020400
 800e764:	200041e8 	.word	0x200041e8
 800e768:	200000f4 	.word	0x200000f4
 800e76c:	40c90fdb 	.word	0x40c90fdb
 800e770:	200000f8 	.word	0x200000f8
 800e774:	3ea2f838 	.word	0x3ea2f838
 800e778:	459c4000 	.word	0x459c4000
 800e77c:	08012cac 	.word	0x08012cac
 800e780:	20000034 	.word	0x20000034
 800e784:	44c6f195 	.word	0x44c6f195
 800e788:	200041e4 	.word	0x200041e4
 800e78c:	20004194 	.word	0x20004194
 800e790:	200000d0 	.word	0x200000d0
 800e794:	200000cc 	.word	0x200000cc
 800e798:	200041e0 	.word	0x200041e0
 800e79c:	40020000 	.word	0x40020000
 800e7a0:	200000c0 	.word	0x200000c0
 800e7a4:	20000010 	.word	0x20000010
 800e7a8:	200000c4 	.word	0x200000c4
 800e7ac:	20004230 	.word	0x20004230
 800e7b0:	20000014 	.word	0x20000014
 800e7b4:	200000c8 	.word	0x200000c8
 800e7b8:	20004234 	.word	0x20004234
 800e7bc:	200000d4 	.word	0x200000d4
 800e7c0:	200000d8 	.word	0x200000d8
 800e7c4:	200000e8 	.word	0x200000e8
 800e7c8:	200000e4 	.word	0x200000e4
 800e7cc:	c9742400 	.word	0xc9742400
 800e7d0:	c9742400 	.word	0xc9742400
 800e7d4:	49742400 	.word	0x49742400
 800e7d8:	49742400 	.word	0x49742400
 800e7dc:	38d1b717 	.word	0x38d1b717
 800e7e0:	200000dc 	.word	0x200000dc
 800e7e4:	200000f0 	.word	0x200000f0
 800e7e8:	200000ec 	.word	0x200000ec
		else if(Iq_error_integ_temp1 > 1000000.0) Iq_error_integ_temp1 = 1000000.0;
 800e7ec:	4b39      	ldr	r3, [pc, #228]	; (800e8d4 <currentControl+0x46c>)
 800e7ee:	edd3 7a00 	vldr	s15, [r3]
 800e7f2:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800e8d8 <currentControl+0x470>
 800e7f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800e7fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7fe:	dd02      	ble.n	800e806 <currentControl+0x39e>
 800e800:	4b34      	ldr	r3, [pc, #208]	; (800e8d4 <currentControl+0x46c>)
 800e802:	4a36      	ldr	r2, [pc, #216]	; (800e8dc <currentControl+0x474>)
 800e804:	601a      	str	r2, [r3, #0]
		Iq_error_integ = ACR_cycleTime * 0.5f * (Iq_error_integ_temp1 + Iq_error_integ_temp2);
 800e806:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800e8e0 <currentControl+0x478>
 800e80a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e80e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e812:	4b30      	ldr	r3, [pc, #192]	; (800e8d4 <currentControl+0x46c>)
 800e814:	edd3 6a00 	vldr	s13, [r3]
 800e818:	4b32      	ldr	r3, [pc, #200]	; (800e8e4 <currentControl+0x47c>)
 800e81a:	edd3 7a00 	vldr	s15, [r3]
 800e81e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800e822:	ee67 7a27 	vmul.f32	s15, s14, s15
 800e826:	4b30      	ldr	r3, [pc, #192]	; (800e8e8 <currentControl+0x480>)
 800e828:	edc3 7a00 	vstr	s15, [r3]
		Iq_error_integ_temp2 = Iq_error_integ_temp1;
 800e82c:	4b29      	ldr	r3, [pc, #164]	; (800e8d4 <currentControl+0x46c>)
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	4a2c      	ldr	r2, [pc, #176]	; (800e8e4 <currentControl+0x47c>)
 800e832:	6013      	str	r3, [r2, #0]


		Vd_ref = Kp_ACR * Id_error + Ki_ACR * Id_error_integ;
 800e834:	4b2d      	ldr	r3, [pc, #180]	; (800e8ec <currentControl+0x484>)
 800e836:	ed93 7a00 	vldr	s14, [r3]
 800e83a:	4b2d      	ldr	r3, [pc, #180]	; (800e8f0 <currentControl+0x488>)
 800e83c:	edd3 7a00 	vldr	s15, [r3]
 800e840:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e844:	4b2b      	ldr	r3, [pc, #172]	; (800e8f4 <currentControl+0x48c>)
 800e846:	edd3 6a00 	vldr	s13, [r3]
 800e84a:	4b2b      	ldr	r3, [pc, #172]	; (800e8f8 <currentControl+0x490>)
 800e84c:	edd3 7a00 	vldr	s15, [r3]
 800e850:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e854:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e858:	4b28      	ldr	r3, [pc, #160]	; (800e8fc <currentControl+0x494>)
 800e85a:	edc3 7a00 	vstr	s15, [r3]
		Vq_ref = Kp_ACR * Iq_error + Ki_ACR * Iq_error_integ;
 800e85e:	4b23      	ldr	r3, [pc, #140]	; (800e8ec <currentControl+0x484>)
 800e860:	ed93 7a00 	vldr	s14, [r3]
 800e864:	4b26      	ldr	r3, [pc, #152]	; (800e900 <currentControl+0x498>)
 800e866:	edd3 7a00 	vldr	s15, [r3]
 800e86a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e86e:	4b21      	ldr	r3, [pc, #132]	; (800e8f4 <currentControl+0x48c>)
 800e870:	edd3 6a00 	vldr	s13, [r3]
 800e874:	4b1c      	ldr	r3, [pc, #112]	; (800e8e8 <currentControl+0x480>)
 800e876:	edd3 7a00 	vldr	s15, [r3]
 800e87a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e87e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e882:	4b20      	ldr	r3, [pc, #128]	; (800e904 <currentControl+0x49c>)
 800e884:	edc3 7a00 	vstr	s15, [r3]
*/

	/********* end of ACR **********/


	if(HAL_GPIO_ReadPin(BR_FLT_GPIO_Port, BR_FLT_Pin) == GPIO_PIN_RESET)
 800e888:	f44f 7180 	mov.w	r1, #256	; 0x100
 800e88c:	481e      	ldr	r0, [pc, #120]	; (800e908 <currentControl+0x4a0>)
 800e88e:	f7fc fd69 	bl	800b364 <HAL_GPIO_ReadPin>
	{
		//HAL_NVIC_SystemReset();
	}


	setSVM_dq();
 800e892:	f001 fc8b 	bl	80101ac <setSVM_dq>

#endif



	if(!forced_commute_enable)
 800e896:	4b1d      	ldr	r3, [pc, #116]	; (800e90c <currentControl+0x4a4>)
 800e898:	781b      	ldrb	r3, [r3, #0]
 800e89a:	b2db      	uxtb	r3, r3
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d101      	bne.n	800e8a4 <currentControl+0x43c>
	{
		requestEncoder();
 800e8a0:	f002 fb00 	bl	8010ea4 <requestEncoder>
	}


	// Auto Speed Regulator launching
	ASR_prescalerCount += 1;
 800e8a4:	4b1a      	ldr	r3, [pc, #104]	; (800e910 <currentControl+0x4a8>)
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	3301      	adds	r3, #1
 800e8aa:	4a19      	ldr	r2, [pc, #100]	; (800e910 <currentControl+0x4a8>)
 800e8ac:	6013      	str	r3, [r2, #0]
	if(ASR_prescalerCount >= ASR_prescale)
 800e8ae:	4b18      	ldr	r3, [pc, #96]	; (800e910 <currentControl+0x4a8>)
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	2b09      	cmp	r3, #9
 800e8b4:	dd05      	ble.n	800e8c2 <currentControl+0x45a>
	{
		ASR_flg = 1;
 800e8b6:	4b17      	ldr	r3, [pc, #92]	; (800e914 <currentControl+0x4ac>)
 800e8b8:	2201      	movs	r2, #1
 800e8ba:	601a      	str	r2, [r3, #0]
		ASR_prescalerCount = 0;
 800e8bc:	4b14      	ldr	r3, [pc, #80]	; (800e910 <currentControl+0x4a8>)
 800e8be:	2200      	movs	r2, #0
 800e8c0:	601a      	str	r2, [r3, #0]
	}



	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 800e8c2:	2200      	movs	r2, #0
 800e8c4:	2140      	movs	r1, #64	; 0x40
 800e8c6:	4814      	ldr	r0, [pc, #80]	; (800e918 <currentControl+0x4b0>)
 800e8c8:	f7fc fd64 	bl	800b394 <HAL_GPIO_WritePin>

	return;
 800e8cc:	bf00      	nop
}
 800e8ce:	370c      	adds	r7, #12
 800e8d0:	46bd      	mov	sp, r7
 800e8d2:	bd90      	pop	{r4, r7, pc}
 800e8d4:	200000ec 	.word	0x200000ec
 800e8d8:	49742400 	.word	0x49742400
 800e8dc:	49742400 	.word	0x49742400
 800e8e0:	38d1b717 	.word	0x38d1b717
 800e8e4:	200000f0 	.word	0x200000f0
 800e8e8:	200000e0 	.word	0x200000e0
 800e8ec:	20000008 	.word	0x20000008
 800e8f0:	200000d4 	.word	0x200000d4
 800e8f4:	2000000c 	.word	0x2000000c
 800e8f8:	200000dc 	.word	0x200000dc
 800e8fc:	2000418c 	.word	0x2000418c
 800e900:	200000d8 	.word	0x200000d8
 800e904:	20004190 	.word	0x20004190
 800e908:	40020000 	.word	0x40020000
 800e90c:	200041e8 	.word	0x200041e8
 800e910:	20000118 	.word	0x20000118
 800e914:	20000114 	.word	0x20000114
 800e918:	40020400 	.word	0x40020400

0800e91c <ACR_Reset>:



inline void ACR_Reset()
{
 800e91c:	b480      	push	{r7}
 800e91e:	af00      	add	r7, sp, #0

	Id_error_integ_temp1 = 0.0f;
 800e920:	4b14      	ldr	r3, [pc, #80]	; (800e974 <ACR_Reset+0x58>)
 800e922:	f04f 0200 	mov.w	r2, #0
 800e926:	601a      	str	r2, [r3, #0]
	Id_error_integ_temp2 = 0.0f;
 800e928:	4b13      	ldr	r3, [pc, #76]	; (800e978 <ACR_Reset+0x5c>)
 800e92a:	f04f 0200 	mov.w	r2, #0
 800e92e:	601a      	str	r2, [r3, #0]
	Iq_error_integ_temp1 = 0.0f;
 800e930:	4b12      	ldr	r3, [pc, #72]	; (800e97c <ACR_Reset+0x60>)
 800e932:	f04f 0200 	mov.w	r2, #0
 800e936:	601a      	str	r2, [r3, #0]
	Iq_error_integ_temp2 = 0.0f;
 800e938:	4b11      	ldr	r3, [pc, #68]	; (800e980 <ACR_Reset+0x64>)
 800e93a:	f04f 0200 	mov.w	r2, #0
 800e93e:	601a      	str	r2, [r3, #0]


	Id = Id_ref = 0.0f;
 800e940:	f04f 0300 	mov.w	r3, #0
 800e944:	4a0f      	ldr	r2, [pc, #60]	; (800e984 <ACR_Reset+0x68>)
 800e946:	6013      	str	r3, [r2, #0]
 800e948:	4a0f      	ldr	r2, [pc, #60]	; (800e988 <ACR_Reset+0x6c>)
 800e94a:	6013      	str	r3, [r2, #0]
	Iq = Iq_ref = 0.0f;
 800e94c:	f04f 0300 	mov.w	r3, #0
 800e950:	4a0e      	ldr	r2, [pc, #56]	; (800e98c <ACR_Reset+0x70>)
 800e952:	6013      	str	r3, [r2, #0]
 800e954:	4a0e      	ldr	r2, [pc, #56]	; (800e990 <ACR_Reset+0x74>)
 800e956:	6013      	str	r3, [r2, #0]

	Vd_ref = 0.0f;
 800e958:	4b0e      	ldr	r3, [pc, #56]	; (800e994 <ACR_Reset+0x78>)
 800e95a:	f04f 0200 	mov.w	r2, #0
 800e95e:	601a      	str	r2, [r3, #0]
	Vq_ref = 0.0f;
 800e960:	4b0d      	ldr	r3, [pc, #52]	; (800e998 <ACR_Reset+0x7c>)
 800e962:	f04f 0200 	mov.w	r2, #0
 800e966:	601a      	str	r2, [r3, #0]

}
 800e968:	bf00      	nop
 800e96a:	46bd      	mov	sp, r7
 800e96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e970:	4770      	bx	lr
 800e972:	bf00      	nop
 800e974:	200000e4 	.word	0x200000e4
 800e978:	200000e8 	.word	0x200000e8
 800e97c:	200000ec 	.word	0x200000ec
 800e980:	200000f0 	.word	0x200000f0
 800e984:	200000c4 	.word	0x200000c4
 800e988:	200000cc 	.word	0x200000cc
 800e98c:	200000c8 	.word	0x200000c8
 800e990:	200000d0 	.word	0x200000d0
 800e994:	2000418c 	.word	0x2000418c
 800e998:	20004190 	.word	0x20004190

0800e99c <ASR_Start>:
float omega_error_integ_temp2 = 0.0f;



void ASR_Start()
{
 800e99c:	b580      	push	{r7, lr}
 800e99e:	af00      	add	r7, sp, #0

	ASR_enable = 1;
 800e9a0:	4b03      	ldr	r3, [pc, #12]	; (800e9b0 <ASR_Start+0x14>)
 800e9a2:	2201      	movs	r2, #1
 800e9a4:	701a      	strb	r2, [r3, #0]
	ASR_Reset();
 800e9a6:	f000 f9b1 	bl	800ed0c <ASR_Reset>

}
 800e9aa:	bf00      	nop
 800e9ac:	bd80      	pop	{r7, pc}
 800e9ae:	bf00      	nop
 800e9b0:	200000fc 	.word	0x200000fc
 800e9b4:	00000000 	.word	0x00000000

0800e9b8 <speedControl>:
}



inline void speedControl()
{
 800e9b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800e9bc:	af00      	add	r7, sp, #0



	  if(ASR_steps <= 0)
 800e9be:	4bbc      	ldr	r3, [pc, #752]	; (800ecb0 <speedControl+0x2f8>)
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	dc04      	bgt.n	800e9d0 <speedControl+0x18>
	  {
		  d_theta = 0.0f;
 800e9c6:	4bbb      	ldr	r3, [pc, #748]	; (800ecb4 <speedControl+0x2fc>)
 800e9c8:	f04f 0200 	mov.w	r2, #0
 800e9cc:	601a      	str	r2, [r3, #0]
 800e9ce:	e00a      	b.n	800e9e6 <speedControl+0x2e>
	  }
	  else
	  {
		  d_theta = theta - p_theta;
 800e9d0:	4bb9      	ldr	r3, [pc, #740]	; (800ecb8 <speedControl+0x300>)
 800e9d2:	ed93 7a00 	vldr	s14, [r3]
 800e9d6:	4bb9      	ldr	r3, [pc, #740]	; (800ecbc <speedControl+0x304>)
 800e9d8:	edd3 7a00 	vldr	s15, [r3]
 800e9dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e9e0:	4bb4      	ldr	r3, [pc, #720]	; (800ecb4 <speedControl+0x2fc>)
 800e9e2:	edc3 7a00 	vstr	s15, [r3]
	  }
	  ASR_steps += 1;
 800e9e6:	4bb2      	ldr	r3, [pc, #712]	; (800ecb0 <speedControl+0x2f8>)
 800e9e8:	681b      	ldr	r3, [r3, #0]
 800e9ea:	3301      	adds	r3, #1
 800e9ec:	4ab0      	ldr	r2, [pc, #704]	; (800ecb0 <speedControl+0x2f8>)
 800e9ee:	6013      	str	r3, [r2, #0]

	  p_theta = theta;
 800e9f0:	4bb1      	ldr	r3, [pc, #708]	; (800ecb8 <speedControl+0x300>)
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	4ab1      	ldr	r2, [pc, #708]	; (800ecbc <speedControl+0x304>)
 800e9f6:	6013      	str	r3, [r2, #0]

	  if(d_theta < - M_PI)		d_theta += 2 * M_PI;
 800e9f8:	4bae      	ldr	r3, [pc, #696]	; (800ecb4 <speedControl+0x2fc>)
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	f7f9 fcd3 	bl	80083a8 <__aeabi_f2d>
 800ea02:	a3a3      	add	r3, pc, #652	; (adr r3, 800ec90 <speedControl+0x2d8>)
 800ea04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea08:	f7f9 ff98 	bl	800893c <__aeabi_dcmplt>
 800ea0c:	4603      	mov	r3, r0
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d013      	beq.n	800ea3a <speedControl+0x82>
 800ea12:	4ba8      	ldr	r3, [pc, #672]	; (800ecb4 <speedControl+0x2fc>)
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	4618      	mov	r0, r3
 800ea18:	f7f9 fcc6 	bl	80083a8 <__aeabi_f2d>
 800ea1c:	a39e      	add	r3, pc, #632	; (adr r3, 800ec98 <speedControl+0x2e0>)
 800ea1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea22:	f7f9 fb63 	bl	80080ec <__adddf3>
 800ea26:	4603      	mov	r3, r0
 800ea28:	460c      	mov	r4, r1
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	4621      	mov	r1, r4
 800ea2e:	f7f9 ffad 	bl	800898c <__aeabi_d2f>
 800ea32:	4602      	mov	r2, r0
 800ea34:	4b9f      	ldr	r3, [pc, #636]	; (800ecb4 <speedControl+0x2fc>)
 800ea36:	601a      	str	r2, [r3, #0]
 800ea38:	e01f      	b.n	800ea7a <speedControl+0xc2>
	  else if(d_theta > M_PI)	d_theta -= 2 * M_PI;
 800ea3a:	4b9e      	ldr	r3, [pc, #632]	; (800ecb4 <speedControl+0x2fc>)
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	4618      	mov	r0, r3
 800ea40:	f7f9 fcb2 	bl	80083a8 <__aeabi_f2d>
 800ea44:	a396      	add	r3, pc, #600	; (adr r3, 800eca0 <speedControl+0x2e8>)
 800ea46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea4a:	f7f9 ff95 	bl	8008978 <__aeabi_dcmpgt>
 800ea4e:	4603      	mov	r3, r0
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d012      	beq.n	800ea7a <speedControl+0xc2>
 800ea54:	4b97      	ldr	r3, [pc, #604]	; (800ecb4 <speedControl+0x2fc>)
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	4618      	mov	r0, r3
 800ea5a:	f7f9 fca5 	bl	80083a8 <__aeabi_f2d>
 800ea5e:	a38e      	add	r3, pc, #568	; (adr r3, 800ec98 <speedControl+0x2e0>)
 800ea60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea64:	f7f9 fb40 	bl	80080e8 <__aeabi_dsub>
 800ea68:	4603      	mov	r3, r0
 800ea6a:	460c      	mov	r4, r1
 800ea6c:	4618      	mov	r0, r3
 800ea6e:	4621      	mov	r1, r4
 800ea70:	f7f9 ff8c 	bl	800898c <__aeabi_d2f>
 800ea74:	4602      	mov	r2, r0
 800ea76:	4b8f      	ldr	r3, [pc, #572]	; (800ecb4 <speedControl+0x2fc>)
 800ea78:	601a      	str	r2, [r3, #0]

	  omega = omega * 0.5 + 0.5 * d_theta / ASR_cycleTime;
 800ea7a:	4b91      	ldr	r3, [pc, #580]	; (800ecc0 <speedControl+0x308>)
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	4618      	mov	r0, r3
 800ea80:	f7f9 fc92 	bl	80083a8 <__aeabi_f2d>
 800ea84:	f04f 0200 	mov.w	r2, #0
 800ea88:	4b8e      	ldr	r3, [pc, #568]	; (800ecc4 <speedControl+0x30c>)
 800ea8a:	f7f9 fce5 	bl	8008458 <__aeabi_dmul>
 800ea8e:	4603      	mov	r3, r0
 800ea90:	460c      	mov	r4, r1
 800ea92:	4625      	mov	r5, r4
 800ea94:	461c      	mov	r4, r3
 800ea96:	4b87      	ldr	r3, [pc, #540]	; (800ecb4 <speedControl+0x2fc>)
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	4618      	mov	r0, r3
 800ea9c:	f7f9 fc84 	bl	80083a8 <__aeabi_f2d>
 800eaa0:	f04f 0200 	mov.w	r2, #0
 800eaa4:	4b87      	ldr	r3, [pc, #540]	; (800ecc4 <speedControl+0x30c>)
 800eaa6:	f7f9 fcd7 	bl	8008458 <__aeabi_dmul>
 800eaaa:	4602      	mov	r2, r0
 800eaac:	460b      	mov	r3, r1
 800eaae:	4690      	mov	r8, r2
 800eab0:	4699      	mov	r9, r3
 800eab2:	4b85      	ldr	r3, [pc, #532]	; (800ecc8 <speedControl+0x310>)
 800eab4:	4618      	mov	r0, r3
 800eab6:	f7f9 fc77 	bl	80083a8 <__aeabi_f2d>
 800eaba:	4602      	mov	r2, r0
 800eabc:	460b      	mov	r3, r1
 800eabe:	4640      	mov	r0, r8
 800eac0:	4649      	mov	r1, r9
 800eac2:	f7f9 fdf3 	bl	80086ac <__aeabi_ddiv>
 800eac6:	4602      	mov	r2, r0
 800eac8:	460b      	mov	r3, r1
 800eaca:	4620      	mov	r0, r4
 800eacc:	4629      	mov	r1, r5
 800eace:	f7f9 fb0d 	bl	80080ec <__adddf3>
 800ead2:	4603      	mov	r3, r0
 800ead4:	460c      	mov	r4, r1
 800ead6:	4618      	mov	r0, r3
 800ead8:	4621      	mov	r1, r4
 800eada:	f7f9 ff57 	bl	800898c <__aeabi_d2f>
 800eade:	4602      	mov	r2, r0
 800eae0:	4b77      	ldr	r3, [pc, #476]	; (800ecc0 <speedControl+0x308>)
 800eae2:	601a      	str	r2, [r3, #0]


	  if(ASR_enable)
 800eae4:	4b79      	ldr	r3, [pc, #484]	; (800eccc <speedControl+0x314>)
 800eae6:	781b      	ldrb	r3, [r3, #0]
 800eae8:	b2db      	uxtb	r3, r3
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	f000 80cd 	beq.w	800ec8a <speedControl+0x2d2>
	  {

		  if(omega_ref < -omega_limit)		_omega_ref = -omega_limit;
 800eaf0:	4b77      	ldr	r3, [pc, #476]	; (800ecd0 <speedControl+0x318>)
 800eaf2:	edd3 7a00 	vldr	s15, [r3]
 800eaf6:	eeb1 7a67 	vneg.f32	s14, s15
 800eafa:	4b76      	ldr	r3, [pc, #472]	; (800ecd4 <speedControl+0x31c>)
 800eafc:	edd3 7a00 	vldr	s15, [r3]
 800eb00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800eb04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb08:	dd08      	ble.n	800eb1c <speedControl+0x164>
 800eb0a:	4b71      	ldr	r3, [pc, #452]	; (800ecd0 <speedControl+0x318>)
 800eb0c:	edd3 7a00 	vldr	s15, [r3]
 800eb10:	eef1 7a67 	vneg.f32	s15, s15
 800eb14:	4b70      	ldr	r3, [pc, #448]	; (800ecd8 <speedControl+0x320>)
 800eb16:	edc3 7a00 	vstr	s15, [r3]
 800eb1a:	e013      	b.n	800eb44 <speedControl+0x18c>
		  else if(omega_ref > omega_limit)	_omega_ref = omega_limit;
 800eb1c:	4b6d      	ldr	r3, [pc, #436]	; (800ecd4 <speedControl+0x31c>)
 800eb1e:	ed93 7a00 	vldr	s14, [r3]
 800eb22:	4b6b      	ldr	r3, [pc, #428]	; (800ecd0 <speedControl+0x318>)
 800eb24:	edd3 7a00 	vldr	s15, [r3]
 800eb28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800eb2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb30:	dd04      	ble.n	800eb3c <speedControl+0x184>
 800eb32:	4b67      	ldr	r3, [pc, #412]	; (800ecd0 <speedControl+0x318>)
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	4a68      	ldr	r2, [pc, #416]	; (800ecd8 <speedControl+0x320>)
 800eb38:	6013      	str	r3, [r2, #0]
 800eb3a:	e003      	b.n	800eb44 <speedControl+0x18c>
		  else								_omega_ref = omega_ref;
 800eb3c:	4b65      	ldr	r3, [pc, #404]	; (800ecd4 <speedControl+0x31c>)
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	4a65      	ldr	r2, [pc, #404]	; (800ecd8 <speedControl+0x320>)
 800eb42:	6013      	str	r3, [r2, #0]

		  omega_error = _omega_ref - omega;
 800eb44:	4b64      	ldr	r3, [pc, #400]	; (800ecd8 <speedControl+0x320>)
 800eb46:	ed93 7a00 	vldr	s14, [r3]
 800eb4a:	4b5d      	ldr	r3, [pc, #372]	; (800ecc0 <speedControl+0x308>)
 800eb4c:	edd3 7a00 	vldr	s15, [r3]
 800eb50:	ee77 7a67 	vsub.f32	s15, s14, s15
 800eb54:	4b61      	ldr	r3, [pc, #388]	; (800ecdc <speedControl+0x324>)
 800eb56:	edc3 7a00 	vstr	s15, [r3]

		  // integral
		  omega_error_integ_temp1 = omega_error + omega_error_integ_temp2;
 800eb5a:	4b60      	ldr	r3, [pc, #384]	; (800ecdc <speedControl+0x324>)
 800eb5c:	ed93 7a00 	vldr	s14, [r3]
 800eb60:	4b5f      	ldr	r3, [pc, #380]	; (800ece0 <speedControl+0x328>)
 800eb62:	edd3 7a00 	vldr	s15, [r3]
 800eb66:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eb6a:	4b5e      	ldr	r3, [pc, #376]	; (800ece4 <speedControl+0x32c>)
 800eb6c:	edc3 7a00 	vstr	s15, [r3]
		  if(omega_error_integ_temp1 < -6.0 / ASR_cycleTime)
 800eb70:	4b5c      	ldr	r3, [pc, #368]	; (800ece4 <speedControl+0x32c>)
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	4618      	mov	r0, r3
 800eb76:	f7f9 fc17 	bl	80083a8 <__aeabi_f2d>
 800eb7a:	4604      	mov	r4, r0
 800eb7c:	460d      	mov	r5, r1
 800eb7e:	4b52      	ldr	r3, [pc, #328]	; (800ecc8 <speedControl+0x310>)
 800eb80:	4618      	mov	r0, r3
 800eb82:	f7f9 fc11 	bl	80083a8 <__aeabi_f2d>
 800eb86:	4602      	mov	r2, r0
 800eb88:	460b      	mov	r3, r1
 800eb8a:	f04f 0000 	mov.w	r0, #0
 800eb8e:	4956      	ldr	r1, [pc, #344]	; (800ece8 <speedControl+0x330>)
 800eb90:	f7f9 fd8c 	bl	80086ac <__aeabi_ddiv>
 800eb94:	4602      	mov	r2, r0
 800eb96:	460b      	mov	r3, r1
 800eb98:	4620      	mov	r0, r4
 800eb9a:	4629      	mov	r1, r5
 800eb9c:	f7f9 fece 	bl	800893c <__aeabi_dcmplt>
 800eba0:	4603      	mov	r3, r0
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d009      	beq.n	800ebba <speedControl+0x202>
		  {
			  omega_error_integ_temp1 = -6.0 / ASR_cycleTime;
 800eba6:	ed9f 7a51 	vldr	s14, [pc, #324]	; 800ecec <speedControl+0x334>
 800ebaa:	eef9 6a08 	vmov.f32	s13, #152	; 0xc0c00000 -6.0
 800ebae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ebb2:	4b4c      	ldr	r3, [pc, #304]	; (800ece4 <speedControl+0x32c>)
 800ebb4:	edc3 7a00 	vstr	s15, [r3]
 800ebb8:	e023      	b.n	800ec02 <speedControl+0x24a>
		  }
		  else if(omega_error_integ_temp1 > 6.0 / ASR_cycleTime)
 800ebba:	4b4a      	ldr	r3, [pc, #296]	; (800ece4 <speedControl+0x32c>)
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	f7f9 fbf2 	bl	80083a8 <__aeabi_f2d>
 800ebc4:	4604      	mov	r4, r0
 800ebc6:	460d      	mov	r5, r1
 800ebc8:	4b3f      	ldr	r3, [pc, #252]	; (800ecc8 <speedControl+0x310>)
 800ebca:	4618      	mov	r0, r3
 800ebcc:	f7f9 fbec 	bl	80083a8 <__aeabi_f2d>
 800ebd0:	4602      	mov	r2, r0
 800ebd2:	460b      	mov	r3, r1
 800ebd4:	f04f 0000 	mov.w	r0, #0
 800ebd8:	4945      	ldr	r1, [pc, #276]	; (800ecf0 <speedControl+0x338>)
 800ebda:	f7f9 fd67 	bl	80086ac <__aeabi_ddiv>
 800ebde:	4602      	mov	r2, r0
 800ebe0:	460b      	mov	r3, r1
 800ebe2:	4620      	mov	r0, r4
 800ebe4:	4629      	mov	r1, r5
 800ebe6:	f7f9 fec7 	bl	8008978 <__aeabi_dcmpgt>
 800ebea:	4603      	mov	r3, r0
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d008      	beq.n	800ec02 <speedControl+0x24a>
		  {
			  omega_error_integ_temp1 = 6.0 / ASR_cycleTime;
 800ebf0:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800ecec <speedControl+0x334>
 800ebf4:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800ebf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ebfc:	4b39      	ldr	r3, [pc, #228]	; (800ece4 <speedControl+0x32c>)
 800ebfe:	edc3 7a00 	vstr	s15, [r3]
		  }
		  omega_error_integ = ASR_cycleTime * 0.5f * (omega_error_integ_temp1 + omega_error_integ_temp2);
 800ec02:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800ecec <speedControl+0x334>
 800ec06:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ec0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ec0e:	4b35      	ldr	r3, [pc, #212]	; (800ece4 <speedControl+0x32c>)
 800ec10:	edd3 6a00 	vldr	s13, [r3]
 800ec14:	4b32      	ldr	r3, [pc, #200]	; (800ece0 <speedControl+0x328>)
 800ec16:	edd3 7a00 	vldr	s15, [r3]
 800ec1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ec1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ec22:	4b34      	ldr	r3, [pc, #208]	; (800ecf4 <speedControl+0x33c>)
 800ec24:	edc3 7a00 	vstr	s15, [r3]
		  omega_error_integ_temp2 = omega_error_integ_temp1;
 800ec28:	4b2e      	ldr	r3, [pc, #184]	; (800ece4 <speedControl+0x32c>)
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	4a2c      	ldr	r2, [pc, #176]	; (800ece0 <speedControl+0x328>)
 800ec2e:	6013      	str	r3, [r2, #0]


		  torque_ref = Kp_ASR * omega_error + Ki_ASR * omega_error_integ;
 800ec30:	4b31      	ldr	r3, [pc, #196]	; (800ecf8 <speedControl+0x340>)
 800ec32:	ed93 7a00 	vldr	s14, [r3]
 800ec36:	4b29      	ldr	r3, [pc, #164]	; (800ecdc <speedControl+0x324>)
 800ec38:	edd3 7a00 	vldr	s15, [r3]
 800ec3c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ec40:	4b2e      	ldr	r3, [pc, #184]	; (800ecfc <speedControl+0x344>)
 800ec42:	edd3 6a00 	vldr	s13, [r3]
 800ec46:	4b2b      	ldr	r3, [pc, #172]	; (800ecf4 <speedControl+0x33c>)
 800ec48:	edd3 7a00 	vldr	s15, [r3]
 800ec4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ec50:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ec54:	4b2a      	ldr	r3, [pc, #168]	; (800ed00 <speedControl+0x348>)
 800ec56:	edc3 7a00 	vstr	s15, [r3]

		  Id_ref = 0.0f;
 800ec5a:	4b2a      	ldr	r3, [pc, #168]	; (800ed04 <speedControl+0x34c>)
 800ec5c:	f04f 0200 	mov.w	r2, #0
 800ec60:	601a      	str	r2, [r3, #0]
		  Iq_ref = KT * torque_ref;
 800ec62:	4b27      	ldr	r3, [pc, #156]	; (800ed00 <speedControl+0x348>)
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	4618      	mov	r0, r3
 800ec68:	f7f9 fb9e 	bl	80083a8 <__aeabi_f2d>
 800ec6c:	a30e      	add	r3, pc, #56	; (adr r3, 800eca8 <speedControl+0x2f0>)
 800ec6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec72:	f7f9 fbf1 	bl	8008458 <__aeabi_dmul>
 800ec76:	4603      	mov	r3, r0
 800ec78:	460c      	mov	r4, r1
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	4621      	mov	r1, r4
 800ec7e:	f7f9 fe85 	bl	800898c <__aeabi_d2f>
 800ec82:	4602      	mov	r2, r0
 800ec84:	4b20      	ldr	r3, [pc, #128]	; (800ed08 <speedControl+0x350>)
 800ec86:	601a      	str	r2, [r3, #0]
	  }




	return;
 800ec88:	bf00      	nop
 800ec8a:	bf00      	nop
}
 800ec8c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800ec90:	54442d18 	.word	0x54442d18
 800ec94:	c00921fb 	.word	0xc00921fb
 800ec98:	54442d18 	.word	0x54442d18
 800ec9c:	401921fb 	.word	0x401921fb
 800eca0:	54442d18 	.word	0x54442d18
 800eca4:	400921fb 	.word	0x400921fb
 800eca8:	8b6ec798 	.word	0x8b6ec798
 800ecac:	3fd22b62 	.word	0x3fd22b62
 800ecb0:	20000110 	.word	0x20000110
 800ecb4:	20004238 	.word	0x20004238
 800ecb8:	200041dc 	.word	0x200041dc
 800ecbc:	20000120 	.word	0x20000120
 800ecc0:	2000011c 	.word	0x2000011c
 800ecc4:	3fe00000 	.word	0x3fe00000
 800ecc8:	3a83126f 	.word	0x3a83126f
 800eccc:	200000fc 	.word	0x200000fc
 800ecd0:	20000020 	.word	0x20000020
 800ecd4:	20000100 	.word	0x20000100
 800ecd8:	2000423c 	.word	0x2000423c
 800ecdc:	20000104 	.word	0x20000104
 800ece0:	20000128 	.word	0x20000128
 800ece4:	20000124 	.word	0x20000124
 800ece8:	c0180000 	.word	0xc0180000
 800ecec:	3a83126f 	.word	0x3a83126f
 800ecf0:	40180000 	.word	0x40180000
 800ecf4:	20000108 	.word	0x20000108
 800ecf8:	20000018 	.word	0x20000018
 800ecfc:	2000001c 	.word	0x2000001c
 800ed00:	2000010c 	.word	0x2000010c
 800ed04:	200000c4 	.word	0x200000c4
 800ed08:	200000c8 	.word	0x200000c8

0800ed0c <ASR_Reset>:



inline void ASR_Reset()
{
 800ed0c:	b480      	push	{r7}
 800ed0e:	af00      	add	r7, sp, #0

	p_theta = 0.0f;
 800ed10:	4b0c      	ldr	r3, [pc, #48]	; (800ed44 <ASR_Reset+0x38>)
 800ed12:	f04f 0200 	mov.w	r2, #0
 800ed16:	601a      	str	r2, [r3, #0]

	omega_error_integ_temp1 = 0.0f;
 800ed18:	4b0b      	ldr	r3, [pc, #44]	; (800ed48 <ASR_Reset+0x3c>)
 800ed1a:	f04f 0200 	mov.w	r2, #0
 800ed1e:	601a      	str	r2, [r3, #0]
	omega_error_integ_temp2 = 0.0f;
 800ed20:	4b0a      	ldr	r3, [pc, #40]	; (800ed4c <ASR_Reset+0x40>)
 800ed22:	f04f 0200 	mov.w	r2, #0
 800ed26:	601a      	str	r2, [r3, #0]

	omega = omega_ref = 0.0f;
 800ed28:	f04f 0300 	mov.w	r3, #0
 800ed2c:	4a08      	ldr	r2, [pc, #32]	; (800ed50 <ASR_Reset+0x44>)
 800ed2e:	6013      	str	r3, [r2, #0]
 800ed30:	4a08      	ldr	r2, [pc, #32]	; (800ed54 <ASR_Reset+0x48>)
 800ed32:	6013      	str	r3, [r2, #0]

	ASR_steps = 0;
 800ed34:	4b08      	ldr	r3, [pc, #32]	; (800ed58 <ASR_Reset+0x4c>)
 800ed36:	2200      	movs	r2, #0
 800ed38:	601a      	str	r2, [r3, #0]

}
 800ed3a:	bf00      	nop
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed42:	4770      	bx	lr
 800ed44:	20000120 	.word	0x20000120
 800ed48:	20000124 	.word	0x20000124
 800ed4c:	20000128 	.word	0x20000128
 800ed50:	20000100 	.word	0x20000100
 800ed54:	2000011c 	.word	0x2000011c
 800ed58:	20000110 	.word	0x20000110

0800ed5c <DRV_Init>:
DRV_TypeDef drv8323;



void DRV_Init()
{
 800ed5c:	b480      	push	{r7}
 800ed5e:	af00      	add	r7, sp, #0

	drv8323.NSS_GPIOx = SPI3_NSS_GPIO_Port;
 800ed60:	4b07      	ldr	r3, [pc, #28]	; (800ed80 <DRV_Init+0x24>)
 800ed62:	4a08      	ldr	r2, [pc, #32]	; (800ed84 <DRV_Init+0x28>)
 800ed64:	621a      	str	r2, [r3, #32]
	drv8323.NSS_GPIO_Pin = SPI3_NSS_Pin;
 800ed66:	4b06      	ldr	r3, [pc, #24]	; (800ed80 <DRV_Init+0x24>)
 800ed68:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800ed6c:	849a      	strh	r2, [r3, #36]	; 0x24
	drv8323.hspi = &hspi3;
 800ed6e:	4b04      	ldr	r3, [pc, #16]	; (800ed80 <DRV_Init+0x24>)
 800ed70:	4a05      	ldr	r2, [pc, #20]	; (800ed88 <DRV_Init+0x2c>)
 800ed72:	61da      	str	r2, [r3, #28]



}
 800ed74:	bf00      	nop
 800ed76:	46bd      	mov	sp, r7
 800ed78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7c:	4770      	bx	lr
 800ed7e:	bf00      	nop
 800ed80:	20004240 	.word	0x20004240
 800ed84:	40020000 	.word	0x40020000
 800ed88:	20004530 	.word	0x20004530

0800ed8c <DRV_WriteData>:


void DRV_WriteData(DRV_TypeDef *hdrv, regAddr_t addr)
{
 800ed8c:	b580      	push	{r7, lr}
 800ed8e:	b084      	sub	sp, #16
 800ed90:	af02      	add	r7, sp, #8
 800ed92:	6078      	str	r0, [r7, #4]
 800ed94:	460b      	mov	r3, r1
 800ed96:	70fb      	strb	r3, [r7, #3]

	// MSB
	hdrv->txBuf[0] = (addr << 3) | (hdrv->Reg.words[addr] >> 8);
 800ed98:	78fb      	ldrb	r3, [r7, #3]
 800ed9a:	00db      	lsls	r3, r3, #3
 800ed9c:	b2da      	uxtb	r2, r3
 800ed9e:	78f9      	ldrb	r1, [r7, #3]
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800eda6:	0a1b      	lsrs	r3, r3, #8
 800eda8:	b2db      	uxtb	r3, r3
 800edaa:	4313      	orrs	r3, r2
 800edac:	b2da      	uxtb	r2, r3
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	// LSB
	hdrv->txBuf[1] = hdrv->Reg.words[addr] & 0xff;
 800edb4:	78fa      	ldrb	r2, [r7, #3]
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edbc:	b2da      	uxtb	r2, r3
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	HAL_GPIO_WritePin(hdrv->NSS_GPIOx, hdrv->NSS_GPIO_Pin, GPIO_PIN_RESET);
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	6a18      	ldr	r0, [r3, #32]
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800edcc:	2200      	movs	r2, #0
 800edce:	4619      	mov	r1, r3
 800edd0:	f7fc fae0 	bl	800b394 <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(hdrv->hspi, hdrv->txBuf, hdrv->rxBuf, 2, 1);
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	69d8      	ldr	r0, [r3, #28]
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800ede4:	2301      	movs	r3, #1
 800ede6:	9300      	str	r3, [sp, #0]
 800ede8:	2302      	movs	r3, #2
 800edea:	f7fd f87b 	bl	800bee4 <HAL_SPI_TransmitReceive>

	HAL_GPIO_WritePin(hdrv->NSS_GPIOx, hdrv->NSS_GPIO_Pin, GPIO_PIN_SET);
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	6a18      	ldr	r0, [r3, #32]
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800edf6:	2201      	movs	r2, #1
 800edf8:	4619      	mov	r1, r3
 800edfa:	f7fc facb 	bl	800b394 <HAL_GPIO_WritePin>

}
 800edfe:	bf00      	nop
 800ee00:	3708      	adds	r7, #8
 800ee02:	46bd      	mov	sp, r7
 800ee04:	bd80      	pop	{r7, pc}

0800ee06 <DRV_ReadData>:



void DRV_ReadData(DRV_TypeDef *hdrv, regAddr_t addr)
{
 800ee06:	b580      	push	{r7, lr}
 800ee08:	b084      	sub	sp, #16
 800ee0a:	af02      	add	r7, sp, #8
 800ee0c:	6078      	str	r0, [r7, #4]
 800ee0e:	460b      	mov	r3, r1
 800ee10:	70fb      	strb	r3, [r7, #3]

	// MSB
	hdrv->txBuf[0] = 0x80 | (addr << 3);
 800ee12:	78fb      	ldrb	r3, [r7, #3]
 800ee14:	00db      	lsls	r3, r3, #3
 800ee16:	b25b      	sxtb	r3, r3
 800ee18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ee1c:	b25b      	sxtb	r3, r3
 800ee1e:	b2da      	uxtb	r2, r3
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	// LSB
	hdrv->txBuf[1] = 0x00;
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	2200      	movs	r2, #0
 800ee2a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	HAL_GPIO_WritePin(hdrv->NSS_GPIOx, hdrv->NSS_GPIO_Pin, GPIO_PIN_RESET);
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	6a18      	ldr	r0, [r3, #32]
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ee36:	2200      	movs	r2, #0
 800ee38:	4619      	mov	r1, r3
 800ee3a:	f7fc faab 	bl	800b394 <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(hdrv->hspi, hdrv->txBuf, hdrv->rxBuf, 2, 1);
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	69d8      	ldr	r0, [r3, #28]
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800ee4e:	2301      	movs	r3, #1
 800ee50:	9300      	str	r3, [sp, #0]
 800ee52:	2302      	movs	r3, #2
 800ee54:	f7fd f846 	bl	800bee4 <HAL_SPI_TransmitReceive>

	HAL_GPIO_WritePin(hdrv->NSS_GPIOx, hdrv->NSS_GPIO_Pin, GPIO_PIN_SET);
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	6a18      	ldr	r0, [r3, #32]
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ee60:	2201      	movs	r2, #1
 800ee62:	4619      	mov	r1, r3
 800ee64:	f7fc fa96 	bl	800b394 <HAL_GPIO_WritePin>

	hdrv->Reg.words[addr] = (hdrv->rxBuf[0] << 8) | hdrv->rxBuf[1];
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee6e:	021b      	lsls	r3, r3, #8
 800ee70:	687a      	ldr	r2, [r7, #4]
 800ee72:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 800ee76:	4313      	orrs	r3, r2
 800ee78:	78fa      	ldrb	r2, [r7, #3]
 800ee7a:	4619      	mov	r1, r3
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 800ee82:	bf00      	nop
 800ee84:	3708      	adds	r7, #8
 800ee86:	46bd      	mov	sp, r7
 800ee88:	bd80      	pop	{r7, pc}
	...

0800ee8c <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc2;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	b084      	sub	sp, #16
 800ee90:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800ee92:	463b      	mov	r3, r7
 800ee94:	2200      	movs	r2, #0
 800ee96:	601a      	str	r2, [r3, #0]
 800ee98:	605a      	str	r2, [r3, #4]
 800ee9a:	609a      	str	r2, [r3, #8]
 800ee9c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800ee9e:	4b22      	ldr	r3, [pc, #136]	; (800ef28 <MX_ADC1_Init+0x9c>)
 800eea0:	4a22      	ldr	r2, [pc, #136]	; (800ef2c <MX_ADC1_Init+0xa0>)
 800eea2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800eea4:	4b20      	ldr	r3, [pc, #128]	; (800ef28 <MX_ADC1_Init+0x9c>)
 800eea6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800eeaa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800eeac:	4b1e      	ldr	r3, [pc, #120]	; (800ef28 <MX_ADC1_Init+0x9c>)
 800eeae:	2200      	movs	r2, #0
 800eeb0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800eeb2:	4b1d      	ldr	r3, [pc, #116]	; (800ef28 <MX_ADC1_Init+0x9c>)
 800eeb4:	2201      	movs	r2, #1
 800eeb6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800eeb8:	4b1b      	ldr	r3, [pc, #108]	; (800ef28 <MX_ADC1_Init+0x9c>)
 800eeba:	2201      	movs	r2, #1
 800eebc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800eebe:	4b1a      	ldr	r3, [pc, #104]	; (800ef28 <MX_ADC1_Init+0x9c>)
 800eec0:	2200      	movs	r2, #0
 800eec2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800eec6:	4b18      	ldr	r3, [pc, #96]	; (800ef28 <MX_ADC1_Init+0x9c>)
 800eec8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eecc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 800eece:	4b16      	ldr	r3, [pc, #88]	; (800ef28 <MX_ADC1_Init+0x9c>)
 800eed0:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800eed4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800eed6:	4b14      	ldr	r3, [pc, #80]	; (800ef28 <MX_ADC1_Init+0x9c>)
 800eed8:	2200      	movs	r2, #0
 800eeda:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800eedc:	4b12      	ldr	r3, [pc, #72]	; (800ef28 <MX_ADC1_Init+0x9c>)
 800eede:	2201      	movs	r2, #1
 800eee0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800eee2:	4b11      	ldr	r3, [pc, #68]	; (800ef28 <MX_ADC1_Init+0x9c>)
 800eee4:	2201      	movs	r2, #1
 800eee6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800eeea:	4b0f      	ldr	r3, [pc, #60]	; (800ef28 <MX_ADC1_Init+0x9c>)
 800eeec:	2200      	movs	r2, #0
 800eeee:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800eef0:	480d      	ldr	r0, [pc, #52]	; (800ef28 <MX_ADC1_Init+0x9c>)
 800eef2:	f7f9 ffaf 	bl	8008e54 <HAL_ADC_Init>
 800eef6:	4603      	mov	r3, r0
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d001      	beq.n	800ef00 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800eefc:	f001 f94e 	bl	801019c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800ef00:	2300      	movs	r3, #0
 800ef02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800ef04:	2301      	movs	r3, #1
 800ef06:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800ef08:	2300      	movs	r3, #0
 800ef0a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800ef0c:	463b      	mov	r3, r7
 800ef0e:	4619      	mov	r1, r3
 800ef10:	4805      	ldr	r0, [pc, #20]	; (800ef28 <MX_ADC1_Init+0x9c>)
 800ef12:	f7fa f8f3 	bl	80090fc <HAL_ADC_ConfigChannel>
 800ef16:	4603      	mov	r3, r0
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d001      	beq.n	800ef20 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800ef1c:	f001 f93e 	bl	801019c <Error_Handler>
  }

}
 800ef20:	bf00      	nop
 800ef22:	3710      	adds	r7, #16
 800ef24:	46bd      	mov	sp, r7
 800ef26:	bd80      	pop	{r7, pc}
 800ef28:	20004314 	.word	0x20004314
 800ef2c:	40012000 	.word	0x40012000

0800ef30 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800ef30:	b580      	push	{r7, lr}
 800ef32:	b084      	sub	sp, #16
 800ef34:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800ef36:	463b      	mov	r3, r7
 800ef38:	2200      	movs	r2, #0
 800ef3a:	601a      	str	r2, [r3, #0]
 800ef3c:	605a      	str	r2, [r3, #4]
 800ef3e:	609a      	str	r2, [r3, #8]
 800ef40:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 800ef42:	4b22      	ldr	r3, [pc, #136]	; (800efcc <MX_ADC2_Init+0x9c>)
 800ef44:	4a22      	ldr	r2, [pc, #136]	; (800efd0 <MX_ADC2_Init+0xa0>)
 800ef46:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800ef48:	4b20      	ldr	r3, [pc, #128]	; (800efcc <MX_ADC2_Init+0x9c>)
 800ef4a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800ef4e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800ef50:	4b1e      	ldr	r3, [pc, #120]	; (800efcc <MX_ADC2_Init+0x9c>)
 800ef52:	2200      	movs	r2, #0
 800ef54:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800ef56:	4b1d      	ldr	r3, [pc, #116]	; (800efcc <MX_ADC2_Init+0x9c>)
 800ef58:	2200      	movs	r2, #0
 800ef5a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800ef5c:	4b1b      	ldr	r3, [pc, #108]	; (800efcc <MX_ADC2_Init+0x9c>)
 800ef5e:	2200      	movs	r2, #0
 800ef60:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800ef62:	4b1a      	ldr	r3, [pc, #104]	; (800efcc <MX_ADC2_Init+0x9c>)
 800ef64:	2200      	movs	r2, #0
 800ef66:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800ef6a:	4b18      	ldr	r3, [pc, #96]	; (800efcc <MX_ADC2_Init+0x9c>)
 800ef6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef70:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 800ef72:	4b16      	ldr	r3, [pc, #88]	; (800efcc <MX_ADC2_Init+0x9c>)
 800ef74:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800ef78:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800ef7a:	4b14      	ldr	r3, [pc, #80]	; (800efcc <MX_ADC2_Init+0x9c>)
 800ef7c:	2200      	movs	r2, #0
 800ef7e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800ef80:	4b12      	ldr	r3, [pc, #72]	; (800efcc <MX_ADC2_Init+0x9c>)
 800ef82:	2201      	movs	r2, #1
 800ef84:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800ef86:	4b11      	ldr	r3, [pc, #68]	; (800efcc <MX_ADC2_Init+0x9c>)
 800ef88:	2201      	movs	r2, #1
 800ef8a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800ef8e:	4b0f      	ldr	r3, [pc, #60]	; (800efcc <MX_ADC2_Init+0x9c>)
 800ef90:	2201      	movs	r2, #1
 800ef92:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800ef94:	480d      	ldr	r0, [pc, #52]	; (800efcc <MX_ADC2_Init+0x9c>)
 800ef96:	f7f9 ff5d 	bl	8008e54 <HAL_ADC_Init>
 800ef9a:	4603      	mov	r3, r0
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d001      	beq.n	800efa4 <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 800efa0:	f001 f8fc 	bl	801019c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800efa4:	2304      	movs	r3, #4
 800efa6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800efa8:	2301      	movs	r3, #1
 800efaa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800efac:	2300      	movs	r3, #0
 800efae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800efb0:	463b      	mov	r3, r7
 800efb2:	4619      	mov	r1, r3
 800efb4:	4805      	ldr	r0, [pc, #20]	; (800efcc <MX_ADC2_Init+0x9c>)
 800efb6:	f7fa f8a1 	bl	80090fc <HAL_ADC_ConfigChannel>
 800efba:	4603      	mov	r3, r0
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d001      	beq.n	800efc4 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 800efc0:	f001 f8ec 	bl	801019c <Error_Handler>
  }

}
 800efc4:	bf00      	nop
 800efc6:	3710      	adds	r7, #16
 800efc8:	46bd      	mov	sp, r7
 800efca:	bd80      	pop	{r7, pc}
 800efcc:	2000426c 	.word	0x2000426c
 800efd0:	40012100 	.word	0x40012100

0800efd4 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800efd4:	b580      	push	{r7, lr}
 800efd6:	b084      	sub	sp, #16
 800efd8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800efda:	463b      	mov	r3, r7
 800efdc:	2200      	movs	r2, #0
 800efde:	601a      	str	r2, [r3, #0]
 800efe0:	605a      	str	r2, [r3, #4]
 800efe2:	609a      	str	r2, [r3, #8]
 800efe4:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 800efe6:	4b22      	ldr	r3, [pc, #136]	; (800f070 <MX_ADC3_Init+0x9c>)
 800efe8:	4a22      	ldr	r2, [pc, #136]	; (800f074 <MX_ADC3_Init+0xa0>)
 800efea:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800efec:	4b20      	ldr	r3, [pc, #128]	; (800f070 <MX_ADC3_Init+0x9c>)
 800efee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800eff2:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800eff4:	4b1e      	ldr	r3, [pc, #120]	; (800f070 <MX_ADC3_Init+0x9c>)
 800eff6:	2200      	movs	r2, #0
 800eff8:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 800effa:	4b1d      	ldr	r3, [pc, #116]	; (800f070 <MX_ADC3_Init+0x9c>)
 800effc:	2200      	movs	r2, #0
 800effe:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800f000:	4b1b      	ldr	r3, [pc, #108]	; (800f070 <MX_ADC3_Init+0x9c>)
 800f002:	2200      	movs	r2, #0
 800f004:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800f006:	4b1a      	ldr	r3, [pc, #104]	; (800f070 <MX_ADC3_Init+0x9c>)
 800f008:	2200      	movs	r2, #0
 800f00a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800f00e:	4b18      	ldr	r3, [pc, #96]	; (800f070 <MX_ADC3_Init+0x9c>)
 800f010:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f014:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 800f016:	4b16      	ldr	r3, [pc, #88]	; (800f070 <MX_ADC3_Init+0x9c>)
 800f018:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800f01c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800f01e:	4b14      	ldr	r3, [pc, #80]	; (800f070 <MX_ADC3_Init+0x9c>)
 800f020:	2200      	movs	r2, #0
 800f022:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800f024:	4b12      	ldr	r3, [pc, #72]	; (800f070 <MX_ADC3_Init+0x9c>)
 800f026:	2201      	movs	r2, #1
 800f028:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800f02a:	4b11      	ldr	r3, [pc, #68]	; (800f070 <MX_ADC3_Init+0x9c>)
 800f02c:	2201      	movs	r2, #1
 800f02e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800f032:	4b0f      	ldr	r3, [pc, #60]	; (800f070 <MX_ADC3_Init+0x9c>)
 800f034:	2201      	movs	r2, #1
 800f036:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800f038:	480d      	ldr	r0, [pc, #52]	; (800f070 <MX_ADC3_Init+0x9c>)
 800f03a:	f7f9 ff0b 	bl	8008e54 <HAL_ADC_Init>
 800f03e:	4603      	mov	r3, r0
 800f040:	2b00      	cmp	r3, #0
 800f042:	d001      	beq.n	800f048 <MX_ADC3_Init+0x74>
  {
    Error_Handler();
 800f044:	f001 f8aa 	bl	801019c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800f048:	2301      	movs	r3, #1
 800f04a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800f04c:	2301      	movs	r3, #1
 800f04e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800f050:	2300      	movs	r3, #0
 800f052:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800f054:	463b      	mov	r3, r7
 800f056:	4619      	mov	r1, r3
 800f058:	4805      	ldr	r0, [pc, #20]	; (800f070 <MX_ADC3_Init+0x9c>)
 800f05a:	f7fa f84f 	bl	80090fc <HAL_ADC_ConfigChannel>
 800f05e:	4603      	mov	r3, r0
 800f060:	2b00      	cmp	r3, #0
 800f062:	d001      	beq.n	800f068 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 800f064:	f001 f89a 	bl	801019c <Error_Handler>
  }

}
 800f068:	bf00      	nop
 800f06a:	3710      	adds	r7, #16
 800f06c:	46bd      	mov	sp, r7
 800f06e:	bd80      	pop	{r7, pc}
 800f070:	2000435c 	.word	0x2000435c
 800f074:	40012200 	.word	0x40012200

0800f078 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800f078:	b580      	push	{r7, lr}
 800f07a:	b08e      	sub	sp, #56	; 0x38
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f080:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f084:	2200      	movs	r2, #0
 800f086:	601a      	str	r2, [r3, #0]
 800f088:	605a      	str	r2, [r3, #4]
 800f08a:	609a      	str	r2, [r3, #8]
 800f08c:	60da      	str	r2, [r3, #12]
 800f08e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	4a9b      	ldr	r2, [pc, #620]	; (800f304 <HAL_ADC_MspInit+0x28c>)
 800f096:	4293      	cmp	r3, r2
 800f098:	d172      	bne.n	800f180 <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800f09a:	2300      	movs	r3, #0
 800f09c:	623b      	str	r3, [r7, #32]
 800f09e:	4b9a      	ldr	r3, [pc, #616]	; (800f308 <HAL_ADC_MspInit+0x290>)
 800f0a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f0a2:	4a99      	ldr	r2, [pc, #612]	; (800f308 <HAL_ADC_MspInit+0x290>)
 800f0a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f0a8:	6453      	str	r3, [r2, #68]	; 0x44
 800f0aa:	4b97      	ldr	r3, [pc, #604]	; (800f308 <HAL_ADC_MspInit+0x290>)
 800f0ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f0ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f0b2:	623b      	str	r3, [r7, #32]
 800f0b4:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	61fb      	str	r3, [r7, #28]
 800f0ba:	4b93      	ldr	r3, [pc, #588]	; (800f308 <HAL_ADC_MspInit+0x290>)
 800f0bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0be:	4a92      	ldr	r2, [pc, #584]	; (800f308 <HAL_ADC_MspInit+0x290>)
 800f0c0:	f043 0304 	orr.w	r3, r3, #4
 800f0c4:	6313      	str	r3, [r2, #48]	; 0x30
 800f0c6:	4b90      	ldr	r3, [pc, #576]	; (800f308 <HAL_ADC_MspInit+0x290>)
 800f0c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0ca:	f003 0304 	and.w	r3, r3, #4
 800f0ce:	61fb      	str	r3, [r7, #28]
 800f0d0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	61bb      	str	r3, [r7, #24]
 800f0d6:	4b8c      	ldr	r3, [pc, #560]	; (800f308 <HAL_ADC_MspInit+0x290>)
 800f0d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0da:	4a8b      	ldr	r2, [pc, #556]	; (800f308 <HAL_ADC_MspInit+0x290>)
 800f0dc:	f043 0301 	orr.w	r3, r3, #1
 800f0e0:	6313      	str	r3, [r2, #48]	; 0x30
 800f0e2:	4b89      	ldr	r3, [pc, #548]	; (800f308 <HAL_ADC_MspInit+0x290>)
 800f0e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0e6:	f003 0301 	and.w	r3, r3, #1
 800f0ea:	61bb      	str	r3, [r7, #24]
 800f0ec:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN10
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800f0ee:	2301      	movs	r3, #1
 800f0f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f0f2:	2303      	movs	r3, #3
 800f0f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f0fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f0fe:	4619      	mov	r1, r3
 800f100:	4882      	ldr	r0, [pc, #520]	; (800f30c <HAL_ADC_MspInit+0x294>)
 800f102:	f7fb ff9d 	bl	800b040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800f106:	2301      	movs	r3, #1
 800f108:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f10a:	2303      	movs	r3, #3
 800f10c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f10e:	2300      	movs	r3, #0
 800f110:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f112:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f116:	4619      	mov	r1, r3
 800f118:	487d      	ldr	r0, [pc, #500]	; (800f310 <HAL_ADC_MspInit+0x298>)
 800f11a:	f7fb ff91 	bl	800b040 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800f11e:	4b7d      	ldr	r3, [pc, #500]	; (800f314 <HAL_ADC_MspInit+0x29c>)
 800f120:	4a7d      	ldr	r2, [pc, #500]	; (800f318 <HAL_ADC_MspInit+0x2a0>)
 800f122:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800f124:	4b7b      	ldr	r3, [pc, #492]	; (800f314 <HAL_ADC_MspInit+0x29c>)
 800f126:	2200      	movs	r2, #0
 800f128:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800f12a:	4b7a      	ldr	r3, [pc, #488]	; (800f314 <HAL_ADC_MspInit+0x29c>)
 800f12c:	2200      	movs	r2, #0
 800f12e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800f130:	4b78      	ldr	r3, [pc, #480]	; (800f314 <HAL_ADC_MspInit+0x29c>)
 800f132:	2200      	movs	r2, #0
 800f134:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800f136:	4b77      	ldr	r3, [pc, #476]	; (800f314 <HAL_ADC_MspInit+0x29c>)
 800f138:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f13c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800f13e:	4b75      	ldr	r3, [pc, #468]	; (800f314 <HAL_ADC_MspInit+0x29c>)
 800f140:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f144:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800f146:	4b73      	ldr	r3, [pc, #460]	; (800f314 <HAL_ADC_MspInit+0x29c>)
 800f148:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f14c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800f14e:	4b71      	ldr	r3, [pc, #452]	; (800f314 <HAL_ADC_MspInit+0x29c>)
 800f150:	2200      	movs	r2, #0
 800f152:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800f154:	4b6f      	ldr	r3, [pc, #444]	; (800f314 <HAL_ADC_MspInit+0x29c>)
 800f156:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800f15a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800f15c:	4b6d      	ldr	r3, [pc, #436]	; (800f314 <HAL_ADC_MspInit+0x29c>)
 800f15e:	2200      	movs	r2, #0
 800f160:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800f162:	486c      	ldr	r0, [pc, #432]	; (800f314 <HAL_ADC_MspInit+0x29c>)
 800f164:	f7fb f8f0 	bl	800a348 <HAL_DMA_Init>
 800f168:	4603      	mov	r3, r0
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d001      	beq.n	800f172 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800f16e:	f001 f815 	bl	801019c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	4a67      	ldr	r2, [pc, #412]	; (800f314 <HAL_ADC_MspInit+0x29c>)
 800f176:	639a      	str	r2, [r3, #56]	; 0x38
 800f178:	4a66      	ldr	r2, [pc, #408]	; (800f314 <HAL_ADC_MspInit+0x29c>)
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800f17e:	e0bc      	b.n	800f2fa <HAL_ADC_MspInit+0x282>
  else if(adcHandle->Instance==ADC2)
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	4a65      	ldr	r2, [pc, #404]	; (800f31c <HAL_ADC_MspInit+0x2a4>)
 800f186:	4293      	cmp	r3, r2
 800f188:	d159      	bne.n	800f23e <HAL_ADC_MspInit+0x1c6>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800f18a:	2300      	movs	r3, #0
 800f18c:	617b      	str	r3, [r7, #20]
 800f18e:	4b5e      	ldr	r3, [pc, #376]	; (800f308 <HAL_ADC_MspInit+0x290>)
 800f190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f192:	4a5d      	ldr	r2, [pc, #372]	; (800f308 <HAL_ADC_MspInit+0x290>)
 800f194:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f198:	6453      	str	r3, [r2, #68]	; 0x44
 800f19a:	4b5b      	ldr	r3, [pc, #364]	; (800f308 <HAL_ADC_MspInit+0x290>)
 800f19c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f19e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f1a2:	617b      	str	r3, [r7, #20]
 800f1a4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	613b      	str	r3, [r7, #16]
 800f1aa:	4b57      	ldr	r3, [pc, #348]	; (800f308 <HAL_ADC_MspInit+0x290>)
 800f1ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1ae:	4a56      	ldr	r2, [pc, #344]	; (800f308 <HAL_ADC_MspInit+0x290>)
 800f1b0:	f043 0301 	orr.w	r3, r3, #1
 800f1b4:	6313      	str	r3, [r2, #48]	; 0x30
 800f1b6:	4b54      	ldr	r3, [pc, #336]	; (800f308 <HAL_ADC_MspInit+0x290>)
 800f1b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1ba:	f003 0301 	and.w	r3, r3, #1
 800f1be:	613b      	str	r3, [r7, #16]
 800f1c0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800f1c2:	2310      	movs	r3, #16
 800f1c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f1c6:	2303      	movs	r3, #3
 800f1c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f1ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f1d2:	4619      	mov	r1, r3
 800f1d4:	484e      	ldr	r0, [pc, #312]	; (800f310 <HAL_ADC_MspInit+0x298>)
 800f1d6:	f7fb ff33 	bl	800b040 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800f1da:	4b51      	ldr	r3, [pc, #324]	; (800f320 <HAL_ADC_MspInit+0x2a8>)
 800f1dc:	4a51      	ldr	r2, [pc, #324]	; (800f324 <HAL_ADC_MspInit+0x2ac>)
 800f1de:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800f1e0:	4b4f      	ldr	r3, [pc, #316]	; (800f320 <HAL_ADC_MspInit+0x2a8>)
 800f1e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800f1e6:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800f1e8:	4b4d      	ldr	r3, [pc, #308]	; (800f320 <HAL_ADC_MspInit+0x2a8>)
 800f1ea:	2200      	movs	r2, #0
 800f1ec:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800f1ee:	4b4c      	ldr	r3, [pc, #304]	; (800f320 <HAL_ADC_MspInit+0x2a8>)
 800f1f0:	2200      	movs	r2, #0
 800f1f2:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800f1f4:	4b4a      	ldr	r3, [pc, #296]	; (800f320 <HAL_ADC_MspInit+0x2a8>)
 800f1f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f1fa:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800f1fc:	4b48      	ldr	r3, [pc, #288]	; (800f320 <HAL_ADC_MspInit+0x2a8>)
 800f1fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f202:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800f204:	4b46      	ldr	r3, [pc, #280]	; (800f320 <HAL_ADC_MspInit+0x2a8>)
 800f206:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f20a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 800f20c:	4b44      	ldr	r3, [pc, #272]	; (800f320 <HAL_ADC_MspInit+0x2a8>)
 800f20e:	2200      	movs	r2, #0
 800f210:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 800f212:	4b43      	ldr	r3, [pc, #268]	; (800f320 <HAL_ADC_MspInit+0x2a8>)
 800f214:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800f218:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800f21a:	4b41      	ldr	r3, [pc, #260]	; (800f320 <HAL_ADC_MspInit+0x2a8>)
 800f21c:	2200      	movs	r2, #0
 800f21e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800f220:	483f      	ldr	r0, [pc, #252]	; (800f320 <HAL_ADC_MspInit+0x2a8>)
 800f222:	f7fb f891 	bl	800a348 <HAL_DMA_Init>
 800f226:	4603      	mov	r3, r0
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d001      	beq.n	800f230 <HAL_ADC_MspInit+0x1b8>
      Error_Handler();
 800f22c:	f000 ffb6 	bl	801019c <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	4a3b      	ldr	r2, [pc, #236]	; (800f320 <HAL_ADC_MspInit+0x2a8>)
 800f234:	639a      	str	r2, [r3, #56]	; 0x38
 800f236:	4a3a      	ldr	r2, [pc, #232]	; (800f320 <HAL_ADC_MspInit+0x2a8>)
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800f23c:	e05d      	b.n	800f2fa <HAL_ADC_MspInit+0x282>
  else if(adcHandle->Instance==ADC3)
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	4a39      	ldr	r2, [pc, #228]	; (800f328 <HAL_ADC_MspInit+0x2b0>)
 800f244:	4293      	cmp	r3, r2
 800f246:	d158      	bne.n	800f2fa <HAL_ADC_MspInit+0x282>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800f248:	2300      	movs	r3, #0
 800f24a:	60fb      	str	r3, [r7, #12]
 800f24c:	4b2e      	ldr	r3, [pc, #184]	; (800f308 <HAL_ADC_MspInit+0x290>)
 800f24e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f250:	4a2d      	ldr	r2, [pc, #180]	; (800f308 <HAL_ADC_MspInit+0x290>)
 800f252:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f256:	6453      	str	r3, [r2, #68]	; 0x44
 800f258:	4b2b      	ldr	r3, [pc, #172]	; (800f308 <HAL_ADC_MspInit+0x290>)
 800f25a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f25c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f260:	60fb      	str	r3, [r7, #12]
 800f262:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f264:	2300      	movs	r3, #0
 800f266:	60bb      	str	r3, [r7, #8]
 800f268:	4b27      	ldr	r3, [pc, #156]	; (800f308 <HAL_ADC_MspInit+0x290>)
 800f26a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f26c:	4a26      	ldr	r2, [pc, #152]	; (800f308 <HAL_ADC_MspInit+0x290>)
 800f26e:	f043 0301 	orr.w	r3, r3, #1
 800f272:	6313      	str	r3, [r2, #48]	; 0x30
 800f274:	4b24      	ldr	r3, [pc, #144]	; (800f308 <HAL_ADC_MspInit+0x290>)
 800f276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f278:	f003 0301 	and.w	r3, r3, #1
 800f27c:	60bb      	str	r3, [r7, #8]
 800f27e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800f280:	2302      	movs	r3, #2
 800f282:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800f284:	2303      	movs	r3, #3
 800f286:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f288:	2300      	movs	r3, #0
 800f28a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f28c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f290:	4619      	mov	r1, r3
 800f292:	481f      	ldr	r0, [pc, #124]	; (800f310 <HAL_ADC_MspInit+0x298>)
 800f294:	f7fb fed4 	bl	800b040 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 800f298:	4b24      	ldr	r3, [pc, #144]	; (800f32c <HAL_ADC_MspInit+0x2b4>)
 800f29a:	4a25      	ldr	r2, [pc, #148]	; (800f330 <HAL_ADC_MspInit+0x2b8>)
 800f29c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 800f29e:	4b23      	ldr	r3, [pc, #140]	; (800f32c <HAL_ADC_MspInit+0x2b4>)
 800f2a0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800f2a4:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800f2a6:	4b21      	ldr	r3, [pc, #132]	; (800f32c <HAL_ADC_MspInit+0x2b4>)
 800f2a8:	2200      	movs	r2, #0
 800f2aa:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800f2ac:	4b1f      	ldr	r3, [pc, #124]	; (800f32c <HAL_ADC_MspInit+0x2b4>)
 800f2ae:	2200      	movs	r2, #0
 800f2b0:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800f2b2:	4b1e      	ldr	r3, [pc, #120]	; (800f32c <HAL_ADC_MspInit+0x2b4>)
 800f2b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f2b8:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800f2ba:	4b1c      	ldr	r3, [pc, #112]	; (800f32c <HAL_ADC_MspInit+0x2b4>)
 800f2bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f2c0:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800f2c2:	4b1a      	ldr	r3, [pc, #104]	; (800f32c <HAL_ADC_MspInit+0x2b4>)
 800f2c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f2c8:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 800f2ca:	4b18      	ldr	r3, [pc, #96]	; (800f32c <HAL_ADC_MspInit+0x2b4>)
 800f2cc:	2200      	movs	r2, #0
 800f2ce:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 800f2d0:	4b16      	ldr	r3, [pc, #88]	; (800f32c <HAL_ADC_MspInit+0x2b4>)
 800f2d2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800f2d6:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800f2d8:	4b14      	ldr	r3, [pc, #80]	; (800f32c <HAL_ADC_MspInit+0x2b4>)
 800f2da:	2200      	movs	r2, #0
 800f2dc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800f2de:	4813      	ldr	r0, [pc, #76]	; (800f32c <HAL_ADC_MspInit+0x2b4>)
 800f2e0:	f7fb f832 	bl	800a348 <HAL_DMA_Init>
 800f2e4:	4603      	mov	r3, r0
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d001      	beq.n	800f2ee <HAL_ADC_MspInit+0x276>
      Error_Handler();
 800f2ea:	f000 ff57 	bl	801019c <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	4a0e      	ldr	r2, [pc, #56]	; (800f32c <HAL_ADC_MspInit+0x2b4>)
 800f2f2:	639a      	str	r2, [r3, #56]	; 0x38
 800f2f4:	4a0d      	ldr	r2, [pc, #52]	; (800f32c <HAL_ADC_MspInit+0x2b4>)
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	6393      	str	r3, [r2, #56]	; 0x38
}
 800f2fa:	bf00      	nop
 800f2fc:	3738      	adds	r7, #56	; 0x38
 800f2fe:	46bd      	mov	sp, r7
 800f300:	bd80      	pop	{r7, pc}
 800f302:	bf00      	nop
 800f304:	40012000 	.word	0x40012000
 800f308:	40023800 	.word	0x40023800
 800f30c:	40020800 	.word	0x40020800
 800f310:	40020000 	.word	0x40020000
 800f314:	200043a4 	.word	0x200043a4
 800f318:	40026410 	.word	0x40026410
 800f31c:	40012100 	.word	0x40012100
 800f320:	20004404 	.word	0x20004404
 800f324:	40026440 	.word	0x40026440
 800f328:	40012200 	.word	0x40012200
 800f32c:	200042b4 	.word	0x200042b4
 800f330:	40026428 	.word	0x40026428

0800f334 <ADC_Init>:

/* USER CODE BEGIN 1 */


void ADC_Init(void)
{
 800f334:	b580      	push	{r7, lr}
 800f336:	af00      	add	r7, sp, #0

	  // ADC Starting
	  HAL_ADC_Start_DMA(&hadc1, AD_Iu, 2);
 800f338:	2202      	movs	r2, #2
 800f33a:	4908      	ldr	r1, [pc, #32]	; (800f35c <ADC_Init+0x28>)
 800f33c:	4808      	ldr	r0, [pc, #32]	; (800f360 <ADC_Init+0x2c>)
 800f33e:	f7f9 fdcd 	bl	8008edc <HAL_ADC_Start_DMA>
	  HAL_ADC_Start_DMA(&hadc2, AD_Iv, 1);
 800f342:	2201      	movs	r2, #1
 800f344:	4907      	ldr	r1, [pc, #28]	; (800f364 <ADC_Init+0x30>)
 800f346:	4808      	ldr	r0, [pc, #32]	; (800f368 <ADC_Init+0x34>)
 800f348:	f7f9 fdc8 	bl	8008edc <HAL_ADC_Start_DMA>
	  HAL_ADC_Start_DMA(&hadc3, AD_Iw, 1);
 800f34c:	2201      	movs	r2, #1
 800f34e:	4907      	ldr	r1, [pc, #28]	; (800f36c <ADC_Init+0x38>)
 800f350:	4807      	ldr	r0, [pc, #28]	; (800f370 <ADC_Init+0x3c>)
 800f352:	f7f9 fdc3 	bl	8008edc <HAL_ADC_Start_DMA>

}
 800f356:	bf00      	nop
 800f358:	bd80      	pop	{r7, pc}
 800f35a:	bf00      	nop
 800f35c:	2000012c 	.word	0x2000012c
 800f360:	20004314 	.word	0x20004314
 800f364:	20000130 	.word	0x20000130
 800f368:	2000426c 	.word	0x2000426c
 800f36c:	20000134 	.word	0x20000134
 800f370:	2000435c 	.word	0x2000435c

0800f374 <get_current_dq>:


void get_current_dq(float *Id, float *Iq, int SVM_sector, float cos_theta_re, float sin_theta_re)
{
 800f374:	b580      	push	{r7, lr}
 800f376:	b086      	sub	sp, #24
 800f378:	af00      	add	r7, sp, #0
 800f37a:	6178      	str	r0, [r7, #20]
 800f37c:	6139      	str	r1, [r7, #16]
 800f37e:	60fa      	str	r2, [r7, #12]
 800f380:	ed87 0a02 	vstr	s0, [r7, #8]
 800f384:	edc7 0a01 	vstr	s1, [r7, #4]
	AD_Iu = HAL_ADC_GetValue(&hadc1);
	AD_Iv = HAL_ADC_GetValue(&hadc2);
	AD_Iw = HAL_ADC_GetValue(&hadc3);
	*/

	HAL_ADC_Start_DMA(&hadc1, AD_Iu, 2);
 800f388:	2202      	movs	r2, #2
 800f38a:	49be      	ldr	r1, [pc, #760]	; (800f684 <get_current_dq+0x310>)
 800f38c:	48be      	ldr	r0, [pc, #760]	; (800f688 <get_current_dq+0x314>)
 800f38e:	f7f9 fda5 	bl	8008edc <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, AD_Iv, 1);
 800f392:	2201      	movs	r2, #1
 800f394:	49bd      	ldr	r1, [pc, #756]	; (800f68c <get_current_dq+0x318>)
 800f396:	48be      	ldr	r0, [pc, #760]	; (800f690 <get_current_dq+0x31c>)
 800f398:	f7f9 fda0 	bl	8008edc <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc3, AD_Iw, 1);
 800f39c:	2201      	movs	r2, #1
 800f39e:	49bd      	ldr	r1, [pc, #756]	; (800f694 <get_current_dq+0x320>)
 800f3a0:	48bd      	ldr	r0, [pc, #756]	; (800f698 <get_current_dq+0x324>)
 800f3a2:	f7f9 fd9b 	bl	8008edc <HAL_ADC_Start_DMA>

#endif

#if _MEDF_ENABLE_

	AD_Iu_buf[pos_MEDF_I] = (int32_t)AD_Iu[0];
 800f3a6:	4bb7      	ldr	r3, [pc, #732]	; (800f684 <get_current_dq+0x310>)
 800f3a8:	881b      	ldrh	r3, [r3, #0]
 800f3aa:	b29a      	uxth	r2, r3
 800f3ac:	4bbb      	ldr	r3, [pc, #748]	; (800f69c <get_current_dq+0x328>)
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	4611      	mov	r1, r2
 800f3b2:	4abb      	ldr	r2, [pc, #748]	; (800f6a0 <get_current_dq+0x32c>)
 800f3b4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	AD_Iv_buf[pos_MEDF_I] = (int32_t)AD_Iv[0];
 800f3b8:	4bb4      	ldr	r3, [pc, #720]	; (800f68c <get_current_dq+0x318>)
 800f3ba:	881b      	ldrh	r3, [r3, #0]
 800f3bc:	b29a      	uxth	r2, r3
 800f3be:	4bb7      	ldr	r3, [pc, #732]	; (800f69c <get_current_dq+0x328>)
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	4611      	mov	r1, r2
 800f3c4:	4ab7      	ldr	r2, [pc, #732]	; (800f6a4 <get_current_dq+0x330>)
 800f3c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	AD_Iw_buf[pos_MEDF_I] = (int32_t)AD_Iw[0];
 800f3ca:	4bb2      	ldr	r3, [pc, #712]	; (800f694 <get_current_dq+0x320>)
 800f3cc:	881b      	ldrh	r3, [r3, #0]
 800f3ce:	b29a      	uxth	r2, r3
 800f3d0:	4bb2      	ldr	r3, [pc, #712]	; (800f69c <get_current_dq+0x328>)
 800f3d2:	681b      	ldr	r3, [r3, #0]
 800f3d4:	4611      	mov	r1, r2
 800f3d6:	4ab4      	ldr	r2, [pc, #720]	; (800f6a8 <get_current_dq+0x334>)
 800f3d8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	pos_MEDF_I += 1;
 800f3dc:	4baf      	ldr	r3, [pc, #700]	; (800f69c <get_current_dq+0x328>)
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	3301      	adds	r3, #1
 800f3e2:	4aae      	ldr	r2, [pc, #696]	; (800f69c <get_current_dq+0x328>)
 800f3e4:	6013      	str	r3, [r2, #0]
	if(pos_MEDF_I >= N_MEDF_I)
 800f3e6:	4bad      	ldr	r3, [pc, #692]	; (800f69c <get_current_dq+0x328>)
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	2b02      	cmp	r3, #2
 800f3ec:	dd02      	ble.n	800f3f4 <get_current_dq+0x80>
	{
		pos_MEDF_I = 0;
 800f3ee:	4bab      	ldr	r3, [pc, #684]	; (800f69c <get_current_dq+0x328>)
 800f3f0:	2200      	movs	r2, #0
 800f3f2:	601a      	str	r2, [r3, #0]
	}

	AD_Iu_MEDF = median3(AD_Iu_buf);
 800f3f4:	48aa      	ldr	r0, [pc, #680]	; (800f6a0 <get_current_dq+0x32c>)
 800f3f6:	f000 f979 	bl	800f6ec <median3>
 800f3fa:	4602      	mov	r2, r0
 800f3fc:	4bab      	ldr	r3, [pc, #684]	; (800f6ac <get_current_dq+0x338>)
 800f3fe:	601a      	str	r2, [r3, #0]
	AD_Iv_MEDF = median3(AD_Iv_buf);
 800f400:	48a8      	ldr	r0, [pc, #672]	; (800f6a4 <get_current_dq+0x330>)
 800f402:	f000 f973 	bl	800f6ec <median3>
 800f406:	4602      	mov	r2, r0
 800f408:	4ba9      	ldr	r3, [pc, #676]	; (800f6b0 <get_current_dq+0x33c>)
 800f40a:	601a      	str	r2, [r3, #0]
	AD_Iw_MEDF = median3(AD_Iw_buf);
 800f40c:	48a6      	ldr	r0, [pc, #664]	; (800f6a8 <get_current_dq+0x334>)
 800f40e:	f000 f96d 	bl	800f6ec <median3>
 800f412:	4602      	mov	r2, r0
 800f414:	4ba7      	ldr	r3, [pc, #668]	; (800f6b4 <get_current_dq+0x340>)
 800f416:	601a      	str	r2, [r3, #0]

	V_Iu = (float)AD_Iu_MEDF / AD_Range * Vref_AD - V_Iu_offset;
 800f418:	4ba4      	ldr	r3, [pc, #656]	; (800f6ac <get_current_dq+0x338>)
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	ee07 3a90 	vmov	s15, r3
 800f420:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f424:	eddf 7aa4 	vldr	s15, [pc, #656]	; 800f6b8 <get_current_dq+0x344>
 800f428:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f42c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f430:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 800f6bc <get_current_dq+0x348>
 800f434:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f438:	4ba1      	ldr	r3, [pc, #644]	; (800f6c0 <get_current_dq+0x34c>)
 800f43a:	edd3 7a00 	vldr	s15, [r3]
 800f43e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f442:	4ba0      	ldr	r3, [pc, #640]	; (800f6c4 <get_current_dq+0x350>)
 800f444:	edc3 7a00 	vstr	s15, [r3]
	V_Iv = (float)AD_Iv_MEDF / AD_Range * Vref_AD - V_Iv_offset;
 800f448:	4b99      	ldr	r3, [pc, #612]	; (800f6b0 <get_current_dq+0x33c>)
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	ee07 3a90 	vmov	s15, r3
 800f450:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f454:	eddf 7a98 	vldr	s15, [pc, #608]	; 800f6b8 <get_current_dq+0x344>
 800f458:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f45c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f460:	ed9f 7a96 	vldr	s14, [pc, #600]	; 800f6bc <get_current_dq+0x348>
 800f464:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f468:	4b97      	ldr	r3, [pc, #604]	; (800f6c8 <get_current_dq+0x354>)
 800f46a:	edd3 7a00 	vldr	s15, [r3]
 800f46e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f472:	4b96      	ldr	r3, [pc, #600]	; (800f6cc <get_current_dq+0x358>)
 800f474:	edc3 7a00 	vstr	s15, [r3]
	V_Iw = (float)AD_Iw_MEDF / AD_Range * Vref_AD - V_Iw_offset;
 800f478:	4b8e      	ldr	r3, [pc, #568]	; (800f6b4 <get_current_dq+0x340>)
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	ee07 3a90 	vmov	s15, r3
 800f480:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f484:	eddf 7a8c 	vldr	s15, [pc, #560]	; 800f6b8 <get_current_dq+0x344>
 800f488:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f48c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f490:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800f6bc <get_current_dq+0x348>
 800f494:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f498:	4b8d      	ldr	r3, [pc, #564]	; (800f6d0 <get_current_dq+0x35c>)
 800f49a:	edd3 7a00 	vldr	s15, [r3]
 800f49e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f4a2:	4b8c      	ldr	r3, [pc, #560]	; (800f6d4 <get_current_dq+0x360>)
 800f4a4:	edc3 7a00 	vstr	s15, [r3]

#endif

	//Vdc = Vdc * 0.9 + 0.1 * (float)AD_Iu[1] / AD_Range * Vref_AD * Gain_Vdc_sense;

	switch(SVM_sector)
 800f4a8:	68fb      	ldr	r3, [r7, #12]
 800f4aa:	2b05      	cmp	r3, #5
 800f4ac:	d874      	bhi.n	800f598 <get_current_dq+0x224>
 800f4ae:	a201      	add	r2, pc, #4	; (adr r2, 800f4b4 <get_current_dq+0x140>)
 800f4b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4b4:	0800f4cd 	.word	0x0800f4cd
 800f4b8:	0800f511 	.word	0x0800f511
 800f4bc:	0800f511 	.word	0x0800f511
 800f4c0:	0800f555 	.word	0x0800f555
 800f4c4:	0800f555 	.word	0x0800f555
 800f4c8:	0800f4cd 	.word	0x0800f4cd
	{
	case 0: case 5:
		Iv = V_Iv * Gain_currentSense;
 800f4cc:	4b7f      	ldr	r3, [pc, #508]	; (800f6cc <get_current_dq+0x358>)
 800f4ce:	edd3 7a00 	vldr	s15, [r3]
 800f4d2:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 800f4d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f4da:	4b7f      	ldr	r3, [pc, #508]	; (800f6d8 <get_current_dq+0x364>)
 800f4dc:	edc3 7a00 	vstr	s15, [r3]
		Iw = V_Iw * Gain_currentSense;
 800f4e0:	4b7c      	ldr	r3, [pc, #496]	; (800f6d4 <get_current_dq+0x360>)
 800f4e2:	edd3 7a00 	vldr	s15, [r3]
 800f4e6:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 800f4ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f4ee:	4b7b      	ldr	r3, [pc, #492]	; (800f6dc <get_current_dq+0x368>)
 800f4f0:	edc3 7a00 	vstr	s15, [r3]
		Iu = - Iv - Iw;
 800f4f4:	4b78      	ldr	r3, [pc, #480]	; (800f6d8 <get_current_dq+0x364>)
 800f4f6:	edd3 7a00 	vldr	s15, [r3]
 800f4fa:	eeb1 7a67 	vneg.f32	s14, s15
 800f4fe:	4b77      	ldr	r3, [pc, #476]	; (800f6dc <get_current_dq+0x368>)
 800f500:	edd3 7a00 	vldr	s15, [r3]
 800f504:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f508:	4b75      	ldr	r3, [pc, #468]	; (800f6e0 <get_current_dq+0x36c>)
 800f50a:	edc3 7a00 	vstr	s15, [r3]
		break;
 800f50e:	e043      	b.n	800f598 <get_current_dq+0x224>

	case 1: case 2:
		Iw = V_Iw * Gain_currentSense;
 800f510:	4b70      	ldr	r3, [pc, #448]	; (800f6d4 <get_current_dq+0x360>)
 800f512:	edd3 7a00 	vldr	s15, [r3]
 800f516:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 800f51a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f51e:	4b6f      	ldr	r3, [pc, #444]	; (800f6dc <get_current_dq+0x368>)
 800f520:	edc3 7a00 	vstr	s15, [r3]
		Iu = V_Iu * Gain_currentSense;
 800f524:	4b67      	ldr	r3, [pc, #412]	; (800f6c4 <get_current_dq+0x350>)
 800f526:	edd3 7a00 	vldr	s15, [r3]
 800f52a:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 800f52e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f532:	4b6b      	ldr	r3, [pc, #428]	; (800f6e0 <get_current_dq+0x36c>)
 800f534:	edc3 7a00 	vstr	s15, [r3]
		Iv = - Iw - Iu;
 800f538:	4b68      	ldr	r3, [pc, #416]	; (800f6dc <get_current_dq+0x368>)
 800f53a:	edd3 7a00 	vldr	s15, [r3]
 800f53e:	eeb1 7a67 	vneg.f32	s14, s15
 800f542:	4b67      	ldr	r3, [pc, #412]	; (800f6e0 <get_current_dq+0x36c>)
 800f544:	edd3 7a00 	vldr	s15, [r3]
 800f548:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f54c:	4b62      	ldr	r3, [pc, #392]	; (800f6d8 <get_current_dq+0x364>)
 800f54e:	edc3 7a00 	vstr	s15, [r3]
		break;
 800f552:	e021      	b.n	800f598 <get_current_dq+0x224>

	case 3: case 4:
		Iu = V_Iu * Gain_currentSense;
 800f554:	4b5b      	ldr	r3, [pc, #364]	; (800f6c4 <get_current_dq+0x350>)
 800f556:	edd3 7a00 	vldr	s15, [r3]
 800f55a:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 800f55e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f562:	4b5f      	ldr	r3, [pc, #380]	; (800f6e0 <get_current_dq+0x36c>)
 800f564:	edc3 7a00 	vstr	s15, [r3]
		Iv = V_Iv * Gain_currentSense;
 800f568:	4b58      	ldr	r3, [pc, #352]	; (800f6cc <get_current_dq+0x358>)
 800f56a:	edd3 7a00 	vldr	s15, [r3]
 800f56e:	eeb9 7a04 	vmov.f32	s14, #148	; 0xc0a00000 -5.0
 800f572:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f576:	4b58      	ldr	r3, [pc, #352]	; (800f6d8 <get_current_dq+0x364>)
 800f578:	edc3 7a00 	vstr	s15, [r3]
		Iw = - Iu - Iv;
 800f57c:	4b58      	ldr	r3, [pc, #352]	; (800f6e0 <get_current_dq+0x36c>)
 800f57e:	edd3 7a00 	vldr	s15, [r3]
 800f582:	eeb1 7a67 	vneg.f32	s14, s15
 800f586:	4b54      	ldr	r3, [pc, #336]	; (800f6d8 <get_current_dq+0x364>)
 800f588:	edd3 7a00 	vldr	s15, [r3]
 800f58c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f590:	4b52      	ldr	r3, [pc, #328]	; (800f6dc <get_current_dq+0x368>)
 800f592:	edc3 7a00 	vstr	s15, [r3]
		break;
 800f596:	bf00      	nop
	}

	*Id = 0.8165f * (Iu * cos_theta_re + Iv * (-0.5f * cos_theta_re + 0.855f * sin_theta_re) + Iw * (-0.5f * cos_theta_re - 0.855f * sin_theta_re));
 800f598:	4b51      	ldr	r3, [pc, #324]	; (800f6e0 <get_current_dq+0x36c>)
 800f59a:	ed93 7a00 	vldr	s14, [r3]
 800f59e:	edd7 7a02 	vldr	s15, [r7, #8]
 800f5a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f5a6:	edd7 7a02 	vldr	s15, [r7, #8]
 800f5aa:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 800f5ae:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800f5b2:	edd7 7a01 	vldr	s15, [r7, #4]
 800f5b6:	ed9f 6a4b 	vldr	s12, [pc, #300]	; 800f6e4 <get_current_dq+0x370>
 800f5ba:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f5be:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f5c2:	4b45      	ldr	r3, [pc, #276]	; (800f6d8 <get_current_dq+0x364>)
 800f5c4:	edd3 7a00 	vldr	s15, [r3]
 800f5c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f5cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f5d0:	edd7 7a02 	vldr	s15, [r7, #8]
 800f5d4:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 800f5d8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800f5dc:	edd7 7a01 	vldr	s15, [r7, #4]
 800f5e0:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800f6e4 <get_current_dq+0x370>
 800f5e4:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f5e8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800f5ec:	4b3b      	ldr	r3, [pc, #236]	; (800f6dc <get_current_dq+0x368>)
 800f5ee:	edd3 7a00 	vldr	s15, [r3]
 800f5f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f5f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f5fa:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800f6e8 <get_current_dq+0x374>
 800f5fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f602:	697b      	ldr	r3, [r7, #20]
 800f604:	edc3 7a00 	vstr	s15, [r3]
	*Iq = 0.8165f * (-Iu * sin_theta_re + Iv * (0.5f * sin_theta_re + 0.855f * cos_theta_re) + Iw * (0.5f * sin_theta_re - 0.855f * cos_theta_re));
 800f608:	4b35      	ldr	r3, [pc, #212]	; (800f6e0 <get_current_dq+0x36c>)
 800f60a:	edd3 7a00 	vldr	s15, [r3]
 800f60e:	eeb1 7a67 	vneg.f32	s14, s15
 800f612:	edd7 7a01 	vldr	s15, [r7, #4]
 800f616:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f61a:	edd7 7a01 	vldr	s15, [r7, #4]
 800f61e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800f622:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800f626:	edd7 7a02 	vldr	s15, [r7, #8]
 800f62a:	ed9f 6a2e 	vldr	s12, [pc, #184]	; 800f6e4 <get_current_dq+0x370>
 800f62e:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f632:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800f636:	4b28      	ldr	r3, [pc, #160]	; (800f6d8 <get_current_dq+0x364>)
 800f638:	edd3 7a00 	vldr	s15, [r3]
 800f63c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f640:	ee37 7a27 	vadd.f32	s14, s14, s15
 800f644:	edd7 7a01 	vldr	s15, [r7, #4]
 800f648:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800f64c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800f650:	edd7 7a02 	vldr	s15, [r7, #8]
 800f654:	ed9f 6a23 	vldr	s12, [pc, #140]	; 800f6e4 <get_current_dq+0x370>
 800f658:	ee67 7a86 	vmul.f32	s15, s15, s12
 800f65c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800f660:	4b1e      	ldr	r3, [pc, #120]	; (800f6dc <get_current_dq+0x368>)
 800f662:	edd3 7a00 	vldr	s15, [r3]
 800f666:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f66a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f66e:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 800f6e8 <get_current_dq+0x374>
 800f672:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f676:	693b      	ldr	r3, [r7, #16]
 800f678:	edc3 7a00 	vstr	s15, [r3]


	return;
 800f67c:	bf00      	nop

}
 800f67e:	3718      	adds	r7, #24
 800f680:	46bd      	mov	sp, r7
 800f682:	bd80      	pop	{r7, pc}
 800f684:	2000012c 	.word	0x2000012c
 800f688:	20004314 	.word	0x20004314
 800f68c:	20000130 	.word	0x20000130
 800f690:	2000426c 	.word	0x2000426c
 800f694:	20000134 	.word	0x20000134
 800f698:	2000435c 	.word	0x2000435c
 800f69c:	20000150 	.word	0x20000150
 800f6a0:	20000154 	.word	0x20000154
 800f6a4:	20000160 	.word	0x20000160
 800f6a8:	2000016c 	.word	0x2000016c
 800f6ac:	20000178 	.word	0x20000178
 800f6b0:	2000017c 	.word	0x2000017c
 800f6b4:	20000180 	.word	0x20000180
 800f6b8:	00001000 	.word	0x00001000
 800f6bc:	40533333 	.word	0x40533333
 800f6c0:	20000024 	.word	0x20000024
 800f6c4:	20000138 	.word	0x20000138
 800f6c8:	20000028 	.word	0x20000028
 800f6cc:	2000013c 	.word	0x2000013c
 800f6d0:	2000002c 	.word	0x2000002c
 800f6d4:	20000140 	.word	0x20000140
 800f6d8:	20000148 	.word	0x20000148
 800f6dc:	2000014c 	.word	0x2000014c
 800f6e0:	20000144 	.word	0x20000144
 800f6e4:	3f5ae148 	.word	0x3f5ae148
 800f6e8:	3f510625 	.word	0x3f510625

0800f6ec <median3>:



extern int32_t median3(int32_t *buf)
{
 800f6ec:	b480      	push	{r7}
 800f6ee:	b083      	sub	sp, #12
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	6078      	str	r0, [r7, #4]

	if(buf[0] < buf[1])
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	681a      	ldr	r2, [r3, #0]
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	3304      	adds	r3, #4
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	429a      	cmp	r2, r3
 800f700:	da17      	bge.n	800f732 <median3+0x46>
	{
		if(buf[2] < buf[0])			return buf[0];
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	3308      	adds	r3, #8
 800f706:	681a      	ldr	r2, [r3, #0]
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	429a      	cmp	r2, r3
 800f70e:	da02      	bge.n	800f716 <median3+0x2a>
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	e025      	b.n	800f762 <median3+0x76>
		else if(buf[2] < buf[1])	return buf[2];
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	3308      	adds	r3, #8
 800f71a:	681a      	ldr	r2, [r3, #0]
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	3304      	adds	r3, #4
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	429a      	cmp	r2, r3
 800f724:	da02      	bge.n	800f72c <median3+0x40>
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	689b      	ldr	r3, [r3, #8]
 800f72a:	e01a      	b.n	800f762 <median3+0x76>
		else						return buf[1];
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	685b      	ldr	r3, [r3, #4]
 800f730:	e017      	b.n	800f762 <median3+0x76>
	}
	else
	{
		if(buf[2] < buf[1])			return buf[1];
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	3308      	adds	r3, #8
 800f736:	681a      	ldr	r2, [r3, #0]
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	3304      	adds	r3, #4
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	429a      	cmp	r2, r3
 800f740:	da02      	bge.n	800f748 <median3+0x5c>
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	685b      	ldr	r3, [r3, #4]
 800f746:	e00c      	b.n	800f762 <median3+0x76>
		else if(buf[2] < buf[1])	return buf[2];
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	3308      	adds	r3, #8
 800f74c:	681a      	ldr	r2, [r3, #0]
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	3304      	adds	r3, #4
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	429a      	cmp	r2, r3
 800f756:	da02      	bge.n	800f75e <median3+0x72>
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	689b      	ldr	r3, [r3, #8]
 800f75c:	e001      	b.n	800f762 <median3+0x76>
		else						return buf[0];
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	681b      	ldr	r3, [r3, #0]
	}

	return 0;
}
 800f762:	4618      	mov	r0, r3
 800f764:	370c      	adds	r7, #12
 800f766:	46bd      	mov	sp, r7
 800f768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f76c:	4770      	bx	lr
	...

0800f770 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800f770:	b580      	push	{r7, lr}
 800f772:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 800f774:	4b18      	ldr	r3, [pc, #96]	; (800f7d8 <MX_CAN1_Init+0x68>)
 800f776:	4a19      	ldr	r2, [pc, #100]	; (800f7dc <MX_CAN1_Init+0x6c>)
 800f778:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 800f77a:	4b17      	ldr	r3, [pc, #92]	; (800f7d8 <MX_CAN1_Init+0x68>)
 800f77c:	2204      	movs	r2, #4
 800f77e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800f780:	4b15      	ldr	r3, [pc, #84]	; (800f7d8 <MX_CAN1_Init+0x68>)
 800f782:	2200      	movs	r2, #0
 800f784:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 800f786:	4b14      	ldr	r3, [pc, #80]	; (800f7d8 <MX_CAN1_Init+0x68>)
 800f788:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f78c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 800f78e:	4b12      	ldr	r3, [pc, #72]	; (800f7d8 <MX_CAN1_Init+0x68>)
 800f790:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800f794:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 800f796:	4b10      	ldr	r3, [pc, #64]	; (800f7d8 <MX_CAN1_Init+0x68>)
 800f798:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800f79c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800f79e:	4b0e      	ldr	r3, [pc, #56]	; (800f7d8 <MX_CAN1_Init+0x68>)
 800f7a0:	2200      	movs	r2, #0
 800f7a2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800f7a4:	4b0c      	ldr	r3, [pc, #48]	; (800f7d8 <MX_CAN1_Init+0x68>)
 800f7a6:	2200      	movs	r2, #0
 800f7a8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800f7aa:	4b0b      	ldr	r3, [pc, #44]	; (800f7d8 <MX_CAN1_Init+0x68>)
 800f7ac:	2200      	movs	r2, #0
 800f7ae:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800f7b0:	4b09      	ldr	r3, [pc, #36]	; (800f7d8 <MX_CAN1_Init+0x68>)
 800f7b2:	2200      	movs	r2, #0
 800f7b4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800f7b6:	4b08      	ldr	r3, [pc, #32]	; (800f7d8 <MX_CAN1_Init+0x68>)
 800f7b8:	2200      	movs	r2, #0
 800f7ba:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800f7bc:	4b06      	ldr	r3, [pc, #24]	; (800f7d8 <MX_CAN1_Init+0x68>)
 800f7be:	2200      	movs	r2, #0
 800f7c0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800f7c2:	4805      	ldr	r0, [pc, #20]	; (800f7d8 <MX_CAN1_Init+0x68>)
 800f7c4:	f7f9 ff4a 	bl	800965c <HAL_CAN_Init>
 800f7c8:	4603      	mov	r3, r0
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d001      	beq.n	800f7d2 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800f7ce:	f000 fce5 	bl	801019c <Error_Handler>
  }

}
 800f7d2:	bf00      	nop
 800f7d4:	bd80      	pop	{r7, pc}
 800f7d6:	bf00      	nop
 800f7d8:	200044b0 	.word	0x200044b0
 800f7dc:	40006400 	.word	0x40006400

0800f7e0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800f7e0:	b580      	push	{r7, lr}
 800f7e2:	b08a      	sub	sp, #40	; 0x28
 800f7e4:	af00      	add	r7, sp, #0
 800f7e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f7e8:	f107 0314 	add.w	r3, r7, #20
 800f7ec:	2200      	movs	r2, #0
 800f7ee:	601a      	str	r2, [r3, #0]
 800f7f0:	605a      	str	r2, [r3, #4]
 800f7f2:	609a      	str	r2, [r3, #8]
 800f7f4:	60da      	str	r2, [r3, #12]
 800f7f6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	4a21      	ldr	r2, [pc, #132]	; (800f884 <HAL_CAN_MspInit+0xa4>)
 800f7fe:	4293      	cmp	r3, r2
 800f800:	d13c      	bne.n	800f87c <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800f802:	2300      	movs	r3, #0
 800f804:	613b      	str	r3, [r7, #16]
 800f806:	4b20      	ldr	r3, [pc, #128]	; (800f888 <HAL_CAN_MspInit+0xa8>)
 800f808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f80a:	4a1f      	ldr	r2, [pc, #124]	; (800f888 <HAL_CAN_MspInit+0xa8>)
 800f80c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800f810:	6413      	str	r3, [r2, #64]	; 0x40
 800f812:	4b1d      	ldr	r3, [pc, #116]	; (800f888 <HAL_CAN_MspInit+0xa8>)
 800f814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f81a:	613b      	str	r3, [r7, #16]
 800f81c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f81e:	2300      	movs	r3, #0
 800f820:	60fb      	str	r3, [r7, #12]
 800f822:	4b19      	ldr	r3, [pc, #100]	; (800f888 <HAL_CAN_MspInit+0xa8>)
 800f824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f826:	4a18      	ldr	r2, [pc, #96]	; (800f888 <HAL_CAN_MspInit+0xa8>)
 800f828:	f043 0301 	orr.w	r3, r3, #1
 800f82c:	6313      	str	r3, [r2, #48]	; 0x30
 800f82e:	4b16      	ldr	r3, [pc, #88]	; (800f888 <HAL_CAN_MspInit+0xa8>)
 800f830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f832:	f003 0301 	and.w	r3, r3, #1
 800f836:	60fb      	str	r3, [r7, #12]
 800f838:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f83a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f83e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f840:	2302      	movs	r3, #2
 800f842:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f844:	2300      	movs	r3, #0
 800f846:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f848:	2303      	movs	r3, #3
 800f84a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800f84c:	2309      	movs	r3, #9
 800f84e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f850:	f107 0314 	add.w	r3, r7, #20
 800f854:	4619      	mov	r1, r3
 800f856:	480d      	ldr	r0, [pc, #52]	; (800f88c <HAL_CAN_MspInit+0xac>)
 800f858:	f7fb fbf2 	bl	800b040 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 800f85c:	2200      	movs	r2, #0
 800f85e:	2100      	movs	r1, #0
 800f860:	2013      	movs	r0, #19
 800f862:	f7fa fd3a 	bl	800a2da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800f866:	2013      	movs	r0, #19
 800f868:	f7fa fd53 	bl	800a312 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800f86c:	2200      	movs	r2, #0
 800f86e:	2100      	movs	r1, #0
 800f870:	2014      	movs	r0, #20
 800f872:	f7fa fd32 	bl	800a2da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800f876:	2014      	movs	r0, #20
 800f878:	f7fa fd4b 	bl	800a312 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800f87c:	bf00      	nop
 800f87e:	3728      	adds	r7, #40	; 0x28
 800f880:	46bd      	mov	sp, r7
 800f882:	bd80      	pop	{r7, pc}
 800f884:	40006400 	.word	0x40006400
 800f888:	40023800 	.word	0x40023800
 800f88c:	40020000 	.word	0x40020000

0800f890 <CAN_Init>:

/* USER CODE BEGIN 1 */


void CAN_Init()
{
 800f890:	b580      	push	{r7, lr}
 800f892:	af00      	add	r7, sp, #0

	motorChannel = getChannel();
 800f894:	f000 f84a 	bl	800f92c <getChannel>
 800f898:	4603      	mov	r3, r0
 800f89a:	461a      	mov	r2, r3
 800f89c:	4b20      	ldr	r3, [pc, #128]	; (800f920 <CAN_Init+0x90>)
 800f89e:	701a      	strb	r2, [r3, #0]


	sFilterConfig.FilterBank = 0;
 800f8a0:	4b20      	ldr	r3, [pc, #128]	; (800f924 <CAN_Init+0x94>)
 800f8a2:	2200      	movs	r2, #0
 800f8a4:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800f8a6:	4b1f      	ldr	r3, [pc, #124]	; (800f924 <CAN_Init+0x94>)
 800f8a8:	2200      	movs	r2, #0
 800f8aa:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800f8ac:	4b1d      	ldr	r3, [pc, #116]	; (800f924 <CAN_Init+0x94>)
 800f8ae:	2201      	movs	r2, #1
 800f8b0:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = 0x2000 | motorChannel << 10;
 800f8b2:	4b1b      	ldr	r3, [pc, #108]	; (800f920 <CAN_Init+0x90>)
 800f8b4:	781b      	ldrb	r3, [r3, #0]
 800f8b6:	029b      	lsls	r3, r3, #10
 800f8b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f8bc:	461a      	mov	r2, r3
 800f8be:	4b19      	ldr	r3, [pc, #100]	; (800f924 <CAN_Init+0x94>)
 800f8c0:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 800f8c2:	4b18      	ldr	r3, [pc, #96]	; (800f924 <CAN_Init+0x94>)
 800f8c4:	2200      	movs	r2, #0
 800f8c6:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0xfc00;
 800f8c8:	4b16      	ldr	r3, [pc, #88]	; (800f924 <CAN_Init+0x94>)
 800f8ca:	f44f 427c 	mov.w	r2, #64512	; 0xfc00
 800f8ce:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0006;
 800f8d0:	4b14      	ldr	r3, [pc, #80]	; (800f924 <CAN_Init+0x94>)
 800f8d2:	2206      	movs	r2, #6
 800f8d4:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800f8d6:	4b13      	ldr	r3, [pc, #76]	; (800f924 <CAN_Init+0x94>)
 800f8d8:	2200      	movs	r2, #0
 800f8da:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 800f8dc:	4b11      	ldr	r3, [pc, #68]	; (800f924 <CAN_Init+0x94>)
 800f8de:	2201      	movs	r2, #1
 800f8e0:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 800f8e2:	4b10      	ldr	r3, [pc, #64]	; (800f924 <CAN_Init+0x94>)
 800f8e4:	220e      	movs	r2, #14
 800f8e6:	625a      	str	r2, [r3, #36]	; 0x24

	if(HAL_CAN_ConfigFilter(&hcan1,&sFilterConfig) != HAL_OK)
 800f8e8:	490e      	ldr	r1, [pc, #56]	; (800f924 <CAN_Init+0x94>)
 800f8ea:	480f      	ldr	r0, [pc, #60]	; (800f928 <CAN_Init+0x98>)
 800f8ec:	f7f9 ffb2 	bl	8009854 <HAL_CAN_ConfigFilter>
 800f8f0:	4603      	mov	r3, r0
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d001      	beq.n	800f8fa <CAN_Init+0x6a>
	{
	  Error_Handler();
 800f8f6:	f000 fc51 	bl	801019c <Error_Handler>
	}

	if(HAL_CAN_Start(&hcan1) != HAL_OK)
 800f8fa:	480b      	ldr	r0, [pc, #44]	; (800f928 <CAN_Init+0x98>)
 800f8fc:	f7fa f88a 	bl	8009a14 <HAL_CAN_Start>
 800f900:	4603      	mov	r3, r0
 800f902:	2b00      	cmp	r3, #0
 800f904:	d001      	beq.n	800f90a <CAN_Init+0x7a>
	{
	  Error_Handler();
 800f906:	f000 fc49 	bl	801019c <Error_Handler>
	}

	if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 800f90a:	2103      	movs	r1, #3
 800f90c:	4806      	ldr	r0, [pc, #24]	; (800f928 <CAN_Init+0x98>)
 800f90e:	f7fa f9d8 	bl	8009cc2 <HAL_CAN_ActivateNotification>
 800f912:	4603      	mov	r3, r0
 800f914:	2b00      	cmp	r3, #0
 800f916:	d001      	beq.n	800f91c <CAN_Init+0x8c>
	{
	  Error_Handler();
 800f918:	f000 fc40 	bl	801019c <Error_Handler>
	}


}
 800f91c:	bf00      	nop
 800f91e:	bd80      	pop	{r7, pc}
 800f920:	20000184 	.word	0x20000184
 800f924:	20004464 	.word	0x20004464
 800f928:	200044b0 	.word	0x200044b0

0800f92c <getChannel>:


uint8_t getChannel()
{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	b082      	sub	sp, #8
 800f930:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 800f932:	2300      	movs	r3, #0
 800f934:	71fb      	strb	r3, [r7, #7]

	ch |= !HAL_GPIO_ReadPin(CH_b0_GPIO_Port, CH_b0_Pin) << 0;
 800f936:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800f93a:	481b      	ldr	r0, [pc, #108]	; (800f9a8 <getChannel+0x7c>)
 800f93c:	f7fb fd12 	bl	800b364 <HAL_GPIO_ReadPin>
 800f940:	4603      	mov	r3, r0
 800f942:	2b00      	cmp	r3, #0
 800f944:	bf0c      	ite	eq
 800f946:	2301      	moveq	r3, #1
 800f948:	2300      	movne	r3, #0
 800f94a:	b2db      	uxtb	r3, r3
 800f94c:	b25a      	sxtb	r2, r3
 800f94e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f952:	4313      	orrs	r3, r2
 800f954:	b25b      	sxtb	r3, r3
 800f956:	71fb      	strb	r3, [r7, #7]
	ch |= !HAL_GPIO_ReadPin(CH_b1_GPIO_Port, CH_b1_Pin) << 1;
 800f958:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800f95c:	4812      	ldr	r0, [pc, #72]	; (800f9a8 <getChannel+0x7c>)
 800f95e:	f7fb fd01 	bl	800b364 <HAL_GPIO_ReadPin>
 800f962:	4603      	mov	r3, r0
 800f964:	2b00      	cmp	r3, #0
 800f966:	d101      	bne.n	800f96c <getChannel+0x40>
 800f968:	2302      	movs	r3, #2
 800f96a:	e000      	b.n	800f96e <getChannel+0x42>
 800f96c:	2300      	movs	r3, #0
 800f96e:	b25a      	sxtb	r2, r3
 800f970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f974:	4313      	orrs	r3, r2
 800f976:	b25b      	sxtb	r3, r3
 800f978:	71fb      	strb	r3, [r7, #7]
	ch |= !HAL_GPIO_ReadPin(CH_b2_GPIO_Port, CH_b2_Pin) << 2;
 800f97a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800f97e:	480a      	ldr	r0, [pc, #40]	; (800f9a8 <getChannel+0x7c>)
 800f980:	f7fb fcf0 	bl	800b364 <HAL_GPIO_ReadPin>
 800f984:	4603      	mov	r3, r0
 800f986:	2b00      	cmp	r3, #0
 800f988:	d101      	bne.n	800f98e <getChannel+0x62>
 800f98a:	2304      	movs	r3, #4
 800f98c:	e000      	b.n	800f990 <getChannel+0x64>
 800f98e:	2300      	movs	r3, #0
 800f990:	b25a      	sxtb	r2, r3
 800f992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f996:	4313      	orrs	r3, r2
 800f998:	b25b      	sxtb	r3, r3
 800f99a:	71fb      	strb	r3, [r7, #7]

	return ch;
 800f99c:	79fb      	ldrb	r3, [r7, #7]
}
 800f99e:	4618      	mov	r0, r3
 800f9a0:	3708      	adds	r7, #8
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	bd80      	pop	{r7, pc}
 800f9a6:	bf00      	nop
 800f9a8:	40020400 	.word	0x40020400

0800f9ac <HAL_CAN_TxMailbox0CompleteCallback>:




void HAL_CAN_TxMailbox0CompleteCallback (CAN_HandleTypeDef * hcan)
{
 800f9ac:	b580      	push	{r7, lr}
 800f9ae:	b082      	sub	sp, #8
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
	{
	}
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 800f9b4:	2200      	movs	r2, #0
 800f9b6:	2140      	movs	r1, #64	; 0x40
 800f9b8:	4803      	ldr	r0, [pc, #12]	; (800f9c8 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 800f9ba:	f7fb fceb 	bl	800b394 <HAL_GPIO_WritePin>

}
 800f9be:	bf00      	nop
 800f9c0:	3708      	adds	r7, #8
 800f9c2:	46bd      	mov	sp, r7
 800f9c4:	bd80      	pop	{r7, pc}
 800f9c6:	bf00      	nop
 800f9c8:	40020400 	.word	0x40020400

0800f9cc <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback (CAN_HandleTypeDef * hcan)
{
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	b082      	sub	sp, #8
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
	{
	}
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 800f9d4:	2200      	movs	r2, #0
 800f9d6:	2140      	movs	r1, #64	; 0x40
 800f9d8:	4803      	ldr	r0, [pc, #12]	; (800f9e8 <HAL_CAN_TxMailbox1CompleteCallback+0x1c>)
 800f9da:	f7fb fcdb 	bl	800b394 <HAL_GPIO_WritePin>

}
 800f9de:	bf00      	nop
 800f9e0:	3708      	adds	r7, #8
 800f9e2:	46bd      	mov	sp, r7
 800f9e4:	bd80      	pop	{r7, pc}
 800f9e6:	bf00      	nop
 800f9e8:	40020400 	.word	0x40020400

0800f9ec <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback (CAN_HandleTypeDef * hcan)
{
 800f9ec:	b580      	push	{r7, lr}
 800f9ee:	b082      	sub	sp, #8
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
	{
	}
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 800f9f4:	2200      	movs	r2, #0
 800f9f6:	2140      	movs	r1, #64	; 0x40
 800f9f8:	4803      	ldr	r0, [pc, #12]	; (800fa08 <HAL_CAN_TxMailbox2CompleteCallback+0x1c>)
 800f9fa:	f7fb fccb 	bl	800b394 <HAL_GPIO_WritePin>

}
 800f9fe:	bf00      	nop
 800fa00:	3708      	adds	r7, #8
 800fa02:	46bd      	mov	sp, r7
 800fa04:	bd80      	pop	{r7, pc}
 800fa06:	bf00      	nop
 800fa08:	40020400 	.word	0x40020400

0800fa0c <HAL_CAN_RxFifo0MsgPendingCallback>:



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800fa0c:	b580      	push	{r7, lr}
 800fa0e:	b084      	sub	sp, #16
 800fa10:	af00      	add	r7, sp, #0
 800fa12:	6078      	str	r0, [r7, #4]
			uint8_t byte[4];
		};
	}controlRef;


	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can1RxHeader, can1RxData);
 800fa14:	4b16      	ldr	r3, [pc, #88]	; (800fa70 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 800fa16:	4a17      	ldr	r2, [pc, #92]	; (800fa74 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 800fa18:	2100      	movs	r1, #0
 800fa1a:	6878      	ldr	r0, [r7, #4]
 800fa1c:	f7fa f83e 	bl	8009a9c <HAL_CAN_GetRxMessage>

	can1RxFlg = 1;
 800fa20:	4b15      	ldr	r3, [pc, #84]	; (800fa78 <HAL_CAN_RxFifo0MsgPendingCallback+0x6c>)
 800fa22:	2201      	movs	r2, #1
 800fa24:	701a      	strb	r2, [r3, #0]

	if(((can1RxHeader.StdId & 0x1c) >> 2) == 0x01 && can1RxHeader.DLC == 0x4)
 800fa26:	4b13      	ldr	r3, [pc, #76]	; (800fa74 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	089b      	lsrs	r3, r3, #2
 800fa2c:	f003 0307 	and.w	r3, r3, #7
 800fa30:	2b01      	cmp	r3, #1
 800fa32:	d114      	bne.n	800fa5e <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
 800fa34:	4b0f      	ldr	r3, [pc, #60]	; (800fa74 <HAL_CAN_RxFifo0MsgPendingCallback+0x68>)
 800fa36:	691b      	ldr	r3, [r3, #16]
 800fa38:	2b04      	cmp	r3, #4
 800fa3a:	d110      	bne.n	800fa5e <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
	{
		controlRef.byte[0] = can1RxData[0];
 800fa3c:	4b0c      	ldr	r3, [pc, #48]	; (800fa70 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 800fa3e:	781b      	ldrb	r3, [r3, #0]
 800fa40:	733b      	strb	r3, [r7, #12]
		controlRef.byte[1] = can1RxData[1];
 800fa42:	4b0b      	ldr	r3, [pc, #44]	; (800fa70 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 800fa44:	785b      	ldrb	r3, [r3, #1]
 800fa46:	737b      	strb	r3, [r7, #13]
		controlRef.byte[2] = can1RxData[2];
 800fa48:	4b09      	ldr	r3, [pc, #36]	; (800fa70 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 800fa4a:	789b      	ldrb	r3, [r3, #2]
 800fa4c:	73bb      	strb	r3, [r7, #14]
		controlRef.byte[3] = can1RxData[3];
 800fa4e:	4b08      	ldr	r3, [pc, #32]	; (800fa70 <HAL_CAN_RxFifo0MsgPendingCallback+0x64>)
 800fa50:	78db      	ldrb	r3, [r3, #3]
 800fa52:	73fb      	strb	r3, [r7, #15]

		omega_ref = controlRef.fval;
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	4a09      	ldr	r2, [pc, #36]	; (800fa7c <HAL_CAN_RxFifo0MsgPendingCallback+0x70>)
 800fa58:	6013      	str	r3, [r2, #0]

		timeoutReset();
 800fa5a:	f001 fec1 	bl	80117e0 <timeoutReset>
		theta_ref = controlRef.fval;
	}
#endif


	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_SET);
 800fa5e:	2201      	movs	r2, #1
 800fa60:	2140      	movs	r1, #64	; 0x40
 800fa62:	4807      	ldr	r0, [pc, #28]	; (800fa80 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>)
 800fa64:	f7fb fc96 	bl	800b394 <HAL_GPIO_WritePin>

}
 800fa68:	bf00      	nop
 800fa6a:	3710      	adds	r7, #16
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	bd80      	pop	{r7, pc}
 800fa70:	200044a8 	.word	0x200044a8
 800fa74:	2000448c 	.word	0x2000448c
 800fa78:	20000185 	.word	0x20000185
 800fa7c:	20000100 	.word	0x20000100
 800fa80:	40020000 	.word	0x40020000

0800fa84 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800fa84:	b580      	push	{r7, lr}
 800fa86:	b082      	sub	sp, #8
 800fa88:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800fa8a:	2300      	movs	r3, #0
 800fa8c:	607b      	str	r3, [r7, #4]
 800fa8e:	4b14      	ldr	r3, [pc, #80]	; (800fae0 <MX_DMA_Init+0x5c>)
 800fa90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa92:	4a13      	ldr	r2, [pc, #76]	; (800fae0 <MX_DMA_Init+0x5c>)
 800fa94:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800fa98:	6313      	str	r3, [r2, #48]	; 0x30
 800fa9a:	4b11      	ldr	r3, [pc, #68]	; (800fae0 <MX_DMA_Init+0x5c>)
 800fa9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fa9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800faa2:	607b      	str	r3, [r7, #4]
 800faa4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800faa6:	2200      	movs	r2, #0
 800faa8:	2100      	movs	r1, #0
 800faaa:	2038      	movs	r0, #56	; 0x38
 800faac:	f7fa fc15 	bl	800a2da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800fab0:	2038      	movs	r0, #56	; 0x38
 800fab2:	f7fa fc2e 	bl	800a312 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800fab6:	2200      	movs	r2, #0
 800fab8:	2100      	movs	r1, #0
 800faba:	2039      	movs	r0, #57	; 0x39
 800fabc:	f7fa fc0d 	bl	800a2da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800fac0:	2039      	movs	r0, #57	; 0x39
 800fac2:	f7fa fc26 	bl	800a312 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800fac6:	2200      	movs	r2, #0
 800fac8:	2100      	movs	r1, #0
 800faca:	203a      	movs	r0, #58	; 0x3a
 800facc:	f7fa fc05 	bl	800a2da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800fad0:	203a      	movs	r0, #58	; 0x3a
 800fad2:	f7fa fc1e 	bl	800a312 <HAL_NVIC_EnableIRQ>

}
 800fad6:	bf00      	nop
 800fad8:	3708      	adds	r7, #8
 800fada:	46bd      	mov	sp, r7
 800fadc:	bd80      	pop	{r7, pc}
 800fade:	bf00      	nop
 800fae0:	40023800 	.word	0x40023800

0800fae4 <Flash_clear>:
extern char _backup_flash_start;


// Flashのsectoe1を消去
HAL_StatusTypeDef Flash_clear()
{
 800fae4:	b580      	push	{r7, lr}
 800fae6:	b088      	sub	sp, #32
 800fae8:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 800faea:	f7fb f819 	bl	800ab20 <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800faee:	2300      	movs	r3, #0
 800faf0:	60bb      	str	r3, [r7, #8]
    EraseInitStruct.Sector = BACKUP_FLASH_SECTOR_NUM;
 800faf2:	2301      	movs	r3, #1
 800faf4:	613b      	str	r3, [r7, #16]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800faf6:	2302      	movs	r3, #2
 800faf8:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.NbSectors = 1;
 800fafa:	2301      	movs	r3, #1
 800fafc:	617b      	str	r3, [r7, #20]

    // Eraseに失敗したsector番号がerror_sectorに入る
    // 正常にEraseができたときは0xFFFFFFFFが入る
    uint32_t error_sector;
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 800fafe:	1d3a      	adds	r2, r7, #4
 800fb00:	f107 0308 	add.w	r3, r7, #8
 800fb04:	4611      	mov	r1, r2
 800fb06:	4618      	mov	r0, r3
 800fb08:	f7fb f978 	bl	800adfc <HAL_FLASHEx_Erase>
 800fb0c:	4603      	mov	r3, r0
 800fb0e:	77fb      	strb	r3, [r7, #31]

    HAL_FLASH_Lock();
 800fb10:	f7fb f828 	bl	800ab64 <HAL_FLASH_Lock>

    return result == HAL_OK && error_sector == 0xFFFFFFFF;
 800fb14:	7ffb      	ldrb	r3, [r7, #31]
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d105      	bne.n	800fb26 <Flash_clear+0x42>
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb20:	d101      	bne.n	800fb26 <Flash_clear+0x42>
 800fb22:	2301      	movs	r3, #1
 800fb24:	e000      	b.n	800fb28 <Flash_clear+0x44>
 800fb26:	2300      	movs	r3, #0
 800fb28:	b2db      	uxtb	r3, r3
}
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	3720      	adds	r7, #32
 800fb2e:	46bd      	mov	sp, r7
 800fb30:	bd80      	pop	{r7, pc}
	...

0800fb34 <Flash_load>:

// Flashのsector1の内容を全てwork_ramに読み出す
// work_ramの先頭アドレスを返す
uint8_t* Flash_load()
{
 800fb34:	b580      	push	{r7, lr}
 800fb36:	af00      	add	r7, sp, #0
    memcpy(work_ram, &_backup_flash_start, BACKUP_FLASH_SECTOR_SIZE);
 800fb38:	4a05      	ldr	r2, [pc, #20]	; (800fb50 <Flash_load+0x1c>)
 800fb3a:	4b06      	ldr	r3, [pc, #24]	; (800fb54 <Flash_load+0x20>)
 800fb3c:	4610      	mov	r0, r2
 800fb3e:	4619      	mov	r1, r3
 800fb40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fb44:	461a      	mov	r2, r3
 800fb46:	f001 ff33 	bl	80119b0 <memcpy>
    return work_ram;
 800fb4a:	4b01      	ldr	r3, [pc, #4]	; (800fb50 <Flash_load+0x1c>)
}
 800fb4c:	4618      	mov	r0, r3
 800fb4e:	bd80      	pop	{r7, pc}
 800fb50:	20000188 	.word	0x20000188
 800fb54:	08004000 	.word	0x08004000

0800fb58 <Flash_store>:

// Flashのsector1を消去後、work_ramにあるデータを書き込む
HAL_StatusTypeDef Flash_store()
{
 800fb58:	b590      	push	{r4, r7, lr}
 800fb5a:	b085      	sub	sp, #20
 800fb5c:	af00      	add	r7, sp, #0
    // Flashをclear
    if (!Flash_clear()) return HAL_ERROR;
 800fb5e:	f7ff ffc1 	bl	800fae4 <Flash_clear>
 800fb62:	4603      	mov	r3, r0
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d101      	bne.n	800fb6c <Flash_store+0x14>
 800fb68:	2301      	movs	r3, #1
 800fb6a:	e02f      	b.n	800fbcc <Flash_store+0x74>

    uint32_t *p_work_ram = (uint32_t*)work_ram;
 800fb6c:	4b19      	ldr	r3, [pc, #100]	; (800fbd4 <Flash_store+0x7c>)
 800fb6e:	607b      	str	r3, [r7, #4]

    HAL_FLASH_Unlock();
 800fb70:	f7fa ffd6 	bl	800ab20 <HAL_FLASH_Unlock>

    // work_ramにあるデータを4バイトごとまとめて書き込む
    HAL_StatusTypeDef result;
    const size_t write_cnt = BACKUP_FLASH_SECTOR_SIZE / sizeof(uint32_t);
 800fb74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fb78:	603b      	str	r3, [r7, #0]

    for (size_t i=0; i<write_cnt; i++)
 800fb7a:	2300      	movs	r3, #0
 800fb7c:	60bb      	str	r3, [r7, #8]
 800fb7e:	e017      	b.n	800fbb0 <Flash_store+0x58>
    {
        result = HAL_FLASH_Program(
                    FLASH_TYPEPROGRAM_WORD,
                    (uint32_t)(&_backup_flash_start) + sizeof(uint32_t) * i,
 800fb80:	68bb      	ldr	r3, [r7, #8]
 800fb82:	009b      	lsls	r3, r3, #2
 800fb84:	4a14      	ldr	r2, [pc, #80]	; (800fbd8 <Flash_store+0x80>)
        result = HAL_FLASH_Program(
 800fb86:	1899      	adds	r1, r3, r2
                    p_work_ram[i]
 800fb88:	68bb      	ldr	r3, [r7, #8]
 800fb8a:	009b      	lsls	r3, r3, #2
 800fb8c:	687a      	ldr	r2, [r7, #4]
 800fb8e:	4413      	add	r3, r2
 800fb90:	681b      	ldr	r3, [r3, #0]
        result = HAL_FLASH_Program(
 800fb92:	f04f 0400 	mov.w	r4, #0
 800fb96:	461a      	mov	r2, r3
 800fb98:	4623      	mov	r3, r4
 800fb9a:	2002      	movs	r0, #2
 800fb9c:	f7fa ff6c 	bl	800aa78 <HAL_FLASH_Program>
 800fba0:	4603      	mov	r3, r0
 800fba2:	73fb      	strb	r3, [r7, #15]
                );
        if (result != HAL_OK) break;
 800fba4:	7bfb      	ldrb	r3, [r7, #15]
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	d107      	bne.n	800fbba <Flash_store+0x62>
    for (size_t i=0; i<write_cnt; i++)
 800fbaa:	68bb      	ldr	r3, [r7, #8]
 800fbac:	3301      	adds	r3, #1
 800fbae:	60bb      	str	r3, [r7, #8]
 800fbb0:	68ba      	ldr	r2, [r7, #8]
 800fbb2:	683b      	ldr	r3, [r7, #0]
 800fbb4:	429a      	cmp	r2, r3
 800fbb6:	d3e3      	bcc.n	800fb80 <Flash_store+0x28>
 800fbb8:	e000      	b.n	800fbbc <Flash_store+0x64>
        if (result != HAL_OK) break;
 800fbba:	bf00      	nop
    }

    HAL_FLASH_Lock();
 800fbbc:	f7fa ffd2 	bl	800ab64 <HAL_FLASH_Lock>

    return result == HAL_OK;
 800fbc0:	7bfb      	ldrb	r3, [r7, #15]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	bf0c      	ite	eq
 800fbc6:	2301      	moveq	r3, #1
 800fbc8:	2300      	movne	r3, #0
 800fbca:	b2db      	uxtb	r3, r3
}
 800fbcc:	4618      	mov	r0, r3
 800fbce:	3714      	adds	r7, #20
 800fbd0:	46bd      	mov	sp, r7
 800fbd2:	bd90      	pop	{r4, r7, pc}
 800fbd4:	20000188 	.word	0x20000188
 800fbd8:	08004000 	.word	0x08004000

0800fbdc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b08a      	sub	sp, #40	; 0x28
 800fbe0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fbe2:	f107 0314 	add.w	r3, r7, #20
 800fbe6:	2200      	movs	r2, #0
 800fbe8:	601a      	str	r2, [r3, #0]
 800fbea:	605a      	str	r2, [r3, #4]
 800fbec:	609a      	str	r2, [r3, #8]
 800fbee:	60da      	str	r2, [r3, #12]
 800fbf0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800fbf2:	2300      	movs	r3, #0
 800fbf4:	613b      	str	r3, [r7, #16]
 800fbf6:	4b45      	ldr	r3, [pc, #276]	; (800fd0c <MX_GPIO_Init+0x130>)
 800fbf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbfa:	4a44      	ldr	r2, [pc, #272]	; (800fd0c <MX_GPIO_Init+0x130>)
 800fbfc:	f043 0304 	orr.w	r3, r3, #4
 800fc00:	6313      	str	r3, [r2, #48]	; 0x30
 800fc02:	4b42      	ldr	r3, [pc, #264]	; (800fd0c <MX_GPIO_Init+0x130>)
 800fc04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc06:	f003 0304 	and.w	r3, r3, #4
 800fc0a:	613b      	str	r3, [r7, #16]
 800fc0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800fc0e:	2300      	movs	r3, #0
 800fc10:	60fb      	str	r3, [r7, #12]
 800fc12:	4b3e      	ldr	r3, [pc, #248]	; (800fd0c <MX_GPIO_Init+0x130>)
 800fc14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc16:	4a3d      	ldr	r2, [pc, #244]	; (800fd0c <MX_GPIO_Init+0x130>)
 800fc18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc1c:	6313      	str	r3, [r2, #48]	; 0x30
 800fc1e:	4b3b      	ldr	r3, [pc, #236]	; (800fd0c <MX_GPIO_Init+0x130>)
 800fc20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc26:	60fb      	str	r3, [r7, #12]
 800fc28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800fc2a:	2300      	movs	r3, #0
 800fc2c:	60bb      	str	r3, [r7, #8]
 800fc2e:	4b37      	ldr	r3, [pc, #220]	; (800fd0c <MX_GPIO_Init+0x130>)
 800fc30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc32:	4a36      	ldr	r2, [pc, #216]	; (800fd0c <MX_GPIO_Init+0x130>)
 800fc34:	f043 0301 	orr.w	r3, r3, #1
 800fc38:	6313      	str	r3, [r2, #48]	; 0x30
 800fc3a:	4b34      	ldr	r3, [pc, #208]	; (800fd0c <MX_GPIO_Init+0x130>)
 800fc3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc3e:	f003 0301 	and.w	r3, r3, #1
 800fc42:	60bb      	str	r3, [r7, #8]
 800fc44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800fc46:	2300      	movs	r3, #0
 800fc48:	607b      	str	r3, [r7, #4]
 800fc4a:	4b30      	ldr	r3, [pc, #192]	; (800fd0c <MX_GPIO_Init+0x130>)
 800fc4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc4e:	4a2f      	ldr	r2, [pc, #188]	; (800fd0c <MX_GPIO_Init+0x130>)
 800fc50:	f043 0302 	orr.w	r3, r3, #2
 800fc54:	6313      	str	r3, [r2, #48]	; 0x30
 800fc56:	4b2d      	ldr	r3, [pc, #180]	; (800fd0c <MX_GPIO_Init+0x130>)
 800fc58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc5a:	f003 0302 	and.w	r3, r3, #2
 800fc5e:	607b      	str	r3, [r7, #4]
 800fc60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DB1_Pin|OP_CAL_Pin|GATE_EN_Pin 
 800fc62:	2200      	movs	r2, #0
 800fc64:	f248 6160 	movw	r1, #34400	; 0x8660
 800fc68:	4829      	ldr	r0, [pc, #164]	; (800fd10 <MX_GPIO_Init+0x134>)
 800fc6a:	f7fb fb93 	bl	800b394 <HAL_GPIO_WritePin>
                          |SPI3_NSS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_NSS_Pin|DB2_Pin|DB0_Pin, GPIO_PIN_RESET);
 800fc6e:	2200      	movs	r2, #0
 800fc70:	f241 0150 	movw	r1, #4176	; 0x1050
 800fc74:	4827      	ldr	r0, [pc, #156]	; (800fd14 <MX_GPIO_Init+0x138>)
 800fc76:	f7fb fb8d 	bl	800b394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800fc7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fc7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800fc80:	4b25      	ldr	r3, [pc, #148]	; (800fd18 <MX_GPIO_Init+0x13c>)
 800fc82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fc84:	2300      	movs	r3, #0
 800fc86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800fc88:	f107 0314 	add.w	r3, r7, #20
 800fc8c:	4619      	mov	r1, r3
 800fc8e:	4823      	ldr	r0, [pc, #140]	; (800fd1c <MX_GPIO_Init+0x140>)
 800fc90:	f7fb f9d6 	bl	800b040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|DB1_Pin|OP_CAL_Pin|GATE_EN_Pin 
 800fc94:	f248 6360 	movw	r3, #34400	; 0x8660
 800fc98:	617b      	str	r3, [r7, #20]
                          |SPI3_NSS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800fc9a:	2301      	movs	r3, #1
 800fc9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fc9e:	2300      	movs	r3, #0
 800fca0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fca2:	2300      	movs	r3, #0
 800fca4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fca6:	f107 0314 	add.w	r3, r7, #20
 800fcaa:	4619      	mov	r1, r3
 800fcac:	4818      	ldr	r0, [pc, #96]	; (800fd10 <MX_GPIO_Init+0x134>)
 800fcae:	f7fb f9c7 	bl	800b040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|DB2_Pin|DB0_Pin;
 800fcb2:	f241 0350 	movw	r3, #4176	; 0x1050
 800fcb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800fcb8:	2301      	movs	r3, #1
 800fcba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fcbc:	2300      	movs	r3, #0
 800fcbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fcc0:	2300      	movs	r3, #0
 800fcc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800fcc4:	f107 0314 	add.w	r3, r7, #20
 800fcc8:	4619      	mov	r1, r3
 800fcca:	4812      	ldr	r0, [pc, #72]	; (800fd14 <MX_GPIO_Init+0x138>)
 800fccc:	f7fb f9b8 	bl	800b040 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CH_b0_Pin|CH_b1_Pin|CH_b2_Pin;
 800fcd0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800fcd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800fcd6:	2300      	movs	r3, #0
 800fcd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800fcda:	2301      	movs	r3, #1
 800fcdc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800fcde:	f107 0314 	add.w	r3, r7, #20
 800fce2:	4619      	mov	r1, r3
 800fce4:	480b      	ldr	r0, [pc, #44]	; (800fd14 <MX_GPIO_Init+0x138>)
 800fce6:	f7fb f9ab 	bl	800b040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BR_FLT_Pin;
 800fcea:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fcee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800fcf0:	2300      	movs	r3, #0
 800fcf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fcf4:	2300      	movs	r3, #0
 800fcf6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BR_FLT_GPIO_Port, &GPIO_InitStruct);
 800fcf8:	f107 0314 	add.w	r3, r7, #20
 800fcfc:	4619      	mov	r1, r3
 800fcfe:	4804      	ldr	r0, [pc, #16]	; (800fd10 <MX_GPIO_Init+0x134>)
 800fd00:	f7fb f99e 	bl	800b040 <HAL_GPIO_Init>

}
 800fd04:	bf00      	nop
 800fd06:	3728      	adds	r7, #40	; 0x28
 800fd08:	46bd      	mov	sp, r7
 800fd0a:	bd80      	pop	{r7, pc}
 800fd0c:	40023800 	.word	0x40023800
 800fd10:	40020000 	.word	0x40020000
 800fd14:	40020400 	.word	0x40020400
 800fd18:	10210000 	.word	0x10210000
 800fd1c:	40020800 	.word	0x40020800

0800fd20 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800fd20:	b480      	push	{r7}
 800fd22:	b083      	sub	sp, #12
 800fd24:	af00      	add	r7, sp, #0
 800fd26:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800fd28:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800fd2c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800fd30:	f003 0301 	and.w	r3, r3, #1
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d013      	beq.n	800fd60 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800fd38:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800fd3c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800fd40:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d00b      	beq.n	800fd60 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800fd48:	e000      	b.n	800fd4c <ITM_SendChar+0x2c>
    {
      __NOP();
 800fd4a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800fd4c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800fd50:	681b      	ldr	r3, [r3, #0]
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d0f9      	beq.n	800fd4a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800fd56:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800fd5a:	687a      	ldr	r2, [r7, #4]
 800fd5c:	b2d2      	uxtb	r2, r2
 800fd5e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800fd60:	687b      	ldr	r3, [r7, #4]
}
 800fd62:	4618      	mov	r0, r3
 800fd64:	370c      	adds	r7, #12
 800fd66:	46bd      	mov	sp, r7
 800fd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd6c:	4770      	bx	lr

0800fd6e <_write>:
#endif



int _write(int file, char *ptr, int len)
{
 800fd6e:	b580      	push	{r7, lr}
 800fd70:	b086      	sub	sp, #24
 800fd72:	af00      	add	r7, sp, #0
 800fd74:	60f8      	str	r0, [r7, #12]
 800fd76:	60b9      	str	r1, [r7, #8]
 800fd78:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 800fd7a:	2300      	movs	r3, #0
 800fd7c:	617b      	str	r3, [r7, #20]
 800fd7e:	e009      	b.n	800fd94 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 800fd80:	68bb      	ldr	r3, [r7, #8]
 800fd82:	1c5a      	adds	r2, r3, #1
 800fd84:	60ba      	str	r2, [r7, #8]
 800fd86:	781b      	ldrb	r3, [r3, #0]
 800fd88:	4618      	mov	r0, r3
 800fd8a:	f7ff ffc9 	bl	800fd20 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 800fd8e:	697b      	ldr	r3, [r7, #20]
 800fd90:	3301      	adds	r3, #1
 800fd92:	617b      	str	r3, [r7, #20]
 800fd94:	697a      	ldr	r2, [r7, #20]
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	429a      	cmp	r2, r3
 800fd9a:	dbf1      	blt.n	800fd80 <_write+0x12>
  }
  return len;
 800fd9c:	687b      	ldr	r3, [r7, #4]
}
 800fd9e:	4618      	mov	r0, r3
 800fda0:	3718      	adds	r7, #24
 800fda2:	46bd      	mov	sp, r7
 800fda4:	bd80      	pop	{r7, pc}
	...

0800fda8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800fda8:	b580      	push	{r7, lr}
 800fdaa:	b082      	sub	sp, #8
 800fdac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */


	int count = 0;
 800fdae:	2300      	movs	r3, #0
 800fdb0:	607b      	str	r3, [r7, #4]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800fdb2:	f7f8 ffbb 	bl	8008d2c <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800fdb6:	f000 f985 	bl	80100c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800fdba:	f7ff ff0f 	bl	800fbdc <MX_GPIO_Init>
  MX_DMA_Init();
 800fdbe:	f7ff fe61 	bl	800fa84 <MX_DMA_Init>
  MX_ADC1_Init();
 800fdc2:	f7ff f863 	bl	800ee8c <MX_ADC1_Init>
  MX_ADC2_Init();
 800fdc6:	f7ff f8b3 	bl	800ef30 <MX_ADC2_Init>
  MX_ADC3_Init();
 800fdca:	f7ff f903 	bl	800efd4 <MX_ADC3_Init>
  MX_CAN1_Init();
 800fdce:	f7ff fccf 	bl	800f770 <MX_CAN1_Init>
  MX_SPI2_Init();
 800fdd2:	f000 fd99 	bl	8010908 <MX_SPI2_Init>
  MX_SPI3_Init();
 800fdd6:	f000 fdcf 	bl	8010978 <MX_SPI3_Init>
  MX_TIM8_Init();
 800fdda:	f001 fb25 	bl	8011428 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 800fdde:	f001 fd19 	bl	8011814 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  DRV_Init();
 800fde2:	f7fe ffbb 	bl	800ed5c <DRV_Init>



  //UartPrintf(&huart2, "Hello world\n");

  printf("Hello\n");
 800fde6:	48a7      	ldr	r0, [pc, #668]	; (8010084 <main+0x2dc>)
 800fde8:	f001 fe6a 	bl	8011ac0 <puts>



  // Gate Enable
  HAL_GPIO_WritePin(GATE_EN_GPIO_Port, GATE_EN_Pin, GPIO_PIN_SET);
 800fdec:	2201      	movs	r2, #1
 800fdee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800fdf2:	48a5      	ldr	r0, [pc, #660]	; (8010088 <main+0x2e0>)
 800fdf4:	f7fb face 	bl	800b394 <HAL_GPIO_WritePin>


  printf("Hello SPI Gate Driver\n");
 800fdf8:	48a4      	ldr	r0, [pc, #656]	; (801008c <main+0x2e4>)
 800fdfa:	f001 fe61 	bl	8011ac0 <puts>


  DRV_ReadData(&drv8323, ADDR_OCP_Control);
 800fdfe:	2105      	movs	r1, #5
 800fe00:	48a3      	ldr	r0, [pc, #652]	; (8010090 <main+0x2e8>)
 800fe02:	f7ff f800 	bl	800ee06 <DRV_ReadData>

  drv8323.Reg.OCP_Control.DEAD_TIME = 0b11;
 800fe06:	4aa2      	ldr	r2, [pc, #648]	; (8010090 <main+0x2e8>)
 800fe08:	7d53      	ldrb	r3, [r2, #21]
 800fe0a:	f043 0303 	orr.w	r3, r3, #3
 800fe0e:	7553      	strb	r3, [r2, #21]
  drv8323.Reg.OCP_Control.OCP_MODE = 0b00;
 800fe10:	4a9f      	ldr	r2, [pc, #636]	; (8010090 <main+0x2e8>)
 800fe12:	7d13      	ldrb	r3, [r2, #20]
 800fe14:	f36f 1387 	bfc	r3, #6, #2
 800fe18:	7513      	strb	r3, [r2, #20]
  drv8323.Reg.OCP_Control.VDS_LVL = 0b0100;
 800fe1a:	4a9d      	ldr	r2, [pc, #628]	; (8010090 <main+0x2e8>)
 800fe1c:	7d13      	ldrb	r3, [r2, #20]
 800fe1e:	2104      	movs	r1, #4
 800fe20:	f361 0303 	bfi	r3, r1, #0, #4
 800fe24:	7513      	strb	r3, [r2, #20]

  DRV_WriteData(&drv8323, ADDR_OCP_Control);
 800fe26:	2105      	movs	r1, #5
 800fe28:	4899      	ldr	r0, [pc, #612]	; (8010090 <main+0x2e8>)
 800fe2a:	f7fe ffaf 	bl	800ed8c <DRV_WriteData>


  DRV_ReadData(&drv8323, ADDR_CSA_Control);
 800fe2e:	2106      	movs	r1, #6
 800fe30:	4897      	ldr	r0, [pc, #604]	; (8010090 <main+0x2e8>)
 800fe32:	f7fe ffe8 	bl	800ee06 <DRV_ReadData>

  drv8323.Reg.CSA_Control.SEN_LVL = 0b00;
 800fe36:	4a96      	ldr	r2, [pc, #600]	; (8010090 <main+0x2e8>)
 800fe38:	7e13      	ldrb	r3, [r2, #24]
 800fe3a:	f36f 0301 	bfc	r3, #0, #2
 800fe3e:	7613      	strb	r3, [r2, #24]

  DRV_WriteData(&drv8323, ADDR_CSA_Control);
 800fe40:	2106      	movs	r1, #6
 800fe42:	4893      	ldr	r0, [pc, #588]	; (8010090 <main+0x2e8>)
 800fe44:	f7fe ffa2 	bl	800ed8c <DRV_WriteData>


  PRINT_HEX(drv8323.Reg.FaultStatus1.word);
 800fe48:	4b91      	ldr	r3, [pc, #580]	; (8010090 <main+0x2e8>)
 800fe4a:	881b      	ldrh	r3, [r3, #0]
 800fe4c:	4619      	mov	r1, r3
 800fe4e:	4891      	ldr	r0, [pc, #580]	; (8010094 <main+0x2ec>)
 800fe50:	f001 fdc2 	bl	80119d8 <iprintf>
  PRINT_HEX(drv8323.Reg.FaultStatus2.word);
 800fe54:	4b8e      	ldr	r3, [pc, #568]	; (8010090 <main+0x2e8>)
 800fe56:	889b      	ldrh	r3, [r3, #4]
 800fe58:	4619      	mov	r1, r3
 800fe5a:	488f      	ldr	r0, [pc, #572]	; (8010098 <main+0x2f0>)
 800fe5c:	f001 fdbc 	bl	80119d8 <iprintf>
  PRINT_HEX(drv8323.Reg.DriverControl.word);
 800fe60:	4b8b      	ldr	r3, [pc, #556]	; (8010090 <main+0x2e8>)
 800fe62:	891b      	ldrh	r3, [r3, #8]
 800fe64:	4619      	mov	r1, r3
 800fe66:	488d      	ldr	r0, [pc, #564]	; (801009c <main+0x2f4>)
 800fe68:	f001 fdb6 	bl	80119d8 <iprintf>
  PRINT_HEX(drv8323.Reg.GateDrive_HS.word);
 800fe6c:	4b88      	ldr	r3, [pc, #544]	; (8010090 <main+0x2e8>)
 800fe6e:	899b      	ldrh	r3, [r3, #12]
 800fe70:	4619      	mov	r1, r3
 800fe72:	488b      	ldr	r0, [pc, #556]	; (80100a0 <main+0x2f8>)
 800fe74:	f001 fdb0 	bl	80119d8 <iprintf>
  PRINT_HEX(drv8323.Reg.GateDrive_LS.word);
 800fe78:	4b85      	ldr	r3, [pc, #532]	; (8010090 <main+0x2e8>)
 800fe7a:	8a1b      	ldrh	r3, [r3, #16]
 800fe7c:	4619      	mov	r1, r3
 800fe7e:	4889      	ldr	r0, [pc, #548]	; (80100a4 <main+0x2fc>)
 800fe80:	f001 fdaa 	bl	80119d8 <iprintf>
  PRINT_HEX(drv8323.Reg.OCP_Control.word);
 800fe84:	4b82      	ldr	r3, [pc, #520]	; (8010090 <main+0x2e8>)
 800fe86:	8a9b      	ldrh	r3, [r3, #20]
 800fe88:	4619      	mov	r1, r3
 800fe8a:	4887      	ldr	r0, [pc, #540]	; (80100a8 <main+0x300>)
 800fe8c:	f001 fda4 	bl	80119d8 <iprintf>
  PRINT_HEX(drv8323.Reg.CSA_Control.word);
 800fe90:	4b7f      	ldr	r3, [pc, #508]	; (8010090 <main+0x2e8>)
 800fe92:	8b1b      	ldrh	r3, [r3, #24]
 800fe94:	4619      	mov	r1, r3
 800fe96:	4885      	ldr	r0, [pc, #532]	; (80100ac <main+0x304>)
 800fe98:	f001 fd9e 	bl	80119d8 <iprintf>


  // Current Sensing Auto Offset Calibration
  HAL_GPIO_WritePin(OP_CAL_GPIO_Port, OP_CAL_Pin, GPIO_PIN_SET);
 800fe9c:	2201      	movs	r2, #1
 800fe9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fea2:	4879      	ldr	r0, [pc, #484]	; (8010088 <main+0x2e0>)
 800fea4:	f7fb fa76 	bl	800b394 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800fea8:	200a      	movs	r0, #10
 800feaa:	f7f8 ffb1 	bl	8008e10 <HAL_Delay>
  HAL_GPIO_WritePin(OP_CAL_GPIO_Port, OP_CAL_Pin, GPIO_PIN_RESET);
 800feae:	2200      	movs	r2, #0
 800feb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 800feb4:	4874      	ldr	r0, [pc, #464]	; (8010088 <main+0x2e0>)
 800feb6:	f7fb fa6d 	bl	800b394 <HAL_GPIO_WritePin>


  /******** DEBUG ********/


  DRV_ReadData(&drv8323, ADDR_CSA_Control);
 800feba:	2106      	movs	r1, #6
 800febc:	4874      	ldr	r0, [pc, #464]	; (8010090 <main+0x2e8>)
 800febe:	f7fe ffa2 	bl	800ee06 <DRV_ReadData>
  PRINT_HEX(drv8323.Reg.CSA_Control.word);
 800fec2:	4b73      	ldr	r3, [pc, #460]	; (8010090 <main+0x2e8>)
 800fec4:	8b1b      	ldrh	r3, [r3, #24]
 800fec6:	4619      	mov	r1, r3
 800fec8:	4878      	ldr	r0, [pc, #480]	; (80100ac <main+0x304>)
 800feca:	f001 fd85 	bl	80119d8 <iprintf>

  HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_RESET);
 800fece:	2200      	movs	r2, #0
 800fed0:	2140      	movs	r1, #64	; 0x40
 800fed2:	486d      	ldr	r0, [pc, #436]	; (8010088 <main+0x2e0>)
 800fed4:	f7fb fa5e 	bl	800b394 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, GPIO_PIN_RESET);
 800fed8:	2200      	movs	r2, #0
 800feda:	2110      	movs	r1, #16
 800fedc:	4874      	ldr	r0, [pc, #464]	; (80100b0 <main+0x308>)
 800fede:	f7fb fa59 	bl	800b394 <HAL_GPIO_WritePin>


  p_ch = getChannel();
 800fee2:	f7ff fd23 	bl	800f92c <getChannel>
 800fee6:	4603      	mov	r3, r0
 800fee8:	70fb      	strb	r3, [r7, #3]


  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 800feea:	2201      	movs	r2, #1
 800feec:	2120      	movs	r1, #32
 800feee:	4866      	ldr	r0, [pc, #408]	; (8010088 <main+0x2e0>)
 800fef0:	f7fb fa50 	bl	800b394 <HAL_GPIO_WritePin>
 800fef4:	2064      	movs	r0, #100	; 0x64
 800fef6:	f7f8 ff8b 	bl	8008e10 <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 800fefa:	2200      	movs	r2, #0
 800fefc:	2120      	movs	r1, #32
 800fefe:	4862      	ldr	r0, [pc, #392]	; (8010088 <main+0x2e0>)
 800ff00:	f7fb fa48 	bl	800b394 <HAL_GPIO_WritePin>
 800ff04:	2064      	movs	r0, #100	; 0x64
 800ff06:	f7f8 ff83 	bl	8008e10 <HAL_Delay>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 800ff0a:	2201      	movs	r2, #1
 800ff0c:	2120      	movs	r1, #32
 800ff0e:	485e      	ldr	r0, [pc, #376]	; (8010088 <main+0x2e0>)
 800ff10:	f7fb fa40 	bl	800b394 <HAL_GPIO_WritePin>
 800ff14:	2064      	movs	r0, #100	; 0x64
 800ff16:	f7f8 ff7b 	bl	8008e10 <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	2120      	movs	r1, #32
 800ff1e:	485a      	ldr	r0, [pc, #360]	; (8010088 <main+0x2e0>)
 800ff20:	f7fb fa38 	bl	800b394 <HAL_GPIO_WritePin>
 800ff24:	2064      	movs	r0, #100	; 0x64
 800ff26:	f7f8 ff73 	bl	8008e10 <HAL_Delay>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 800ff2a:	2201      	movs	r2, #1
 800ff2c:	2120      	movs	r1, #32
 800ff2e:	4856      	ldr	r0, [pc, #344]	; (8010088 <main+0x2e0>)
 800ff30:	f7fb fa30 	bl	800b394 <HAL_GPIO_WritePin>
 800ff34:	2064      	movs	r0, #100	; 0x64
 800ff36:	f7f8 ff6b 	bl	8008e10 <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 800ff3a:	2200      	movs	r2, #0
 800ff3c:	2120      	movs	r1, #32
 800ff3e:	4852      	ldr	r0, [pc, #328]	; (8010088 <main+0x2e0>)
 800ff40:	f7fb fa28 	bl	800b394 <HAL_GPIO_WritePin>
 800ff44:	2064      	movs	r0, #100	; 0x64
 800ff46:	f7f8 ff63 	bl	8008e10 <HAL_Delay>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 800ff4a:	2201      	movs	r2, #1
 800ff4c:	2120      	movs	r1, #32
 800ff4e:	484e      	ldr	r0, [pc, #312]	; (8010088 <main+0x2e0>)
 800ff50:	f7fb fa20 	bl	800b394 <HAL_GPIO_WritePin>
 800ff54:	2064      	movs	r0, #100	; 0x64
 800ff56:	f7f8 ff5b 	bl	8008e10 <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 800ff5a:	2200      	movs	r2, #0
 800ff5c:	2120      	movs	r1, #32
 800ff5e:	484a      	ldr	r0, [pc, #296]	; (8010088 <main+0x2e0>)
 800ff60:	f7fb fa18 	bl	800b394 <HAL_GPIO_WritePin>
 800ff64:	2064      	movs	r0, #100	; 0x64
 800ff66:	f7f8 ff53 	bl	8008e10 <HAL_Delay>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 800ff6a:	2201      	movs	r2, #1
 800ff6c:	2120      	movs	r1, #32
 800ff6e:	4846      	ldr	r0, [pc, #280]	; (8010088 <main+0x2e0>)
 800ff70:	f7fb fa10 	bl	800b394 <HAL_GPIO_WritePin>
 800ff74:	2064      	movs	r0, #100	; 0x64
 800ff76:	f7f8 ff4b 	bl	8008e10 <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 800ff7a:	2200      	movs	r2, #0
 800ff7c:	2120      	movs	r1, #32
 800ff7e:	4842      	ldr	r0, [pc, #264]	; (8010088 <main+0x2e0>)
 800ff80:	f7fb fa08 	bl	800b394 <HAL_GPIO_WritePin>
 800ff84:	2064      	movs	r0, #100	; 0x64
 800ff86:	f7f8 ff43 	bl	8008e10 <HAL_Delay>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 800ff8a:	2201      	movs	r2, #1
 800ff8c:	2120      	movs	r1, #32
 800ff8e:	483e      	ldr	r0, [pc, #248]	; (8010088 <main+0x2e0>)
 800ff90:	f7fb fa00 	bl	800b394 <HAL_GPIO_WritePin>
 800ff94:	2064      	movs	r0, #100	; 0x64
 800ff96:	f7f8 ff3b 	bl	8008e10 <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 800ff9a:	2200      	movs	r2, #0
 800ff9c:	2120      	movs	r1, #32
 800ff9e:	483a      	ldr	r0, [pc, #232]	; (8010088 <main+0x2e0>)
 800ffa0:	f7fb f9f8 	bl	800b394 <HAL_GPIO_WritePin>
 800ffa4:	2064      	movs	r0, #100	; 0x64
 800ffa6:	f7f8 ff33 	bl	8008e10 <HAL_Delay>


  ch = 0x00; //getChannel();
 800ffaa:	2300      	movs	r3, #0
 800ffac:	70bb      	strb	r3, [r7, #2]



  ADC_Init();
 800ffae:	f7ff f9c1 	bl	800f334 <ADC_Init>

  CAN_Init();
 800ffb2:	f7ff fc6d 	bl	800f890 <CAN_Init>


  HAL_Delay(100);
 800ffb6:	2064      	movs	r0, #100	; 0x64
 800ffb8:	f7f8 ff2a 	bl	8008e10 <HAL_Delay>


  TIM_Init();
 800ffbc:	f001 fb8e 	bl	80116dc <TIM_Init>

  SPI_Init();
 800ffc0:	f000 fde4 	bl	8010b8c <SPI_Init>

  ACR_Start();
 800ffc4:	f7fe fa42 	bl	800e44c <ACR_Start>

  setZeroEncoder(0);
 800ffc8:	2000      	movs	r0, #0
 800ffca:	f000 fdf1 	bl	8010bb0 <setZeroEncoder>



  //while(1);

  ASR_Start();
 800ffce:	f7fe fce5 	bl	800e99c <ASR_Start>


  DRV_ReadData(&drv8323, ADDR_FaultStatus1);
 800ffd2:	2100      	movs	r1, #0
 800ffd4:	482e      	ldr	r0, [pc, #184]	; (8010090 <main+0x2e8>)
 800ffd6:	f7fe ff16 	bl	800ee06 <DRV_ReadData>
  PRINT_HEX(drv8323.Reg.FaultStatus1.word);
 800ffda:	4b2d      	ldr	r3, [pc, #180]	; (8010090 <main+0x2e8>)
 800ffdc:	881b      	ldrh	r3, [r3, #0]
 800ffde:	4619      	mov	r1, r3
 800ffe0:	482c      	ldr	r0, [pc, #176]	; (8010094 <main+0x2ec>)
 800ffe2:	f001 fcf9 	bl	80119d8 <iprintf>


  DRV_ReadData(&drv8323, ADDR_FaultStatus2);
 800ffe6:	2101      	movs	r1, #1
 800ffe8:	4829      	ldr	r0, [pc, #164]	; (8010090 <main+0x2e8>)
 800ffea:	f7fe ff0c 	bl	800ee06 <DRV_ReadData>
  PRINT_HEX(drv8323.Reg.FaultStatus2.word);
 800ffee:	4b28      	ldr	r3, [pc, #160]	; (8010090 <main+0x2e8>)
 800fff0:	889b      	ldrh	r3, [r3, #4]
 800fff2:	4619      	mov	r1, r3
 800fff4:	4828      	ldr	r0, [pc, #160]	; (8010098 <main+0x2f0>)
 800fff6:	f001 fcef 	bl	80119d8 <iprintf>

    /* USER CODE BEGIN 3 */

	  static int readFlag = 0;

	  if(ASR_flg == 1)
 800fffa:	4b2e      	ldr	r3, [pc, #184]	; (80100b4 <main+0x30c>)
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	2b01      	cmp	r3, #1
 8010000:	d1fb      	bne.n	800fffa <main+0x252>
	  {
		  HAL_GPIO_TogglePin(DB2_GPIO_Port, DB2_Pin);
 8010002:	2110      	movs	r1, #16
 8010004:	482a      	ldr	r0, [pc, #168]	; (80100b0 <main+0x308>)
 8010006:	f7fb f9de 	bl	800b3c6 <HAL_GPIO_TogglePin>


		  if(HAL_GPIO_ReadPin(BR_FLT_GPIO_Port, BR_FLT_Pin) == GPIO_PIN_RESET)
 801000a:	f44f 7180 	mov.w	r1, #256	; 0x100
 801000e:	481e      	ldr	r0, [pc, #120]	; (8010088 <main+0x2e0>)
 8010010:	f7fb f9a8 	bl	800b364 <HAL_GPIO_ReadPin>
 8010014:	4603      	mov	r3, r0
 8010016:	2b00      	cmp	r3, #0
 8010018:	d018      	beq.n	801004c <main+0x2a4>
		  {
			  break;
		  }

		  if(readFlag != 1)
 801001a:	4b27      	ldr	r3, [pc, #156]	; (80100b8 <main+0x310>)
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	2b01      	cmp	r3, #1
 8010020:	d007      	beq.n	8010032 <main+0x28a>
		  {
			  DRV_ReadData(&drv8323, ADDR_FaultStatus1);
 8010022:	2100      	movs	r1, #0
 8010024:	481a      	ldr	r0, [pc, #104]	; (8010090 <main+0x2e8>)
 8010026:	f7fe feee 	bl	800ee06 <DRV_ReadData>
			  readFlag = 1;
 801002a:	4b23      	ldr	r3, [pc, #140]	; (80100b8 <main+0x310>)
 801002c:	2201      	movs	r2, #1
 801002e:	601a      	str	r2, [r3, #0]
 8010030:	e006      	b.n	8010040 <main+0x298>
		  }
		  else
		  {
			  DRV_ReadData(&drv8323, ADDR_FaultStatus2);
 8010032:	2101      	movs	r1, #1
 8010034:	4816      	ldr	r0, [pc, #88]	; (8010090 <main+0x2e8>)
 8010036:	f7fe fee6 	bl	800ee06 <DRV_ReadData>
			  readFlag = 0;
 801003a:	4b1f      	ldr	r3, [pc, #124]	; (80100b8 <main+0x310>)
 801003c:	2200      	movs	r2, #0
 801003e:	601a      	str	r2, [r3, #0]
#endif

		  /********** ASR (Auto Speed Regulator) **********/


		  speedControl();
 8010040:	f7fe fcba 	bl	800e9b8 <speedControl>


		  /********** end of ASR **********/


		  ASR_flg = 0;
 8010044:	4b1b      	ldr	r3, [pc, #108]	; (80100b4 <main+0x30c>)
 8010046:	2200      	movs	r2, #0
 8010048:	601a      	str	r2, [r3, #0]
  {
 801004a:	e7d6      	b.n	800fffa <main+0x252>
			  break;
 801004c:	bf00      	nop


  }


  Id_ref = 0.0f;
 801004e:	4b1b      	ldr	r3, [pc, #108]	; (80100bc <main+0x314>)
 8010050:	f04f 0200 	mov.w	r2, #0
 8010054:	601a      	str	r2, [r3, #0]
  Iq_ref = 0.0f;
 8010056:	4b1a      	ldr	r3, [pc, #104]	; (80100c0 <main+0x318>)
 8010058:	f04f 0200 	mov.w	r2, #0
 801005c:	601a      	str	r2, [r3, #0]

  HAL_Delay(10);
 801005e:	200a      	movs	r0, #10
 8010060:	f7f8 fed6 	bl	8008e10 <HAL_Delay>

  // Gate Disable
  HAL_GPIO_WritePin(GATE_EN_GPIO_Port, GATE_EN_Pin, GPIO_PIN_RESET);
 8010064:	2200      	movs	r2, #0
 8010066:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801006a:	4807      	ldr	r0, [pc, #28]	; (8010088 <main+0x2e0>)
 801006c:	f7fb f992 	bl	800b394 <HAL_GPIO_WritePin>

  HAL_Delay(10);
 8010070:	200a      	movs	r0, #10
 8010072:	f7f8 fecd 	bl	8008e10 <HAL_Delay>

  stopPWM();
 8010076:	f001 fb65 	bl	8011744 <stopPWM>

  HAL_Delay(10);
 801007a:	200a      	movs	r0, #10
 801007c:	f7f8 fec8 	bl	8008e10 <HAL_Delay>
  }

#endif


  while(1);
 8010080:	e7fe      	b.n	8010080 <main+0x2d8>
 8010082:	bf00      	nop
 8010084:	08012a4c 	.word	0x08012a4c
 8010088:	40020000 	.word	0x40020000
 801008c:	08012a54 	.word	0x08012a54
 8010090:	20004240 	.word	0x20004240
 8010094:	08012a6c 	.word	0x08012a6c
 8010098:	08012a94 	.word	0x08012a94
 801009c:	08012abc 	.word	0x08012abc
 80100a0:	08012ae4 	.word	0x08012ae4
 80100a4:	08012b0c 	.word	0x08012b0c
 80100a8:	08012b34 	.word	0x08012b34
 80100ac:	08012b5c 	.word	0x08012b5c
 80100b0:	40020400 	.word	0x40020400
 80100b4:	20000114 	.word	0x20000114
 80100b8:	20004188 	.word	0x20004188
 80100bc:	200000c4 	.word	0x200000c4
 80100c0:	200000c8 	.word	0x200000c8

080100c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80100c4:	b580      	push	{r7, lr}
 80100c6:	b094      	sub	sp, #80	; 0x50
 80100c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80100ca:	f107 031c 	add.w	r3, r7, #28
 80100ce:	2234      	movs	r2, #52	; 0x34
 80100d0:	2100      	movs	r1, #0
 80100d2:	4618      	mov	r0, r3
 80100d4:	f001 fc77 	bl	80119c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80100d8:	f107 0308 	add.w	r3, r7, #8
 80100dc:	2200      	movs	r2, #0
 80100de:	601a      	str	r2, [r3, #0]
 80100e0:	605a      	str	r2, [r3, #4]
 80100e2:	609a      	str	r2, [r3, #8]
 80100e4:	60da      	str	r2, [r3, #12]
 80100e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80100e8:	2300      	movs	r3, #0
 80100ea:	607b      	str	r3, [r7, #4]
 80100ec:	4b29      	ldr	r3, [pc, #164]	; (8010194 <SystemClock_Config+0xd0>)
 80100ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80100f0:	4a28      	ldr	r2, [pc, #160]	; (8010194 <SystemClock_Config+0xd0>)
 80100f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80100f6:	6413      	str	r3, [r2, #64]	; 0x40
 80100f8:	4b26      	ldr	r3, [pc, #152]	; (8010194 <SystemClock_Config+0xd0>)
 80100fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80100fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010100:	607b      	str	r3, [r7, #4]
 8010102:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8010104:	2300      	movs	r3, #0
 8010106:	603b      	str	r3, [r7, #0]
 8010108:	4b23      	ldr	r3, [pc, #140]	; (8010198 <SystemClock_Config+0xd4>)
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	4a22      	ldr	r2, [pc, #136]	; (8010198 <SystemClock_Config+0xd4>)
 801010e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010112:	6013      	str	r3, [r2, #0]
 8010114:	4b20      	ldr	r3, [pc, #128]	; (8010198 <SystemClock_Config+0xd4>)
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801011c:	603b      	str	r3, [r7, #0]
 801011e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8010120:	2302      	movs	r3, #2
 8010122:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8010124:	2301      	movs	r3, #1
 8010126:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8010128:	2310      	movs	r3, #16
 801012a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801012c:	2302      	movs	r3, #2
 801012e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8010130:	2300      	movs	r3, #0
 8010132:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8010134:	2310      	movs	r3, #16
 8010136:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 320;
 8010138:	f44f 73a0 	mov.w	r3, #320	; 0x140
 801013c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 801013e:	2302      	movs	r3, #2
 8010140:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8010142:	2302      	movs	r3, #2
 8010144:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8010146:	2302      	movs	r3, #2
 8010148:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801014a:	f107 031c 	add.w	r3, r7, #28
 801014e:	4618      	mov	r0, r3
 8010150:	f7fb fc0a 	bl	800b968 <HAL_RCC_OscConfig>
 8010154:	4603      	mov	r3, r0
 8010156:	2b00      	cmp	r3, #0
 8010158:	d001      	beq.n	801015e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 801015a:	f000 f81f 	bl	801019c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 801015e:	230f      	movs	r3, #15
 8010160:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8010162:	2302      	movs	r3, #2
 8010164:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8010166:	2300      	movs	r3, #0
 8010168:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 801016a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 801016e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8010170:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010174:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8010176:	f107 0308 	add.w	r3, r7, #8
 801017a:	2105      	movs	r1, #5
 801017c:	4618      	mov	r0, r3
 801017e:	f7fb f93d 	bl	800b3fc <HAL_RCC_ClockConfig>
 8010182:	4603      	mov	r3, r0
 8010184:	2b00      	cmp	r3, #0
 8010186:	d001      	beq.n	801018c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8010188:	f000 f808 	bl	801019c <Error_Handler>
  }
}
 801018c:	bf00      	nop
 801018e:	3750      	adds	r7, #80	; 0x50
 8010190:	46bd      	mov	sp, r7
 8010192:	bd80      	pop	{r7, pc}
 8010194:	40023800 	.word	0x40023800
 8010198:	40007000 	.word	0x40007000

0801019c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 801019c:	b480      	push	{r7}
 801019e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80101a0:	bf00      	nop
 80101a2:	46bd      	mov	sp, r7
 80101a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a8:	4770      	bx	lr
	...

080101ac <setSVM_dq>:
volatile int sector_SVM = 0;



inline void setSVM_dq()
{
 80101ac:	b5b0      	push	{r4, r5, r7, lr}
 80101ae:	af00      	add	r7, sp, #0
	static float vect1, vect2;




	x = Vd_ref * cos_theta_re - Vq_ref * sin_theta_re;
 80101b0:	4bb8      	ldr	r3, [pc, #736]	; (8010494 <setSVM_dq+0x2e8>)
 80101b2:	ed93 7a00 	vldr	s14, [r3]
 80101b6:	4bb8      	ldr	r3, [pc, #736]	; (8010498 <setSVM_dq+0x2ec>)
 80101b8:	edd3 7a00 	vldr	s15, [r3]
 80101bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80101c0:	4bb6      	ldr	r3, [pc, #728]	; (801049c <setSVM_dq+0x2f0>)
 80101c2:	edd3 6a00 	vldr	s13, [r3]
 80101c6:	4bb6      	ldr	r3, [pc, #728]	; (80104a0 <setSVM_dq+0x2f4>)
 80101c8:	edd3 7a00 	vldr	s15, [r3]
 80101cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80101d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80101d4:	4bb3      	ldr	r3, [pc, #716]	; (80104a4 <setSVM_dq+0x2f8>)
 80101d6:	edc3 7a00 	vstr	s15, [r3]
	y = Vd_ref * sin_theta_re + Vq_ref * cos_theta_re;
 80101da:	4bae      	ldr	r3, [pc, #696]	; (8010494 <setSVM_dq+0x2e8>)
 80101dc:	ed93 7a00 	vldr	s14, [r3]
 80101e0:	4baf      	ldr	r3, [pc, #700]	; (80104a0 <setSVM_dq+0x2f4>)
 80101e2:	edd3 7a00 	vldr	s15, [r3]
 80101e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80101ea:	4bac      	ldr	r3, [pc, #688]	; (801049c <setSVM_dq+0x2f0>)
 80101ec:	edd3 6a00 	vldr	s13, [r3]
 80101f0:	4ba9      	ldr	r3, [pc, #676]	; (8010498 <setSVM_dq+0x2ec>)
 80101f2:	edd3 7a00 	vldr	s15, [r3]
 80101f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80101fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80101fe:	4baa      	ldr	r3, [pc, #680]	; (80104a8 <setSVM_dq+0x2fc>)
 8010200:	edc3 7a00 	vstr	s15, [r3]

	cross0 = refVector[0][0] * y - refVector[0][1] * x;
 8010204:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010208:	4ba7      	ldr	r3, [pc, #668]	; (80104a8 <setSVM_dq+0x2fc>)
 801020a:	edd3 7a00 	vldr	s15, [r3]
 801020e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010212:	eddf 6aa6 	vldr	s13, [pc, #664]	; 80104ac <setSVM_dq+0x300>
 8010216:	4ba3      	ldr	r3, [pc, #652]	; (80104a4 <setSVM_dq+0x2f8>)
 8010218:	edd3 7a00 	vldr	s15, [r3]
 801021c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010220:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010224:	4ba2      	ldr	r3, [pc, #648]	; (80104b0 <setSVM_dq+0x304>)
 8010226:	edc3 7a00 	vstr	s15, [r3]
	cross1 = refVector[1][0] * y - refVector[1][1] * x;
 801022a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801022e:	4b9e      	ldr	r3, [pc, #632]	; (80104a8 <setSVM_dq+0x2fc>)
 8010230:	edd3 7a00 	vldr	s15, [r3]
 8010234:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010238:	eddf 6a9e 	vldr	s13, [pc, #632]	; 80104b4 <setSVM_dq+0x308>
 801023c:	4b99      	ldr	r3, [pc, #612]	; (80104a4 <setSVM_dq+0x2f8>)
 801023e:	edd3 7a00 	vldr	s15, [r3]
 8010242:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010246:	ee77 7a67 	vsub.f32	s15, s14, s15
 801024a:	4b9b      	ldr	r3, [pc, #620]	; (80104b8 <setSVM_dq+0x30c>)
 801024c:	edc3 7a00 	vstr	s15, [r3]

	if(cross0 >= 0)
 8010250:	4b97      	ldr	r3, [pc, #604]	; (80104b0 <setSVM_dq+0x304>)
 8010252:	edd3 7a00 	vldr	s15, [r3]
 8010256:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801025a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801025e:	db1e      	blt.n	801029e <setSVM_dq+0xf2>
	{
		if(cross1 <= 0)				sector_SVM = 0;
 8010260:	4b95      	ldr	r3, [pc, #596]	; (80104b8 <setSVM_dq+0x30c>)
 8010262:	edd3 7a00 	vldr	s15, [r3]
 8010266:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801026a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801026e:	d803      	bhi.n	8010278 <setSVM_dq+0xcc>
 8010270:	4b92      	ldr	r3, [pc, #584]	; (80104bc <setSVM_dq+0x310>)
 8010272:	2200      	movs	r2, #0
 8010274:	601a      	str	r2, [r3, #0]
 8010276:	e030      	b.n	80102da <setSVM_dq+0x12e>
		else if(cross0 >= cross1)	sector_SVM = 1;
 8010278:	4b8d      	ldr	r3, [pc, #564]	; (80104b0 <setSVM_dq+0x304>)
 801027a:	ed93 7a00 	vldr	s14, [r3]
 801027e:	4b8e      	ldr	r3, [pc, #568]	; (80104b8 <setSVM_dq+0x30c>)
 8010280:	edd3 7a00 	vldr	s15, [r3]
 8010284:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801028c:	db03      	blt.n	8010296 <setSVM_dq+0xea>
 801028e:	4b8b      	ldr	r3, [pc, #556]	; (80104bc <setSVM_dq+0x310>)
 8010290:	2201      	movs	r2, #1
 8010292:	601a      	str	r2, [r3, #0]
 8010294:	e021      	b.n	80102da <setSVM_dq+0x12e>
		else						sector_SVM = 2;
 8010296:	4b89      	ldr	r3, [pc, #548]	; (80104bc <setSVM_dq+0x310>)
 8010298:	2202      	movs	r2, #2
 801029a:	601a      	str	r2, [r3, #0]
 801029c:	e01d      	b.n	80102da <setSVM_dq+0x12e>
	}
	else
	{
		if(cross1 >= 0)				sector_SVM = 3;
 801029e:	4b86      	ldr	r3, [pc, #536]	; (80104b8 <setSVM_dq+0x30c>)
 80102a0:	edd3 7a00 	vldr	s15, [r3]
 80102a4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80102a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102ac:	db03      	blt.n	80102b6 <setSVM_dq+0x10a>
 80102ae:	4b83      	ldr	r3, [pc, #524]	; (80104bc <setSVM_dq+0x310>)
 80102b0:	2203      	movs	r2, #3
 80102b2:	601a      	str	r2, [r3, #0]
 80102b4:	e011      	b.n	80102da <setSVM_dq+0x12e>
		else if(cross0 <= cross1)	sector_SVM = 4;
 80102b6:	4b7e      	ldr	r3, [pc, #504]	; (80104b0 <setSVM_dq+0x304>)
 80102b8:	ed93 7a00 	vldr	s14, [r3]
 80102bc:	4b7e      	ldr	r3, [pc, #504]	; (80104b8 <setSVM_dq+0x30c>)
 80102be:	edd3 7a00 	vldr	s15, [r3]
 80102c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80102c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102ca:	d803      	bhi.n	80102d4 <setSVM_dq+0x128>
 80102cc:	4b7b      	ldr	r3, [pc, #492]	; (80104bc <setSVM_dq+0x310>)
 80102ce:	2204      	movs	r2, #4
 80102d0:	601a      	str	r2, [r3, #0]
 80102d2:	e002      	b.n	80102da <setSVM_dq+0x12e>
		else						sector_SVM = 5;
 80102d4:	4b79      	ldr	r3, [pc, #484]	; (80104bc <setSVM_dq+0x310>)
 80102d6:	2205      	movs	r2, #5
 80102d8:	601a      	str	r2, [r3, #0]
	}

	x1 = refVector[sector_SVM][0];
 80102da:	4b78      	ldr	r3, [pc, #480]	; (80104bc <setSVM_dq+0x310>)
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	4a78      	ldr	r2, [pc, #480]	; (80104c0 <setSVM_dq+0x314>)
 80102e0:	00db      	lsls	r3, r3, #3
 80102e2:	4413      	add	r3, r2
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	4a77      	ldr	r2, [pc, #476]	; (80104c4 <setSVM_dq+0x318>)
 80102e8:	6013      	str	r3, [r2, #0]
	y1 = refVector[sector_SVM][1];
 80102ea:	4b74      	ldr	r3, [pc, #464]	; (80104bc <setSVM_dq+0x310>)
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	4a74      	ldr	r2, [pc, #464]	; (80104c0 <setSVM_dq+0x314>)
 80102f0:	00db      	lsls	r3, r3, #3
 80102f2:	4413      	add	r3, r2
 80102f4:	3304      	adds	r3, #4
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	4a73      	ldr	r2, [pc, #460]	; (80104c8 <setSVM_dq+0x31c>)
 80102fa:	6013      	str	r3, [r2, #0]
	x2 = refVector[sector_SVM + 1][0];
 80102fc:	4b6f      	ldr	r3, [pc, #444]	; (80104bc <setSVM_dq+0x310>)
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	3301      	adds	r3, #1
 8010302:	4a6f      	ldr	r2, [pc, #444]	; (80104c0 <setSVM_dq+0x314>)
 8010304:	00db      	lsls	r3, r3, #3
 8010306:	4413      	add	r3, r2
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	4a70      	ldr	r2, [pc, #448]	; (80104cc <setSVM_dq+0x320>)
 801030c:	6013      	str	r3, [r2, #0]
	y2 = refVector[sector_SVM + 1][1];
 801030e:	4b6b      	ldr	r3, [pc, #428]	; (80104bc <setSVM_dq+0x310>)
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	3301      	adds	r3, #1
 8010314:	4a6a      	ldr	r2, [pc, #424]	; (80104c0 <setSVM_dq+0x314>)
 8010316:	00db      	lsls	r3, r3, #3
 8010318:	4413      	add	r3, r2
 801031a:	3304      	adds	r3, #4
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	4a6c      	ldr	r2, [pc, #432]	; (80104d0 <setSVM_dq+0x324>)
 8010320:	6013      	str	r3, [r2, #0]

	vect1 = (y2 * x - x2 * y) / ((x1 * y2 - y1 * x2) * Vdc);
 8010322:	4b6b      	ldr	r3, [pc, #428]	; (80104d0 <setSVM_dq+0x324>)
 8010324:	ed93 7a00 	vldr	s14, [r3]
 8010328:	4b5e      	ldr	r3, [pc, #376]	; (80104a4 <setSVM_dq+0x2f8>)
 801032a:	edd3 7a00 	vldr	s15, [r3]
 801032e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010332:	4b66      	ldr	r3, [pc, #408]	; (80104cc <setSVM_dq+0x320>)
 8010334:	edd3 6a00 	vldr	s13, [r3]
 8010338:	4b5b      	ldr	r3, [pc, #364]	; (80104a8 <setSVM_dq+0x2fc>)
 801033a:	edd3 7a00 	vldr	s15, [r3]
 801033e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8010342:	ee77 6a67 	vsub.f32	s13, s14, s15
 8010346:	4b5f      	ldr	r3, [pc, #380]	; (80104c4 <setSVM_dq+0x318>)
 8010348:	ed93 7a00 	vldr	s14, [r3]
 801034c:	4b60      	ldr	r3, [pc, #384]	; (80104d0 <setSVM_dq+0x324>)
 801034e:	edd3 7a00 	vldr	s15, [r3]
 8010352:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010356:	4b5c      	ldr	r3, [pc, #368]	; (80104c8 <setSVM_dq+0x31c>)
 8010358:	ed93 6a00 	vldr	s12, [r3]
 801035c:	4b5b      	ldr	r3, [pc, #364]	; (80104cc <setSVM_dq+0x320>)
 801035e:	edd3 7a00 	vldr	s15, [r3]
 8010362:	ee66 7a27 	vmul.f32	s15, s12, s15
 8010366:	ee37 7a67 	vsub.f32	s14, s14, s15
 801036a:	4b5a      	ldr	r3, [pc, #360]	; (80104d4 <setSVM_dq+0x328>)
 801036c:	edd3 7a00 	vldr	s15, [r3]
 8010370:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010374:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010378:	4b57      	ldr	r3, [pc, #348]	; (80104d8 <setSVM_dq+0x32c>)
 801037a:	edc3 7a00 	vstr	s15, [r3]
	vect2 = (-y1 * x + x1 * y) / ((x1 * y2 - y1 * x2) * Vdc);
 801037e:	4b52      	ldr	r3, [pc, #328]	; (80104c8 <setSVM_dq+0x31c>)
 8010380:	edd3 7a00 	vldr	s15, [r3]
 8010384:	eeb1 7a67 	vneg.f32	s14, s15
 8010388:	4b46      	ldr	r3, [pc, #280]	; (80104a4 <setSVM_dq+0x2f8>)
 801038a:	edd3 7a00 	vldr	s15, [r3]
 801038e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010392:	4b4c      	ldr	r3, [pc, #304]	; (80104c4 <setSVM_dq+0x318>)
 8010394:	edd3 6a00 	vldr	s13, [r3]
 8010398:	4b43      	ldr	r3, [pc, #268]	; (80104a8 <setSVM_dq+0x2fc>)
 801039a:	edd3 7a00 	vldr	s15, [r3]
 801039e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80103a2:	ee77 6a27 	vadd.f32	s13, s14, s15
 80103a6:	4b47      	ldr	r3, [pc, #284]	; (80104c4 <setSVM_dq+0x318>)
 80103a8:	ed93 7a00 	vldr	s14, [r3]
 80103ac:	4b48      	ldr	r3, [pc, #288]	; (80104d0 <setSVM_dq+0x324>)
 80103ae:	edd3 7a00 	vldr	s15, [r3]
 80103b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80103b6:	4b44      	ldr	r3, [pc, #272]	; (80104c8 <setSVM_dq+0x31c>)
 80103b8:	ed93 6a00 	vldr	s12, [r3]
 80103bc:	4b43      	ldr	r3, [pc, #268]	; (80104cc <setSVM_dq+0x320>)
 80103be:	edd3 7a00 	vldr	s15, [r3]
 80103c2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80103c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80103ca:	4b42      	ldr	r3, [pc, #264]	; (80104d4 <setSVM_dq+0x328>)
 80103cc:	edd3 7a00 	vldr	s15, [r3]
 80103d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80103d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80103d8:	4b40      	ldr	r3, [pc, #256]	; (80104dc <setSVM_dq+0x330>)
 80103da:	edc3 7a00 	vstr	s15, [r3]

	switch(sector_SVM)
 80103de:	4b37      	ldr	r3, [pc, #220]	; (80104bc <setSVM_dq+0x310>)
 80103e0:	681b      	ldr	r3, [r3, #0]
 80103e2:	2b05      	cmp	r3, #5
 80103e4:	f200 81e0 	bhi.w	80107a8 <setSVM_dq+0x5fc>
 80103e8:	a201      	add	r2, pc, #4	; (adr r2, 80103f0 <setSVM_dq+0x244>)
 80103ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80103ee:	bf00      	nop
 80103f0:	08010409 	.word	0x08010409
 80103f4:	080104ed 	.word	0x080104ed
 80103f8:	08010579 	.word	0x08010579
 80103fc:	08010605 	.word	0x08010605
 8010400:	08010691 	.word	0x08010691
 8010404:	0801071d 	.word	0x0801071d
	{
	case 0: duty[2] = (1.0 - vect1 - vect2) * 0.5f; 	duty[1] = duty[2] + vect2; 	duty[0] = duty[1] + vect1;  break;
 8010408:	4b33      	ldr	r3, [pc, #204]	; (80104d8 <setSVM_dq+0x32c>)
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	4618      	mov	r0, r3
 801040e:	f7f7 ffcb 	bl	80083a8 <__aeabi_f2d>
 8010412:	4603      	mov	r3, r0
 8010414:	460c      	mov	r4, r1
 8010416:	461a      	mov	r2, r3
 8010418:	4623      	mov	r3, r4
 801041a:	f04f 0000 	mov.w	r0, #0
 801041e:	4930      	ldr	r1, [pc, #192]	; (80104e0 <setSVM_dq+0x334>)
 8010420:	f7f7 fe62 	bl	80080e8 <__aeabi_dsub>
 8010424:	4603      	mov	r3, r0
 8010426:	460c      	mov	r4, r1
 8010428:	4625      	mov	r5, r4
 801042a:	461c      	mov	r4, r3
 801042c:	4b2b      	ldr	r3, [pc, #172]	; (80104dc <setSVM_dq+0x330>)
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	4618      	mov	r0, r3
 8010432:	f7f7 ffb9 	bl	80083a8 <__aeabi_f2d>
 8010436:	4602      	mov	r2, r0
 8010438:	460b      	mov	r3, r1
 801043a:	4620      	mov	r0, r4
 801043c:	4629      	mov	r1, r5
 801043e:	f7f7 fe53 	bl	80080e8 <__aeabi_dsub>
 8010442:	4603      	mov	r3, r0
 8010444:	460c      	mov	r4, r1
 8010446:	4618      	mov	r0, r3
 8010448:	4621      	mov	r1, r4
 801044a:	f04f 0200 	mov.w	r2, #0
 801044e:	4b25      	ldr	r3, [pc, #148]	; (80104e4 <setSVM_dq+0x338>)
 8010450:	f7f8 f802 	bl	8008458 <__aeabi_dmul>
 8010454:	4603      	mov	r3, r0
 8010456:	460c      	mov	r4, r1
 8010458:	4618      	mov	r0, r3
 801045a:	4621      	mov	r1, r4
 801045c:	f7f8 fa96 	bl	800898c <__aeabi_d2f>
 8010460:	4602      	mov	r2, r0
 8010462:	4b21      	ldr	r3, [pc, #132]	; (80104e8 <setSVM_dq+0x33c>)
 8010464:	609a      	str	r2, [r3, #8]
 8010466:	4b20      	ldr	r3, [pc, #128]	; (80104e8 <setSVM_dq+0x33c>)
 8010468:	ed93 7a02 	vldr	s14, [r3, #8]
 801046c:	4b1b      	ldr	r3, [pc, #108]	; (80104dc <setSVM_dq+0x330>)
 801046e:	edd3 7a00 	vldr	s15, [r3]
 8010472:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010476:	4b1c      	ldr	r3, [pc, #112]	; (80104e8 <setSVM_dq+0x33c>)
 8010478:	edc3 7a01 	vstr	s15, [r3, #4]
 801047c:	4b1a      	ldr	r3, [pc, #104]	; (80104e8 <setSVM_dq+0x33c>)
 801047e:	ed93 7a01 	vldr	s14, [r3, #4]
 8010482:	4b15      	ldr	r3, [pc, #84]	; (80104d8 <setSVM_dq+0x32c>)
 8010484:	edd3 7a00 	vldr	s15, [r3]
 8010488:	ee77 7a27 	vadd.f32	s15, s14, s15
 801048c:	4b16      	ldr	r3, [pc, #88]	; (80104e8 <setSVM_dq+0x33c>)
 801048e:	edc3 7a00 	vstr	s15, [r3]
 8010492:	e189      	b.n	80107a8 <setSVM_dq+0x5fc>
 8010494:	2000418c 	.word	0x2000418c
 8010498:	20000034 	.word	0x20000034
 801049c:	20004190 	.word	0x20004190
 80104a0:	200041e4 	.word	0x200041e4
 80104a4:	20004198 	.word	0x20004198
 80104a8:	2000419c 	.word	0x2000419c
 80104ac:	00000000 	.word	0x00000000
 80104b0:	200041a0 	.word	0x200041a0
 80104b4:	3f5db22d 	.word	0x3f5db22d
 80104b8:	200041a4 	.word	0x200041a4
 80104bc:	20004194 	.word	0x20004194
 80104c0:	08012c74 	.word	0x08012c74
 80104c4:	200041a8 	.word	0x200041a8
 80104c8:	200041ac 	.word	0x200041ac
 80104cc:	200041b0 	.word	0x200041b0
 80104d0:	200041b4 	.word	0x200041b4
 80104d4:	20000030 	.word	0x20000030
 80104d8:	200041b8 	.word	0x200041b8
 80104dc:	200041bc 	.word	0x200041bc
 80104e0:	3ff00000 	.word	0x3ff00000
 80104e4:	3fe00000 	.word	0x3fe00000
 80104e8:	200041c0 	.word	0x200041c0
	case 1: duty[2] = (1.0 - vect1 - vect2) * 0.5f; 	duty[0] = duty[2] + vect1; 	duty[1] = duty[0] + vect2; 	break;
 80104ec:	4bc3      	ldr	r3, [pc, #780]	; (80107fc <setSVM_dq+0x650>)
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	4618      	mov	r0, r3
 80104f2:	f7f7 ff59 	bl	80083a8 <__aeabi_f2d>
 80104f6:	4603      	mov	r3, r0
 80104f8:	460c      	mov	r4, r1
 80104fa:	461a      	mov	r2, r3
 80104fc:	4623      	mov	r3, r4
 80104fe:	f04f 0000 	mov.w	r0, #0
 8010502:	49bf      	ldr	r1, [pc, #764]	; (8010800 <setSVM_dq+0x654>)
 8010504:	f7f7 fdf0 	bl	80080e8 <__aeabi_dsub>
 8010508:	4603      	mov	r3, r0
 801050a:	460c      	mov	r4, r1
 801050c:	4625      	mov	r5, r4
 801050e:	461c      	mov	r4, r3
 8010510:	4bbc      	ldr	r3, [pc, #752]	; (8010804 <setSVM_dq+0x658>)
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	4618      	mov	r0, r3
 8010516:	f7f7 ff47 	bl	80083a8 <__aeabi_f2d>
 801051a:	4602      	mov	r2, r0
 801051c:	460b      	mov	r3, r1
 801051e:	4620      	mov	r0, r4
 8010520:	4629      	mov	r1, r5
 8010522:	f7f7 fde1 	bl	80080e8 <__aeabi_dsub>
 8010526:	4603      	mov	r3, r0
 8010528:	460c      	mov	r4, r1
 801052a:	4618      	mov	r0, r3
 801052c:	4621      	mov	r1, r4
 801052e:	f04f 0200 	mov.w	r2, #0
 8010532:	4bb5      	ldr	r3, [pc, #724]	; (8010808 <setSVM_dq+0x65c>)
 8010534:	f7f7 ff90 	bl	8008458 <__aeabi_dmul>
 8010538:	4603      	mov	r3, r0
 801053a:	460c      	mov	r4, r1
 801053c:	4618      	mov	r0, r3
 801053e:	4621      	mov	r1, r4
 8010540:	f7f8 fa24 	bl	800898c <__aeabi_d2f>
 8010544:	4602      	mov	r2, r0
 8010546:	4bb1      	ldr	r3, [pc, #708]	; (801080c <setSVM_dq+0x660>)
 8010548:	609a      	str	r2, [r3, #8]
 801054a:	4bb0      	ldr	r3, [pc, #704]	; (801080c <setSVM_dq+0x660>)
 801054c:	ed93 7a02 	vldr	s14, [r3, #8]
 8010550:	4baa      	ldr	r3, [pc, #680]	; (80107fc <setSVM_dq+0x650>)
 8010552:	edd3 7a00 	vldr	s15, [r3]
 8010556:	ee77 7a27 	vadd.f32	s15, s14, s15
 801055a:	4bac      	ldr	r3, [pc, #688]	; (801080c <setSVM_dq+0x660>)
 801055c:	edc3 7a00 	vstr	s15, [r3]
 8010560:	4baa      	ldr	r3, [pc, #680]	; (801080c <setSVM_dq+0x660>)
 8010562:	ed93 7a00 	vldr	s14, [r3]
 8010566:	4ba7      	ldr	r3, [pc, #668]	; (8010804 <setSVM_dq+0x658>)
 8010568:	edd3 7a00 	vldr	s15, [r3]
 801056c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010570:	4ba6      	ldr	r3, [pc, #664]	; (801080c <setSVM_dq+0x660>)
 8010572:	edc3 7a01 	vstr	s15, [r3, #4]
 8010576:	e117      	b.n	80107a8 <setSVM_dq+0x5fc>
	case 2: duty[0] = (1.0 - vect1 - vect2) * 0.5f; 	duty[2] = duty[0] + vect2; 	duty[1] = duty[2] + vect1; 	break;
 8010578:	4ba0      	ldr	r3, [pc, #640]	; (80107fc <setSVM_dq+0x650>)
 801057a:	681b      	ldr	r3, [r3, #0]
 801057c:	4618      	mov	r0, r3
 801057e:	f7f7 ff13 	bl	80083a8 <__aeabi_f2d>
 8010582:	4603      	mov	r3, r0
 8010584:	460c      	mov	r4, r1
 8010586:	461a      	mov	r2, r3
 8010588:	4623      	mov	r3, r4
 801058a:	f04f 0000 	mov.w	r0, #0
 801058e:	499c      	ldr	r1, [pc, #624]	; (8010800 <setSVM_dq+0x654>)
 8010590:	f7f7 fdaa 	bl	80080e8 <__aeabi_dsub>
 8010594:	4603      	mov	r3, r0
 8010596:	460c      	mov	r4, r1
 8010598:	4625      	mov	r5, r4
 801059a:	461c      	mov	r4, r3
 801059c:	4b99      	ldr	r3, [pc, #612]	; (8010804 <setSVM_dq+0x658>)
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	4618      	mov	r0, r3
 80105a2:	f7f7 ff01 	bl	80083a8 <__aeabi_f2d>
 80105a6:	4602      	mov	r2, r0
 80105a8:	460b      	mov	r3, r1
 80105aa:	4620      	mov	r0, r4
 80105ac:	4629      	mov	r1, r5
 80105ae:	f7f7 fd9b 	bl	80080e8 <__aeabi_dsub>
 80105b2:	4603      	mov	r3, r0
 80105b4:	460c      	mov	r4, r1
 80105b6:	4618      	mov	r0, r3
 80105b8:	4621      	mov	r1, r4
 80105ba:	f04f 0200 	mov.w	r2, #0
 80105be:	4b92      	ldr	r3, [pc, #584]	; (8010808 <setSVM_dq+0x65c>)
 80105c0:	f7f7 ff4a 	bl	8008458 <__aeabi_dmul>
 80105c4:	4603      	mov	r3, r0
 80105c6:	460c      	mov	r4, r1
 80105c8:	4618      	mov	r0, r3
 80105ca:	4621      	mov	r1, r4
 80105cc:	f7f8 f9de 	bl	800898c <__aeabi_d2f>
 80105d0:	4602      	mov	r2, r0
 80105d2:	4b8e      	ldr	r3, [pc, #568]	; (801080c <setSVM_dq+0x660>)
 80105d4:	601a      	str	r2, [r3, #0]
 80105d6:	4b8d      	ldr	r3, [pc, #564]	; (801080c <setSVM_dq+0x660>)
 80105d8:	ed93 7a00 	vldr	s14, [r3]
 80105dc:	4b89      	ldr	r3, [pc, #548]	; (8010804 <setSVM_dq+0x658>)
 80105de:	edd3 7a00 	vldr	s15, [r3]
 80105e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80105e6:	4b89      	ldr	r3, [pc, #548]	; (801080c <setSVM_dq+0x660>)
 80105e8:	edc3 7a02 	vstr	s15, [r3, #8]
 80105ec:	4b87      	ldr	r3, [pc, #540]	; (801080c <setSVM_dq+0x660>)
 80105ee:	ed93 7a02 	vldr	s14, [r3, #8]
 80105f2:	4b82      	ldr	r3, [pc, #520]	; (80107fc <setSVM_dq+0x650>)
 80105f4:	edd3 7a00 	vldr	s15, [r3]
 80105f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80105fc:	4b83      	ldr	r3, [pc, #524]	; (801080c <setSVM_dq+0x660>)
 80105fe:	edc3 7a01 	vstr	s15, [r3, #4]
 8010602:	e0d1      	b.n	80107a8 <setSVM_dq+0x5fc>
	case 3: duty[0] = (1.0 - vect1 - vect2) * 0.5f; 	duty[1] = duty[0] + vect1; 	duty[2] = duty[1] + vect2; 	break;
 8010604:	4b7d      	ldr	r3, [pc, #500]	; (80107fc <setSVM_dq+0x650>)
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	4618      	mov	r0, r3
 801060a:	f7f7 fecd 	bl	80083a8 <__aeabi_f2d>
 801060e:	4603      	mov	r3, r0
 8010610:	460c      	mov	r4, r1
 8010612:	461a      	mov	r2, r3
 8010614:	4623      	mov	r3, r4
 8010616:	f04f 0000 	mov.w	r0, #0
 801061a:	4979      	ldr	r1, [pc, #484]	; (8010800 <setSVM_dq+0x654>)
 801061c:	f7f7 fd64 	bl	80080e8 <__aeabi_dsub>
 8010620:	4603      	mov	r3, r0
 8010622:	460c      	mov	r4, r1
 8010624:	4625      	mov	r5, r4
 8010626:	461c      	mov	r4, r3
 8010628:	4b76      	ldr	r3, [pc, #472]	; (8010804 <setSVM_dq+0x658>)
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	4618      	mov	r0, r3
 801062e:	f7f7 febb 	bl	80083a8 <__aeabi_f2d>
 8010632:	4602      	mov	r2, r0
 8010634:	460b      	mov	r3, r1
 8010636:	4620      	mov	r0, r4
 8010638:	4629      	mov	r1, r5
 801063a:	f7f7 fd55 	bl	80080e8 <__aeabi_dsub>
 801063e:	4603      	mov	r3, r0
 8010640:	460c      	mov	r4, r1
 8010642:	4618      	mov	r0, r3
 8010644:	4621      	mov	r1, r4
 8010646:	f04f 0200 	mov.w	r2, #0
 801064a:	4b6f      	ldr	r3, [pc, #444]	; (8010808 <setSVM_dq+0x65c>)
 801064c:	f7f7 ff04 	bl	8008458 <__aeabi_dmul>
 8010650:	4603      	mov	r3, r0
 8010652:	460c      	mov	r4, r1
 8010654:	4618      	mov	r0, r3
 8010656:	4621      	mov	r1, r4
 8010658:	f7f8 f998 	bl	800898c <__aeabi_d2f>
 801065c:	4602      	mov	r2, r0
 801065e:	4b6b      	ldr	r3, [pc, #428]	; (801080c <setSVM_dq+0x660>)
 8010660:	601a      	str	r2, [r3, #0]
 8010662:	4b6a      	ldr	r3, [pc, #424]	; (801080c <setSVM_dq+0x660>)
 8010664:	ed93 7a00 	vldr	s14, [r3]
 8010668:	4b64      	ldr	r3, [pc, #400]	; (80107fc <setSVM_dq+0x650>)
 801066a:	edd3 7a00 	vldr	s15, [r3]
 801066e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010672:	4b66      	ldr	r3, [pc, #408]	; (801080c <setSVM_dq+0x660>)
 8010674:	edc3 7a01 	vstr	s15, [r3, #4]
 8010678:	4b64      	ldr	r3, [pc, #400]	; (801080c <setSVM_dq+0x660>)
 801067a:	ed93 7a01 	vldr	s14, [r3, #4]
 801067e:	4b61      	ldr	r3, [pc, #388]	; (8010804 <setSVM_dq+0x658>)
 8010680:	edd3 7a00 	vldr	s15, [r3]
 8010684:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010688:	4b60      	ldr	r3, [pc, #384]	; (801080c <setSVM_dq+0x660>)
 801068a:	edc3 7a02 	vstr	s15, [r3, #8]
 801068e:	e08b      	b.n	80107a8 <setSVM_dq+0x5fc>
	case 4: duty[1] = (1.0 - vect1 - vect2) * 0.5f; 	duty[0] = duty[1] + vect2; 	duty[2] = duty[0] + vect1; 	break;
 8010690:	4b5a      	ldr	r3, [pc, #360]	; (80107fc <setSVM_dq+0x650>)
 8010692:	681b      	ldr	r3, [r3, #0]
 8010694:	4618      	mov	r0, r3
 8010696:	f7f7 fe87 	bl	80083a8 <__aeabi_f2d>
 801069a:	4603      	mov	r3, r0
 801069c:	460c      	mov	r4, r1
 801069e:	461a      	mov	r2, r3
 80106a0:	4623      	mov	r3, r4
 80106a2:	f04f 0000 	mov.w	r0, #0
 80106a6:	4956      	ldr	r1, [pc, #344]	; (8010800 <setSVM_dq+0x654>)
 80106a8:	f7f7 fd1e 	bl	80080e8 <__aeabi_dsub>
 80106ac:	4603      	mov	r3, r0
 80106ae:	460c      	mov	r4, r1
 80106b0:	4625      	mov	r5, r4
 80106b2:	461c      	mov	r4, r3
 80106b4:	4b53      	ldr	r3, [pc, #332]	; (8010804 <setSVM_dq+0x658>)
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	4618      	mov	r0, r3
 80106ba:	f7f7 fe75 	bl	80083a8 <__aeabi_f2d>
 80106be:	4602      	mov	r2, r0
 80106c0:	460b      	mov	r3, r1
 80106c2:	4620      	mov	r0, r4
 80106c4:	4629      	mov	r1, r5
 80106c6:	f7f7 fd0f 	bl	80080e8 <__aeabi_dsub>
 80106ca:	4603      	mov	r3, r0
 80106cc:	460c      	mov	r4, r1
 80106ce:	4618      	mov	r0, r3
 80106d0:	4621      	mov	r1, r4
 80106d2:	f04f 0200 	mov.w	r2, #0
 80106d6:	4b4c      	ldr	r3, [pc, #304]	; (8010808 <setSVM_dq+0x65c>)
 80106d8:	f7f7 febe 	bl	8008458 <__aeabi_dmul>
 80106dc:	4603      	mov	r3, r0
 80106de:	460c      	mov	r4, r1
 80106e0:	4618      	mov	r0, r3
 80106e2:	4621      	mov	r1, r4
 80106e4:	f7f8 f952 	bl	800898c <__aeabi_d2f>
 80106e8:	4602      	mov	r2, r0
 80106ea:	4b48      	ldr	r3, [pc, #288]	; (801080c <setSVM_dq+0x660>)
 80106ec:	605a      	str	r2, [r3, #4]
 80106ee:	4b47      	ldr	r3, [pc, #284]	; (801080c <setSVM_dq+0x660>)
 80106f0:	ed93 7a01 	vldr	s14, [r3, #4]
 80106f4:	4b43      	ldr	r3, [pc, #268]	; (8010804 <setSVM_dq+0x658>)
 80106f6:	edd3 7a00 	vldr	s15, [r3]
 80106fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80106fe:	4b43      	ldr	r3, [pc, #268]	; (801080c <setSVM_dq+0x660>)
 8010700:	edc3 7a00 	vstr	s15, [r3]
 8010704:	4b41      	ldr	r3, [pc, #260]	; (801080c <setSVM_dq+0x660>)
 8010706:	ed93 7a00 	vldr	s14, [r3]
 801070a:	4b3c      	ldr	r3, [pc, #240]	; (80107fc <setSVM_dq+0x650>)
 801070c:	edd3 7a00 	vldr	s15, [r3]
 8010710:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010714:	4b3d      	ldr	r3, [pc, #244]	; (801080c <setSVM_dq+0x660>)
 8010716:	edc3 7a02 	vstr	s15, [r3, #8]
 801071a:	e045      	b.n	80107a8 <setSVM_dq+0x5fc>
	case 5: duty[1] = (1.0 - vect1 - vect2) * 0.5f; 	duty[2] = duty[1] + vect1; 	duty[0] = duty[2] + vect2; 	break;
 801071c:	4b37      	ldr	r3, [pc, #220]	; (80107fc <setSVM_dq+0x650>)
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	4618      	mov	r0, r3
 8010722:	f7f7 fe41 	bl	80083a8 <__aeabi_f2d>
 8010726:	4603      	mov	r3, r0
 8010728:	460c      	mov	r4, r1
 801072a:	461a      	mov	r2, r3
 801072c:	4623      	mov	r3, r4
 801072e:	f04f 0000 	mov.w	r0, #0
 8010732:	4933      	ldr	r1, [pc, #204]	; (8010800 <setSVM_dq+0x654>)
 8010734:	f7f7 fcd8 	bl	80080e8 <__aeabi_dsub>
 8010738:	4603      	mov	r3, r0
 801073a:	460c      	mov	r4, r1
 801073c:	4625      	mov	r5, r4
 801073e:	461c      	mov	r4, r3
 8010740:	4b30      	ldr	r3, [pc, #192]	; (8010804 <setSVM_dq+0x658>)
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	4618      	mov	r0, r3
 8010746:	f7f7 fe2f 	bl	80083a8 <__aeabi_f2d>
 801074a:	4602      	mov	r2, r0
 801074c:	460b      	mov	r3, r1
 801074e:	4620      	mov	r0, r4
 8010750:	4629      	mov	r1, r5
 8010752:	f7f7 fcc9 	bl	80080e8 <__aeabi_dsub>
 8010756:	4603      	mov	r3, r0
 8010758:	460c      	mov	r4, r1
 801075a:	4618      	mov	r0, r3
 801075c:	4621      	mov	r1, r4
 801075e:	f04f 0200 	mov.w	r2, #0
 8010762:	4b29      	ldr	r3, [pc, #164]	; (8010808 <setSVM_dq+0x65c>)
 8010764:	f7f7 fe78 	bl	8008458 <__aeabi_dmul>
 8010768:	4603      	mov	r3, r0
 801076a:	460c      	mov	r4, r1
 801076c:	4618      	mov	r0, r3
 801076e:	4621      	mov	r1, r4
 8010770:	f7f8 f90c 	bl	800898c <__aeabi_d2f>
 8010774:	4602      	mov	r2, r0
 8010776:	4b25      	ldr	r3, [pc, #148]	; (801080c <setSVM_dq+0x660>)
 8010778:	605a      	str	r2, [r3, #4]
 801077a:	4b24      	ldr	r3, [pc, #144]	; (801080c <setSVM_dq+0x660>)
 801077c:	ed93 7a01 	vldr	s14, [r3, #4]
 8010780:	4b1e      	ldr	r3, [pc, #120]	; (80107fc <setSVM_dq+0x650>)
 8010782:	edd3 7a00 	vldr	s15, [r3]
 8010786:	ee77 7a27 	vadd.f32	s15, s14, s15
 801078a:	4b20      	ldr	r3, [pc, #128]	; (801080c <setSVM_dq+0x660>)
 801078c:	edc3 7a02 	vstr	s15, [r3, #8]
 8010790:	4b1e      	ldr	r3, [pc, #120]	; (801080c <setSVM_dq+0x660>)
 8010792:	ed93 7a02 	vldr	s14, [r3, #8]
 8010796:	4b1b      	ldr	r3, [pc, #108]	; (8010804 <setSVM_dq+0x658>)
 8010798:	edd3 7a00 	vldr	s15, [r3]
 801079c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80107a0:	4b1a      	ldr	r3, [pc, #104]	; (801080c <setSVM_dq+0x660>)
 80107a2:	edc3 7a00 	vstr	s15, [r3]
 80107a6:	bf00      	nop
	}


	if(duty[0] < -1.0f) duty[0] = -1.0f; else if (duty[0] > 1.0f) duty[0] = 1.0f;
 80107a8:	4b18      	ldr	r3, [pc, #96]	; (801080c <setSVM_dq+0x660>)
 80107aa:	edd3 7a00 	vldr	s15, [r3]
 80107ae:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80107b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80107b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107ba:	d503      	bpl.n	80107c4 <setSVM_dq+0x618>
 80107bc:	4b13      	ldr	r3, [pc, #76]	; (801080c <setSVM_dq+0x660>)
 80107be:	4a14      	ldr	r2, [pc, #80]	; (8010810 <setSVM_dq+0x664>)
 80107c0:	601a      	str	r2, [r3, #0]
 80107c2:	e00d      	b.n	80107e0 <setSVM_dq+0x634>
 80107c4:	4b11      	ldr	r3, [pc, #68]	; (801080c <setSVM_dq+0x660>)
 80107c6:	edd3 7a00 	vldr	s15, [r3]
 80107ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80107ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80107d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107d6:	dd03      	ble.n	80107e0 <setSVM_dq+0x634>
 80107d8:	4b0c      	ldr	r3, [pc, #48]	; (801080c <setSVM_dq+0x660>)
 80107da:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80107de:	601a      	str	r2, [r3, #0]
	if(duty[1] < -1.0f) duty[1] = -1.0f; else if (duty[1] > 1.0f) duty[1] = 1.0f;
 80107e0:	4b0a      	ldr	r3, [pc, #40]	; (801080c <setSVM_dq+0x660>)
 80107e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80107e6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80107ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80107ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107f2:	d50f      	bpl.n	8010814 <setSVM_dq+0x668>
 80107f4:	4b05      	ldr	r3, [pc, #20]	; (801080c <setSVM_dq+0x660>)
 80107f6:	4a06      	ldr	r2, [pc, #24]	; (8010810 <setSVM_dq+0x664>)
 80107f8:	605a      	str	r2, [r3, #4]
 80107fa:	e019      	b.n	8010830 <setSVM_dq+0x684>
 80107fc:	200041b8 	.word	0x200041b8
 8010800:	3ff00000 	.word	0x3ff00000
 8010804:	200041bc 	.word	0x200041bc
 8010808:	3fe00000 	.word	0x3fe00000
 801080c:	200041c0 	.word	0x200041c0
 8010810:	bf800000 	.word	0xbf800000
 8010814:	4b35      	ldr	r3, [pc, #212]	; (80108ec <setSVM_dq+0x740>)
 8010816:	edd3 7a01 	vldr	s15, [r3, #4]
 801081a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801081e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010826:	dd03      	ble.n	8010830 <setSVM_dq+0x684>
 8010828:	4b30      	ldr	r3, [pc, #192]	; (80108ec <setSVM_dq+0x740>)
 801082a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801082e:	605a      	str	r2, [r3, #4]
	if(duty[2] < -1.0f) duty[2] = -1.0f; else if (duty[2] > 1.0f) duty[2] = 1.0f;
 8010830:	4b2e      	ldr	r3, [pc, #184]	; (80108ec <setSVM_dq+0x740>)
 8010832:	edd3 7a02 	vldr	s15, [r3, #8]
 8010836:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801083a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801083e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010842:	d503      	bpl.n	801084c <setSVM_dq+0x6a0>
 8010844:	4b29      	ldr	r3, [pc, #164]	; (80108ec <setSVM_dq+0x740>)
 8010846:	4a2a      	ldr	r2, [pc, #168]	; (80108f0 <setSVM_dq+0x744>)
 8010848:	609a      	str	r2, [r3, #8]
 801084a:	e00d      	b.n	8010868 <setSVM_dq+0x6bc>
 801084c:	4b27      	ldr	r3, [pc, #156]	; (80108ec <setSVM_dq+0x740>)
 801084e:	edd3 7a02 	vldr	s15, [r3, #8]
 8010852:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010856:	eef4 7ac7 	vcmpe.f32	s15, s14
 801085a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801085e:	dd03      	ble.n	8010868 <setSVM_dq+0x6bc>
 8010860:	4b22      	ldr	r3, [pc, #136]	; (80108ec <setSVM_dq+0x740>)
 8010862:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8010866:	609a      	str	r2, [r3, #8]

	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, PWM_RESOL * (1.0f - (amp_u = duty[0])));
 8010868:	4b20      	ldr	r3, [pc, #128]	; (80108ec <setSVM_dq+0x740>)
 801086a:	edd3 7a00 	vldr	s15, [r3]
 801086e:	4b21      	ldr	r3, [pc, #132]	; (80108f4 <setSVM_dq+0x748>)
 8010870:	edc3 7a00 	vstr	s15, [r3]
 8010874:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010878:	ee77 7a67 	vsub.f32	s15, s14, s15
 801087c:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80108f8 <setSVM_dq+0x74c>
 8010880:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010884:	4b1d      	ldr	r3, [pc, #116]	; (80108fc <setSVM_dq+0x750>)
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801088c:	ee17 2a90 	vmov	r2, s15
 8010890:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_2, PWM_RESOL * (1.0f - (amp_v = duty[1])));
 8010892:	4b16      	ldr	r3, [pc, #88]	; (80108ec <setSVM_dq+0x740>)
 8010894:	edd3 7a01 	vldr	s15, [r3, #4]
 8010898:	4b19      	ldr	r3, [pc, #100]	; (8010900 <setSVM_dq+0x754>)
 801089a:	edc3 7a00 	vstr	s15, [r3]
 801089e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80108a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80108a6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80108f8 <setSVM_dq+0x74c>
 80108aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80108ae:	4b13      	ldr	r3, [pc, #76]	; (80108fc <setSVM_dq+0x750>)
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80108b6:	ee17 2a90 	vmov	r2, s15
 80108ba:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_3, PWM_RESOL * (1.0f - (amp_w = duty[2])));
 80108bc:	4b0b      	ldr	r3, [pc, #44]	; (80108ec <setSVM_dq+0x740>)
 80108be:	edd3 7a02 	vldr	s15, [r3, #8]
 80108c2:	4b10      	ldr	r3, [pc, #64]	; (8010904 <setSVM_dq+0x758>)
 80108c4:	edc3 7a00 	vstr	s15, [r3]
 80108c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80108cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80108d0:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80108f8 <setSVM_dq+0x74c>
 80108d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80108d8:	4b08      	ldr	r3, [pc, #32]	; (80108fc <setSVM_dq+0x750>)
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80108e0:	ee17 2a90 	vmov	r2, s15
 80108e4:	63da      	str	r2, [r3, #60]	; 0x3c


	return;
 80108e6:	bf00      	nop
}
 80108e8:	bdb0      	pop	{r4, r5, r7, pc}
 80108ea:	bf00      	nop
 80108ec:	200041c0 	.word	0x200041c0
 80108f0:	bf800000 	.word	0xbf800000
 80108f4:	200041f0 	.word	0x200041f0
 80108f8:	45fa0000 	.word	0x45fa0000
 80108fc:	2000458c 	.word	0x2000458c
 8010900:	200041f4 	.word	0x200041f4
 8010904:	200041f8 	.word	0x200041f8

08010908 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8010908:	b580      	push	{r7, lr}
 801090a:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 801090c:	4b18      	ldr	r3, [pc, #96]	; (8010970 <MX_SPI2_Init+0x68>)
 801090e:	4a19      	ldr	r2, [pc, #100]	; (8010974 <MX_SPI2_Init+0x6c>)
 8010910:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8010912:	4b17      	ldr	r3, [pc, #92]	; (8010970 <MX_SPI2_Init+0x68>)
 8010914:	f44f 7282 	mov.w	r2, #260	; 0x104
 8010918:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 801091a:	4b15      	ldr	r3, [pc, #84]	; (8010970 <MX_SPI2_Init+0x68>)
 801091c:	2200      	movs	r2, #0
 801091e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8010920:	4b13      	ldr	r3, [pc, #76]	; (8010970 <MX_SPI2_Init+0x68>)
 8010922:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010926:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8010928:	4b11      	ldr	r3, [pc, #68]	; (8010970 <MX_SPI2_Init+0x68>)
 801092a:	2200      	movs	r2, #0
 801092c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 801092e:	4b10      	ldr	r3, [pc, #64]	; (8010970 <MX_SPI2_Init+0x68>)
 8010930:	2201      	movs	r2, #1
 8010932:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8010934:	4b0e      	ldr	r3, [pc, #56]	; (8010970 <MX_SPI2_Init+0x68>)
 8010936:	f44f 7200 	mov.w	r2, #512	; 0x200
 801093a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 801093c:	4b0c      	ldr	r3, [pc, #48]	; (8010970 <MX_SPI2_Init+0x68>)
 801093e:	2218      	movs	r2, #24
 8010940:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8010942:	4b0b      	ldr	r3, [pc, #44]	; (8010970 <MX_SPI2_Init+0x68>)
 8010944:	2200      	movs	r2, #0
 8010946:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8010948:	4b09      	ldr	r3, [pc, #36]	; (8010970 <MX_SPI2_Init+0x68>)
 801094a:	2200      	movs	r2, #0
 801094c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801094e:	4b08      	ldr	r3, [pc, #32]	; (8010970 <MX_SPI2_Init+0x68>)
 8010950:	2200      	movs	r2, #0
 8010952:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8010954:	4b06      	ldr	r3, [pc, #24]	; (8010970 <MX_SPI2_Init+0x68>)
 8010956:	220a      	movs	r2, #10
 8010958:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 801095a:	4805      	ldr	r0, [pc, #20]	; (8010970 <MX_SPI2_Init+0x68>)
 801095c:	f7fb fa5e 	bl	800be1c <HAL_SPI_Init>
 8010960:	4603      	mov	r3, r0
 8010962:	2b00      	cmp	r3, #0
 8010964:	d001      	beq.n	801096a <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8010966:	f7ff fc19 	bl	801019c <Error_Handler>
  }

}
 801096a:	bf00      	nop
 801096c:	bd80      	pop	{r7, pc}
 801096e:	bf00      	nop
 8010970:	200044d8 	.word	0x200044d8
 8010974:	40003800 	.word	0x40003800

08010978 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8010978:	b580      	push	{r7, lr}
 801097a:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 801097c:	4b17      	ldr	r3, [pc, #92]	; (80109dc <MX_SPI3_Init+0x64>)
 801097e:	4a18      	ldr	r2, [pc, #96]	; (80109e0 <MX_SPI3_Init+0x68>)
 8010980:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8010982:	4b16      	ldr	r3, [pc, #88]	; (80109dc <MX_SPI3_Init+0x64>)
 8010984:	f44f 7282 	mov.w	r2, #260	; 0x104
 8010988:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 801098a:	4b14      	ldr	r3, [pc, #80]	; (80109dc <MX_SPI3_Init+0x64>)
 801098c:	2200      	movs	r2, #0
 801098e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8010990:	4b12      	ldr	r3, [pc, #72]	; (80109dc <MX_SPI3_Init+0x64>)
 8010992:	2200      	movs	r2, #0
 8010994:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8010996:	4b11      	ldr	r3, [pc, #68]	; (80109dc <MX_SPI3_Init+0x64>)
 8010998:	2200      	movs	r2, #0
 801099a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 801099c:	4b0f      	ldr	r3, [pc, #60]	; (80109dc <MX_SPI3_Init+0x64>)
 801099e:	2201      	movs	r2, #1
 80109a0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80109a2:	4b0e      	ldr	r3, [pc, #56]	; (80109dc <MX_SPI3_Init+0x64>)
 80109a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80109a8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80109aa:	4b0c      	ldr	r3, [pc, #48]	; (80109dc <MX_SPI3_Init+0x64>)
 80109ac:	2220      	movs	r2, #32
 80109ae:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80109b0:	4b0a      	ldr	r3, [pc, #40]	; (80109dc <MX_SPI3_Init+0x64>)
 80109b2:	2200      	movs	r2, #0
 80109b4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80109b6:	4b09      	ldr	r3, [pc, #36]	; (80109dc <MX_SPI3_Init+0x64>)
 80109b8:	2200      	movs	r2, #0
 80109ba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80109bc:	4b07      	ldr	r3, [pc, #28]	; (80109dc <MX_SPI3_Init+0x64>)
 80109be:	2200      	movs	r2, #0
 80109c0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80109c2:	4b06      	ldr	r3, [pc, #24]	; (80109dc <MX_SPI3_Init+0x64>)
 80109c4:	220a      	movs	r2, #10
 80109c6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80109c8:	4804      	ldr	r0, [pc, #16]	; (80109dc <MX_SPI3_Init+0x64>)
 80109ca:	f7fb fa27 	bl	800be1c <HAL_SPI_Init>
 80109ce:	4603      	mov	r3, r0
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d001      	beq.n	80109d8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80109d4:	f7ff fbe2 	bl	801019c <Error_Handler>
  }

}
 80109d8:	bf00      	nop
 80109da:	bd80      	pop	{r7, pc}
 80109dc:	20004530 	.word	0x20004530
 80109e0:	40003c00 	.word	0x40003c00

080109e4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80109e4:	b580      	push	{r7, lr}
 80109e6:	b08e      	sub	sp, #56	; 0x38
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80109ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80109f0:	2200      	movs	r2, #0
 80109f2:	601a      	str	r2, [r3, #0]
 80109f4:	605a      	str	r2, [r3, #4]
 80109f6:	609a      	str	r2, [r3, #8]
 80109f8:	60da      	str	r2, [r3, #12]
 80109fa:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	4a5d      	ldr	r2, [pc, #372]	; (8010b78 <HAL_SPI_MspInit+0x194>)
 8010a02:	4293      	cmp	r3, r2
 8010a04:	d163      	bne.n	8010ace <HAL_SPI_MspInit+0xea>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8010a06:	2300      	movs	r3, #0
 8010a08:	623b      	str	r3, [r7, #32]
 8010a0a:	4b5c      	ldr	r3, [pc, #368]	; (8010b7c <HAL_SPI_MspInit+0x198>)
 8010a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a0e:	4a5b      	ldr	r2, [pc, #364]	; (8010b7c <HAL_SPI_MspInit+0x198>)
 8010a10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8010a14:	6413      	str	r3, [r2, #64]	; 0x40
 8010a16:	4b59      	ldr	r3, [pc, #356]	; (8010b7c <HAL_SPI_MspInit+0x198>)
 8010a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010a1e:	623b      	str	r3, [r7, #32]
 8010a20:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010a22:	2300      	movs	r3, #0
 8010a24:	61fb      	str	r3, [r7, #28]
 8010a26:	4b55      	ldr	r3, [pc, #340]	; (8010b7c <HAL_SPI_MspInit+0x198>)
 8010a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a2a:	4a54      	ldr	r2, [pc, #336]	; (8010b7c <HAL_SPI_MspInit+0x198>)
 8010a2c:	f043 0304 	orr.w	r3, r3, #4
 8010a30:	6313      	str	r3, [r2, #48]	; 0x30
 8010a32:	4b52      	ldr	r3, [pc, #328]	; (8010b7c <HAL_SPI_MspInit+0x198>)
 8010a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a36:	f003 0304 	and.w	r3, r3, #4
 8010a3a:	61fb      	str	r3, [r7, #28]
 8010a3c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010a3e:	2300      	movs	r3, #0
 8010a40:	61bb      	str	r3, [r7, #24]
 8010a42:	4b4e      	ldr	r3, [pc, #312]	; (8010b7c <HAL_SPI_MspInit+0x198>)
 8010a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a46:	4a4d      	ldr	r2, [pc, #308]	; (8010b7c <HAL_SPI_MspInit+0x198>)
 8010a48:	f043 0302 	orr.w	r3, r3, #2
 8010a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8010a4e:	4b4b      	ldr	r3, [pc, #300]	; (8010b7c <HAL_SPI_MspInit+0x198>)
 8010a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a52:	f003 0302 	and.w	r3, r3, #2
 8010a56:	61bb      	str	r3, [r7, #24]
 8010a58:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration    
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8010a5a:	2302      	movs	r3, #2
 8010a5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010a5e:	2302      	movs	r3, #2
 8010a60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010a62:	2300      	movs	r3, #0
 8010a64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010a66:	2303      	movs	r3, #3
 8010a68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8010a6a:	2307      	movs	r3, #7
 8010a6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010a6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010a72:	4619      	mov	r1, r3
 8010a74:	4842      	ldr	r0, [pc, #264]	; (8010b80 <HAL_SPI_MspInit+0x19c>)
 8010a76:	f7fa fae3 	bl	800b040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8010a7a:	2304      	movs	r3, #4
 8010a7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010a7e:	2302      	movs	r3, #2
 8010a80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010a82:	2300      	movs	r3, #0
 8010a84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010a86:	2303      	movs	r3, #3
 8010a88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8010a8a:	2305      	movs	r3, #5
 8010a8c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010a8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010a92:	4619      	mov	r1, r3
 8010a94:	483a      	ldr	r0, [pc, #232]	; (8010b80 <HAL_SPI_MspInit+0x19c>)
 8010a96:	f7fa fad3 	bl	800b040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8010a9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010a9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010aa0:	2302      	movs	r3, #2
 8010aa2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010aa4:	2300      	movs	r3, #0
 8010aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010aa8:	2303      	movs	r3, #3
 8010aaa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8010aac:	2305      	movs	r3, #5
 8010aae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010ab0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010ab4:	4619      	mov	r1, r3
 8010ab6:	4833      	ldr	r0, [pc, #204]	; (8010b84 <HAL_SPI_MspInit+0x1a0>)
 8010ab8:	f7fa fac2 	bl	800b040 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8010abc:	2200      	movs	r2, #0
 8010abe:	2100      	movs	r1, #0
 8010ac0:	2024      	movs	r0, #36	; 0x24
 8010ac2:	f7f9 fc0a 	bl	800a2da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8010ac6:	2024      	movs	r0, #36	; 0x24
 8010ac8:	f7f9 fc23 	bl	800a312 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8010acc:	e04f      	b.n	8010b6e <HAL_SPI_MspInit+0x18a>
  else if(spiHandle->Instance==SPI3)
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	4a2d      	ldr	r2, [pc, #180]	; (8010b88 <HAL_SPI_MspInit+0x1a4>)
 8010ad4:	4293      	cmp	r3, r2
 8010ad6:	d14a      	bne.n	8010b6e <HAL_SPI_MspInit+0x18a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8010ad8:	2300      	movs	r3, #0
 8010ada:	617b      	str	r3, [r7, #20]
 8010adc:	4b27      	ldr	r3, [pc, #156]	; (8010b7c <HAL_SPI_MspInit+0x198>)
 8010ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ae0:	4a26      	ldr	r2, [pc, #152]	; (8010b7c <HAL_SPI_MspInit+0x198>)
 8010ae2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010ae6:	6413      	str	r3, [r2, #64]	; 0x40
 8010ae8:	4b24      	ldr	r3, [pc, #144]	; (8010b7c <HAL_SPI_MspInit+0x198>)
 8010aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010aec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010af0:	617b      	str	r3, [r7, #20]
 8010af2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8010af4:	2300      	movs	r3, #0
 8010af6:	613b      	str	r3, [r7, #16]
 8010af8:	4b20      	ldr	r3, [pc, #128]	; (8010b7c <HAL_SPI_MspInit+0x198>)
 8010afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010afc:	4a1f      	ldr	r2, [pc, #124]	; (8010b7c <HAL_SPI_MspInit+0x198>)
 8010afe:	f043 0302 	orr.w	r3, r3, #2
 8010b02:	6313      	str	r3, [r2, #48]	; 0x30
 8010b04:	4b1d      	ldr	r3, [pc, #116]	; (8010b7c <HAL_SPI_MspInit+0x198>)
 8010b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b08:	f003 0302 	and.w	r3, r3, #2
 8010b0c:	613b      	str	r3, [r7, #16]
 8010b0e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8010b10:	2300      	movs	r3, #0
 8010b12:	60fb      	str	r3, [r7, #12]
 8010b14:	4b19      	ldr	r3, [pc, #100]	; (8010b7c <HAL_SPI_MspInit+0x198>)
 8010b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b18:	4a18      	ldr	r2, [pc, #96]	; (8010b7c <HAL_SPI_MspInit+0x198>)
 8010b1a:	f043 0304 	orr.w	r3, r3, #4
 8010b1e:	6313      	str	r3, [r2, #48]	; 0x30
 8010b20:	4b16      	ldr	r3, [pc, #88]	; (8010b7c <HAL_SPI_MspInit+0x198>)
 8010b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b24:	f003 0304 	and.w	r3, r3, #4
 8010b28:	60fb      	str	r3, [r7, #12]
 8010b2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8010b2c:	2304      	movs	r3, #4
 8010b2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010b30:	2302      	movs	r3, #2
 8010b32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010b34:	2300      	movs	r3, #0
 8010b36:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010b38:	2303      	movs	r3, #3
 8010b3a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8010b3c:	2307      	movs	r3, #7
 8010b3e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010b40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010b44:	4619      	mov	r1, r3
 8010b46:	480f      	ldr	r0, [pc, #60]	; (8010b84 <HAL_SPI_MspInit+0x1a0>)
 8010b48:	f7fa fa7a 	bl	800b040 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8010b4c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8010b50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010b52:	2302      	movs	r3, #2
 8010b54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010b56:	2300      	movs	r3, #0
 8010b58:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010b5a:	2303      	movs	r3, #3
 8010b5c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8010b5e:	2306      	movs	r3, #6
 8010b60:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8010b62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010b66:	4619      	mov	r1, r3
 8010b68:	4805      	ldr	r0, [pc, #20]	; (8010b80 <HAL_SPI_MspInit+0x19c>)
 8010b6a:	f7fa fa69 	bl	800b040 <HAL_GPIO_Init>
}
 8010b6e:	bf00      	nop
 8010b70:	3738      	adds	r7, #56	; 0x38
 8010b72:	46bd      	mov	sp, r7
 8010b74:	bd80      	pop	{r7, pc}
 8010b76:	bf00      	nop
 8010b78:	40003800 	.word	0x40003800
 8010b7c:	40023800 	.word	0x40023800
 8010b80:	40020800 	.word	0x40020800
 8010b84:	40020400 	.word	0x40020400
 8010b88:	40003c00 	.word	0x40003c00

08010b8c <SPI_Init>:
} 

/* USER CODE BEGIN 1 */

void SPI_Init()
{
 8010b8c:	b480      	push	{r7}
 8010b8e:	af00      	add	r7, sp, #0


	  // SPI Interrupt Setting
	  __HAL_SPI_ENABLE_IT(&hspi2, SPI_IT_TXE | SPI_IT_RXNE);
 8010b90:	4b06      	ldr	r3, [pc, #24]	; (8010bac <SPI_Init+0x20>)
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	685a      	ldr	r2, [r3, #4]
 8010b96:	4b05      	ldr	r3, [pc, #20]	; (8010bac <SPI_Init+0x20>)
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8010b9e:	605a      	str	r2, [r3, #4]

}
 8010ba0:	bf00      	nop
 8010ba2:	46bd      	mov	sp, r7
 8010ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ba8:	4770      	bx	lr
 8010baa:	bf00      	nop
 8010bac:	200044d8 	.word	0x200044d8

08010bb0 <setZeroEncoder>:



void setZeroEncoder(uint8_t exe)
{
 8010bb0:	b590      	push	{r4, r7, lr}
 8010bb2:	b08b      	sub	sp, #44	; 0x2c
 8010bb4:	af00      	add	r7, sp, #0
 8010bb6:	4603      	mov	r3, r0
 8010bb8:	71fb      	strb	r3, [r7, #7]

	const int32_t forced_commute_steps = 2000;
 8010bba:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8010bbe:	627b      	str	r3, [r7, #36]	; 0x24



	volatile uint32_t forced_commute_count = 0;
 8010bc0:	2300      	movs	r3, #0
 8010bc2:	61bb      	str	r3, [r7, #24]

	const float forced_I_gamma_ref = 10.0f;
 8010bc4:	4ba4      	ldr	r3, [pc, #656]	; (8010e58 <setZeroEncoder+0x2a8>)
 8010bc6:	623b      	str	r3, [r7, #32]
	const float forced_I_delta_ref = 0.0f;
 8010bc8:	f04f 0300 	mov.w	r3, #0
 8010bcc:	61fb      	str	r3, [r7, #28]

	volatile float sensed_theta_re_error;

	volatile float sensed_theta_error;
	volatile float sensed_theta_error_sum = 0.0f;
 8010bce:	f04f 0300 	mov.w	r3, #0
 8010bd2:	60fb      	str	r3, [r7, #12]
	volatile float sensed_theta_error_ave = 0.0f;
 8010bd4:	f04f 0300 	mov.w	r3, #0
 8010bd8:	60bb      	str	r3, [r7, #8]


	flash_data = (uint32_t*)Flash_load();
 8010bda:	f7fe ffab 	bl	800fb34 <Flash_load>
 8010bde:	4602      	mov	r2, r0
 8010be0:	4b9e      	ldr	r3, [pc, #632]	; (8010e5c <setZeroEncoder+0x2ac>)
 8010be2:	601a      	str	r2, [r3, #0]

	if(exe == 0)
 8010be4:	79fb      	ldrb	r3, [r7, #7]
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d126      	bne.n	8010c38 <setZeroEncoder+0x88>
	{

		memcpy(&theta_re_offset, flash_data, 4);
 8010bea:	4b9c      	ldr	r3, [pc, #624]	; (8010e5c <setZeroEncoder+0x2ac>)
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	461a      	mov	r2, r3
 8010bf2:	4b9b      	ldr	r3, [pc, #620]	; (8010e60 <setZeroEncoder+0x2b0>)
 8010bf4:	601a      	str	r2, [r3, #0]

		printf("flash_data:%d\n", theta_re_offset * 100000);
 8010bf6:	4b9a      	ldr	r3, [pc, #616]	; (8010e60 <setZeroEncoder+0x2b0>)
 8010bf8:	edd3 7a00 	vldr	s15, [r3]
 8010bfc:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8010e64 <setZeroEncoder+0x2b4>
 8010c00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010c04:	ee17 0a90 	vmov	r0, s15
 8010c08:	f7f7 fbce 	bl	80083a8 <__aeabi_f2d>
 8010c0c:	4603      	mov	r3, r0
 8010c0e:	460c      	mov	r4, r1
 8010c10:	461a      	mov	r2, r3
 8010c12:	4623      	mov	r3, r4
 8010c14:	4894      	ldr	r0, [pc, #592]	; (8010e68 <setZeroEncoder+0x2b8>)
 8010c16:	f000 fedf 	bl	80119d8 <iprintf>
		printf(" theta_re_offset = %d\n", (int)(theta_re_offset * 100000));
 8010c1a:	4b91      	ldr	r3, [pc, #580]	; (8010e60 <setZeroEncoder+0x2b0>)
 8010c1c:	edd3 7a00 	vldr	s15, [r3]
 8010c20:	ed9f 7a90 	vldr	s14, [pc, #576]	; 8010e64 <setZeroEncoder+0x2b4>
 8010c24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010c28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010c2c:	ee17 1a90 	vmov	r1, s15
 8010c30:	488e      	ldr	r0, [pc, #568]	; (8010e6c <setZeroEncoder+0x2bc>)
 8010c32:	f000 fed1 	bl	80119d8 <iprintf>
		return;
 8010c36:	e0fd      	b.n	8010e34 <setZeroEncoder+0x284>
	}


	Id_ref = forced_I_gamma_ref;
 8010c38:	4a8d      	ldr	r2, [pc, #564]	; (8010e70 <setZeroEncoder+0x2c0>)
 8010c3a:	6a3b      	ldr	r3, [r7, #32]
 8010c3c:	6013      	str	r3, [r2, #0]
	Iq_ref = forced_I_delta_ref;
 8010c3e:	4a8d      	ldr	r2, [pc, #564]	; (8010e74 <setZeroEncoder+0x2c4>)
 8010c40:	69fb      	ldr	r3, [r7, #28]
 8010c42:	6013      	str	r3, [r2, #0]

	forced_commute_enable = 1;
 8010c44:	4b8c      	ldr	r3, [pc, #560]	; (8010e78 <setZeroEncoder+0x2c8>)
 8010c46:	2201      	movs	r2, #1
 8010c48:	701a      	strb	r2, [r3, #0]


	timeoutReset();	HAL_Delay(100);
 8010c4a:	f000 fdc9 	bl	80117e0 <timeoutReset>
 8010c4e:	2064      	movs	r0, #100	; 0x64
 8010c50:	f7f8 f8de 	bl	8008e10 <HAL_Delay>
	timeoutReset();	HAL_Delay(100);
 8010c54:	f000 fdc4 	bl	80117e0 <timeoutReset>
 8010c58:	2064      	movs	r0, #100	; 0x64
 8010c5a:	f7f8 f8d9 	bl	8008e10 <HAL_Delay>
	timeoutReset();	HAL_Delay(100);
 8010c5e:	f000 fdbf 	bl	80117e0 <timeoutReset>
 8010c62:	2064      	movs	r0, #100	; 0x64
 8010c64:	f7f8 f8d4 	bl	8008e10 <HAL_Delay>
	timeoutReset();	HAL_Delay(100);
 8010c68:	f000 fdba 	bl	80117e0 <timeoutReset>
 8010c6c:	2064      	movs	r0, #100	; 0x64
 8010c6e:	f7f8 f8cf 	bl	8008e10 <HAL_Delay>
	timeoutReset();	HAL_Delay(100);
 8010c72:	f000 fdb5 	bl	80117e0 <timeoutReset>
 8010c76:	2064      	movs	r0, #100	; 0x64
 8010c78:	f7f8 f8ca 	bl	8008e10 <HAL_Delay>

	requestEncoder();
 8010c7c:	f000 f912 	bl	8010ea4 <requestEncoder>
	HAL_Delay(5);
 8010c80:	2005      	movs	r0, #5
 8010c82:	f7f8 f8c5 	bl	8008e10 <HAL_Delay>
	refreshEncoder();
 8010c86:	f000 f92b 	bl	8010ee0 <refreshEncoder>
	HAL_Delay(5);
 8010c8a:	2005      	movs	r0, #5
 8010c8c:	f7f8 f8c0 	bl	8008e10 <HAL_Delay>
	requestEncoder();
 8010c90:	f000 f908 	bl	8010ea4 <requestEncoder>
	HAL_Delay(5);
 8010c94:	2005      	movs	r0, #5
 8010c96:	f7f8 f8bb 	bl	8008e10 <HAL_Delay>
	refreshEncoder();
 8010c9a:	f000 f921 	bl	8010ee0 <refreshEncoder>

	theta_re_offset = 0.0f - theta_re;
 8010c9e:	4b77      	ldr	r3, [pc, #476]	; (8010e7c <setZeroEncoder+0x2cc>)
 8010ca0:	edd3 7a00 	vldr	s15, [r3]
 8010ca4:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8010e80 <setZeroEncoder+0x2d0>
 8010ca8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010cac:	4b6c      	ldr	r3, [pc, #432]	; (8010e60 <setZeroEncoder+0x2b0>)
 8010cae:	edc3 7a00 	vstr	s15, [r3]

	while(theta_re_offset < -M_PI)	theta_re_offset += 2.0f * M_PI;
 8010cb2:	e012      	b.n	8010cda <setZeroEncoder+0x12a>
 8010cb4:	4b6a      	ldr	r3, [pc, #424]	; (8010e60 <setZeroEncoder+0x2b0>)
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	4618      	mov	r0, r3
 8010cba:	f7f7 fb75 	bl	80083a8 <__aeabi_f2d>
 8010cbe:	a360      	add	r3, pc, #384	; (adr r3, 8010e40 <setZeroEncoder+0x290>)
 8010cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cc4:	f7f7 fa12 	bl	80080ec <__adddf3>
 8010cc8:	4603      	mov	r3, r0
 8010cca:	460c      	mov	r4, r1
 8010ccc:	4618      	mov	r0, r3
 8010cce:	4621      	mov	r1, r4
 8010cd0:	f7f7 fe5c 	bl	800898c <__aeabi_d2f>
 8010cd4:	4602      	mov	r2, r0
 8010cd6:	4b62      	ldr	r3, [pc, #392]	; (8010e60 <setZeroEncoder+0x2b0>)
 8010cd8:	601a      	str	r2, [r3, #0]
 8010cda:	4b61      	ldr	r3, [pc, #388]	; (8010e60 <setZeroEncoder+0x2b0>)
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	4618      	mov	r0, r3
 8010ce0:	f7f7 fb62 	bl	80083a8 <__aeabi_f2d>
 8010ce4:	a358      	add	r3, pc, #352	; (adr r3, 8010e48 <setZeroEncoder+0x298>)
 8010ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cea:	f7f7 fe27 	bl	800893c <__aeabi_dcmplt>
 8010cee:	4603      	mov	r3, r0
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d1df      	bne.n	8010cb4 <setZeroEncoder+0x104>
	while(theta_re_offset > M_PI)	theta_re_offset -= 2.0f * M_PI;
 8010cf4:	e012      	b.n	8010d1c <setZeroEncoder+0x16c>
 8010cf6:	4b5a      	ldr	r3, [pc, #360]	; (8010e60 <setZeroEncoder+0x2b0>)
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	f7f7 fb54 	bl	80083a8 <__aeabi_f2d>
 8010d00:	a34f      	add	r3, pc, #316	; (adr r3, 8010e40 <setZeroEncoder+0x290>)
 8010d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d06:	f7f7 f9ef 	bl	80080e8 <__aeabi_dsub>
 8010d0a:	4603      	mov	r3, r0
 8010d0c:	460c      	mov	r4, r1
 8010d0e:	4618      	mov	r0, r3
 8010d10:	4621      	mov	r1, r4
 8010d12:	f7f7 fe3b 	bl	800898c <__aeabi_d2f>
 8010d16:	4602      	mov	r2, r0
 8010d18:	4b51      	ldr	r3, [pc, #324]	; (8010e60 <setZeroEncoder+0x2b0>)
 8010d1a:	601a      	str	r2, [r3, #0]
 8010d1c:	4b50      	ldr	r3, [pc, #320]	; (8010e60 <setZeroEncoder+0x2b0>)
 8010d1e:	681b      	ldr	r3, [r3, #0]
 8010d20:	4618      	mov	r0, r3
 8010d22:	f7f7 fb41 	bl	80083a8 <__aeabi_f2d>
 8010d26:	a34a      	add	r3, pc, #296	; (adr r3, 8010e50 <setZeroEncoder+0x2a0>)
 8010d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d2c:	f7f7 fe24 	bl	8008978 <__aeabi_dcmpgt>
 8010d30:	4603      	mov	r3, r0
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d1df      	bne.n	8010cf6 <setZeroEncoder+0x146>


	printf(" theta_re_offset = %d -- ", (int)(theta_re_offset * 100000));
 8010d36:	4b4a      	ldr	r3, [pc, #296]	; (8010e60 <setZeroEncoder+0x2b0>)
 8010d38:	edd3 7a00 	vldr	s15, [r3]
 8010d3c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8010e64 <setZeroEncoder+0x2b4>
 8010d40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010d44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010d48:	ee17 1a90 	vmov	r1, s15
 8010d4c:	484d      	ldr	r0, [pc, #308]	; (8010e84 <setZeroEncoder+0x2d4>)
 8010d4e:	f000 fe43 	bl	80119d8 <iprintf>
	HAL_Delay(1);
 8010d52:	2001      	movs	r0, #1
 8010d54:	f7f8 f85c 	bl	8008e10 <HAL_Delay>
	printf(" theta_re_offset = %d\n", (int)(theta_re_offset * 100000));
 8010d58:	4b41      	ldr	r3, [pc, #260]	; (8010e60 <setZeroEncoder+0x2b0>)
 8010d5a:	edd3 7a00 	vldr	s15, [r3]
 8010d5e:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8010e64 <setZeroEncoder+0x2b4>
 8010d62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010d66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010d6a:	ee17 1a90 	vmov	r1, s15
 8010d6e:	483f      	ldr	r0, [pc, #252]	; (8010e6c <setZeroEncoder+0x2bc>)
 8010d70:	f000 fe32 	bl	80119d8 <iprintf>
	HAL_Delay(1);
 8010d74:	2001      	movs	r0, #1
 8010d76:	f7f8 f84b 	bl	8008e10 <HAL_Delay>
	printf(" theta_re_offset(4) = %d -- ", (int)(theta_re_offset * 10000));
 8010d7a:	4b39      	ldr	r3, [pc, #228]	; (8010e60 <setZeroEncoder+0x2b0>)
 8010d7c:	edd3 7a00 	vldr	s15, [r3]
 8010d80:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8010e88 <setZeroEncoder+0x2d8>
 8010d84:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010d88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010d8c:	ee17 1a90 	vmov	r1, s15
 8010d90:	483e      	ldr	r0, [pc, #248]	; (8010e8c <setZeroEncoder+0x2dc>)
 8010d92:	f000 fe21 	bl	80119d8 <iprintf>
	HAL_Delay(1);
 8010d96:	2001      	movs	r0, #1
 8010d98:	f7f8 f83a 	bl	8008e10 <HAL_Delay>
	printf(" theta_re_offset(4) = %d\n", (int)(theta_re_offset * 10000));
 8010d9c:	4b30      	ldr	r3, [pc, #192]	; (8010e60 <setZeroEncoder+0x2b0>)
 8010d9e:	edd3 7a00 	vldr	s15, [r3]
 8010da2:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8010e88 <setZeroEncoder+0x2d8>
 8010da6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010daa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010dae:	ee17 1a90 	vmov	r1, s15
 8010db2:	4837      	ldr	r0, [pc, #220]	; (8010e90 <setZeroEncoder+0x2e0>)
 8010db4:	f000 fe10 	bl	80119d8 <iprintf>
	HAL_Delay(1);
 8010db8:	2001      	movs	r0, #1
 8010dba:	f7f8 f829 	bl	8008e10 <HAL_Delay>

	printf("(theta_re_offset < 1.0f) = %d\n", (int)(theta_re_offset < 1.0f));
 8010dbe:	4b28      	ldr	r3, [pc, #160]	; (8010e60 <setZeroEncoder+0x2b0>)
 8010dc0:	edd3 7a00 	vldr	s15, [r3]
 8010dc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8010dc8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010dd0:	bf4c      	ite	mi
 8010dd2:	2301      	movmi	r3, #1
 8010dd4:	2300      	movpl	r3, #0
 8010dd6:	b2db      	uxtb	r3, r3
 8010dd8:	4619      	mov	r1, r3
 8010dda:	482e      	ldr	r0, [pc, #184]	; (8010e94 <setZeroEncoder+0x2e4>)
 8010ddc:	f000 fdfc 	bl	80119d8 <iprintf>

	printf("(theta_re_offset > -1.0f) = %d\n", (int)(theta_re_offset > -1.0f));
 8010de0:	4b1f      	ldr	r3, [pc, #124]	; (8010e60 <setZeroEncoder+0x2b0>)
 8010de2:	edd3 7a00 	vldr	s15, [r3]
 8010de6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8010dea:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010df2:	bfcc      	ite	gt
 8010df4:	2301      	movgt	r3, #1
 8010df6:	2300      	movle	r3, #0
 8010df8:	b2db      	uxtb	r3, r3
 8010dfa:	4619      	mov	r1, r3
 8010dfc:	4826      	ldr	r0, [pc, #152]	; (8010e98 <setZeroEncoder+0x2e8>)
 8010dfe:	f000 fdeb 	bl	80119d8 <iprintf>


	memcpy(flash_data, &theta_re_offset, 4);
 8010e02:	4b16      	ldr	r3, [pc, #88]	; (8010e5c <setZeroEncoder+0x2ac>)
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	4a16      	ldr	r2, [pc, #88]	; (8010e60 <setZeroEncoder+0x2b0>)
 8010e08:	6812      	ldr	r2, [r2, #0]
 8010e0a:	601a      	str	r2, [r3, #0]

	if (!Flash_store())
 8010e0c:	f7fe fea4 	bl	800fb58 <Flash_store>
 8010e10:	4603      	mov	r3, r0
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d102      	bne.n	8010e1c <setZeroEncoder+0x26c>
	{
		printf("Failed to write flash\n");
 8010e16:	4821      	ldr	r0, [pc, #132]	; (8010e9c <setZeroEncoder+0x2ec>)
 8010e18:	f000 fe52 	bl	8011ac0 <puts>
	}

	printf("flash_data:%lu\n", *flash_data);
 8010e1c:	4b0f      	ldr	r3, [pc, #60]	; (8010e5c <setZeroEncoder+0x2ac>)
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	4619      	mov	r1, r3
 8010e24:	481e      	ldr	r0, [pc, #120]	; (8010ea0 <setZeroEncoder+0x2f0>)
 8010e26:	f000 fdd7 	bl	80119d8 <iprintf>



	ACR_Reset();
 8010e2a:	f7fd fd77 	bl	800e91c <ACR_Reset>

	forced_commute_enable = 0;
 8010e2e:	4b12      	ldr	r3, [pc, #72]	; (8010e78 <setZeroEncoder+0x2c8>)
 8010e30:	2200      	movs	r2, #0
 8010e32:	701a      	strb	r2, [r3, #0]


#endif


}
 8010e34:	372c      	adds	r7, #44	; 0x2c
 8010e36:	46bd      	mov	sp, r7
 8010e38:	bd90      	pop	{r4, r7, pc}
 8010e3a:	bf00      	nop
 8010e3c:	f3af 8000 	nop.w
 8010e40:	54442d18 	.word	0x54442d18
 8010e44:	401921fb 	.word	0x401921fb
 8010e48:	54442d18 	.word	0x54442d18
 8010e4c:	c00921fb 	.word	0xc00921fb
 8010e50:	54442d18 	.word	0x54442d18
 8010e54:	400921fb 	.word	0x400921fb
 8010e58:	41200000 	.word	0x41200000
 8010e5c:	20004588 	.word	0x20004588
 8010e60:	200041d8 	.word	0x200041d8
 8010e64:	47c35000 	.word	0x47c35000
 8010e68:	08012b84 	.word	0x08012b84
 8010e6c:	08012b94 	.word	0x08012b94
 8010e70:	200000c4 	.word	0x200000c4
 8010e74:	200000c8 	.word	0x200000c8
 8010e78:	200041e8 	.word	0x200041e8
 8010e7c:	200041e0 	.word	0x200041e0
 8010e80:	00000000 	.word	0x00000000
 8010e84:	08012bac 	.word	0x08012bac
 8010e88:	461c4000 	.word	0x461c4000
 8010e8c:	08012bc8 	.word	0x08012bc8
 8010e90:	08012be8 	.word	0x08012be8
 8010e94:	08012c04 	.word	0x08012c04
 8010e98:	08012c24 	.word	0x08012c24
 8010e9c:	08012c44 	.word	0x08012c44
 8010ea0:	08012c5c 	.word	0x08012c5c

08010ea4 <requestEncoder>:




inline void requestEncoder()
{
 8010ea4:	b580      	push	{r7, lr}
 8010ea6:	af00      	add	r7, sp, #0


	// Reading Encoder for next sampling
	spi2txBuf[0] = 0xff;
 8010ea8:	4b09      	ldr	r3, [pc, #36]	; (8010ed0 <requestEncoder+0x2c>)
 8010eaa:	22ff      	movs	r2, #255	; 0xff
 8010eac:	701a      	strb	r2, [r3, #0]
	spi2txBuf[1] = 0xff;
 8010eae:	4b08      	ldr	r3, [pc, #32]	; (8010ed0 <requestEncoder+0x2c>)
 8010eb0:	22ff      	movs	r2, #255	; 0xff
 8010eb2:	705a      	strb	r2, [r3, #1]
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_RESET);
 8010eb4:	2200      	movs	r2, #0
 8010eb6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8010eba:	4806      	ldr	r0, [pc, #24]	; (8010ed4 <requestEncoder+0x30>)
 8010ebc:	f7fa fa6a 	bl	800b394 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive_IT(&hspi2, spi2txBuf, spi2rxBuf, 1);
 8010ec0:	2301      	movs	r3, #1
 8010ec2:	4a05      	ldr	r2, [pc, #20]	; (8010ed8 <requestEncoder+0x34>)
 8010ec4:	4902      	ldr	r1, [pc, #8]	; (8010ed0 <requestEncoder+0x2c>)
 8010ec6:	4805      	ldr	r0, [pc, #20]	; (8010edc <requestEncoder+0x38>)
 8010ec8:	f7fb f9ae 	bl	800c228 <HAL_SPI_TransmitReceive_IT>


}
 8010ecc:	bf00      	nop
 8010ece:	bd80      	pop	{r7, pc}
 8010ed0:	200041cc 	.word	0x200041cc
 8010ed4:	40020400 	.word	0x40020400
 8010ed8:	200041d0 	.word	0x200041d0
 8010edc:	200044d8 	.word	0x200044d8

08010ee0 <refreshEncoder>:


inline int refreshEncoder()
{
 8010ee0:	b5b0      	push	{r4, r5, r7, lr}
 8010ee2:	b084      	sub	sp, #16
 8010ee4:	af00      	add	r7, sp, #0

	uint16_t angle_raw = 0;
 8010ee6:	2300      	movs	r3, #0
 8010ee8:	81fb      	strh	r3, [r7, #14]
	float _theta;
	float _theta_re;

	// Reading RX Data from SPI Encoder
	HAL_GPIO_WritePin(SPI2_NSS_GPIO_Port, SPI2_NSS_Pin, GPIO_PIN_SET);
 8010eea:	2201      	movs	r2, #1
 8010eec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8010ef0:	4891      	ldr	r0, [pc, #580]	; (8011138 <refreshEncoder+0x258>)
 8010ef2:	f7fa fa4f 	bl	800b394 <HAL_GPIO_WritePin>
	angle_raw = (spi2rxBuf[1] & 0x3f) << 8 | spi2rxBuf[0];
 8010ef6:	4b91      	ldr	r3, [pc, #580]	; (801113c <refreshEncoder+0x25c>)
 8010ef8:	785b      	ldrb	r3, [r3, #1]
 8010efa:	b2db      	uxtb	r3, r3
 8010efc:	021b      	lsls	r3, r3, #8
 8010efe:	b21b      	sxth	r3, r3
 8010f00:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8010f04:	b21a      	sxth	r2, r3
 8010f06:	4b8d      	ldr	r3, [pc, #564]	; (801113c <refreshEncoder+0x25c>)
 8010f08:	781b      	ldrb	r3, [r3, #0]
 8010f0a:	b2db      	uxtb	r3, r3
 8010f0c:	b21b      	sxth	r3, r3
 8010f0e:	4313      	orrs	r3, r2
 8010f10:	b21b      	sxth	r3, r3
 8010f12:	81fb      	strh	r3, [r7, #14]

	_theta = (float)angle_raw / (float)ENCODER_RESOL * 2.0f * M_PI + theta_offset;
 8010f14:	89fb      	ldrh	r3, [r7, #14]
 8010f16:	ee07 3a90 	vmov	s15, r3
 8010f1a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8010f1e:	eddf 6a88 	vldr	s13, [pc, #544]	; 8011140 <refreshEncoder+0x260>
 8010f22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010f26:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8010f2a:	ee17 0a90 	vmov	r0, s15
 8010f2e:	f7f7 fa3b 	bl	80083a8 <__aeabi_f2d>
 8010f32:	a37d      	add	r3, pc, #500	; (adr r3, 8011128 <refreshEncoder+0x248>)
 8010f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f38:	f7f7 fa8e 	bl	8008458 <__aeabi_dmul>
 8010f3c:	4603      	mov	r3, r0
 8010f3e:	460c      	mov	r4, r1
 8010f40:	4625      	mov	r5, r4
 8010f42:	461c      	mov	r4, r3
 8010f44:	4b7f      	ldr	r3, [pc, #508]	; (8011144 <refreshEncoder+0x264>)
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	4618      	mov	r0, r3
 8010f4a:	f7f7 fa2d 	bl	80083a8 <__aeabi_f2d>
 8010f4e:	4602      	mov	r2, r0
 8010f50:	460b      	mov	r3, r1
 8010f52:	4620      	mov	r0, r4
 8010f54:	4629      	mov	r1, r5
 8010f56:	f7f7 f8c9 	bl	80080ec <__adddf3>
 8010f5a:	4603      	mov	r3, r0
 8010f5c:	460c      	mov	r4, r1
 8010f5e:	4618      	mov	r0, r3
 8010f60:	4621      	mov	r1, r4
 8010f62:	f7f7 fd13 	bl	800898c <__aeabi_d2f>
 8010f66:	4603      	mov	r3, r0
 8010f68:	60bb      	str	r3, [r7, #8]

	if(_theta < 0.0f)			theta = _theta + 2 * M_PI;
 8010f6a:	edd7 7a02 	vldr	s15, [r7, #8]
 8010f6e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f76:	d511      	bpl.n	8010f9c <refreshEncoder+0xbc>
 8010f78:	68b8      	ldr	r0, [r7, #8]
 8010f7a:	f7f7 fa15 	bl	80083a8 <__aeabi_f2d>
 8010f7e:	a36c      	add	r3, pc, #432	; (adr r3, 8011130 <refreshEncoder+0x250>)
 8010f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f84:	f7f7 f8b2 	bl	80080ec <__adddf3>
 8010f88:	4603      	mov	r3, r0
 8010f8a:	460c      	mov	r4, r1
 8010f8c:	4618      	mov	r0, r3
 8010f8e:	4621      	mov	r1, r4
 8010f90:	f7f7 fcfc 	bl	800898c <__aeabi_d2f>
 8010f94:	4602      	mov	r2, r0
 8010f96:	4b6c      	ldr	r3, [pc, #432]	; (8011148 <refreshEncoder+0x268>)
 8010f98:	601a      	str	r2, [r3, #0]
 8010f9a:	e01f      	b.n	8010fdc <refreshEncoder+0xfc>
	else if(_theta >= 2 * M_PI)	theta = _theta - 2 * M_PI;
 8010f9c:	68b8      	ldr	r0, [r7, #8]
 8010f9e:	f7f7 fa03 	bl	80083a8 <__aeabi_f2d>
 8010fa2:	a363      	add	r3, pc, #396	; (adr r3, 8011130 <refreshEncoder+0x250>)
 8010fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fa8:	f7f7 fcdc 	bl	8008964 <__aeabi_dcmpge>
 8010fac:	4603      	mov	r3, r0
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d011      	beq.n	8010fd6 <refreshEncoder+0xf6>
 8010fb2:	68b8      	ldr	r0, [r7, #8]
 8010fb4:	f7f7 f9f8 	bl	80083a8 <__aeabi_f2d>
 8010fb8:	a35d      	add	r3, pc, #372	; (adr r3, 8011130 <refreshEncoder+0x250>)
 8010fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fbe:	f7f7 f893 	bl	80080e8 <__aeabi_dsub>
 8010fc2:	4603      	mov	r3, r0
 8010fc4:	460c      	mov	r4, r1
 8010fc6:	4618      	mov	r0, r3
 8010fc8:	4621      	mov	r1, r4
 8010fca:	f7f7 fcdf 	bl	800898c <__aeabi_d2f>
 8010fce:	4602      	mov	r2, r0
 8010fd0:	4b5d      	ldr	r3, [pc, #372]	; (8011148 <refreshEncoder+0x268>)
 8010fd2:	601a      	str	r2, [r3, #0]
 8010fd4:	e002      	b.n	8010fdc <refreshEncoder+0xfc>
	else						theta = _theta;
 8010fd6:	4a5c      	ldr	r2, [pc, #368]	; (8011148 <refreshEncoder+0x268>)
 8010fd8:	68bb      	ldr	r3, [r7, #8]
 8010fda:	6013      	str	r3, [r2, #0]

	_theta_re = fmodf((float)angle_raw / (float)ENCODER_RESOL * 2.0f * M_PI * POLES / 2, 2.0f * M_PI) + theta_re_offset;
 8010fdc:	89fb      	ldrh	r3, [r7, #14]
 8010fde:	ee07 3a90 	vmov	s15, r3
 8010fe2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8010fe6:	eddf 6a56 	vldr	s13, [pc, #344]	; 8011140 <refreshEncoder+0x260>
 8010fea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010fee:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8010ff2:	ee17 0a90 	vmov	r0, s15
 8010ff6:	f7f7 f9d7 	bl	80083a8 <__aeabi_f2d>
 8010ffa:	a34b      	add	r3, pc, #300	; (adr r3, 8011128 <refreshEncoder+0x248>)
 8010ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011000:	f7f7 fa2a 	bl	8008458 <__aeabi_dmul>
 8011004:	4603      	mov	r3, r0
 8011006:	460c      	mov	r4, r1
 8011008:	4618      	mov	r0, r3
 801100a:	4621      	mov	r1, r4
 801100c:	f04f 0200 	mov.w	r2, #0
 8011010:	4b4e      	ldr	r3, [pc, #312]	; (801114c <refreshEncoder+0x26c>)
 8011012:	f7f7 fa21 	bl	8008458 <__aeabi_dmul>
 8011016:	4603      	mov	r3, r0
 8011018:	460c      	mov	r4, r1
 801101a:	4618      	mov	r0, r3
 801101c:	4621      	mov	r1, r4
 801101e:	f04f 0200 	mov.w	r2, #0
 8011022:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011026:	f7f7 fb41 	bl	80086ac <__aeabi_ddiv>
 801102a:	4603      	mov	r3, r0
 801102c:	460c      	mov	r4, r1
 801102e:	4618      	mov	r0, r3
 8011030:	4621      	mov	r1, r4
 8011032:	f7f7 fcab 	bl	800898c <__aeabi_d2f>
 8011036:	4603      	mov	r3, r0
 8011038:	eddf 0a45 	vldr	s1, [pc, #276]	; 8011150 <refreshEncoder+0x270>
 801103c:	ee00 3a10 	vmov	s0, r3
 8011040:	f001 fc12 	bl	8012868 <fmodf>
 8011044:	eeb0 7a40 	vmov.f32	s14, s0
 8011048:	4b42      	ldr	r3, [pc, #264]	; (8011154 <refreshEncoder+0x274>)
 801104a:	edd3 7a00 	vldr	s15, [r3]
 801104e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011052:	edc7 7a01 	vstr	s15, [r7, #4]

	if(_theta_re < 0.0f)			theta_re = _theta_re + 2 * M_PI;
 8011056:	edd7 7a01 	vldr	s15, [r7, #4]
 801105a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801105e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011062:	d511      	bpl.n	8011088 <refreshEncoder+0x1a8>
 8011064:	6878      	ldr	r0, [r7, #4]
 8011066:	f7f7 f99f 	bl	80083a8 <__aeabi_f2d>
 801106a:	a331      	add	r3, pc, #196	; (adr r3, 8011130 <refreshEncoder+0x250>)
 801106c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011070:	f7f7 f83c 	bl	80080ec <__adddf3>
 8011074:	4603      	mov	r3, r0
 8011076:	460c      	mov	r4, r1
 8011078:	4618      	mov	r0, r3
 801107a:	4621      	mov	r1, r4
 801107c:	f7f7 fc86 	bl	800898c <__aeabi_d2f>
 8011080:	4602      	mov	r2, r0
 8011082:	4b35      	ldr	r3, [pc, #212]	; (8011158 <refreshEncoder+0x278>)
 8011084:	601a      	str	r2, [r3, #0]
 8011086:	e01f      	b.n	80110c8 <refreshEncoder+0x1e8>
	else if(_theta_re >= 2 * M_PI)	theta_re = _theta_re - 2 * M_PI;
 8011088:	6878      	ldr	r0, [r7, #4]
 801108a:	f7f7 f98d 	bl	80083a8 <__aeabi_f2d>
 801108e:	a328      	add	r3, pc, #160	; (adr r3, 8011130 <refreshEncoder+0x250>)
 8011090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011094:	f7f7 fc66 	bl	8008964 <__aeabi_dcmpge>
 8011098:	4603      	mov	r3, r0
 801109a:	2b00      	cmp	r3, #0
 801109c:	d011      	beq.n	80110c2 <refreshEncoder+0x1e2>
 801109e:	6878      	ldr	r0, [r7, #4]
 80110a0:	f7f7 f982 	bl	80083a8 <__aeabi_f2d>
 80110a4:	a322      	add	r3, pc, #136	; (adr r3, 8011130 <refreshEncoder+0x250>)
 80110a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110aa:	f7f7 f81d 	bl	80080e8 <__aeabi_dsub>
 80110ae:	4603      	mov	r3, r0
 80110b0:	460c      	mov	r4, r1
 80110b2:	4618      	mov	r0, r3
 80110b4:	4621      	mov	r1, r4
 80110b6:	f7f7 fc69 	bl	800898c <__aeabi_d2f>
 80110ba:	4602      	mov	r2, r0
 80110bc:	4b26      	ldr	r3, [pc, #152]	; (8011158 <refreshEncoder+0x278>)
 80110be:	601a      	str	r2, [r3, #0]
 80110c0:	e002      	b.n	80110c8 <refreshEncoder+0x1e8>
	else							theta_re = _theta_re;
 80110c2:	4a25      	ldr	r2, [pc, #148]	; (8011158 <refreshEncoder+0x278>)
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	6013      	str	r3, [r2, #0]

	cos_theta_re = sin_table2[(int)((theta_re * 0.3183f + 0.5f) * 5000.0f)];
 80110c8:	4b23      	ldr	r3, [pc, #140]	; (8011158 <refreshEncoder+0x278>)
 80110ca:	edd3 7a00 	vldr	s15, [r3]
 80110ce:	ed9f 7a23 	vldr	s14, [pc, #140]	; 801115c <refreshEncoder+0x27c>
 80110d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80110d6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80110da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80110de:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8011160 <refreshEncoder+0x280>
 80110e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80110e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80110ea:	ee17 3a90 	vmov	r3, s15
 80110ee:	4a1d      	ldr	r2, [pc, #116]	; (8011164 <refreshEncoder+0x284>)
 80110f0:	009b      	lsls	r3, r3, #2
 80110f2:	4413      	add	r3, r2
 80110f4:	681b      	ldr	r3, [r3, #0]
 80110f6:	4a1c      	ldr	r2, [pc, #112]	; (8011168 <refreshEncoder+0x288>)
 80110f8:	6013      	str	r3, [r2, #0]
	sin_theta_re = sin_table2[(int)(theta_re * 1591.54943f)];
 80110fa:	4b17      	ldr	r3, [pc, #92]	; (8011158 <refreshEncoder+0x278>)
 80110fc:	edd3 7a00 	vldr	s15, [r3]
 8011100:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 801116c <refreshEncoder+0x28c>
 8011104:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011108:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801110c:	ee17 3a90 	vmov	r3, s15
 8011110:	4a14      	ldr	r2, [pc, #80]	; (8011164 <refreshEncoder+0x284>)
 8011112:	009b      	lsls	r3, r3, #2
 8011114:	4413      	add	r3, r2
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	4a15      	ldr	r2, [pc, #84]	; (8011170 <refreshEncoder+0x290>)
 801111a:	6013      	str	r3, [r2, #0]


	return 0;
 801111c:	2300      	movs	r3, #0

}
 801111e:	4618      	mov	r0, r3
 8011120:	3710      	adds	r7, #16
 8011122:	46bd      	mov	sp, r7
 8011124:	bdb0      	pop	{r4, r5, r7, pc}
 8011126:	bf00      	nop
 8011128:	54442d18 	.word	0x54442d18
 801112c:	400921fb 	.word	0x400921fb
 8011130:	54442d18 	.word	0x54442d18
 8011134:	401921fb 	.word	0x401921fb
 8011138:	40020400 	.word	0x40020400
 801113c:	200041d0 	.word	0x200041d0
 8011140:	46800000 	.word	0x46800000
 8011144:	200041d4 	.word	0x200041d4
 8011148:	200041dc 	.word	0x200041dc
 801114c:	40360000 	.word	0x40360000
 8011150:	40c90fdb 	.word	0x40c90fdb
 8011154:	200041d8 	.word	0x200041d8
 8011158:	200041e0 	.word	0x200041e0
 801115c:	3ea2f838 	.word	0x3ea2f838
 8011160:	459c4000 	.word	0x459c4000
 8011164:	08012cac 	.word	0x08012cac
 8011168:	20000034 	.word	0x20000034
 801116c:	44c6f195 	.word	0x44c6f195
 8011170:	200041e4 	.word	0x200041e4

08011174 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8011174:	b580      	push	{r7, lr}
 8011176:	b082      	sub	sp, #8
 8011178:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801117a:	2300      	movs	r3, #0
 801117c:	607b      	str	r3, [r7, #4]
 801117e:	4b10      	ldr	r3, [pc, #64]	; (80111c0 <HAL_MspInit+0x4c>)
 8011180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011182:	4a0f      	ldr	r2, [pc, #60]	; (80111c0 <HAL_MspInit+0x4c>)
 8011184:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011188:	6453      	str	r3, [r2, #68]	; 0x44
 801118a:	4b0d      	ldr	r3, [pc, #52]	; (80111c0 <HAL_MspInit+0x4c>)
 801118c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801118e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011192:	607b      	str	r3, [r7, #4]
 8011194:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8011196:	2300      	movs	r3, #0
 8011198:	603b      	str	r3, [r7, #0]
 801119a:	4b09      	ldr	r3, [pc, #36]	; (80111c0 <HAL_MspInit+0x4c>)
 801119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801119e:	4a08      	ldr	r2, [pc, #32]	; (80111c0 <HAL_MspInit+0x4c>)
 80111a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80111a4:	6413      	str	r3, [r2, #64]	; 0x40
 80111a6:	4b06      	ldr	r3, [pc, #24]	; (80111c0 <HAL_MspInit+0x4c>)
 80111a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80111aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80111ae:	603b      	str	r3, [r7, #0]
 80111b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80111b2:	2007      	movs	r0, #7
 80111b4:	f7f9 f886 	bl	800a2c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80111b8:	bf00      	nop
 80111ba:	3708      	adds	r7, #8
 80111bc:	46bd      	mov	sp, r7
 80111be:	bd80      	pop	{r7, pc}
 80111c0:	40023800 	.word	0x40023800

080111c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80111c4:	b480      	push	{r7}
 80111c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80111c8:	bf00      	nop
 80111ca:	46bd      	mov	sp, r7
 80111cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111d0:	4770      	bx	lr

080111d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80111d2:	b480      	push	{r7}
 80111d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80111d6:	e7fe      	b.n	80111d6 <HardFault_Handler+0x4>

080111d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80111d8:	b480      	push	{r7}
 80111da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80111dc:	e7fe      	b.n	80111dc <MemManage_Handler+0x4>

080111de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80111de:	b480      	push	{r7}
 80111e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80111e2:	e7fe      	b.n	80111e2 <BusFault_Handler+0x4>

080111e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80111e4:	b480      	push	{r7}
 80111e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80111e8:	e7fe      	b.n	80111e8 <UsageFault_Handler+0x4>

080111ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80111ea:	b480      	push	{r7}
 80111ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80111ee:	bf00      	nop
 80111f0:	46bd      	mov	sp, r7
 80111f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f6:	4770      	bx	lr

080111f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80111f8:	b480      	push	{r7}
 80111fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80111fc:	bf00      	nop
 80111fe:	46bd      	mov	sp, r7
 8011200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011204:	4770      	bx	lr

08011206 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8011206:	b480      	push	{r7}
 8011208:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 801120a:	bf00      	nop
 801120c:	46bd      	mov	sp, r7
 801120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011212:	4770      	bx	lr

08011214 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8011214:	b580      	push	{r7, lr}
 8011216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8011218:	f7f7 fdda 	bl	8008dd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 801121c:	bf00      	nop
 801121e:	bd80      	pop	{r7, pc}

08011220 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8011220:	b580      	push	{r7, lr}
 8011222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8011224:	4802      	ldr	r0, [pc, #8]	; (8011230 <CAN1_TX_IRQHandler+0x10>)
 8011226:	f7f8 fd72 	bl	8009d0e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 801122a:	bf00      	nop
 801122c:	bd80      	pop	{r7, pc}
 801122e:	bf00      	nop
 8011230:	200044b0 	.word	0x200044b0

08011234 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8011234:	b580      	push	{r7, lr}
 8011236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8011238:	4802      	ldr	r0, [pc, #8]	; (8011244 <CAN1_RX0_IRQHandler+0x10>)
 801123a:	f7f8 fd68 	bl	8009d0e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 801123e:	bf00      	nop
 8011240:	bd80      	pop	{r7, pc}
 8011242:	bf00      	nop
 8011244:	200044b0 	.word	0x200044b0

08011248 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8011248:	b580      	push	{r7, lr}
 801124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 801124c:	4802      	ldr	r0, [pc, #8]	; (8011258 <SPI2_IRQHandler+0x10>)
 801124e:	f7fb f87f 	bl	800c350 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8011252:	bf00      	nop
 8011254:	bd80      	pop	{r7, pc}
 8011256:	bf00      	nop
 8011258:	200044d8 	.word	0x200044d8

0801125c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 801125c:	b580      	push	{r7, lr}
 801125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8011260:	4802      	ldr	r0, [pc, #8]	; (801126c <USART2_IRQHandler+0x10>)
 8011262:	f7fc fcad 	bl	800dbc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8011266:	bf00      	nop
 8011268:	bd80      	pop	{r7, pc}
 801126a:	bf00      	nop
 801126c:	200045cc 	.word	0x200045cc

08011270 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8011270:	b580      	push	{r7, lr}
 8011272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8011274:	4802      	ldr	r0, [pc, #8]	; (8011280 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8011276:	f7fb fcfd 	bl	800cc74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 801127a:	bf00      	nop
 801127c:	bd80      	pop	{r7, pc}
 801127e:	bf00      	nop
 8011280:	2000458c 	.word	0x2000458c

08011284 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8011284:	b580      	push	{r7, lr}
 8011286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8011288:	4802      	ldr	r0, [pc, #8]	; (8011294 <DMA2_Stream0_IRQHandler+0x10>)
 801128a:	f7f9 f98d 	bl	800a5a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 801128e:	bf00      	nop
 8011290:	bd80      	pop	{r7, pc}
 8011292:	bf00      	nop
 8011294:	200043a4 	.word	0x200043a4

08011298 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8011298:	b580      	push	{r7, lr}
 801129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 801129c:	4802      	ldr	r0, [pc, #8]	; (80112a8 <DMA2_Stream1_IRQHandler+0x10>)
 801129e:	f7f9 f983 	bl	800a5a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80112a2:	bf00      	nop
 80112a4:	bd80      	pop	{r7, pc}
 80112a6:	bf00      	nop
 80112a8:	200042b4 	.word	0x200042b4

080112ac <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80112ac:	b580      	push	{r7, lr}
 80112ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80112b0:	4802      	ldr	r0, [pc, #8]	; (80112bc <DMA2_Stream2_IRQHandler+0x10>)
 80112b2:	f7f9 f979 	bl	800a5a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80112b6:	bf00      	nop
 80112b8:	bd80      	pop	{r7, pc}
 80112ba:	bf00      	nop
 80112bc:	20004404 	.word	0x20004404

080112c0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80112c0:	b580      	push	{r7, lr}
 80112c2:	b086      	sub	sp, #24
 80112c4:	af00      	add	r7, sp, #0
 80112c6:	60f8      	str	r0, [r7, #12]
 80112c8:	60b9      	str	r1, [r7, #8]
 80112ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80112cc:	2300      	movs	r3, #0
 80112ce:	617b      	str	r3, [r7, #20]
 80112d0:	e00a      	b.n	80112e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80112d2:	f3af 8000 	nop.w
 80112d6:	4601      	mov	r1, r0
 80112d8:	68bb      	ldr	r3, [r7, #8]
 80112da:	1c5a      	adds	r2, r3, #1
 80112dc:	60ba      	str	r2, [r7, #8]
 80112de:	b2ca      	uxtb	r2, r1
 80112e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80112e2:	697b      	ldr	r3, [r7, #20]
 80112e4:	3301      	adds	r3, #1
 80112e6:	617b      	str	r3, [r7, #20]
 80112e8:	697a      	ldr	r2, [r7, #20]
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	429a      	cmp	r2, r3
 80112ee:	dbf0      	blt.n	80112d2 <_read+0x12>
	}

return len;
 80112f0:	687b      	ldr	r3, [r7, #4]
}
 80112f2:	4618      	mov	r0, r3
 80112f4:	3718      	adds	r7, #24
 80112f6:	46bd      	mov	sp, r7
 80112f8:	bd80      	pop	{r7, pc}

080112fa <_close>:
	}
	return len;
}

int _close(int file)
{
 80112fa:	b480      	push	{r7}
 80112fc:	b083      	sub	sp, #12
 80112fe:	af00      	add	r7, sp, #0
 8011300:	6078      	str	r0, [r7, #4]
	return -1;
 8011302:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011306:	4618      	mov	r0, r3
 8011308:	370c      	adds	r7, #12
 801130a:	46bd      	mov	sp, r7
 801130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011310:	4770      	bx	lr

08011312 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8011312:	b480      	push	{r7}
 8011314:	b083      	sub	sp, #12
 8011316:	af00      	add	r7, sp, #0
 8011318:	6078      	str	r0, [r7, #4]
 801131a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 801131c:	683b      	ldr	r3, [r7, #0]
 801131e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8011322:	605a      	str	r2, [r3, #4]
	return 0;
 8011324:	2300      	movs	r3, #0
}
 8011326:	4618      	mov	r0, r3
 8011328:	370c      	adds	r7, #12
 801132a:	46bd      	mov	sp, r7
 801132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011330:	4770      	bx	lr

08011332 <_isatty>:

int _isatty(int file)
{
 8011332:	b480      	push	{r7}
 8011334:	b083      	sub	sp, #12
 8011336:	af00      	add	r7, sp, #0
 8011338:	6078      	str	r0, [r7, #4]
	return 1;
 801133a:	2301      	movs	r3, #1
}
 801133c:	4618      	mov	r0, r3
 801133e:	370c      	adds	r7, #12
 8011340:	46bd      	mov	sp, r7
 8011342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011346:	4770      	bx	lr

08011348 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8011348:	b480      	push	{r7}
 801134a:	b085      	sub	sp, #20
 801134c:	af00      	add	r7, sp, #0
 801134e:	60f8      	str	r0, [r7, #12]
 8011350:	60b9      	str	r1, [r7, #8]
 8011352:	607a      	str	r2, [r7, #4]
	return 0;
 8011354:	2300      	movs	r3, #0
}
 8011356:	4618      	mov	r0, r3
 8011358:	3714      	adds	r7, #20
 801135a:	46bd      	mov	sp, r7
 801135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011360:	4770      	bx	lr
	...

08011364 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8011364:	b580      	push	{r7, lr}
 8011366:	b084      	sub	sp, #16
 8011368:	af00      	add	r7, sp, #0
 801136a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 801136c:	4b11      	ldr	r3, [pc, #68]	; (80113b4 <_sbrk+0x50>)
 801136e:	681b      	ldr	r3, [r3, #0]
 8011370:	2b00      	cmp	r3, #0
 8011372:	d102      	bne.n	801137a <_sbrk+0x16>
		heap_end = &end;
 8011374:	4b0f      	ldr	r3, [pc, #60]	; (80113b4 <_sbrk+0x50>)
 8011376:	4a10      	ldr	r2, [pc, #64]	; (80113b8 <_sbrk+0x54>)
 8011378:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 801137a:	4b0e      	ldr	r3, [pc, #56]	; (80113b4 <_sbrk+0x50>)
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8011380:	4b0c      	ldr	r3, [pc, #48]	; (80113b4 <_sbrk+0x50>)
 8011382:	681a      	ldr	r2, [r3, #0]
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	4413      	add	r3, r2
 8011388:	466a      	mov	r2, sp
 801138a:	4293      	cmp	r3, r2
 801138c:	d907      	bls.n	801139e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 801138e:	f000 fae5 	bl	801195c <__errno>
 8011392:	4602      	mov	r2, r0
 8011394:	230c      	movs	r3, #12
 8011396:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8011398:	f04f 33ff 	mov.w	r3, #4294967295
 801139c:	e006      	b.n	80113ac <_sbrk+0x48>
	}

	heap_end += incr;
 801139e:	4b05      	ldr	r3, [pc, #20]	; (80113b4 <_sbrk+0x50>)
 80113a0:	681a      	ldr	r2, [r3, #0]
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	4413      	add	r3, r2
 80113a6:	4a03      	ldr	r2, [pc, #12]	; (80113b4 <_sbrk+0x50>)
 80113a8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80113aa:	68fb      	ldr	r3, [r7, #12]
}
 80113ac:	4618      	mov	r0, r3
 80113ae:	3710      	adds	r7, #16
 80113b0:	46bd      	mov	sp, r7
 80113b2:	bd80      	pop	{r7, pc}
 80113b4:	200041ec 	.word	0x200041ec
 80113b8:	20004610 	.word	0x20004610

080113bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80113bc:	b480      	push	{r7}
 80113be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80113c0:	4b16      	ldr	r3, [pc, #88]	; (801141c <SystemInit+0x60>)
 80113c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80113c6:	4a15      	ldr	r2, [pc, #84]	; (801141c <SystemInit+0x60>)
 80113c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80113cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80113d0:	4b13      	ldr	r3, [pc, #76]	; (8011420 <SystemInit+0x64>)
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	4a12      	ldr	r2, [pc, #72]	; (8011420 <SystemInit+0x64>)
 80113d6:	f043 0301 	orr.w	r3, r3, #1
 80113da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80113dc:	4b10      	ldr	r3, [pc, #64]	; (8011420 <SystemInit+0x64>)
 80113de:	2200      	movs	r2, #0
 80113e0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80113e2:	4b0f      	ldr	r3, [pc, #60]	; (8011420 <SystemInit+0x64>)
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	4a0e      	ldr	r2, [pc, #56]	; (8011420 <SystemInit+0x64>)
 80113e8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80113ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80113f0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80113f2:	4b0b      	ldr	r3, [pc, #44]	; (8011420 <SystemInit+0x64>)
 80113f4:	4a0b      	ldr	r2, [pc, #44]	; (8011424 <SystemInit+0x68>)
 80113f6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80113f8:	4b09      	ldr	r3, [pc, #36]	; (8011420 <SystemInit+0x64>)
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	4a08      	ldr	r2, [pc, #32]	; (8011420 <SystemInit+0x64>)
 80113fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011402:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8011404:	4b06      	ldr	r3, [pc, #24]	; (8011420 <SystemInit+0x64>)
 8011406:	2200      	movs	r2, #0
 8011408:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 801140a:	4b04      	ldr	r3, [pc, #16]	; (801141c <SystemInit+0x60>)
 801140c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8011410:	609a      	str	r2, [r3, #8]
#endif
}
 8011412:	bf00      	nop
 8011414:	46bd      	mov	sp, r7
 8011416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801141a:	4770      	bx	lr
 801141c:	e000ed00 	.word	0xe000ed00
 8011420:	40023800 	.word	0x40023800
 8011424:	24003010 	.word	0x24003010

08011428 <MX_TIM8_Init>:

TIM_HandleTypeDef htim8;

/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8011428:	b580      	push	{r7, lr}
 801142a:	b096      	sub	sp, #88	; 0x58
 801142c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 801142e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011432:	2200      	movs	r2, #0
 8011434:	601a      	str	r2, [r3, #0]
 8011436:	605a      	str	r2, [r3, #4]
 8011438:	609a      	str	r2, [r3, #8]
 801143a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 801143c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011440:	2200      	movs	r2, #0
 8011442:	601a      	str	r2, [r3, #0]
 8011444:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8011446:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801144a:	2200      	movs	r2, #0
 801144c:	601a      	str	r2, [r3, #0]
 801144e:	605a      	str	r2, [r3, #4]
 8011450:	609a      	str	r2, [r3, #8]
 8011452:	60da      	str	r2, [r3, #12]
 8011454:	611a      	str	r2, [r3, #16]
 8011456:	615a      	str	r2, [r3, #20]
 8011458:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 801145a:	1d3b      	adds	r3, r7, #4
 801145c:	2220      	movs	r2, #32
 801145e:	2100      	movs	r1, #0
 8011460:	4618      	mov	r0, r3
 8011462:	f000 fab0 	bl	80119c6 <memset>

  htim8.Instance = TIM8;
 8011466:	4b4a      	ldr	r3, [pc, #296]	; (8011590 <MX_TIM8_Init+0x168>)
 8011468:	4a4a      	ldr	r2, [pc, #296]	; (8011594 <MX_TIM8_Init+0x16c>)
 801146a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 801146c:	4b48      	ldr	r3, [pc, #288]	; (8011590 <MX_TIM8_Init+0x168>)
 801146e:	2200      	movs	r2, #0
 8011470:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8011472:	4b47      	ldr	r3, [pc, #284]	; (8011590 <MX_TIM8_Init+0x168>)
 8011474:	2220      	movs	r2, #32
 8011476:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 8000;
 8011478:	4b45      	ldr	r3, [pc, #276]	; (8011590 <MX_TIM8_Init+0x168>)
 801147a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801147e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8011480:	4b43      	ldr	r3, [pc, #268]	; (8011590 <MX_TIM8_Init+0x168>)
 8011482:	2200      	movs	r2, #0
 8011484:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8011486:	4b42      	ldr	r3, [pc, #264]	; (8011590 <MX_TIM8_Init+0x168>)
 8011488:	2200      	movs	r2, #0
 801148a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 801148c:	4b40      	ldr	r3, [pc, #256]	; (8011590 <MX_TIM8_Init+0x168>)
 801148e:	2280      	movs	r2, #128	; 0x80
 8011490:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8011492:	483f      	ldr	r0, [pc, #252]	; (8011590 <MX_TIM8_Init+0x168>)
 8011494:	f7fb fa70 	bl	800c978 <HAL_TIM_Base_Init>
 8011498:	4603      	mov	r3, r0
 801149a:	2b00      	cmp	r3, #0
 801149c:	d001      	beq.n	80114a2 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 801149e:	f7fe fe7d 	bl	801019c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80114a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80114a6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80114a8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80114ac:	4619      	mov	r1, r3
 80114ae:	4838      	ldr	r0, [pc, #224]	; (8011590 <MX_TIM8_Init+0x168>)
 80114b0:	f7fb fdae 	bl	800d010 <HAL_TIM_ConfigClockSource>
 80114b4:	4603      	mov	r3, r0
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d001      	beq.n	80114be <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80114ba:	f7fe fe6f 	bl	801019c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80114be:	4834      	ldr	r0, [pc, #208]	; (8011590 <MX_TIM8_Init+0x168>)
 80114c0:	f7fb fa85 	bl	800c9ce <HAL_TIM_PWM_Init>
 80114c4:	4603      	mov	r3, r0
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d001      	beq.n	80114ce <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80114ca:	f7fe fe67 	bl	801019c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80114ce:	2320      	movs	r3, #32
 80114d0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80114d2:	2300      	movs	r3, #0
 80114d4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80114d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80114da:	4619      	mov	r1, r3
 80114dc:	482c      	ldr	r0, [pc, #176]	; (8011590 <MX_TIM8_Init+0x168>)
 80114de:	f7fc fa51 	bl	800d984 <HAL_TIMEx_MasterConfigSynchronization>
 80114e2:	4603      	mov	r3, r0
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d001      	beq.n	80114ec <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80114e8:	f7fe fe58 	bl	801019c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80114ec:	2360      	movs	r3, #96	; 0x60
 80114ee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 4000;
 80114f0:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80114f4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80114f6:	2300      	movs	r3, #0
 80114f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80114fa:	2300      	movs	r3, #0
 80114fc:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80114fe:	2300      	movs	r3, #0
 8011500:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8011502:	2300      	movs	r3, #0
 8011504:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8011506:	2300      	movs	r3, #0
 8011508:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801150a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801150e:	2200      	movs	r2, #0
 8011510:	4619      	mov	r1, r3
 8011512:	481f      	ldr	r0, [pc, #124]	; (8011590 <MX_TIM8_Init+0x168>)
 8011514:	f7fb fcb6 	bl	800ce84 <HAL_TIM_PWM_ConfigChannel>
 8011518:	4603      	mov	r3, r0
 801151a:	2b00      	cmp	r3, #0
 801151c:	d001      	beq.n	8011522 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 801151e:	f7fe fe3d 	bl	801019c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8011522:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011526:	2204      	movs	r2, #4
 8011528:	4619      	mov	r1, r3
 801152a:	4819      	ldr	r0, [pc, #100]	; (8011590 <MX_TIM8_Init+0x168>)
 801152c:	f7fb fcaa 	bl	800ce84 <HAL_TIM_PWM_ConfigChannel>
 8011530:	4603      	mov	r3, r0
 8011532:	2b00      	cmp	r3, #0
 8011534:	d001      	beq.n	801153a <MX_TIM8_Init+0x112>
  {
    Error_Handler();
 8011536:	f7fe fe31 	bl	801019c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 801153a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801153e:	2208      	movs	r2, #8
 8011540:	4619      	mov	r1, r3
 8011542:	4813      	ldr	r0, [pc, #76]	; (8011590 <MX_TIM8_Init+0x168>)
 8011544:	f7fb fc9e 	bl	800ce84 <HAL_TIM_PWM_ConfigChannel>
 8011548:	4603      	mov	r3, r0
 801154a:	2b00      	cmp	r3, #0
 801154c:	d001      	beq.n	8011552 <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 801154e:	f7fe fe25 	bl	801019c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8011552:	2300      	movs	r3, #0
 8011554:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8011556:	2300      	movs	r3, #0
 8011558:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 801155a:	2300      	movs	r3, #0
 801155c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 40;
 801155e:	2328      	movs	r3, #40	; 0x28
 8011560:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8011562:	2300      	movs	r3, #0
 8011564:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 8011566:	2300      	movs	r3, #0
 8011568:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 801156a:	2300      	movs	r3, #0
 801156c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 801156e:	1d3b      	adds	r3, r7, #4
 8011570:	4619      	mov	r1, r3
 8011572:	4807      	ldr	r0, [pc, #28]	; (8011590 <MX_TIM8_Init+0x168>)
 8011574:	f7fc fa4b 	bl	800da0e <HAL_TIMEx_ConfigBreakDeadTime>
 8011578:	4603      	mov	r3, r0
 801157a:	2b00      	cmp	r3, #0
 801157c:	d001      	beq.n	8011582 <MX_TIM8_Init+0x15a>
  {
    Error_Handler();
 801157e:	f7fe fe0d 	bl	801019c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 8011582:	4803      	ldr	r0, [pc, #12]	; (8011590 <MX_TIM8_Init+0x168>)
 8011584:	f000 f830 	bl	80115e8 <HAL_TIM_MspPostInit>

}
 8011588:	bf00      	nop
 801158a:	3758      	adds	r7, #88	; 0x58
 801158c:	46bd      	mov	sp, r7
 801158e:	bd80      	pop	{r7, pc}
 8011590:	2000458c 	.word	0x2000458c
 8011594:	40010400 	.word	0x40010400

08011598 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8011598:	b580      	push	{r7, lr}
 801159a:	b084      	sub	sp, #16
 801159c:	af00      	add	r7, sp, #0
 801159e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	4a0e      	ldr	r2, [pc, #56]	; (80115e0 <HAL_TIM_Base_MspInit+0x48>)
 80115a6:	4293      	cmp	r3, r2
 80115a8:	d115      	bne.n	80115d6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80115aa:	2300      	movs	r3, #0
 80115ac:	60fb      	str	r3, [r7, #12]
 80115ae:	4b0d      	ldr	r3, [pc, #52]	; (80115e4 <HAL_TIM_Base_MspInit+0x4c>)
 80115b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80115b2:	4a0c      	ldr	r2, [pc, #48]	; (80115e4 <HAL_TIM_Base_MspInit+0x4c>)
 80115b4:	f043 0302 	orr.w	r3, r3, #2
 80115b8:	6453      	str	r3, [r2, #68]	; 0x44
 80115ba:	4b0a      	ldr	r3, [pc, #40]	; (80115e4 <HAL_TIM_Base_MspInit+0x4c>)
 80115bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80115be:	f003 0302 	and.w	r3, r3, #2
 80115c2:	60fb      	str	r3, [r7, #12]
 80115c4:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80115c6:	2200      	movs	r2, #0
 80115c8:	2100      	movs	r1, #0
 80115ca:	202c      	movs	r0, #44	; 0x2c
 80115cc:	f7f8 fe85 	bl	800a2da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80115d0:	202c      	movs	r0, #44	; 0x2c
 80115d2:	f7f8 fe9e 	bl	800a312 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80115d6:	bf00      	nop
 80115d8:	3710      	adds	r7, #16
 80115da:	46bd      	mov	sp, r7
 80115dc:	bd80      	pop	{r7, pc}
 80115de:	bf00      	nop
 80115e0:	40010400 	.word	0x40010400
 80115e4:	40023800 	.word	0x40023800

080115e8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80115e8:	b580      	push	{r7, lr}
 80115ea:	b08a      	sub	sp, #40	; 0x28
 80115ec:	af00      	add	r7, sp, #0
 80115ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80115f0:	f107 0314 	add.w	r3, r7, #20
 80115f4:	2200      	movs	r2, #0
 80115f6:	601a      	str	r2, [r3, #0]
 80115f8:	605a      	str	r2, [r3, #4]
 80115fa:	609a      	str	r2, [r3, #8]
 80115fc:	60da      	str	r2, [r3, #12]
 80115fe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	4a30      	ldr	r2, [pc, #192]	; (80116c8 <HAL_TIM_MspPostInit+0xe0>)
 8011606:	4293      	cmp	r3, r2
 8011608:	d15a      	bne.n	80116c0 <HAL_TIM_MspPostInit+0xd8>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801160a:	2300      	movs	r3, #0
 801160c:	613b      	str	r3, [r7, #16]
 801160e:	4b2f      	ldr	r3, [pc, #188]	; (80116cc <HAL_TIM_MspPostInit+0xe4>)
 8011610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011612:	4a2e      	ldr	r2, [pc, #184]	; (80116cc <HAL_TIM_MspPostInit+0xe4>)
 8011614:	f043 0301 	orr.w	r3, r3, #1
 8011618:	6313      	str	r3, [r2, #48]	; 0x30
 801161a:	4b2c      	ldr	r3, [pc, #176]	; (80116cc <HAL_TIM_MspPostInit+0xe4>)
 801161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801161e:	f003 0301 	and.w	r3, r3, #1
 8011622:	613b      	str	r3, [r7, #16]
 8011624:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011626:	2300      	movs	r3, #0
 8011628:	60fb      	str	r3, [r7, #12]
 801162a:	4b28      	ldr	r3, [pc, #160]	; (80116cc <HAL_TIM_MspPostInit+0xe4>)
 801162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801162e:	4a27      	ldr	r2, [pc, #156]	; (80116cc <HAL_TIM_MspPostInit+0xe4>)
 8011630:	f043 0302 	orr.w	r3, r3, #2
 8011634:	6313      	str	r3, [r2, #48]	; 0x30
 8011636:	4b25      	ldr	r3, [pc, #148]	; (80116cc <HAL_TIM_MspPostInit+0xe4>)
 8011638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801163a:	f003 0302 	and.w	r3, r3, #2
 801163e:	60fb      	str	r3, [r7, #12]
 8011640:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011642:	2300      	movs	r3, #0
 8011644:	60bb      	str	r3, [r7, #8]
 8011646:	4b21      	ldr	r3, [pc, #132]	; (80116cc <HAL_TIM_MspPostInit+0xe4>)
 8011648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801164a:	4a20      	ldr	r2, [pc, #128]	; (80116cc <HAL_TIM_MspPostInit+0xe4>)
 801164c:	f043 0304 	orr.w	r3, r3, #4
 8011650:	6313      	str	r3, [r2, #48]	; 0x30
 8011652:	4b1e      	ldr	r3, [pc, #120]	; (80116cc <HAL_TIM_MspPostInit+0xe4>)
 8011654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011656:	f003 0304 	and.w	r3, r3, #4
 801165a:	60bb      	str	r3, [r7, #8]
 801165c:	68bb      	ldr	r3, [r7, #8]
    PB1     ------> TIM8_CH3N
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 801165e:	2380      	movs	r3, #128	; 0x80
 8011660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011662:	2302      	movs	r3, #2
 8011664:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011666:	2300      	movs	r3, #0
 8011668:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801166a:	2300      	movs	r3, #0
 801166c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 801166e:	2303      	movs	r3, #3
 8011670:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011672:	f107 0314 	add.w	r3, r7, #20
 8011676:	4619      	mov	r1, r3
 8011678:	4815      	ldr	r0, [pc, #84]	; (80116d0 <HAL_TIM_MspPostInit+0xe8>)
 801167a:	f7f9 fce1 	bl	800b040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 801167e:	2303      	movs	r3, #3
 8011680:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011682:	2302      	movs	r3, #2
 8011684:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011686:	2300      	movs	r3, #0
 8011688:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801168a:	2300      	movs	r3, #0
 801168c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 801168e:	2303      	movs	r3, #3
 8011690:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011692:	f107 0314 	add.w	r3, r7, #20
 8011696:	4619      	mov	r1, r3
 8011698:	480e      	ldr	r0, [pc, #56]	; (80116d4 <HAL_TIM_MspPostInit+0xec>)
 801169a:	f7f9 fcd1 	bl	800b040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 801169e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80116a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80116a4:	2302      	movs	r3, #2
 80116a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80116a8:	2300      	movs	r3, #0
 80116aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80116ac:	2300      	movs	r3, #0
 80116ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80116b0:	2303      	movs	r3, #3
 80116b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80116b4:	f107 0314 	add.w	r3, r7, #20
 80116b8:	4619      	mov	r1, r3
 80116ba:	4807      	ldr	r0, [pc, #28]	; (80116d8 <HAL_TIM_MspPostInit+0xf0>)
 80116bc:	f7f9 fcc0 	bl	800b040 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80116c0:	bf00      	nop
 80116c2:	3728      	adds	r7, #40	; 0x28
 80116c4:	46bd      	mov	sp, r7
 80116c6:	bd80      	pop	{r7, pc}
 80116c8:	40010400 	.word	0x40010400
 80116cc:	40023800 	.word	0x40023800
 80116d0:	40020000 	.word	0x40020000
 80116d4:	40020400 	.word	0x40020400
 80116d8:	40020800 	.word	0x40020800

080116dc <TIM_Init>:
/* USER CODE BEGIN 1 */



void TIM_Init()
{
 80116dc:	b580      	push	{r7, lr}
 80116de:	af00      	add	r7, sp, #0
	  __HAL_TIM_DISABLE_IT(&htim8, TIM_IT_CC2);
	  __HAL_TIM_DISABLE_IT(&htim8, TIM_IT_CC3);
	  __HAL_TIM_DISABLE_IT(&htim8, TIM_IT_CC4);
	  __HAL_TIM_DISABLE_IT(&htim8, TIM_IT_COM);
	  __HAL_TIM_DISABLE_IT(&htim8, TIM_IT_BREAK);*/
	  __HAL_TIM_CLEAR_FLAG(&htim8, TIM_FLAG_UPDATE);
 80116e0:	4b08      	ldr	r3, [pc, #32]	; (8011704 <TIM_Init+0x28>)
 80116e2:	681b      	ldr	r3, [r3, #0]
 80116e4:	f06f 0201 	mvn.w	r2, #1
 80116e8:	611a      	str	r2, [r3, #16]
	  __HAL_TIM_ENABLE_IT(&htim8, TIM_IT_UPDATE);
 80116ea:	4b06      	ldr	r3, [pc, #24]	; (8011704 <TIM_Init+0x28>)
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	68da      	ldr	r2, [r3, #12]
 80116f0:	4b04      	ldr	r3, [pc, #16]	; (8011704 <TIM_Init+0x28>)
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	f042 0201 	orr.w	r2, r2, #1
 80116f8:	60da      	str	r2, [r3, #12]


	  startPWM();
 80116fa:	f000 f805 	bl	8011708 <startPWM>


}
 80116fe:	bf00      	nop
 8011700:	bd80      	pop	{r7, pc}
 8011702:	bf00      	nop
 8011704:	2000458c 	.word	0x2000458c

08011708 <startPWM>:



inline void startPWM()
{
 8011708:	b580      	push	{r7, lr}
 801170a:	af00      	add	r7, sp, #0


	// 3phase PWM Starting
	HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_1);
 801170c:	2100      	movs	r1, #0
 801170e:	480c      	ldr	r0, [pc, #48]	; (8011740 <startPWM+0x38>)
 8011710:	f7fb f992 	bl	800ca38 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_2);
 8011714:	2104      	movs	r1, #4
 8011716:	480a      	ldr	r0, [pc, #40]	; (8011740 <startPWM+0x38>)
 8011718:	f7fb f98e 	bl	800ca38 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim8, TIM_CHANNEL_3);
 801171c:	2108      	movs	r1, #8
 801171e:	4808      	ldr	r0, [pc, #32]	; (8011740 <startPWM+0x38>)
 8011720:	f7fb f98a 	bl	800ca38 <HAL_TIM_PWM_Start_IT>

	HAL_TIMEx_PWMN_Start_IT(&htim8, TIM_CHANNEL_1);
 8011724:	2100      	movs	r1, #0
 8011726:	4806      	ldr	r0, [pc, #24]	; (8011740 <startPWM+0x38>)
 8011728:	f7fc f861 	bl	800d7ee <HAL_TIMEx_PWMN_Start_IT>
	HAL_TIMEx_PWMN_Start_IT(&htim8, TIM_CHANNEL_2);
 801172c:	2104      	movs	r1, #4
 801172e:	4804      	ldr	r0, [pc, #16]	; (8011740 <startPWM+0x38>)
 8011730:	f7fc f85d 	bl	800d7ee <HAL_TIMEx_PWMN_Start_IT>
	HAL_TIMEx_PWMN_Start_IT(&htim8, TIM_CHANNEL_3);
 8011734:	2108      	movs	r1, #8
 8011736:	4802      	ldr	r0, [pc, #8]	; (8011740 <startPWM+0x38>)
 8011738:	f7fc f859 	bl	800d7ee <HAL_TIMEx_PWMN_Start_IT>

}
 801173c:	bf00      	nop
 801173e:	bd80      	pop	{r7, pc}
 8011740:	2000458c 	.word	0x2000458c

08011744 <stopPWM>:



inline void stopPWM()
{
 8011744:	b580      	push	{r7, lr}
 8011746:	af00      	add	r7, sp, #0

	// 3phase PWM Stopping
	HAL_TIM_PWM_Stop_IT(&htim8, TIM_CHANNEL_1);
 8011748:	2100      	movs	r1, #0
 801174a:	480c      	ldr	r0, [pc, #48]	; (801177c <stopPWM+0x38>)
 801174c:	f7fb f9f8 	bl	800cb40 <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&htim8, TIM_CHANNEL_2);
 8011750:	2104      	movs	r1, #4
 8011752:	480a      	ldr	r0, [pc, #40]	; (801177c <stopPWM+0x38>)
 8011754:	f7fb f9f4 	bl	800cb40 <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_PWM_Stop_IT(&htim8, TIM_CHANNEL_3);
 8011758:	2108      	movs	r1, #8
 801175a:	4808      	ldr	r0, [pc, #32]	; (801177c <stopPWM+0x38>)
 801175c:	f7fb f9f0 	bl	800cb40 <HAL_TIM_PWM_Stop_IT>

	HAL_TIMEx_PWMN_Stop_IT(&htim8, TIM_CHANNEL_1);
 8011760:	2100      	movs	r1, #0
 8011762:	4806      	ldr	r0, [pc, #24]	; (801177c <stopPWM+0x38>)
 8011764:	f7fc f898 	bl	800d898 <HAL_TIMEx_PWMN_Stop_IT>
	HAL_TIMEx_PWMN_Stop_IT(&htim8, TIM_CHANNEL_2);
 8011768:	2104      	movs	r1, #4
 801176a:	4804      	ldr	r0, [pc, #16]	; (801177c <stopPWM+0x38>)
 801176c:	f7fc f894 	bl	800d898 <HAL_TIMEx_PWMN_Stop_IT>
	HAL_TIMEx_PWMN_Stop_IT(&htim8, TIM_CHANNEL_3);
 8011770:	2108      	movs	r1, #8
 8011772:	4802      	ldr	r0, [pc, #8]	; (801177c <stopPWM+0x38>)
 8011774:	f7fc f890 	bl	800d898 <HAL_TIMEx_PWMN_Stop_IT>

}
 8011778:	bf00      	nop
 801177a:	bd80      	pop	{r7, pc}
 801177c:	2000458c 	.word	0x2000458c

08011780 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim)
{
 8011780:	b580      	push	{r7, lr}
 8011782:	b082      	sub	sp, #8
 8011784:	af00      	add	r7, sp, #0
 8011786:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM8)
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	4a11      	ldr	r2, [pc, #68]	; (80117d4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 801178e:	4293      	cmp	r3, r2
 8011790:	d11b      	bne.n	80117ca <HAL_TIM_PeriodElapsedCallback+0x4a>
	{

		if(!__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	f003 0310 	and.w	r3, r3, #16
 801179c:	2b10      	cmp	r3, #16
 801179e:	d014      	beq.n	80117ca <HAL_TIM_PeriodElapsedCallback+0x4a>
		{

			currentControl();
 80117a0:	f7fc fe62 	bl	800e468 <currentControl>

			// timeout control
			if(timeoutCount < TIMEOUT_MS * PWM_FREQ / 1000)
 80117a4:	4b0c      	ldr	r3, [pc, #48]	; (80117d8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80117ac:	d205      	bcs.n	80117ba <HAL_TIM_PeriodElapsedCallback+0x3a>
			{
				timeoutCount += 1;
 80117ae:	4b0a      	ldr	r3, [pc, #40]	; (80117d8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80117b0:	681b      	ldr	r3, [r3, #0]
 80117b2:	3301      	adds	r3, #1
 80117b4:	4a08      	ldr	r2, [pc, #32]	; (80117d8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80117b6:	6013      	str	r3, [r2, #0]
		}


	}

}
 80117b8:	e007      	b.n	80117ca <HAL_TIM_PeriodElapsedCallback+0x4a>
				stopPWM();
 80117ba:	f7ff ffc3 	bl	8011744 <stopPWM>
				timeoutCount = 0;
 80117be:	4b06      	ldr	r3, [pc, #24]	; (80117d8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80117c0:	2200      	movs	r2, #0
 80117c2:	601a      	str	r2, [r3, #0]
				timeoutState = 1;
 80117c4:	4b05      	ldr	r3, [pc, #20]	; (80117dc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80117c6:	2201      	movs	r2, #1
 80117c8:	701a      	strb	r2, [r3, #0]
}
 80117ca:	bf00      	nop
 80117cc:	3708      	adds	r7, #8
 80117ce:	46bd      	mov	sp, r7
 80117d0:	bd80      	pop	{r7, pc}
 80117d2:	bf00      	nop
 80117d4:	40010400 	.word	0x40010400
 80117d8:	200041fc 	.word	0x200041fc
 80117dc:	20004200 	.word	0x20004200

080117e0 <timeoutReset>:


inline void timeoutReset()
{
 80117e0:	b580      	push	{r7, lr}
 80117e2:	af00      	add	r7, sp, #0
	timeoutCount = 0;
 80117e4:	4b09      	ldr	r3, [pc, #36]	; (801180c <timeoutReset+0x2c>)
 80117e6:	2200      	movs	r2, #0
 80117e8:	601a      	str	r2, [r3, #0]
	if(timeoutState == 1)
 80117ea:	4b09      	ldr	r3, [pc, #36]	; (8011810 <timeoutReset+0x30>)
 80117ec:	781b      	ldrb	r3, [r3, #0]
 80117ee:	b2db      	uxtb	r3, r3
 80117f0:	2b01      	cmp	r3, #1
 80117f2:	d108      	bne.n	8011806 <timeoutReset+0x26>
	{
		timeoutState = 0;
 80117f4:	4b06      	ldr	r3, [pc, #24]	; (8011810 <timeoutReset+0x30>)
 80117f6:	2200      	movs	r2, #0
 80117f8:	701a      	strb	r2, [r3, #0]
		ASR_Reset();
 80117fa:	f7fd fa87 	bl	800ed0c <ASR_Reset>
		ACR_Reset();
 80117fe:	f7fd f88d 	bl	800e91c <ACR_Reset>
		startPWM();
 8011802:	f7ff ff81 	bl	8011708 <startPWM>
	}
}
 8011806:	bf00      	nop
 8011808:	bd80      	pop	{r7, pc}
 801180a:	bf00      	nop
 801180c:	200041fc 	.word	0x200041fc
 8011810:	20004200 	.word	0x20004200

08011814 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8011814:	b580      	push	{r7, lr}
 8011816:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8011818:	4b11      	ldr	r3, [pc, #68]	; (8011860 <MX_USART2_UART_Init+0x4c>)
 801181a:	4a12      	ldr	r2, [pc, #72]	; (8011864 <MX_USART2_UART_Init+0x50>)
 801181c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 801181e:	4b10      	ldr	r3, [pc, #64]	; (8011860 <MX_USART2_UART_Init+0x4c>)
 8011820:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8011824:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8011826:	4b0e      	ldr	r3, [pc, #56]	; (8011860 <MX_USART2_UART_Init+0x4c>)
 8011828:	2200      	movs	r2, #0
 801182a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 801182c:	4b0c      	ldr	r3, [pc, #48]	; (8011860 <MX_USART2_UART_Init+0x4c>)
 801182e:	2200      	movs	r2, #0
 8011830:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8011832:	4b0b      	ldr	r3, [pc, #44]	; (8011860 <MX_USART2_UART_Init+0x4c>)
 8011834:	2200      	movs	r2, #0
 8011836:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8011838:	4b09      	ldr	r3, [pc, #36]	; (8011860 <MX_USART2_UART_Init+0x4c>)
 801183a:	220c      	movs	r2, #12
 801183c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801183e:	4b08      	ldr	r3, [pc, #32]	; (8011860 <MX_USART2_UART_Init+0x4c>)
 8011840:	2200      	movs	r2, #0
 8011842:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8011844:	4b06      	ldr	r3, [pc, #24]	; (8011860 <MX_USART2_UART_Init+0x4c>)
 8011846:	2200      	movs	r2, #0
 8011848:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 801184a:	4805      	ldr	r0, [pc, #20]	; (8011860 <MX_USART2_UART_Init+0x4c>)
 801184c:	f7fc f96a 	bl	800db24 <HAL_UART_Init>
 8011850:	4603      	mov	r3, r0
 8011852:	2b00      	cmp	r3, #0
 8011854:	d001      	beq.n	801185a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8011856:	f7fe fca1 	bl	801019c <Error_Handler>
  }

}
 801185a:	bf00      	nop
 801185c:	bd80      	pop	{r7, pc}
 801185e:	bf00      	nop
 8011860:	200045cc 	.word	0x200045cc
 8011864:	40004400 	.word	0x40004400

08011868 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8011868:	b580      	push	{r7, lr}
 801186a:	b08a      	sub	sp, #40	; 0x28
 801186c:	af00      	add	r7, sp, #0
 801186e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011870:	f107 0314 	add.w	r3, r7, #20
 8011874:	2200      	movs	r2, #0
 8011876:	601a      	str	r2, [r3, #0]
 8011878:	605a      	str	r2, [r3, #4]
 801187a:	609a      	str	r2, [r3, #8]
 801187c:	60da      	str	r2, [r3, #12]
 801187e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	4a1d      	ldr	r2, [pc, #116]	; (80118fc <HAL_UART_MspInit+0x94>)
 8011886:	4293      	cmp	r3, r2
 8011888:	d133      	bne.n	80118f2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 801188a:	2300      	movs	r3, #0
 801188c:	613b      	str	r3, [r7, #16]
 801188e:	4b1c      	ldr	r3, [pc, #112]	; (8011900 <HAL_UART_MspInit+0x98>)
 8011890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011892:	4a1b      	ldr	r2, [pc, #108]	; (8011900 <HAL_UART_MspInit+0x98>)
 8011894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011898:	6413      	str	r3, [r2, #64]	; 0x40
 801189a:	4b19      	ldr	r3, [pc, #100]	; (8011900 <HAL_UART_MspInit+0x98>)
 801189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801189e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80118a2:	613b      	str	r3, [r7, #16]
 80118a4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80118a6:	2300      	movs	r3, #0
 80118a8:	60fb      	str	r3, [r7, #12]
 80118aa:	4b15      	ldr	r3, [pc, #84]	; (8011900 <HAL_UART_MspInit+0x98>)
 80118ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118ae:	4a14      	ldr	r2, [pc, #80]	; (8011900 <HAL_UART_MspInit+0x98>)
 80118b0:	f043 0301 	orr.w	r3, r3, #1
 80118b4:	6313      	str	r3, [r2, #48]	; 0x30
 80118b6:	4b12      	ldr	r3, [pc, #72]	; (8011900 <HAL_UART_MspInit+0x98>)
 80118b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118ba:	f003 0301 	and.w	r3, r3, #1
 80118be:	60fb      	str	r3, [r7, #12]
 80118c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80118c2:	230c      	movs	r3, #12
 80118c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80118c6:	2302      	movs	r3, #2
 80118c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80118ca:	2301      	movs	r3, #1
 80118cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80118ce:	2303      	movs	r3, #3
 80118d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80118d2:	2307      	movs	r3, #7
 80118d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80118d6:	f107 0314 	add.w	r3, r7, #20
 80118da:	4619      	mov	r1, r3
 80118dc:	4809      	ldr	r0, [pc, #36]	; (8011904 <HAL_UART_MspInit+0x9c>)
 80118de:	f7f9 fbaf 	bl	800b040 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80118e2:	2200      	movs	r2, #0
 80118e4:	2100      	movs	r1, #0
 80118e6:	2026      	movs	r0, #38	; 0x26
 80118e8:	f7f8 fcf7 	bl	800a2da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80118ec:	2026      	movs	r0, #38	; 0x26
 80118ee:	f7f8 fd10 	bl	800a312 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80118f2:	bf00      	nop
 80118f4:	3728      	adds	r7, #40	; 0x28
 80118f6:	46bd      	mov	sp, r7
 80118f8:	bd80      	pop	{r7, pc}
 80118fa:	bf00      	nop
 80118fc:	40004400 	.word	0x40004400
 8011900:	40023800 	.word	0x40023800
 8011904:	40020000 	.word	0x40020000

08011908 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8011908:	f8df d034 	ldr.w	sp, [pc, #52]	; 8011940 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 801190c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 801190e:	e003      	b.n	8011918 <LoopCopyDataInit>

08011910 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8011910:	4b0c      	ldr	r3, [pc, #48]	; (8011944 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8011912:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8011914:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8011916:	3104      	adds	r1, #4

08011918 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8011918:	480b      	ldr	r0, [pc, #44]	; (8011948 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 801191a:	4b0c      	ldr	r3, [pc, #48]	; (801194c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 801191c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 801191e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8011920:	d3f6      	bcc.n	8011910 <CopyDataInit>
  ldr  r2, =_sbss
 8011922:	4a0b      	ldr	r2, [pc, #44]	; (8011950 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8011924:	e002      	b.n	801192c <LoopFillZerobss>

08011926 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8011926:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8011928:	f842 3b04 	str.w	r3, [r2], #4

0801192c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 801192c:	4b09      	ldr	r3, [pc, #36]	; (8011954 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 801192e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8011930:	d3f9      	bcc.n	8011926 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8011932:	f7ff fd43 	bl	80113bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8011936:	f000 f817 	bl	8011968 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801193a:	f7fe fa35 	bl	800fda8 <main>
  bx  lr    
 801193e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8011940:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8011944:	080265fc 	.word	0x080265fc
  ldr  r0, =_sdata
 8011948:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 801194c:	200000a4 	.word	0x200000a4
  ldr  r2, =_sbss
 8011950:	200000a4 	.word	0x200000a4
  ldr  r3, = _ebss
 8011954:	20004610 	.word	0x20004610

08011958 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8011958:	e7fe      	b.n	8011958 <ADC_IRQHandler>
	...

0801195c <__errno>:
 801195c:	4b01      	ldr	r3, [pc, #4]	; (8011964 <__errno+0x8>)
 801195e:	6818      	ldr	r0, [r3, #0]
 8011960:	4770      	bx	lr
 8011962:	bf00      	nop
 8011964:	2000003c 	.word	0x2000003c

08011968 <__libc_init_array>:
 8011968:	b570      	push	{r4, r5, r6, lr}
 801196a:	4e0d      	ldr	r6, [pc, #52]	; (80119a0 <__libc_init_array+0x38>)
 801196c:	4c0d      	ldr	r4, [pc, #52]	; (80119a4 <__libc_init_array+0x3c>)
 801196e:	1ba4      	subs	r4, r4, r6
 8011970:	10a4      	asrs	r4, r4, #2
 8011972:	2500      	movs	r5, #0
 8011974:	42a5      	cmp	r5, r4
 8011976:	d109      	bne.n	801198c <__libc_init_array+0x24>
 8011978:	4e0b      	ldr	r6, [pc, #44]	; (80119a8 <__libc_init_array+0x40>)
 801197a:	4c0c      	ldr	r4, [pc, #48]	; (80119ac <__libc_init_array+0x44>)
 801197c:	f001 f85a 	bl	8012a34 <_init>
 8011980:	1ba4      	subs	r4, r4, r6
 8011982:	10a4      	asrs	r4, r4, #2
 8011984:	2500      	movs	r5, #0
 8011986:	42a5      	cmp	r5, r4
 8011988:	d105      	bne.n	8011996 <__libc_init_array+0x2e>
 801198a:	bd70      	pop	{r4, r5, r6, pc}
 801198c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011990:	4798      	blx	r3
 8011992:	3501      	adds	r5, #1
 8011994:	e7ee      	b.n	8011974 <__libc_init_array+0xc>
 8011996:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801199a:	4798      	blx	r3
 801199c:	3501      	adds	r5, #1
 801199e:	e7f2      	b.n	8011986 <__libc_init_array+0x1e>
 80119a0:	080265f4 	.word	0x080265f4
 80119a4:	080265f4 	.word	0x080265f4
 80119a8:	080265f4 	.word	0x080265f4
 80119ac:	080265f8 	.word	0x080265f8

080119b0 <memcpy>:
 80119b0:	b510      	push	{r4, lr}
 80119b2:	1e43      	subs	r3, r0, #1
 80119b4:	440a      	add	r2, r1
 80119b6:	4291      	cmp	r1, r2
 80119b8:	d100      	bne.n	80119bc <memcpy+0xc>
 80119ba:	bd10      	pop	{r4, pc}
 80119bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80119c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80119c4:	e7f7      	b.n	80119b6 <memcpy+0x6>

080119c6 <memset>:
 80119c6:	4402      	add	r2, r0
 80119c8:	4603      	mov	r3, r0
 80119ca:	4293      	cmp	r3, r2
 80119cc:	d100      	bne.n	80119d0 <memset+0xa>
 80119ce:	4770      	bx	lr
 80119d0:	f803 1b01 	strb.w	r1, [r3], #1
 80119d4:	e7f9      	b.n	80119ca <memset+0x4>
	...

080119d8 <iprintf>:
 80119d8:	b40f      	push	{r0, r1, r2, r3}
 80119da:	4b0a      	ldr	r3, [pc, #40]	; (8011a04 <iprintf+0x2c>)
 80119dc:	b513      	push	{r0, r1, r4, lr}
 80119de:	681c      	ldr	r4, [r3, #0]
 80119e0:	b124      	cbz	r4, 80119ec <iprintf+0x14>
 80119e2:	69a3      	ldr	r3, [r4, #24]
 80119e4:	b913      	cbnz	r3, 80119ec <iprintf+0x14>
 80119e6:	4620      	mov	r0, r4
 80119e8:	f000 fa22 	bl	8011e30 <__sinit>
 80119ec:	ab05      	add	r3, sp, #20
 80119ee:	9a04      	ldr	r2, [sp, #16]
 80119f0:	68a1      	ldr	r1, [r4, #8]
 80119f2:	9301      	str	r3, [sp, #4]
 80119f4:	4620      	mov	r0, r4
 80119f6:	f000 fbdb 	bl	80121b0 <_vfiprintf_r>
 80119fa:	b002      	add	sp, #8
 80119fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011a00:	b004      	add	sp, #16
 8011a02:	4770      	bx	lr
 8011a04:	2000003c 	.word	0x2000003c

08011a08 <_puts_r>:
 8011a08:	b570      	push	{r4, r5, r6, lr}
 8011a0a:	460e      	mov	r6, r1
 8011a0c:	4605      	mov	r5, r0
 8011a0e:	b118      	cbz	r0, 8011a18 <_puts_r+0x10>
 8011a10:	6983      	ldr	r3, [r0, #24]
 8011a12:	b90b      	cbnz	r3, 8011a18 <_puts_r+0x10>
 8011a14:	f000 fa0c 	bl	8011e30 <__sinit>
 8011a18:	69ab      	ldr	r3, [r5, #24]
 8011a1a:	68ac      	ldr	r4, [r5, #8]
 8011a1c:	b913      	cbnz	r3, 8011a24 <_puts_r+0x1c>
 8011a1e:	4628      	mov	r0, r5
 8011a20:	f000 fa06 	bl	8011e30 <__sinit>
 8011a24:	4b23      	ldr	r3, [pc, #140]	; (8011ab4 <_puts_r+0xac>)
 8011a26:	429c      	cmp	r4, r3
 8011a28:	d117      	bne.n	8011a5a <_puts_r+0x52>
 8011a2a:	686c      	ldr	r4, [r5, #4]
 8011a2c:	89a3      	ldrh	r3, [r4, #12]
 8011a2e:	071b      	lsls	r3, r3, #28
 8011a30:	d51d      	bpl.n	8011a6e <_puts_r+0x66>
 8011a32:	6923      	ldr	r3, [r4, #16]
 8011a34:	b1db      	cbz	r3, 8011a6e <_puts_r+0x66>
 8011a36:	3e01      	subs	r6, #1
 8011a38:	68a3      	ldr	r3, [r4, #8]
 8011a3a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011a3e:	3b01      	subs	r3, #1
 8011a40:	60a3      	str	r3, [r4, #8]
 8011a42:	b9e9      	cbnz	r1, 8011a80 <_puts_r+0x78>
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	da2e      	bge.n	8011aa6 <_puts_r+0x9e>
 8011a48:	4622      	mov	r2, r4
 8011a4a:	210a      	movs	r1, #10
 8011a4c:	4628      	mov	r0, r5
 8011a4e:	f000 f83f 	bl	8011ad0 <__swbuf_r>
 8011a52:	3001      	adds	r0, #1
 8011a54:	d011      	beq.n	8011a7a <_puts_r+0x72>
 8011a56:	200a      	movs	r0, #10
 8011a58:	e011      	b.n	8011a7e <_puts_r+0x76>
 8011a5a:	4b17      	ldr	r3, [pc, #92]	; (8011ab8 <_puts_r+0xb0>)
 8011a5c:	429c      	cmp	r4, r3
 8011a5e:	d101      	bne.n	8011a64 <_puts_r+0x5c>
 8011a60:	68ac      	ldr	r4, [r5, #8]
 8011a62:	e7e3      	b.n	8011a2c <_puts_r+0x24>
 8011a64:	4b15      	ldr	r3, [pc, #84]	; (8011abc <_puts_r+0xb4>)
 8011a66:	429c      	cmp	r4, r3
 8011a68:	bf08      	it	eq
 8011a6a:	68ec      	ldreq	r4, [r5, #12]
 8011a6c:	e7de      	b.n	8011a2c <_puts_r+0x24>
 8011a6e:	4621      	mov	r1, r4
 8011a70:	4628      	mov	r0, r5
 8011a72:	f000 f87f 	bl	8011b74 <__swsetup_r>
 8011a76:	2800      	cmp	r0, #0
 8011a78:	d0dd      	beq.n	8011a36 <_puts_r+0x2e>
 8011a7a:	f04f 30ff 	mov.w	r0, #4294967295
 8011a7e:	bd70      	pop	{r4, r5, r6, pc}
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	da04      	bge.n	8011a8e <_puts_r+0x86>
 8011a84:	69a2      	ldr	r2, [r4, #24]
 8011a86:	429a      	cmp	r2, r3
 8011a88:	dc06      	bgt.n	8011a98 <_puts_r+0x90>
 8011a8a:	290a      	cmp	r1, #10
 8011a8c:	d004      	beq.n	8011a98 <_puts_r+0x90>
 8011a8e:	6823      	ldr	r3, [r4, #0]
 8011a90:	1c5a      	adds	r2, r3, #1
 8011a92:	6022      	str	r2, [r4, #0]
 8011a94:	7019      	strb	r1, [r3, #0]
 8011a96:	e7cf      	b.n	8011a38 <_puts_r+0x30>
 8011a98:	4622      	mov	r2, r4
 8011a9a:	4628      	mov	r0, r5
 8011a9c:	f000 f818 	bl	8011ad0 <__swbuf_r>
 8011aa0:	3001      	adds	r0, #1
 8011aa2:	d1c9      	bne.n	8011a38 <_puts_r+0x30>
 8011aa4:	e7e9      	b.n	8011a7a <_puts_r+0x72>
 8011aa6:	6823      	ldr	r3, [r4, #0]
 8011aa8:	200a      	movs	r0, #10
 8011aaa:	1c5a      	adds	r2, r3, #1
 8011aac:	6022      	str	r2, [r4, #0]
 8011aae:	7018      	strb	r0, [r3, #0]
 8011ab0:	e7e5      	b.n	8011a7e <_puts_r+0x76>
 8011ab2:	bf00      	nop
 8011ab4:	08026568 	.word	0x08026568
 8011ab8:	08026588 	.word	0x08026588
 8011abc:	08026548 	.word	0x08026548

08011ac0 <puts>:
 8011ac0:	4b02      	ldr	r3, [pc, #8]	; (8011acc <puts+0xc>)
 8011ac2:	4601      	mov	r1, r0
 8011ac4:	6818      	ldr	r0, [r3, #0]
 8011ac6:	f7ff bf9f 	b.w	8011a08 <_puts_r>
 8011aca:	bf00      	nop
 8011acc:	2000003c 	.word	0x2000003c

08011ad0 <__swbuf_r>:
 8011ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ad2:	460e      	mov	r6, r1
 8011ad4:	4614      	mov	r4, r2
 8011ad6:	4605      	mov	r5, r0
 8011ad8:	b118      	cbz	r0, 8011ae2 <__swbuf_r+0x12>
 8011ada:	6983      	ldr	r3, [r0, #24]
 8011adc:	b90b      	cbnz	r3, 8011ae2 <__swbuf_r+0x12>
 8011ade:	f000 f9a7 	bl	8011e30 <__sinit>
 8011ae2:	4b21      	ldr	r3, [pc, #132]	; (8011b68 <__swbuf_r+0x98>)
 8011ae4:	429c      	cmp	r4, r3
 8011ae6:	d12a      	bne.n	8011b3e <__swbuf_r+0x6e>
 8011ae8:	686c      	ldr	r4, [r5, #4]
 8011aea:	69a3      	ldr	r3, [r4, #24]
 8011aec:	60a3      	str	r3, [r4, #8]
 8011aee:	89a3      	ldrh	r3, [r4, #12]
 8011af0:	071a      	lsls	r2, r3, #28
 8011af2:	d52e      	bpl.n	8011b52 <__swbuf_r+0x82>
 8011af4:	6923      	ldr	r3, [r4, #16]
 8011af6:	b363      	cbz	r3, 8011b52 <__swbuf_r+0x82>
 8011af8:	6923      	ldr	r3, [r4, #16]
 8011afa:	6820      	ldr	r0, [r4, #0]
 8011afc:	1ac0      	subs	r0, r0, r3
 8011afe:	6963      	ldr	r3, [r4, #20]
 8011b00:	b2f6      	uxtb	r6, r6
 8011b02:	4283      	cmp	r3, r0
 8011b04:	4637      	mov	r7, r6
 8011b06:	dc04      	bgt.n	8011b12 <__swbuf_r+0x42>
 8011b08:	4621      	mov	r1, r4
 8011b0a:	4628      	mov	r0, r5
 8011b0c:	f000 f926 	bl	8011d5c <_fflush_r>
 8011b10:	bb28      	cbnz	r0, 8011b5e <__swbuf_r+0x8e>
 8011b12:	68a3      	ldr	r3, [r4, #8]
 8011b14:	3b01      	subs	r3, #1
 8011b16:	60a3      	str	r3, [r4, #8]
 8011b18:	6823      	ldr	r3, [r4, #0]
 8011b1a:	1c5a      	adds	r2, r3, #1
 8011b1c:	6022      	str	r2, [r4, #0]
 8011b1e:	701e      	strb	r6, [r3, #0]
 8011b20:	6963      	ldr	r3, [r4, #20]
 8011b22:	3001      	adds	r0, #1
 8011b24:	4283      	cmp	r3, r0
 8011b26:	d004      	beq.n	8011b32 <__swbuf_r+0x62>
 8011b28:	89a3      	ldrh	r3, [r4, #12]
 8011b2a:	07db      	lsls	r3, r3, #31
 8011b2c:	d519      	bpl.n	8011b62 <__swbuf_r+0x92>
 8011b2e:	2e0a      	cmp	r6, #10
 8011b30:	d117      	bne.n	8011b62 <__swbuf_r+0x92>
 8011b32:	4621      	mov	r1, r4
 8011b34:	4628      	mov	r0, r5
 8011b36:	f000 f911 	bl	8011d5c <_fflush_r>
 8011b3a:	b190      	cbz	r0, 8011b62 <__swbuf_r+0x92>
 8011b3c:	e00f      	b.n	8011b5e <__swbuf_r+0x8e>
 8011b3e:	4b0b      	ldr	r3, [pc, #44]	; (8011b6c <__swbuf_r+0x9c>)
 8011b40:	429c      	cmp	r4, r3
 8011b42:	d101      	bne.n	8011b48 <__swbuf_r+0x78>
 8011b44:	68ac      	ldr	r4, [r5, #8]
 8011b46:	e7d0      	b.n	8011aea <__swbuf_r+0x1a>
 8011b48:	4b09      	ldr	r3, [pc, #36]	; (8011b70 <__swbuf_r+0xa0>)
 8011b4a:	429c      	cmp	r4, r3
 8011b4c:	bf08      	it	eq
 8011b4e:	68ec      	ldreq	r4, [r5, #12]
 8011b50:	e7cb      	b.n	8011aea <__swbuf_r+0x1a>
 8011b52:	4621      	mov	r1, r4
 8011b54:	4628      	mov	r0, r5
 8011b56:	f000 f80d 	bl	8011b74 <__swsetup_r>
 8011b5a:	2800      	cmp	r0, #0
 8011b5c:	d0cc      	beq.n	8011af8 <__swbuf_r+0x28>
 8011b5e:	f04f 37ff 	mov.w	r7, #4294967295
 8011b62:	4638      	mov	r0, r7
 8011b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b66:	bf00      	nop
 8011b68:	08026568 	.word	0x08026568
 8011b6c:	08026588 	.word	0x08026588
 8011b70:	08026548 	.word	0x08026548

08011b74 <__swsetup_r>:
 8011b74:	4b32      	ldr	r3, [pc, #200]	; (8011c40 <__swsetup_r+0xcc>)
 8011b76:	b570      	push	{r4, r5, r6, lr}
 8011b78:	681d      	ldr	r5, [r3, #0]
 8011b7a:	4606      	mov	r6, r0
 8011b7c:	460c      	mov	r4, r1
 8011b7e:	b125      	cbz	r5, 8011b8a <__swsetup_r+0x16>
 8011b80:	69ab      	ldr	r3, [r5, #24]
 8011b82:	b913      	cbnz	r3, 8011b8a <__swsetup_r+0x16>
 8011b84:	4628      	mov	r0, r5
 8011b86:	f000 f953 	bl	8011e30 <__sinit>
 8011b8a:	4b2e      	ldr	r3, [pc, #184]	; (8011c44 <__swsetup_r+0xd0>)
 8011b8c:	429c      	cmp	r4, r3
 8011b8e:	d10f      	bne.n	8011bb0 <__swsetup_r+0x3c>
 8011b90:	686c      	ldr	r4, [r5, #4]
 8011b92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b96:	b29a      	uxth	r2, r3
 8011b98:	0715      	lsls	r5, r2, #28
 8011b9a:	d42c      	bmi.n	8011bf6 <__swsetup_r+0x82>
 8011b9c:	06d0      	lsls	r0, r2, #27
 8011b9e:	d411      	bmi.n	8011bc4 <__swsetup_r+0x50>
 8011ba0:	2209      	movs	r2, #9
 8011ba2:	6032      	str	r2, [r6, #0]
 8011ba4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011ba8:	81a3      	strh	r3, [r4, #12]
 8011baa:	f04f 30ff 	mov.w	r0, #4294967295
 8011bae:	e03e      	b.n	8011c2e <__swsetup_r+0xba>
 8011bb0:	4b25      	ldr	r3, [pc, #148]	; (8011c48 <__swsetup_r+0xd4>)
 8011bb2:	429c      	cmp	r4, r3
 8011bb4:	d101      	bne.n	8011bba <__swsetup_r+0x46>
 8011bb6:	68ac      	ldr	r4, [r5, #8]
 8011bb8:	e7eb      	b.n	8011b92 <__swsetup_r+0x1e>
 8011bba:	4b24      	ldr	r3, [pc, #144]	; (8011c4c <__swsetup_r+0xd8>)
 8011bbc:	429c      	cmp	r4, r3
 8011bbe:	bf08      	it	eq
 8011bc0:	68ec      	ldreq	r4, [r5, #12]
 8011bc2:	e7e6      	b.n	8011b92 <__swsetup_r+0x1e>
 8011bc4:	0751      	lsls	r1, r2, #29
 8011bc6:	d512      	bpl.n	8011bee <__swsetup_r+0x7a>
 8011bc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011bca:	b141      	cbz	r1, 8011bde <__swsetup_r+0x6a>
 8011bcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011bd0:	4299      	cmp	r1, r3
 8011bd2:	d002      	beq.n	8011bda <__swsetup_r+0x66>
 8011bd4:	4630      	mov	r0, r6
 8011bd6:	f000 fa19 	bl	801200c <_free_r>
 8011bda:	2300      	movs	r3, #0
 8011bdc:	6363      	str	r3, [r4, #52]	; 0x34
 8011bde:	89a3      	ldrh	r3, [r4, #12]
 8011be0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011be4:	81a3      	strh	r3, [r4, #12]
 8011be6:	2300      	movs	r3, #0
 8011be8:	6063      	str	r3, [r4, #4]
 8011bea:	6923      	ldr	r3, [r4, #16]
 8011bec:	6023      	str	r3, [r4, #0]
 8011bee:	89a3      	ldrh	r3, [r4, #12]
 8011bf0:	f043 0308 	orr.w	r3, r3, #8
 8011bf4:	81a3      	strh	r3, [r4, #12]
 8011bf6:	6923      	ldr	r3, [r4, #16]
 8011bf8:	b94b      	cbnz	r3, 8011c0e <__swsetup_r+0x9a>
 8011bfa:	89a3      	ldrh	r3, [r4, #12]
 8011bfc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011c00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011c04:	d003      	beq.n	8011c0e <__swsetup_r+0x9a>
 8011c06:	4621      	mov	r1, r4
 8011c08:	4630      	mov	r0, r6
 8011c0a:	f000 f9bf 	bl	8011f8c <__smakebuf_r>
 8011c0e:	89a2      	ldrh	r2, [r4, #12]
 8011c10:	f012 0301 	ands.w	r3, r2, #1
 8011c14:	d00c      	beq.n	8011c30 <__swsetup_r+0xbc>
 8011c16:	2300      	movs	r3, #0
 8011c18:	60a3      	str	r3, [r4, #8]
 8011c1a:	6963      	ldr	r3, [r4, #20]
 8011c1c:	425b      	negs	r3, r3
 8011c1e:	61a3      	str	r3, [r4, #24]
 8011c20:	6923      	ldr	r3, [r4, #16]
 8011c22:	b953      	cbnz	r3, 8011c3a <__swsetup_r+0xc6>
 8011c24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c28:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8011c2c:	d1ba      	bne.n	8011ba4 <__swsetup_r+0x30>
 8011c2e:	bd70      	pop	{r4, r5, r6, pc}
 8011c30:	0792      	lsls	r2, r2, #30
 8011c32:	bf58      	it	pl
 8011c34:	6963      	ldrpl	r3, [r4, #20]
 8011c36:	60a3      	str	r3, [r4, #8]
 8011c38:	e7f2      	b.n	8011c20 <__swsetup_r+0xac>
 8011c3a:	2000      	movs	r0, #0
 8011c3c:	e7f7      	b.n	8011c2e <__swsetup_r+0xba>
 8011c3e:	bf00      	nop
 8011c40:	2000003c 	.word	0x2000003c
 8011c44:	08026568 	.word	0x08026568
 8011c48:	08026588 	.word	0x08026588
 8011c4c:	08026548 	.word	0x08026548

08011c50 <__sflush_r>:
 8011c50:	898a      	ldrh	r2, [r1, #12]
 8011c52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c56:	4605      	mov	r5, r0
 8011c58:	0710      	lsls	r0, r2, #28
 8011c5a:	460c      	mov	r4, r1
 8011c5c:	d458      	bmi.n	8011d10 <__sflush_r+0xc0>
 8011c5e:	684b      	ldr	r3, [r1, #4]
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	dc05      	bgt.n	8011c70 <__sflush_r+0x20>
 8011c64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	dc02      	bgt.n	8011c70 <__sflush_r+0x20>
 8011c6a:	2000      	movs	r0, #0
 8011c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011c72:	2e00      	cmp	r6, #0
 8011c74:	d0f9      	beq.n	8011c6a <__sflush_r+0x1a>
 8011c76:	2300      	movs	r3, #0
 8011c78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011c7c:	682f      	ldr	r7, [r5, #0]
 8011c7e:	6a21      	ldr	r1, [r4, #32]
 8011c80:	602b      	str	r3, [r5, #0]
 8011c82:	d032      	beq.n	8011cea <__sflush_r+0x9a>
 8011c84:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011c86:	89a3      	ldrh	r3, [r4, #12]
 8011c88:	075a      	lsls	r2, r3, #29
 8011c8a:	d505      	bpl.n	8011c98 <__sflush_r+0x48>
 8011c8c:	6863      	ldr	r3, [r4, #4]
 8011c8e:	1ac0      	subs	r0, r0, r3
 8011c90:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011c92:	b10b      	cbz	r3, 8011c98 <__sflush_r+0x48>
 8011c94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011c96:	1ac0      	subs	r0, r0, r3
 8011c98:	2300      	movs	r3, #0
 8011c9a:	4602      	mov	r2, r0
 8011c9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011c9e:	6a21      	ldr	r1, [r4, #32]
 8011ca0:	4628      	mov	r0, r5
 8011ca2:	47b0      	blx	r6
 8011ca4:	1c43      	adds	r3, r0, #1
 8011ca6:	89a3      	ldrh	r3, [r4, #12]
 8011ca8:	d106      	bne.n	8011cb8 <__sflush_r+0x68>
 8011caa:	6829      	ldr	r1, [r5, #0]
 8011cac:	291d      	cmp	r1, #29
 8011cae:	d848      	bhi.n	8011d42 <__sflush_r+0xf2>
 8011cb0:	4a29      	ldr	r2, [pc, #164]	; (8011d58 <__sflush_r+0x108>)
 8011cb2:	40ca      	lsrs	r2, r1
 8011cb4:	07d6      	lsls	r6, r2, #31
 8011cb6:	d544      	bpl.n	8011d42 <__sflush_r+0xf2>
 8011cb8:	2200      	movs	r2, #0
 8011cba:	6062      	str	r2, [r4, #4]
 8011cbc:	04d9      	lsls	r1, r3, #19
 8011cbe:	6922      	ldr	r2, [r4, #16]
 8011cc0:	6022      	str	r2, [r4, #0]
 8011cc2:	d504      	bpl.n	8011cce <__sflush_r+0x7e>
 8011cc4:	1c42      	adds	r2, r0, #1
 8011cc6:	d101      	bne.n	8011ccc <__sflush_r+0x7c>
 8011cc8:	682b      	ldr	r3, [r5, #0]
 8011cca:	b903      	cbnz	r3, 8011cce <__sflush_r+0x7e>
 8011ccc:	6560      	str	r0, [r4, #84]	; 0x54
 8011cce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011cd0:	602f      	str	r7, [r5, #0]
 8011cd2:	2900      	cmp	r1, #0
 8011cd4:	d0c9      	beq.n	8011c6a <__sflush_r+0x1a>
 8011cd6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011cda:	4299      	cmp	r1, r3
 8011cdc:	d002      	beq.n	8011ce4 <__sflush_r+0x94>
 8011cde:	4628      	mov	r0, r5
 8011ce0:	f000 f994 	bl	801200c <_free_r>
 8011ce4:	2000      	movs	r0, #0
 8011ce6:	6360      	str	r0, [r4, #52]	; 0x34
 8011ce8:	e7c0      	b.n	8011c6c <__sflush_r+0x1c>
 8011cea:	2301      	movs	r3, #1
 8011cec:	4628      	mov	r0, r5
 8011cee:	47b0      	blx	r6
 8011cf0:	1c41      	adds	r1, r0, #1
 8011cf2:	d1c8      	bne.n	8011c86 <__sflush_r+0x36>
 8011cf4:	682b      	ldr	r3, [r5, #0]
 8011cf6:	2b00      	cmp	r3, #0
 8011cf8:	d0c5      	beq.n	8011c86 <__sflush_r+0x36>
 8011cfa:	2b1d      	cmp	r3, #29
 8011cfc:	d001      	beq.n	8011d02 <__sflush_r+0xb2>
 8011cfe:	2b16      	cmp	r3, #22
 8011d00:	d101      	bne.n	8011d06 <__sflush_r+0xb6>
 8011d02:	602f      	str	r7, [r5, #0]
 8011d04:	e7b1      	b.n	8011c6a <__sflush_r+0x1a>
 8011d06:	89a3      	ldrh	r3, [r4, #12]
 8011d08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d0c:	81a3      	strh	r3, [r4, #12]
 8011d0e:	e7ad      	b.n	8011c6c <__sflush_r+0x1c>
 8011d10:	690f      	ldr	r7, [r1, #16]
 8011d12:	2f00      	cmp	r7, #0
 8011d14:	d0a9      	beq.n	8011c6a <__sflush_r+0x1a>
 8011d16:	0793      	lsls	r3, r2, #30
 8011d18:	680e      	ldr	r6, [r1, #0]
 8011d1a:	bf08      	it	eq
 8011d1c:	694b      	ldreq	r3, [r1, #20]
 8011d1e:	600f      	str	r7, [r1, #0]
 8011d20:	bf18      	it	ne
 8011d22:	2300      	movne	r3, #0
 8011d24:	eba6 0807 	sub.w	r8, r6, r7
 8011d28:	608b      	str	r3, [r1, #8]
 8011d2a:	f1b8 0f00 	cmp.w	r8, #0
 8011d2e:	dd9c      	ble.n	8011c6a <__sflush_r+0x1a>
 8011d30:	4643      	mov	r3, r8
 8011d32:	463a      	mov	r2, r7
 8011d34:	6a21      	ldr	r1, [r4, #32]
 8011d36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011d38:	4628      	mov	r0, r5
 8011d3a:	47b0      	blx	r6
 8011d3c:	2800      	cmp	r0, #0
 8011d3e:	dc06      	bgt.n	8011d4e <__sflush_r+0xfe>
 8011d40:	89a3      	ldrh	r3, [r4, #12]
 8011d42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d46:	81a3      	strh	r3, [r4, #12]
 8011d48:	f04f 30ff 	mov.w	r0, #4294967295
 8011d4c:	e78e      	b.n	8011c6c <__sflush_r+0x1c>
 8011d4e:	4407      	add	r7, r0
 8011d50:	eba8 0800 	sub.w	r8, r8, r0
 8011d54:	e7e9      	b.n	8011d2a <__sflush_r+0xda>
 8011d56:	bf00      	nop
 8011d58:	20400001 	.word	0x20400001

08011d5c <_fflush_r>:
 8011d5c:	b538      	push	{r3, r4, r5, lr}
 8011d5e:	690b      	ldr	r3, [r1, #16]
 8011d60:	4605      	mov	r5, r0
 8011d62:	460c      	mov	r4, r1
 8011d64:	b1db      	cbz	r3, 8011d9e <_fflush_r+0x42>
 8011d66:	b118      	cbz	r0, 8011d70 <_fflush_r+0x14>
 8011d68:	6983      	ldr	r3, [r0, #24]
 8011d6a:	b90b      	cbnz	r3, 8011d70 <_fflush_r+0x14>
 8011d6c:	f000 f860 	bl	8011e30 <__sinit>
 8011d70:	4b0c      	ldr	r3, [pc, #48]	; (8011da4 <_fflush_r+0x48>)
 8011d72:	429c      	cmp	r4, r3
 8011d74:	d109      	bne.n	8011d8a <_fflush_r+0x2e>
 8011d76:	686c      	ldr	r4, [r5, #4]
 8011d78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d7c:	b17b      	cbz	r3, 8011d9e <_fflush_r+0x42>
 8011d7e:	4621      	mov	r1, r4
 8011d80:	4628      	mov	r0, r5
 8011d82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011d86:	f7ff bf63 	b.w	8011c50 <__sflush_r>
 8011d8a:	4b07      	ldr	r3, [pc, #28]	; (8011da8 <_fflush_r+0x4c>)
 8011d8c:	429c      	cmp	r4, r3
 8011d8e:	d101      	bne.n	8011d94 <_fflush_r+0x38>
 8011d90:	68ac      	ldr	r4, [r5, #8]
 8011d92:	e7f1      	b.n	8011d78 <_fflush_r+0x1c>
 8011d94:	4b05      	ldr	r3, [pc, #20]	; (8011dac <_fflush_r+0x50>)
 8011d96:	429c      	cmp	r4, r3
 8011d98:	bf08      	it	eq
 8011d9a:	68ec      	ldreq	r4, [r5, #12]
 8011d9c:	e7ec      	b.n	8011d78 <_fflush_r+0x1c>
 8011d9e:	2000      	movs	r0, #0
 8011da0:	bd38      	pop	{r3, r4, r5, pc}
 8011da2:	bf00      	nop
 8011da4:	08026568 	.word	0x08026568
 8011da8:	08026588 	.word	0x08026588
 8011dac:	08026548 	.word	0x08026548

08011db0 <std>:
 8011db0:	2300      	movs	r3, #0
 8011db2:	b510      	push	{r4, lr}
 8011db4:	4604      	mov	r4, r0
 8011db6:	e9c0 3300 	strd	r3, r3, [r0]
 8011dba:	6083      	str	r3, [r0, #8]
 8011dbc:	8181      	strh	r1, [r0, #12]
 8011dbe:	6643      	str	r3, [r0, #100]	; 0x64
 8011dc0:	81c2      	strh	r2, [r0, #14]
 8011dc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011dc6:	6183      	str	r3, [r0, #24]
 8011dc8:	4619      	mov	r1, r3
 8011dca:	2208      	movs	r2, #8
 8011dcc:	305c      	adds	r0, #92	; 0x5c
 8011dce:	f7ff fdfa 	bl	80119c6 <memset>
 8011dd2:	4b05      	ldr	r3, [pc, #20]	; (8011de8 <std+0x38>)
 8011dd4:	6263      	str	r3, [r4, #36]	; 0x24
 8011dd6:	4b05      	ldr	r3, [pc, #20]	; (8011dec <std+0x3c>)
 8011dd8:	62a3      	str	r3, [r4, #40]	; 0x28
 8011dda:	4b05      	ldr	r3, [pc, #20]	; (8011df0 <std+0x40>)
 8011ddc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011dde:	4b05      	ldr	r3, [pc, #20]	; (8011df4 <std+0x44>)
 8011de0:	6224      	str	r4, [r4, #32]
 8011de2:	6323      	str	r3, [r4, #48]	; 0x30
 8011de4:	bd10      	pop	{r4, pc}
 8011de6:	bf00      	nop
 8011de8:	0801270d 	.word	0x0801270d
 8011dec:	0801272f 	.word	0x0801272f
 8011df0:	08012767 	.word	0x08012767
 8011df4:	0801278b 	.word	0x0801278b

08011df8 <_cleanup_r>:
 8011df8:	4901      	ldr	r1, [pc, #4]	; (8011e00 <_cleanup_r+0x8>)
 8011dfa:	f000 b885 	b.w	8011f08 <_fwalk_reent>
 8011dfe:	bf00      	nop
 8011e00:	08011d5d 	.word	0x08011d5d

08011e04 <__sfmoreglue>:
 8011e04:	b570      	push	{r4, r5, r6, lr}
 8011e06:	1e4a      	subs	r2, r1, #1
 8011e08:	2568      	movs	r5, #104	; 0x68
 8011e0a:	4355      	muls	r5, r2
 8011e0c:	460e      	mov	r6, r1
 8011e0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011e12:	f000 f949 	bl	80120a8 <_malloc_r>
 8011e16:	4604      	mov	r4, r0
 8011e18:	b140      	cbz	r0, 8011e2c <__sfmoreglue+0x28>
 8011e1a:	2100      	movs	r1, #0
 8011e1c:	e9c0 1600 	strd	r1, r6, [r0]
 8011e20:	300c      	adds	r0, #12
 8011e22:	60a0      	str	r0, [r4, #8]
 8011e24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011e28:	f7ff fdcd 	bl	80119c6 <memset>
 8011e2c:	4620      	mov	r0, r4
 8011e2e:	bd70      	pop	{r4, r5, r6, pc}

08011e30 <__sinit>:
 8011e30:	6983      	ldr	r3, [r0, #24]
 8011e32:	b510      	push	{r4, lr}
 8011e34:	4604      	mov	r4, r0
 8011e36:	bb33      	cbnz	r3, 8011e86 <__sinit+0x56>
 8011e38:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8011e3c:	6503      	str	r3, [r0, #80]	; 0x50
 8011e3e:	4b12      	ldr	r3, [pc, #72]	; (8011e88 <__sinit+0x58>)
 8011e40:	4a12      	ldr	r2, [pc, #72]	; (8011e8c <__sinit+0x5c>)
 8011e42:	681b      	ldr	r3, [r3, #0]
 8011e44:	6282      	str	r2, [r0, #40]	; 0x28
 8011e46:	4298      	cmp	r0, r3
 8011e48:	bf04      	itt	eq
 8011e4a:	2301      	moveq	r3, #1
 8011e4c:	6183      	streq	r3, [r0, #24]
 8011e4e:	f000 f81f 	bl	8011e90 <__sfp>
 8011e52:	6060      	str	r0, [r4, #4]
 8011e54:	4620      	mov	r0, r4
 8011e56:	f000 f81b 	bl	8011e90 <__sfp>
 8011e5a:	60a0      	str	r0, [r4, #8]
 8011e5c:	4620      	mov	r0, r4
 8011e5e:	f000 f817 	bl	8011e90 <__sfp>
 8011e62:	2200      	movs	r2, #0
 8011e64:	60e0      	str	r0, [r4, #12]
 8011e66:	2104      	movs	r1, #4
 8011e68:	6860      	ldr	r0, [r4, #4]
 8011e6a:	f7ff ffa1 	bl	8011db0 <std>
 8011e6e:	2201      	movs	r2, #1
 8011e70:	2109      	movs	r1, #9
 8011e72:	68a0      	ldr	r0, [r4, #8]
 8011e74:	f7ff ff9c 	bl	8011db0 <std>
 8011e78:	2202      	movs	r2, #2
 8011e7a:	2112      	movs	r1, #18
 8011e7c:	68e0      	ldr	r0, [r4, #12]
 8011e7e:	f7ff ff97 	bl	8011db0 <std>
 8011e82:	2301      	movs	r3, #1
 8011e84:	61a3      	str	r3, [r4, #24]
 8011e86:	bd10      	pop	{r4, pc}
 8011e88:	08026544 	.word	0x08026544
 8011e8c:	08011df9 	.word	0x08011df9

08011e90 <__sfp>:
 8011e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e92:	4b1b      	ldr	r3, [pc, #108]	; (8011f00 <__sfp+0x70>)
 8011e94:	681e      	ldr	r6, [r3, #0]
 8011e96:	69b3      	ldr	r3, [r6, #24]
 8011e98:	4607      	mov	r7, r0
 8011e9a:	b913      	cbnz	r3, 8011ea2 <__sfp+0x12>
 8011e9c:	4630      	mov	r0, r6
 8011e9e:	f7ff ffc7 	bl	8011e30 <__sinit>
 8011ea2:	3648      	adds	r6, #72	; 0x48
 8011ea4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011ea8:	3b01      	subs	r3, #1
 8011eaa:	d503      	bpl.n	8011eb4 <__sfp+0x24>
 8011eac:	6833      	ldr	r3, [r6, #0]
 8011eae:	b133      	cbz	r3, 8011ebe <__sfp+0x2e>
 8011eb0:	6836      	ldr	r6, [r6, #0]
 8011eb2:	e7f7      	b.n	8011ea4 <__sfp+0x14>
 8011eb4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011eb8:	b16d      	cbz	r5, 8011ed6 <__sfp+0x46>
 8011eba:	3468      	adds	r4, #104	; 0x68
 8011ebc:	e7f4      	b.n	8011ea8 <__sfp+0x18>
 8011ebe:	2104      	movs	r1, #4
 8011ec0:	4638      	mov	r0, r7
 8011ec2:	f7ff ff9f 	bl	8011e04 <__sfmoreglue>
 8011ec6:	6030      	str	r0, [r6, #0]
 8011ec8:	2800      	cmp	r0, #0
 8011eca:	d1f1      	bne.n	8011eb0 <__sfp+0x20>
 8011ecc:	230c      	movs	r3, #12
 8011ece:	603b      	str	r3, [r7, #0]
 8011ed0:	4604      	mov	r4, r0
 8011ed2:	4620      	mov	r0, r4
 8011ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011ed6:	4b0b      	ldr	r3, [pc, #44]	; (8011f04 <__sfp+0x74>)
 8011ed8:	6665      	str	r5, [r4, #100]	; 0x64
 8011eda:	e9c4 5500 	strd	r5, r5, [r4]
 8011ede:	60a5      	str	r5, [r4, #8]
 8011ee0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8011ee4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8011ee8:	2208      	movs	r2, #8
 8011eea:	4629      	mov	r1, r5
 8011eec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011ef0:	f7ff fd69 	bl	80119c6 <memset>
 8011ef4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011ef8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011efc:	e7e9      	b.n	8011ed2 <__sfp+0x42>
 8011efe:	bf00      	nop
 8011f00:	08026544 	.word	0x08026544
 8011f04:	ffff0001 	.word	0xffff0001

08011f08 <_fwalk_reent>:
 8011f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011f0c:	4680      	mov	r8, r0
 8011f0e:	4689      	mov	r9, r1
 8011f10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011f14:	2600      	movs	r6, #0
 8011f16:	b914      	cbnz	r4, 8011f1e <_fwalk_reent+0x16>
 8011f18:	4630      	mov	r0, r6
 8011f1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011f1e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8011f22:	3f01      	subs	r7, #1
 8011f24:	d501      	bpl.n	8011f2a <_fwalk_reent+0x22>
 8011f26:	6824      	ldr	r4, [r4, #0]
 8011f28:	e7f5      	b.n	8011f16 <_fwalk_reent+0xe>
 8011f2a:	89ab      	ldrh	r3, [r5, #12]
 8011f2c:	2b01      	cmp	r3, #1
 8011f2e:	d907      	bls.n	8011f40 <_fwalk_reent+0x38>
 8011f30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011f34:	3301      	adds	r3, #1
 8011f36:	d003      	beq.n	8011f40 <_fwalk_reent+0x38>
 8011f38:	4629      	mov	r1, r5
 8011f3a:	4640      	mov	r0, r8
 8011f3c:	47c8      	blx	r9
 8011f3e:	4306      	orrs	r6, r0
 8011f40:	3568      	adds	r5, #104	; 0x68
 8011f42:	e7ee      	b.n	8011f22 <_fwalk_reent+0x1a>

08011f44 <__swhatbuf_r>:
 8011f44:	b570      	push	{r4, r5, r6, lr}
 8011f46:	460e      	mov	r6, r1
 8011f48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011f4c:	2900      	cmp	r1, #0
 8011f4e:	b096      	sub	sp, #88	; 0x58
 8011f50:	4614      	mov	r4, r2
 8011f52:	461d      	mov	r5, r3
 8011f54:	da07      	bge.n	8011f66 <__swhatbuf_r+0x22>
 8011f56:	2300      	movs	r3, #0
 8011f58:	602b      	str	r3, [r5, #0]
 8011f5a:	89b3      	ldrh	r3, [r6, #12]
 8011f5c:	061a      	lsls	r2, r3, #24
 8011f5e:	d410      	bmi.n	8011f82 <__swhatbuf_r+0x3e>
 8011f60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011f64:	e00e      	b.n	8011f84 <__swhatbuf_r+0x40>
 8011f66:	466a      	mov	r2, sp
 8011f68:	f000 fc36 	bl	80127d8 <_fstat_r>
 8011f6c:	2800      	cmp	r0, #0
 8011f6e:	dbf2      	blt.n	8011f56 <__swhatbuf_r+0x12>
 8011f70:	9a01      	ldr	r2, [sp, #4]
 8011f72:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011f76:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011f7a:	425a      	negs	r2, r3
 8011f7c:	415a      	adcs	r2, r3
 8011f7e:	602a      	str	r2, [r5, #0]
 8011f80:	e7ee      	b.n	8011f60 <__swhatbuf_r+0x1c>
 8011f82:	2340      	movs	r3, #64	; 0x40
 8011f84:	2000      	movs	r0, #0
 8011f86:	6023      	str	r3, [r4, #0]
 8011f88:	b016      	add	sp, #88	; 0x58
 8011f8a:	bd70      	pop	{r4, r5, r6, pc}

08011f8c <__smakebuf_r>:
 8011f8c:	898b      	ldrh	r3, [r1, #12]
 8011f8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011f90:	079d      	lsls	r5, r3, #30
 8011f92:	4606      	mov	r6, r0
 8011f94:	460c      	mov	r4, r1
 8011f96:	d507      	bpl.n	8011fa8 <__smakebuf_r+0x1c>
 8011f98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011f9c:	6023      	str	r3, [r4, #0]
 8011f9e:	6123      	str	r3, [r4, #16]
 8011fa0:	2301      	movs	r3, #1
 8011fa2:	6163      	str	r3, [r4, #20]
 8011fa4:	b002      	add	sp, #8
 8011fa6:	bd70      	pop	{r4, r5, r6, pc}
 8011fa8:	ab01      	add	r3, sp, #4
 8011faa:	466a      	mov	r2, sp
 8011fac:	f7ff ffca 	bl	8011f44 <__swhatbuf_r>
 8011fb0:	9900      	ldr	r1, [sp, #0]
 8011fb2:	4605      	mov	r5, r0
 8011fb4:	4630      	mov	r0, r6
 8011fb6:	f000 f877 	bl	80120a8 <_malloc_r>
 8011fba:	b948      	cbnz	r0, 8011fd0 <__smakebuf_r+0x44>
 8011fbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011fc0:	059a      	lsls	r2, r3, #22
 8011fc2:	d4ef      	bmi.n	8011fa4 <__smakebuf_r+0x18>
 8011fc4:	f023 0303 	bic.w	r3, r3, #3
 8011fc8:	f043 0302 	orr.w	r3, r3, #2
 8011fcc:	81a3      	strh	r3, [r4, #12]
 8011fce:	e7e3      	b.n	8011f98 <__smakebuf_r+0xc>
 8011fd0:	4b0d      	ldr	r3, [pc, #52]	; (8012008 <__smakebuf_r+0x7c>)
 8011fd2:	62b3      	str	r3, [r6, #40]	; 0x28
 8011fd4:	89a3      	ldrh	r3, [r4, #12]
 8011fd6:	6020      	str	r0, [r4, #0]
 8011fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011fdc:	81a3      	strh	r3, [r4, #12]
 8011fde:	9b00      	ldr	r3, [sp, #0]
 8011fe0:	6163      	str	r3, [r4, #20]
 8011fe2:	9b01      	ldr	r3, [sp, #4]
 8011fe4:	6120      	str	r0, [r4, #16]
 8011fe6:	b15b      	cbz	r3, 8012000 <__smakebuf_r+0x74>
 8011fe8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011fec:	4630      	mov	r0, r6
 8011fee:	f000 fc05 	bl	80127fc <_isatty_r>
 8011ff2:	b128      	cbz	r0, 8012000 <__smakebuf_r+0x74>
 8011ff4:	89a3      	ldrh	r3, [r4, #12]
 8011ff6:	f023 0303 	bic.w	r3, r3, #3
 8011ffa:	f043 0301 	orr.w	r3, r3, #1
 8011ffe:	81a3      	strh	r3, [r4, #12]
 8012000:	89a3      	ldrh	r3, [r4, #12]
 8012002:	431d      	orrs	r5, r3
 8012004:	81a5      	strh	r5, [r4, #12]
 8012006:	e7cd      	b.n	8011fa4 <__smakebuf_r+0x18>
 8012008:	08011df9 	.word	0x08011df9

0801200c <_free_r>:
 801200c:	b538      	push	{r3, r4, r5, lr}
 801200e:	4605      	mov	r5, r0
 8012010:	2900      	cmp	r1, #0
 8012012:	d045      	beq.n	80120a0 <_free_r+0x94>
 8012014:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012018:	1f0c      	subs	r4, r1, #4
 801201a:	2b00      	cmp	r3, #0
 801201c:	bfb8      	it	lt
 801201e:	18e4      	addlt	r4, r4, r3
 8012020:	f000 fc0e 	bl	8012840 <__malloc_lock>
 8012024:	4a1f      	ldr	r2, [pc, #124]	; (80120a4 <_free_r+0x98>)
 8012026:	6813      	ldr	r3, [r2, #0]
 8012028:	4610      	mov	r0, r2
 801202a:	b933      	cbnz	r3, 801203a <_free_r+0x2e>
 801202c:	6063      	str	r3, [r4, #4]
 801202e:	6014      	str	r4, [r2, #0]
 8012030:	4628      	mov	r0, r5
 8012032:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012036:	f000 bc04 	b.w	8012842 <__malloc_unlock>
 801203a:	42a3      	cmp	r3, r4
 801203c:	d90c      	bls.n	8012058 <_free_r+0x4c>
 801203e:	6821      	ldr	r1, [r4, #0]
 8012040:	1862      	adds	r2, r4, r1
 8012042:	4293      	cmp	r3, r2
 8012044:	bf04      	itt	eq
 8012046:	681a      	ldreq	r2, [r3, #0]
 8012048:	685b      	ldreq	r3, [r3, #4]
 801204a:	6063      	str	r3, [r4, #4]
 801204c:	bf04      	itt	eq
 801204e:	1852      	addeq	r2, r2, r1
 8012050:	6022      	streq	r2, [r4, #0]
 8012052:	6004      	str	r4, [r0, #0]
 8012054:	e7ec      	b.n	8012030 <_free_r+0x24>
 8012056:	4613      	mov	r3, r2
 8012058:	685a      	ldr	r2, [r3, #4]
 801205a:	b10a      	cbz	r2, 8012060 <_free_r+0x54>
 801205c:	42a2      	cmp	r2, r4
 801205e:	d9fa      	bls.n	8012056 <_free_r+0x4a>
 8012060:	6819      	ldr	r1, [r3, #0]
 8012062:	1858      	adds	r0, r3, r1
 8012064:	42a0      	cmp	r0, r4
 8012066:	d10b      	bne.n	8012080 <_free_r+0x74>
 8012068:	6820      	ldr	r0, [r4, #0]
 801206a:	4401      	add	r1, r0
 801206c:	1858      	adds	r0, r3, r1
 801206e:	4282      	cmp	r2, r0
 8012070:	6019      	str	r1, [r3, #0]
 8012072:	d1dd      	bne.n	8012030 <_free_r+0x24>
 8012074:	6810      	ldr	r0, [r2, #0]
 8012076:	6852      	ldr	r2, [r2, #4]
 8012078:	605a      	str	r2, [r3, #4]
 801207a:	4401      	add	r1, r0
 801207c:	6019      	str	r1, [r3, #0]
 801207e:	e7d7      	b.n	8012030 <_free_r+0x24>
 8012080:	d902      	bls.n	8012088 <_free_r+0x7c>
 8012082:	230c      	movs	r3, #12
 8012084:	602b      	str	r3, [r5, #0]
 8012086:	e7d3      	b.n	8012030 <_free_r+0x24>
 8012088:	6820      	ldr	r0, [r4, #0]
 801208a:	1821      	adds	r1, r4, r0
 801208c:	428a      	cmp	r2, r1
 801208e:	bf04      	itt	eq
 8012090:	6811      	ldreq	r1, [r2, #0]
 8012092:	6852      	ldreq	r2, [r2, #4]
 8012094:	6062      	str	r2, [r4, #4]
 8012096:	bf04      	itt	eq
 8012098:	1809      	addeq	r1, r1, r0
 801209a:	6021      	streq	r1, [r4, #0]
 801209c:	605c      	str	r4, [r3, #4]
 801209e:	e7c7      	b.n	8012030 <_free_r+0x24>
 80120a0:	bd38      	pop	{r3, r4, r5, pc}
 80120a2:	bf00      	nop
 80120a4:	20004204 	.word	0x20004204

080120a8 <_malloc_r>:
 80120a8:	b570      	push	{r4, r5, r6, lr}
 80120aa:	1ccd      	adds	r5, r1, #3
 80120ac:	f025 0503 	bic.w	r5, r5, #3
 80120b0:	3508      	adds	r5, #8
 80120b2:	2d0c      	cmp	r5, #12
 80120b4:	bf38      	it	cc
 80120b6:	250c      	movcc	r5, #12
 80120b8:	2d00      	cmp	r5, #0
 80120ba:	4606      	mov	r6, r0
 80120bc:	db01      	blt.n	80120c2 <_malloc_r+0x1a>
 80120be:	42a9      	cmp	r1, r5
 80120c0:	d903      	bls.n	80120ca <_malloc_r+0x22>
 80120c2:	230c      	movs	r3, #12
 80120c4:	6033      	str	r3, [r6, #0]
 80120c6:	2000      	movs	r0, #0
 80120c8:	bd70      	pop	{r4, r5, r6, pc}
 80120ca:	f000 fbb9 	bl	8012840 <__malloc_lock>
 80120ce:	4a21      	ldr	r2, [pc, #132]	; (8012154 <_malloc_r+0xac>)
 80120d0:	6814      	ldr	r4, [r2, #0]
 80120d2:	4621      	mov	r1, r4
 80120d4:	b991      	cbnz	r1, 80120fc <_malloc_r+0x54>
 80120d6:	4c20      	ldr	r4, [pc, #128]	; (8012158 <_malloc_r+0xb0>)
 80120d8:	6823      	ldr	r3, [r4, #0]
 80120da:	b91b      	cbnz	r3, 80120e4 <_malloc_r+0x3c>
 80120dc:	4630      	mov	r0, r6
 80120de:	f000 fb05 	bl	80126ec <_sbrk_r>
 80120e2:	6020      	str	r0, [r4, #0]
 80120e4:	4629      	mov	r1, r5
 80120e6:	4630      	mov	r0, r6
 80120e8:	f000 fb00 	bl	80126ec <_sbrk_r>
 80120ec:	1c43      	adds	r3, r0, #1
 80120ee:	d124      	bne.n	801213a <_malloc_r+0x92>
 80120f0:	230c      	movs	r3, #12
 80120f2:	6033      	str	r3, [r6, #0]
 80120f4:	4630      	mov	r0, r6
 80120f6:	f000 fba4 	bl	8012842 <__malloc_unlock>
 80120fa:	e7e4      	b.n	80120c6 <_malloc_r+0x1e>
 80120fc:	680b      	ldr	r3, [r1, #0]
 80120fe:	1b5b      	subs	r3, r3, r5
 8012100:	d418      	bmi.n	8012134 <_malloc_r+0x8c>
 8012102:	2b0b      	cmp	r3, #11
 8012104:	d90f      	bls.n	8012126 <_malloc_r+0x7e>
 8012106:	600b      	str	r3, [r1, #0]
 8012108:	50cd      	str	r5, [r1, r3]
 801210a:	18cc      	adds	r4, r1, r3
 801210c:	4630      	mov	r0, r6
 801210e:	f000 fb98 	bl	8012842 <__malloc_unlock>
 8012112:	f104 000b 	add.w	r0, r4, #11
 8012116:	1d23      	adds	r3, r4, #4
 8012118:	f020 0007 	bic.w	r0, r0, #7
 801211c:	1ac3      	subs	r3, r0, r3
 801211e:	d0d3      	beq.n	80120c8 <_malloc_r+0x20>
 8012120:	425a      	negs	r2, r3
 8012122:	50e2      	str	r2, [r4, r3]
 8012124:	e7d0      	b.n	80120c8 <_malloc_r+0x20>
 8012126:	428c      	cmp	r4, r1
 8012128:	684b      	ldr	r3, [r1, #4]
 801212a:	bf16      	itet	ne
 801212c:	6063      	strne	r3, [r4, #4]
 801212e:	6013      	streq	r3, [r2, #0]
 8012130:	460c      	movne	r4, r1
 8012132:	e7eb      	b.n	801210c <_malloc_r+0x64>
 8012134:	460c      	mov	r4, r1
 8012136:	6849      	ldr	r1, [r1, #4]
 8012138:	e7cc      	b.n	80120d4 <_malloc_r+0x2c>
 801213a:	1cc4      	adds	r4, r0, #3
 801213c:	f024 0403 	bic.w	r4, r4, #3
 8012140:	42a0      	cmp	r0, r4
 8012142:	d005      	beq.n	8012150 <_malloc_r+0xa8>
 8012144:	1a21      	subs	r1, r4, r0
 8012146:	4630      	mov	r0, r6
 8012148:	f000 fad0 	bl	80126ec <_sbrk_r>
 801214c:	3001      	adds	r0, #1
 801214e:	d0cf      	beq.n	80120f0 <_malloc_r+0x48>
 8012150:	6025      	str	r5, [r4, #0]
 8012152:	e7db      	b.n	801210c <_malloc_r+0x64>
 8012154:	20004204 	.word	0x20004204
 8012158:	20004208 	.word	0x20004208

0801215c <__sfputc_r>:
 801215c:	6893      	ldr	r3, [r2, #8]
 801215e:	3b01      	subs	r3, #1
 8012160:	2b00      	cmp	r3, #0
 8012162:	b410      	push	{r4}
 8012164:	6093      	str	r3, [r2, #8]
 8012166:	da08      	bge.n	801217a <__sfputc_r+0x1e>
 8012168:	6994      	ldr	r4, [r2, #24]
 801216a:	42a3      	cmp	r3, r4
 801216c:	db01      	blt.n	8012172 <__sfputc_r+0x16>
 801216e:	290a      	cmp	r1, #10
 8012170:	d103      	bne.n	801217a <__sfputc_r+0x1e>
 8012172:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012176:	f7ff bcab 	b.w	8011ad0 <__swbuf_r>
 801217a:	6813      	ldr	r3, [r2, #0]
 801217c:	1c58      	adds	r0, r3, #1
 801217e:	6010      	str	r0, [r2, #0]
 8012180:	7019      	strb	r1, [r3, #0]
 8012182:	4608      	mov	r0, r1
 8012184:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012188:	4770      	bx	lr

0801218a <__sfputs_r>:
 801218a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801218c:	4606      	mov	r6, r0
 801218e:	460f      	mov	r7, r1
 8012190:	4614      	mov	r4, r2
 8012192:	18d5      	adds	r5, r2, r3
 8012194:	42ac      	cmp	r4, r5
 8012196:	d101      	bne.n	801219c <__sfputs_r+0x12>
 8012198:	2000      	movs	r0, #0
 801219a:	e007      	b.n	80121ac <__sfputs_r+0x22>
 801219c:	463a      	mov	r2, r7
 801219e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121a2:	4630      	mov	r0, r6
 80121a4:	f7ff ffda 	bl	801215c <__sfputc_r>
 80121a8:	1c43      	adds	r3, r0, #1
 80121aa:	d1f3      	bne.n	8012194 <__sfputs_r+0xa>
 80121ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080121b0 <_vfiprintf_r>:
 80121b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121b4:	460c      	mov	r4, r1
 80121b6:	b09d      	sub	sp, #116	; 0x74
 80121b8:	4617      	mov	r7, r2
 80121ba:	461d      	mov	r5, r3
 80121bc:	4606      	mov	r6, r0
 80121be:	b118      	cbz	r0, 80121c8 <_vfiprintf_r+0x18>
 80121c0:	6983      	ldr	r3, [r0, #24]
 80121c2:	b90b      	cbnz	r3, 80121c8 <_vfiprintf_r+0x18>
 80121c4:	f7ff fe34 	bl	8011e30 <__sinit>
 80121c8:	4b7c      	ldr	r3, [pc, #496]	; (80123bc <_vfiprintf_r+0x20c>)
 80121ca:	429c      	cmp	r4, r3
 80121cc:	d158      	bne.n	8012280 <_vfiprintf_r+0xd0>
 80121ce:	6874      	ldr	r4, [r6, #4]
 80121d0:	89a3      	ldrh	r3, [r4, #12]
 80121d2:	0718      	lsls	r0, r3, #28
 80121d4:	d55e      	bpl.n	8012294 <_vfiprintf_r+0xe4>
 80121d6:	6923      	ldr	r3, [r4, #16]
 80121d8:	2b00      	cmp	r3, #0
 80121da:	d05b      	beq.n	8012294 <_vfiprintf_r+0xe4>
 80121dc:	2300      	movs	r3, #0
 80121de:	9309      	str	r3, [sp, #36]	; 0x24
 80121e0:	2320      	movs	r3, #32
 80121e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80121e6:	2330      	movs	r3, #48	; 0x30
 80121e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80121ec:	9503      	str	r5, [sp, #12]
 80121ee:	f04f 0b01 	mov.w	fp, #1
 80121f2:	46b8      	mov	r8, r7
 80121f4:	4645      	mov	r5, r8
 80121f6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80121fa:	b10b      	cbz	r3, 8012200 <_vfiprintf_r+0x50>
 80121fc:	2b25      	cmp	r3, #37	; 0x25
 80121fe:	d154      	bne.n	80122aa <_vfiprintf_r+0xfa>
 8012200:	ebb8 0a07 	subs.w	sl, r8, r7
 8012204:	d00b      	beq.n	801221e <_vfiprintf_r+0x6e>
 8012206:	4653      	mov	r3, sl
 8012208:	463a      	mov	r2, r7
 801220a:	4621      	mov	r1, r4
 801220c:	4630      	mov	r0, r6
 801220e:	f7ff ffbc 	bl	801218a <__sfputs_r>
 8012212:	3001      	adds	r0, #1
 8012214:	f000 80c2 	beq.w	801239c <_vfiprintf_r+0x1ec>
 8012218:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801221a:	4453      	add	r3, sl
 801221c:	9309      	str	r3, [sp, #36]	; 0x24
 801221e:	f898 3000 	ldrb.w	r3, [r8]
 8012222:	2b00      	cmp	r3, #0
 8012224:	f000 80ba 	beq.w	801239c <_vfiprintf_r+0x1ec>
 8012228:	2300      	movs	r3, #0
 801222a:	f04f 32ff 	mov.w	r2, #4294967295
 801222e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012232:	9304      	str	r3, [sp, #16]
 8012234:	9307      	str	r3, [sp, #28]
 8012236:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801223a:	931a      	str	r3, [sp, #104]	; 0x68
 801223c:	46a8      	mov	r8, r5
 801223e:	2205      	movs	r2, #5
 8012240:	f818 1b01 	ldrb.w	r1, [r8], #1
 8012244:	485e      	ldr	r0, [pc, #376]	; (80123c0 <_vfiprintf_r+0x210>)
 8012246:	f7f5 fefb 	bl	8008040 <memchr>
 801224a:	9b04      	ldr	r3, [sp, #16]
 801224c:	bb78      	cbnz	r0, 80122ae <_vfiprintf_r+0xfe>
 801224e:	06d9      	lsls	r1, r3, #27
 8012250:	bf44      	itt	mi
 8012252:	2220      	movmi	r2, #32
 8012254:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012258:	071a      	lsls	r2, r3, #28
 801225a:	bf44      	itt	mi
 801225c:	222b      	movmi	r2, #43	; 0x2b
 801225e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012262:	782a      	ldrb	r2, [r5, #0]
 8012264:	2a2a      	cmp	r2, #42	; 0x2a
 8012266:	d02a      	beq.n	80122be <_vfiprintf_r+0x10e>
 8012268:	9a07      	ldr	r2, [sp, #28]
 801226a:	46a8      	mov	r8, r5
 801226c:	2000      	movs	r0, #0
 801226e:	250a      	movs	r5, #10
 8012270:	4641      	mov	r1, r8
 8012272:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012276:	3b30      	subs	r3, #48	; 0x30
 8012278:	2b09      	cmp	r3, #9
 801227a:	d969      	bls.n	8012350 <_vfiprintf_r+0x1a0>
 801227c:	b360      	cbz	r0, 80122d8 <_vfiprintf_r+0x128>
 801227e:	e024      	b.n	80122ca <_vfiprintf_r+0x11a>
 8012280:	4b50      	ldr	r3, [pc, #320]	; (80123c4 <_vfiprintf_r+0x214>)
 8012282:	429c      	cmp	r4, r3
 8012284:	d101      	bne.n	801228a <_vfiprintf_r+0xda>
 8012286:	68b4      	ldr	r4, [r6, #8]
 8012288:	e7a2      	b.n	80121d0 <_vfiprintf_r+0x20>
 801228a:	4b4f      	ldr	r3, [pc, #316]	; (80123c8 <_vfiprintf_r+0x218>)
 801228c:	429c      	cmp	r4, r3
 801228e:	bf08      	it	eq
 8012290:	68f4      	ldreq	r4, [r6, #12]
 8012292:	e79d      	b.n	80121d0 <_vfiprintf_r+0x20>
 8012294:	4621      	mov	r1, r4
 8012296:	4630      	mov	r0, r6
 8012298:	f7ff fc6c 	bl	8011b74 <__swsetup_r>
 801229c:	2800      	cmp	r0, #0
 801229e:	d09d      	beq.n	80121dc <_vfiprintf_r+0x2c>
 80122a0:	f04f 30ff 	mov.w	r0, #4294967295
 80122a4:	b01d      	add	sp, #116	; 0x74
 80122a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122aa:	46a8      	mov	r8, r5
 80122ac:	e7a2      	b.n	80121f4 <_vfiprintf_r+0x44>
 80122ae:	4a44      	ldr	r2, [pc, #272]	; (80123c0 <_vfiprintf_r+0x210>)
 80122b0:	1a80      	subs	r0, r0, r2
 80122b2:	fa0b f000 	lsl.w	r0, fp, r0
 80122b6:	4318      	orrs	r0, r3
 80122b8:	9004      	str	r0, [sp, #16]
 80122ba:	4645      	mov	r5, r8
 80122bc:	e7be      	b.n	801223c <_vfiprintf_r+0x8c>
 80122be:	9a03      	ldr	r2, [sp, #12]
 80122c0:	1d11      	adds	r1, r2, #4
 80122c2:	6812      	ldr	r2, [r2, #0]
 80122c4:	9103      	str	r1, [sp, #12]
 80122c6:	2a00      	cmp	r2, #0
 80122c8:	db01      	blt.n	80122ce <_vfiprintf_r+0x11e>
 80122ca:	9207      	str	r2, [sp, #28]
 80122cc:	e004      	b.n	80122d8 <_vfiprintf_r+0x128>
 80122ce:	4252      	negs	r2, r2
 80122d0:	f043 0302 	orr.w	r3, r3, #2
 80122d4:	9207      	str	r2, [sp, #28]
 80122d6:	9304      	str	r3, [sp, #16]
 80122d8:	f898 3000 	ldrb.w	r3, [r8]
 80122dc:	2b2e      	cmp	r3, #46	; 0x2e
 80122de:	d10e      	bne.n	80122fe <_vfiprintf_r+0x14e>
 80122e0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80122e4:	2b2a      	cmp	r3, #42	; 0x2a
 80122e6:	d138      	bne.n	801235a <_vfiprintf_r+0x1aa>
 80122e8:	9b03      	ldr	r3, [sp, #12]
 80122ea:	1d1a      	adds	r2, r3, #4
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	9203      	str	r2, [sp, #12]
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	bfb8      	it	lt
 80122f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80122f8:	f108 0802 	add.w	r8, r8, #2
 80122fc:	9305      	str	r3, [sp, #20]
 80122fe:	4d33      	ldr	r5, [pc, #204]	; (80123cc <_vfiprintf_r+0x21c>)
 8012300:	f898 1000 	ldrb.w	r1, [r8]
 8012304:	2203      	movs	r2, #3
 8012306:	4628      	mov	r0, r5
 8012308:	f7f5 fe9a 	bl	8008040 <memchr>
 801230c:	b140      	cbz	r0, 8012320 <_vfiprintf_r+0x170>
 801230e:	2340      	movs	r3, #64	; 0x40
 8012310:	1b40      	subs	r0, r0, r5
 8012312:	fa03 f000 	lsl.w	r0, r3, r0
 8012316:	9b04      	ldr	r3, [sp, #16]
 8012318:	4303      	orrs	r3, r0
 801231a:	f108 0801 	add.w	r8, r8, #1
 801231e:	9304      	str	r3, [sp, #16]
 8012320:	f898 1000 	ldrb.w	r1, [r8]
 8012324:	482a      	ldr	r0, [pc, #168]	; (80123d0 <_vfiprintf_r+0x220>)
 8012326:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801232a:	2206      	movs	r2, #6
 801232c:	f108 0701 	add.w	r7, r8, #1
 8012330:	f7f5 fe86 	bl	8008040 <memchr>
 8012334:	2800      	cmp	r0, #0
 8012336:	d037      	beq.n	80123a8 <_vfiprintf_r+0x1f8>
 8012338:	4b26      	ldr	r3, [pc, #152]	; (80123d4 <_vfiprintf_r+0x224>)
 801233a:	bb1b      	cbnz	r3, 8012384 <_vfiprintf_r+0x1d4>
 801233c:	9b03      	ldr	r3, [sp, #12]
 801233e:	3307      	adds	r3, #7
 8012340:	f023 0307 	bic.w	r3, r3, #7
 8012344:	3308      	adds	r3, #8
 8012346:	9303      	str	r3, [sp, #12]
 8012348:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801234a:	444b      	add	r3, r9
 801234c:	9309      	str	r3, [sp, #36]	; 0x24
 801234e:	e750      	b.n	80121f2 <_vfiprintf_r+0x42>
 8012350:	fb05 3202 	mla	r2, r5, r2, r3
 8012354:	2001      	movs	r0, #1
 8012356:	4688      	mov	r8, r1
 8012358:	e78a      	b.n	8012270 <_vfiprintf_r+0xc0>
 801235a:	2300      	movs	r3, #0
 801235c:	f108 0801 	add.w	r8, r8, #1
 8012360:	9305      	str	r3, [sp, #20]
 8012362:	4619      	mov	r1, r3
 8012364:	250a      	movs	r5, #10
 8012366:	4640      	mov	r0, r8
 8012368:	f810 2b01 	ldrb.w	r2, [r0], #1
 801236c:	3a30      	subs	r2, #48	; 0x30
 801236e:	2a09      	cmp	r2, #9
 8012370:	d903      	bls.n	801237a <_vfiprintf_r+0x1ca>
 8012372:	2b00      	cmp	r3, #0
 8012374:	d0c3      	beq.n	80122fe <_vfiprintf_r+0x14e>
 8012376:	9105      	str	r1, [sp, #20]
 8012378:	e7c1      	b.n	80122fe <_vfiprintf_r+0x14e>
 801237a:	fb05 2101 	mla	r1, r5, r1, r2
 801237e:	2301      	movs	r3, #1
 8012380:	4680      	mov	r8, r0
 8012382:	e7f0      	b.n	8012366 <_vfiprintf_r+0x1b6>
 8012384:	ab03      	add	r3, sp, #12
 8012386:	9300      	str	r3, [sp, #0]
 8012388:	4622      	mov	r2, r4
 801238a:	4b13      	ldr	r3, [pc, #76]	; (80123d8 <_vfiprintf_r+0x228>)
 801238c:	a904      	add	r1, sp, #16
 801238e:	4630      	mov	r0, r6
 8012390:	f3af 8000 	nop.w
 8012394:	f1b0 3fff 	cmp.w	r0, #4294967295
 8012398:	4681      	mov	r9, r0
 801239a:	d1d5      	bne.n	8012348 <_vfiprintf_r+0x198>
 801239c:	89a3      	ldrh	r3, [r4, #12]
 801239e:	065b      	lsls	r3, r3, #25
 80123a0:	f53f af7e 	bmi.w	80122a0 <_vfiprintf_r+0xf0>
 80123a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80123a6:	e77d      	b.n	80122a4 <_vfiprintf_r+0xf4>
 80123a8:	ab03      	add	r3, sp, #12
 80123aa:	9300      	str	r3, [sp, #0]
 80123ac:	4622      	mov	r2, r4
 80123ae:	4b0a      	ldr	r3, [pc, #40]	; (80123d8 <_vfiprintf_r+0x228>)
 80123b0:	a904      	add	r1, sp, #16
 80123b2:	4630      	mov	r0, r6
 80123b4:	f000 f888 	bl	80124c8 <_printf_i>
 80123b8:	e7ec      	b.n	8012394 <_vfiprintf_r+0x1e4>
 80123ba:	bf00      	nop
 80123bc:	08026568 	.word	0x08026568
 80123c0:	080265a8 	.word	0x080265a8
 80123c4:	08026588 	.word	0x08026588
 80123c8:	08026548 	.word	0x08026548
 80123cc:	080265ae 	.word	0x080265ae
 80123d0:	080265b2 	.word	0x080265b2
 80123d4:	00000000 	.word	0x00000000
 80123d8:	0801218b 	.word	0x0801218b

080123dc <_printf_common>:
 80123dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80123e0:	4691      	mov	r9, r2
 80123e2:	461f      	mov	r7, r3
 80123e4:	688a      	ldr	r2, [r1, #8]
 80123e6:	690b      	ldr	r3, [r1, #16]
 80123e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80123ec:	4293      	cmp	r3, r2
 80123ee:	bfb8      	it	lt
 80123f0:	4613      	movlt	r3, r2
 80123f2:	f8c9 3000 	str.w	r3, [r9]
 80123f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80123fa:	4606      	mov	r6, r0
 80123fc:	460c      	mov	r4, r1
 80123fe:	b112      	cbz	r2, 8012406 <_printf_common+0x2a>
 8012400:	3301      	adds	r3, #1
 8012402:	f8c9 3000 	str.w	r3, [r9]
 8012406:	6823      	ldr	r3, [r4, #0]
 8012408:	0699      	lsls	r1, r3, #26
 801240a:	bf42      	ittt	mi
 801240c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8012410:	3302      	addmi	r3, #2
 8012412:	f8c9 3000 	strmi.w	r3, [r9]
 8012416:	6825      	ldr	r5, [r4, #0]
 8012418:	f015 0506 	ands.w	r5, r5, #6
 801241c:	d107      	bne.n	801242e <_printf_common+0x52>
 801241e:	f104 0a19 	add.w	sl, r4, #25
 8012422:	68e3      	ldr	r3, [r4, #12]
 8012424:	f8d9 2000 	ldr.w	r2, [r9]
 8012428:	1a9b      	subs	r3, r3, r2
 801242a:	42ab      	cmp	r3, r5
 801242c:	dc28      	bgt.n	8012480 <_printf_common+0xa4>
 801242e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8012432:	6822      	ldr	r2, [r4, #0]
 8012434:	3300      	adds	r3, #0
 8012436:	bf18      	it	ne
 8012438:	2301      	movne	r3, #1
 801243a:	0692      	lsls	r2, r2, #26
 801243c:	d42d      	bmi.n	801249a <_printf_common+0xbe>
 801243e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012442:	4639      	mov	r1, r7
 8012444:	4630      	mov	r0, r6
 8012446:	47c0      	blx	r8
 8012448:	3001      	adds	r0, #1
 801244a:	d020      	beq.n	801248e <_printf_common+0xb2>
 801244c:	6823      	ldr	r3, [r4, #0]
 801244e:	68e5      	ldr	r5, [r4, #12]
 8012450:	f8d9 2000 	ldr.w	r2, [r9]
 8012454:	f003 0306 	and.w	r3, r3, #6
 8012458:	2b04      	cmp	r3, #4
 801245a:	bf08      	it	eq
 801245c:	1aad      	subeq	r5, r5, r2
 801245e:	68a3      	ldr	r3, [r4, #8]
 8012460:	6922      	ldr	r2, [r4, #16]
 8012462:	bf0c      	ite	eq
 8012464:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012468:	2500      	movne	r5, #0
 801246a:	4293      	cmp	r3, r2
 801246c:	bfc4      	itt	gt
 801246e:	1a9b      	subgt	r3, r3, r2
 8012470:	18ed      	addgt	r5, r5, r3
 8012472:	f04f 0900 	mov.w	r9, #0
 8012476:	341a      	adds	r4, #26
 8012478:	454d      	cmp	r5, r9
 801247a:	d11a      	bne.n	80124b2 <_printf_common+0xd6>
 801247c:	2000      	movs	r0, #0
 801247e:	e008      	b.n	8012492 <_printf_common+0xb6>
 8012480:	2301      	movs	r3, #1
 8012482:	4652      	mov	r2, sl
 8012484:	4639      	mov	r1, r7
 8012486:	4630      	mov	r0, r6
 8012488:	47c0      	blx	r8
 801248a:	3001      	adds	r0, #1
 801248c:	d103      	bne.n	8012496 <_printf_common+0xba>
 801248e:	f04f 30ff 	mov.w	r0, #4294967295
 8012492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012496:	3501      	adds	r5, #1
 8012498:	e7c3      	b.n	8012422 <_printf_common+0x46>
 801249a:	18e1      	adds	r1, r4, r3
 801249c:	1c5a      	adds	r2, r3, #1
 801249e:	2030      	movs	r0, #48	; 0x30
 80124a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80124a4:	4422      	add	r2, r4
 80124a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80124aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80124ae:	3302      	adds	r3, #2
 80124b0:	e7c5      	b.n	801243e <_printf_common+0x62>
 80124b2:	2301      	movs	r3, #1
 80124b4:	4622      	mov	r2, r4
 80124b6:	4639      	mov	r1, r7
 80124b8:	4630      	mov	r0, r6
 80124ba:	47c0      	blx	r8
 80124bc:	3001      	adds	r0, #1
 80124be:	d0e6      	beq.n	801248e <_printf_common+0xb2>
 80124c0:	f109 0901 	add.w	r9, r9, #1
 80124c4:	e7d8      	b.n	8012478 <_printf_common+0x9c>
	...

080124c8 <_printf_i>:
 80124c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80124cc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80124d0:	460c      	mov	r4, r1
 80124d2:	7e09      	ldrb	r1, [r1, #24]
 80124d4:	b085      	sub	sp, #20
 80124d6:	296e      	cmp	r1, #110	; 0x6e
 80124d8:	4617      	mov	r7, r2
 80124da:	4606      	mov	r6, r0
 80124dc:	4698      	mov	r8, r3
 80124de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80124e0:	f000 80b3 	beq.w	801264a <_printf_i+0x182>
 80124e4:	d822      	bhi.n	801252c <_printf_i+0x64>
 80124e6:	2963      	cmp	r1, #99	; 0x63
 80124e8:	d036      	beq.n	8012558 <_printf_i+0x90>
 80124ea:	d80a      	bhi.n	8012502 <_printf_i+0x3a>
 80124ec:	2900      	cmp	r1, #0
 80124ee:	f000 80b9 	beq.w	8012664 <_printf_i+0x19c>
 80124f2:	2958      	cmp	r1, #88	; 0x58
 80124f4:	f000 8083 	beq.w	80125fe <_printf_i+0x136>
 80124f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80124fc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8012500:	e032      	b.n	8012568 <_printf_i+0xa0>
 8012502:	2964      	cmp	r1, #100	; 0x64
 8012504:	d001      	beq.n	801250a <_printf_i+0x42>
 8012506:	2969      	cmp	r1, #105	; 0x69
 8012508:	d1f6      	bne.n	80124f8 <_printf_i+0x30>
 801250a:	6820      	ldr	r0, [r4, #0]
 801250c:	6813      	ldr	r3, [r2, #0]
 801250e:	0605      	lsls	r5, r0, #24
 8012510:	f103 0104 	add.w	r1, r3, #4
 8012514:	d52a      	bpl.n	801256c <_printf_i+0xa4>
 8012516:	681b      	ldr	r3, [r3, #0]
 8012518:	6011      	str	r1, [r2, #0]
 801251a:	2b00      	cmp	r3, #0
 801251c:	da03      	bge.n	8012526 <_printf_i+0x5e>
 801251e:	222d      	movs	r2, #45	; 0x2d
 8012520:	425b      	negs	r3, r3
 8012522:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8012526:	486f      	ldr	r0, [pc, #444]	; (80126e4 <_printf_i+0x21c>)
 8012528:	220a      	movs	r2, #10
 801252a:	e039      	b.n	80125a0 <_printf_i+0xd8>
 801252c:	2973      	cmp	r1, #115	; 0x73
 801252e:	f000 809d 	beq.w	801266c <_printf_i+0x1a4>
 8012532:	d808      	bhi.n	8012546 <_printf_i+0x7e>
 8012534:	296f      	cmp	r1, #111	; 0x6f
 8012536:	d020      	beq.n	801257a <_printf_i+0xb2>
 8012538:	2970      	cmp	r1, #112	; 0x70
 801253a:	d1dd      	bne.n	80124f8 <_printf_i+0x30>
 801253c:	6823      	ldr	r3, [r4, #0]
 801253e:	f043 0320 	orr.w	r3, r3, #32
 8012542:	6023      	str	r3, [r4, #0]
 8012544:	e003      	b.n	801254e <_printf_i+0x86>
 8012546:	2975      	cmp	r1, #117	; 0x75
 8012548:	d017      	beq.n	801257a <_printf_i+0xb2>
 801254a:	2978      	cmp	r1, #120	; 0x78
 801254c:	d1d4      	bne.n	80124f8 <_printf_i+0x30>
 801254e:	2378      	movs	r3, #120	; 0x78
 8012550:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012554:	4864      	ldr	r0, [pc, #400]	; (80126e8 <_printf_i+0x220>)
 8012556:	e055      	b.n	8012604 <_printf_i+0x13c>
 8012558:	6813      	ldr	r3, [r2, #0]
 801255a:	1d19      	adds	r1, r3, #4
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	6011      	str	r1, [r2, #0]
 8012560:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012564:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012568:	2301      	movs	r3, #1
 801256a:	e08c      	b.n	8012686 <_printf_i+0x1be>
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	6011      	str	r1, [r2, #0]
 8012570:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012574:	bf18      	it	ne
 8012576:	b21b      	sxthne	r3, r3
 8012578:	e7cf      	b.n	801251a <_printf_i+0x52>
 801257a:	6813      	ldr	r3, [r2, #0]
 801257c:	6825      	ldr	r5, [r4, #0]
 801257e:	1d18      	adds	r0, r3, #4
 8012580:	6010      	str	r0, [r2, #0]
 8012582:	0628      	lsls	r0, r5, #24
 8012584:	d501      	bpl.n	801258a <_printf_i+0xc2>
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	e002      	b.n	8012590 <_printf_i+0xc8>
 801258a:	0668      	lsls	r0, r5, #25
 801258c:	d5fb      	bpl.n	8012586 <_printf_i+0xbe>
 801258e:	881b      	ldrh	r3, [r3, #0]
 8012590:	4854      	ldr	r0, [pc, #336]	; (80126e4 <_printf_i+0x21c>)
 8012592:	296f      	cmp	r1, #111	; 0x6f
 8012594:	bf14      	ite	ne
 8012596:	220a      	movne	r2, #10
 8012598:	2208      	moveq	r2, #8
 801259a:	2100      	movs	r1, #0
 801259c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80125a0:	6865      	ldr	r5, [r4, #4]
 80125a2:	60a5      	str	r5, [r4, #8]
 80125a4:	2d00      	cmp	r5, #0
 80125a6:	f2c0 8095 	blt.w	80126d4 <_printf_i+0x20c>
 80125aa:	6821      	ldr	r1, [r4, #0]
 80125ac:	f021 0104 	bic.w	r1, r1, #4
 80125b0:	6021      	str	r1, [r4, #0]
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d13d      	bne.n	8012632 <_printf_i+0x16a>
 80125b6:	2d00      	cmp	r5, #0
 80125b8:	f040 808e 	bne.w	80126d8 <_printf_i+0x210>
 80125bc:	4665      	mov	r5, ip
 80125be:	2a08      	cmp	r2, #8
 80125c0:	d10b      	bne.n	80125da <_printf_i+0x112>
 80125c2:	6823      	ldr	r3, [r4, #0]
 80125c4:	07db      	lsls	r3, r3, #31
 80125c6:	d508      	bpl.n	80125da <_printf_i+0x112>
 80125c8:	6923      	ldr	r3, [r4, #16]
 80125ca:	6862      	ldr	r2, [r4, #4]
 80125cc:	429a      	cmp	r2, r3
 80125ce:	bfde      	ittt	le
 80125d0:	2330      	movle	r3, #48	; 0x30
 80125d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80125d6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80125da:	ebac 0305 	sub.w	r3, ip, r5
 80125de:	6123      	str	r3, [r4, #16]
 80125e0:	f8cd 8000 	str.w	r8, [sp]
 80125e4:	463b      	mov	r3, r7
 80125e6:	aa03      	add	r2, sp, #12
 80125e8:	4621      	mov	r1, r4
 80125ea:	4630      	mov	r0, r6
 80125ec:	f7ff fef6 	bl	80123dc <_printf_common>
 80125f0:	3001      	adds	r0, #1
 80125f2:	d14d      	bne.n	8012690 <_printf_i+0x1c8>
 80125f4:	f04f 30ff 	mov.w	r0, #4294967295
 80125f8:	b005      	add	sp, #20
 80125fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80125fe:	4839      	ldr	r0, [pc, #228]	; (80126e4 <_printf_i+0x21c>)
 8012600:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8012604:	6813      	ldr	r3, [r2, #0]
 8012606:	6821      	ldr	r1, [r4, #0]
 8012608:	1d1d      	adds	r5, r3, #4
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	6015      	str	r5, [r2, #0]
 801260e:	060a      	lsls	r2, r1, #24
 8012610:	d50b      	bpl.n	801262a <_printf_i+0x162>
 8012612:	07ca      	lsls	r2, r1, #31
 8012614:	bf44      	itt	mi
 8012616:	f041 0120 	orrmi.w	r1, r1, #32
 801261a:	6021      	strmi	r1, [r4, #0]
 801261c:	b91b      	cbnz	r3, 8012626 <_printf_i+0x15e>
 801261e:	6822      	ldr	r2, [r4, #0]
 8012620:	f022 0220 	bic.w	r2, r2, #32
 8012624:	6022      	str	r2, [r4, #0]
 8012626:	2210      	movs	r2, #16
 8012628:	e7b7      	b.n	801259a <_printf_i+0xd2>
 801262a:	064d      	lsls	r5, r1, #25
 801262c:	bf48      	it	mi
 801262e:	b29b      	uxthmi	r3, r3
 8012630:	e7ef      	b.n	8012612 <_printf_i+0x14a>
 8012632:	4665      	mov	r5, ip
 8012634:	fbb3 f1f2 	udiv	r1, r3, r2
 8012638:	fb02 3311 	mls	r3, r2, r1, r3
 801263c:	5cc3      	ldrb	r3, [r0, r3]
 801263e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8012642:	460b      	mov	r3, r1
 8012644:	2900      	cmp	r1, #0
 8012646:	d1f5      	bne.n	8012634 <_printf_i+0x16c>
 8012648:	e7b9      	b.n	80125be <_printf_i+0xf6>
 801264a:	6813      	ldr	r3, [r2, #0]
 801264c:	6825      	ldr	r5, [r4, #0]
 801264e:	6961      	ldr	r1, [r4, #20]
 8012650:	1d18      	adds	r0, r3, #4
 8012652:	6010      	str	r0, [r2, #0]
 8012654:	0628      	lsls	r0, r5, #24
 8012656:	681b      	ldr	r3, [r3, #0]
 8012658:	d501      	bpl.n	801265e <_printf_i+0x196>
 801265a:	6019      	str	r1, [r3, #0]
 801265c:	e002      	b.n	8012664 <_printf_i+0x19c>
 801265e:	066a      	lsls	r2, r5, #25
 8012660:	d5fb      	bpl.n	801265a <_printf_i+0x192>
 8012662:	8019      	strh	r1, [r3, #0]
 8012664:	2300      	movs	r3, #0
 8012666:	6123      	str	r3, [r4, #16]
 8012668:	4665      	mov	r5, ip
 801266a:	e7b9      	b.n	80125e0 <_printf_i+0x118>
 801266c:	6813      	ldr	r3, [r2, #0]
 801266e:	1d19      	adds	r1, r3, #4
 8012670:	6011      	str	r1, [r2, #0]
 8012672:	681d      	ldr	r5, [r3, #0]
 8012674:	6862      	ldr	r2, [r4, #4]
 8012676:	2100      	movs	r1, #0
 8012678:	4628      	mov	r0, r5
 801267a:	f7f5 fce1 	bl	8008040 <memchr>
 801267e:	b108      	cbz	r0, 8012684 <_printf_i+0x1bc>
 8012680:	1b40      	subs	r0, r0, r5
 8012682:	6060      	str	r0, [r4, #4]
 8012684:	6863      	ldr	r3, [r4, #4]
 8012686:	6123      	str	r3, [r4, #16]
 8012688:	2300      	movs	r3, #0
 801268a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801268e:	e7a7      	b.n	80125e0 <_printf_i+0x118>
 8012690:	6923      	ldr	r3, [r4, #16]
 8012692:	462a      	mov	r2, r5
 8012694:	4639      	mov	r1, r7
 8012696:	4630      	mov	r0, r6
 8012698:	47c0      	blx	r8
 801269a:	3001      	adds	r0, #1
 801269c:	d0aa      	beq.n	80125f4 <_printf_i+0x12c>
 801269e:	6823      	ldr	r3, [r4, #0]
 80126a0:	079b      	lsls	r3, r3, #30
 80126a2:	d413      	bmi.n	80126cc <_printf_i+0x204>
 80126a4:	68e0      	ldr	r0, [r4, #12]
 80126a6:	9b03      	ldr	r3, [sp, #12]
 80126a8:	4298      	cmp	r0, r3
 80126aa:	bfb8      	it	lt
 80126ac:	4618      	movlt	r0, r3
 80126ae:	e7a3      	b.n	80125f8 <_printf_i+0x130>
 80126b0:	2301      	movs	r3, #1
 80126b2:	464a      	mov	r2, r9
 80126b4:	4639      	mov	r1, r7
 80126b6:	4630      	mov	r0, r6
 80126b8:	47c0      	blx	r8
 80126ba:	3001      	adds	r0, #1
 80126bc:	d09a      	beq.n	80125f4 <_printf_i+0x12c>
 80126be:	3501      	adds	r5, #1
 80126c0:	68e3      	ldr	r3, [r4, #12]
 80126c2:	9a03      	ldr	r2, [sp, #12]
 80126c4:	1a9b      	subs	r3, r3, r2
 80126c6:	42ab      	cmp	r3, r5
 80126c8:	dcf2      	bgt.n	80126b0 <_printf_i+0x1e8>
 80126ca:	e7eb      	b.n	80126a4 <_printf_i+0x1dc>
 80126cc:	2500      	movs	r5, #0
 80126ce:	f104 0919 	add.w	r9, r4, #25
 80126d2:	e7f5      	b.n	80126c0 <_printf_i+0x1f8>
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d1ac      	bne.n	8012632 <_printf_i+0x16a>
 80126d8:	7803      	ldrb	r3, [r0, #0]
 80126da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80126de:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80126e2:	e76c      	b.n	80125be <_printf_i+0xf6>
 80126e4:	080265b9 	.word	0x080265b9
 80126e8:	080265ca 	.word	0x080265ca

080126ec <_sbrk_r>:
 80126ec:	b538      	push	{r3, r4, r5, lr}
 80126ee:	4c06      	ldr	r4, [pc, #24]	; (8012708 <_sbrk_r+0x1c>)
 80126f0:	2300      	movs	r3, #0
 80126f2:	4605      	mov	r5, r0
 80126f4:	4608      	mov	r0, r1
 80126f6:	6023      	str	r3, [r4, #0]
 80126f8:	f7fe fe34 	bl	8011364 <_sbrk>
 80126fc:	1c43      	adds	r3, r0, #1
 80126fe:	d102      	bne.n	8012706 <_sbrk_r+0x1a>
 8012700:	6823      	ldr	r3, [r4, #0]
 8012702:	b103      	cbz	r3, 8012706 <_sbrk_r+0x1a>
 8012704:	602b      	str	r3, [r5, #0]
 8012706:	bd38      	pop	{r3, r4, r5, pc}
 8012708:	2000460c 	.word	0x2000460c

0801270c <__sread>:
 801270c:	b510      	push	{r4, lr}
 801270e:	460c      	mov	r4, r1
 8012710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012714:	f000 f896 	bl	8012844 <_read_r>
 8012718:	2800      	cmp	r0, #0
 801271a:	bfab      	itete	ge
 801271c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801271e:	89a3      	ldrhlt	r3, [r4, #12]
 8012720:	181b      	addge	r3, r3, r0
 8012722:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012726:	bfac      	ite	ge
 8012728:	6563      	strge	r3, [r4, #84]	; 0x54
 801272a:	81a3      	strhlt	r3, [r4, #12]
 801272c:	bd10      	pop	{r4, pc}

0801272e <__swrite>:
 801272e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012732:	461f      	mov	r7, r3
 8012734:	898b      	ldrh	r3, [r1, #12]
 8012736:	05db      	lsls	r3, r3, #23
 8012738:	4605      	mov	r5, r0
 801273a:	460c      	mov	r4, r1
 801273c:	4616      	mov	r6, r2
 801273e:	d505      	bpl.n	801274c <__swrite+0x1e>
 8012740:	2302      	movs	r3, #2
 8012742:	2200      	movs	r2, #0
 8012744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012748:	f000 f868 	bl	801281c <_lseek_r>
 801274c:	89a3      	ldrh	r3, [r4, #12]
 801274e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012752:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012756:	81a3      	strh	r3, [r4, #12]
 8012758:	4632      	mov	r2, r6
 801275a:	463b      	mov	r3, r7
 801275c:	4628      	mov	r0, r5
 801275e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012762:	f000 b817 	b.w	8012794 <_write_r>

08012766 <__sseek>:
 8012766:	b510      	push	{r4, lr}
 8012768:	460c      	mov	r4, r1
 801276a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801276e:	f000 f855 	bl	801281c <_lseek_r>
 8012772:	1c43      	adds	r3, r0, #1
 8012774:	89a3      	ldrh	r3, [r4, #12]
 8012776:	bf15      	itete	ne
 8012778:	6560      	strne	r0, [r4, #84]	; 0x54
 801277a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801277e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012782:	81a3      	strheq	r3, [r4, #12]
 8012784:	bf18      	it	ne
 8012786:	81a3      	strhne	r3, [r4, #12]
 8012788:	bd10      	pop	{r4, pc}

0801278a <__sclose>:
 801278a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801278e:	f000 b813 	b.w	80127b8 <_close_r>
	...

08012794 <_write_r>:
 8012794:	b538      	push	{r3, r4, r5, lr}
 8012796:	4c07      	ldr	r4, [pc, #28]	; (80127b4 <_write_r+0x20>)
 8012798:	4605      	mov	r5, r0
 801279a:	4608      	mov	r0, r1
 801279c:	4611      	mov	r1, r2
 801279e:	2200      	movs	r2, #0
 80127a0:	6022      	str	r2, [r4, #0]
 80127a2:	461a      	mov	r2, r3
 80127a4:	f7fd fae3 	bl	800fd6e <_write>
 80127a8:	1c43      	adds	r3, r0, #1
 80127aa:	d102      	bne.n	80127b2 <_write_r+0x1e>
 80127ac:	6823      	ldr	r3, [r4, #0]
 80127ae:	b103      	cbz	r3, 80127b2 <_write_r+0x1e>
 80127b0:	602b      	str	r3, [r5, #0]
 80127b2:	bd38      	pop	{r3, r4, r5, pc}
 80127b4:	2000460c 	.word	0x2000460c

080127b8 <_close_r>:
 80127b8:	b538      	push	{r3, r4, r5, lr}
 80127ba:	4c06      	ldr	r4, [pc, #24]	; (80127d4 <_close_r+0x1c>)
 80127bc:	2300      	movs	r3, #0
 80127be:	4605      	mov	r5, r0
 80127c0:	4608      	mov	r0, r1
 80127c2:	6023      	str	r3, [r4, #0]
 80127c4:	f7fe fd99 	bl	80112fa <_close>
 80127c8:	1c43      	adds	r3, r0, #1
 80127ca:	d102      	bne.n	80127d2 <_close_r+0x1a>
 80127cc:	6823      	ldr	r3, [r4, #0]
 80127ce:	b103      	cbz	r3, 80127d2 <_close_r+0x1a>
 80127d0:	602b      	str	r3, [r5, #0]
 80127d2:	bd38      	pop	{r3, r4, r5, pc}
 80127d4:	2000460c 	.word	0x2000460c

080127d8 <_fstat_r>:
 80127d8:	b538      	push	{r3, r4, r5, lr}
 80127da:	4c07      	ldr	r4, [pc, #28]	; (80127f8 <_fstat_r+0x20>)
 80127dc:	2300      	movs	r3, #0
 80127de:	4605      	mov	r5, r0
 80127e0:	4608      	mov	r0, r1
 80127e2:	4611      	mov	r1, r2
 80127e4:	6023      	str	r3, [r4, #0]
 80127e6:	f7fe fd94 	bl	8011312 <_fstat>
 80127ea:	1c43      	adds	r3, r0, #1
 80127ec:	d102      	bne.n	80127f4 <_fstat_r+0x1c>
 80127ee:	6823      	ldr	r3, [r4, #0]
 80127f0:	b103      	cbz	r3, 80127f4 <_fstat_r+0x1c>
 80127f2:	602b      	str	r3, [r5, #0]
 80127f4:	bd38      	pop	{r3, r4, r5, pc}
 80127f6:	bf00      	nop
 80127f8:	2000460c 	.word	0x2000460c

080127fc <_isatty_r>:
 80127fc:	b538      	push	{r3, r4, r5, lr}
 80127fe:	4c06      	ldr	r4, [pc, #24]	; (8012818 <_isatty_r+0x1c>)
 8012800:	2300      	movs	r3, #0
 8012802:	4605      	mov	r5, r0
 8012804:	4608      	mov	r0, r1
 8012806:	6023      	str	r3, [r4, #0]
 8012808:	f7fe fd93 	bl	8011332 <_isatty>
 801280c:	1c43      	adds	r3, r0, #1
 801280e:	d102      	bne.n	8012816 <_isatty_r+0x1a>
 8012810:	6823      	ldr	r3, [r4, #0]
 8012812:	b103      	cbz	r3, 8012816 <_isatty_r+0x1a>
 8012814:	602b      	str	r3, [r5, #0]
 8012816:	bd38      	pop	{r3, r4, r5, pc}
 8012818:	2000460c 	.word	0x2000460c

0801281c <_lseek_r>:
 801281c:	b538      	push	{r3, r4, r5, lr}
 801281e:	4c07      	ldr	r4, [pc, #28]	; (801283c <_lseek_r+0x20>)
 8012820:	4605      	mov	r5, r0
 8012822:	4608      	mov	r0, r1
 8012824:	4611      	mov	r1, r2
 8012826:	2200      	movs	r2, #0
 8012828:	6022      	str	r2, [r4, #0]
 801282a:	461a      	mov	r2, r3
 801282c:	f7fe fd8c 	bl	8011348 <_lseek>
 8012830:	1c43      	adds	r3, r0, #1
 8012832:	d102      	bne.n	801283a <_lseek_r+0x1e>
 8012834:	6823      	ldr	r3, [r4, #0]
 8012836:	b103      	cbz	r3, 801283a <_lseek_r+0x1e>
 8012838:	602b      	str	r3, [r5, #0]
 801283a:	bd38      	pop	{r3, r4, r5, pc}
 801283c:	2000460c 	.word	0x2000460c

08012840 <__malloc_lock>:
 8012840:	4770      	bx	lr

08012842 <__malloc_unlock>:
 8012842:	4770      	bx	lr

08012844 <_read_r>:
 8012844:	b538      	push	{r3, r4, r5, lr}
 8012846:	4c07      	ldr	r4, [pc, #28]	; (8012864 <_read_r+0x20>)
 8012848:	4605      	mov	r5, r0
 801284a:	4608      	mov	r0, r1
 801284c:	4611      	mov	r1, r2
 801284e:	2200      	movs	r2, #0
 8012850:	6022      	str	r2, [r4, #0]
 8012852:	461a      	mov	r2, r3
 8012854:	f7fe fd34 	bl	80112c0 <_read>
 8012858:	1c43      	adds	r3, r0, #1
 801285a:	d102      	bne.n	8012862 <_read_r+0x1e>
 801285c:	6823      	ldr	r3, [r4, #0]
 801285e:	b103      	cbz	r3, 8012862 <_read_r+0x1e>
 8012860:	602b      	str	r3, [r5, #0]
 8012862:	bd38      	pop	{r3, r4, r5, pc}
 8012864:	2000460c 	.word	0x2000460c

08012868 <fmodf>:
 8012868:	b5d0      	push	{r4, r6, r7, lr}
 801286a:	ed2d 8b02 	vpush	{d8}
 801286e:	b08a      	sub	sp, #40	; 0x28
 8012870:	eef0 8a40 	vmov.f32	s17, s0
 8012874:	eeb0 8a60 	vmov.f32	s16, s1
 8012878:	f000 f852 	bl	8012920 <__ieee754_fmodf>
 801287c:	4b26      	ldr	r3, [pc, #152]	; (8012918 <fmodf+0xb0>)
 801287e:	f993 4000 	ldrsb.w	r4, [r3]
 8012882:	1c63      	adds	r3, r4, #1
 8012884:	d035      	beq.n	80128f2 <fmodf+0x8a>
 8012886:	eeb4 8a48 	vcmp.f32	s16, s16
 801288a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801288e:	d630      	bvs.n	80128f2 <fmodf+0x8a>
 8012890:	eef4 8a68 	vcmp.f32	s17, s17
 8012894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012898:	d62b      	bvs.n	80128f2 <fmodf+0x8a>
 801289a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801289e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128a2:	d126      	bne.n	80128f2 <fmodf+0x8a>
 80128a4:	2301      	movs	r3, #1
 80128a6:	9300      	str	r3, [sp, #0]
 80128a8:	4b1c      	ldr	r3, [pc, #112]	; (801291c <fmodf+0xb4>)
 80128aa:	9301      	str	r3, [sp, #4]
 80128ac:	ee18 0a90 	vmov	r0, s17
 80128b0:	2300      	movs	r3, #0
 80128b2:	9308      	str	r3, [sp, #32]
 80128b4:	f7f5 fd78 	bl	80083a8 <__aeabi_f2d>
 80128b8:	4606      	mov	r6, r0
 80128ba:	460f      	mov	r7, r1
 80128bc:	ee18 0a10 	vmov	r0, s16
 80128c0:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80128c4:	f7f5 fd70 	bl	80083a8 <__aeabi_f2d>
 80128c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80128cc:	b9ac      	cbnz	r4, 80128fa <fmodf+0x92>
 80128ce:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80128d2:	4668      	mov	r0, sp
 80128d4:	f000 f8ac 	bl	8012a30 <matherr>
 80128d8:	b1c8      	cbz	r0, 801290e <fmodf+0xa6>
 80128da:	9b08      	ldr	r3, [sp, #32]
 80128dc:	b11b      	cbz	r3, 80128e6 <fmodf+0x7e>
 80128de:	f7ff f83d 	bl	801195c <__errno>
 80128e2:	9b08      	ldr	r3, [sp, #32]
 80128e4:	6003      	str	r3, [r0, #0]
 80128e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80128ea:	f7f6 f84f 	bl	800898c <__aeabi_d2f>
 80128ee:	ee00 0a10 	vmov	s0, r0
 80128f2:	b00a      	add	sp, #40	; 0x28
 80128f4:	ecbd 8b02 	vpop	{d8}
 80128f8:	bdd0      	pop	{r4, r6, r7, pc}
 80128fa:	2200      	movs	r2, #0
 80128fc:	2300      	movs	r3, #0
 80128fe:	4610      	mov	r0, r2
 8012900:	4619      	mov	r1, r3
 8012902:	f7f5 fed3 	bl	80086ac <__aeabi_ddiv>
 8012906:	2c02      	cmp	r4, #2
 8012908:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801290c:	d1e1      	bne.n	80128d2 <fmodf+0x6a>
 801290e:	f7ff f825 	bl	801195c <__errno>
 8012912:	2321      	movs	r3, #33	; 0x21
 8012914:	6003      	str	r3, [r0, #0]
 8012916:	e7e0      	b.n	80128da <fmodf+0x72>
 8012918:	200000a0 	.word	0x200000a0
 801291c:	080265db 	.word	0x080265db

08012920 <__ieee754_fmodf>:
 8012920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012922:	ee10 6a90 	vmov	r6, s1
 8012926:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 801292a:	ee10 3a10 	vmov	r3, s0
 801292e:	d009      	beq.n	8012944 <__ieee754_fmodf+0x24>
 8012930:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8012934:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8012938:	ee10 7a10 	vmov	r7, s0
 801293c:	da02      	bge.n	8012944 <__ieee754_fmodf+0x24>
 801293e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8012942:	dd0a      	ble.n	801295a <__ieee754_fmodf+0x3a>
 8012944:	ee07 3a90 	vmov	s15, r3
 8012948:	ee67 0aa0 	vmul.f32	s1, s15, s1
 801294c:	eec0 7aa0 	vdiv.f32	s15, s1, s1
 8012950:	ee17 3a90 	vmov	r3, s15
 8012954:	ee00 3a10 	vmov	s0, r3
 8012958:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801295a:	42a9      	cmp	r1, r5
 801295c:	dbfa      	blt.n	8012954 <__ieee754_fmodf+0x34>
 801295e:	f003 4400 	and.w	r4, r3, #2147483648	; 0x80000000
 8012962:	d105      	bne.n	8012970 <__ieee754_fmodf+0x50>
 8012964:	4a30      	ldr	r2, [pc, #192]	; (8012a28 <__ieee754_fmodf+0x108>)
 8012966:	0fe3      	lsrs	r3, r4, #31
 8012968:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801296c:	681b      	ldr	r3, [r3, #0]
 801296e:	e7f1      	b.n	8012954 <__ieee754_fmodf+0x34>
 8012970:	4b2e      	ldr	r3, [pc, #184]	; (8012a2c <__ieee754_fmodf+0x10c>)
 8012972:	4299      	cmp	r1, r3
 8012974:	dc3e      	bgt.n	80129f4 <__ieee754_fmodf+0xd4>
 8012976:	020a      	lsls	r2, r1, #8
 8012978:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 801297c:	2a00      	cmp	r2, #0
 801297e:	dc36      	bgt.n	80129ee <__ieee754_fmodf+0xce>
 8012980:	429d      	cmp	r5, r3
 8012982:	dc3a      	bgt.n	80129fa <__ieee754_fmodf+0xda>
 8012984:	022b      	lsls	r3, r5, #8
 8012986:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 801298a:	005b      	lsls	r3, r3, #1
 801298c:	f102 32ff 	add.w	r2, r2, #4294967295
 8012990:	d5fb      	bpl.n	801298a <__ieee754_fmodf+0x6a>
 8012992:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 8012996:	bfbb      	ittet	lt
 8012998:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 801299c:	1a1b      	sublt	r3, r3, r0
 801299e:	f3c7 0116 	ubfxge	r1, r7, #0, #23
 80129a2:	4099      	lsllt	r1, r3
 80129a4:	bfa8      	it	ge
 80129a6:	f441 0100 	orrge.w	r1, r1, #8388608	; 0x800000
 80129aa:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 80129ae:	bfb5      	itete	lt
 80129b0:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 80129b4:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 80129b8:	1a9b      	sublt	r3, r3, r2
 80129ba:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 80129be:	bfb8      	it	lt
 80129c0:	409d      	lsllt	r5, r3
 80129c2:	1a80      	subs	r0, r0, r2
 80129c4:	1b4b      	subs	r3, r1, r5
 80129c6:	b9d8      	cbnz	r0, 8012a00 <__ieee754_fmodf+0xe0>
 80129c8:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 80129cc:	bf28      	it	cs
 80129ce:	460b      	movcs	r3, r1
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d0c7      	beq.n	8012964 <__ieee754_fmodf+0x44>
 80129d4:	4915      	ldr	r1, [pc, #84]	; (8012a2c <__ieee754_fmodf+0x10c>)
 80129d6:	428b      	cmp	r3, r1
 80129d8:	dd1a      	ble.n	8012a10 <__ieee754_fmodf+0xf0>
 80129da:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 80129de:	db1a      	blt.n	8012a16 <__ieee754_fmodf+0xf6>
 80129e0:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80129e4:	4323      	orrs	r3, r4
 80129e6:	327f      	adds	r2, #127	; 0x7f
 80129e8:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80129ec:	e7b2      	b.n	8012954 <__ieee754_fmodf+0x34>
 80129ee:	3801      	subs	r0, #1
 80129f0:	0052      	lsls	r2, r2, #1
 80129f2:	e7c3      	b.n	801297c <__ieee754_fmodf+0x5c>
 80129f4:	15c8      	asrs	r0, r1, #23
 80129f6:	387f      	subs	r0, #127	; 0x7f
 80129f8:	e7c2      	b.n	8012980 <__ieee754_fmodf+0x60>
 80129fa:	15ea      	asrs	r2, r5, #23
 80129fc:	3a7f      	subs	r2, #127	; 0x7f
 80129fe:	e7c8      	b.n	8012992 <__ieee754_fmodf+0x72>
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	da02      	bge.n	8012a0a <__ieee754_fmodf+0xea>
 8012a04:	0049      	lsls	r1, r1, #1
 8012a06:	3801      	subs	r0, #1
 8012a08:	e7dc      	b.n	80129c4 <__ieee754_fmodf+0xa4>
 8012a0a:	d0ab      	beq.n	8012964 <__ieee754_fmodf+0x44>
 8012a0c:	0059      	lsls	r1, r3, #1
 8012a0e:	e7fa      	b.n	8012a06 <__ieee754_fmodf+0xe6>
 8012a10:	005b      	lsls	r3, r3, #1
 8012a12:	3a01      	subs	r2, #1
 8012a14:	e7df      	b.n	80129d6 <__ieee754_fmodf+0xb6>
 8012a16:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8012a1a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8012a1e:	3282      	adds	r2, #130	; 0x82
 8012a20:	4113      	asrs	r3, r2
 8012a22:	4323      	orrs	r3, r4
 8012a24:	e796      	b.n	8012954 <__ieee754_fmodf+0x34>
 8012a26:	bf00      	nop
 8012a28:	080265e4 	.word	0x080265e4
 8012a2c:	007fffff 	.word	0x007fffff

08012a30 <matherr>:
 8012a30:	2000      	movs	r0, #0
 8012a32:	4770      	bx	lr

08012a34 <_init>:
 8012a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a36:	bf00      	nop
 8012a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012a3a:	bc08      	pop	{r3}
 8012a3c:	469e      	mov	lr, r3
 8012a3e:	4770      	bx	lr

08012a40 <_fini>:
 8012a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012a42:	bf00      	nop
 8012a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012a46:	bc08      	pop	{r3}
 8012a48:	469e      	mov	lr, r3
 8012a4a:	4770      	bx	lr
