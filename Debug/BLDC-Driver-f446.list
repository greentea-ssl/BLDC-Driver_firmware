
BLDC-Driver-f446.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .backup_flash 00004000  08004000  08004000  00014000  2**0
                  ALLOC
  2 .text         0000cce4  08008000  08008000  00018000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00013db0  08014ce8  08014ce8  00024ce8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08028a98  08028a98  000401f4  2**0
                  CONTENTS
  5 .ARM          00000008  08028a98  08028a98  00038a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08028aa0  08028aa0  000401f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08028aa0  08028aa0  00038aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08028aa4  08028aa4  00038aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000001f4  20000000  08028aa8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000046b4  200001f4  08028c9c  000401f4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200048a8  08028c9c  000448a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000401f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002187c  00000000  00000000  00040224  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000469c  00000000  00000000  00061aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000015c8  00000000  00000000  00066140  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001378  00000000  00000000  00067708  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00026af2  00000000  00000000  00068a80  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00015b2a  00000000  00000000  0008f572  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000dac65  00000000  00000000  000a509c  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0017fd01  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000065dc  00000000  00000000  0017fd7c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008000 <__do_global_dtors_aux>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4c05      	ldr	r4, [pc, #20]	; (8008018 <__do_global_dtors_aux+0x18>)
 8008004:	7823      	ldrb	r3, [r4, #0]
 8008006:	b933      	cbnz	r3, 8008016 <__do_global_dtors_aux+0x16>
 8008008:	4b04      	ldr	r3, [pc, #16]	; (800801c <__do_global_dtors_aux+0x1c>)
 800800a:	b113      	cbz	r3, 8008012 <__do_global_dtors_aux+0x12>
 800800c:	4804      	ldr	r0, [pc, #16]	; (8008020 <__do_global_dtors_aux+0x20>)
 800800e:	f3af 8000 	nop.w
 8008012:	2301      	movs	r3, #1
 8008014:	7023      	strb	r3, [r4, #0]
 8008016:	bd10      	pop	{r4, pc}
 8008018:	200001f4 	.word	0x200001f4
 800801c:	00000000 	.word	0x00000000
 8008020:	08014ccc 	.word	0x08014ccc

08008024 <frame_dummy>:
 8008024:	b508      	push	{r3, lr}
 8008026:	4b03      	ldr	r3, [pc, #12]	; (8008034 <frame_dummy+0x10>)
 8008028:	b11b      	cbz	r3, 8008032 <frame_dummy+0xe>
 800802a:	4903      	ldr	r1, [pc, #12]	; (8008038 <frame_dummy+0x14>)
 800802c:	4803      	ldr	r0, [pc, #12]	; (800803c <frame_dummy+0x18>)
 800802e:	f3af 8000 	nop.w
 8008032:	bd08      	pop	{r3, pc}
 8008034:	00000000 	.word	0x00000000
 8008038:	200001f8 	.word	0x200001f8
 800803c:	08014ccc 	.word	0x08014ccc

08008040 <strlen>:
 8008040:	4603      	mov	r3, r0
 8008042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008046:	2a00      	cmp	r2, #0
 8008048:	d1fb      	bne.n	8008042 <strlen+0x2>
 800804a:	1a18      	subs	r0, r3, r0
 800804c:	3801      	subs	r0, #1
 800804e:	4770      	bx	lr

08008050 <memchr>:
 8008050:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8008054:	2a10      	cmp	r2, #16
 8008056:	db2b      	blt.n	80080b0 <memchr+0x60>
 8008058:	f010 0f07 	tst.w	r0, #7
 800805c:	d008      	beq.n	8008070 <memchr+0x20>
 800805e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008062:	3a01      	subs	r2, #1
 8008064:	428b      	cmp	r3, r1
 8008066:	d02d      	beq.n	80080c4 <memchr+0x74>
 8008068:	f010 0f07 	tst.w	r0, #7
 800806c:	b342      	cbz	r2, 80080c0 <memchr+0x70>
 800806e:	d1f6      	bne.n	800805e <memchr+0xe>
 8008070:	b4f0      	push	{r4, r5, r6, r7}
 8008072:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8008076:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800807a:	f022 0407 	bic.w	r4, r2, #7
 800807e:	f07f 0700 	mvns.w	r7, #0
 8008082:	2300      	movs	r3, #0
 8008084:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8008088:	3c08      	subs	r4, #8
 800808a:	ea85 0501 	eor.w	r5, r5, r1
 800808e:	ea86 0601 	eor.w	r6, r6, r1
 8008092:	fa85 f547 	uadd8	r5, r5, r7
 8008096:	faa3 f587 	sel	r5, r3, r7
 800809a:	fa86 f647 	uadd8	r6, r6, r7
 800809e:	faa5 f687 	sel	r6, r5, r7
 80080a2:	b98e      	cbnz	r6, 80080c8 <memchr+0x78>
 80080a4:	d1ee      	bne.n	8008084 <memchr+0x34>
 80080a6:	bcf0      	pop	{r4, r5, r6, r7}
 80080a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80080ac:	f002 0207 	and.w	r2, r2, #7
 80080b0:	b132      	cbz	r2, 80080c0 <memchr+0x70>
 80080b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80080b6:	3a01      	subs	r2, #1
 80080b8:	ea83 0301 	eor.w	r3, r3, r1
 80080bc:	b113      	cbz	r3, 80080c4 <memchr+0x74>
 80080be:	d1f8      	bne.n	80080b2 <memchr+0x62>
 80080c0:	2000      	movs	r0, #0
 80080c2:	4770      	bx	lr
 80080c4:	3801      	subs	r0, #1
 80080c6:	4770      	bx	lr
 80080c8:	2d00      	cmp	r5, #0
 80080ca:	bf06      	itte	eq
 80080cc:	4635      	moveq	r5, r6
 80080ce:	3803      	subeq	r0, #3
 80080d0:	3807      	subne	r0, #7
 80080d2:	f015 0f01 	tst.w	r5, #1
 80080d6:	d107      	bne.n	80080e8 <memchr+0x98>
 80080d8:	3001      	adds	r0, #1
 80080da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80080de:	bf02      	ittt	eq
 80080e0:	3001      	addeq	r0, #1
 80080e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80080e6:	3001      	addeq	r0, #1
 80080e8:	bcf0      	pop	{r4, r5, r6, r7}
 80080ea:	3801      	subs	r0, #1
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop

080080f0 <__aeabi_drsub>:
 80080f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80080f4:	e002      	b.n	80080fc <__adddf3>
 80080f6:	bf00      	nop

080080f8 <__aeabi_dsub>:
 80080f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080080fc <__adddf3>:
 80080fc:	b530      	push	{r4, r5, lr}
 80080fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8008102:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8008106:	ea94 0f05 	teq	r4, r5
 800810a:	bf08      	it	eq
 800810c:	ea90 0f02 	teqeq	r0, r2
 8008110:	bf1f      	itttt	ne
 8008112:	ea54 0c00 	orrsne.w	ip, r4, r0
 8008116:	ea55 0c02 	orrsne.w	ip, r5, r2
 800811a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800811e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8008122:	f000 80e2 	beq.w	80082ea <__adddf3+0x1ee>
 8008126:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800812a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800812e:	bfb8      	it	lt
 8008130:	426d      	neglt	r5, r5
 8008132:	dd0c      	ble.n	800814e <__adddf3+0x52>
 8008134:	442c      	add	r4, r5
 8008136:	ea80 0202 	eor.w	r2, r0, r2
 800813a:	ea81 0303 	eor.w	r3, r1, r3
 800813e:	ea82 0000 	eor.w	r0, r2, r0
 8008142:	ea83 0101 	eor.w	r1, r3, r1
 8008146:	ea80 0202 	eor.w	r2, r0, r2
 800814a:	ea81 0303 	eor.w	r3, r1, r3
 800814e:	2d36      	cmp	r5, #54	; 0x36
 8008150:	bf88      	it	hi
 8008152:	bd30      	pophi	{r4, r5, pc}
 8008154:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8008158:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800815c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8008160:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8008164:	d002      	beq.n	800816c <__adddf3+0x70>
 8008166:	4240      	negs	r0, r0
 8008168:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800816c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8008170:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8008174:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8008178:	d002      	beq.n	8008180 <__adddf3+0x84>
 800817a:	4252      	negs	r2, r2
 800817c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8008180:	ea94 0f05 	teq	r4, r5
 8008184:	f000 80a7 	beq.w	80082d6 <__adddf3+0x1da>
 8008188:	f1a4 0401 	sub.w	r4, r4, #1
 800818c:	f1d5 0e20 	rsbs	lr, r5, #32
 8008190:	db0d      	blt.n	80081ae <__adddf3+0xb2>
 8008192:	fa02 fc0e 	lsl.w	ip, r2, lr
 8008196:	fa22 f205 	lsr.w	r2, r2, r5
 800819a:	1880      	adds	r0, r0, r2
 800819c:	f141 0100 	adc.w	r1, r1, #0
 80081a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80081a4:	1880      	adds	r0, r0, r2
 80081a6:	fa43 f305 	asr.w	r3, r3, r5
 80081aa:	4159      	adcs	r1, r3
 80081ac:	e00e      	b.n	80081cc <__adddf3+0xd0>
 80081ae:	f1a5 0520 	sub.w	r5, r5, #32
 80081b2:	f10e 0e20 	add.w	lr, lr, #32
 80081b6:	2a01      	cmp	r2, #1
 80081b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80081bc:	bf28      	it	cs
 80081be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80081c2:	fa43 f305 	asr.w	r3, r3, r5
 80081c6:	18c0      	adds	r0, r0, r3
 80081c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80081cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80081d0:	d507      	bpl.n	80081e2 <__adddf3+0xe6>
 80081d2:	f04f 0e00 	mov.w	lr, #0
 80081d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80081da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80081de:	eb6e 0101 	sbc.w	r1, lr, r1
 80081e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80081e6:	d31b      	bcc.n	8008220 <__adddf3+0x124>
 80081e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80081ec:	d30c      	bcc.n	8008208 <__adddf3+0x10c>
 80081ee:	0849      	lsrs	r1, r1, #1
 80081f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80081f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80081f8:	f104 0401 	add.w	r4, r4, #1
 80081fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8008200:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8008204:	f080 809a 	bcs.w	800833c <__adddf3+0x240>
 8008208:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800820c:	bf08      	it	eq
 800820e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8008212:	f150 0000 	adcs.w	r0, r0, #0
 8008216:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800821a:	ea41 0105 	orr.w	r1, r1, r5
 800821e:	bd30      	pop	{r4, r5, pc}
 8008220:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8008224:	4140      	adcs	r0, r0
 8008226:	eb41 0101 	adc.w	r1, r1, r1
 800822a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800822e:	f1a4 0401 	sub.w	r4, r4, #1
 8008232:	d1e9      	bne.n	8008208 <__adddf3+0x10c>
 8008234:	f091 0f00 	teq	r1, #0
 8008238:	bf04      	itt	eq
 800823a:	4601      	moveq	r1, r0
 800823c:	2000      	moveq	r0, #0
 800823e:	fab1 f381 	clz	r3, r1
 8008242:	bf08      	it	eq
 8008244:	3320      	addeq	r3, #32
 8008246:	f1a3 030b 	sub.w	r3, r3, #11
 800824a:	f1b3 0220 	subs.w	r2, r3, #32
 800824e:	da0c      	bge.n	800826a <__adddf3+0x16e>
 8008250:	320c      	adds	r2, #12
 8008252:	dd08      	ble.n	8008266 <__adddf3+0x16a>
 8008254:	f102 0c14 	add.w	ip, r2, #20
 8008258:	f1c2 020c 	rsb	r2, r2, #12
 800825c:	fa01 f00c 	lsl.w	r0, r1, ip
 8008260:	fa21 f102 	lsr.w	r1, r1, r2
 8008264:	e00c      	b.n	8008280 <__adddf3+0x184>
 8008266:	f102 0214 	add.w	r2, r2, #20
 800826a:	bfd8      	it	le
 800826c:	f1c2 0c20 	rsble	ip, r2, #32
 8008270:	fa01 f102 	lsl.w	r1, r1, r2
 8008274:	fa20 fc0c 	lsr.w	ip, r0, ip
 8008278:	bfdc      	itt	le
 800827a:	ea41 010c 	orrle.w	r1, r1, ip
 800827e:	4090      	lslle	r0, r2
 8008280:	1ae4      	subs	r4, r4, r3
 8008282:	bfa2      	ittt	ge
 8008284:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8008288:	4329      	orrge	r1, r5
 800828a:	bd30      	popge	{r4, r5, pc}
 800828c:	ea6f 0404 	mvn.w	r4, r4
 8008290:	3c1f      	subs	r4, #31
 8008292:	da1c      	bge.n	80082ce <__adddf3+0x1d2>
 8008294:	340c      	adds	r4, #12
 8008296:	dc0e      	bgt.n	80082b6 <__adddf3+0x1ba>
 8008298:	f104 0414 	add.w	r4, r4, #20
 800829c:	f1c4 0220 	rsb	r2, r4, #32
 80082a0:	fa20 f004 	lsr.w	r0, r0, r4
 80082a4:	fa01 f302 	lsl.w	r3, r1, r2
 80082a8:	ea40 0003 	orr.w	r0, r0, r3
 80082ac:	fa21 f304 	lsr.w	r3, r1, r4
 80082b0:	ea45 0103 	orr.w	r1, r5, r3
 80082b4:	bd30      	pop	{r4, r5, pc}
 80082b6:	f1c4 040c 	rsb	r4, r4, #12
 80082ba:	f1c4 0220 	rsb	r2, r4, #32
 80082be:	fa20 f002 	lsr.w	r0, r0, r2
 80082c2:	fa01 f304 	lsl.w	r3, r1, r4
 80082c6:	ea40 0003 	orr.w	r0, r0, r3
 80082ca:	4629      	mov	r1, r5
 80082cc:	bd30      	pop	{r4, r5, pc}
 80082ce:	fa21 f004 	lsr.w	r0, r1, r4
 80082d2:	4629      	mov	r1, r5
 80082d4:	bd30      	pop	{r4, r5, pc}
 80082d6:	f094 0f00 	teq	r4, #0
 80082da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80082de:	bf06      	itte	eq
 80082e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80082e4:	3401      	addeq	r4, #1
 80082e6:	3d01      	subne	r5, #1
 80082e8:	e74e      	b.n	8008188 <__adddf3+0x8c>
 80082ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80082ee:	bf18      	it	ne
 80082f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80082f4:	d029      	beq.n	800834a <__adddf3+0x24e>
 80082f6:	ea94 0f05 	teq	r4, r5
 80082fa:	bf08      	it	eq
 80082fc:	ea90 0f02 	teqeq	r0, r2
 8008300:	d005      	beq.n	800830e <__adddf3+0x212>
 8008302:	ea54 0c00 	orrs.w	ip, r4, r0
 8008306:	bf04      	itt	eq
 8008308:	4619      	moveq	r1, r3
 800830a:	4610      	moveq	r0, r2
 800830c:	bd30      	pop	{r4, r5, pc}
 800830e:	ea91 0f03 	teq	r1, r3
 8008312:	bf1e      	ittt	ne
 8008314:	2100      	movne	r1, #0
 8008316:	2000      	movne	r0, #0
 8008318:	bd30      	popne	{r4, r5, pc}
 800831a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800831e:	d105      	bne.n	800832c <__adddf3+0x230>
 8008320:	0040      	lsls	r0, r0, #1
 8008322:	4149      	adcs	r1, r1
 8008324:	bf28      	it	cs
 8008326:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800832a:	bd30      	pop	{r4, r5, pc}
 800832c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8008330:	bf3c      	itt	cc
 8008332:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8008336:	bd30      	popcc	{r4, r5, pc}
 8008338:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800833c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8008340:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008344:	f04f 0000 	mov.w	r0, #0
 8008348:	bd30      	pop	{r4, r5, pc}
 800834a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800834e:	bf1a      	itte	ne
 8008350:	4619      	movne	r1, r3
 8008352:	4610      	movne	r0, r2
 8008354:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8008358:	bf1c      	itt	ne
 800835a:	460b      	movne	r3, r1
 800835c:	4602      	movne	r2, r0
 800835e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008362:	bf06      	itte	eq
 8008364:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8008368:	ea91 0f03 	teqeq	r1, r3
 800836c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8008370:	bd30      	pop	{r4, r5, pc}
 8008372:	bf00      	nop

08008374 <__aeabi_ui2d>:
 8008374:	f090 0f00 	teq	r0, #0
 8008378:	bf04      	itt	eq
 800837a:	2100      	moveq	r1, #0
 800837c:	4770      	bxeq	lr
 800837e:	b530      	push	{r4, r5, lr}
 8008380:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008384:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8008388:	f04f 0500 	mov.w	r5, #0
 800838c:	f04f 0100 	mov.w	r1, #0
 8008390:	e750      	b.n	8008234 <__adddf3+0x138>
 8008392:	bf00      	nop

08008394 <__aeabi_i2d>:
 8008394:	f090 0f00 	teq	r0, #0
 8008398:	bf04      	itt	eq
 800839a:	2100      	moveq	r1, #0
 800839c:	4770      	bxeq	lr
 800839e:	b530      	push	{r4, r5, lr}
 80083a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80083a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80083a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80083ac:	bf48      	it	mi
 80083ae:	4240      	negmi	r0, r0
 80083b0:	f04f 0100 	mov.w	r1, #0
 80083b4:	e73e      	b.n	8008234 <__adddf3+0x138>
 80083b6:	bf00      	nop

080083b8 <__aeabi_f2d>:
 80083b8:	0042      	lsls	r2, r0, #1
 80083ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80083be:	ea4f 0131 	mov.w	r1, r1, rrx
 80083c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80083c6:	bf1f      	itttt	ne
 80083c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80083cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80083d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80083d4:	4770      	bxne	lr
 80083d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80083da:	bf08      	it	eq
 80083dc:	4770      	bxeq	lr
 80083de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80083e2:	bf04      	itt	eq
 80083e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80083e8:	4770      	bxeq	lr
 80083ea:	b530      	push	{r4, r5, lr}
 80083ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80083f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80083f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80083f8:	e71c      	b.n	8008234 <__adddf3+0x138>
 80083fa:	bf00      	nop

080083fc <__aeabi_ul2d>:
 80083fc:	ea50 0201 	orrs.w	r2, r0, r1
 8008400:	bf08      	it	eq
 8008402:	4770      	bxeq	lr
 8008404:	b530      	push	{r4, r5, lr}
 8008406:	f04f 0500 	mov.w	r5, #0
 800840a:	e00a      	b.n	8008422 <__aeabi_l2d+0x16>

0800840c <__aeabi_l2d>:
 800840c:	ea50 0201 	orrs.w	r2, r0, r1
 8008410:	bf08      	it	eq
 8008412:	4770      	bxeq	lr
 8008414:	b530      	push	{r4, r5, lr}
 8008416:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800841a:	d502      	bpl.n	8008422 <__aeabi_l2d+0x16>
 800841c:	4240      	negs	r0, r0
 800841e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8008422:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8008426:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800842a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800842e:	f43f aed8 	beq.w	80081e2 <__adddf3+0xe6>
 8008432:	f04f 0203 	mov.w	r2, #3
 8008436:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800843a:	bf18      	it	ne
 800843c:	3203      	addne	r2, #3
 800843e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8008442:	bf18      	it	ne
 8008444:	3203      	addne	r2, #3
 8008446:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800844a:	f1c2 0320 	rsb	r3, r2, #32
 800844e:	fa00 fc03 	lsl.w	ip, r0, r3
 8008452:	fa20 f002 	lsr.w	r0, r0, r2
 8008456:	fa01 fe03 	lsl.w	lr, r1, r3
 800845a:	ea40 000e 	orr.w	r0, r0, lr
 800845e:	fa21 f102 	lsr.w	r1, r1, r2
 8008462:	4414      	add	r4, r2
 8008464:	e6bd      	b.n	80081e2 <__adddf3+0xe6>
 8008466:	bf00      	nop

08008468 <__aeabi_dmul>:
 8008468:	b570      	push	{r4, r5, r6, lr}
 800846a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800846e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8008472:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8008476:	bf1d      	ittte	ne
 8008478:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800847c:	ea94 0f0c 	teqne	r4, ip
 8008480:	ea95 0f0c 	teqne	r5, ip
 8008484:	f000 f8de 	bleq	8008644 <__aeabi_dmul+0x1dc>
 8008488:	442c      	add	r4, r5
 800848a:	ea81 0603 	eor.w	r6, r1, r3
 800848e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8008492:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8008496:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800849a:	bf18      	it	ne
 800849c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80084a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80084a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80084a8:	d038      	beq.n	800851c <__aeabi_dmul+0xb4>
 80084aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80084ae:	f04f 0500 	mov.w	r5, #0
 80084b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80084b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80084ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80084be:	f04f 0600 	mov.w	r6, #0
 80084c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80084c6:	f09c 0f00 	teq	ip, #0
 80084ca:	bf18      	it	ne
 80084cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80084d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80084d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80084d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80084dc:	d204      	bcs.n	80084e8 <__aeabi_dmul+0x80>
 80084de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80084e2:	416d      	adcs	r5, r5
 80084e4:	eb46 0606 	adc.w	r6, r6, r6
 80084e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80084ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80084f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80084f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80084f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80084fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8008500:	bf88      	it	hi
 8008502:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8008506:	d81e      	bhi.n	8008546 <__aeabi_dmul+0xde>
 8008508:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800850c:	bf08      	it	eq
 800850e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8008512:	f150 0000 	adcs.w	r0, r0, #0
 8008516:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800851a:	bd70      	pop	{r4, r5, r6, pc}
 800851c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8008520:	ea46 0101 	orr.w	r1, r6, r1
 8008524:	ea40 0002 	orr.w	r0, r0, r2
 8008528:	ea81 0103 	eor.w	r1, r1, r3
 800852c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8008530:	bfc2      	ittt	gt
 8008532:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008536:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800853a:	bd70      	popgt	{r4, r5, r6, pc}
 800853c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008540:	f04f 0e00 	mov.w	lr, #0
 8008544:	3c01      	subs	r4, #1
 8008546:	f300 80ab 	bgt.w	80086a0 <__aeabi_dmul+0x238>
 800854a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800854e:	bfde      	ittt	le
 8008550:	2000      	movle	r0, #0
 8008552:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8008556:	bd70      	pople	{r4, r5, r6, pc}
 8008558:	f1c4 0400 	rsb	r4, r4, #0
 800855c:	3c20      	subs	r4, #32
 800855e:	da35      	bge.n	80085cc <__aeabi_dmul+0x164>
 8008560:	340c      	adds	r4, #12
 8008562:	dc1b      	bgt.n	800859c <__aeabi_dmul+0x134>
 8008564:	f104 0414 	add.w	r4, r4, #20
 8008568:	f1c4 0520 	rsb	r5, r4, #32
 800856c:	fa00 f305 	lsl.w	r3, r0, r5
 8008570:	fa20 f004 	lsr.w	r0, r0, r4
 8008574:	fa01 f205 	lsl.w	r2, r1, r5
 8008578:	ea40 0002 	orr.w	r0, r0, r2
 800857c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8008580:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008584:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8008588:	fa21 f604 	lsr.w	r6, r1, r4
 800858c:	eb42 0106 	adc.w	r1, r2, r6
 8008590:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8008594:	bf08      	it	eq
 8008596:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800859a:	bd70      	pop	{r4, r5, r6, pc}
 800859c:	f1c4 040c 	rsb	r4, r4, #12
 80085a0:	f1c4 0520 	rsb	r5, r4, #32
 80085a4:	fa00 f304 	lsl.w	r3, r0, r4
 80085a8:	fa20 f005 	lsr.w	r0, r0, r5
 80085ac:	fa01 f204 	lsl.w	r2, r1, r4
 80085b0:	ea40 0002 	orr.w	r0, r0, r2
 80085b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80085bc:	f141 0100 	adc.w	r1, r1, #0
 80085c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085c4:	bf08      	it	eq
 80085c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80085ca:	bd70      	pop	{r4, r5, r6, pc}
 80085cc:	f1c4 0520 	rsb	r5, r4, #32
 80085d0:	fa00 f205 	lsl.w	r2, r0, r5
 80085d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80085d8:	fa20 f304 	lsr.w	r3, r0, r4
 80085dc:	fa01 f205 	lsl.w	r2, r1, r5
 80085e0:	ea43 0302 	orr.w	r3, r3, r2
 80085e4:	fa21 f004 	lsr.w	r0, r1, r4
 80085e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80085ec:	fa21 f204 	lsr.w	r2, r1, r4
 80085f0:	ea20 0002 	bic.w	r0, r0, r2
 80085f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80085f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80085fc:	bf08      	it	eq
 80085fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8008602:	bd70      	pop	{r4, r5, r6, pc}
 8008604:	f094 0f00 	teq	r4, #0
 8008608:	d10f      	bne.n	800862a <__aeabi_dmul+0x1c2>
 800860a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800860e:	0040      	lsls	r0, r0, #1
 8008610:	eb41 0101 	adc.w	r1, r1, r1
 8008614:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8008618:	bf08      	it	eq
 800861a:	3c01      	subeq	r4, #1
 800861c:	d0f7      	beq.n	800860e <__aeabi_dmul+0x1a6>
 800861e:	ea41 0106 	orr.w	r1, r1, r6
 8008622:	f095 0f00 	teq	r5, #0
 8008626:	bf18      	it	ne
 8008628:	4770      	bxne	lr
 800862a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800862e:	0052      	lsls	r2, r2, #1
 8008630:	eb43 0303 	adc.w	r3, r3, r3
 8008634:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8008638:	bf08      	it	eq
 800863a:	3d01      	subeq	r5, #1
 800863c:	d0f7      	beq.n	800862e <__aeabi_dmul+0x1c6>
 800863e:	ea43 0306 	orr.w	r3, r3, r6
 8008642:	4770      	bx	lr
 8008644:	ea94 0f0c 	teq	r4, ip
 8008648:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800864c:	bf18      	it	ne
 800864e:	ea95 0f0c 	teqne	r5, ip
 8008652:	d00c      	beq.n	800866e <__aeabi_dmul+0x206>
 8008654:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008658:	bf18      	it	ne
 800865a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800865e:	d1d1      	bne.n	8008604 <__aeabi_dmul+0x19c>
 8008660:	ea81 0103 	eor.w	r1, r1, r3
 8008664:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8008668:	f04f 0000 	mov.w	r0, #0
 800866c:	bd70      	pop	{r4, r5, r6, pc}
 800866e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008672:	bf06      	itte	eq
 8008674:	4610      	moveq	r0, r2
 8008676:	4619      	moveq	r1, r3
 8008678:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800867c:	d019      	beq.n	80086b2 <__aeabi_dmul+0x24a>
 800867e:	ea94 0f0c 	teq	r4, ip
 8008682:	d102      	bne.n	800868a <__aeabi_dmul+0x222>
 8008684:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8008688:	d113      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800868a:	ea95 0f0c 	teq	r5, ip
 800868e:	d105      	bne.n	800869c <__aeabi_dmul+0x234>
 8008690:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8008694:	bf1c      	itt	ne
 8008696:	4610      	movne	r0, r2
 8008698:	4619      	movne	r1, r3
 800869a:	d10a      	bne.n	80086b2 <__aeabi_dmul+0x24a>
 800869c:	ea81 0103 	eor.w	r1, r1, r3
 80086a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80086a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80086ac:	f04f 0000 	mov.w	r0, #0
 80086b0:	bd70      	pop	{r4, r5, r6, pc}
 80086b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80086b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80086ba:	bd70      	pop	{r4, r5, r6, pc}

080086bc <__aeabi_ddiv>:
 80086bc:	b570      	push	{r4, r5, r6, lr}
 80086be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80086c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80086c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80086ca:	bf1d      	ittte	ne
 80086cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80086d0:	ea94 0f0c 	teqne	r4, ip
 80086d4:	ea95 0f0c 	teqne	r5, ip
 80086d8:	f000 f8a7 	bleq	800882a <__aeabi_ddiv+0x16e>
 80086dc:	eba4 0405 	sub.w	r4, r4, r5
 80086e0:	ea81 0e03 	eor.w	lr, r1, r3
 80086e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80086e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80086ec:	f000 8088 	beq.w	8008800 <__aeabi_ddiv+0x144>
 80086f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80086f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80086f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80086fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8008700:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8008704:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8008708:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800870c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8008710:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8008714:	429d      	cmp	r5, r3
 8008716:	bf08      	it	eq
 8008718:	4296      	cmpeq	r6, r2
 800871a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800871e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8008722:	d202      	bcs.n	800872a <__aeabi_ddiv+0x6e>
 8008724:	085b      	lsrs	r3, r3, #1
 8008726:	ea4f 0232 	mov.w	r2, r2, rrx
 800872a:	1ab6      	subs	r6, r6, r2
 800872c:	eb65 0503 	sbc.w	r5, r5, r3
 8008730:	085b      	lsrs	r3, r3, #1
 8008732:	ea4f 0232 	mov.w	r2, r2, rrx
 8008736:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800873a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800873e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008742:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008746:	bf22      	ittt	cs
 8008748:	1ab6      	subcs	r6, r6, r2
 800874a:	4675      	movcs	r5, lr
 800874c:	ea40 000c 	orrcs.w	r0, r0, ip
 8008750:	085b      	lsrs	r3, r3, #1
 8008752:	ea4f 0232 	mov.w	r2, r2, rrx
 8008756:	ebb6 0e02 	subs.w	lr, r6, r2
 800875a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800875e:	bf22      	ittt	cs
 8008760:	1ab6      	subcs	r6, r6, r2
 8008762:	4675      	movcs	r5, lr
 8008764:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8008768:	085b      	lsrs	r3, r3, #1
 800876a:	ea4f 0232 	mov.w	r2, r2, rrx
 800876e:	ebb6 0e02 	subs.w	lr, r6, r2
 8008772:	eb75 0e03 	sbcs.w	lr, r5, r3
 8008776:	bf22      	ittt	cs
 8008778:	1ab6      	subcs	r6, r6, r2
 800877a:	4675      	movcs	r5, lr
 800877c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8008780:	085b      	lsrs	r3, r3, #1
 8008782:	ea4f 0232 	mov.w	r2, r2, rrx
 8008786:	ebb6 0e02 	subs.w	lr, r6, r2
 800878a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800878e:	bf22      	ittt	cs
 8008790:	1ab6      	subcs	r6, r6, r2
 8008792:	4675      	movcs	r5, lr
 8008794:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8008798:	ea55 0e06 	orrs.w	lr, r5, r6
 800879c:	d018      	beq.n	80087d0 <__aeabi_ddiv+0x114>
 800879e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80087a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80087a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80087aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80087ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80087b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80087b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80087ba:	d1c0      	bne.n	800873e <__aeabi_ddiv+0x82>
 80087bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087c0:	d10b      	bne.n	80087da <__aeabi_ddiv+0x11e>
 80087c2:	ea41 0100 	orr.w	r1, r1, r0
 80087c6:	f04f 0000 	mov.w	r0, #0
 80087ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80087ce:	e7b6      	b.n	800873e <__aeabi_ddiv+0x82>
 80087d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80087d4:	bf04      	itt	eq
 80087d6:	4301      	orreq	r1, r0
 80087d8:	2000      	moveq	r0, #0
 80087da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80087de:	bf88      	it	hi
 80087e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80087e4:	f63f aeaf 	bhi.w	8008546 <__aeabi_dmul+0xde>
 80087e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80087ec:	bf04      	itt	eq
 80087ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80087f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80087f6:	f150 0000 	adcs.w	r0, r0, #0
 80087fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80087fe:	bd70      	pop	{r4, r5, r6, pc}
 8008800:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8008804:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8008808:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800880c:	bfc2      	ittt	gt
 800880e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8008812:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8008816:	bd70      	popgt	{r4, r5, r6, pc}
 8008818:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800881c:	f04f 0e00 	mov.w	lr, #0
 8008820:	3c01      	subs	r4, #1
 8008822:	e690      	b.n	8008546 <__aeabi_dmul+0xde>
 8008824:	ea45 0e06 	orr.w	lr, r5, r6
 8008828:	e68d      	b.n	8008546 <__aeabi_dmul+0xde>
 800882a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800882e:	ea94 0f0c 	teq	r4, ip
 8008832:	bf08      	it	eq
 8008834:	ea95 0f0c 	teqeq	r5, ip
 8008838:	f43f af3b 	beq.w	80086b2 <__aeabi_dmul+0x24a>
 800883c:	ea94 0f0c 	teq	r4, ip
 8008840:	d10a      	bne.n	8008858 <__aeabi_ddiv+0x19c>
 8008842:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8008846:	f47f af34 	bne.w	80086b2 <__aeabi_dmul+0x24a>
 800884a:	ea95 0f0c 	teq	r5, ip
 800884e:	f47f af25 	bne.w	800869c <__aeabi_dmul+0x234>
 8008852:	4610      	mov	r0, r2
 8008854:	4619      	mov	r1, r3
 8008856:	e72c      	b.n	80086b2 <__aeabi_dmul+0x24a>
 8008858:	ea95 0f0c 	teq	r5, ip
 800885c:	d106      	bne.n	800886c <__aeabi_ddiv+0x1b0>
 800885e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8008862:	f43f aefd 	beq.w	8008660 <__aeabi_dmul+0x1f8>
 8008866:	4610      	mov	r0, r2
 8008868:	4619      	mov	r1, r3
 800886a:	e722      	b.n	80086b2 <__aeabi_dmul+0x24a>
 800886c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8008870:	bf18      	it	ne
 8008872:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8008876:	f47f aec5 	bne.w	8008604 <__aeabi_dmul+0x19c>
 800887a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800887e:	f47f af0d 	bne.w	800869c <__aeabi_dmul+0x234>
 8008882:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8008886:	f47f aeeb 	bne.w	8008660 <__aeabi_dmul+0x1f8>
 800888a:	e712      	b.n	80086b2 <__aeabi_dmul+0x24a>

0800888c <__gedf2>:
 800888c:	f04f 3cff 	mov.w	ip, #4294967295
 8008890:	e006      	b.n	80088a0 <__cmpdf2+0x4>
 8008892:	bf00      	nop

08008894 <__ledf2>:
 8008894:	f04f 0c01 	mov.w	ip, #1
 8008898:	e002      	b.n	80088a0 <__cmpdf2+0x4>
 800889a:	bf00      	nop

0800889c <__cmpdf2>:
 800889c:	f04f 0c01 	mov.w	ip, #1
 80088a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80088a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80088b0:	bf18      	it	ne
 80088b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80088b6:	d01b      	beq.n	80088f0 <__cmpdf2+0x54>
 80088b8:	b001      	add	sp, #4
 80088ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80088be:	bf0c      	ite	eq
 80088c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80088c4:	ea91 0f03 	teqne	r1, r3
 80088c8:	bf02      	ittt	eq
 80088ca:	ea90 0f02 	teqeq	r0, r2
 80088ce:	2000      	moveq	r0, #0
 80088d0:	4770      	bxeq	lr
 80088d2:	f110 0f00 	cmn.w	r0, #0
 80088d6:	ea91 0f03 	teq	r1, r3
 80088da:	bf58      	it	pl
 80088dc:	4299      	cmppl	r1, r3
 80088de:	bf08      	it	eq
 80088e0:	4290      	cmpeq	r0, r2
 80088e2:	bf2c      	ite	cs
 80088e4:	17d8      	asrcs	r0, r3, #31
 80088e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80088ea:	f040 0001 	orr.w	r0, r0, #1
 80088ee:	4770      	bx	lr
 80088f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80088f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80088f8:	d102      	bne.n	8008900 <__cmpdf2+0x64>
 80088fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80088fe:	d107      	bne.n	8008910 <__cmpdf2+0x74>
 8008900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8008904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8008908:	d1d6      	bne.n	80088b8 <__cmpdf2+0x1c>
 800890a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800890e:	d0d3      	beq.n	80088b8 <__cmpdf2+0x1c>
 8008910:	f85d 0b04 	ldr.w	r0, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop

08008918 <__aeabi_cdrcmple>:
 8008918:	4684      	mov	ip, r0
 800891a:	4610      	mov	r0, r2
 800891c:	4662      	mov	r2, ip
 800891e:	468c      	mov	ip, r1
 8008920:	4619      	mov	r1, r3
 8008922:	4663      	mov	r3, ip
 8008924:	e000      	b.n	8008928 <__aeabi_cdcmpeq>
 8008926:	bf00      	nop

08008928 <__aeabi_cdcmpeq>:
 8008928:	b501      	push	{r0, lr}
 800892a:	f7ff ffb7 	bl	800889c <__cmpdf2>
 800892e:	2800      	cmp	r0, #0
 8008930:	bf48      	it	mi
 8008932:	f110 0f00 	cmnmi.w	r0, #0
 8008936:	bd01      	pop	{r0, pc}

08008938 <__aeabi_dcmpeq>:
 8008938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800893c:	f7ff fff4 	bl	8008928 <__aeabi_cdcmpeq>
 8008940:	bf0c      	ite	eq
 8008942:	2001      	moveq	r0, #1
 8008944:	2000      	movne	r0, #0
 8008946:	f85d fb08 	ldr.w	pc, [sp], #8
 800894a:	bf00      	nop

0800894c <__aeabi_dcmplt>:
 800894c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008950:	f7ff ffea 	bl	8008928 <__aeabi_cdcmpeq>
 8008954:	bf34      	ite	cc
 8008956:	2001      	movcc	r0, #1
 8008958:	2000      	movcs	r0, #0
 800895a:	f85d fb08 	ldr.w	pc, [sp], #8
 800895e:	bf00      	nop

08008960 <__aeabi_dcmple>:
 8008960:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008964:	f7ff ffe0 	bl	8008928 <__aeabi_cdcmpeq>
 8008968:	bf94      	ite	ls
 800896a:	2001      	movls	r0, #1
 800896c:	2000      	movhi	r0, #0
 800896e:	f85d fb08 	ldr.w	pc, [sp], #8
 8008972:	bf00      	nop

08008974 <__aeabi_dcmpge>:
 8008974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8008978:	f7ff ffce 	bl	8008918 <__aeabi_cdrcmple>
 800897c:	bf94      	ite	ls
 800897e:	2001      	movls	r0, #1
 8008980:	2000      	movhi	r0, #0
 8008982:	f85d fb08 	ldr.w	pc, [sp], #8
 8008986:	bf00      	nop

08008988 <__aeabi_dcmpgt>:
 8008988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800898c:	f7ff ffc4 	bl	8008918 <__aeabi_cdrcmple>
 8008990:	bf34      	ite	cc
 8008992:	2001      	movcc	r0, #1
 8008994:	2000      	movcs	r0, #0
 8008996:	f85d fb08 	ldr.w	pc, [sp], #8
 800899a:	bf00      	nop

0800899c <__aeabi_dcmpun>:
 800899c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80089a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089a4:	d102      	bne.n	80089ac <__aeabi_dcmpun+0x10>
 80089a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80089aa:	d10a      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80089b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80089b4:	d102      	bne.n	80089bc <__aeabi_dcmpun+0x20>
 80089b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80089ba:	d102      	bne.n	80089c2 <__aeabi_dcmpun+0x26>
 80089bc:	f04f 0000 	mov.w	r0, #0
 80089c0:	4770      	bx	lr
 80089c2:	f04f 0001 	mov.w	r0, #1
 80089c6:	4770      	bx	lr

080089c8 <__aeabi_d2iz>:
 80089c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80089cc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80089d0:	d215      	bcs.n	80089fe <__aeabi_d2iz+0x36>
 80089d2:	d511      	bpl.n	80089f8 <__aeabi_d2iz+0x30>
 80089d4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80089d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80089dc:	d912      	bls.n	8008a04 <__aeabi_d2iz+0x3c>
 80089de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80089e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80089ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80089ee:	fa23 f002 	lsr.w	r0, r3, r2
 80089f2:	bf18      	it	ne
 80089f4:	4240      	negne	r0, r0
 80089f6:	4770      	bx	lr
 80089f8:	f04f 0000 	mov.w	r0, #0
 80089fc:	4770      	bx	lr
 80089fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8008a02:	d105      	bne.n	8008a10 <__aeabi_d2iz+0x48>
 8008a04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8008a08:	bf08      	it	eq
 8008a0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8008a0e:	4770      	bx	lr
 8008a10:	f04f 0000 	mov.w	r0, #0
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop

08008a18 <__aeabi_d2f>:
 8008a18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8008a1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8008a20:	bf24      	itt	cs
 8008a22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8008a26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8008a2a:	d90d      	bls.n	8008a48 <__aeabi_d2f+0x30>
 8008a2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8008a30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8008a34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8008a38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8008a3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8008a40:	bf08      	it	eq
 8008a42:	f020 0001 	biceq.w	r0, r0, #1
 8008a46:	4770      	bx	lr
 8008a48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8008a4c:	d121      	bne.n	8008a92 <__aeabi_d2f+0x7a>
 8008a4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8008a52:	bfbc      	itt	lt
 8008a54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8008a58:	4770      	bxlt	lr
 8008a5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008a5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8008a62:	f1c2 0218 	rsb	r2, r2, #24
 8008a66:	f1c2 0c20 	rsb	ip, r2, #32
 8008a6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8008a6e:	fa20 f002 	lsr.w	r0, r0, r2
 8008a72:	bf18      	it	ne
 8008a74:	f040 0001 	orrne.w	r0, r0, #1
 8008a78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8008a7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8008a80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8008a84:	ea40 000c 	orr.w	r0, r0, ip
 8008a88:	fa23 f302 	lsr.w	r3, r3, r2
 8008a8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008a90:	e7cc      	b.n	8008a2c <__aeabi_d2f+0x14>
 8008a92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8008a96:	d107      	bne.n	8008aa8 <__aeabi_d2f+0x90>
 8008a98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8008a9c:	bf1e      	ittt	ne
 8008a9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8008aa2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8008aa6:	4770      	bxne	lr
 8008aa8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8008aac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8008ab0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8008ab4:	4770      	bx	lr
 8008ab6:	bf00      	nop

08008ab8 <__aeabi_uldivmod>:
 8008ab8:	b953      	cbnz	r3, 8008ad0 <__aeabi_uldivmod+0x18>
 8008aba:	b94a      	cbnz	r2, 8008ad0 <__aeabi_uldivmod+0x18>
 8008abc:	2900      	cmp	r1, #0
 8008abe:	bf08      	it	eq
 8008ac0:	2800      	cmpeq	r0, #0
 8008ac2:	bf1c      	itt	ne
 8008ac4:	f04f 31ff 	movne.w	r1, #4294967295
 8008ac8:	f04f 30ff 	movne.w	r0, #4294967295
 8008acc:	f000 b972 	b.w	8008db4 <__aeabi_idiv0>
 8008ad0:	f1ad 0c08 	sub.w	ip, sp, #8
 8008ad4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8008ad8:	f000 f806 	bl	8008ae8 <__udivmoddi4>
 8008adc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008ae0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ae4:	b004      	add	sp, #16
 8008ae6:	4770      	bx	lr

08008ae8 <__udivmoddi4>:
 8008ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008aec:	9e08      	ldr	r6, [sp, #32]
 8008aee:	4604      	mov	r4, r0
 8008af0:	4688      	mov	r8, r1
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d14b      	bne.n	8008b8e <__udivmoddi4+0xa6>
 8008af6:	428a      	cmp	r2, r1
 8008af8:	4615      	mov	r5, r2
 8008afa:	d967      	bls.n	8008bcc <__udivmoddi4+0xe4>
 8008afc:	fab2 f282 	clz	r2, r2
 8008b00:	b14a      	cbz	r2, 8008b16 <__udivmoddi4+0x2e>
 8008b02:	f1c2 0720 	rsb	r7, r2, #32
 8008b06:	fa01 f302 	lsl.w	r3, r1, r2
 8008b0a:	fa20 f707 	lsr.w	r7, r0, r7
 8008b0e:	4095      	lsls	r5, r2
 8008b10:	ea47 0803 	orr.w	r8, r7, r3
 8008b14:	4094      	lsls	r4, r2
 8008b16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008b1a:	0c23      	lsrs	r3, r4, #16
 8008b1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8008b20:	fa1f fc85 	uxth.w	ip, r5
 8008b24:	fb0e 8817 	mls	r8, lr, r7, r8
 8008b28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8008b2c:	fb07 f10c 	mul.w	r1, r7, ip
 8008b30:	4299      	cmp	r1, r3
 8008b32:	d909      	bls.n	8008b48 <__udivmoddi4+0x60>
 8008b34:	18eb      	adds	r3, r5, r3
 8008b36:	f107 30ff 	add.w	r0, r7, #4294967295
 8008b3a:	f080 811b 	bcs.w	8008d74 <__udivmoddi4+0x28c>
 8008b3e:	4299      	cmp	r1, r3
 8008b40:	f240 8118 	bls.w	8008d74 <__udivmoddi4+0x28c>
 8008b44:	3f02      	subs	r7, #2
 8008b46:	442b      	add	r3, r5
 8008b48:	1a5b      	subs	r3, r3, r1
 8008b4a:	b2a4      	uxth	r4, r4
 8008b4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8008b50:	fb0e 3310 	mls	r3, lr, r0, r3
 8008b54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008b58:	fb00 fc0c 	mul.w	ip, r0, ip
 8008b5c:	45a4      	cmp	ip, r4
 8008b5e:	d909      	bls.n	8008b74 <__udivmoddi4+0x8c>
 8008b60:	192c      	adds	r4, r5, r4
 8008b62:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b66:	f080 8107 	bcs.w	8008d78 <__udivmoddi4+0x290>
 8008b6a:	45a4      	cmp	ip, r4
 8008b6c:	f240 8104 	bls.w	8008d78 <__udivmoddi4+0x290>
 8008b70:	3802      	subs	r0, #2
 8008b72:	442c      	add	r4, r5
 8008b74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008b78:	eba4 040c 	sub.w	r4, r4, ip
 8008b7c:	2700      	movs	r7, #0
 8008b7e:	b11e      	cbz	r6, 8008b88 <__udivmoddi4+0xa0>
 8008b80:	40d4      	lsrs	r4, r2
 8008b82:	2300      	movs	r3, #0
 8008b84:	e9c6 4300 	strd	r4, r3, [r6]
 8008b88:	4639      	mov	r1, r7
 8008b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b8e:	428b      	cmp	r3, r1
 8008b90:	d909      	bls.n	8008ba6 <__udivmoddi4+0xbe>
 8008b92:	2e00      	cmp	r6, #0
 8008b94:	f000 80eb 	beq.w	8008d6e <__udivmoddi4+0x286>
 8008b98:	2700      	movs	r7, #0
 8008b9a:	e9c6 0100 	strd	r0, r1, [r6]
 8008b9e:	4638      	mov	r0, r7
 8008ba0:	4639      	mov	r1, r7
 8008ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ba6:	fab3 f783 	clz	r7, r3
 8008baa:	2f00      	cmp	r7, #0
 8008bac:	d147      	bne.n	8008c3e <__udivmoddi4+0x156>
 8008bae:	428b      	cmp	r3, r1
 8008bb0:	d302      	bcc.n	8008bb8 <__udivmoddi4+0xd0>
 8008bb2:	4282      	cmp	r2, r0
 8008bb4:	f200 80fa 	bhi.w	8008dac <__udivmoddi4+0x2c4>
 8008bb8:	1a84      	subs	r4, r0, r2
 8008bba:	eb61 0303 	sbc.w	r3, r1, r3
 8008bbe:	2001      	movs	r0, #1
 8008bc0:	4698      	mov	r8, r3
 8008bc2:	2e00      	cmp	r6, #0
 8008bc4:	d0e0      	beq.n	8008b88 <__udivmoddi4+0xa0>
 8008bc6:	e9c6 4800 	strd	r4, r8, [r6]
 8008bca:	e7dd      	b.n	8008b88 <__udivmoddi4+0xa0>
 8008bcc:	b902      	cbnz	r2, 8008bd0 <__udivmoddi4+0xe8>
 8008bce:	deff      	udf	#255	; 0xff
 8008bd0:	fab2 f282 	clz	r2, r2
 8008bd4:	2a00      	cmp	r2, #0
 8008bd6:	f040 808f 	bne.w	8008cf8 <__udivmoddi4+0x210>
 8008bda:	1b49      	subs	r1, r1, r5
 8008bdc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008be0:	fa1f f885 	uxth.w	r8, r5
 8008be4:	2701      	movs	r7, #1
 8008be6:	fbb1 fcfe 	udiv	ip, r1, lr
 8008bea:	0c23      	lsrs	r3, r4, #16
 8008bec:	fb0e 111c 	mls	r1, lr, ip, r1
 8008bf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008bf4:	fb08 f10c 	mul.w	r1, r8, ip
 8008bf8:	4299      	cmp	r1, r3
 8008bfa:	d907      	bls.n	8008c0c <__udivmoddi4+0x124>
 8008bfc:	18eb      	adds	r3, r5, r3
 8008bfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8008c02:	d202      	bcs.n	8008c0a <__udivmoddi4+0x122>
 8008c04:	4299      	cmp	r1, r3
 8008c06:	f200 80cd 	bhi.w	8008da4 <__udivmoddi4+0x2bc>
 8008c0a:	4684      	mov	ip, r0
 8008c0c:	1a59      	subs	r1, r3, r1
 8008c0e:	b2a3      	uxth	r3, r4
 8008c10:	fbb1 f0fe 	udiv	r0, r1, lr
 8008c14:	fb0e 1410 	mls	r4, lr, r0, r1
 8008c18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8008c1c:	fb08 f800 	mul.w	r8, r8, r0
 8008c20:	45a0      	cmp	r8, r4
 8008c22:	d907      	bls.n	8008c34 <__udivmoddi4+0x14c>
 8008c24:	192c      	adds	r4, r5, r4
 8008c26:	f100 33ff 	add.w	r3, r0, #4294967295
 8008c2a:	d202      	bcs.n	8008c32 <__udivmoddi4+0x14a>
 8008c2c:	45a0      	cmp	r8, r4
 8008c2e:	f200 80b6 	bhi.w	8008d9e <__udivmoddi4+0x2b6>
 8008c32:	4618      	mov	r0, r3
 8008c34:	eba4 0408 	sub.w	r4, r4, r8
 8008c38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8008c3c:	e79f      	b.n	8008b7e <__udivmoddi4+0x96>
 8008c3e:	f1c7 0c20 	rsb	ip, r7, #32
 8008c42:	40bb      	lsls	r3, r7
 8008c44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8008c48:	ea4e 0e03 	orr.w	lr, lr, r3
 8008c4c:	fa01 f407 	lsl.w	r4, r1, r7
 8008c50:	fa20 f50c 	lsr.w	r5, r0, ip
 8008c54:	fa21 f30c 	lsr.w	r3, r1, ip
 8008c58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8008c5c:	4325      	orrs	r5, r4
 8008c5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8008c62:	0c2c      	lsrs	r4, r5, #16
 8008c64:	fb08 3319 	mls	r3, r8, r9, r3
 8008c68:	fa1f fa8e 	uxth.w	sl, lr
 8008c6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8008c70:	fb09 f40a 	mul.w	r4, r9, sl
 8008c74:	429c      	cmp	r4, r3
 8008c76:	fa02 f207 	lsl.w	r2, r2, r7
 8008c7a:	fa00 f107 	lsl.w	r1, r0, r7
 8008c7e:	d90b      	bls.n	8008c98 <__udivmoddi4+0x1b0>
 8008c80:	eb1e 0303 	adds.w	r3, lr, r3
 8008c84:	f109 30ff 	add.w	r0, r9, #4294967295
 8008c88:	f080 8087 	bcs.w	8008d9a <__udivmoddi4+0x2b2>
 8008c8c:	429c      	cmp	r4, r3
 8008c8e:	f240 8084 	bls.w	8008d9a <__udivmoddi4+0x2b2>
 8008c92:	f1a9 0902 	sub.w	r9, r9, #2
 8008c96:	4473      	add	r3, lr
 8008c98:	1b1b      	subs	r3, r3, r4
 8008c9a:	b2ad      	uxth	r5, r5
 8008c9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8008ca0:	fb08 3310 	mls	r3, r8, r0, r3
 8008ca4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8008ca8:	fb00 fa0a 	mul.w	sl, r0, sl
 8008cac:	45a2      	cmp	sl, r4
 8008cae:	d908      	bls.n	8008cc2 <__udivmoddi4+0x1da>
 8008cb0:	eb1e 0404 	adds.w	r4, lr, r4
 8008cb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cb8:	d26b      	bcs.n	8008d92 <__udivmoddi4+0x2aa>
 8008cba:	45a2      	cmp	sl, r4
 8008cbc:	d969      	bls.n	8008d92 <__udivmoddi4+0x2aa>
 8008cbe:	3802      	subs	r0, #2
 8008cc0:	4474      	add	r4, lr
 8008cc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8008cc6:	fba0 8902 	umull	r8, r9, r0, r2
 8008cca:	eba4 040a 	sub.w	r4, r4, sl
 8008cce:	454c      	cmp	r4, r9
 8008cd0:	46c2      	mov	sl, r8
 8008cd2:	464b      	mov	r3, r9
 8008cd4:	d354      	bcc.n	8008d80 <__udivmoddi4+0x298>
 8008cd6:	d051      	beq.n	8008d7c <__udivmoddi4+0x294>
 8008cd8:	2e00      	cmp	r6, #0
 8008cda:	d069      	beq.n	8008db0 <__udivmoddi4+0x2c8>
 8008cdc:	ebb1 050a 	subs.w	r5, r1, sl
 8008ce0:	eb64 0403 	sbc.w	r4, r4, r3
 8008ce4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8008ce8:	40fd      	lsrs	r5, r7
 8008cea:	40fc      	lsrs	r4, r7
 8008cec:	ea4c 0505 	orr.w	r5, ip, r5
 8008cf0:	e9c6 5400 	strd	r5, r4, [r6]
 8008cf4:	2700      	movs	r7, #0
 8008cf6:	e747      	b.n	8008b88 <__udivmoddi4+0xa0>
 8008cf8:	f1c2 0320 	rsb	r3, r2, #32
 8008cfc:	fa20 f703 	lsr.w	r7, r0, r3
 8008d00:	4095      	lsls	r5, r2
 8008d02:	fa01 f002 	lsl.w	r0, r1, r2
 8008d06:	fa21 f303 	lsr.w	r3, r1, r3
 8008d0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8008d0e:	4338      	orrs	r0, r7
 8008d10:	0c01      	lsrs	r1, r0, #16
 8008d12:	fbb3 f7fe 	udiv	r7, r3, lr
 8008d16:	fa1f f885 	uxth.w	r8, r5
 8008d1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8008d1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d22:	fb07 f308 	mul.w	r3, r7, r8
 8008d26:	428b      	cmp	r3, r1
 8008d28:	fa04 f402 	lsl.w	r4, r4, r2
 8008d2c:	d907      	bls.n	8008d3e <__udivmoddi4+0x256>
 8008d2e:	1869      	adds	r1, r5, r1
 8008d30:	f107 3cff 	add.w	ip, r7, #4294967295
 8008d34:	d22f      	bcs.n	8008d96 <__udivmoddi4+0x2ae>
 8008d36:	428b      	cmp	r3, r1
 8008d38:	d92d      	bls.n	8008d96 <__udivmoddi4+0x2ae>
 8008d3a:	3f02      	subs	r7, #2
 8008d3c:	4429      	add	r1, r5
 8008d3e:	1acb      	subs	r3, r1, r3
 8008d40:	b281      	uxth	r1, r0
 8008d42:	fbb3 f0fe 	udiv	r0, r3, lr
 8008d46:	fb0e 3310 	mls	r3, lr, r0, r3
 8008d4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008d4e:	fb00 f308 	mul.w	r3, r0, r8
 8008d52:	428b      	cmp	r3, r1
 8008d54:	d907      	bls.n	8008d66 <__udivmoddi4+0x27e>
 8008d56:	1869      	adds	r1, r5, r1
 8008d58:	f100 3cff 	add.w	ip, r0, #4294967295
 8008d5c:	d217      	bcs.n	8008d8e <__udivmoddi4+0x2a6>
 8008d5e:	428b      	cmp	r3, r1
 8008d60:	d915      	bls.n	8008d8e <__udivmoddi4+0x2a6>
 8008d62:	3802      	subs	r0, #2
 8008d64:	4429      	add	r1, r5
 8008d66:	1ac9      	subs	r1, r1, r3
 8008d68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8008d6c:	e73b      	b.n	8008be6 <__udivmoddi4+0xfe>
 8008d6e:	4637      	mov	r7, r6
 8008d70:	4630      	mov	r0, r6
 8008d72:	e709      	b.n	8008b88 <__udivmoddi4+0xa0>
 8008d74:	4607      	mov	r7, r0
 8008d76:	e6e7      	b.n	8008b48 <__udivmoddi4+0x60>
 8008d78:	4618      	mov	r0, r3
 8008d7a:	e6fb      	b.n	8008b74 <__udivmoddi4+0x8c>
 8008d7c:	4541      	cmp	r1, r8
 8008d7e:	d2ab      	bcs.n	8008cd8 <__udivmoddi4+0x1f0>
 8008d80:	ebb8 0a02 	subs.w	sl, r8, r2
 8008d84:	eb69 020e 	sbc.w	r2, r9, lr
 8008d88:	3801      	subs	r0, #1
 8008d8a:	4613      	mov	r3, r2
 8008d8c:	e7a4      	b.n	8008cd8 <__udivmoddi4+0x1f0>
 8008d8e:	4660      	mov	r0, ip
 8008d90:	e7e9      	b.n	8008d66 <__udivmoddi4+0x27e>
 8008d92:	4618      	mov	r0, r3
 8008d94:	e795      	b.n	8008cc2 <__udivmoddi4+0x1da>
 8008d96:	4667      	mov	r7, ip
 8008d98:	e7d1      	b.n	8008d3e <__udivmoddi4+0x256>
 8008d9a:	4681      	mov	r9, r0
 8008d9c:	e77c      	b.n	8008c98 <__udivmoddi4+0x1b0>
 8008d9e:	3802      	subs	r0, #2
 8008da0:	442c      	add	r4, r5
 8008da2:	e747      	b.n	8008c34 <__udivmoddi4+0x14c>
 8008da4:	f1ac 0c02 	sub.w	ip, ip, #2
 8008da8:	442b      	add	r3, r5
 8008daa:	e72f      	b.n	8008c0c <__udivmoddi4+0x124>
 8008dac:	4638      	mov	r0, r7
 8008dae:	e708      	b.n	8008bc2 <__udivmoddi4+0xda>
 8008db0:	4637      	mov	r7, r6
 8008db2:	e6e9      	b.n	8008b88 <__udivmoddi4+0xa0>

08008db4 <__aeabi_idiv0>:
 8008db4:	4770      	bx	lr
 8008db6:	bf00      	nop

08008db8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008dbc:	4b0e      	ldr	r3, [pc, #56]	; (8008df8 <HAL_Init+0x40>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	4a0d      	ldr	r2, [pc, #52]	; (8008df8 <HAL_Init+0x40>)
 8008dc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008dc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008dc8:	4b0b      	ldr	r3, [pc, #44]	; (8008df8 <HAL_Init+0x40>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4a0a      	ldr	r2, [pc, #40]	; (8008df8 <HAL_Init+0x40>)
 8008dce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008dd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008dd4:	4b08      	ldr	r3, [pc, #32]	; (8008df8 <HAL_Init+0x40>)
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	4a07      	ldr	r2, [pc, #28]	; (8008df8 <HAL_Init+0x40>)
 8008dda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008dde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008de0:	2003      	movs	r0, #3
 8008de2:	f001 fab5 	bl	800a350 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008de6:	2000      	movs	r0, #0
 8008de8:	f000 f808 	bl	8008dfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008dec:	f008 ff54 	bl	8011c98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008df0:	2300      	movs	r3, #0
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	40023c00 	.word	0x40023c00

08008dfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b082      	sub	sp, #8
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008e04:	4b12      	ldr	r3, [pc, #72]	; (8008e50 <HAL_InitTick+0x54>)
 8008e06:	681a      	ldr	r2, [r3, #0]
 8008e08:	4b12      	ldr	r3, [pc, #72]	; (8008e54 <HAL_InitTick+0x58>)
 8008e0a:	781b      	ldrb	r3, [r3, #0]
 8008e0c:	4619      	mov	r1, r3
 8008e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008e12:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f001 facd 	bl	800a3ba <HAL_SYSTICK_Config>
 8008e20:	4603      	mov	r3, r0
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d001      	beq.n	8008e2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008e26:	2301      	movs	r3, #1
 8008e28:	e00e      	b.n	8008e48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2b0f      	cmp	r3, #15
 8008e2e:	d80a      	bhi.n	8008e46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008e30:	2200      	movs	r2, #0
 8008e32:	6879      	ldr	r1, [r7, #4]
 8008e34:	f04f 30ff 	mov.w	r0, #4294967295
 8008e38:	f001 fa95 	bl	800a366 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008e3c:	4a06      	ldr	r2, [pc, #24]	; (8008e58 <HAL_InitTick+0x5c>)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008e42:	2300      	movs	r3, #0
 8008e44:	e000      	b.n	8008e48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008e46:	2301      	movs	r3, #1
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3708      	adds	r7, #8
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}
 8008e50:	2000001c 	.word	0x2000001c
 8008e54:	20000004 	.word	0x20000004
 8008e58:	20000000 	.word	0x20000000

08008e5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008e60:	4b06      	ldr	r3, [pc, #24]	; (8008e7c <HAL_IncTick+0x20>)
 8008e62:	781b      	ldrb	r3, [r3, #0]
 8008e64:	461a      	mov	r2, r3
 8008e66:	4b06      	ldr	r3, [pc, #24]	; (8008e80 <HAL_IncTick+0x24>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4413      	add	r3, r2
 8008e6c:	4a04      	ldr	r2, [pc, #16]	; (8008e80 <HAL_IncTick+0x24>)
 8008e6e:	6013      	str	r3, [r2, #0]
}
 8008e70:	bf00      	nop
 8008e72:	46bd      	mov	sp, r7
 8008e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e78:	4770      	bx	lr
 8008e7a:	bf00      	nop
 8008e7c:	20000004 	.word	0x20000004
 8008e80:	200042d0 	.word	0x200042d0

08008e84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008e84:	b480      	push	{r7}
 8008e86:	af00      	add	r7, sp, #0
  return uwTick;
 8008e88:	4b03      	ldr	r3, [pc, #12]	; (8008e98 <HAL_GetTick+0x14>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e94:	4770      	bx	lr
 8008e96:	bf00      	nop
 8008e98:	200042d0 	.word	0x200042d0

08008e9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b084      	sub	sp, #16
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008ea4:	f7ff ffee 	bl	8008e84 <HAL_GetTick>
 8008ea8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eb4:	d005      	beq.n	8008ec2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008eb6:	4b09      	ldr	r3, [pc, #36]	; (8008edc <HAL_Delay+0x40>)
 8008eb8:	781b      	ldrb	r3, [r3, #0]
 8008eba:	461a      	mov	r2, r3
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	4413      	add	r3, r2
 8008ec0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008ec2:	bf00      	nop
 8008ec4:	f7ff ffde 	bl	8008e84 <HAL_GetTick>
 8008ec8:	4602      	mov	r2, r0
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	1ad3      	subs	r3, r2, r3
 8008ece:	68fa      	ldr	r2, [r7, #12]
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	d8f7      	bhi.n	8008ec4 <HAL_Delay+0x28>
  {
  }
}
 8008ed4:	bf00      	nop
 8008ed6:	3710      	adds	r7, #16
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}
 8008edc:	20000004 	.word	0x20000004

08008ee0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d101      	bne.n	8008ef6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	e033      	b.n	8008f5e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d109      	bne.n	8008f12 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f006 fe46 	bl	800fb90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2200      	movs	r2, #0
 8008f08:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f16:	f003 0310 	and.w	r3, r3, #16
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d118      	bne.n	8008f50 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f22:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008f26:	f023 0302 	bic.w	r3, r3, #2
 8008f2a:	f043 0202 	orr.w	r2, r3, #2
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 fa5a 	bl	80093ec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f42:	f023 0303 	bic.w	r3, r3, #3
 8008f46:	f043 0201 	orr.w	r2, r3, #1
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	641a      	str	r2, [r3, #64]	; 0x40
 8008f4e:	e001      	b.n	8008f54 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8008f50:	2301      	movs	r3, #1
 8008f52:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2200      	movs	r2, #0
 8008f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8008f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3710      	adds	r7, #16
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
	...

08008f68 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b086      	sub	sp, #24
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	60f8      	str	r0, [r7, #12]
 8008f70:	60b9      	str	r1, [r7, #8]
 8008f72:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8008f74:	2300      	movs	r3, #0
 8008f76:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f7e:	2b01      	cmp	r3, #1
 8008f80:	d101      	bne.n	8008f86 <HAL_ADC_Start_DMA+0x1e>
 8008f82:	2302      	movs	r3, #2
 8008f84:	e0cc      	b.n	8009120 <HAL_ADC_Start_DMA+0x1b8>
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	2201      	movs	r2, #1
 8008f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	689b      	ldr	r3, [r3, #8]
 8008f94:	f003 0301 	and.w	r3, r3, #1
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d018      	beq.n	8008fce <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	689a      	ldr	r2, [r3, #8]
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f042 0201 	orr.w	r2, r2, #1
 8008faa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8008fac:	4b5e      	ldr	r3, [pc, #376]	; (8009128 <HAL_ADC_Start_DMA+0x1c0>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a5e      	ldr	r2, [pc, #376]	; (800912c <HAL_ADC_Start_DMA+0x1c4>)
 8008fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8008fb6:	0c9a      	lsrs	r2, r3, #18
 8008fb8:	4613      	mov	r3, r2
 8008fba:	005b      	lsls	r3, r3, #1
 8008fbc:	4413      	add	r3, r2
 8008fbe:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8008fc0:	e002      	b.n	8008fc8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	3b01      	subs	r3, #1
 8008fc6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d1f9      	bne.n	8008fc2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	f003 0301 	and.w	r3, r3, #1
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	f040 80a0 	bne.w	800911e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fe2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008fe6:	f023 0301 	bic.w	r3, r3, #1
 8008fea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	685b      	ldr	r3, [r3, #4]
 8008ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d007      	beq.n	8009010 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009004:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009008:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009014:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009018:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800901c:	d106      	bne.n	800902c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009022:	f023 0206 	bic.w	r2, r3, #6
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	645a      	str	r2, [r3, #68]	; 0x44
 800902a:	e002      	b.n	8009032 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2200      	movs	r2, #0
 8009030:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	2200      	movs	r2, #0
 8009036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800903a:	4b3d      	ldr	r3, [pc, #244]	; (8009130 <HAL_ADC_Start_DMA+0x1c8>)
 800903c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009042:	4a3c      	ldr	r2, [pc, #240]	; (8009134 <HAL_ADC_Start_DMA+0x1cc>)
 8009044:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800904a:	4a3b      	ldr	r2, [pc, #236]	; (8009138 <HAL_ADC_Start_DMA+0x1d0>)
 800904c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009052:	4a3a      	ldr	r2, [pc, #232]	; (800913c <HAL_ADC_Start_DMA+0x1d4>)
 8009054:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800905e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	685a      	ldr	r2, [r3, #4]
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800906e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	689a      	ldr	r2, [r3, #8]
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800907e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	334c      	adds	r3, #76	; 0x4c
 800908a:	4619      	mov	r1, r3
 800908c:	68ba      	ldr	r2, [r7, #8]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f001 fa4e 	bl	800a530 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8009094:	697b      	ldr	r3, [r7, #20]
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	f003 031f 	and.w	r3, r3, #31
 800909c:	2b00      	cmp	r3, #0
 800909e:	d12a      	bne.n	80090f6 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4a26      	ldr	r2, [pc, #152]	; (8009140 <HAL_ADC_Start_DMA+0x1d8>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d015      	beq.n	80090d6 <HAL_ADC_Start_DMA+0x16e>
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4a25      	ldr	r2, [pc, #148]	; (8009144 <HAL_ADC_Start_DMA+0x1dc>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d105      	bne.n	80090c0 <HAL_ADC_Start_DMA+0x158>
 80090b4:	4b1e      	ldr	r3, [pc, #120]	; (8009130 <HAL_ADC_Start_DMA+0x1c8>)
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	f003 031f 	and.w	r3, r3, #31
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d00a      	beq.n	80090d6 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	4a20      	ldr	r2, [pc, #128]	; (8009148 <HAL_ADC_Start_DMA+0x1e0>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d129      	bne.n	800911e <HAL_ADC_Start_DMA+0x1b6>
 80090ca:	4b19      	ldr	r3, [pc, #100]	; (8009130 <HAL_ADC_Start_DMA+0x1c8>)
 80090cc:	685b      	ldr	r3, [r3, #4]
 80090ce:	f003 031f 	and.w	r3, r3, #31
 80090d2:	2b0f      	cmp	r3, #15
 80090d4:	d823      	bhi.n	800911e <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	689b      	ldr	r3, [r3, #8]
 80090dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d11c      	bne.n	800911e <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	689a      	ldr	r2, [r3, #8]
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80090f2:	609a      	str	r2, [r3, #8]
 80090f4:	e013      	b.n	800911e <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4a11      	ldr	r2, [pc, #68]	; (8009140 <HAL_ADC_Start_DMA+0x1d8>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d10e      	bne.n	800911e <HAL_ADC_Start_DMA+0x1b6>
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	689b      	ldr	r3, [r3, #8]
 8009106:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800910a:	2b00      	cmp	r3, #0
 800910c:	d107      	bne.n	800911e <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	689a      	ldr	r2, [r3, #8]
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800911c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800911e:	2300      	movs	r3, #0
}
 8009120:	4618      	mov	r0, r3
 8009122:	3718      	adds	r7, #24
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}
 8009128:	2000001c 	.word	0x2000001c
 800912c:	431bde83 	.word	0x431bde83
 8009130:	40012300 	.word	0x40012300
 8009134:	080095e5 	.word	0x080095e5
 8009138:	0800969f 	.word	0x0800969f
 800913c:	080096bb 	.word	0x080096bb
 8009140:	40012000 	.word	0x40012000
 8009144:	40012100 	.word	0x40012100
 8009148:	40012200 	.word	0x40012200

0800914c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800914c:	b480      	push	{r7}
 800914e:	b083      	sub	sp, #12
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8009154:	bf00      	nop
 8009156:	370c      	adds	r7, #12
 8009158:	46bd      	mov	sp, r7
 800915a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915e:	4770      	bx	lr

08009160 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009160:	b480      	push	{r7}
 8009162:	b083      	sub	sp, #12
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8009168:	bf00      	nop
 800916a:	370c      	adds	r7, #12
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr

08009174 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009174:	b480      	push	{r7}
 8009176:	b083      	sub	sp, #12
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800917c:	bf00      	nop
 800917e:	370c      	adds	r7, #12
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr

08009188 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8009188:	b480      	push	{r7}
 800918a:	b085      	sub	sp, #20
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
 8009190:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8009192:	2300      	movs	r3, #0
 8009194:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800919c:	2b01      	cmp	r3, #1
 800919e:	d101      	bne.n	80091a4 <HAL_ADC_ConfigChannel+0x1c>
 80091a0:	2302      	movs	r3, #2
 80091a2:	e113      	b.n	80093cc <HAL_ADC_ConfigChannel+0x244>
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2201      	movs	r2, #1
 80091a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	2b09      	cmp	r3, #9
 80091b2:	d925      	bls.n	8009200 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	68d9      	ldr	r1, [r3, #12]
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	b29b      	uxth	r3, r3
 80091c0:	461a      	mov	r2, r3
 80091c2:	4613      	mov	r3, r2
 80091c4:	005b      	lsls	r3, r3, #1
 80091c6:	4413      	add	r3, r2
 80091c8:	3b1e      	subs	r3, #30
 80091ca:	2207      	movs	r2, #7
 80091cc:	fa02 f303 	lsl.w	r3, r2, r3
 80091d0:	43da      	mvns	r2, r3
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	400a      	ands	r2, r1
 80091d8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	68d9      	ldr	r1, [r3, #12]
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	689a      	ldr	r2, [r3, #8]
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	4618      	mov	r0, r3
 80091ec:	4603      	mov	r3, r0
 80091ee:	005b      	lsls	r3, r3, #1
 80091f0:	4403      	add	r3, r0
 80091f2:	3b1e      	subs	r3, #30
 80091f4:	409a      	lsls	r2, r3
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	430a      	orrs	r2, r1
 80091fc:	60da      	str	r2, [r3, #12]
 80091fe:	e022      	b.n	8009246 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	6919      	ldr	r1, [r3, #16]
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	b29b      	uxth	r3, r3
 800920c:	461a      	mov	r2, r3
 800920e:	4613      	mov	r3, r2
 8009210:	005b      	lsls	r3, r3, #1
 8009212:	4413      	add	r3, r2
 8009214:	2207      	movs	r2, #7
 8009216:	fa02 f303 	lsl.w	r3, r2, r3
 800921a:	43da      	mvns	r2, r3
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	400a      	ands	r2, r1
 8009222:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	6919      	ldr	r1, [r3, #16]
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	689a      	ldr	r2, [r3, #8]
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	b29b      	uxth	r3, r3
 8009234:	4618      	mov	r0, r3
 8009236:	4603      	mov	r3, r0
 8009238:	005b      	lsls	r3, r3, #1
 800923a:	4403      	add	r3, r0
 800923c:	409a      	lsls	r2, r3
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	430a      	orrs	r2, r1
 8009244:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	2b06      	cmp	r3, #6
 800924c:	d824      	bhi.n	8009298 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009254:	683b      	ldr	r3, [r7, #0]
 8009256:	685a      	ldr	r2, [r3, #4]
 8009258:	4613      	mov	r3, r2
 800925a:	009b      	lsls	r3, r3, #2
 800925c:	4413      	add	r3, r2
 800925e:	3b05      	subs	r3, #5
 8009260:	221f      	movs	r2, #31
 8009262:	fa02 f303 	lsl.w	r3, r2, r3
 8009266:	43da      	mvns	r2, r3
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	400a      	ands	r2, r1
 800926e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	b29b      	uxth	r3, r3
 800927c:	4618      	mov	r0, r3
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	685a      	ldr	r2, [r3, #4]
 8009282:	4613      	mov	r3, r2
 8009284:	009b      	lsls	r3, r3, #2
 8009286:	4413      	add	r3, r2
 8009288:	3b05      	subs	r3, #5
 800928a:	fa00 f203 	lsl.w	r2, r0, r3
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	430a      	orrs	r2, r1
 8009294:	635a      	str	r2, [r3, #52]	; 0x34
 8009296:	e04c      	b.n	8009332 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	2b0c      	cmp	r3, #12
 800929e:	d824      	bhi.n	80092ea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	685a      	ldr	r2, [r3, #4]
 80092aa:	4613      	mov	r3, r2
 80092ac:	009b      	lsls	r3, r3, #2
 80092ae:	4413      	add	r3, r2
 80092b0:	3b23      	subs	r3, #35	; 0x23
 80092b2:	221f      	movs	r2, #31
 80092b4:	fa02 f303 	lsl.w	r3, r2, r3
 80092b8:	43da      	mvns	r2, r3
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	400a      	ands	r2, r1
 80092c0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	b29b      	uxth	r3, r3
 80092ce:	4618      	mov	r0, r3
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	685a      	ldr	r2, [r3, #4]
 80092d4:	4613      	mov	r3, r2
 80092d6:	009b      	lsls	r3, r3, #2
 80092d8:	4413      	add	r3, r2
 80092da:	3b23      	subs	r3, #35	; 0x23
 80092dc:	fa00 f203 	lsl.w	r2, r0, r3
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	430a      	orrs	r2, r1
 80092e6:	631a      	str	r2, [r3, #48]	; 0x30
 80092e8:	e023      	b.n	8009332 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	685a      	ldr	r2, [r3, #4]
 80092f4:	4613      	mov	r3, r2
 80092f6:	009b      	lsls	r3, r3, #2
 80092f8:	4413      	add	r3, r2
 80092fa:	3b41      	subs	r3, #65	; 0x41
 80092fc:	221f      	movs	r2, #31
 80092fe:	fa02 f303 	lsl.w	r3, r2, r3
 8009302:	43da      	mvns	r2, r3
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	400a      	ands	r2, r1
 800930a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	b29b      	uxth	r3, r3
 8009318:	4618      	mov	r0, r3
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	685a      	ldr	r2, [r3, #4]
 800931e:	4613      	mov	r3, r2
 8009320:	009b      	lsls	r3, r3, #2
 8009322:	4413      	add	r3, r2
 8009324:	3b41      	subs	r3, #65	; 0x41
 8009326:	fa00 f203 	lsl.w	r2, r0, r3
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	430a      	orrs	r2, r1
 8009330:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009332:	4b29      	ldr	r3, [pc, #164]	; (80093d8 <HAL_ADC_ConfigChannel+0x250>)
 8009334:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a28      	ldr	r2, [pc, #160]	; (80093dc <HAL_ADC_ConfigChannel+0x254>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d10f      	bne.n	8009360 <HAL_ADC_ConfigChannel+0x1d8>
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	2b12      	cmp	r3, #18
 8009346:	d10b      	bne.n	8009360 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	685b      	ldr	r3, [r3, #4]
 800934c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4a1d      	ldr	r2, [pc, #116]	; (80093dc <HAL_ADC_ConfigChannel+0x254>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d12b      	bne.n	80093c2 <HAL_ADC_ConfigChannel+0x23a>
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	4a1c      	ldr	r2, [pc, #112]	; (80093e0 <HAL_ADC_ConfigChannel+0x258>)
 8009370:	4293      	cmp	r3, r2
 8009372:	d003      	beq.n	800937c <HAL_ADC_ConfigChannel+0x1f4>
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	2b11      	cmp	r3, #17
 800937a:	d122      	bne.n	80093c2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	685b      	ldr	r3, [r3, #4]
 8009380:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	685b      	ldr	r3, [r3, #4]
 800938c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4a11      	ldr	r2, [pc, #68]	; (80093e0 <HAL_ADC_ConfigChannel+0x258>)
 800939a:	4293      	cmp	r3, r2
 800939c:	d111      	bne.n	80093c2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800939e:	4b11      	ldr	r3, [pc, #68]	; (80093e4 <HAL_ADC_ConfigChannel+0x25c>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	4a11      	ldr	r2, [pc, #68]	; (80093e8 <HAL_ADC_ConfigChannel+0x260>)
 80093a4:	fba2 2303 	umull	r2, r3, r2, r3
 80093a8:	0c9a      	lsrs	r2, r3, #18
 80093aa:	4613      	mov	r3, r2
 80093ac:	009b      	lsls	r3, r3, #2
 80093ae:	4413      	add	r3, r2
 80093b0:	005b      	lsls	r3, r3, #1
 80093b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80093b4:	e002      	b.n	80093bc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	3b01      	subs	r3, #1
 80093ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d1f9      	bne.n	80093b6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	2200      	movs	r2, #0
 80093c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80093ca:	2300      	movs	r3, #0
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3714      	adds	r7, #20
 80093d0:	46bd      	mov	sp, r7
 80093d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d6:	4770      	bx	lr
 80093d8:	40012300 	.word	0x40012300
 80093dc:	40012000 	.word	0x40012000
 80093e0:	10000012 	.word	0x10000012
 80093e4:	2000001c 	.word	0x2000001c
 80093e8:	431bde83 	.word	0x431bde83

080093ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80093ec:	b480      	push	{r7}
 80093ee:	b085      	sub	sp, #20
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80093f4:	4b79      	ldr	r3, [pc, #484]	; (80095dc <ADC_Init+0x1f0>)
 80093f6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	685b      	ldr	r3, [r3, #4]
 80093fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	685a      	ldr	r2, [r3, #4]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	685b      	ldr	r3, [r3, #4]
 800940c:	431a      	orrs	r2, r3
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	685a      	ldr	r2, [r3, #4]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009420:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	6859      	ldr	r1, [r3, #4]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	691b      	ldr	r3, [r3, #16]
 800942c:	021a      	lsls	r2, r3, #8
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	430a      	orrs	r2, r1
 8009434:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	685a      	ldr	r2, [r3, #4]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8009444:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	6859      	ldr	r1, [r3, #4]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	689a      	ldr	r2, [r3, #8]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	430a      	orrs	r2, r1
 8009456:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	689a      	ldr	r2, [r3, #8]
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009466:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	6899      	ldr	r1, [r3, #8]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	68da      	ldr	r2, [r3, #12]
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	430a      	orrs	r2, r1
 8009478:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800947e:	4a58      	ldr	r2, [pc, #352]	; (80095e0 <ADC_Init+0x1f4>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d022      	beq.n	80094ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	689a      	ldr	r2, [r3, #8]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009492:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	6899      	ldr	r1, [r3, #8]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	430a      	orrs	r2, r1
 80094a4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	689a      	ldr	r2, [r3, #8]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80094b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	6899      	ldr	r1, [r3, #8]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	430a      	orrs	r2, r1
 80094c6:	609a      	str	r2, [r3, #8]
 80094c8:	e00f      	b.n	80094ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	689a      	ldr	r2, [r3, #8]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80094d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	689a      	ldr	r2, [r3, #8]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80094e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	689a      	ldr	r2, [r3, #8]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f022 0202 	bic.w	r2, r2, #2
 80094f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	6899      	ldr	r1, [r3, #8]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	7e1b      	ldrb	r3, [r3, #24]
 8009504:	005a      	lsls	r2, r3, #1
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	430a      	orrs	r2, r1
 800950c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d01b      	beq.n	8009550 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	685a      	ldr	r2, [r3, #4]
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009526:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	685a      	ldr	r2, [r3, #4]
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8009536:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	6859      	ldr	r1, [r3, #4]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009542:	3b01      	subs	r3, #1
 8009544:	035a      	lsls	r2, r3, #13
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	430a      	orrs	r2, r1
 800954c:	605a      	str	r2, [r3, #4]
 800954e:	e007      	b.n	8009560 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	685a      	ldr	r2, [r3, #4]
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800955e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800956e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	69db      	ldr	r3, [r3, #28]
 800957a:	3b01      	subs	r3, #1
 800957c:	051a      	lsls	r2, r3, #20
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	430a      	orrs	r2, r1
 8009584:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	689a      	ldr	r2, [r3, #8]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009594:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	6899      	ldr	r1, [r3, #8]
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80095a2:	025a      	lsls	r2, r3, #9
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	430a      	orrs	r2, r1
 80095aa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	689a      	ldr	r2, [r3, #8]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80095ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	6899      	ldr	r1, [r3, #8]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	695b      	ldr	r3, [r3, #20]
 80095c6:	029a      	lsls	r2, r3, #10
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	430a      	orrs	r2, r1
 80095ce:	609a      	str	r2, [r3, #8]
}
 80095d0:	bf00      	nop
 80095d2:	3714      	adds	r7, #20
 80095d4:	46bd      	mov	sp, r7
 80095d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095da:	4770      	bx	lr
 80095dc:	40012300 	.word	0x40012300
 80095e0:	0f000001 	.word	0x0f000001

080095e4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b084      	sub	sp, #16
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095f0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095f6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d13c      	bne.n	8009678 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009602:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	689b      	ldr	r3, [r3, #8]
 8009610:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009614:	2b00      	cmp	r3, #0
 8009616:	d12b      	bne.n	8009670 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800961c:	2b00      	cmp	r3, #0
 800961e:	d127      	bne.n	8009670 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009626:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800962a:	2b00      	cmp	r3, #0
 800962c:	d006      	beq.n	800963c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	689b      	ldr	r3, [r3, #8]
 8009634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009638:	2b00      	cmp	r3, #0
 800963a:	d119      	bne.n	8009670 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	685a      	ldr	r2, [r3, #4]
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f022 0220 	bic.w	r2, r2, #32
 800964a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009650:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800965c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009660:	2b00      	cmp	r3, #0
 8009662:	d105      	bne.n	8009670 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009668:	f043 0201 	orr.w	r2, r3, #1
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009670:	68f8      	ldr	r0, [r7, #12]
 8009672:	f7ff fd6b 	bl	800914c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8009676:	e00e      	b.n	8009696 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800967c:	f003 0310 	and.w	r3, r3, #16
 8009680:	2b00      	cmp	r3, #0
 8009682:	d003      	beq.n	800968c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8009684:	68f8      	ldr	r0, [r7, #12]
 8009686:	f7ff fd75 	bl	8009174 <HAL_ADC_ErrorCallback>
}
 800968a:	e004      	b.n	8009696 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	4798      	blx	r3
}
 8009696:	bf00      	nop
 8009698:	3710      	adds	r7, #16
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}

0800969e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800969e:	b580      	push	{r7, lr}
 80096a0:	b084      	sub	sp, #16
 80096a2:	af00      	add	r7, sp, #0
 80096a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096aa:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80096ac:	68f8      	ldr	r0, [r7, #12]
 80096ae:	f7ff fd57 	bl	8009160 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80096b2:	bf00      	nop
 80096b4:	3710      	adds	r7, #16
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}

080096ba <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80096ba:	b580      	push	{r7, lr}
 80096bc:	b084      	sub	sp, #16
 80096be:	af00      	add	r7, sp, #0
 80096c0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096c6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	2240      	movs	r2, #64	; 0x40
 80096cc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096d2:	f043 0204 	orr.w	r2, r3, #4
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80096da:	68f8      	ldr	r0, [r7, #12]
 80096dc:	f7ff fd4a 	bl	8009174 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80096e0:	bf00      	nop
 80096e2:	3710      	adds	r7, #16
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}

080096e8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b084      	sub	sp, #16
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d101      	bne.n	80096fa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80096f6:	2301      	movs	r3, #1
 80096f8:	e0ed      	b.n	80098d6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009700:	b2db      	uxtb	r3, r3
 8009702:	2b00      	cmp	r3, #0
 8009704:	d102      	bne.n	800970c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f006 fbd8 	bl	800febc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	681a      	ldr	r2, [r3, #0]
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	f022 0202 	bic.w	r2, r2, #2
 800971a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800971c:	f7ff fbb2 	bl	8008e84 <HAL_GetTick>
 8009720:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009722:	e012      	b.n	800974a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009724:	f7ff fbae 	bl	8008e84 <HAL_GetTick>
 8009728:	4602      	mov	r2, r0
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	1ad3      	subs	r3, r2, r3
 800972e:	2b0a      	cmp	r3, #10
 8009730:	d90b      	bls.n	800974a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009736:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	2205      	movs	r2, #5
 8009742:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009746:	2301      	movs	r3, #1
 8009748:	e0c5      	b.n	80098d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	f003 0302 	and.w	r3, r3, #2
 8009754:	2b00      	cmp	r3, #0
 8009756:	d1e5      	bne.n	8009724 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	681a      	ldr	r2, [r3, #0]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f042 0201 	orr.w	r2, r2, #1
 8009766:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009768:	f7ff fb8c 	bl	8008e84 <HAL_GetTick>
 800976c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800976e:	e012      	b.n	8009796 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009770:	f7ff fb88 	bl	8008e84 <HAL_GetTick>
 8009774:	4602      	mov	r2, r0
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	1ad3      	subs	r3, r2, r3
 800977a:	2b0a      	cmp	r3, #10
 800977c:	d90b      	bls.n	8009796 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009782:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2205      	movs	r2, #5
 800978e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009792:	2301      	movs	r3, #1
 8009794:	e09f      	b.n	80098d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	685b      	ldr	r3, [r3, #4]
 800979c:	f003 0301 	and.w	r3, r3, #1
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d0e5      	beq.n	8009770 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	7e1b      	ldrb	r3, [r3, #24]
 80097a8:	2b01      	cmp	r3, #1
 80097aa:	d108      	bne.n	80097be <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	681a      	ldr	r2, [r3, #0]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80097ba:	601a      	str	r2, [r3, #0]
 80097bc:	e007      	b.n	80097ce <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80097cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	7e5b      	ldrb	r3, [r3, #25]
 80097d2:	2b01      	cmp	r3, #1
 80097d4:	d108      	bne.n	80097e8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	681a      	ldr	r2, [r3, #0]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80097e4:	601a      	str	r2, [r3, #0]
 80097e6:	e007      	b.n	80097f8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	681a      	ldr	r2, [r3, #0]
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80097f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	7e9b      	ldrb	r3, [r3, #26]
 80097fc:	2b01      	cmp	r3, #1
 80097fe:	d108      	bne.n	8009812 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	681a      	ldr	r2, [r3, #0]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f042 0220 	orr.w	r2, r2, #32
 800980e:	601a      	str	r2, [r3, #0]
 8009810:	e007      	b.n	8009822 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	681a      	ldr	r2, [r3, #0]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f022 0220 	bic.w	r2, r2, #32
 8009820:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	7edb      	ldrb	r3, [r3, #27]
 8009826:	2b01      	cmp	r3, #1
 8009828:	d108      	bne.n	800983c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	681a      	ldr	r2, [r3, #0]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f022 0210 	bic.w	r2, r2, #16
 8009838:	601a      	str	r2, [r3, #0]
 800983a:	e007      	b.n	800984c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	681a      	ldr	r2, [r3, #0]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f042 0210 	orr.w	r2, r2, #16
 800984a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	7f1b      	ldrb	r3, [r3, #28]
 8009850:	2b01      	cmp	r3, #1
 8009852:	d108      	bne.n	8009866 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	681a      	ldr	r2, [r3, #0]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f042 0208 	orr.w	r2, r2, #8
 8009862:	601a      	str	r2, [r3, #0]
 8009864:	e007      	b.n	8009876 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	681a      	ldr	r2, [r3, #0]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f022 0208 	bic.w	r2, r2, #8
 8009874:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	7f5b      	ldrb	r3, [r3, #29]
 800987a:	2b01      	cmp	r3, #1
 800987c:	d108      	bne.n	8009890 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	681a      	ldr	r2, [r3, #0]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f042 0204 	orr.w	r2, r2, #4
 800988c:	601a      	str	r2, [r3, #0]
 800988e:	e007      	b.n	80098a0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	681a      	ldr	r2, [r3, #0]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f022 0204 	bic.w	r2, r2, #4
 800989e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	689a      	ldr	r2, [r3, #8]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	68db      	ldr	r3, [r3, #12]
 80098a8:	431a      	orrs	r2, r3
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	691b      	ldr	r3, [r3, #16]
 80098ae:	431a      	orrs	r2, r3
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	695b      	ldr	r3, [r3, #20]
 80098b4:	ea42 0103 	orr.w	r1, r2, r3
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	685b      	ldr	r3, [r3, #4]
 80098bc:	1e5a      	subs	r2, r3, #1
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	430a      	orrs	r2, r1
 80098c4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2200      	movs	r2, #0
 80098ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2201      	movs	r2, #1
 80098d0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80098d4:	2300      	movs	r3, #0
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3710      	adds	r7, #16
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
	...

080098e0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b087      	sub	sp, #28
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80098f6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80098f8:	7cfb      	ldrb	r3, [r7, #19]
 80098fa:	2b01      	cmp	r3, #1
 80098fc:	d003      	beq.n	8009906 <HAL_CAN_ConfigFilter+0x26>
 80098fe:	7cfb      	ldrb	r3, [r7, #19]
 8009900:	2b02      	cmp	r3, #2
 8009902:	f040 80be 	bne.w	8009a82 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8009906:	4b65      	ldr	r3, [pc, #404]	; (8009a9c <HAL_CAN_ConfigFilter+0x1bc>)
 8009908:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009910:	f043 0201 	orr.w	r2, r3, #1
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009920:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009934:	021b      	lsls	r3, r3, #8
 8009936:	431a      	orrs	r2, r3
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	695b      	ldr	r3, [r3, #20]
 8009942:	f003 031f 	and.w	r3, r3, #31
 8009946:	2201      	movs	r2, #1
 8009948:	fa02 f303 	lsl.w	r3, r2, r3
 800994c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	43db      	mvns	r3, r3
 8009958:	401a      	ands	r2, r3
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	69db      	ldr	r3, [r3, #28]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d123      	bne.n	80099b0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8009968:	697b      	ldr	r3, [r7, #20]
 800996a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	43db      	mvns	r3, r3
 8009972:	401a      	ands	r2, r3
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	68db      	ldr	r3, [r3, #12]
 800997e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8009986:	683a      	ldr	r2, [r7, #0]
 8009988:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800998a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	3248      	adds	r2, #72	; 0x48
 8009990:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	689b      	ldr	r3, [r3, #8]
 8009998:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80099a4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80099a6:	6979      	ldr	r1, [r7, #20]
 80099a8:	3348      	adds	r3, #72	; 0x48
 80099aa:	00db      	lsls	r3, r3, #3
 80099ac:	440b      	add	r3, r1
 80099ae:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	69db      	ldr	r3, [r3, #28]
 80099b4:	2b01      	cmp	r3, #1
 80099b6:	d122      	bne.n	80099fe <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	431a      	orrs	r2, r3
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	685b      	ldr	r3, [r3, #4]
 80099d2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80099d4:	683a      	ldr	r2, [r7, #0]
 80099d6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80099d8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	3248      	adds	r2, #72	; 0x48
 80099de:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	689b      	ldr	r3, [r3, #8]
 80099e6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	68db      	ldr	r3, [r3, #12]
 80099ec:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80099f2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80099f4:	6979      	ldr	r1, [r7, #20]
 80099f6:	3348      	adds	r3, #72	; 0x48
 80099f8:	00db      	lsls	r3, r3, #3
 80099fa:	440b      	add	r3, r1
 80099fc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	699b      	ldr	r3, [r3, #24]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d109      	bne.n	8009a1a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	43db      	mvns	r3, r3
 8009a10:	401a      	ands	r2, r3
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8009a18:	e007      	b.n	8009a2a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	431a      	orrs	r2, r3
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	691b      	ldr	r3, [r3, #16]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d109      	bne.n	8009a46 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	43db      	mvns	r3, r3
 8009a3c:	401a      	ands	r2, r3
 8009a3e:	697b      	ldr	r3, [r7, #20]
 8009a40:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8009a44:	e007      	b.n	8009a56 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	431a      	orrs	r2, r3
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	6a1b      	ldr	r3, [r3, #32]
 8009a5a:	2b01      	cmp	r3, #1
 8009a5c:	d107      	bne.n	8009a6e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	431a      	orrs	r2, r3
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8009a74:	f023 0201 	bic.w	r2, r3, #1
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	e006      	b.n	8009a90 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a86:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009a8e:	2301      	movs	r3, #1
  }
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	371c      	adds	r7, #28
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr
 8009a9c:	40006400 	.word	0x40006400

08009aa0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b084      	sub	sp, #16
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009aae:	b2db      	uxtb	r3, r3
 8009ab0:	2b01      	cmp	r3, #1
 8009ab2:	d12e      	bne.n	8009b12 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2202      	movs	r2, #2
 8009ab8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	681a      	ldr	r2, [r3, #0]
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f022 0201 	bic.w	r2, r2, #1
 8009aca:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009acc:	f7ff f9da 	bl	8008e84 <HAL_GetTick>
 8009ad0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8009ad2:	e012      	b.n	8009afa <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009ad4:	f7ff f9d6 	bl	8008e84 <HAL_GetTick>
 8009ad8:	4602      	mov	r2, r0
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	1ad3      	subs	r3, r2, r3
 8009ade:	2b0a      	cmp	r3, #10
 8009ae0:	d90b      	bls.n	8009afa <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2205      	movs	r2, #5
 8009af2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8009af6:	2301      	movs	r3, #1
 8009af8:	e012      	b.n	8009b20 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	f003 0301 	and.w	r3, r3, #1
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d1e5      	bne.n	8009ad4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	e006      	b.n	8009b20 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b16:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009b1e:	2301      	movs	r3, #1
  }
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3710      	adds	r7, #16
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}

08009b28 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b087      	sub	sp, #28
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	60f8      	str	r0, [r7, #12]
 8009b30:	60b9      	str	r1, [r7, #8]
 8009b32:	607a      	str	r2, [r7, #4]
 8009b34:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009b3c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8009b3e:	7dfb      	ldrb	r3, [r7, #23]
 8009b40:	2b01      	cmp	r3, #1
 8009b42:	d003      	beq.n	8009b4c <HAL_CAN_GetRxMessage+0x24>
 8009b44:	7dfb      	ldrb	r3, [r7, #23]
 8009b46:	2b02      	cmp	r3, #2
 8009b48:	f040 80f4 	bne.w	8009d34 <HAL_CAN_GetRxMessage+0x20c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d10e      	bne.n	8009b70 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	68db      	ldr	r3, [r3, #12]
 8009b58:	f003 0303 	and.w	r3, r3, #3
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d116      	bne.n	8009b8e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b64:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	e0e8      	b.n	8009d42 <HAL_CAN_GetRxMessage+0x21a>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	691b      	ldr	r3, [r3, #16]
 8009b76:	f003 0303 	and.w	r3, r3, #3
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d107      	bne.n	8009b8e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b82:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	e0d9      	b.n	8009d42 <HAL_CAN_GetRxMessage+0x21a>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681a      	ldr	r2, [r3, #0]
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	331b      	adds	r3, #27
 8009b96:	011b      	lsls	r3, r3, #4
 8009b98:	4413      	add	r3, r2
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f003 0204 	and.w	r2, r3, #4
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	689b      	ldr	r3, [r3, #8]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d10c      	bne.n	8009bc6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681a      	ldr	r2, [r3, #0]
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	331b      	adds	r3, #27
 8009bb4:	011b      	lsls	r3, r3, #4
 8009bb6:	4413      	add	r3, r2
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	0d5b      	lsrs	r3, r3, #21
 8009bbc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	601a      	str	r2, [r3, #0]
 8009bc4:	e00b      	b.n	8009bde <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681a      	ldr	r2, [r3, #0]
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	331b      	adds	r3, #27
 8009bce:	011b      	lsls	r3, r3, #4
 8009bd0:	4413      	add	r3, r2
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	08db      	lsrs	r3, r3, #3
 8009bd6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_RTR_Pos;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681a      	ldr	r2, [r3, #0]
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	331b      	adds	r3, #27
 8009be6:	011b      	lsls	r3, r3, #4
 8009be8:	4413      	add	r3, r2
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	085b      	lsrs	r3, r3, #1
 8009bee:	f003 0201 	and.w	r2, r3, #1
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681a      	ldr	r2, [r3, #0]
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	331b      	adds	r3, #27
 8009bfe:	011b      	lsls	r3, r3, #4
 8009c00:	4413      	add	r3, r2
 8009c02:	3304      	adds	r3, #4
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f003 020f 	and.w	r2, r3, #15
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681a      	ldr	r2, [r3, #0]
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	331b      	adds	r3, #27
 8009c16:	011b      	lsls	r3, r3, #4
 8009c18:	4413      	add	r3, r2
 8009c1a:	3304      	adds	r3, #4
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	0a1b      	lsrs	r3, r3, #8
 8009c20:	b2da      	uxtb	r2, r3
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	681a      	ldr	r2, [r3, #0]
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	331b      	adds	r3, #27
 8009c2e:	011b      	lsls	r3, r3, #4
 8009c30:	4413      	add	r3, r2
 8009c32:	3304      	adds	r3, #4
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	0c1b      	lsrs	r3, r3, #16
 8009c38:	b29a      	uxth	r2, r3
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	681a      	ldr	r2, [r3, #0]
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	011b      	lsls	r3, r3, #4
 8009c46:	4413      	add	r3, r2
 8009c48:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	b2da      	uxtb	r2, r3
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	681a      	ldr	r2, [r3, #0]
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	011b      	lsls	r3, r3, #4
 8009c5c:	4413      	add	r3, r2
 8009c5e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	0a1a      	lsrs	r2, r3, #8
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	3301      	adds	r3, #1
 8009c6a:	b2d2      	uxtb	r2, r2
 8009c6c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681a      	ldr	r2, [r3, #0]
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	011b      	lsls	r3, r3, #4
 8009c76:	4413      	add	r3, r2
 8009c78:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	0c1a      	lsrs	r2, r3, #16
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	3302      	adds	r3, #2
 8009c84:	b2d2      	uxtb	r2, r2
 8009c86:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	681a      	ldr	r2, [r3, #0]
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	011b      	lsls	r3, r3, #4
 8009c90:	4413      	add	r3, r2
 8009c92:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	0e1a      	lsrs	r2, r3, #24
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	3303      	adds	r3, #3
 8009c9e:	b2d2      	uxtb	r2, r2
 8009ca0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681a      	ldr	r2, [r3, #0]
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	011b      	lsls	r3, r3, #4
 8009caa:	4413      	add	r3, r2
 8009cac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009cb0:	681a      	ldr	r2, [r3, #0]
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	3304      	adds	r3, #4
 8009cb6:	b2d2      	uxtb	r2, r2
 8009cb8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681a      	ldr	r2, [r3, #0]
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	011b      	lsls	r3, r3, #4
 8009cc2:	4413      	add	r3, r2
 8009cc4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	0a1a      	lsrs	r2, r3, #8
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	3305      	adds	r3, #5
 8009cd0:	b2d2      	uxtb	r2, r2
 8009cd2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	681a      	ldr	r2, [r3, #0]
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	011b      	lsls	r3, r3, #4
 8009cdc:	4413      	add	r3, r2
 8009cde:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	0c1a      	lsrs	r2, r3, #16
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	3306      	adds	r3, #6
 8009cea:	b2d2      	uxtb	r2, r2
 8009cec:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	681a      	ldr	r2, [r3, #0]
 8009cf2:	68bb      	ldr	r3, [r7, #8]
 8009cf4:	011b      	lsls	r3, r3, #4
 8009cf6:	4413      	add	r3, r2
 8009cf8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	0e1a      	lsrs	r2, r3, #24
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	3307      	adds	r3, #7
 8009d04:	b2d2      	uxtb	r2, r2
 8009d06:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8009d08:	68bb      	ldr	r3, [r7, #8]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d108      	bne.n	8009d20 <HAL_CAN_GetRxMessage+0x1f8>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	68da      	ldr	r2, [r3, #12]
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f042 0220 	orr.w	r2, r2, #32
 8009d1c:	60da      	str	r2, [r3, #12]
 8009d1e:	e007      	b.n	8009d30 <HAL_CAN_GetRxMessage+0x208>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	691a      	ldr	r2, [r3, #16]
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f042 0220 	orr.w	r2, r2, #32
 8009d2e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8009d30:	2300      	movs	r3, #0
 8009d32:	e006      	b.n	8009d42 <HAL_CAN_GetRxMessage+0x21a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d38:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009d40:	2301      	movs	r3, #1
  }
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	371c      	adds	r7, #28
 8009d46:	46bd      	mov	sp, r7
 8009d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4c:	4770      	bx	lr

08009d4e <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8009d4e:	b480      	push	{r7}
 8009d50:	b085      	sub	sp, #20
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	6078      	str	r0, [r7, #4]
 8009d56:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009d5e:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8009d60:	7bfb      	ldrb	r3, [r7, #15]
 8009d62:	2b01      	cmp	r3, #1
 8009d64:	d002      	beq.n	8009d6c <HAL_CAN_ActivateNotification+0x1e>
 8009d66:	7bfb      	ldrb	r3, [r7, #15]
 8009d68:	2b02      	cmp	r3, #2
 8009d6a:	d109      	bne.n	8009d80 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	6959      	ldr	r1, [r3, #20]
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	683a      	ldr	r2, [r7, #0]
 8009d78:	430a      	orrs	r2, r1
 8009d7a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	e006      	b.n	8009d8e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d84:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8009d8c:	2301      	movs	r3, #1
  }
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3714      	adds	r7, #20
 8009d92:	46bd      	mov	sp, r7
 8009d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d98:	4770      	bx	lr

08009d9a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8009d9a:	b580      	push	{r7, lr}
 8009d9c:	b08a      	sub	sp, #40	; 0x28
 8009d9e:	af00      	add	r7, sp, #0
 8009da0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8009da2:	2300      	movs	r3, #0
 8009da4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	695b      	ldr	r3, [r3, #20]
 8009dac:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	685b      	ldr	r3, [r3, #4]
 8009db4:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	689b      	ldr	r3, [r3, #8]
 8009dbc:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	68db      	ldr	r3, [r3, #12]
 8009dc4:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	691b      	ldr	r3, [r3, #16]
 8009dcc:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	699b      	ldr	r3, [r3, #24]
 8009dd4:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8009dd6:	6a3b      	ldr	r3, [r7, #32]
 8009dd8:	f003 0301 	and.w	r3, r3, #1
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d07c      	beq.n	8009eda <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8009de0:	69bb      	ldr	r3, [r7, #24]
 8009de2:	f003 0301 	and.w	r3, r3, #1
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d023      	beq.n	8009e32 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	2201      	movs	r2, #1
 8009df0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8009df2:	69bb      	ldr	r3, [r7, #24]
 8009df4:	f003 0302 	and.w	r3, r3, #2
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d003      	beq.n	8009e04 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f006 f943 	bl	8010088 <HAL_CAN_TxMailbox0CompleteCallback>
 8009e02:	e016      	b.n	8009e32 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8009e04:	69bb      	ldr	r3, [r7, #24]
 8009e06:	f003 0304 	and.w	r3, r3, #4
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d004      	beq.n	8009e18 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8009e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e10:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009e14:	627b      	str	r3, [r7, #36]	; 0x24
 8009e16:	e00c      	b.n	8009e32 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8009e18:	69bb      	ldr	r3, [r7, #24]
 8009e1a:	f003 0308 	and.w	r3, r3, #8
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d004      	beq.n	8009e2c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8009e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009e28:	627b      	str	r3, [r7, #36]	; 0x24
 8009e2a:	e002      	b.n	8009e32 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f000 f965 	bl	800a0fc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8009e32:	69bb      	ldr	r3, [r7, #24]
 8009e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d024      	beq.n	8009e86 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009e44:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8009e46:	69bb      	ldr	r3, [r7, #24]
 8009e48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d003      	beq.n	8009e58 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f006 f929 	bl	80100a8 <HAL_CAN_TxMailbox1CompleteCallback>
 8009e56:	e016      	b.n	8009e86 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8009e58:	69bb      	ldr	r3, [r7, #24]
 8009e5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d004      	beq.n	8009e6c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8009e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8009e68:	627b      	str	r3, [r7, #36]	; 0x24
 8009e6a:	e00c      	b.n	8009e86 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8009e6c:	69bb      	ldr	r3, [r7, #24]
 8009e6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d004      	beq.n	8009e80 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8009e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8009e7e:	e002      	b.n	8009e86 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f000 f945 	bl	800a110 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8009e86:	69bb      	ldr	r3, [r7, #24]
 8009e88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d024      	beq.n	8009eda <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009e98:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8009e9a:	69bb      	ldr	r3, [r7, #24]
 8009e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d003      	beq.n	8009eac <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f006 f90f 	bl	80100c8 <HAL_CAN_TxMailbox2CompleteCallback>
 8009eaa:	e016      	b.n	8009eda <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8009eac:	69bb      	ldr	r3, [r7, #24]
 8009eae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d004      	beq.n	8009ec0 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8009eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ebc:	627b      	str	r3, [r7, #36]	; 0x24
 8009ebe:	e00c      	b.n	8009eda <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8009ec0:	69bb      	ldr	r3, [r7, #24]
 8009ec2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d004      	beq.n	8009ed4 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8009eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8009ed2:	e002      	b.n	8009eda <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f000 f925 	bl	800a124 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8009eda:	6a3b      	ldr	r3, [r7, #32]
 8009edc:	f003 0308 	and.w	r3, r3, #8
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d00c      	beq.n	8009efe <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	f003 0310 	and.w	r3, r3, #16
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d007      	beq.n	8009efe <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8009eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009ef4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	2210      	movs	r2, #16
 8009efc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8009efe:	6a3b      	ldr	r3, [r7, #32]
 8009f00:	f003 0304 	and.w	r3, r3, #4
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d00b      	beq.n	8009f20 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8009f08:	697b      	ldr	r3, [r7, #20]
 8009f0a:	f003 0308 	and.w	r3, r3, #8
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d006      	beq.n	8009f20 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	2208      	movs	r2, #8
 8009f18:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f000 f90c 	bl	800a138 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8009f20:	6a3b      	ldr	r3, [r7, #32]
 8009f22:	f003 0302 	and.w	r3, r3, #2
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d009      	beq.n	8009f3e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	68db      	ldr	r3, [r3, #12]
 8009f30:	f003 0303 	and.w	r3, r3, #3
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d002      	beq.n	8009f3e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f006 f8d5 	bl	80100e8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8009f3e:	6a3b      	ldr	r3, [r7, #32]
 8009f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d00c      	beq.n	8009f62 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8009f48:	693b      	ldr	r3, [r7, #16]
 8009f4a:	f003 0310 	and.w	r3, r3, #16
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d007      	beq.n	8009f62 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8009f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f54:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009f58:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	2210      	movs	r2, #16
 8009f60:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8009f62:	6a3b      	ldr	r3, [r7, #32]
 8009f64:	f003 0320 	and.w	r3, r3, #32
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d00b      	beq.n	8009f84 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	f003 0308 	and.w	r3, r3, #8
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d006      	beq.n	8009f84 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	2208      	movs	r2, #8
 8009f7c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f000 f8ee 	bl	800a160 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8009f84:	6a3b      	ldr	r3, [r7, #32]
 8009f86:	f003 0310 	and.w	r3, r3, #16
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d009      	beq.n	8009fa2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	691b      	ldr	r3, [r3, #16]
 8009f94:	f003 0303 	and.w	r3, r3, #3
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d002      	beq.n	8009fa2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f000 f8d5 	bl	800a14c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8009fa2:	6a3b      	ldr	r3, [r7, #32]
 8009fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d00b      	beq.n	8009fc4 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8009fac:	69fb      	ldr	r3, [r7, #28]
 8009fae:	f003 0310 	and.w	r3, r3, #16
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d006      	beq.n	8009fc4 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	2210      	movs	r2, #16
 8009fbc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f000 f8d8 	bl	800a174 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8009fc4:	6a3b      	ldr	r3, [r7, #32]
 8009fc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d00b      	beq.n	8009fe6 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8009fce:	69fb      	ldr	r3, [r7, #28]
 8009fd0:	f003 0308 	and.w	r3, r3, #8
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d006      	beq.n	8009fe6 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	2208      	movs	r2, #8
 8009fde:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f000 f8d1 	bl	800a188 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8009fe6:	6a3b      	ldr	r3, [r7, #32]
 8009fe8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d075      	beq.n	800a0dc <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8009ff0:	69fb      	ldr	r3, [r7, #28]
 8009ff2:	f003 0304 	and.w	r3, r3, #4
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d06c      	beq.n	800a0d4 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8009ffa:	6a3b      	ldr	r3, [r7, #32]
 8009ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a000:	2b00      	cmp	r3, #0
 800a002:	d008      	beq.n	800a016 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d003      	beq.n	800a016 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800a00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a010:	f043 0301 	orr.w	r3, r3, #1
 800a014:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800a016:	6a3b      	ldr	r3, [r7, #32]
 800a018:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d008      	beq.n	800a032 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800a026:	2b00      	cmp	r3, #0
 800a028:	d003      	beq.n	800a032 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800a02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a02c:	f043 0302 	orr.w	r3, r3, #2
 800a030:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800a032:	6a3b      	ldr	r3, [r7, #32]
 800a034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d008      	beq.n	800a04e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800a042:	2b00      	cmp	r3, #0
 800a044:	d003      	beq.n	800a04e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800a046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a048:	f043 0304 	orr.w	r3, r3, #4
 800a04c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800a04e:	6a3b      	ldr	r3, [r7, #32]
 800a050:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a054:	2b00      	cmp	r3, #0
 800a056:	d03d      	beq.n	800a0d4 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d038      	beq.n	800a0d4 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a068:	2b30      	cmp	r3, #48	; 0x30
 800a06a:	d017      	beq.n	800a09c <HAL_CAN_IRQHandler+0x302>
 800a06c:	2b30      	cmp	r3, #48	; 0x30
 800a06e:	d804      	bhi.n	800a07a <HAL_CAN_IRQHandler+0x2e0>
 800a070:	2b10      	cmp	r3, #16
 800a072:	d009      	beq.n	800a088 <HAL_CAN_IRQHandler+0x2ee>
 800a074:	2b20      	cmp	r3, #32
 800a076:	d00c      	beq.n	800a092 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800a078:	e024      	b.n	800a0c4 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 800a07a:	2b50      	cmp	r3, #80	; 0x50
 800a07c:	d018      	beq.n	800a0b0 <HAL_CAN_IRQHandler+0x316>
 800a07e:	2b60      	cmp	r3, #96	; 0x60
 800a080:	d01b      	beq.n	800a0ba <HAL_CAN_IRQHandler+0x320>
 800a082:	2b40      	cmp	r3, #64	; 0x40
 800a084:	d00f      	beq.n	800a0a6 <HAL_CAN_IRQHandler+0x30c>
            break;
 800a086:	e01d      	b.n	800a0c4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 800a088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a08a:	f043 0308 	orr.w	r3, r3, #8
 800a08e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a090:	e018      	b.n	800a0c4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 800a092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a094:	f043 0310 	orr.w	r3, r3, #16
 800a098:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a09a:	e013      	b.n	800a0c4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 800a09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a09e:	f043 0320 	orr.w	r3, r3, #32
 800a0a2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a0a4:	e00e      	b.n	800a0c4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 800a0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0ac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a0ae:	e009      	b.n	800a0c4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 800a0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0b6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a0b8:	e004      	b.n	800a0c4 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 800a0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a0c0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800a0c2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	699a      	ldr	r2, [r3, #24]
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800a0d2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	2204      	movs	r2, #4
 800a0da:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800a0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d008      	beq.n	800a0f4 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e8:	431a      	orrs	r2, r3
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f000 f854 	bl	800a19c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800a0f4:	bf00      	nop
 800a0f6:	3728      	adds	r7, #40	; 0x28
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}

0800a0fc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800a0fc:	b480      	push	{r7}
 800a0fe:	b083      	sub	sp, #12
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800a104:	bf00      	nop
 800a106:	370c      	adds	r7, #12
 800a108:	46bd      	mov	sp, r7
 800a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10e:	4770      	bx	lr

0800a110 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800a110:	b480      	push	{r7}
 800a112:	b083      	sub	sp, #12
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800a118:	bf00      	nop
 800a11a:	370c      	adds	r7, #12
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr

0800a124 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800a124:	b480      	push	{r7}
 800a126:	b083      	sub	sp, #12
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800a12c:	bf00      	nop
 800a12e:	370c      	adds	r7, #12
 800a130:	46bd      	mov	sp, r7
 800a132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a136:	4770      	bx	lr

0800a138 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800a138:	b480      	push	{r7}
 800a13a:	b083      	sub	sp, #12
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800a140:	bf00      	nop
 800a142:	370c      	adds	r7, #12
 800a144:	46bd      	mov	sp, r7
 800a146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14a:	4770      	bx	lr

0800a14c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b083      	sub	sp, #12
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800a154:	bf00      	nop
 800a156:	370c      	adds	r7, #12
 800a158:	46bd      	mov	sp, r7
 800a15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15e:	4770      	bx	lr

0800a160 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800a160:	b480      	push	{r7}
 800a162:	b083      	sub	sp, #12
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800a168:	bf00      	nop
 800a16a:	370c      	adds	r7, #12
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr

0800a174 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800a174:	b480      	push	{r7}
 800a176:	b083      	sub	sp, #12
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800a17c:	bf00      	nop
 800a17e:	370c      	adds	r7, #12
 800a180:	46bd      	mov	sp, r7
 800a182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a186:	4770      	bx	lr

0800a188 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800a188:	b480      	push	{r7}
 800a18a:	b083      	sub	sp, #12
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800a190:	bf00      	nop
 800a192:	370c      	adds	r7, #12
 800a194:	46bd      	mov	sp, r7
 800a196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19a:	4770      	bx	lr

0800a19c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800a19c:	b480      	push	{r7}
 800a19e:	b083      	sub	sp, #12
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800a1a4:	bf00      	nop
 800a1a6:	370c      	adds	r7, #12
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ae:	4770      	bx	lr

0800a1b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	b085      	sub	sp, #20
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f003 0307 	and.w	r3, r3, #7
 800a1be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a1c0:	4b0c      	ldr	r3, [pc, #48]	; (800a1f4 <__NVIC_SetPriorityGrouping+0x44>)
 800a1c2:	68db      	ldr	r3, [r3, #12]
 800a1c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a1c6:	68ba      	ldr	r2, [r7, #8]
 800a1c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800a1cc:	4013      	ands	r3, r2
 800a1ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a1d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800a1dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a1e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a1e2:	4a04      	ldr	r2, [pc, #16]	; (800a1f4 <__NVIC_SetPriorityGrouping+0x44>)
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	60d3      	str	r3, [r2, #12]
}
 800a1e8:	bf00      	nop
 800a1ea:	3714      	adds	r7, #20
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f2:	4770      	bx	lr
 800a1f4:	e000ed00 	.word	0xe000ed00

0800a1f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a1fc:	4b04      	ldr	r3, [pc, #16]	; (800a210 <__NVIC_GetPriorityGrouping+0x18>)
 800a1fe:	68db      	ldr	r3, [r3, #12]
 800a200:	0a1b      	lsrs	r3, r3, #8
 800a202:	f003 0307 	and.w	r3, r3, #7
}
 800a206:	4618      	mov	r0, r3
 800a208:	46bd      	mov	sp, r7
 800a20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20e:	4770      	bx	lr
 800a210:	e000ed00 	.word	0xe000ed00

0800a214 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a214:	b480      	push	{r7}
 800a216:	b083      	sub	sp, #12
 800a218:	af00      	add	r7, sp, #0
 800a21a:	4603      	mov	r3, r0
 800a21c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a21e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a222:	2b00      	cmp	r3, #0
 800a224:	db0b      	blt.n	800a23e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a226:	79fb      	ldrb	r3, [r7, #7]
 800a228:	f003 021f 	and.w	r2, r3, #31
 800a22c:	4907      	ldr	r1, [pc, #28]	; (800a24c <__NVIC_EnableIRQ+0x38>)
 800a22e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a232:	095b      	lsrs	r3, r3, #5
 800a234:	2001      	movs	r0, #1
 800a236:	fa00 f202 	lsl.w	r2, r0, r2
 800a23a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a23e:	bf00      	nop
 800a240:	370c      	adds	r7, #12
 800a242:	46bd      	mov	sp, r7
 800a244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a248:	4770      	bx	lr
 800a24a:	bf00      	nop
 800a24c:	e000e100 	.word	0xe000e100

0800a250 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a250:	b480      	push	{r7}
 800a252:	b083      	sub	sp, #12
 800a254:	af00      	add	r7, sp, #0
 800a256:	4603      	mov	r3, r0
 800a258:	6039      	str	r1, [r7, #0]
 800a25a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a25c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a260:	2b00      	cmp	r3, #0
 800a262:	db0a      	blt.n	800a27a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	b2da      	uxtb	r2, r3
 800a268:	490c      	ldr	r1, [pc, #48]	; (800a29c <__NVIC_SetPriority+0x4c>)
 800a26a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a26e:	0112      	lsls	r2, r2, #4
 800a270:	b2d2      	uxtb	r2, r2
 800a272:	440b      	add	r3, r1
 800a274:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a278:	e00a      	b.n	800a290 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	b2da      	uxtb	r2, r3
 800a27e:	4908      	ldr	r1, [pc, #32]	; (800a2a0 <__NVIC_SetPriority+0x50>)
 800a280:	79fb      	ldrb	r3, [r7, #7]
 800a282:	f003 030f 	and.w	r3, r3, #15
 800a286:	3b04      	subs	r3, #4
 800a288:	0112      	lsls	r2, r2, #4
 800a28a:	b2d2      	uxtb	r2, r2
 800a28c:	440b      	add	r3, r1
 800a28e:	761a      	strb	r2, [r3, #24]
}
 800a290:	bf00      	nop
 800a292:	370c      	adds	r7, #12
 800a294:	46bd      	mov	sp, r7
 800a296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29a:	4770      	bx	lr
 800a29c:	e000e100 	.word	0xe000e100
 800a2a0:	e000ed00 	.word	0xe000ed00

0800a2a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b089      	sub	sp, #36	; 0x24
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	60f8      	str	r0, [r7, #12]
 800a2ac:	60b9      	str	r1, [r7, #8]
 800a2ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	f003 0307 	and.w	r3, r3, #7
 800a2b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a2b8:	69fb      	ldr	r3, [r7, #28]
 800a2ba:	f1c3 0307 	rsb	r3, r3, #7
 800a2be:	2b04      	cmp	r3, #4
 800a2c0:	bf28      	it	cs
 800a2c2:	2304      	movcs	r3, #4
 800a2c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a2c6:	69fb      	ldr	r3, [r7, #28]
 800a2c8:	3304      	adds	r3, #4
 800a2ca:	2b06      	cmp	r3, #6
 800a2cc:	d902      	bls.n	800a2d4 <NVIC_EncodePriority+0x30>
 800a2ce:	69fb      	ldr	r3, [r7, #28]
 800a2d0:	3b03      	subs	r3, #3
 800a2d2:	e000      	b.n	800a2d6 <NVIC_EncodePriority+0x32>
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a2d8:	f04f 32ff 	mov.w	r2, #4294967295
 800a2dc:	69bb      	ldr	r3, [r7, #24]
 800a2de:	fa02 f303 	lsl.w	r3, r2, r3
 800a2e2:	43da      	mvns	r2, r3
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	401a      	ands	r2, r3
 800a2e8:	697b      	ldr	r3, [r7, #20]
 800a2ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a2ec:	f04f 31ff 	mov.w	r1, #4294967295
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	fa01 f303 	lsl.w	r3, r1, r3
 800a2f6:	43d9      	mvns	r1, r3
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a2fc:	4313      	orrs	r3, r2
         );
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	3724      	adds	r7, #36	; 0x24
 800a302:	46bd      	mov	sp, r7
 800a304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a308:	4770      	bx	lr
	...

0800a30c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b082      	sub	sp, #8
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	3b01      	subs	r3, #1
 800a318:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a31c:	d301      	bcc.n	800a322 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a31e:	2301      	movs	r3, #1
 800a320:	e00f      	b.n	800a342 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a322:	4a0a      	ldr	r2, [pc, #40]	; (800a34c <SysTick_Config+0x40>)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	3b01      	subs	r3, #1
 800a328:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a32a:	210f      	movs	r1, #15
 800a32c:	f04f 30ff 	mov.w	r0, #4294967295
 800a330:	f7ff ff8e 	bl	800a250 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a334:	4b05      	ldr	r3, [pc, #20]	; (800a34c <SysTick_Config+0x40>)
 800a336:	2200      	movs	r2, #0
 800a338:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a33a:	4b04      	ldr	r3, [pc, #16]	; (800a34c <SysTick_Config+0x40>)
 800a33c:	2207      	movs	r2, #7
 800a33e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a340:	2300      	movs	r3, #0
}
 800a342:	4618      	mov	r0, r3
 800a344:	3708      	adds	r7, #8
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}
 800a34a:	bf00      	nop
 800a34c:	e000e010 	.word	0xe000e010

0800a350 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b082      	sub	sp, #8
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f7ff ff29 	bl	800a1b0 <__NVIC_SetPriorityGrouping>
}
 800a35e:	bf00      	nop
 800a360:	3708      	adds	r7, #8
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}

0800a366 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a366:	b580      	push	{r7, lr}
 800a368:	b086      	sub	sp, #24
 800a36a:	af00      	add	r7, sp, #0
 800a36c:	4603      	mov	r3, r0
 800a36e:	60b9      	str	r1, [r7, #8]
 800a370:	607a      	str	r2, [r7, #4]
 800a372:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a374:	2300      	movs	r3, #0
 800a376:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a378:	f7ff ff3e 	bl	800a1f8 <__NVIC_GetPriorityGrouping>
 800a37c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a37e:	687a      	ldr	r2, [r7, #4]
 800a380:	68b9      	ldr	r1, [r7, #8]
 800a382:	6978      	ldr	r0, [r7, #20]
 800a384:	f7ff ff8e 	bl	800a2a4 <NVIC_EncodePriority>
 800a388:	4602      	mov	r2, r0
 800a38a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a38e:	4611      	mov	r1, r2
 800a390:	4618      	mov	r0, r3
 800a392:	f7ff ff5d 	bl	800a250 <__NVIC_SetPriority>
}
 800a396:	bf00      	nop
 800a398:	3718      	adds	r7, #24
 800a39a:	46bd      	mov	sp, r7
 800a39c:	bd80      	pop	{r7, pc}

0800a39e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a39e:	b580      	push	{r7, lr}
 800a3a0:	b082      	sub	sp, #8
 800a3a2:	af00      	add	r7, sp, #0
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a3a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f7ff ff31 	bl	800a214 <__NVIC_EnableIRQ>
}
 800a3b2:	bf00      	nop
 800a3b4:	3708      	adds	r7, #8
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}

0800a3ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a3ba:	b580      	push	{r7, lr}
 800a3bc:	b082      	sub	sp, #8
 800a3be:	af00      	add	r7, sp, #0
 800a3c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f7ff ffa2 	bl	800a30c <SysTick_Config>
 800a3c8:	4603      	mov	r3, r0
}
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	3708      	adds	r7, #8
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}
	...

0800a3d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b086      	sub	sp, #24
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a3e0:	f7fe fd50 	bl	8008e84 <HAL_GetTick>
 800a3e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d101      	bne.n	800a3f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a3ec:	2301      	movs	r3, #1
 800a3ee:	e099      	b.n	800a524 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2202      	movs	r2, #2
 800a3fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	681a      	ldr	r2, [r3, #0]
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f022 0201 	bic.w	r2, r2, #1
 800a40e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a410:	e00f      	b.n	800a432 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a412:	f7fe fd37 	bl	8008e84 <HAL_GetTick>
 800a416:	4602      	mov	r2, r0
 800a418:	693b      	ldr	r3, [r7, #16]
 800a41a:	1ad3      	subs	r3, r2, r3
 800a41c:	2b05      	cmp	r3, #5
 800a41e:	d908      	bls.n	800a432 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2220      	movs	r2, #32
 800a424:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2203      	movs	r2, #3
 800a42a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a42e:	2303      	movs	r3, #3
 800a430:	e078      	b.n	800a524 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f003 0301 	and.w	r3, r3, #1
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d1e8      	bne.n	800a412 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a448:	697a      	ldr	r2, [r7, #20]
 800a44a:	4b38      	ldr	r3, [pc, #224]	; (800a52c <HAL_DMA_Init+0x158>)
 800a44c:	4013      	ands	r3, r2
 800a44e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	685a      	ldr	r2, [r3, #4]
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	689b      	ldr	r3, [r3, #8]
 800a458:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a45e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	691b      	ldr	r3, [r3, #16]
 800a464:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a46a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	699b      	ldr	r3, [r3, #24]
 800a470:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a476:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	6a1b      	ldr	r3, [r3, #32]
 800a47c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a47e:	697a      	ldr	r2, [r7, #20]
 800a480:	4313      	orrs	r3, r2
 800a482:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a488:	2b04      	cmp	r3, #4
 800a48a:	d107      	bne.n	800a49c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a494:	4313      	orrs	r3, r2
 800a496:	697a      	ldr	r2, [r7, #20]
 800a498:	4313      	orrs	r3, r2
 800a49a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	697a      	ldr	r2, [r7, #20]
 800a4a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	695b      	ldr	r3, [r3, #20]
 800a4aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a4ac:	697b      	ldr	r3, [r7, #20]
 800a4ae:	f023 0307 	bic.w	r3, r3, #7
 800a4b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b8:	697a      	ldr	r2, [r7, #20]
 800a4ba:	4313      	orrs	r3, r2
 800a4bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c2:	2b04      	cmp	r3, #4
 800a4c4:	d117      	bne.n	800a4f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4ca:	697a      	ldr	r2, [r7, #20]
 800a4cc:	4313      	orrs	r3, r2
 800a4ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d00e      	beq.n	800a4f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f000 fa99 	bl	800aa10 <DMA_CheckFifoParam>
 800a4de:	4603      	mov	r3, r0
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d008      	beq.n	800a4f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	2240      	movs	r2, #64	; 0x40
 800a4e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2201      	movs	r2, #1
 800a4ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a4f2:	2301      	movs	r3, #1
 800a4f4:	e016      	b.n	800a524 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	697a      	ldr	r2, [r7, #20]
 800a4fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	f000 fa50 	bl	800a9a4 <DMA_CalcBaseAndBitshift>
 800a504:	4603      	mov	r3, r0
 800a506:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a50c:	223f      	movs	r2, #63	; 0x3f
 800a50e:	409a      	lsls	r2, r3
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2200      	movs	r2, #0
 800a518:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2201      	movs	r2, #1
 800a51e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a522:	2300      	movs	r3, #0
}
 800a524:	4618      	mov	r0, r3
 800a526:	3718      	adds	r7, #24
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}
 800a52c:	f010803f 	.word	0xf010803f

0800a530 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b086      	sub	sp, #24
 800a534:	af00      	add	r7, sp, #0
 800a536:	60f8      	str	r0, [r7, #12]
 800a538:	60b9      	str	r1, [r7, #8]
 800a53a:	607a      	str	r2, [r7, #4]
 800a53c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a53e:	2300      	movs	r3, #0
 800a540:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a546:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a54e:	2b01      	cmp	r3, #1
 800a550:	d101      	bne.n	800a556 <HAL_DMA_Start_IT+0x26>
 800a552:	2302      	movs	r3, #2
 800a554:	e048      	b.n	800a5e8 <HAL_DMA_Start_IT+0xb8>
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	2201      	movs	r2, #1
 800a55a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a564:	b2db      	uxtb	r3, r3
 800a566:	2b01      	cmp	r3, #1
 800a568:	d137      	bne.n	800a5da <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	2202      	movs	r2, #2
 800a56e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2200      	movs	r2, #0
 800a576:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	687a      	ldr	r2, [r7, #4]
 800a57c:	68b9      	ldr	r1, [r7, #8]
 800a57e:	68f8      	ldr	r0, [r7, #12]
 800a580:	f000 f9e2 	bl	800a948 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a588:	223f      	movs	r2, #63	; 0x3f
 800a58a:	409a      	lsls	r2, r3
 800a58c:	693b      	ldr	r3, [r7, #16]
 800a58e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	681a      	ldr	r2, [r3, #0]
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f042 0216 	orr.w	r2, r2, #22
 800a59e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	695a      	ldr	r2, [r3, #20]
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a5ae:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d007      	beq.n	800a5c8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	681a      	ldr	r2, [r3, #0]
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f042 0208 	orr.w	r2, r2, #8
 800a5c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	681a      	ldr	r2, [r3, #0]
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f042 0201 	orr.w	r2, r2, #1
 800a5d6:	601a      	str	r2, [r3, #0]
 800a5d8:	e005      	b.n	800a5e6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a5e2:	2302      	movs	r3, #2
 800a5e4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a5e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3718      	adds	r7, #24
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}

0800a5f0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b083      	sub	sp, #12
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a5fe:	b2db      	uxtb	r3, r3
 800a600:	2b02      	cmp	r3, #2
 800a602:	d004      	beq.n	800a60e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2280      	movs	r2, #128	; 0x80
 800a608:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a60a:	2301      	movs	r3, #1
 800a60c:	e00c      	b.n	800a628 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2205      	movs	r2, #5
 800a612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	681a      	ldr	r2, [r3, #0]
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	f022 0201 	bic.w	r2, r2, #1
 800a624:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a626:	2300      	movs	r3, #0
}
 800a628:	4618      	mov	r0, r3
 800a62a:	370c      	adds	r7, #12
 800a62c:	46bd      	mov	sp, r7
 800a62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a632:	4770      	bx	lr

0800a634 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b086      	sub	sp, #24
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a63c:	2300      	movs	r3, #0
 800a63e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a640:	4b92      	ldr	r3, [pc, #584]	; (800a88c <HAL_DMA_IRQHandler+0x258>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	4a92      	ldr	r2, [pc, #584]	; (800a890 <HAL_DMA_IRQHandler+0x25c>)
 800a646:	fba2 2303 	umull	r2, r3, r2, r3
 800a64a:	0a9b      	lsrs	r3, r3, #10
 800a64c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a652:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a654:	693b      	ldr	r3, [r7, #16]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a65e:	2208      	movs	r2, #8
 800a660:	409a      	lsls	r2, r3
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	4013      	ands	r3, r2
 800a666:	2b00      	cmp	r3, #0
 800a668:	d01a      	beq.n	800a6a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f003 0304 	and.w	r3, r3, #4
 800a674:	2b00      	cmp	r3, #0
 800a676:	d013      	beq.n	800a6a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	681a      	ldr	r2, [r3, #0]
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f022 0204 	bic.w	r2, r2, #4
 800a686:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a68c:	2208      	movs	r2, #8
 800a68e:	409a      	lsls	r2, r3
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a698:	f043 0201 	orr.w	r2, r3, #1
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6a4:	2201      	movs	r2, #1
 800a6a6:	409a      	lsls	r2, r3
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	4013      	ands	r3, r2
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d012      	beq.n	800a6d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	695b      	ldr	r3, [r3, #20]
 800a6b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d00b      	beq.n	800a6d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	409a      	lsls	r2, r3
 800a6c6:	693b      	ldr	r3, [r7, #16]
 800a6c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6ce:	f043 0202 	orr.w	r2, r3, #2
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6da:	2204      	movs	r2, #4
 800a6dc:	409a      	lsls	r2, r3
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	4013      	ands	r3, r2
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d012      	beq.n	800a70c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f003 0302 	and.w	r3, r3, #2
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d00b      	beq.n	800a70c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6f8:	2204      	movs	r2, #4
 800a6fa:	409a      	lsls	r2, r3
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a704:	f043 0204 	orr.w	r2, r3, #4
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a710:	2210      	movs	r2, #16
 800a712:	409a      	lsls	r2, r3
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	4013      	ands	r3, r2
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d043      	beq.n	800a7a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	f003 0308 	and.w	r3, r3, #8
 800a726:	2b00      	cmp	r3, #0
 800a728:	d03c      	beq.n	800a7a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a72e:	2210      	movs	r2, #16
 800a730:	409a      	lsls	r2, r3
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a740:	2b00      	cmp	r3, #0
 800a742:	d018      	beq.n	800a776 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d108      	bne.n	800a764 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a756:	2b00      	cmp	r3, #0
 800a758:	d024      	beq.n	800a7a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a75e:	6878      	ldr	r0, [r7, #4]
 800a760:	4798      	blx	r3
 800a762:	e01f      	b.n	800a7a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d01b      	beq.n	800a7a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	4798      	blx	r3
 800a774:	e016      	b.n	800a7a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a780:	2b00      	cmp	r3, #0
 800a782:	d107      	bne.n	800a794 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	681a      	ldr	r2, [r3, #0]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f022 0208 	bic.w	r2, r2, #8
 800a792:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d003      	beq.n	800a7a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7a8:	2220      	movs	r2, #32
 800a7aa:	409a      	lsls	r2, r3
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	4013      	ands	r3, r2
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	f000 808e 	beq.w	800a8d2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f003 0310 	and.w	r3, r3, #16
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	f000 8086 	beq.w	800a8d2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7ca:	2220      	movs	r2, #32
 800a7cc:	409a      	lsls	r2, r3
 800a7ce:	693b      	ldr	r3, [r7, #16]
 800a7d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a7d8:	b2db      	uxtb	r3, r3
 800a7da:	2b05      	cmp	r3, #5
 800a7dc:	d136      	bne.n	800a84c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	681a      	ldr	r2, [r3, #0]
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f022 0216 	bic.w	r2, r2, #22
 800a7ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	695a      	ldr	r2, [r3, #20]
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a7fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a802:	2b00      	cmp	r3, #0
 800a804:	d103      	bne.n	800a80e <HAL_DMA_IRQHandler+0x1da>
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d007      	beq.n	800a81e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	681a      	ldr	r2, [r3, #0]
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	f022 0208 	bic.w	r2, r2, #8
 800a81c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a822:	223f      	movs	r2, #63	; 0x3f
 800a824:	409a      	lsls	r2, r3
 800a826:	693b      	ldr	r3, [r7, #16]
 800a828:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2200      	movs	r2, #0
 800a82e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2201      	movs	r2, #1
 800a836:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d07d      	beq.n	800a93e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	4798      	blx	r3
        }
        return;
 800a84a:	e078      	b.n	800a93e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a856:	2b00      	cmp	r3, #0
 800a858:	d01c      	beq.n	800a894 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a864:	2b00      	cmp	r3, #0
 800a866:	d108      	bne.n	800a87a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d030      	beq.n	800a8d2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	4798      	blx	r3
 800a878:	e02b      	b.n	800a8d2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d027      	beq.n	800a8d2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a886:	6878      	ldr	r0, [r7, #4]
 800a888:	4798      	blx	r3
 800a88a:	e022      	b.n	800a8d2 <HAL_DMA_IRQHandler+0x29e>
 800a88c:	2000001c 	.word	0x2000001c
 800a890:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d10f      	bne.n	800a8c2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	681a      	ldr	r2, [r3, #0]
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f022 0210 	bic.w	r2, r2, #16
 800a8b0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2201      	movs	r2, #1
 800a8be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d003      	beq.n	800a8d2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d032      	beq.n	800a940 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a8de:	f003 0301 	and.w	r3, r3, #1
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d022      	beq.n	800a92c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2205      	movs	r2, #5
 800a8ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	681a      	ldr	r2, [r3, #0]
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f022 0201 	bic.w	r2, r2, #1
 800a8fc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a8fe:	68bb      	ldr	r3, [r7, #8]
 800a900:	3301      	adds	r3, #1
 800a902:	60bb      	str	r3, [r7, #8]
 800a904:	697a      	ldr	r2, [r7, #20]
 800a906:	429a      	cmp	r2, r3
 800a908:	d307      	bcc.n	800a91a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	f003 0301 	and.w	r3, r3, #1
 800a914:	2b00      	cmp	r3, #0
 800a916:	d1f2      	bne.n	800a8fe <HAL_DMA_IRQHandler+0x2ca>
 800a918:	e000      	b.n	800a91c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800a91a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2200      	movs	r2, #0
 800a920:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2201      	movs	r2, #1
 800a928:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a930:	2b00      	cmp	r3, #0
 800a932:	d005      	beq.n	800a940 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	4798      	blx	r3
 800a93c:	e000      	b.n	800a940 <HAL_DMA_IRQHandler+0x30c>
        return;
 800a93e:	bf00      	nop
    }
  }
}
 800a940:	3718      	adds	r7, #24
 800a942:	46bd      	mov	sp, r7
 800a944:	bd80      	pop	{r7, pc}
 800a946:	bf00      	nop

0800a948 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a948:	b480      	push	{r7}
 800a94a:	b085      	sub	sp, #20
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	60f8      	str	r0, [r7, #12]
 800a950:	60b9      	str	r1, [r7, #8]
 800a952:	607a      	str	r2, [r7, #4]
 800a954:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	681a      	ldr	r2, [r3, #0]
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a964:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	683a      	ldr	r2, [r7, #0]
 800a96c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	689b      	ldr	r3, [r3, #8]
 800a972:	2b40      	cmp	r3, #64	; 0x40
 800a974:	d108      	bne.n	800a988 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	687a      	ldr	r2, [r7, #4]
 800a97c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	68ba      	ldr	r2, [r7, #8]
 800a984:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a986:	e007      	b.n	800a998 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	68ba      	ldr	r2, [r7, #8]
 800a98e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	687a      	ldr	r2, [r7, #4]
 800a996:	60da      	str	r2, [r3, #12]
}
 800a998:	bf00      	nop
 800a99a:	3714      	adds	r7, #20
 800a99c:	46bd      	mov	sp, r7
 800a99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a2:	4770      	bx	lr

0800a9a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b085      	sub	sp, #20
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	b2db      	uxtb	r3, r3
 800a9b2:	3b10      	subs	r3, #16
 800a9b4:	4a14      	ldr	r2, [pc, #80]	; (800aa08 <DMA_CalcBaseAndBitshift+0x64>)
 800a9b6:	fba2 2303 	umull	r2, r3, r2, r3
 800a9ba:	091b      	lsrs	r3, r3, #4
 800a9bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a9be:	4a13      	ldr	r2, [pc, #76]	; (800aa0c <DMA_CalcBaseAndBitshift+0x68>)
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	4413      	add	r3, r2
 800a9c4:	781b      	ldrb	r3, [r3, #0]
 800a9c6:	461a      	mov	r2, r3
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	2b03      	cmp	r3, #3
 800a9d0:	d909      	bls.n	800a9e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a9da:	f023 0303 	bic.w	r3, r3, #3
 800a9de:	1d1a      	adds	r2, r3, #4
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	659a      	str	r2, [r3, #88]	; 0x58
 800a9e4:	e007      	b.n	800a9f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a9ee:	f023 0303 	bic.w	r3, r3, #3
 800a9f2:	687a      	ldr	r2, [r7, #4]
 800a9f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	3714      	adds	r7, #20
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa04:	4770      	bx	lr
 800aa06:	bf00      	nop
 800aa08:	aaaaaaab 	.word	0xaaaaaaab
 800aa0c:	08014ef0 	.word	0x08014ef0

0800aa10 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800aa10:	b480      	push	{r7}
 800aa12:	b085      	sub	sp, #20
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800aa18:	2300      	movs	r3, #0
 800aa1a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa20:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	699b      	ldr	r3, [r3, #24]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d11f      	bne.n	800aa6a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	2b03      	cmp	r3, #3
 800aa2e:	d855      	bhi.n	800aadc <DMA_CheckFifoParam+0xcc>
 800aa30:	a201      	add	r2, pc, #4	; (adr r2, 800aa38 <DMA_CheckFifoParam+0x28>)
 800aa32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa36:	bf00      	nop
 800aa38:	0800aa49 	.word	0x0800aa49
 800aa3c:	0800aa5b 	.word	0x0800aa5b
 800aa40:	0800aa49 	.word	0x0800aa49
 800aa44:	0800aadd 	.word	0x0800aadd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d045      	beq.n	800aae0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800aa54:	2301      	movs	r3, #1
 800aa56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aa58:	e042      	b.n	800aae0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa5e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800aa62:	d13f      	bne.n	800aae4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800aa64:	2301      	movs	r3, #1
 800aa66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aa68:	e03c      	b.n	800aae4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	699b      	ldr	r3, [r3, #24]
 800aa6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa72:	d121      	bne.n	800aab8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	2b03      	cmp	r3, #3
 800aa78:	d836      	bhi.n	800aae8 <DMA_CheckFifoParam+0xd8>
 800aa7a:	a201      	add	r2, pc, #4	; (adr r2, 800aa80 <DMA_CheckFifoParam+0x70>)
 800aa7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa80:	0800aa91 	.word	0x0800aa91
 800aa84:	0800aa97 	.word	0x0800aa97
 800aa88:	0800aa91 	.word	0x0800aa91
 800aa8c:	0800aaa9 	.word	0x0800aaa9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800aa90:	2301      	movs	r3, #1
 800aa92:	73fb      	strb	r3, [r7, #15]
      break;
 800aa94:	e02f      	b.n	800aaf6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d024      	beq.n	800aaec <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800aaa6:	e021      	b.n	800aaec <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800aab0:	d11e      	bne.n	800aaf0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800aab2:	2301      	movs	r3, #1
 800aab4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800aab6:	e01b      	b.n	800aaf0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	2b02      	cmp	r3, #2
 800aabc:	d902      	bls.n	800aac4 <DMA_CheckFifoParam+0xb4>
 800aabe:	2b03      	cmp	r3, #3
 800aac0:	d003      	beq.n	800aaca <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800aac2:	e018      	b.n	800aaf6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800aac4:	2301      	movs	r3, #1
 800aac6:	73fb      	strb	r3, [r7, #15]
      break;
 800aac8:	e015      	b.n	800aaf6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aace:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d00e      	beq.n	800aaf4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800aad6:	2301      	movs	r3, #1
 800aad8:	73fb      	strb	r3, [r7, #15]
      break;
 800aada:	e00b      	b.n	800aaf4 <DMA_CheckFifoParam+0xe4>
      break;
 800aadc:	bf00      	nop
 800aade:	e00a      	b.n	800aaf6 <DMA_CheckFifoParam+0xe6>
      break;
 800aae0:	bf00      	nop
 800aae2:	e008      	b.n	800aaf6 <DMA_CheckFifoParam+0xe6>
      break;
 800aae4:	bf00      	nop
 800aae6:	e006      	b.n	800aaf6 <DMA_CheckFifoParam+0xe6>
      break;
 800aae8:	bf00      	nop
 800aaea:	e004      	b.n	800aaf6 <DMA_CheckFifoParam+0xe6>
      break;
 800aaec:	bf00      	nop
 800aaee:	e002      	b.n	800aaf6 <DMA_CheckFifoParam+0xe6>
      break;   
 800aaf0:	bf00      	nop
 800aaf2:	e000      	b.n	800aaf6 <DMA_CheckFifoParam+0xe6>
      break;
 800aaf4:	bf00      	nop
    }
  } 
  
  return status; 
 800aaf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	3714      	adds	r7, #20
 800aafc:	46bd      	mov	sp, r7
 800aafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab02:	4770      	bx	lr

0800ab04 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b086      	sub	sp, #24
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	60f8      	str	r0, [r7, #12]
 800ab0c:	60b9      	str	r1, [r7, #8]
 800ab0e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800ab12:	2301      	movs	r3, #1
 800ab14:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800ab16:	4b23      	ldr	r3, [pc, #140]	; (800aba4 <HAL_FLASH_Program+0xa0>)
 800ab18:	7e1b      	ldrb	r3, [r3, #24]
 800ab1a:	2b01      	cmp	r3, #1
 800ab1c:	d101      	bne.n	800ab22 <HAL_FLASH_Program+0x1e>
 800ab1e:	2302      	movs	r3, #2
 800ab20:	e03b      	b.n	800ab9a <HAL_FLASH_Program+0x96>
 800ab22:	4b20      	ldr	r3, [pc, #128]	; (800aba4 <HAL_FLASH_Program+0xa0>)
 800ab24:	2201      	movs	r2, #1
 800ab26:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ab28:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ab2c:	f000 f870 	bl	800ac10 <FLASH_WaitForLastOperation>
 800ab30:	4603      	mov	r3, r0
 800ab32:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800ab34:	7dfb      	ldrb	r3, [r7, #23]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d12b      	bne.n	800ab92 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d105      	bne.n	800ab4c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800ab40:	783b      	ldrb	r3, [r7, #0]
 800ab42:	4619      	mov	r1, r3
 800ab44:	68b8      	ldr	r0, [r7, #8]
 800ab46:	f000 f917 	bl	800ad78 <FLASH_Program_Byte>
 800ab4a:	e016      	b.n	800ab7a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	2b01      	cmp	r3, #1
 800ab50:	d105      	bne.n	800ab5e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800ab52:	883b      	ldrh	r3, [r7, #0]
 800ab54:	4619      	mov	r1, r3
 800ab56:	68b8      	ldr	r0, [r7, #8]
 800ab58:	f000 f8ea 	bl	800ad30 <FLASH_Program_HalfWord>
 800ab5c:	e00d      	b.n	800ab7a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	2b02      	cmp	r3, #2
 800ab62:	d105      	bne.n	800ab70 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	4619      	mov	r1, r3
 800ab68:	68b8      	ldr	r0, [r7, #8]
 800ab6a:	f000 f8bf 	bl	800acec <FLASH_Program_Word>
 800ab6e:	e004      	b.n	800ab7a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800ab70:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab74:	68b8      	ldr	r0, [r7, #8]
 800ab76:	f000 f88b 	bl	800ac90 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ab7a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ab7e:	f000 f847 	bl	800ac10 <FLASH_WaitForLastOperation>
 800ab82:	4603      	mov	r3, r0
 800ab84:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800ab86:	4b08      	ldr	r3, [pc, #32]	; (800aba8 <HAL_FLASH_Program+0xa4>)
 800ab88:	691b      	ldr	r3, [r3, #16]
 800ab8a:	4a07      	ldr	r2, [pc, #28]	; (800aba8 <HAL_FLASH_Program+0xa4>)
 800ab8c:	f023 0301 	bic.w	r3, r3, #1
 800ab90:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800ab92:	4b04      	ldr	r3, [pc, #16]	; (800aba4 <HAL_FLASH_Program+0xa0>)
 800ab94:	2200      	movs	r2, #0
 800ab96:	761a      	strb	r2, [r3, #24]
  
  return status;
 800ab98:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3718      	adds	r7, #24
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	bd80      	pop	{r7, pc}
 800aba2:	bf00      	nop
 800aba4:	200042d4 	.word	0x200042d4
 800aba8:	40023c00 	.word	0x40023c00

0800abac <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800abac:	b480      	push	{r7}
 800abae:	b083      	sub	sp, #12
 800abb0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800abb2:	2300      	movs	r3, #0
 800abb4:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800abb6:	4b0b      	ldr	r3, [pc, #44]	; (800abe4 <HAL_FLASH_Unlock+0x38>)
 800abb8:	691b      	ldr	r3, [r3, #16]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	da0b      	bge.n	800abd6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800abbe:	4b09      	ldr	r3, [pc, #36]	; (800abe4 <HAL_FLASH_Unlock+0x38>)
 800abc0:	4a09      	ldr	r2, [pc, #36]	; (800abe8 <HAL_FLASH_Unlock+0x3c>)
 800abc2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800abc4:	4b07      	ldr	r3, [pc, #28]	; (800abe4 <HAL_FLASH_Unlock+0x38>)
 800abc6:	4a09      	ldr	r2, [pc, #36]	; (800abec <HAL_FLASH_Unlock+0x40>)
 800abc8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800abca:	4b06      	ldr	r3, [pc, #24]	; (800abe4 <HAL_FLASH_Unlock+0x38>)
 800abcc:	691b      	ldr	r3, [r3, #16]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	da01      	bge.n	800abd6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800abd2:	2301      	movs	r3, #1
 800abd4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800abd6:	79fb      	ldrb	r3, [r7, #7]
}
 800abd8:	4618      	mov	r0, r3
 800abda:	370c      	adds	r7, #12
 800abdc:	46bd      	mov	sp, r7
 800abde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe2:	4770      	bx	lr
 800abe4:	40023c00 	.word	0x40023c00
 800abe8:	45670123 	.word	0x45670123
 800abec:	cdef89ab 	.word	0xcdef89ab

0800abf0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800abf0:	b480      	push	{r7}
 800abf2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800abf4:	4b05      	ldr	r3, [pc, #20]	; (800ac0c <HAL_FLASH_Lock+0x1c>)
 800abf6:	691b      	ldr	r3, [r3, #16]
 800abf8:	4a04      	ldr	r2, [pc, #16]	; (800ac0c <HAL_FLASH_Lock+0x1c>)
 800abfa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800abfe:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800ac00:	2300      	movs	r3, #0
}
 800ac02:	4618      	mov	r0, r3
 800ac04:	46bd      	mov	sp, r7
 800ac06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0a:	4770      	bx	lr
 800ac0c:	40023c00 	.word	0x40023c00

0800ac10 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800ac10:	b580      	push	{r7, lr}
 800ac12:	b084      	sub	sp, #16
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800ac1c:	4b1a      	ldr	r3, [pc, #104]	; (800ac88 <FLASH_WaitForLastOperation+0x78>)
 800ac1e:	2200      	movs	r2, #0
 800ac20:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800ac22:	f7fe f92f 	bl	8008e84 <HAL_GetTick>
 800ac26:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800ac28:	e010      	b.n	800ac4c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac30:	d00c      	beq.n	800ac4c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d007      	beq.n	800ac48 <FLASH_WaitForLastOperation+0x38>
 800ac38:	f7fe f924 	bl	8008e84 <HAL_GetTick>
 800ac3c:	4602      	mov	r2, r0
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	1ad3      	subs	r3, r2, r3
 800ac42:	687a      	ldr	r2, [r7, #4]
 800ac44:	429a      	cmp	r2, r3
 800ac46:	d201      	bcs.n	800ac4c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800ac48:	2303      	movs	r3, #3
 800ac4a:	e019      	b.n	800ac80 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800ac4c:	4b0f      	ldr	r3, [pc, #60]	; (800ac8c <FLASH_WaitForLastOperation+0x7c>)
 800ac4e:	68db      	ldr	r3, [r3, #12]
 800ac50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d1e8      	bne.n	800ac2a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800ac58:	4b0c      	ldr	r3, [pc, #48]	; (800ac8c <FLASH_WaitForLastOperation+0x7c>)
 800ac5a:	68db      	ldr	r3, [r3, #12]
 800ac5c:	f003 0301 	and.w	r3, r3, #1
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d002      	beq.n	800ac6a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800ac64:	4b09      	ldr	r3, [pc, #36]	; (800ac8c <FLASH_WaitForLastOperation+0x7c>)
 800ac66:	2201      	movs	r2, #1
 800ac68:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800ac6a:	4b08      	ldr	r3, [pc, #32]	; (800ac8c <FLASH_WaitForLastOperation+0x7c>)
 800ac6c:	68db      	ldr	r3, [r3, #12]
 800ac6e:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d003      	beq.n	800ac7e <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800ac76:	f000 f8a1 	bl	800adbc <FLASH_SetErrorCode>
    return HAL_ERROR;
 800ac7a:	2301      	movs	r3, #1
 800ac7c:	e000      	b.n	800ac80 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800ac7e:	2300      	movs	r3, #0
  
}  
 800ac80:	4618      	mov	r0, r3
 800ac82:	3710      	adds	r7, #16
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}
 800ac88:	200042d4 	.word	0x200042d4
 800ac8c:	40023c00 	.word	0x40023c00

0800ac90 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800ac90:	b490      	push	{r4, r7}
 800ac92:	b084      	sub	sp, #16
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	60f8      	str	r0, [r7, #12]
 800ac98:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800ac9c:	4b12      	ldr	r3, [pc, #72]	; (800ace8 <FLASH_Program_DoubleWord+0x58>)
 800ac9e:	691b      	ldr	r3, [r3, #16]
 800aca0:	4a11      	ldr	r2, [pc, #68]	; (800ace8 <FLASH_Program_DoubleWord+0x58>)
 800aca2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aca6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800aca8:	4b0f      	ldr	r3, [pc, #60]	; (800ace8 <FLASH_Program_DoubleWord+0x58>)
 800acaa:	691b      	ldr	r3, [r3, #16]
 800acac:	4a0e      	ldr	r2, [pc, #56]	; (800ace8 <FLASH_Program_DoubleWord+0x58>)
 800acae:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800acb2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800acb4:	4b0c      	ldr	r3, [pc, #48]	; (800ace8 <FLASH_Program_DoubleWord+0x58>)
 800acb6:	691b      	ldr	r3, [r3, #16]
 800acb8:	4a0b      	ldr	r2, [pc, #44]	; (800ace8 <FLASH_Program_DoubleWord+0x58>)
 800acba:	f043 0301 	orr.w	r3, r3, #1
 800acbe:	6113      	str	r3, [r2, #16]

  /* Program the double-word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	683a      	ldr	r2, [r7, #0]
 800acc4:	601a      	str	r2, [r3, #0]
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800acc6:	e9d7 1200 	ldrd	r1, r2, [r7]
 800acca:	f04f 0300 	mov.w	r3, #0
 800acce:	f04f 0400 	mov.w	r4, #0
 800acd2:	0013      	movs	r3, r2
 800acd4:	2400      	movs	r4, #0
 800acd6:	68fa      	ldr	r2, [r7, #12]
 800acd8:	3204      	adds	r2, #4
 800acda:	6013      	str	r3, [r2, #0]
}
 800acdc:	bf00      	nop
 800acde:	3710      	adds	r7, #16
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bc90      	pop	{r4, r7}
 800ace4:	4770      	bx	lr
 800ace6:	bf00      	nop
 800ace8:	40023c00 	.word	0x40023c00

0800acec <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800acec:	b480      	push	{r7}
 800acee:	b083      	sub	sp, #12
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800acf6:	4b0d      	ldr	r3, [pc, #52]	; (800ad2c <FLASH_Program_Word+0x40>)
 800acf8:	691b      	ldr	r3, [r3, #16]
 800acfa:	4a0c      	ldr	r2, [pc, #48]	; (800ad2c <FLASH_Program_Word+0x40>)
 800acfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad00:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800ad02:	4b0a      	ldr	r3, [pc, #40]	; (800ad2c <FLASH_Program_Word+0x40>)
 800ad04:	691b      	ldr	r3, [r3, #16]
 800ad06:	4a09      	ldr	r2, [pc, #36]	; (800ad2c <FLASH_Program_Word+0x40>)
 800ad08:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ad0c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800ad0e:	4b07      	ldr	r3, [pc, #28]	; (800ad2c <FLASH_Program_Word+0x40>)
 800ad10:	691b      	ldr	r3, [r3, #16]
 800ad12:	4a06      	ldr	r2, [pc, #24]	; (800ad2c <FLASH_Program_Word+0x40>)
 800ad14:	f043 0301 	orr.w	r3, r3, #1
 800ad18:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	683a      	ldr	r2, [r7, #0]
 800ad1e:	601a      	str	r2, [r3, #0]
}
 800ad20:	bf00      	nop
 800ad22:	370c      	adds	r7, #12
 800ad24:	46bd      	mov	sp, r7
 800ad26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2a:	4770      	bx	lr
 800ad2c:	40023c00 	.word	0x40023c00

0800ad30 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800ad30:	b480      	push	{r7}
 800ad32:	b083      	sub	sp, #12
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
 800ad38:	460b      	mov	r3, r1
 800ad3a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800ad3c:	4b0d      	ldr	r3, [pc, #52]	; (800ad74 <FLASH_Program_HalfWord+0x44>)
 800ad3e:	691b      	ldr	r3, [r3, #16]
 800ad40:	4a0c      	ldr	r2, [pc, #48]	; (800ad74 <FLASH_Program_HalfWord+0x44>)
 800ad42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad46:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800ad48:	4b0a      	ldr	r3, [pc, #40]	; (800ad74 <FLASH_Program_HalfWord+0x44>)
 800ad4a:	691b      	ldr	r3, [r3, #16]
 800ad4c:	4a09      	ldr	r2, [pc, #36]	; (800ad74 <FLASH_Program_HalfWord+0x44>)
 800ad4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ad52:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800ad54:	4b07      	ldr	r3, [pc, #28]	; (800ad74 <FLASH_Program_HalfWord+0x44>)
 800ad56:	691b      	ldr	r3, [r3, #16]
 800ad58:	4a06      	ldr	r2, [pc, #24]	; (800ad74 <FLASH_Program_HalfWord+0x44>)
 800ad5a:	f043 0301 	orr.w	r3, r3, #1
 800ad5e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	887a      	ldrh	r2, [r7, #2]
 800ad64:	801a      	strh	r2, [r3, #0]
}
 800ad66:	bf00      	nop
 800ad68:	370c      	adds	r7, #12
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad70:	4770      	bx	lr
 800ad72:	bf00      	nop
 800ad74:	40023c00 	.word	0x40023c00

0800ad78 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800ad78:	b480      	push	{r7}
 800ad7a:	b083      	sub	sp, #12
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
 800ad80:	460b      	mov	r3, r1
 800ad82:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800ad84:	4b0c      	ldr	r3, [pc, #48]	; (800adb8 <FLASH_Program_Byte+0x40>)
 800ad86:	691b      	ldr	r3, [r3, #16]
 800ad88:	4a0b      	ldr	r2, [pc, #44]	; (800adb8 <FLASH_Program_Byte+0x40>)
 800ad8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad8e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800ad90:	4b09      	ldr	r3, [pc, #36]	; (800adb8 <FLASH_Program_Byte+0x40>)
 800ad92:	4a09      	ldr	r2, [pc, #36]	; (800adb8 <FLASH_Program_Byte+0x40>)
 800ad94:	691b      	ldr	r3, [r3, #16]
 800ad96:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800ad98:	4b07      	ldr	r3, [pc, #28]	; (800adb8 <FLASH_Program_Byte+0x40>)
 800ad9a:	691b      	ldr	r3, [r3, #16]
 800ad9c:	4a06      	ldr	r2, [pc, #24]	; (800adb8 <FLASH_Program_Byte+0x40>)
 800ad9e:	f043 0301 	orr.w	r3, r3, #1
 800ada2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	78fa      	ldrb	r2, [r7, #3]
 800ada8:	701a      	strb	r2, [r3, #0]
}
 800adaa:	bf00      	nop
 800adac:	370c      	adds	r7, #12
 800adae:	46bd      	mov	sp, r7
 800adb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb4:	4770      	bx	lr
 800adb6:	bf00      	nop
 800adb8:	40023c00 	.word	0x40023c00

0800adbc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800adbc:	b480      	push	{r7}
 800adbe:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800adc0:	4b2f      	ldr	r3, [pc, #188]	; (800ae80 <FLASH_SetErrorCode+0xc4>)
 800adc2:	68db      	ldr	r3, [r3, #12]
 800adc4:	f003 0310 	and.w	r3, r3, #16
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d008      	beq.n	800adde <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800adcc:	4b2d      	ldr	r3, [pc, #180]	; (800ae84 <FLASH_SetErrorCode+0xc8>)
 800adce:	69db      	ldr	r3, [r3, #28]
 800add0:	f043 0310 	orr.w	r3, r3, #16
 800add4:	4a2b      	ldr	r2, [pc, #172]	; (800ae84 <FLASH_SetErrorCode+0xc8>)
 800add6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800add8:	4b29      	ldr	r3, [pc, #164]	; (800ae80 <FLASH_SetErrorCode+0xc4>)
 800adda:	2210      	movs	r2, #16
 800addc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800adde:	4b28      	ldr	r3, [pc, #160]	; (800ae80 <FLASH_SetErrorCode+0xc4>)
 800ade0:	68db      	ldr	r3, [r3, #12]
 800ade2:	f003 0320 	and.w	r3, r3, #32
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d008      	beq.n	800adfc <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800adea:	4b26      	ldr	r3, [pc, #152]	; (800ae84 <FLASH_SetErrorCode+0xc8>)
 800adec:	69db      	ldr	r3, [r3, #28]
 800adee:	f043 0308 	orr.w	r3, r3, #8
 800adf2:	4a24      	ldr	r2, [pc, #144]	; (800ae84 <FLASH_SetErrorCode+0xc8>)
 800adf4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800adf6:	4b22      	ldr	r3, [pc, #136]	; (800ae80 <FLASH_SetErrorCode+0xc4>)
 800adf8:	2220      	movs	r2, #32
 800adfa:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800adfc:	4b20      	ldr	r3, [pc, #128]	; (800ae80 <FLASH_SetErrorCode+0xc4>)
 800adfe:	68db      	ldr	r3, [r3, #12]
 800ae00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d008      	beq.n	800ae1a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800ae08:	4b1e      	ldr	r3, [pc, #120]	; (800ae84 <FLASH_SetErrorCode+0xc8>)
 800ae0a:	69db      	ldr	r3, [r3, #28]
 800ae0c:	f043 0304 	orr.w	r3, r3, #4
 800ae10:	4a1c      	ldr	r2, [pc, #112]	; (800ae84 <FLASH_SetErrorCode+0xc8>)
 800ae12:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800ae14:	4b1a      	ldr	r3, [pc, #104]	; (800ae80 <FLASH_SetErrorCode+0xc4>)
 800ae16:	2240      	movs	r2, #64	; 0x40
 800ae18:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800ae1a:	4b19      	ldr	r3, [pc, #100]	; (800ae80 <FLASH_SetErrorCode+0xc4>)
 800ae1c:	68db      	ldr	r3, [r3, #12]
 800ae1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d008      	beq.n	800ae38 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800ae26:	4b17      	ldr	r3, [pc, #92]	; (800ae84 <FLASH_SetErrorCode+0xc8>)
 800ae28:	69db      	ldr	r3, [r3, #28]
 800ae2a:	f043 0302 	orr.w	r3, r3, #2
 800ae2e:	4a15      	ldr	r2, [pc, #84]	; (800ae84 <FLASH_SetErrorCode+0xc8>)
 800ae30:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800ae32:	4b13      	ldr	r3, [pc, #76]	; (800ae80 <FLASH_SetErrorCode+0xc4>)
 800ae34:	2280      	movs	r2, #128	; 0x80
 800ae36:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800ae38:	4b11      	ldr	r3, [pc, #68]	; (800ae80 <FLASH_SetErrorCode+0xc4>)
 800ae3a:	68db      	ldr	r3, [r3, #12]
 800ae3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d009      	beq.n	800ae58 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800ae44:	4b0f      	ldr	r3, [pc, #60]	; (800ae84 <FLASH_SetErrorCode+0xc8>)
 800ae46:	69db      	ldr	r3, [r3, #28]
 800ae48:	f043 0301 	orr.w	r3, r3, #1
 800ae4c:	4a0d      	ldr	r2, [pc, #52]	; (800ae84 <FLASH_SetErrorCode+0xc8>)
 800ae4e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800ae50:	4b0b      	ldr	r3, [pc, #44]	; (800ae80 <FLASH_SetErrorCode+0xc4>)
 800ae52:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ae56:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800ae58:	4b09      	ldr	r3, [pc, #36]	; (800ae80 <FLASH_SetErrorCode+0xc4>)
 800ae5a:	68db      	ldr	r3, [r3, #12]
 800ae5c:	f003 0302 	and.w	r3, r3, #2
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d008      	beq.n	800ae76 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800ae64:	4b07      	ldr	r3, [pc, #28]	; (800ae84 <FLASH_SetErrorCode+0xc8>)
 800ae66:	69db      	ldr	r3, [r3, #28]
 800ae68:	f043 0320 	orr.w	r3, r3, #32
 800ae6c:	4a05      	ldr	r2, [pc, #20]	; (800ae84 <FLASH_SetErrorCode+0xc8>)
 800ae6e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800ae70:	4b03      	ldr	r3, [pc, #12]	; (800ae80 <FLASH_SetErrorCode+0xc4>)
 800ae72:	2202      	movs	r2, #2
 800ae74:	60da      	str	r2, [r3, #12]
  }
}
 800ae76:	bf00      	nop
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7e:	4770      	bx	lr
 800ae80:	40023c00 	.word	0x40023c00
 800ae84:	200042d4 	.word	0x200042d4

0800ae88 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b084      	sub	sp, #16
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
 800ae90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800ae92:	2301      	movs	r3, #1
 800ae94:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800ae96:	2300      	movs	r3, #0
 800ae98:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800ae9a:	4b31      	ldr	r3, [pc, #196]	; (800af60 <HAL_FLASHEx_Erase+0xd8>)
 800ae9c:	7e1b      	ldrb	r3, [r3, #24]
 800ae9e:	2b01      	cmp	r3, #1
 800aea0:	d101      	bne.n	800aea6 <HAL_FLASHEx_Erase+0x1e>
 800aea2:	2302      	movs	r3, #2
 800aea4:	e058      	b.n	800af58 <HAL_FLASHEx_Erase+0xd0>
 800aea6:	4b2e      	ldr	r3, [pc, #184]	; (800af60 <HAL_FLASHEx_Erase+0xd8>)
 800aea8:	2201      	movs	r2, #1
 800aeaa:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800aeac:	f24c 3050 	movw	r0, #50000	; 0xc350
 800aeb0:	f7ff feae 	bl	800ac10 <FLASH_WaitForLastOperation>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800aeb8:	7bfb      	ldrb	r3, [r7, #15]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d148      	bne.n	800af50 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	f04f 32ff 	mov.w	r2, #4294967295
 800aec4:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	2b01      	cmp	r3, #1
 800aecc:	d115      	bne.n	800aefa <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	691b      	ldr	r3, [r3, #16]
 800aed2:	b2da      	uxtb	r2, r3
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	685b      	ldr	r3, [r3, #4]
 800aed8:	4619      	mov	r1, r3
 800aeda:	4610      	mov	r0, r2
 800aedc:	f000 f844 	bl	800af68 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800aee0:	f24c 3050 	movw	r0, #50000	; 0xc350
 800aee4:	f7ff fe94 	bl	800ac10 <FLASH_WaitForLastOperation>
 800aee8:	4603      	mov	r3, r0
 800aeea:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800aeec:	4b1d      	ldr	r3, [pc, #116]	; (800af64 <HAL_FLASHEx_Erase+0xdc>)
 800aeee:	691b      	ldr	r3, [r3, #16]
 800aef0:	4a1c      	ldr	r2, [pc, #112]	; (800af64 <HAL_FLASHEx_Erase+0xdc>)
 800aef2:	f023 0304 	bic.w	r3, r3, #4
 800aef6:	6113      	str	r3, [r2, #16]
 800aef8:	e028      	b.n	800af4c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	689b      	ldr	r3, [r3, #8]
 800aefe:	60bb      	str	r3, [r7, #8]
 800af00:	e01c      	b.n	800af3c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	691b      	ldr	r3, [r3, #16]
 800af06:	b2db      	uxtb	r3, r3
 800af08:	4619      	mov	r1, r3
 800af0a:	68b8      	ldr	r0, [r7, #8]
 800af0c:	f000 f850 	bl	800afb0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800af10:	f24c 3050 	movw	r0, #50000	; 0xc350
 800af14:	f7ff fe7c 	bl	800ac10 <FLASH_WaitForLastOperation>
 800af18:	4603      	mov	r3, r0
 800af1a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800af1c:	4b11      	ldr	r3, [pc, #68]	; (800af64 <HAL_FLASHEx_Erase+0xdc>)
 800af1e:	691b      	ldr	r3, [r3, #16]
 800af20:	4a10      	ldr	r2, [pc, #64]	; (800af64 <HAL_FLASHEx_Erase+0xdc>)
 800af22:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800af26:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 800af28:	7bfb      	ldrb	r3, [r7, #15]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d003      	beq.n	800af36 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	68ba      	ldr	r2, [r7, #8]
 800af32:	601a      	str	r2, [r3, #0]
          break;
 800af34:	e00a      	b.n	800af4c <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	3301      	adds	r3, #1
 800af3a:	60bb      	str	r3, [r7, #8]
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	68da      	ldr	r2, [r3, #12]
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	689b      	ldr	r3, [r3, #8]
 800af44:	4413      	add	r3, r2
 800af46:	68ba      	ldr	r2, [r7, #8]
 800af48:	429a      	cmp	r2, r3
 800af4a:	d3da      	bcc.n	800af02 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 800af4c:	f000 f878 	bl	800b040 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800af50:	4b03      	ldr	r3, [pc, #12]	; (800af60 <HAL_FLASHEx_Erase+0xd8>)
 800af52:	2200      	movs	r2, #0
 800af54:	761a      	strb	r2, [r3, #24]

  return status;
 800af56:	7bfb      	ldrb	r3, [r7, #15]
}
 800af58:	4618      	mov	r0, r3
 800af5a:	3710      	adds	r7, #16
 800af5c:	46bd      	mov	sp, r7
 800af5e:	bd80      	pop	{r7, pc}
 800af60:	200042d4 	.word	0x200042d4
 800af64:	40023c00 	.word	0x40023c00

0800af68 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800af68:	b480      	push	{r7}
 800af6a:	b083      	sub	sp, #12
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	4603      	mov	r3, r0
 800af70:	6039      	str	r1, [r7, #0]
 800af72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800af74:	4b0d      	ldr	r3, [pc, #52]	; (800afac <FLASH_MassErase+0x44>)
 800af76:	691b      	ldr	r3, [r3, #16]
 800af78:	4a0c      	ldr	r2, [pc, #48]	; (800afac <FLASH_MassErase+0x44>)
 800af7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af7e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800af80:	4b0a      	ldr	r3, [pc, #40]	; (800afac <FLASH_MassErase+0x44>)
 800af82:	691b      	ldr	r3, [r3, #16]
 800af84:	4a09      	ldr	r2, [pc, #36]	; (800afac <FLASH_MassErase+0x44>)
 800af86:	f043 0304 	orr.w	r3, r3, #4
 800af8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 800af8c:	4b07      	ldr	r3, [pc, #28]	; (800afac <FLASH_MassErase+0x44>)
 800af8e:	691a      	ldr	r2, [r3, #16]
 800af90:	79fb      	ldrb	r3, [r7, #7]
 800af92:	021b      	lsls	r3, r3, #8
 800af94:	4313      	orrs	r3, r2
 800af96:	4a05      	ldr	r2, [pc, #20]	; (800afac <FLASH_MassErase+0x44>)
 800af98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af9c:	6113      	str	r3, [r2, #16]
}
 800af9e:	bf00      	nop
 800afa0:	370c      	adds	r7, #12
 800afa2:	46bd      	mov	sp, r7
 800afa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa8:	4770      	bx	lr
 800afaa:	bf00      	nop
 800afac:	40023c00 	.word	0x40023c00

0800afb0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800afb0:	b480      	push	{r7}
 800afb2:	b085      	sub	sp, #20
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
 800afb8:	460b      	mov	r3, r1
 800afba:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800afbc:	2300      	movs	r3, #0
 800afbe:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800afc0:	78fb      	ldrb	r3, [r7, #3]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d102      	bne.n	800afcc <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800afc6:	2300      	movs	r3, #0
 800afc8:	60fb      	str	r3, [r7, #12]
 800afca:	e010      	b.n	800afee <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800afcc:	78fb      	ldrb	r3, [r7, #3]
 800afce:	2b01      	cmp	r3, #1
 800afd0:	d103      	bne.n	800afda <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800afd2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800afd6:	60fb      	str	r3, [r7, #12]
 800afd8:	e009      	b.n	800afee <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800afda:	78fb      	ldrb	r3, [r7, #3]
 800afdc:	2b02      	cmp	r3, #2
 800afde:	d103      	bne.n	800afe8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800afe0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800afe4:	60fb      	str	r3, [r7, #12]
 800afe6:	e002      	b.n	800afee <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800afe8:	f44f 7340 	mov.w	r3, #768	; 0x300
 800afec:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800afee:	4b13      	ldr	r3, [pc, #76]	; (800b03c <FLASH_Erase_Sector+0x8c>)
 800aff0:	691b      	ldr	r3, [r3, #16]
 800aff2:	4a12      	ldr	r2, [pc, #72]	; (800b03c <FLASH_Erase_Sector+0x8c>)
 800aff4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aff8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800affa:	4b10      	ldr	r3, [pc, #64]	; (800b03c <FLASH_Erase_Sector+0x8c>)
 800affc:	691a      	ldr	r2, [r3, #16]
 800affe:	490f      	ldr	r1, [pc, #60]	; (800b03c <FLASH_Erase_Sector+0x8c>)
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	4313      	orrs	r3, r2
 800b004:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800b006:	4b0d      	ldr	r3, [pc, #52]	; (800b03c <FLASH_Erase_Sector+0x8c>)
 800b008:	691b      	ldr	r3, [r3, #16]
 800b00a:	4a0c      	ldr	r2, [pc, #48]	; (800b03c <FLASH_Erase_Sector+0x8c>)
 800b00c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800b010:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800b012:	4b0a      	ldr	r3, [pc, #40]	; (800b03c <FLASH_Erase_Sector+0x8c>)
 800b014:	691a      	ldr	r2, [r3, #16]
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	00db      	lsls	r3, r3, #3
 800b01a:	4313      	orrs	r3, r2
 800b01c:	4a07      	ldr	r2, [pc, #28]	; (800b03c <FLASH_Erase_Sector+0x8c>)
 800b01e:	f043 0302 	orr.w	r3, r3, #2
 800b022:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800b024:	4b05      	ldr	r3, [pc, #20]	; (800b03c <FLASH_Erase_Sector+0x8c>)
 800b026:	691b      	ldr	r3, [r3, #16]
 800b028:	4a04      	ldr	r2, [pc, #16]	; (800b03c <FLASH_Erase_Sector+0x8c>)
 800b02a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b02e:	6113      	str	r3, [r2, #16]
}
 800b030:	bf00      	nop
 800b032:	3714      	adds	r7, #20
 800b034:	46bd      	mov	sp, r7
 800b036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b03a:	4770      	bx	lr
 800b03c:	40023c00 	.word	0x40023c00

0800b040 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800b040:	b480      	push	{r7}
 800b042:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 800b044:	4b20      	ldr	r3, [pc, #128]	; (800b0c8 <FLASH_FlushCaches+0x88>)
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d017      	beq.n	800b080 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800b050:	4b1d      	ldr	r3, [pc, #116]	; (800b0c8 <FLASH_FlushCaches+0x88>)
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	4a1c      	ldr	r2, [pc, #112]	; (800b0c8 <FLASH_FlushCaches+0x88>)
 800b056:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b05a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800b05c:	4b1a      	ldr	r3, [pc, #104]	; (800b0c8 <FLASH_FlushCaches+0x88>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	4a19      	ldr	r2, [pc, #100]	; (800b0c8 <FLASH_FlushCaches+0x88>)
 800b062:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b066:	6013      	str	r3, [r2, #0]
 800b068:	4b17      	ldr	r3, [pc, #92]	; (800b0c8 <FLASH_FlushCaches+0x88>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	4a16      	ldr	r2, [pc, #88]	; (800b0c8 <FLASH_FlushCaches+0x88>)
 800b06e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b072:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800b074:	4b14      	ldr	r3, [pc, #80]	; (800b0c8 <FLASH_FlushCaches+0x88>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	4a13      	ldr	r2, [pc, #76]	; (800b0c8 <FLASH_FlushCaches+0x88>)
 800b07a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b07e:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800b080:	4b11      	ldr	r3, [pc, #68]	; (800b0c8 <FLASH_FlushCaches+0x88>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d017      	beq.n	800b0bc <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800b08c:	4b0e      	ldr	r3, [pc, #56]	; (800b0c8 <FLASH_FlushCaches+0x88>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	4a0d      	ldr	r2, [pc, #52]	; (800b0c8 <FLASH_FlushCaches+0x88>)
 800b092:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b096:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800b098:	4b0b      	ldr	r3, [pc, #44]	; (800b0c8 <FLASH_FlushCaches+0x88>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	4a0a      	ldr	r2, [pc, #40]	; (800b0c8 <FLASH_FlushCaches+0x88>)
 800b09e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b0a2:	6013      	str	r3, [r2, #0]
 800b0a4:	4b08      	ldr	r3, [pc, #32]	; (800b0c8 <FLASH_FlushCaches+0x88>)
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	4a07      	ldr	r2, [pc, #28]	; (800b0c8 <FLASH_FlushCaches+0x88>)
 800b0aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b0ae:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800b0b0:	4b05      	ldr	r3, [pc, #20]	; (800b0c8 <FLASH_FlushCaches+0x88>)
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	4a04      	ldr	r2, [pc, #16]	; (800b0c8 <FLASH_FlushCaches+0x88>)
 800b0b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b0ba:	6013      	str	r3, [r2, #0]
  }
}
 800b0bc:	bf00      	nop
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c4:	4770      	bx	lr
 800b0c6:	bf00      	nop
 800b0c8:	40023c00 	.word	0x40023c00

0800b0cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b089      	sub	sp, #36	; 0x24
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
 800b0d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800b0de:	2300      	movs	r3, #0
 800b0e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	61fb      	str	r3, [r7, #28]
 800b0e6:	e165      	b.n	800b3b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800b0e8:	2201      	movs	r2, #1
 800b0ea:	69fb      	ldr	r3, [r7, #28]
 800b0ec:	fa02 f303 	lsl.w	r3, r2, r3
 800b0f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	697a      	ldr	r2, [r7, #20]
 800b0f8:	4013      	ands	r3, r2
 800b0fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b0fc:	693a      	ldr	r2, [r7, #16]
 800b0fe:	697b      	ldr	r3, [r7, #20]
 800b100:	429a      	cmp	r2, r3
 800b102:	f040 8154 	bne.w	800b3ae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b106:	683b      	ldr	r3, [r7, #0]
 800b108:	685b      	ldr	r3, [r3, #4]
 800b10a:	2b02      	cmp	r3, #2
 800b10c:	d003      	beq.n	800b116 <HAL_GPIO_Init+0x4a>
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	685b      	ldr	r3, [r3, #4]
 800b112:	2b12      	cmp	r3, #18
 800b114:	d123      	bne.n	800b15e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b116:	69fb      	ldr	r3, [r7, #28]
 800b118:	08da      	lsrs	r2, r3, #3
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	3208      	adds	r2, #8
 800b11e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b122:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b124:	69fb      	ldr	r3, [r7, #28]
 800b126:	f003 0307 	and.w	r3, r3, #7
 800b12a:	009b      	lsls	r3, r3, #2
 800b12c:	220f      	movs	r2, #15
 800b12e:	fa02 f303 	lsl.w	r3, r2, r3
 800b132:	43db      	mvns	r3, r3
 800b134:	69ba      	ldr	r2, [r7, #24]
 800b136:	4013      	ands	r3, r2
 800b138:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	691a      	ldr	r2, [r3, #16]
 800b13e:	69fb      	ldr	r3, [r7, #28]
 800b140:	f003 0307 	and.w	r3, r3, #7
 800b144:	009b      	lsls	r3, r3, #2
 800b146:	fa02 f303 	lsl.w	r3, r2, r3
 800b14a:	69ba      	ldr	r2, [r7, #24]
 800b14c:	4313      	orrs	r3, r2
 800b14e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b150:	69fb      	ldr	r3, [r7, #28]
 800b152:	08da      	lsrs	r2, r3, #3
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	3208      	adds	r2, #8
 800b158:	69b9      	ldr	r1, [r7, #24]
 800b15a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b164:	69fb      	ldr	r3, [r7, #28]
 800b166:	005b      	lsls	r3, r3, #1
 800b168:	2203      	movs	r2, #3
 800b16a:	fa02 f303 	lsl.w	r3, r2, r3
 800b16e:	43db      	mvns	r3, r3
 800b170:	69ba      	ldr	r2, [r7, #24]
 800b172:	4013      	ands	r3, r2
 800b174:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	685b      	ldr	r3, [r3, #4]
 800b17a:	f003 0203 	and.w	r2, r3, #3
 800b17e:	69fb      	ldr	r3, [r7, #28]
 800b180:	005b      	lsls	r3, r3, #1
 800b182:	fa02 f303 	lsl.w	r3, r2, r3
 800b186:	69ba      	ldr	r2, [r7, #24]
 800b188:	4313      	orrs	r3, r2
 800b18a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	69ba      	ldr	r2, [r7, #24]
 800b190:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	685b      	ldr	r3, [r3, #4]
 800b196:	2b01      	cmp	r3, #1
 800b198:	d00b      	beq.n	800b1b2 <HAL_GPIO_Init+0xe6>
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	685b      	ldr	r3, [r3, #4]
 800b19e:	2b02      	cmp	r3, #2
 800b1a0:	d007      	beq.n	800b1b2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800b1a6:	2b11      	cmp	r3, #17
 800b1a8:	d003      	beq.n	800b1b2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800b1aa:	683b      	ldr	r3, [r7, #0]
 800b1ac:	685b      	ldr	r3, [r3, #4]
 800b1ae:	2b12      	cmp	r3, #18
 800b1b0:	d130      	bne.n	800b214 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	689b      	ldr	r3, [r3, #8]
 800b1b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b1b8:	69fb      	ldr	r3, [r7, #28]
 800b1ba:	005b      	lsls	r3, r3, #1
 800b1bc:	2203      	movs	r2, #3
 800b1be:	fa02 f303 	lsl.w	r3, r2, r3
 800b1c2:	43db      	mvns	r3, r3
 800b1c4:	69ba      	ldr	r2, [r7, #24]
 800b1c6:	4013      	ands	r3, r2
 800b1c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	68da      	ldr	r2, [r3, #12]
 800b1ce:	69fb      	ldr	r3, [r7, #28]
 800b1d0:	005b      	lsls	r3, r3, #1
 800b1d2:	fa02 f303 	lsl.w	r3, r2, r3
 800b1d6:	69ba      	ldr	r2, [r7, #24]
 800b1d8:	4313      	orrs	r3, r2
 800b1da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	69ba      	ldr	r2, [r7, #24]
 800b1e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	685b      	ldr	r3, [r3, #4]
 800b1e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b1e8:	2201      	movs	r2, #1
 800b1ea:	69fb      	ldr	r3, [r7, #28]
 800b1ec:	fa02 f303 	lsl.w	r3, r2, r3
 800b1f0:	43db      	mvns	r3, r3
 800b1f2:	69ba      	ldr	r2, [r7, #24]
 800b1f4:	4013      	ands	r3, r2
 800b1f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	685b      	ldr	r3, [r3, #4]
 800b1fc:	091b      	lsrs	r3, r3, #4
 800b1fe:	f003 0201 	and.w	r2, r3, #1
 800b202:	69fb      	ldr	r3, [r7, #28]
 800b204:	fa02 f303 	lsl.w	r3, r2, r3
 800b208:	69ba      	ldr	r2, [r7, #24]
 800b20a:	4313      	orrs	r3, r2
 800b20c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	69ba      	ldr	r2, [r7, #24]
 800b212:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	68db      	ldr	r3, [r3, #12]
 800b218:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b21a:	69fb      	ldr	r3, [r7, #28]
 800b21c:	005b      	lsls	r3, r3, #1
 800b21e:	2203      	movs	r2, #3
 800b220:	fa02 f303 	lsl.w	r3, r2, r3
 800b224:	43db      	mvns	r3, r3
 800b226:	69ba      	ldr	r2, [r7, #24]
 800b228:	4013      	ands	r3, r2
 800b22a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b22c:	683b      	ldr	r3, [r7, #0]
 800b22e:	689a      	ldr	r2, [r3, #8]
 800b230:	69fb      	ldr	r3, [r7, #28]
 800b232:	005b      	lsls	r3, r3, #1
 800b234:	fa02 f303 	lsl.w	r3, r2, r3
 800b238:	69ba      	ldr	r2, [r7, #24]
 800b23a:	4313      	orrs	r3, r2
 800b23c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	69ba      	ldr	r2, [r7, #24]
 800b242:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	685b      	ldr	r3, [r3, #4]
 800b248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	f000 80ae 	beq.w	800b3ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b252:	2300      	movs	r3, #0
 800b254:	60fb      	str	r3, [r7, #12]
 800b256:	4b5c      	ldr	r3, [pc, #368]	; (800b3c8 <HAL_GPIO_Init+0x2fc>)
 800b258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b25a:	4a5b      	ldr	r2, [pc, #364]	; (800b3c8 <HAL_GPIO_Init+0x2fc>)
 800b25c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b260:	6453      	str	r3, [r2, #68]	; 0x44
 800b262:	4b59      	ldr	r3, [pc, #356]	; (800b3c8 <HAL_GPIO_Init+0x2fc>)
 800b264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b26a:	60fb      	str	r3, [r7, #12]
 800b26c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b26e:	4a57      	ldr	r2, [pc, #348]	; (800b3cc <HAL_GPIO_Init+0x300>)
 800b270:	69fb      	ldr	r3, [r7, #28]
 800b272:	089b      	lsrs	r3, r3, #2
 800b274:	3302      	adds	r3, #2
 800b276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b27a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b27c:	69fb      	ldr	r3, [r7, #28]
 800b27e:	f003 0303 	and.w	r3, r3, #3
 800b282:	009b      	lsls	r3, r3, #2
 800b284:	220f      	movs	r2, #15
 800b286:	fa02 f303 	lsl.w	r3, r2, r3
 800b28a:	43db      	mvns	r3, r3
 800b28c:	69ba      	ldr	r2, [r7, #24]
 800b28e:	4013      	ands	r3, r2
 800b290:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	4a4e      	ldr	r2, [pc, #312]	; (800b3d0 <HAL_GPIO_Init+0x304>)
 800b296:	4293      	cmp	r3, r2
 800b298:	d025      	beq.n	800b2e6 <HAL_GPIO_Init+0x21a>
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	4a4d      	ldr	r2, [pc, #308]	; (800b3d4 <HAL_GPIO_Init+0x308>)
 800b29e:	4293      	cmp	r3, r2
 800b2a0:	d01f      	beq.n	800b2e2 <HAL_GPIO_Init+0x216>
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	4a4c      	ldr	r2, [pc, #304]	; (800b3d8 <HAL_GPIO_Init+0x30c>)
 800b2a6:	4293      	cmp	r3, r2
 800b2a8:	d019      	beq.n	800b2de <HAL_GPIO_Init+0x212>
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	4a4b      	ldr	r2, [pc, #300]	; (800b3dc <HAL_GPIO_Init+0x310>)
 800b2ae:	4293      	cmp	r3, r2
 800b2b0:	d013      	beq.n	800b2da <HAL_GPIO_Init+0x20e>
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	4a4a      	ldr	r2, [pc, #296]	; (800b3e0 <HAL_GPIO_Init+0x314>)
 800b2b6:	4293      	cmp	r3, r2
 800b2b8:	d00d      	beq.n	800b2d6 <HAL_GPIO_Init+0x20a>
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	4a49      	ldr	r2, [pc, #292]	; (800b3e4 <HAL_GPIO_Init+0x318>)
 800b2be:	4293      	cmp	r3, r2
 800b2c0:	d007      	beq.n	800b2d2 <HAL_GPIO_Init+0x206>
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	4a48      	ldr	r2, [pc, #288]	; (800b3e8 <HAL_GPIO_Init+0x31c>)
 800b2c6:	4293      	cmp	r3, r2
 800b2c8:	d101      	bne.n	800b2ce <HAL_GPIO_Init+0x202>
 800b2ca:	2306      	movs	r3, #6
 800b2cc:	e00c      	b.n	800b2e8 <HAL_GPIO_Init+0x21c>
 800b2ce:	2307      	movs	r3, #7
 800b2d0:	e00a      	b.n	800b2e8 <HAL_GPIO_Init+0x21c>
 800b2d2:	2305      	movs	r3, #5
 800b2d4:	e008      	b.n	800b2e8 <HAL_GPIO_Init+0x21c>
 800b2d6:	2304      	movs	r3, #4
 800b2d8:	e006      	b.n	800b2e8 <HAL_GPIO_Init+0x21c>
 800b2da:	2303      	movs	r3, #3
 800b2dc:	e004      	b.n	800b2e8 <HAL_GPIO_Init+0x21c>
 800b2de:	2302      	movs	r3, #2
 800b2e0:	e002      	b.n	800b2e8 <HAL_GPIO_Init+0x21c>
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	e000      	b.n	800b2e8 <HAL_GPIO_Init+0x21c>
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	69fa      	ldr	r2, [r7, #28]
 800b2ea:	f002 0203 	and.w	r2, r2, #3
 800b2ee:	0092      	lsls	r2, r2, #2
 800b2f0:	4093      	lsls	r3, r2
 800b2f2:	69ba      	ldr	r2, [r7, #24]
 800b2f4:	4313      	orrs	r3, r2
 800b2f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b2f8:	4934      	ldr	r1, [pc, #208]	; (800b3cc <HAL_GPIO_Init+0x300>)
 800b2fa:	69fb      	ldr	r3, [r7, #28]
 800b2fc:	089b      	lsrs	r3, r3, #2
 800b2fe:	3302      	adds	r3, #2
 800b300:	69ba      	ldr	r2, [r7, #24]
 800b302:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b306:	4b39      	ldr	r3, [pc, #228]	; (800b3ec <HAL_GPIO_Init+0x320>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b30c:	693b      	ldr	r3, [r7, #16]
 800b30e:	43db      	mvns	r3, r3
 800b310:	69ba      	ldr	r2, [r7, #24]
 800b312:	4013      	ands	r3, r2
 800b314:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	685b      	ldr	r3, [r3, #4]
 800b31a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d003      	beq.n	800b32a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800b322:	69ba      	ldr	r2, [r7, #24]
 800b324:	693b      	ldr	r3, [r7, #16]
 800b326:	4313      	orrs	r3, r2
 800b328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b32a:	4a30      	ldr	r2, [pc, #192]	; (800b3ec <HAL_GPIO_Init+0x320>)
 800b32c:	69bb      	ldr	r3, [r7, #24]
 800b32e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800b330:	4b2e      	ldr	r3, [pc, #184]	; (800b3ec <HAL_GPIO_Init+0x320>)
 800b332:	685b      	ldr	r3, [r3, #4]
 800b334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b336:	693b      	ldr	r3, [r7, #16]
 800b338:	43db      	mvns	r3, r3
 800b33a:	69ba      	ldr	r2, [r7, #24]
 800b33c:	4013      	ands	r3, r2
 800b33e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800b340:	683b      	ldr	r3, [r7, #0]
 800b342:	685b      	ldr	r3, [r3, #4]
 800b344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d003      	beq.n	800b354 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800b34c:	69ba      	ldr	r2, [r7, #24]
 800b34e:	693b      	ldr	r3, [r7, #16]
 800b350:	4313      	orrs	r3, r2
 800b352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b354:	4a25      	ldr	r2, [pc, #148]	; (800b3ec <HAL_GPIO_Init+0x320>)
 800b356:	69bb      	ldr	r3, [r7, #24]
 800b358:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b35a:	4b24      	ldr	r3, [pc, #144]	; (800b3ec <HAL_GPIO_Init+0x320>)
 800b35c:	689b      	ldr	r3, [r3, #8]
 800b35e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b360:	693b      	ldr	r3, [r7, #16]
 800b362:	43db      	mvns	r3, r3
 800b364:	69ba      	ldr	r2, [r7, #24]
 800b366:	4013      	ands	r3, r2
 800b368:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	685b      	ldr	r3, [r3, #4]
 800b36e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b372:	2b00      	cmp	r3, #0
 800b374:	d003      	beq.n	800b37e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800b376:	69ba      	ldr	r2, [r7, #24]
 800b378:	693b      	ldr	r3, [r7, #16]
 800b37a:	4313      	orrs	r3, r2
 800b37c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b37e:	4a1b      	ldr	r2, [pc, #108]	; (800b3ec <HAL_GPIO_Init+0x320>)
 800b380:	69bb      	ldr	r3, [r7, #24]
 800b382:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b384:	4b19      	ldr	r3, [pc, #100]	; (800b3ec <HAL_GPIO_Init+0x320>)
 800b386:	68db      	ldr	r3, [r3, #12]
 800b388:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b38a:	693b      	ldr	r3, [r7, #16]
 800b38c:	43db      	mvns	r3, r3
 800b38e:	69ba      	ldr	r2, [r7, #24]
 800b390:	4013      	ands	r3, r2
 800b392:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800b394:	683b      	ldr	r3, [r7, #0]
 800b396:	685b      	ldr	r3, [r3, #4]
 800b398:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d003      	beq.n	800b3a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800b3a0:	69ba      	ldr	r2, [r7, #24]
 800b3a2:	693b      	ldr	r3, [r7, #16]
 800b3a4:	4313      	orrs	r3, r2
 800b3a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b3a8:	4a10      	ldr	r2, [pc, #64]	; (800b3ec <HAL_GPIO_Init+0x320>)
 800b3aa:	69bb      	ldr	r3, [r7, #24]
 800b3ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b3ae:	69fb      	ldr	r3, [r7, #28]
 800b3b0:	3301      	adds	r3, #1
 800b3b2:	61fb      	str	r3, [r7, #28]
 800b3b4:	69fb      	ldr	r3, [r7, #28]
 800b3b6:	2b0f      	cmp	r3, #15
 800b3b8:	f67f ae96 	bls.w	800b0e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b3bc:	bf00      	nop
 800b3be:	3724      	adds	r7, #36	; 0x24
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c6:	4770      	bx	lr
 800b3c8:	40023800 	.word	0x40023800
 800b3cc:	40013800 	.word	0x40013800
 800b3d0:	40020000 	.word	0x40020000
 800b3d4:	40020400 	.word	0x40020400
 800b3d8:	40020800 	.word	0x40020800
 800b3dc:	40020c00 	.word	0x40020c00
 800b3e0:	40021000 	.word	0x40021000
 800b3e4:	40021400 	.word	0x40021400
 800b3e8:	40021800 	.word	0x40021800
 800b3ec:	40013c00 	.word	0x40013c00

0800b3f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b085      	sub	sp, #20
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	6078      	str	r0, [r7, #4]
 800b3f8:	460b      	mov	r3, r1
 800b3fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	691a      	ldr	r2, [r3, #16]
 800b400:	887b      	ldrh	r3, [r7, #2]
 800b402:	4013      	ands	r3, r2
 800b404:	2b00      	cmp	r3, #0
 800b406:	d002      	beq.n	800b40e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800b408:	2301      	movs	r3, #1
 800b40a:	73fb      	strb	r3, [r7, #15]
 800b40c:	e001      	b.n	800b412 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800b40e:	2300      	movs	r3, #0
 800b410:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800b412:	7bfb      	ldrb	r3, [r7, #15]
}
 800b414:	4618      	mov	r0, r3
 800b416:	3714      	adds	r7, #20
 800b418:	46bd      	mov	sp, r7
 800b41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41e:	4770      	bx	lr

0800b420 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b420:	b480      	push	{r7}
 800b422:	b083      	sub	sp, #12
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
 800b428:	460b      	mov	r3, r1
 800b42a:	807b      	strh	r3, [r7, #2]
 800b42c:	4613      	mov	r3, r2
 800b42e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b430:	787b      	ldrb	r3, [r7, #1]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d003      	beq.n	800b43e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b436:	887a      	ldrh	r2, [r7, #2]
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b43c:	e003      	b.n	800b446 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b43e:	887b      	ldrh	r3, [r7, #2]
 800b440:	041a      	lsls	r2, r3, #16
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	619a      	str	r2, [r3, #24]
}
 800b446:	bf00      	nop
 800b448:	370c      	adds	r7, #12
 800b44a:	46bd      	mov	sp, r7
 800b44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b450:	4770      	bx	lr
	...

0800b454 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b084      	sub	sp, #16
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
 800b45c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d101      	bne.n	800b468 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b464:	2301      	movs	r3, #1
 800b466:	e0ca      	b.n	800b5fe <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b468:	4b67      	ldr	r3, [pc, #412]	; (800b608 <HAL_RCC_ClockConfig+0x1b4>)
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	f003 030f 	and.w	r3, r3, #15
 800b470:	683a      	ldr	r2, [r7, #0]
 800b472:	429a      	cmp	r2, r3
 800b474:	d90c      	bls.n	800b490 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b476:	4b64      	ldr	r3, [pc, #400]	; (800b608 <HAL_RCC_ClockConfig+0x1b4>)
 800b478:	683a      	ldr	r2, [r7, #0]
 800b47a:	b2d2      	uxtb	r2, r2
 800b47c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b47e:	4b62      	ldr	r3, [pc, #392]	; (800b608 <HAL_RCC_ClockConfig+0x1b4>)
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	f003 030f 	and.w	r3, r3, #15
 800b486:	683a      	ldr	r2, [r7, #0]
 800b488:	429a      	cmp	r2, r3
 800b48a:	d001      	beq.n	800b490 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b48c:	2301      	movs	r3, #1
 800b48e:	e0b6      	b.n	800b5fe <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	f003 0302 	and.w	r3, r3, #2
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d020      	beq.n	800b4de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	f003 0304 	and.w	r3, r3, #4
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d005      	beq.n	800b4b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b4a8:	4b58      	ldr	r3, [pc, #352]	; (800b60c <HAL_RCC_ClockConfig+0x1b8>)
 800b4aa:	689b      	ldr	r3, [r3, #8]
 800b4ac:	4a57      	ldr	r2, [pc, #348]	; (800b60c <HAL_RCC_ClockConfig+0x1b8>)
 800b4ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800b4b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	f003 0308 	and.w	r3, r3, #8
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d005      	beq.n	800b4cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b4c0:	4b52      	ldr	r3, [pc, #328]	; (800b60c <HAL_RCC_ClockConfig+0x1b8>)
 800b4c2:	689b      	ldr	r3, [r3, #8]
 800b4c4:	4a51      	ldr	r2, [pc, #324]	; (800b60c <HAL_RCC_ClockConfig+0x1b8>)
 800b4c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800b4ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b4cc:	4b4f      	ldr	r3, [pc, #316]	; (800b60c <HAL_RCC_ClockConfig+0x1b8>)
 800b4ce:	689b      	ldr	r3, [r3, #8]
 800b4d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	689b      	ldr	r3, [r3, #8]
 800b4d8:	494c      	ldr	r1, [pc, #304]	; (800b60c <HAL_RCC_ClockConfig+0x1b8>)
 800b4da:	4313      	orrs	r3, r2
 800b4dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	f003 0301 	and.w	r3, r3, #1
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d044      	beq.n	800b574 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	685b      	ldr	r3, [r3, #4]
 800b4ee:	2b01      	cmp	r3, #1
 800b4f0:	d107      	bne.n	800b502 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b4f2:	4b46      	ldr	r3, [pc, #280]	; (800b60c <HAL_RCC_ClockConfig+0x1b8>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d119      	bne.n	800b532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b4fe:	2301      	movs	r3, #1
 800b500:	e07d      	b.n	800b5fe <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	685b      	ldr	r3, [r3, #4]
 800b506:	2b02      	cmp	r3, #2
 800b508:	d003      	beq.n	800b512 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b50e:	2b03      	cmp	r3, #3
 800b510:	d107      	bne.n	800b522 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b512:	4b3e      	ldr	r3, [pc, #248]	; (800b60c <HAL_RCC_ClockConfig+0x1b8>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d109      	bne.n	800b532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b51e:	2301      	movs	r3, #1
 800b520:	e06d      	b.n	800b5fe <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b522:	4b3a      	ldr	r3, [pc, #232]	; (800b60c <HAL_RCC_ClockConfig+0x1b8>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	f003 0302 	and.w	r3, r3, #2
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d101      	bne.n	800b532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b52e:	2301      	movs	r3, #1
 800b530:	e065      	b.n	800b5fe <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b532:	4b36      	ldr	r3, [pc, #216]	; (800b60c <HAL_RCC_ClockConfig+0x1b8>)
 800b534:	689b      	ldr	r3, [r3, #8]
 800b536:	f023 0203 	bic.w	r2, r3, #3
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	685b      	ldr	r3, [r3, #4]
 800b53e:	4933      	ldr	r1, [pc, #204]	; (800b60c <HAL_RCC_ClockConfig+0x1b8>)
 800b540:	4313      	orrs	r3, r2
 800b542:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b544:	f7fd fc9e 	bl	8008e84 <HAL_GetTick>
 800b548:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b54a:	e00a      	b.n	800b562 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b54c:	f7fd fc9a 	bl	8008e84 <HAL_GetTick>
 800b550:	4602      	mov	r2, r0
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	1ad3      	subs	r3, r2, r3
 800b556:	f241 3288 	movw	r2, #5000	; 0x1388
 800b55a:	4293      	cmp	r3, r2
 800b55c:	d901      	bls.n	800b562 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b55e:	2303      	movs	r3, #3
 800b560:	e04d      	b.n	800b5fe <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b562:	4b2a      	ldr	r3, [pc, #168]	; (800b60c <HAL_RCC_ClockConfig+0x1b8>)
 800b564:	689b      	ldr	r3, [r3, #8]
 800b566:	f003 020c 	and.w	r2, r3, #12
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	685b      	ldr	r3, [r3, #4]
 800b56e:	009b      	lsls	r3, r3, #2
 800b570:	429a      	cmp	r2, r3
 800b572:	d1eb      	bne.n	800b54c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b574:	4b24      	ldr	r3, [pc, #144]	; (800b608 <HAL_RCC_ClockConfig+0x1b4>)
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	f003 030f 	and.w	r3, r3, #15
 800b57c:	683a      	ldr	r2, [r7, #0]
 800b57e:	429a      	cmp	r2, r3
 800b580:	d20c      	bcs.n	800b59c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b582:	4b21      	ldr	r3, [pc, #132]	; (800b608 <HAL_RCC_ClockConfig+0x1b4>)
 800b584:	683a      	ldr	r2, [r7, #0]
 800b586:	b2d2      	uxtb	r2, r2
 800b588:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b58a:	4b1f      	ldr	r3, [pc, #124]	; (800b608 <HAL_RCC_ClockConfig+0x1b4>)
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f003 030f 	and.w	r3, r3, #15
 800b592:	683a      	ldr	r2, [r7, #0]
 800b594:	429a      	cmp	r2, r3
 800b596:	d001      	beq.n	800b59c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b598:	2301      	movs	r3, #1
 800b59a:	e030      	b.n	800b5fe <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	f003 0304 	and.w	r3, r3, #4
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d008      	beq.n	800b5ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b5a8:	4b18      	ldr	r3, [pc, #96]	; (800b60c <HAL_RCC_ClockConfig+0x1b8>)
 800b5aa:	689b      	ldr	r3, [r3, #8]
 800b5ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	68db      	ldr	r3, [r3, #12]
 800b5b4:	4915      	ldr	r1, [pc, #84]	; (800b60c <HAL_RCC_ClockConfig+0x1b8>)
 800b5b6:	4313      	orrs	r3, r2
 800b5b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	f003 0308 	and.w	r3, r3, #8
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d009      	beq.n	800b5da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b5c6:	4b11      	ldr	r3, [pc, #68]	; (800b60c <HAL_RCC_ClockConfig+0x1b8>)
 800b5c8:	689b      	ldr	r3, [r3, #8]
 800b5ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	691b      	ldr	r3, [r3, #16]
 800b5d2:	00db      	lsls	r3, r3, #3
 800b5d4:	490d      	ldr	r1, [pc, #52]	; (800b60c <HAL_RCC_ClockConfig+0x1b8>)
 800b5d6:	4313      	orrs	r3, r2
 800b5d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800b5da:	f000 f851 	bl	800b680 <HAL_RCC_GetSysClockFreq>
 800b5de:	4601      	mov	r1, r0
 800b5e0:	4b0a      	ldr	r3, [pc, #40]	; (800b60c <HAL_RCC_ClockConfig+0x1b8>)
 800b5e2:	689b      	ldr	r3, [r3, #8]
 800b5e4:	091b      	lsrs	r3, r3, #4
 800b5e6:	f003 030f 	and.w	r3, r3, #15
 800b5ea:	4a09      	ldr	r2, [pc, #36]	; (800b610 <HAL_RCC_ClockConfig+0x1bc>)
 800b5ec:	5cd3      	ldrb	r3, [r2, r3]
 800b5ee:	fa21 f303 	lsr.w	r3, r1, r3
 800b5f2:	4a08      	ldr	r2, [pc, #32]	; (800b614 <HAL_RCC_ClockConfig+0x1c0>)
 800b5f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800b5f6:	2000      	movs	r0, #0
 800b5f8:	f7fd fc00 	bl	8008dfc <HAL_InitTick>

  return HAL_OK;
 800b5fc:	2300      	movs	r3, #0
}
 800b5fe:	4618      	mov	r0, r3
 800b600:	3710      	adds	r7, #16
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}
 800b606:	bf00      	nop
 800b608:	40023c00 	.word	0x40023c00
 800b60c:	40023800 	.word	0x40023800
 800b610:	080287b0 	.word	0x080287b0
 800b614:	2000001c 	.word	0x2000001c

0800b618 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b618:	b480      	push	{r7}
 800b61a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b61c:	4b03      	ldr	r3, [pc, #12]	; (800b62c <HAL_RCC_GetHCLKFreq+0x14>)
 800b61e:	681b      	ldr	r3, [r3, #0]
}
 800b620:	4618      	mov	r0, r3
 800b622:	46bd      	mov	sp, r7
 800b624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b628:	4770      	bx	lr
 800b62a:	bf00      	nop
 800b62c:	2000001c 	.word	0x2000001c

0800b630 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800b634:	f7ff fff0 	bl	800b618 <HAL_RCC_GetHCLKFreq>
 800b638:	4601      	mov	r1, r0
 800b63a:	4b05      	ldr	r3, [pc, #20]	; (800b650 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b63c:	689b      	ldr	r3, [r3, #8]
 800b63e:	0a9b      	lsrs	r3, r3, #10
 800b640:	f003 0307 	and.w	r3, r3, #7
 800b644:	4a03      	ldr	r2, [pc, #12]	; (800b654 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b646:	5cd3      	ldrb	r3, [r2, r3]
 800b648:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	bd80      	pop	{r7, pc}
 800b650:	40023800 	.word	0x40023800
 800b654:	080287c0 	.word	0x080287c0

0800b658 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800b65c:	f7ff ffdc 	bl	800b618 <HAL_RCC_GetHCLKFreq>
 800b660:	4601      	mov	r1, r0
 800b662:	4b05      	ldr	r3, [pc, #20]	; (800b678 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b664:	689b      	ldr	r3, [r3, #8]
 800b666:	0b5b      	lsrs	r3, r3, #13
 800b668:	f003 0307 	and.w	r3, r3, #7
 800b66c:	4a03      	ldr	r2, [pc, #12]	; (800b67c <HAL_RCC_GetPCLK2Freq+0x24>)
 800b66e:	5cd3      	ldrb	r3, [r2, r3]
 800b670:	fa21 f303 	lsr.w	r3, r1, r3
}
 800b674:	4618      	mov	r0, r3
 800b676:	bd80      	pop	{r7, pc}
 800b678:	40023800 	.word	0x40023800
 800b67c:	080287c0 	.word	0x080287c0

0800b680 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b680:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b682:	b087      	sub	sp, #28
 800b684:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800b686:	2300      	movs	r3, #0
 800b688:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800b68a:	2300      	movs	r3, #0
 800b68c:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800b68e:	2300      	movs	r3, #0
 800b690:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800b692:	2300      	movs	r3, #0
 800b694:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800b696:	2300      	movs	r3, #0
 800b698:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b69a:	4bc6      	ldr	r3, [pc, #792]	; (800b9b4 <HAL_RCC_GetSysClockFreq+0x334>)
 800b69c:	689b      	ldr	r3, [r3, #8]
 800b69e:	f003 030c 	and.w	r3, r3, #12
 800b6a2:	2b0c      	cmp	r3, #12
 800b6a4:	f200 817e 	bhi.w	800b9a4 <HAL_RCC_GetSysClockFreq+0x324>
 800b6a8:	a201      	add	r2, pc, #4	; (adr r2, 800b6b0 <HAL_RCC_GetSysClockFreq+0x30>)
 800b6aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6ae:	bf00      	nop
 800b6b0:	0800b6e5 	.word	0x0800b6e5
 800b6b4:	0800b9a5 	.word	0x0800b9a5
 800b6b8:	0800b9a5 	.word	0x0800b9a5
 800b6bc:	0800b9a5 	.word	0x0800b9a5
 800b6c0:	0800b6eb 	.word	0x0800b6eb
 800b6c4:	0800b9a5 	.word	0x0800b9a5
 800b6c8:	0800b9a5 	.word	0x0800b9a5
 800b6cc:	0800b9a5 	.word	0x0800b9a5
 800b6d0:	0800b6f1 	.word	0x0800b6f1
 800b6d4:	0800b9a5 	.word	0x0800b9a5
 800b6d8:	0800b9a5 	.word	0x0800b9a5
 800b6dc:	0800b9a5 	.word	0x0800b9a5
 800b6e0:	0800b84d 	.word	0x0800b84d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b6e4:	4bb4      	ldr	r3, [pc, #720]	; (800b9b8 <HAL_RCC_GetSysClockFreq+0x338>)
 800b6e6:	613b      	str	r3, [r7, #16]
       break;
 800b6e8:	e15f      	b.n	800b9aa <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b6ea:	4bb4      	ldr	r3, [pc, #720]	; (800b9bc <HAL_RCC_GetSysClockFreq+0x33c>)
 800b6ec:	613b      	str	r3, [r7, #16]
      break;
 800b6ee:	e15c      	b.n	800b9aa <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b6f0:	4bb0      	ldr	r3, [pc, #704]	; (800b9b4 <HAL_RCC_GetSysClockFreq+0x334>)
 800b6f2:	685b      	ldr	r3, [r3, #4]
 800b6f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b6f8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b6fa:	4bae      	ldr	r3, [pc, #696]	; (800b9b4 <HAL_RCC_GetSysClockFreq+0x334>)
 800b6fc:	685b      	ldr	r3, [r3, #4]
 800b6fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b702:	2b00      	cmp	r3, #0
 800b704:	d04a      	beq.n	800b79c <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b706:	4bab      	ldr	r3, [pc, #684]	; (800b9b4 <HAL_RCC_GetSysClockFreq+0x334>)
 800b708:	685b      	ldr	r3, [r3, #4]
 800b70a:	099b      	lsrs	r3, r3, #6
 800b70c:	f04f 0400 	mov.w	r4, #0
 800b710:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b714:	f04f 0200 	mov.w	r2, #0
 800b718:	ea03 0501 	and.w	r5, r3, r1
 800b71c:	ea04 0602 	and.w	r6, r4, r2
 800b720:	4629      	mov	r1, r5
 800b722:	4632      	mov	r2, r6
 800b724:	f04f 0300 	mov.w	r3, #0
 800b728:	f04f 0400 	mov.w	r4, #0
 800b72c:	0154      	lsls	r4, r2, #5
 800b72e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b732:	014b      	lsls	r3, r1, #5
 800b734:	4619      	mov	r1, r3
 800b736:	4622      	mov	r2, r4
 800b738:	1b49      	subs	r1, r1, r5
 800b73a:	eb62 0206 	sbc.w	r2, r2, r6
 800b73e:	f04f 0300 	mov.w	r3, #0
 800b742:	f04f 0400 	mov.w	r4, #0
 800b746:	0194      	lsls	r4, r2, #6
 800b748:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b74c:	018b      	lsls	r3, r1, #6
 800b74e:	1a5b      	subs	r3, r3, r1
 800b750:	eb64 0402 	sbc.w	r4, r4, r2
 800b754:	f04f 0100 	mov.w	r1, #0
 800b758:	f04f 0200 	mov.w	r2, #0
 800b75c:	00e2      	lsls	r2, r4, #3
 800b75e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b762:	00d9      	lsls	r1, r3, #3
 800b764:	460b      	mov	r3, r1
 800b766:	4614      	mov	r4, r2
 800b768:	195b      	adds	r3, r3, r5
 800b76a:	eb44 0406 	adc.w	r4, r4, r6
 800b76e:	f04f 0100 	mov.w	r1, #0
 800b772:	f04f 0200 	mov.w	r2, #0
 800b776:	0262      	lsls	r2, r4, #9
 800b778:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800b77c:	0259      	lsls	r1, r3, #9
 800b77e:	460b      	mov	r3, r1
 800b780:	4614      	mov	r4, r2
 800b782:	4618      	mov	r0, r3
 800b784:	4621      	mov	r1, r4
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	f04f 0400 	mov.w	r4, #0
 800b78c:	461a      	mov	r2, r3
 800b78e:	4623      	mov	r3, r4
 800b790:	f7fd f992 	bl	8008ab8 <__aeabi_uldivmod>
 800b794:	4603      	mov	r3, r0
 800b796:	460c      	mov	r4, r1
 800b798:	617b      	str	r3, [r7, #20]
 800b79a:	e049      	b.n	800b830 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b79c:	4b85      	ldr	r3, [pc, #532]	; (800b9b4 <HAL_RCC_GetSysClockFreq+0x334>)
 800b79e:	685b      	ldr	r3, [r3, #4]
 800b7a0:	099b      	lsrs	r3, r3, #6
 800b7a2:	f04f 0400 	mov.w	r4, #0
 800b7a6:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b7aa:	f04f 0200 	mov.w	r2, #0
 800b7ae:	ea03 0501 	and.w	r5, r3, r1
 800b7b2:	ea04 0602 	and.w	r6, r4, r2
 800b7b6:	4629      	mov	r1, r5
 800b7b8:	4632      	mov	r2, r6
 800b7ba:	f04f 0300 	mov.w	r3, #0
 800b7be:	f04f 0400 	mov.w	r4, #0
 800b7c2:	0154      	lsls	r4, r2, #5
 800b7c4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b7c8:	014b      	lsls	r3, r1, #5
 800b7ca:	4619      	mov	r1, r3
 800b7cc:	4622      	mov	r2, r4
 800b7ce:	1b49      	subs	r1, r1, r5
 800b7d0:	eb62 0206 	sbc.w	r2, r2, r6
 800b7d4:	f04f 0300 	mov.w	r3, #0
 800b7d8:	f04f 0400 	mov.w	r4, #0
 800b7dc:	0194      	lsls	r4, r2, #6
 800b7de:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b7e2:	018b      	lsls	r3, r1, #6
 800b7e4:	1a5b      	subs	r3, r3, r1
 800b7e6:	eb64 0402 	sbc.w	r4, r4, r2
 800b7ea:	f04f 0100 	mov.w	r1, #0
 800b7ee:	f04f 0200 	mov.w	r2, #0
 800b7f2:	00e2      	lsls	r2, r4, #3
 800b7f4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b7f8:	00d9      	lsls	r1, r3, #3
 800b7fa:	460b      	mov	r3, r1
 800b7fc:	4614      	mov	r4, r2
 800b7fe:	195b      	adds	r3, r3, r5
 800b800:	eb44 0406 	adc.w	r4, r4, r6
 800b804:	f04f 0100 	mov.w	r1, #0
 800b808:	f04f 0200 	mov.w	r2, #0
 800b80c:	02a2      	lsls	r2, r4, #10
 800b80e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800b812:	0299      	lsls	r1, r3, #10
 800b814:	460b      	mov	r3, r1
 800b816:	4614      	mov	r4, r2
 800b818:	4618      	mov	r0, r3
 800b81a:	4621      	mov	r1, r4
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	f04f 0400 	mov.w	r4, #0
 800b822:	461a      	mov	r2, r3
 800b824:	4623      	mov	r3, r4
 800b826:	f7fd f947 	bl	8008ab8 <__aeabi_uldivmod>
 800b82a:	4603      	mov	r3, r0
 800b82c:	460c      	mov	r4, r1
 800b82e:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800b830:	4b60      	ldr	r3, [pc, #384]	; (800b9b4 <HAL_RCC_GetSysClockFreq+0x334>)
 800b832:	685b      	ldr	r3, [r3, #4]
 800b834:	0c1b      	lsrs	r3, r3, #16
 800b836:	f003 0303 	and.w	r3, r3, #3
 800b83a:	3301      	adds	r3, #1
 800b83c:	005b      	lsls	r3, r3, #1
 800b83e:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 800b840:	697a      	ldr	r2, [r7, #20]
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	fbb2 f3f3 	udiv	r3, r2, r3
 800b848:	613b      	str	r3, [r7, #16]
      break;
 800b84a:	e0ae      	b.n	800b9aa <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b84c:	4b59      	ldr	r3, [pc, #356]	; (800b9b4 <HAL_RCC_GetSysClockFreq+0x334>)
 800b84e:	685b      	ldr	r3, [r3, #4]
 800b850:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b854:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b856:	4b57      	ldr	r3, [pc, #348]	; (800b9b4 <HAL_RCC_GetSysClockFreq+0x334>)
 800b858:	685b      	ldr	r3, [r3, #4]
 800b85a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d04a      	beq.n	800b8f8 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b862:	4b54      	ldr	r3, [pc, #336]	; (800b9b4 <HAL_RCC_GetSysClockFreq+0x334>)
 800b864:	685b      	ldr	r3, [r3, #4]
 800b866:	099b      	lsrs	r3, r3, #6
 800b868:	f04f 0400 	mov.w	r4, #0
 800b86c:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b870:	f04f 0200 	mov.w	r2, #0
 800b874:	ea03 0501 	and.w	r5, r3, r1
 800b878:	ea04 0602 	and.w	r6, r4, r2
 800b87c:	4629      	mov	r1, r5
 800b87e:	4632      	mov	r2, r6
 800b880:	f04f 0300 	mov.w	r3, #0
 800b884:	f04f 0400 	mov.w	r4, #0
 800b888:	0154      	lsls	r4, r2, #5
 800b88a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b88e:	014b      	lsls	r3, r1, #5
 800b890:	4619      	mov	r1, r3
 800b892:	4622      	mov	r2, r4
 800b894:	1b49      	subs	r1, r1, r5
 800b896:	eb62 0206 	sbc.w	r2, r2, r6
 800b89a:	f04f 0300 	mov.w	r3, #0
 800b89e:	f04f 0400 	mov.w	r4, #0
 800b8a2:	0194      	lsls	r4, r2, #6
 800b8a4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b8a8:	018b      	lsls	r3, r1, #6
 800b8aa:	1a5b      	subs	r3, r3, r1
 800b8ac:	eb64 0402 	sbc.w	r4, r4, r2
 800b8b0:	f04f 0100 	mov.w	r1, #0
 800b8b4:	f04f 0200 	mov.w	r2, #0
 800b8b8:	00e2      	lsls	r2, r4, #3
 800b8ba:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b8be:	00d9      	lsls	r1, r3, #3
 800b8c0:	460b      	mov	r3, r1
 800b8c2:	4614      	mov	r4, r2
 800b8c4:	195b      	adds	r3, r3, r5
 800b8c6:	eb44 0406 	adc.w	r4, r4, r6
 800b8ca:	f04f 0100 	mov.w	r1, #0
 800b8ce:	f04f 0200 	mov.w	r2, #0
 800b8d2:	0262      	lsls	r2, r4, #9
 800b8d4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800b8d8:	0259      	lsls	r1, r3, #9
 800b8da:	460b      	mov	r3, r1
 800b8dc:	4614      	mov	r4, r2
 800b8de:	4618      	mov	r0, r3
 800b8e0:	4621      	mov	r1, r4
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	f04f 0400 	mov.w	r4, #0
 800b8e8:	461a      	mov	r2, r3
 800b8ea:	4623      	mov	r3, r4
 800b8ec:	f7fd f8e4 	bl	8008ab8 <__aeabi_uldivmod>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	460c      	mov	r4, r1
 800b8f4:	617b      	str	r3, [r7, #20]
 800b8f6:	e049      	b.n	800b98c <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b8f8:	4b2e      	ldr	r3, [pc, #184]	; (800b9b4 <HAL_RCC_GetSysClockFreq+0x334>)
 800b8fa:	685b      	ldr	r3, [r3, #4]
 800b8fc:	099b      	lsrs	r3, r3, #6
 800b8fe:	f04f 0400 	mov.w	r4, #0
 800b902:	f240 11ff 	movw	r1, #511	; 0x1ff
 800b906:	f04f 0200 	mov.w	r2, #0
 800b90a:	ea03 0501 	and.w	r5, r3, r1
 800b90e:	ea04 0602 	and.w	r6, r4, r2
 800b912:	4629      	mov	r1, r5
 800b914:	4632      	mov	r2, r6
 800b916:	f04f 0300 	mov.w	r3, #0
 800b91a:	f04f 0400 	mov.w	r4, #0
 800b91e:	0154      	lsls	r4, r2, #5
 800b920:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800b924:	014b      	lsls	r3, r1, #5
 800b926:	4619      	mov	r1, r3
 800b928:	4622      	mov	r2, r4
 800b92a:	1b49      	subs	r1, r1, r5
 800b92c:	eb62 0206 	sbc.w	r2, r2, r6
 800b930:	f04f 0300 	mov.w	r3, #0
 800b934:	f04f 0400 	mov.w	r4, #0
 800b938:	0194      	lsls	r4, r2, #6
 800b93a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800b93e:	018b      	lsls	r3, r1, #6
 800b940:	1a5b      	subs	r3, r3, r1
 800b942:	eb64 0402 	sbc.w	r4, r4, r2
 800b946:	f04f 0100 	mov.w	r1, #0
 800b94a:	f04f 0200 	mov.w	r2, #0
 800b94e:	00e2      	lsls	r2, r4, #3
 800b950:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800b954:	00d9      	lsls	r1, r3, #3
 800b956:	460b      	mov	r3, r1
 800b958:	4614      	mov	r4, r2
 800b95a:	195b      	adds	r3, r3, r5
 800b95c:	eb44 0406 	adc.w	r4, r4, r6
 800b960:	f04f 0100 	mov.w	r1, #0
 800b964:	f04f 0200 	mov.w	r2, #0
 800b968:	02a2      	lsls	r2, r4, #10
 800b96a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800b96e:	0299      	lsls	r1, r3, #10
 800b970:	460b      	mov	r3, r1
 800b972:	4614      	mov	r4, r2
 800b974:	4618      	mov	r0, r3
 800b976:	4621      	mov	r1, r4
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	f04f 0400 	mov.w	r4, #0
 800b97e:	461a      	mov	r2, r3
 800b980:	4623      	mov	r3, r4
 800b982:	f7fd f899 	bl	8008ab8 <__aeabi_uldivmod>
 800b986:	4603      	mov	r3, r0
 800b988:	460c      	mov	r4, r1
 800b98a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800b98c:	4b09      	ldr	r3, [pc, #36]	; (800b9b4 <HAL_RCC_GetSysClockFreq+0x334>)
 800b98e:	685b      	ldr	r3, [r3, #4]
 800b990:	0f1b      	lsrs	r3, r3, #28
 800b992:	f003 0307 	and.w	r3, r3, #7
 800b996:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 800b998:	697a      	ldr	r2, [r7, #20]
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9a0:	613b      	str	r3, [r7, #16]
      break;
 800b9a2:	e002      	b.n	800b9aa <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b9a4:	4b04      	ldr	r3, [pc, #16]	; (800b9b8 <HAL_RCC_GetSysClockFreq+0x338>)
 800b9a6:	613b      	str	r3, [r7, #16]
      break;
 800b9a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b9aa:	693b      	ldr	r3, [r7, #16]
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	371c      	adds	r7, #28
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9b4:	40023800 	.word	0x40023800
 800b9b8:	00f42400 	.word	0x00f42400
 800b9bc:	007a1200 	.word	0x007a1200

0800b9c0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b086      	sub	sp, #24
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	f003 0301 	and.w	r3, r3, #1
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	f000 8083 	beq.w	800bae0 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b9da:	4b95      	ldr	r3, [pc, #596]	; (800bc30 <HAL_RCC_OscConfig+0x270>)
 800b9dc:	689b      	ldr	r3, [r3, #8]
 800b9de:	f003 030c 	and.w	r3, r3, #12
 800b9e2:	2b04      	cmp	r3, #4
 800b9e4:	d019      	beq.n	800ba1a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b9e6:	4b92      	ldr	r3, [pc, #584]	; (800bc30 <HAL_RCC_OscConfig+0x270>)
 800b9e8:	689b      	ldr	r3, [r3, #8]
 800b9ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b9ee:	2b08      	cmp	r3, #8
 800b9f0:	d106      	bne.n	800ba00 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800b9f2:	4b8f      	ldr	r3, [pc, #572]	; (800bc30 <HAL_RCC_OscConfig+0x270>)
 800b9f4:	685b      	ldr	r3, [r3, #4]
 800b9f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b9fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b9fe:	d00c      	beq.n	800ba1a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ba00:	4b8b      	ldr	r3, [pc, #556]	; (800bc30 <HAL_RCC_OscConfig+0x270>)
 800ba02:	689b      	ldr	r3, [r3, #8]
 800ba04:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800ba08:	2b0c      	cmp	r3, #12
 800ba0a:	d112      	bne.n	800ba32 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ba0c:	4b88      	ldr	r3, [pc, #544]	; (800bc30 <HAL_RCC_OscConfig+0x270>)
 800ba0e:	685b      	ldr	r3, [r3, #4]
 800ba10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ba14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ba18:	d10b      	bne.n	800ba32 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ba1a:	4b85      	ldr	r3, [pc, #532]	; (800bc30 <HAL_RCC_OscConfig+0x270>)
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d05b      	beq.n	800bade <HAL_RCC_OscConfig+0x11e>
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	685b      	ldr	r3, [r3, #4]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d157      	bne.n	800bade <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800ba2e:	2301      	movs	r3, #1
 800ba30:	e216      	b.n	800be60 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	685b      	ldr	r3, [r3, #4]
 800ba36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba3a:	d106      	bne.n	800ba4a <HAL_RCC_OscConfig+0x8a>
 800ba3c:	4b7c      	ldr	r3, [pc, #496]	; (800bc30 <HAL_RCC_OscConfig+0x270>)
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	4a7b      	ldr	r2, [pc, #492]	; (800bc30 <HAL_RCC_OscConfig+0x270>)
 800ba42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ba46:	6013      	str	r3, [r2, #0]
 800ba48:	e01d      	b.n	800ba86 <HAL_RCC_OscConfig+0xc6>
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	685b      	ldr	r3, [r3, #4]
 800ba4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ba52:	d10c      	bne.n	800ba6e <HAL_RCC_OscConfig+0xae>
 800ba54:	4b76      	ldr	r3, [pc, #472]	; (800bc30 <HAL_RCC_OscConfig+0x270>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	4a75      	ldr	r2, [pc, #468]	; (800bc30 <HAL_RCC_OscConfig+0x270>)
 800ba5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ba5e:	6013      	str	r3, [r2, #0]
 800ba60:	4b73      	ldr	r3, [pc, #460]	; (800bc30 <HAL_RCC_OscConfig+0x270>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	4a72      	ldr	r2, [pc, #456]	; (800bc30 <HAL_RCC_OscConfig+0x270>)
 800ba66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ba6a:	6013      	str	r3, [r2, #0]
 800ba6c:	e00b      	b.n	800ba86 <HAL_RCC_OscConfig+0xc6>
 800ba6e:	4b70      	ldr	r3, [pc, #448]	; (800bc30 <HAL_RCC_OscConfig+0x270>)
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	4a6f      	ldr	r2, [pc, #444]	; (800bc30 <HAL_RCC_OscConfig+0x270>)
 800ba74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ba78:	6013      	str	r3, [r2, #0]
 800ba7a:	4b6d      	ldr	r3, [pc, #436]	; (800bc30 <HAL_RCC_OscConfig+0x270>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	4a6c      	ldr	r2, [pc, #432]	; (800bc30 <HAL_RCC_OscConfig+0x270>)
 800ba80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ba84:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	685b      	ldr	r3, [r3, #4]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d013      	beq.n	800bab6 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba8e:	f7fd f9f9 	bl	8008e84 <HAL_GetTick>
 800ba92:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ba94:	e008      	b.n	800baa8 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ba96:	f7fd f9f5 	bl	8008e84 <HAL_GetTick>
 800ba9a:	4602      	mov	r2, r0
 800ba9c:	693b      	ldr	r3, [r7, #16]
 800ba9e:	1ad3      	subs	r3, r2, r3
 800baa0:	2b64      	cmp	r3, #100	; 0x64
 800baa2:	d901      	bls.n	800baa8 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800baa4:	2303      	movs	r3, #3
 800baa6:	e1db      	b.n	800be60 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800baa8:	4b61      	ldr	r3, [pc, #388]	; (800bc30 <HAL_RCC_OscConfig+0x270>)
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d0f0      	beq.n	800ba96 <HAL_RCC_OscConfig+0xd6>
 800bab4:	e014      	b.n	800bae0 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bab6:	f7fd f9e5 	bl	8008e84 <HAL_GetTick>
 800baba:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800babc:	e008      	b.n	800bad0 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800babe:	f7fd f9e1 	bl	8008e84 <HAL_GetTick>
 800bac2:	4602      	mov	r2, r0
 800bac4:	693b      	ldr	r3, [r7, #16]
 800bac6:	1ad3      	subs	r3, r2, r3
 800bac8:	2b64      	cmp	r3, #100	; 0x64
 800baca:	d901      	bls.n	800bad0 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 800bacc:	2303      	movs	r3, #3
 800bace:	e1c7      	b.n	800be60 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bad0:	4b57      	ldr	r3, [pc, #348]	; (800bc30 <HAL_RCC_OscConfig+0x270>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d1f0      	bne.n	800babe <HAL_RCC_OscConfig+0xfe>
 800badc:	e000      	b.n	800bae0 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bade:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	f003 0302 	and.w	r3, r3, #2
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d06f      	beq.n	800bbcc <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800baec:	4b50      	ldr	r3, [pc, #320]	; (800bc30 <HAL_RCC_OscConfig+0x270>)
 800baee:	689b      	ldr	r3, [r3, #8]
 800baf0:	f003 030c 	and.w	r3, r3, #12
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d017      	beq.n	800bb28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800baf8:	4b4d      	ldr	r3, [pc, #308]	; (800bc30 <HAL_RCC_OscConfig+0x270>)
 800bafa:	689b      	ldr	r3, [r3, #8]
 800bafc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800bb00:	2b08      	cmp	r3, #8
 800bb02:	d105      	bne.n	800bb10 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800bb04:	4b4a      	ldr	r3, [pc, #296]	; (800bc30 <HAL_RCC_OscConfig+0x270>)
 800bb06:	685b      	ldr	r3, [r3, #4]
 800bb08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d00b      	beq.n	800bb28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bb10:	4b47      	ldr	r3, [pc, #284]	; (800bc30 <HAL_RCC_OscConfig+0x270>)
 800bb12:	689b      	ldr	r3, [r3, #8]
 800bb14:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800bb18:	2b0c      	cmp	r3, #12
 800bb1a:	d11c      	bne.n	800bb56 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bb1c:	4b44      	ldr	r3, [pc, #272]	; (800bc30 <HAL_RCC_OscConfig+0x270>)
 800bb1e:	685b      	ldr	r3, [r3, #4]
 800bb20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d116      	bne.n	800bb56 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bb28:	4b41      	ldr	r3, [pc, #260]	; (800bc30 <HAL_RCC_OscConfig+0x270>)
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	f003 0302 	and.w	r3, r3, #2
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d005      	beq.n	800bb40 <HAL_RCC_OscConfig+0x180>
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	68db      	ldr	r3, [r3, #12]
 800bb38:	2b01      	cmp	r3, #1
 800bb3a:	d001      	beq.n	800bb40 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	e18f      	b.n	800be60 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bb40:	4b3b      	ldr	r3, [pc, #236]	; (800bc30 <HAL_RCC_OscConfig+0x270>)
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	691b      	ldr	r3, [r3, #16]
 800bb4c:	00db      	lsls	r3, r3, #3
 800bb4e:	4938      	ldr	r1, [pc, #224]	; (800bc30 <HAL_RCC_OscConfig+0x270>)
 800bb50:	4313      	orrs	r3, r2
 800bb52:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bb54:	e03a      	b.n	800bbcc <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	68db      	ldr	r3, [r3, #12]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d020      	beq.n	800bba0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bb5e:	4b35      	ldr	r3, [pc, #212]	; (800bc34 <HAL_RCC_OscConfig+0x274>)
 800bb60:	2201      	movs	r2, #1
 800bb62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb64:	f7fd f98e 	bl	8008e84 <HAL_GetTick>
 800bb68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bb6a:	e008      	b.n	800bb7e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bb6c:	f7fd f98a 	bl	8008e84 <HAL_GetTick>
 800bb70:	4602      	mov	r2, r0
 800bb72:	693b      	ldr	r3, [r7, #16]
 800bb74:	1ad3      	subs	r3, r2, r3
 800bb76:	2b02      	cmp	r3, #2
 800bb78:	d901      	bls.n	800bb7e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800bb7a:	2303      	movs	r3, #3
 800bb7c:	e170      	b.n	800be60 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bb7e:	4b2c      	ldr	r3, [pc, #176]	; (800bc30 <HAL_RCC_OscConfig+0x270>)
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	f003 0302 	and.w	r3, r3, #2
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d0f0      	beq.n	800bb6c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bb8a:	4b29      	ldr	r3, [pc, #164]	; (800bc30 <HAL_RCC_OscConfig+0x270>)
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	691b      	ldr	r3, [r3, #16]
 800bb96:	00db      	lsls	r3, r3, #3
 800bb98:	4925      	ldr	r1, [pc, #148]	; (800bc30 <HAL_RCC_OscConfig+0x270>)
 800bb9a:	4313      	orrs	r3, r2
 800bb9c:	600b      	str	r3, [r1, #0]
 800bb9e:	e015      	b.n	800bbcc <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bba0:	4b24      	ldr	r3, [pc, #144]	; (800bc34 <HAL_RCC_OscConfig+0x274>)
 800bba2:	2200      	movs	r2, #0
 800bba4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bba6:	f7fd f96d 	bl	8008e84 <HAL_GetTick>
 800bbaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bbac:	e008      	b.n	800bbc0 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bbae:	f7fd f969 	bl	8008e84 <HAL_GetTick>
 800bbb2:	4602      	mov	r2, r0
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	1ad3      	subs	r3, r2, r3
 800bbb8:	2b02      	cmp	r3, #2
 800bbba:	d901      	bls.n	800bbc0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800bbbc:	2303      	movs	r3, #3
 800bbbe:	e14f      	b.n	800be60 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bbc0:	4b1b      	ldr	r3, [pc, #108]	; (800bc30 <HAL_RCC_OscConfig+0x270>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	f003 0302 	and.w	r3, r3, #2
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d1f0      	bne.n	800bbae <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	f003 0308 	and.w	r3, r3, #8
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d037      	beq.n	800bc48 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	695b      	ldr	r3, [r3, #20]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d016      	beq.n	800bc0e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bbe0:	4b15      	ldr	r3, [pc, #84]	; (800bc38 <HAL_RCC_OscConfig+0x278>)
 800bbe2:	2201      	movs	r2, #1
 800bbe4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bbe6:	f7fd f94d 	bl	8008e84 <HAL_GetTick>
 800bbea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bbec:	e008      	b.n	800bc00 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bbee:	f7fd f949 	bl	8008e84 <HAL_GetTick>
 800bbf2:	4602      	mov	r2, r0
 800bbf4:	693b      	ldr	r3, [r7, #16]
 800bbf6:	1ad3      	subs	r3, r2, r3
 800bbf8:	2b02      	cmp	r3, #2
 800bbfa:	d901      	bls.n	800bc00 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800bbfc:	2303      	movs	r3, #3
 800bbfe:	e12f      	b.n	800be60 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bc00:	4b0b      	ldr	r3, [pc, #44]	; (800bc30 <HAL_RCC_OscConfig+0x270>)
 800bc02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc04:	f003 0302 	and.w	r3, r3, #2
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d0f0      	beq.n	800bbee <HAL_RCC_OscConfig+0x22e>
 800bc0c:	e01c      	b.n	800bc48 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bc0e:	4b0a      	ldr	r3, [pc, #40]	; (800bc38 <HAL_RCC_OscConfig+0x278>)
 800bc10:	2200      	movs	r2, #0
 800bc12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bc14:	f7fd f936 	bl	8008e84 <HAL_GetTick>
 800bc18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bc1a:	e00f      	b.n	800bc3c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bc1c:	f7fd f932 	bl	8008e84 <HAL_GetTick>
 800bc20:	4602      	mov	r2, r0
 800bc22:	693b      	ldr	r3, [r7, #16]
 800bc24:	1ad3      	subs	r3, r2, r3
 800bc26:	2b02      	cmp	r3, #2
 800bc28:	d908      	bls.n	800bc3c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800bc2a:	2303      	movs	r3, #3
 800bc2c:	e118      	b.n	800be60 <HAL_RCC_OscConfig+0x4a0>
 800bc2e:	bf00      	nop
 800bc30:	40023800 	.word	0x40023800
 800bc34:	42470000 	.word	0x42470000
 800bc38:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bc3c:	4b8a      	ldr	r3, [pc, #552]	; (800be68 <HAL_RCC_OscConfig+0x4a8>)
 800bc3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc40:	f003 0302 	and.w	r3, r3, #2
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d1e9      	bne.n	800bc1c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	f003 0304 	and.w	r3, r3, #4
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	f000 8097 	beq.w	800bd84 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bc56:	2300      	movs	r3, #0
 800bc58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bc5a:	4b83      	ldr	r3, [pc, #524]	; (800be68 <HAL_RCC_OscConfig+0x4a8>)
 800bc5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d10f      	bne.n	800bc86 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bc66:	2300      	movs	r3, #0
 800bc68:	60fb      	str	r3, [r7, #12]
 800bc6a:	4b7f      	ldr	r3, [pc, #508]	; (800be68 <HAL_RCC_OscConfig+0x4a8>)
 800bc6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc6e:	4a7e      	ldr	r2, [pc, #504]	; (800be68 <HAL_RCC_OscConfig+0x4a8>)
 800bc70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bc74:	6413      	str	r3, [r2, #64]	; 0x40
 800bc76:	4b7c      	ldr	r3, [pc, #496]	; (800be68 <HAL_RCC_OscConfig+0x4a8>)
 800bc78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc7e:	60fb      	str	r3, [r7, #12]
 800bc80:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800bc82:	2301      	movs	r3, #1
 800bc84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bc86:	4b79      	ldr	r3, [pc, #484]	; (800be6c <HAL_RCC_OscConfig+0x4ac>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d118      	bne.n	800bcc4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800bc92:	4b76      	ldr	r3, [pc, #472]	; (800be6c <HAL_RCC_OscConfig+0x4ac>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	4a75      	ldr	r2, [pc, #468]	; (800be6c <HAL_RCC_OscConfig+0x4ac>)
 800bc98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bc9e:	f7fd f8f1 	bl	8008e84 <HAL_GetTick>
 800bca2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bca4:	e008      	b.n	800bcb8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bca6:	f7fd f8ed 	bl	8008e84 <HAL_GetTick>
 800bcaa:	4602      	mov	r2, r0
 800bcac:	693b      	ldr	r3, [r7, #16]
 800bcae:	1ad3      	subs	r3, r2, r3
 800bcb0:	2b02      	cmp	r3, #2
 800bcb2:	d901      	bls.n	800bcb8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800bcb4:	2303      	movs	r3, #3
 800bcb6:	e0d3      	b.n	800be60 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bcb8:	4b6c      	ldr	r3, [pc, #432]	; (800be6c <HAL_RCC_OscConfig+0x4ac>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d0f0      	beq.n	800bca6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	689b      	ldr	r3, [r3, #8]
 800bcc8:	2b01      	cmp	r3, #1
 800bcca:	d106      	bne.n	800bcda <HAL_RCC_OscConfig+0x31a>
 800bccc:	4b66      	ldr	r3, [pc, #408]	; (800be68 <HAL_RCC_OscConfig+0x4a8>)
 800bcce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcd0:	4a65      	ldr	r2, [pc, #404]	; (800be68 <HAL_RCC_OscConfig+0x4a8>)
 800bcd2:	f043 0301 	orr.w	r3, r3, #1
 800bcd6:	6713      	str	r3, [r2, #112]	; 0x70
 800bcd8:	e01c      	b.n	800bd14 <HAL_RCC_OscConfig+0x354>
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	689b      	ldr	r3, [r3, #8]
 800bcde:	2b05      	cmp	r3, #5
 800bce0:	d10c      	bne.n	800bcfc <HAL_RCC_OscConfig+0x33c>
 800bce2:	4b61      	ldr	r3, [pc, #388]	; (800be68 <HAL_RCC_OscConfig+0x4a8>)
 800bce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bce6:	4a60      	ldr	r2, [pc, #384]	; (800be68 <HAL_RCC_OscConfig+0x4a8>)
 800bce8:	f043 0304 	orr.w	r3, r3, #4
 800bcec:	6713      	str	r3, [r2, #112]	; 0x70
 800bcee:	4b5e      	ldr	r3, [pc, #376]	; (800be68 <HAL_RCC_OscConfig+0x4a8>)
 800bcf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcf2:	4a5d      	ldr	r2, [pc, #372]	; (800be68 <HAL_RCC_OscConfig+0x4a8>)
 800bcf4:	f043 0301 	orr.w	r3, r3, #1
 800bcf8:	6713      	str	r3, [r2, #112]	; 0x70
 800bcfa:	e00b      	b.n	800bd14 <HAL_RCC_OscConfig+0x354>
 800bcfc:	4b5a      	ldr	r3, [pc, #360]	; (800be68 <HAL_RCC_OscConfig+0x4a8>)
 800bcfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd00:	4a59      	ldr	r2, [pc, #356]	; (800be68 <HAL_RCC_OscConfig+0x4a8>)
 800bd02:	f023 0301 	bic.w	r3, r3, #1
 800bd06:	6713      	str	r3, [r2, #112]	; 0x70
 800bd08:	4b57      	ldr	r3, [pc, #348]	; (800be68 <HAL_RCC_OscConfig+0x4a8>)
 800bd0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd0c:	4a56      	ldr	r2, [pc, #344]	; (800be68 <HAL_RCC_OscConfig+0x4a8>)
 800bd0e:	f023 0304 	bic.w	r3, r3, #4
 800bd12:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	689b      	ldr	r3, [r3, #8]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d015      	beq.n	800bd48 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bd1c:	f7fd f8b2 	bl	8008e84 <HAL_GetTick>
 800bd20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bd22:	e00a      	b.n	800bd3a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bd24:	f7fd f8ae 	bl	8008e84 <HAL_GetTick>
 800bd28:	4602      	mov	r2, r0
 800bd2a:	693b      	ldr	r3, [r7, #16]
 800bd2c:	1ad3      	subs	r3, r2, r3
 800bd2e:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd32:	4293      	cmp	r3, r2
 800bd34:	d901      	bls.n	800bd3a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800bd36:	2303      	movs	r3, #3
 800bd38:	e092      	b.n	800be60 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bd3a:	4b4b      	ldr	r3, [pc, #300]	; (800be68 <HAL_RCC_OscConfig+0x4a8>)
 800bd3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd3e:	f003 0302 	and.w	r3, r3, #2
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d0ee      	beq.n	800bd24 <HAL_RCC_OscConfig+0x364>
 800bd46:	e014      	b.n	800bd72 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bd48:	f7fd f89c 	bl	8008e84 <HAL_GetTick>
 800bd4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bd4e:	e00a      	b.n	800bd66 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bd50:	f7fd f898 	bl	8008e84 <HAL_GetTick>
 800bd54:	4602      	mov	r2, r0
 800bd56:	693b      	ldr	r3, [r7, #16]
 800bd58:	1ad3      	subs	r3, r2, r3
 800bd5a:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd5e:	4293      	cmp	r3, r2
 800bd60:	d901      	bls.n	800bd66 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800bd62:	2303      	movs	r3, #3
 800bd64:	e07c      	b.n	800be60 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bd66:	4b40      	ldr	r3, [pc, #256]	; (800be68 <HAL_RCC_OscConfig+0x4a8>)
 800bd68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd6a:	f003 0302 	and.w	r3, r3, #2
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d1ee      	bne.n	800bd50 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bd72:	7dfb      	ldrb	r3, [r7, #23]
 800bd74:	2b01      	cmp	r3, #1
 800bd76:	d105      	bne.n	800bd84 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bd78:	4b3b      	ldr	r3, [pc, #236]	; (800be68 <HAL_RCC_OscConfig+0x4a8>)
 800bd7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd7c:	4a3a      	ldr	r2, [pc, #232]	; (800be68 <HAL_RCC_OscConfig+0x4a8>)
 800bd7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bd82:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	699b      	ldr	r3, [r3, #24]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d068      	beq.n	800be5e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800bd8c:	4b36      	ldr	r3, [pc, #216]	; (800be68 <HAL_RCC_OscConfig+0x4a8>)
 800bd8e:	689b      	ldr	r3, [r3, #8]
 800bd90:	f003 030c 	and.w	r3, r3, #12
 800bd94:	2b08      	cmp	r3, #8
 800bd96:	d060      	beq.n	800be5a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	699b      	ldr	r3, [r3, #24]
 800bd9c:	2b02      	cmp	r3, #2
 800bd9e:	d145      	bne.n	800be2c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bda0:	4b33      	ldr	r3, [pc, #204]	; (800be70 <HAL_RCC_OscConfig+0x4b0>)
 800bda2:	2200      	movs	r2, #0
 800bda4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bda6:	f7fd f86d 	bl	8008e84 <HAL_GetTick>
 800bdaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bdac:	e008      	b.n	800bdc0 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bdae:	f7fd f869 	bl	8008e84 <HAL_GetTick>
 800bdb2:	4602      	mov	r2, r0
 800bdb4:	693b      	ldr	r3, [r7, #16]
 800bdb6:	1ad3      	subs	r3, r2, r3
 800bdb8:	2b02      	cmp	r3, #2
 800bdba:	d901      	bls.n	800bdc0 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 800bdbc:	2303      	movs	r3, #3
 800bdbe:	e04f      	b.n	800be60 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bdc0:	4b29      	ldr	r3, [pc, #164]	; (800be68 <HAL_RCC_OscConfig+0x4a8>)
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d1f0      	bne.n	800bdae <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	69da      	ldr	r2, [r3, #28]
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	6a1b      	ldr	r3, [r3, #32]
 800bdd4:	431a      	orrs	r2, r3
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdda:	019b      	lsls	r3, r3, #6
 800bddc:	431a      	orrs	r2, r3
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bde2:	085b      	lsrs	r3, r3, #1
 800bde4:	3b01      	subs	r3, #1
 800bde6:	041b      	lsls	r3, r3, #16
 800bde8:	431a      	orrs	r2, r3
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdee:	061b      	lsls	r3, r3, #24
 800bdf0:	431a      	orrs	r2, r3
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdf6:	071b      	lsls	r3, r3, #28
 800bdf8:	491b      	ldr	r1, [pc, #108]	; (800be68 <HAL_RCC_OscConfig+0x4a8>)
 800bdfa:	4313      	orrs	r3, r2
 800bdfc:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bdfe:	4b1c      	ldr	r3, [pc, #112]	; (800be70 <HAL_RCC_OscConfig+0x4b0>)
 800be00:	2201      	movs	r2, #1
 800be02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be04:	f7fd f83e 	bl	8008e84 <HAL_GetTick>
 800be08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800be0a:	e008      	b.n	800be1e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800be0c:	f7fd f83a 	bl	8008e84 <HAL_GetTick>
 800be10:	4602      	mov	r2, r0
 800be12:	693b      	ldr	r3, [r7, #16]
 800be14:	1ad3      	subs	r3, r2, r3
 800be16:	2b02      	cmp	r3, #2
 800be18:	d901      	bls.n	800be1e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800be1a:	2303      	movs	r3, #3
 800be1c:	e020      	b.n	800be60 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800be1e:	4b12      	ldr	r3, [pc, #72]	; (800be68 <HAL_RCC_OscConfig+0x4a8>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be26:	2b00      	cmp	r3, #0
 800be28:	d0f0      	beq.n	800be0c <HAL_RCC_OscConfig+0x44c>
 800be2a:	e018      	b.n	800be5e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800be2c:	4b10      	ldr	r3, [pc, #64]	; (800be70 <HAL_RCC_OscConfig+0x4b0>)
 800be2e:	2200      	movs	r2, #0
 800be30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be32:	f7fd f827 	bl	8008e84 <HAL_GetTick>
 800be36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800be38:	e008      	b.n	800be4c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800be3a:	f7fd f823 	bl	8008e84 <HAL_GetTick>
 800be3e:	4602      	mov	r2, r0
 800be40:	693b      	ldr	r3, [r7, #16]
 800be42:	1ad3      	subs	r3, r2, r3
 800be44:	2b02      	cmp	r3, #2
 800be46:	d901      	bls.n	800be4c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800be48:	2303      	movs	r3, #3
 800be4a:	e009      	b.n	800be60 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800be4c:	4b06      	ldr	r3, [pc, #24]	; (800be68 <HAL_RCC_OscConfig+0x4a8>)
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be54:	2b00      	cmp	r3, #0
 800be56:	d1f0      	bne.n	800be3a <HAL_RCC_OscConfig+0x47a>
 800be58:	e001      	b.n	800be5e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800be5a:	2301      	movs	r3, #1
 800be5c:	e000      	b.n	800be60 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800be5e:	2300      	movs	r3, #0
}
 800be60:	4618      	mov	r0, r3
 800be62:	3718      	adds	r7, #24
 800be64:	46bd      	mov	sp, r7
 800be66:	bd80      	pop	{r7, pc}
 800be68:	40023800 	.word	0x40023800
 800be6c:	40007000 	.word	0x40007000
 800be70:	42470060 	.word	0x42470060

0800be74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b082      	sub	sp, #8
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d101      	bne.n	800be86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800be82:	2301      	movs	r3, #1
 800be84:	e056      	b.n	800bf34 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	2200      	movs	r2, #0
 800be8a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800be92:	b2db      	uxtb	r3, r3
 800be94:	2b00      	cmp	r3, #0
 800be96:	d106      	bne.n	800bea6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	2200      	movs	r2, #0
 800be9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bea0:	6878      	ldr	r0, [r7, #4]
 800bea2:	f005 fe25 	bl	8011af0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	2202      	movs	r2, #2
 800beaa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	681a      	ldr	r2, [r3, #0]
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bebc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	685a      	ldr	r2, [r3, #4]
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	689b      	ldr	r3, [r3, #8]
 800bec6:	431a      	orrs	r2, r3
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	68db      	ldr	r3, [r3, #12]
 800becc:	431a      	orrs	r2, r3
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	691b      	ldr	r3, [r3, #16]
 800bed2:	431a      	orrs	r2, r3
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	695b      	ldr	r3, [r3, #20]
 800bed8:	431a      	orrs	r2, r3
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	699b      	ldr	r3, [r3, #24]
 800bede:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bee2:	431a      	orrs	r2, r3
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	69db      	ldr	r3, [r3, #28]
 800bee8:	431a      	orrs	r2, r3
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6a1b      	ldr	r3, [r3, #32]
 800beee:	ea42 0103 	orr.w	r1, r2, r3
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	430a      	orrs	r2, r1
 800befc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	699b      	ldr	r3, [r3, #24]
 800bf02:	0c1b      	lsrs	r3, r3, #16
 800bf04:	f003 0104 	and.w	r1, r3, #4
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	430a      	orrs	r2, r1
 800bf12:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	69da      	ldr	r2, [r3, #28]
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bf22:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2200      	movs	r2, #0
 800bf28:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	2201      	movs	r2, #1
 800bf2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800bf32:	2300      	movs	r3, #0
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	3708      	adds	r7, #8
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}

0800bf3c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b08c      	sub	sp, #48	; 0x30
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	60f8      	str	r0, [r7, #12]
 800bf44:	60b9      	str	r1, [r7, #8]
 800bf46:	607a      	str	r2, [r7, #4]
 800bf48:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800bf4a:	2301      	movs	r3, #1
 800bf4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800bf4e:	2300      	movs	r3, #0
 800bf50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bf5a:	2b01      	cmp	r3, #1
 800bf5c:	d101      	bne.n	800bf62 <HAL_SPI_TransmitReceive+0x26>
 800bf5e:	2302      	movs	r3, #2
 800bf60:	e18a      	b.n	800c278 <HAL_SPI_TransmitReceive+0x33c>
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	2201      	movs	r2, #1
 800bf66:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bf6a:	f7fc ff8b 	bl	8008e84 <HAL_GetTick>
 800bf6e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bf76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	685b      	ldr	r3, [r3, #4]
 800bf7e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800bf80:	887b      	ldrh	r3, [r7, #2]
 800bf82:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800bf84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bf88:	2b01      	cmp	r3, #1
 800bf8a:	d00f      	beq.n	800bfac <HAL_SPI_TransmitReceive+0x70>
 800bf8c:	69fb      	ldr	r3, [r7, #28]
 800bf8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bf92:	d107      	bne.n	800bfa4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	689b      	ldr	r3, [r3, #8]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d103      	bne.n	800bfa4 <HAL_SPI_TransmitReceive+0x68>
 800bf9c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bfa0:	2b04      	cmp	r3, #4
 800bfa2:	d003      	beq.n	800bfac <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800bfa4:	2302      	movs	r3, #2
 800bfa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800bfaa:	e15b      	b.n	800c264 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d005      	beq.n	800bfbe <HAL_SPI_TransmitReceive+0x82>
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d002      	beq.n	800bfbe <HAL_SPI_TransmitReceive+0x82>
 800bfb8:	887b      	ldrh	r3, [r7, #2]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d103      	bne.n	800bfc6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800bfbe:	2301      	movs	r3, #1
 800bfc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800bfc4:	e14e      	b.n	800c264 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800bfcc:	b2db      	uxtb	r3, r3
 800bfce:	2b04      	cmp	r3, #4
 800bfd0:	d003      	beq.n	800bfda <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	2205      	movs	r2, #5
 800bfd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	2200      	movs	r2, #0
 800bfde:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	687a      	ldr	r2, [r7, #4]
 800bfe4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	887a      	ldrh	r2, [r7, #2]
 800bfea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	887a      	ldrh	r2, [r7, #2]
 800bff0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	68ba      	ldr	r2, [r7, #8]
 800bff6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	887a      	ldrh	r2, [r7, #2]
 800bffc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	887a      	ldrh	r2, [r7, #2]
 800c002:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	2200      	movs	r2, #0
 800c008:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	2200      	movs	r2, #0
 800c00e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c01a:	2b40      	cmp	r3, #64	; 0x40
 800c01c:	d007      	beq.n	800c02e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	681a      	ldr	r2, [r3, #0]
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c02c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	68db      	ldr	r3, [r3, #12]
 800c032:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c036:	d178      	bne.n	800c12a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	685b      	ldr	r3, [r3, #4]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d002      	beq.n	800c046 <HAL_SPI_TransmitReceive+0x10a>
 800c040:	8b7b      	ldrh	r3, [r7, #26]
 800c042:	2b01      	cmp	r3, #1
 800c044:	d166      	bne.n	800c114 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c04a:	881a      	ldrh	r2, [r3, #0]
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c056:	1c9a      	adds	r2, r3, #2
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c060:	b29b      	uxth	r3, r3
 800c062:	3b01      	subs	r3, #1
 800c064:	b29a      	uxth	r2, r3
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c06a:	e053      	b.n	800c114 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	689b      	ldr	r3, [r3, #8]
 800c072:	f003 0302 	and.w	r3, r3, #2
 800c076:	2b02      	cmp	r3, #2
 800c078:	d11b      	bne.n	800c0b2 <HAL_SPI_TransmitReceive+0x176>
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c07e:	b29b      	uxth	r3, r3
 800c080:	2b00      	cmp	r3, #0
 800c082:	d016      	beq.n	800c0b2 <HAL_SPI_TransmitReceive+0x176>
 800c084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c086:	2b01      	cmp	r3, #1
 800c088:	d113      	bne.n	800c0b2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c08e:	881a      	ldrh	r2, [r3, #0]
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c09a:	1c9a      	adds	r2, r3, #2
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c0a4:	b29b      	uxth	r3, r3
 800c0a6:	3b01      	subs	r3, #1
 800c0a8:	b29a      	uxth	r2, r3
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	689b      	ldr	r3, [r3, #8]
 800c0b8:	f003 0301 	and.w	r3, r3, #1
 800c0bc:	2b01      	cmp	r3, #1
 800c0be:	d119      	bne.n	800c0f4 <HAL_SPI_TransmitReceive+0x1b8>
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c0c4:	b29b      	uxth	r3, r3
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d014      	beq.n	800c0f4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	68da      	ldr	r2, [r3, #12]
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0d4:	b292      	uxth	r2, r2
 800c0d6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0dc:	1c9a      	adds	r2, r3, #2
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c0e6:	b29b      	uxth	r3, r3
 800c0e8:	3b01      	subs	r3, #1
 800c0ea:	b29a      	uxth	r2, r3
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c0f0:	2301      	movs	r3, #1
 800c0f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800c0f4:	f7fc fec6 	bl	8008e84 <HAL_GetTick>
 800c0f8:	4602      	mov	r2, r0
 800c0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0fc:	1ad3      	subs	r3, r2, r3
 800c0fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c100:	429a      	cmp	r2, r3
 800c102:	d807      	bhi.n	800c114 <HAL_SPI_TransmitReceive+0x1d8>
 800c104:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c10a:	d003      	beq.n	800c114 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800c10c:	2303      	movs	r3, #3
 800c10e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c112:	e0a7      	b.n	800c264 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c118:	b29b      	uxth	r3, r3
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d1a6      	bne.n	800c06c <HAL_SPI_TransmitReceive+0x130>
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c122:	b29b      	uxth	r3, r3
 800c124:	2b00      	cmp	r3, #0
 800c126:	d1a1      	bne.n	800c06c <HAL_SPI_TransmitReceive+0x130>
 800c128:	e07c      	b.n	800c224 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	685b      	ldr	r3, [r3, #4]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d002      	beq.n	800c138 <HAL_SPI_TransmitReceive+0x1fc>
 800c132:	8b7b      	ldrh	r3, [r7, #26]
 800c134:	2b01      	cmp	r3, #1
 800c136:	d16b      	bne.n	800c210 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	330c      	adds	r3, #12
 800c142:	7812      	ldrb	r2, [r2, #0]
 800c144:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c14a:	1c5a      	adds	r2, r3, #1
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c154:	b29b      	uxth	r3, r3
 800c156:	3b01      	subs	r3, #1
 800c158:	b29a      	uxth	r2, r3
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c15e:	e057      	b.n	800c210 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	689b      	ldr	r3, [r3, #8]
 800c166:	f003 0302 	and.w	r3, r3, #2
 800c16a:	2b02      	cmp	r3, #2
 800c16c:	d11c      	bne.n	800c1a8 <HAL_SPI_TransmitReceive+0x26c>
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c172:	b29b      	uxth	r3, r3
 800c174:	2b00      	cmp	r3, #0
 800c176:	d017      	beq.n	800c1a8 <HAL_SPI_TransmitReceive+0x26c>
 800c178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c17a:	2b01      	cmp	r3, #1
 800c17c:	d114      	bne.n	800c1a8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	330c      	adds	r3, #12
 800c188:	7812      	ldrb	r2, [r2, #0]
 800c18a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c190:	1c5a      	adds	r2, r3, #1
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c19a:	b29b      	uxth	r3, r3
 800c19c:	3b01      	subs	r3, #1
 800c19e:	b29a      	uxth	r2, r3
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	689b      	ldr	r3, [r3, #8]
 800c1ae:	f003 0301 	and.w	r3, r3, #1
 800c1b2:	2b01      	cmp	r3, #1
 800c1b4:	d119      	bne.n	800c1ea <HAL_SPI_TransmitReceive+0x2ae>
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c1ba:	b29b      	uxth	r3, r3
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d014      	beq.n	800c1ea <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	68da      	ldr	r2, [r3, #12]
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1ca:	b2d2      	uxtb	r2, r2
 800c1cc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1d2:	1c5a      	adds	r2, r3, #1
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c1dc:	b29b      	uxth	r3, r3
 800c1de:	3b01      	subs	r3, #1
 800c1e0:	b29a      	uxth	r2, r3
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800c1e6:	2301      	movs	r3, #1
 800c1e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800c1ea:	f7fc fe4b 	bl	8008e84 <HAL_GetTick>
 800c1ee:	4602      	mov	r2, r0
 800c1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1f2:	1ad3      	subs	r3, r2, r3
 800c1f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c1f6:	429a      	cmp	r2, r3
 800c1f8:	d803      	bhi.n	800c202 <HAL_SPI_TransmitReceive+0x2c6>
 800c1fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c200:	d102      	bne.n	800c208 <HAL_SPI_TransmitReceive+0x2cc>
 800c202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c204:	2b00      	cmp	r3, #0
 800c206:	d103      	bne.n	800c210 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800c208:	2303      	movs	r3, #3
 800c20a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800c20e:	e029      	b.n	800c264 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c214:	b29b      	uxth	r3, r3
 800c216:	2b00      	cmp	r3, #0
 800c218:	d1a2      	bne.n	800c160 <HAL_SPI_TransmitReceive+0x224>
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c21e:	b29b      	uxth	r3, r3
 800c220:	2b00      	cmp	r3, #0
 800c222:	d19d      	bne.n	800c160 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800c224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c226:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800c228:	68f8      	ldr	r0, [r7, #12]
 800c22a:	f000 fb1b 	bl	800c864 <SPI_EndRxTxTransaction>
 800c22e:	4603      	mov	r3, r0
 800c230:	2b00      	cmp	r3, #0
 800c232:	d006      	beq.n	800c242 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800c234:	2301      	movs	r3, #1
 800c236:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	2220      	movs	r2, #32
 800c23e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800c240:	e010      	b.n	800c264 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	689b      	ldr	r3, [r3, #8]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d10b      	bne.n	800c262 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c24a:	2300      	movs	r3, #0
 800c24c:	617b      	str	r3, [r7, #20]
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	68db      	ldr	r3, [r3, #12]
 800c254:	617b      	str	r3, [r7, #20]
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	689b      	ldr	r3, [r3, #8]
 800c25c:	617b      	str	r3, [r7, #20]
 800c25e:	697b      	ldr	r3, [r7, #20]
 800c260:	e000      	b.n	800c264 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800c262:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	2201      	movs	r2, #1
 800c268:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	2200      	movs	r2, #0
 800c270:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c274:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800c278:	4618      	mov	r0, r3
 800c27a:	3730      	adds	r7, #48	; 0x30
 800c27c:	46bd      	mov	sp, r7
 800c27e:	bd80      	pop	{r7, pc}

0800c280 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800c280:	b480      	push	{r7}
 800c282:	b087      	sub	sp, #28
 800c284:	af00      	add	r7, sp, #0
 800c286:	60f8      	str	r0, [r7, #12]
 800c288:	60b9      	str	r1, [r7, #8]
 800c28a:	607a      	str	r2, [r7, #4]
 800c28c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800c28e:	2300      	movs	r3, #0
 800c290:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800c298:	2b01      	cmp	r3, #1
 800c29a:	d101      	bne.n	800c2a0 <HAL_SPI_TransmitReceive_IT+0x20>
 800c29c:	2302      	movs	r3, #2
 800c29e:	e075      	b.n	800c38c <HAL_SPI_TransmitReceive_IT+0x10c>
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	2201      	movs	r2, #1
 800c2a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c2ae:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	685b      	ldr	r3, [r3, #4]
 800c2b4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800c2b6:	7dbb      	ldrb	r3, [r7, #22]
 800c2b8:	2b01      	cmp	r3, #1
 800c2ba:	d00d      	beq.n	800c2d8 <HAL_SPI_TransmitReceive_IT+0x58>
 800c2bc:	693b      	ldr	r3, [r7, #16]
 800c2be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c2c2:	d106      	bne.n	800c2d2 <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	689b      	ldr	r3, [r3, #8]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d102      	bne.n	800c2d2 <HAL_SPI_TransmitReceive_IT+0x52>
 800c2cc:	7dbb      	ldrb	r3, [r7, #22]
 800c2ce:	2b04      	cmp	r3, #4
 800c2d0:	d002      	beq.n	800c2d8 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800c2d2:	2302      	movs	r3, #2
 800c2d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c2d6:	e054      	b.n	800c382 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800c2d8:	68bb      	ldr	r3, [r7, #8]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d005      	beq.n	800c2ea <HAL_SPI_TransmitReceive_IT+0x6a>
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d002      	beq.n	800c2ea <HAL_SPI_TransmitReceive_IT+0x6a>
 800c2e4:	887b      	ldrh	r3, [r7, #2]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d102      	bne.n	800c2f0 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 800c2ea:	2301      	movs	r3, #1
 800c2ec:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c2ee:	e048      	b.n	800c382 <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c2f6:	b2db      	uxtb	r3, r3
 800c2f8:	2b04      	cmp	r3, #4
 800c2fa:	d003      	beq.n	800c304 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	2205      	movs	r2, #5
 800c300:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	2200      	movs	r2, #0
 800c308:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	68ba      	ldr	r2, [r7, #8]
 800c30e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	887a      	ldrh	r2, [r7, #2]
 800c314:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	887a      	ldrh	r2, [r7, #2]
 800c31a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800c31c:	68fb      	ldr	r3, [r7, #12]
 800c31e:	687a      	ldr	r2, [r7, #4]
 800c320:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	887a      	ldrh	r2, [r7, #2]
 800c326:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	887a      	ldrh	r2, [r7, #2]
 800c32c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	68db      	ldr	r3, [r3, #12]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d006      	beq.n	800c344 <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	4a17      	ldr	r2, [pc, #92]	; (800c398 <HAL_SPI_TransmitReceive_IT+0x118>)
 800c33a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	4a17      	ldr	r2, [pc, #92]	; (800c39c <HAL_SPI_TransmitReceive_IT+0x11c>)
 800c340:	645a      	str	r2, [r3, #68]	; 0x44
 800c342:	e005      	b.n	800c350 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	4a16      	ldr	r2, [pc, #88]	; (800c3a0 <HAL_SPI_TransmitReceive_IT+0x120>)
 800c348:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	4a15      	ldr	r2, [pc, #84]	; (800c3a4 <HAL_SPI_TransmitReceive_IT+0x124>)
 800c34e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	685a      	ldr	r2, [r3, #4]
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800c35e:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c36a:	2b40      	cmp	r3, #64	; 0x40
 800c36c:	d008      	beq.n	800c380 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	681a      	ldr	r2, [r3, #0]
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c37c:	601a      	str	r2, [r3, #0]
 800c37e:	e000      	b.n	800c382 <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 800c380:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	2200      	movs	r2, #0
 800c386:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800c38a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c38c:	4618      	mov	r0, r3
 800c38e:	371c      	adds	r7, #28
 800c390:	46bd      	mov	sp, r7
 800c392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c396:	4770      	bx	lr
 800c398:	0800c6d1 	.word	0x0800c6d1
 800c39c:	0800c731 	.word	0x0800c731
 800c3a0:	0800c60d 	.word	0x0800c60d
 800c3a4:	0800c671 	.word	0x0800c671

0800c3a8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b088      	sub	sp, #32
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	685b      	ldr	r3, [r3, #4]
 800c3b6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	689b      	ldr	r3, [r3, #8]
 800c3be:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800c3c0:	69bb      	ldr	r3, [r7, #24]
 800c3c2:	099b      	lsrs	r3, r3, #6
 800c3c4:	f003 0301 	and.w	r3, r3, #1
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d10f      	bne.n	800c3ec <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800c3cc:	69bb      	ldr	r3, [r7, #24]
 800c3ce:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d00a      	beq.n	800c3ec <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800c3d6:	69fb      	ldr	r3, [r7, #28]
 800c3d8:	099b      	lsrs	r3, r3, #6
 800c3da:	f003 0301 	and.w	r3, r3, #1
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d004      	beq.n	800c3ec <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	4798      	blx	r3
    return;
 800c3ea:	e0d8      	b.n	800c59e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800c3ec:	69bb      	ldr	r3, [r7, #24]
 800c3ee:	085b      	lsrs	r3, r3, #1
 800c3f0:	f003 0301 	and.w	r3, r3, #1
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d00a      	beq.n	800c40e <HAL_SPI_IRQHandler+0x66>
 800c3f8:	69fb      	ldr	r3, [r7, #28]
 800c3fa:	09db      	lsrs	r3, r3, #7
 800c3fc:	f003 0301 	and.w	r3, r3, #1
 800c400:	2b00      	cmp	r3, #0
 800c402:	d004      	beq.n	800c40e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c408:	6878      	ldr	r0, [r7, #4]
 800c40a:	4798      	blx	r3
    return;
 800c40c:	e0c7      	b.n	800c59e <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800c40e:	69bb      	ldr	r3, [r7, #24]
 800c410:	095b      	lsrs	r3, r3, #5
 800c412:	f003 0301 	and.w	r3, r3, #1
 800c416:	2b00      	cmp	r3, #0
 800c418:	d10c      	bne.n	800c434 <HAL_SPI_IRQHandler+0x8c>
 800c41a:	69bb      	ldr	r3, [r7, #24]
 800c41c:	099b      	lsrs	r3, r3, #6
 800c41e:	f003 0301 	and.w	r3, r3, #1
 800c422:	2b00      	cmp	r3, #0
 800c424:	d106      	bne.n	800c434 <HAL_SPI_IRQHandler+0x8c>
 800c426:	69bb      	ldr	r3, [r7, #24]
 800c428:	0a1b      	lsrs	r3, r3, #8
 800c42a:	f003 0301 	and.w	r3, r3, #1
 800c42e:	2b00      	cmp	r3, #0
 800c430:	f000 80b5 	beq.w	800c59e <HAL_SPI_IRQHandler+0x1f6>
 800c434:	69fb      	ldr	r3, [r7, #28]
 800c436:	095b      	lsrs	r3, r3, #5
 800c438:	f003 0301 	and.w	r3, r3, #1
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	f000 80ae 	beq.w	800c59e <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800c442:	69bb      	ldr	r3, [r7, #24]
 800c444:	099b      	lsrs	r3, r3, #6
 800c446:	f003 0301 	and.w	r3, r3, #1
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d023      	beq.n	800c496 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c454:	b2db      	uxtb	r3, r3
 800c456:	2b03      	cmp	r3, #3
 800c458:	d011      	beq.n	800c47e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c45e:	f043 0204 	orr.w	r2, r3, #4
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c466:	2300      	movs	r3, #0
 800c468:	617b      	str	r3, [r7, #20]
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	68db      	ldr	r3, [r3, #12]
 800c470:	617b      	str	r3, [r7, #20]
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	689b      	ldr	r3, [r3, #8]
 800c478:	617b      	str	r3, [r7, #20]
 800c47a:	697b      	ldr	r3, [r7, #20]
 800c47c:	e00b      	b.n	800c496 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c47e:	2300      	movs	r3, #0
 800c480:	613b      	str	r3, [r7, #16]
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	68db      	ldr	r3, [r3, #12]
 800c488:	613b      	str	r3, [r7, #16]
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	689b      	ldr	r3, [r3, #8]
 800c490:	613b      	str	r3, [r7, #16]
 800c492:	693b      	ldr	r3, [r7, #16]
        return;
 800c494:	e083      	b.n	800c59e <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800c496:	69bb      	ldr	r3, [r7, #24]
 800c498:	095b      	lsrs	r3, r3, #5
 800c49a:	f003 0301 	and.w	r3, r3, #1
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d014      	beq.n	800c4cc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4a6:	f043 0201 	orr.w	r2, r3, #1
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	60fb      	str	r3, [r7, #12]
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	689b      	ldr	r3, [r3, #8]
 800c4b8:	60fb      	str	r3, [r7, #12]
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	681a      	ldr	r2, [r3, #0]
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c4c8:	601a      	str	r2, [r3, #0]
 800c4ca:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800c4cc:	69bb      	ldr	r3, [r7, #24]
 800c4ce:	0a1b      	lsrs	r3, r3, #8
 800c4d0:	f003 0301 	and.w	r3, r3, #1
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d00c      	beq.n	800c4f2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4dc:	f043 0208 	orr.w	r2, r3, #8
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	60bb      	str	r3, [r7, #8]
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	689b      	ldr	r3, [r3, #8]
 800c4ee:	60bb      	str	r3, [r7, #8]
 800c4f0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d050      	beq.n	800c59c <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	685a      	ldr	r2, [r3, #4]
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c508:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2201      	movs	r2, #1
 800c50e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800c512:	69fb      	ldr	r3, [r7, #28]
 800c514:	f003 0302 	and.w	r3, r3, #2
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d104      	bne.n	800c526 <HAL_SPI_IRQHandler+0x17e>
 800c51c:	69fb      	ldr	r3, [r7, #28]
 800c51e:	f003 0301 	and.w	r3, r3, #1
 800c522:	2b00      	cmp	r3, #0
 800c524:	d034      	beq.n	800c590 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	685a      	ldr	r2, [r3, #4]
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	f022 0203 	bic.w	r2, r2, #3
 800c534:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d011      	beq.n	800c562 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c542:	4a18      	ldr	r2, [pc, #96]	; (800c5a4 <HAL_SPI_IRQHandler+0x1fc>)
 800c544:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c54a:	4618      	mov	r0, r3
 800c54c:	f7fe f850 	bl	800a5f0 <HAL_DMA_Abort_IT>
 800c550:	4603      	mov	r3, r0
 800c552:	2b00      	cmp	r3, #0
 800c554:	d005      	beq.n	800c562 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c55a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c566:	2b00      	cmp	r3, #0
 800c568:	d016      	beq.n	800c598 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c56e:	4a0d      	ldr	r2, [pc, #52]	; (800c5a4 <HAL_SPI_IRQHandler+0x1fc>)
 800c570:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c576:	4618      	mov	r0, r3
 800c578:	f7fe f83a 	bl	800a5f0 <HAL_DMA_Abort_IT>
 800c57c:	4603      	mov	r3, r0
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d00a      	beq.n	800c598 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c586:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800c58e:	e003      	b.n	800c598 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800c590:	6878      	ldr	r0, [r7, #4]
 800c592:	f000 f81d 	bl	800c5d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800c596:	e000      	b.n	800c59a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800c598:	bf00      	nop
    return;
 800c59a:	bf00      	nop
 800c59c:	bf00      	nop
  }
}
 800c59e:	3720      	adds	r7, #32
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	bd80      	pop	{r7, pc}
 800c5a4:	0800c5e5 	.word	0x0800c5e5

0800c5a8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c5a8:	b480      	push	{r7}
 800c5aa:	b083      	sub	sp, #12
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800c5b0:	bf00      	nop
 800c5b2:	370c      	adds	r7, #12
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ba:	4770      	bx	lr

0800c5bc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800c5bc:	b480      	push	{r7}
 800c5be:	b083      	sub	sp, #12
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800c5c4:	bf00      	nop
 800c5c6:	370c      	adds	r7, #12
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ce:	4770      	bx	lr

0800c5d0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800c5d0:	b480      	push	{r7}
 800c5d2:	b083      	sub	sp, #12
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800c5d8:	bf00      	nop
 800c5da:	370c      	adds	r7, #12
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e2:	4770      	bx	lr

0800c5e4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b084      	sub	sp, #16
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5f0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800c5fe:	68f8      	ldr	r0, [r7, #12]
 800c600:	f7ff ffe6 	bl	800c5d0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800c604:	bf00      	nop
 800c606:	3710      	adds	r7, #16
 800c608:	46bd      	mov	sp, r7
 800c60a:	bd80      	pop	{r7, pc}

0800c60c <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800c60c:	b580      	push	{r7, lr}
 800c60e:	b082      	sub	sp, #8
 800c610:	af00      	add	r7, sp, #0
 800c612:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	f103 020c 	add.w	r2, r3, #12
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c620:	7812      	ldrb	r2, [r2, #0]
 800c622:	b2d2      	uxtb	r2, r2
 800c624:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c62a:	1c5a      	adds	r2, r3, #1
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c634:	b29b      	uxth	r3, r3
 800c636:	3b01      	subs	r3, #1
 800c638:	b29a      	uxth	r2, r3
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c642:	b29b      	uxth	r3, r3
 800c644:	2b00      	cmp	r3, #0
 800c646:	d10f      	bne.n	800c668 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800c648:	687b      	ldr	r3, [r7, #4]
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	685a      	ldr	r2, [r3, #4]
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800c656:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c65c:	b29b      	uxth	r3, r3
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d102      	bne.n	800c668 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 800c662:	6878      	ldr	r0, [r7, #4]
 800c664:	f000 f940 	bl	800c8e8 <SPI_CloseRxTx_ISR>
    }
  }
}
 800c668:	bf00      	nop
 800c66a:	3708      	adds	r7, #8
 800c66c:	46bd      	mov	sp, r7
 800c66e:	bd80      	pop	{r7, pc}

0800c670 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800c670:	b580      	push	{r7, lr}
 800c672:	b082      	sub	sp, #8
 800c674:	af00      	add	r7, sp, #0
 800c676:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	330c      	adds	r3, #12
 800c682:	7812      	ldrb	r2, [r2, #0]
 800c684:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c68a:	1c5a      	adds	r2, r3, #1
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c694:	b29b      	uxth	r3, r3
 800c696:	3b01      	subs	r3, #1
 800c698:	b29a      	uxth	r2, r3
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c6a2:	b29b      	uxth	r3, r3
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d10f      	bne.n	800c6c8 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	685a      	ldr	r2, [r3, #4]
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c6b6:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c6bc:	b29b      	uxth	r3, r3
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d102      	bne.n	800c6c8 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	f000 f910 	bl	800c8e8 <SPI_CloseRxTx_ISR>
    }
  }
}
 800c6c8:	bf00      	nop
 800c6ca:	3708      	adds	r7, #8
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	bd80      	pop	{r7, pc}

0800c6d0 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b082      	sub	sp, #8
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	68da      	ldr	r2, [r3, #12]
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6e2:	b292      	uxth	r2, r2
 800c6e4:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6ea:	1c9a      	adds	r2, r3, #2
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c6f4:	b29b      	uxth	r3, r3
 800c6f6:	3b01      	subs	r3, #1
 800c6f8:	b29a      	uxth	r2, r3
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c702:	b29b      	uxth	r3, r3
 800c704:	2b00      	cmp	r3, #0
 800c706:	d10f      	bne.n	800c728 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	685a      	ldr	r2, [r3, #4]
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c716:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c71c:	b29b      	uxth	r3, r3
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d102      	bne.n	800c728 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800c722:	6878      	ldr	r0, [r7, #4]
 800c724:	f000 f8e0 	bl	800c8e8 <SPI_CloseRxTx_ISR>
    }
  }
}
 800c728:	bf00      	nop
 800c72a:	3708      	adds	r7, #8
 800c72c:	46bd      	mov	sp, r7
 800c72e:	bd80      	pop	{r7, pc}

0800c730 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800c730:	b580      	push	{r7, lr}
 800c732:	b082      	sub	sp, #8
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c73c:	881a      	ldrh	r2, [r3, #0]
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c748:	1c9a      	adds	r2, r3, #2
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c752:	b29b      	uxth	r3, r3
 800c754:	3b01      	subs	r3, #1
 800c756:	b29a      	uxth	r2, r3
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800c760:	b29b      	uxth	r3, r3
 800c762:	2b00      	cmp	r3, #0
 800c764:	d10f      	bne.n	800c786 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	685a      	ldr	r2, [r3, #4]
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c774:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c77a:	b29b      	uxth	r3, r3
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d102      	bne.n	800c786 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f000 f8b1 	bl	800c8e8 <SPI_CloseRxTx_ISR>
    }
  }
}
 800c786:	bf00      	nop
 800c788:	3708      	adds	r7, #8
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bd80      	pop	{r7, pc}

0800c78e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800c78e:	b580      	push	{r7, lr}
 800c790:	b084      	sub	sp, #16
 800c792:	af00      	add	r7, sp, #0
 800c794:	60f8      	str	r0, [r7, #12]
 800c796:	60b9      	str	r1, [r7, #8]
 800c798:	603b      	str	r3, [r7, #0]
 800c79a:	4613      	mov	r3, r2
 800c79c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c79e:	e04c      	b.n	800c83a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7a6:	d048      	beq.n	800c83a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800c7a8:	f7fc fb6c 	bl	8008e84 <HAL_GetTick>
 800c7ac:	4602      	mov	r2, r0
 800c7ae:	69bb      	ldr	r3, [r7, #24]
 800c7b0:	1ad3      	subs	r3, r2, r3
 800c7b2:	683a      	ldr	r2, [r7, #0]
 800c7b4:	429a      	cmp	r2, r3
 800c7b6:	d902      	bls.n	800c7be <SPI_WaitFlagStateUntilTimeout+0x30>
 800c7b8:	683b      	ldr	r3, [r7, #0]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d13d      	bne.n	800c83a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	685a      	ldr	r2, [r3, #4]
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800c7cc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	685b      	ldr	r3, [r3, #4]
 800c7d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c7d6:	d111      	bne.n	800c7fc <SPI_WaitFlagStateUntilTimeout+0x6e>
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	689b      	ldr	r3, [r3, #8]
 800c7dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c7e0:	d004      	beq.n	800c7ec <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	689b      	ldr	r3, [r3, #8]
 800c7e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c7ea:	d107      	bne.n	800c7fc <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	681a      	ldr	r2, [r3, #0]
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c7fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c800:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c804:	d10f      	bne.n	800c826 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	681a      	ldr	r2, [r3, #0]
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c814:	601a      	str	r2, [r3, #0]
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	681a      	ldr	r2, [r3, #0]
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c824:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	2201      	movs	r2, #1
 800c82a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	2200      	movs	r2, #0
 800c832:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800c836:	2303      	movs	r3, #3
 800c838:	e00f      	b.n	800c85a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	689a      	ldr	r2, [r3, #8]
 800c840:	68bb      	ldr	r3, [r7, #8]
 800c842:	4013      	ands	r3, r2
 800c844:	68ba      	ldr	r2, [r7, #8]
 800c846:	429a      	cmp	r2, r3
 800c848:	bf0c      	ite	eq
 800c84a:	2301      	moveq	r3, #1
 800c84c:	2300      	movne	r3, #0
 800c84e:	b2db      	uxtb	r3, r3
 800c850:	461a      	mov	r2, r3
 800c852:	79fb      	ldrb	r3, [r7, #7]
 800c854:	429a      	cmp	r2, r3
 800c856:	d1a3      	bne.n	800c7a0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800c858:	2300      	movs	r3, #0
}
 800c85a:	4618      	mov	r0, r3
 800c85c:	3710      	adds	r7, #16
 800c85e:	46bd      	mov	sp, r7
 800c860:	bd80      	pop	{r7, pc}
	...

0800c864 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b088      	sub	sp, #32
 800c868:	af02      	add	r7, sp, #8
 800c86a:	60f8      	str	r0, [r7, #12]
 800c86c:	60b9      	str	r1, [r7, #8]
 800c86e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800c870:	4b1b      	ldr	r3, [pc, #108]	; (800c8e0 <SPI_EndRxTxTransaction+0x7c>)
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	4a1b      	ldr	r2, [pc, #108]	; (800c8e4 <SPI_EndRxTxTransaction+0x80>)
 800c876:	fba2 2303 	umull	r2, r3, r2, r3
 800c87a:	0d5b      	lsrs	r3, r3, #21
 800c87c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c880:	fb02 f303 	mul.w	r3, r2, r3
 800c884:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	685b      	ldr	r3, [r3, #4]
 800c88a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c88e:	d112      	bne.n	800c8b6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	9300      	str	r3, [sp, #0]
 800c894:	68bb      	ldr	r3, [r7, #8]
 800c896:	2200      	movs	r2, #0
 800c898:	2180      	movs	r1, #128	; 0x80
 800c89a:	68f8      	ldr	r0, [r7, #12]
 800c89c:	f7ff ff77 	bl	800c78e <SPI_WaitFlagStateUntilTimeout>
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d016      	beq.n	800c8d4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8aa:	f043 0220 	orr.w	r2, r3, #32
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800c8b2:	2303      	movs	r3, #3
 800c8b4:	e00f      	b.n	800c8d6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800c8b6:	697b      	ldr	r3, [r7, #20]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d00a      	beq.n	800c8d2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800c8bc:	697b      	ldr	r3, [r7, #20]
 800c8be:	3b01      	subs	r3, #1
 800c8c0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	689b      	ldr	r3, [r3, #8]
 800c8c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8cc:	2b80      	cmp	r3, #128	; 0x80
 800c8ce:	d0f2      	beq.n	800c8b6 <SPI_EndRxTxTransaction+0x52>
 800c8d0:	e000      	b.n	800c8d4 <SPI_EndRxTxTransaction+0x70>
        break;
 800c8d2:	bf00      	nop
  }

  return HAL_OK;
 800c8d4:	2300      	movs	r3, #0
}
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	3718      	adds	r7, #24
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bd80      	pop	{r7, pc}
 800c8de:	bf00      	nop
 800c8e0:	2000001c 	.word	0x2000001c
 800c8e4:	165e9f81 	.word	0x165e9f81

0800c8e8 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b086      	sub	sp, #24
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800c8f0:	4b35      	ldr	r3, [pc, #212]	; (800c9c8 <SPI_CloseRxTx_ISR+0xe0>)
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	4a35      	ldr	r2, [pc, #212]	; (800c9cc <SPI_CloseRxTx_ISR+0xe4>)
 800c8f6:	fba2 2303 	umull	r2, r3, r2, r3
 800c8fa:	0a5b      	lsrs	r3, r3, #9
 800c8fc:	2264      	movs	r2, #100	; 0x64
 800c8fe:	fb02 f303 	mul.w	r3, r2, r3
 800c902:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800c904:	f7fc fabe 	bl	8008e84 <HAL_GetTick>
 800c908:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	685a      	ldr	r2, [r3, #4]
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	f022 0220 	bic.w	r2, r2, #32
 800c918:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800c91a:	693b      	ldr	r3, [r7, #16]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d106      	bne.n	800c92e <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c924:	f043 0220 	orr.w	r2, r3, #32
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800c92c:	e009      	b.n	800c942 <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 800c92e:	693b      	ldr	r3, [r7, #16]
 800c930:	3b01      	subs	r3, #1
 800c932:	613b      	str	r3, [r7, #16]
  }
  while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	689b      	ldr	r3, [r3, #8]
 800c93a:	f003 0302 	and.w	r3, r3, #2
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d0eb      	beq.n	800c91a <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800c942:	697a      	ldr	r2, [r7, #20]
 800c944:	2164      	movs	r1, #100	; 0x64
 800c946:	6878      	ldr	r0, [r7, #4]
 800c948:	f7ff ff8c 	bl	800c864 <SPI_EndRxTxTransaction>
 800c94c:	4603      	mov	r3, r0
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d005      	beq.n	800c95e <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c956:	f043 0220 	orr.w	r2, r3, #32
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	689b      	ldr	r3, [r3, #8]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d10a      	bne.n	800c97c <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c966:	2300      	movs	r3, #0
 800c968:	60fb      	str	r3, [r7, #12]
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	68db      	ldr	r3, [r3, #12]
 800c970:	60fb      	str	r3, [r7, #12]
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	689b      	ldr	r3, [r3, #8]
 800c978:	60fb      	str	r3, [r7, #12]
 800c97a:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c980:	2b00      	cmp	r3, #0
 800c982:	d115      	bne.n	800c9b0 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800c98a:	b2db      	uxtb	r3, r3
 800c98c:	2b04      	cmp	r3, #4
 800c98e:	d107      	bne.n	800c9a0 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2201      	movs	r2, #1
 800c994:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800c998:	6878      	ldr	r0, [r7, #4]
 800c99a:	f7ff fe05 	bl	800c5a8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800c99e:	e00e      	b.n	800c9be <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	2201      	movs	r2, #1
 800c9a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f7ff fe07 	bl	800c5bc <HAL_SPI_TxRxCpltCallback>
}
 800c9ae:	e006      	b.n	800c9be <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2201      	movs	r2, #1
 800c9b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 800c9b8:	6878      	ldr	r0, [r7, #4]
 800c9ba:	f7ff fe09 	bl	800c5d0 <HAL_SPI_ErrorCallback>
}
 800c9be:	bf00      	nop
 800c9c0:	3718      	adds	r7, #24
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	bd80      	pop	{r7, pc}
 800c9c6:	bf00      	nop
 800c9c8:	2000001c 	.word	0x2000001c
 800c9cc:	057619f1 	.word	0x057619f1

0800c9d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b082      	sub	sp, #8
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d101      	bne.n	800c9e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c9de:	2301      	movs	r3, #1
 800c9e0:	e01d      	b.n	800ca1e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c9e8:	b2db      	uxtb	r3, r3
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d106      	bne.n	800c9fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c9f6:	6878      	ldr	r0, [r7, #4]
 800c9f8:	f005 fb7c 	bl	80120f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2202      	movs	r2, #2
 800ca00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	681a      	ldr	r2, [r3, #0]
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	3304      	adds	r3, #4
 800ca0c:	4619      	mov	r1, r3
 800ca0e:	4610      	mov	r0, r2
 800ca10:	f000 fc30 	bl	800d274 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2201      	movs	r2, #1
 800ca18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ca1c:	2300      	movs	r3, #0
}
 800ca1e:	4618      	mov	r0, r3
 800ca20:	3708      	adds	r7, #8
 800ca22:	46bd      	mov	sp, r7
 800ca24:	bd80      	pop	{r7, pc}

0800ca26 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ca26:	b580      	push	{r7, lr}
 800ca28:	b082      	sub	sp, #8
 800ca2a:	af00      	add	r7, sp, #0
 800ca2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d101      	bne.n	800ca38 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ca34:	2301      	movs	r3, #1
 800ca36:	e01d      	b.n	800ca74 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ca3e:	b2db      	uxtb	r3, r3
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d106      	bne.n	800ca52 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	2200      	movs	r2, #0
 800ca48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ca4c:	6878      	ldr	r0, [r7, #4]
 800ca4e:	f000 f815 	bl	800ca7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2202      	movs	r2, #2
 800ca56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681a      	ldr	r2, [r3, #0]
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	3304      	adds	r3, #4
 800ca62:	4619      	mov	r1, r3
 800ca64:	4610      	mov	r0, r2
 800ca66:	f000 fc05 	bl	800d274 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	2201      	movs	r2, #1
 800ca6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ca72:	2300      	movs	r3, #0
}
 800ca74:	4618      	mov	r0, r3
 800ca76:	3708      	adds	r7, #8
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bd80      	pop	{r7, pc}

0800ca7c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800ca7c:	b480      	push	{r7}
 800ca7e:	b083      	sub	sp, #12
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800ca84:	bf00      	nop
 800ca86:	370c      	adds	r7, #12
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8e:	4770      	bx	lr

0800ca90 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b084      	sub	sp, #16
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
 800ca98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	2b0c      	cmp	r3, #12
 800ca9e:	d841      	bhi.n	800cb24 <HAL_TIM_PWM_Start_IT+0x94>
 800caa0:	a201      	add	r2, pc, #4	; (adr r2, 800caa8 <HAL_TIM_PWM_Start_IT+0x18>)
 800caa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caa6:	bf00      	nop
 800caa8:	0800cadd 	.word	0x0800cadd
 800caac:	0800cb25 	.word	0x0800cb25
 800cab0:	0800cb25 	.word	0x0800cb25
 800cab4:	0800cb25 	.word	0x0800cb25
 800cab8:	0800caef 	.word	0x0800caef
 800cabc:	0800cb25 	.word	0x0800cb25
 800cac0:	0800cb25 	.word	0x0800cb25
 800cac4:	0800cb25 	.word	0x0800cb25
 800cac8:	0800cb01 	.word	0x0800cb01
 800cacc:	0800cb25 	.word	0x0800cb25
 800cad0:	0800cb25 	.word	0x0800cb25
 800cad4:	0800cb25 	.word	0x0800cb25
 800cad8:	0800cb13 	.word	0x0800cb13
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	68da      	ldr	r2, [r3, #12]
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	f042 0202 	orr.w	r2, r2, #2
 800caea:	60da      	str	r2, [r3, #12]
      break;
 800caec:	e01b      	b.n	800cb26 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	68da      	ldr	r2, [r3, #12]
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	f042 0204 	orr.w	r2, r2, #4
 800cafc:	60da      	str	r2, [r3, #12]
      break;
 800cafe:	e012      	b.n	800cb26 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	68da      	ldr	r2, [r3, #12]
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	f042 0208 	orr.w	r2, r2, #8
 800cb0e:	60da      	str	r2, [r3, #12]
      break;
 800cb10:	e009      	b.n	800cb26 <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	68da      	ldr	r2, [r3, #12]
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	f042 0210 	orr.w	r2, r2, #16
 800cb20:	60da      	str	r2, [r3, #12]
      break;
 800cb22:	e000      	b.n	800cb26 <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 800cb24:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	2201      	movs	r2, #1
 800cb2c:	6839      	ldr	r1, [r7, #0]
 800cb2e:	4618      	mov	r0, r3
 800cb30:	f000 fe8a 	bl	800d848 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	4a15      	ldr	r2, [pc, #84]	; (800cb90 <HAL_TIM_PWM_Start_IT+0x100>)
 800cb3a:	4293      	cmp	r3, r2
 800cb3c:	d004      	beq.n	800cb48 <HAL_TIM_PWM_Start_IT+0xb8>
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	4a14      	ldr	r2, [pc, #80]	; (800cb94 <HAL_TIM_PWM_Start_IT+0x104>)
 800cb44:	4293      	cmp	r3, r2
 800cb46:	d101      	bne.n	800cb4c <HAL_TIM_PWM_Start_IT+0xbc>
 800cb48:	2301      	movs	r3, #1
 800cb4a:	e000      	b.n	800cb4e <HAL_TIM_PWM_Start_IT+0xbe>
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d007      	beq.n	800cb62 <HAL_TIM_PWM_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cb60:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	689b      	ldr	r3, [r3, #8]
 800cb68:	f003 0307 	and.w	r3, r3, #7
 800cb6c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	2b06      	cmp	r3, #6
 800cb72:	d007      	beq.n	800cb84 <HAL_TIM_PWM_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	681a      	ldr	r2, [r3, #0]
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	f042 0201 	orr.w	r2, r2, #1
 800cb82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800cb84:	2300      	movs	r3, #0
}
 800cb86:	4618      	mov	r0, r3
 800cb88:	3710      	adds	r7, #16
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	bd80      	pop	{r7, pc}
 800cb8e:	bf00      	nop
 800cb90:	40010000 	.word	0x40010000
 800cb94:	40010400 	.word	0x40010400

0800cb98 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b082      	sub	sp, #8
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
 800cba0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	2b0c      	cmp	r3, #12
 800cba6:	d841      	bhi.n	800cc2c <HAL_TIM_PWM_Stop_IT+0x94>
 800cba8:	a201      	add	r2, pc, #4	; (adr r2, 800cbb0 <HAL_TIM_PWM_Stop_IT+0x18>)
 800cbaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbae:	bf00      	nop
 800cbb0:	0800cbe5 	.word	0x0800cbe5
 800cbb4:	0800cc2d 	.word	0x0800cc2d
 800cbb8:	0800cc2d 	.word	0x0800cc2d
 800cbbc:	0800cc2d 	.word	0x0800cc2d
 800cbc0:	0800cbf7 	.word	0x0800cbf7
 800cbc4:	0800cc2d 	.word	0x0800cc2d
 800cbc8:	0800cc2d 	.word	0x0800cc2d
 800cbcc:	0800cc2d 	.word	0x0800cc2d
 800cbd0:	0800cc09 	.word	0x0800cc09
 800cbd4:	0800cc2d 	.word	0x0800cc2d
 800cbd8:	0800cc2d 	.word	0x0800cc2d
 800cbdc:	0800cc2d 	.word	0x0800cc2d
 800cbe0:	0800cc1b 	.word	0x0800cc1b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	68da      	ldr	r2, [r3, #12]
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	f022 0202 	bic.w	r2, r2, #2
 800cbf2:	60da      	str	r2, [r3, #12]
      break;
 800cbf4:	e01b      	b.n	800cc2e <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	68da      	ldr	r2, [r3, #12]
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	f022 0204 	bic.w	r2, r2, #4
 800cc04:	60da      	str	r2, [r3, #12]
      break;
 800cc06:	e012      	b.n	800cc2e <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	68da      	ldr	r2, [r3, #12]
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	f022 0208 	bic.w	r2, r2, #8
 800cc16:	60da      	str	r2, [r3, #12]
      break;
 800cc18:	e009      	b.n	800cc2e <HAL_TIM_PWM_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	68da      	ldr	r2, [r3, #12]
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	f022 0210 	bic.w	r2, r2, #16
 800cc28:	60da      	str	r2, [r3, #12]
      break;
 800cc2a:	e000      	b.n	800cc2e <HAL_TIM_PWM_Stop_IT+0x96>
    }

    default:
      break;
 800cc2c:	bf00      	nop
  }

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	2200      	movs	r2, #0
 800cc34:	6839      	ldr	r1, [r7, #0]
 800cc36:	4618      	mov	r0, r3
 800cc38:	f000 fe06 	bl	800d848 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	4a20      	ldr	r2, [pc, #128]	; (800ccc4 <HAL_TIM_PWM_Stop_IT+0x12c>)
 800cc42:	4293      	cmp	r3, r2
 800cc44:	d004      	beq.n	800cc50 <HAL_TIM_PWM_Stop_IT+0xb8>
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	4a1f      	ldr	r2, [pc, #124]	; (800ccc8 <HAL_TIM_PWM_Stop_IT+0x130>)
 800cc4c:	4293      	cmp	r3, r2
 800cc4e:	d101      	bne.n	800cc54 <HAL_TIM_PWM_Stop_IT+0xbc>
 800cc50:	2301      	movs	r3, #1
 800cc52:	e000      	b.n	800cc56 <HAL_TIM_PWM_Stop_IT+0xbe>
 800cc54:	2300      	movs	r3, #0
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d017      	beq.n	800cc8a <HAL_TIM_PWM_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	6a1a      	ldr	r2, [r3, #32]
 800cc60:	f241 1311 	movw	r3, #4369	; 0x1111
 800cc64:	4013      	ands	r3, r2
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d10f      	bne.n	800cc8a <HAL_TIM_PWM_Stop_IT+0xf2>
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	6a1a      	ldr	r2, [r3, #32]
 800cc70:	f240 4344 	movw	r3, #1092	; 0x444
 800cc74:	4013      	ands	r3, r2
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d107      	bne.n	800cc8a <HAL_TIM_PWM_Stop_IT+0xf2>
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cc88:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	6a1a      	ldr	r2, [r3, #32]
 800cc90:	f241 1311 	movw	r3, #4369	; 0x1111
 800cc94:	4013      	ands	r3, r2
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d10f      	bne.n	800ccba <HAL_TIM_PWM_Stop_IT+0x122>
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	6a1a      	ldr	r2, [r3, #32]
 800cca0:	f240 4344 	movw	r3, #1092	; 0x444
 800cca4:	4013      	ands	r3, r2
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d107      	bne.n	800ccba <HAL_TIM_PWM_Stop_IT+0x122>
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	681a      	ldr	r2, [r3, #0]
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	f022 0201 	bic.w	r2, r2, #1
 800ccb8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ccba:	2300      	movs	r3, #0
}
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	3708      	adds	r7, #8
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bd80      	pop	{r7, pc}
 800ccc4:	40010000 	.word	0x40010000
 800ccc8:	40010400 	.word	0x40010400

0800cccc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b082      	sub	sp, #8
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	691b      	ldr	r3, [r3, #16]
 800ccda:	f003 0302 	and.w	r3, r3, #2
 800ccde:	2b02      	cmp	r3, #2
 800cce0:	d122      	bne.n	800cd28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	68db      	ldr	r3, [r3, #12]
 800cce8:	f003 0302 	and.w	r3, r3, #2
 800ccec:	2b02      	cmp	r3, #2
 800ccee:	d11b      	bne.n	800cd28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	f06f 0202 	mvn.w	r2, #2
 800ccf8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	2201      	movs	r2, #1
 800ccfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	699b      	ldr	r3, [r3, #24]
 800cd06:	f003 0303 	and.w	r3, r3, #3
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d003      	beq.n	800cd16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cd0e:	6878      	ldr	r0, [r7, #4]
 800cd10:	f000 fa92 	bl	800d238 <HAL_TIM_IC_CaptureCallback>
 800cd14:	e005      	b.n	800cd22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cd16:	6878      	ldr	r0, [r7, #4]
 800cd18:	f000 fa84 	bl	800d224 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cd1c:	6878      	ldr	r0, [r7, #4]
 800cd1e:	f000 fa95 	bl	800d24c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	2200      	movs	r2, #0
 800cd26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	691b      	ldr	r3, [r3, #16]
 800cd2e:	f003 0304 	and.w	r3, r3, #4
 800cd32:	2b04      	cmp	r3, #4
 800cd34:	d122      	bne.n	800cd7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	68db      	ldr	r3, [r3, #12]
 800cd3c:	f003 0304 	and.w	r3, r3, #4
 800cd40:	2b04      	cmp	r3, #4
 800cd42:	d11b      	bne.n	800cd7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	f06f 0204 	mvn.w	r2, #4
 800cd4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	2202      	movs	r2, #2
 800cd52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	699b      	ldr	r3, [r3, #24]
 800cd5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d003      	beq.n	800cd6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cd62:	6878      	ldr	r0, [r7, #4]
 800cd64:	f000 fa68 	bl	800d238 <HAL_TIM_IC_CaptureCallback>
 800cd68:	e005      	b.n	800cd76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	f000 fa5a 	bl	800d224 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cd70:	6878      	ldr	r0, [r7, #4]
 800cd72:	f000 fa6b 	bl	800d24c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	2200      	movs	r2, #0
 800cd7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	691b      	ldr	r3, [r3, #16]
 800cd82:	f003 0308 	and.w	r3, r3, #8
 800cd86:	2b08      	cmp	r3, #8
 800cd88:	d122      	bne.n	800cdd0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	68db      	ldr	r3, [r3, #12]
 800cd90:	f003 0308 	and.w	r3, r3, #8
 800cd94:	2b08      	cmp	r3, #8
 800cd96:	d11b      	bne.n	800cdd0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	681b      	ldr	r3, [r3, #0]
 800cd9c:	f06f 0208 	mvn.w	r2, #8
 800cda0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	2204      	movs	r2, #4
 800cda6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	69db      	ldr	r3, [r3, #28]
 800cdae:	f003 0303 	and.w	r3, r3, #3
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d003      	beq.n	800cdbe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800cdb6:	6878      	ldr	r0, [r7, #4]
 800cdb8:	f000 fa3e 	bl	800d238 <HAL_TIM_IC_CaptureCallback>
 800cdbc:	e005      	b.n	800cdca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	f000 fa30 	bl	800d224 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cdc4:	6878      	ldr	r0, [r7, #4]
 800cdc6:	f000 fa41 	bl	800d24c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	2200      	movs	r2, #0
 800cdce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	691b      	ldr	r3, [r3, #16]
 800cdd6:	f003 0310 	and.w	r3, r3, #16
 800cdda:	2b10      	cmp	r3, #16
 800cddc:	d122      	bne.n	800ce24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	68db      	ldr	r3, [r3, #12]
 800cde4:	f003 0310 	and.w	r3, r3, #16
 800cde8:	2b10      	cmp	r3, #16
 800cdea:	d11b      	bne.n	800ce24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	f06f 0210 	mvn.w	r2, #16
 800cdf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	2208      	movs	r2, #8
 800cdfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	69db      	ldr	r3, [r3, #28]
 800ce02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d003      	beq.n	800ce12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	f000 fa14 	bl	800d238 <HAL_TIM_IC_CaptureCallback>
 800ce10:	e005      	b.n	800ce1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ce12:	6878      	ldr	r0, [r7, #4]
 800ce14:	f000 fa06 	bl	800d224 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ce18:	6878      	ldr	r0, [r7, #4]
 800ce1a:	f000 fa17 	bl	800d24c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	2200      	movs	r2, #0
 800ce22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	691b      	ldr	r3, [r3, #16]
 800ce2a:	f003 0301 	and.w	r3, r3, #1
 800ce2e:	2b01      	cmp	r3, #1
 800ce30:	d10e      	bne.n	800ce50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	681b      	ldr	r3, [r3, #0]
 800ce36:	68db      	ldr	r3, [r3, #12]
 800ce38:	f003 0301 	and.w	r3, r3, #1
 800ce3c:	2b01      	cmp	r3, #1
 800ce3e:	d107      	bne.n	800ce50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	f06f 0201 	mvn.w	r2, #1
 800ce48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ce4a:	6878      	ldr	r0, [r7, #4]
 800ce4c:	f004 f8cc 	bl	8010fe8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	691b      	ldr	r3, [r3, #16]
 800ce56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce5a:	2b80      	cmp	r3, #128	; 0x80
 800ce5c:	d10e      	bne.n	800ce7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	68db      	ldr	r3, [r3, #12]
 800ce64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce68:	2b80      	cmp	r3, #128	; 0x80
 800ce6a:	d107      	bne.n	800ce7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ce74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ce76:	6878      	ldr	r0, [r7, #4]
 800ce78:	f000 fe77 	bl	800db6a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	691b      	ldr	r3, [r3, #16]
 800ce82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce86:	2b40      	cmp	r3, #64	; 0x40
 800ce88:	d10e      	bne.n	800cea8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	681b      	ldr	r3, [r3, #0]
 800ce8e:	68db      	ldr	r3, [r3, #12]
 800ce90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce94:	2b40      	cmp	r3, #64	; 0x40
 800ce96:	d107      	bne.n	800cea8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800cea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800cea2:	6878      	ldr	r0, [r7, #4]
 800cea4:	f000 f9dc 	bl	800d260 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	691b      	ldr	r3, [r3, #16]
 800ceae:	f003 0320 	and.w	r3, r3, #32
 800ceb2:	2b20      	cmp	r3, #32
 800ceb4:	d10e      	bne.n	800ced4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	681b      	ldr	r3, [r3, #0]
 800ceba:	68db      	ldr	r3, [r3, #12]
 800cebc:	f003 0320 	and.w	r3, r3, #32
 800cec0:	2b20      	cmp	r3, #32
 800cec2:	d107      	bne.n	800ced4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	f06f 0220 	mvn.w	r2, #32
 800cecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800cece:	6878      	ldr	r0, [r7, #4]
 800ced0:	f000 fe41 	bl	800db56 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ced4:	bf00      	nop
 800ced6:	3708      	adds	r7, #8
 800ced8:	46bd      	mov	sp, r7
 800ceda:	bd80      	pop	{r7, pc}

0800cedc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b084      	sub	sp, #16
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	60f8      	str	r0, [r7, #12]
 800cee4:	60b9      	str	r1, [r7, #8]
 800cee6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ceee:	2b01      	cmp	r3, #1
 800cef0:	d101      	bne.n	800cef6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800cef2:	2302      	movs	r3, #2
 800cef4:	e0b4      	b.n	800d060 <HAL_TIM_PWM_ConfigChannel+0x184>
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	2201      	movs	r2, #1
 800cefa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	2202      	movs	r2, #2
 800cf02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	2b0c      	cmp	r3, #12
 800cf0a:	f200 809f 	bhi.w	800d04c <HAL_TIM_PWM_ConfigChannel+0x170>
 800cf0e:	a201      	add	r2, pc, #4	; (adr r2, 800cf14 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800cf10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf14:	0800cf49 	.word	0x0800cf49
 800cf18:	0800d04d 	.word	0x0800d04d
 800cf1c:	0800d04d 	.word	0x0800d04d
 800cf20:	0800d04d 	.word	0x0800d04d
 800cf24:	0800cf89 	.word	0x0800cf89
 800cf28:	0800d04d 	.word	0x0800d04d
 800cf2c:	0800d04d 	.word	0x0800d04d
 800cf30:	0800d04d 	.word	0x0800d04d
 800cf34:	0800cfcb 	.word	0x0800cfcb
 800cf38:	0800d04d 	.word	0x0800d04d
 800cf3c:	0800d04d 	.word	0x0800d04d
 800cf40:	0800d04d 	.word	0x0800d04d
 800cf44:	0800d00b 	.word	0x0800d00b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	68b9      	ldr	r1, [r7, #8]
 800cf4e:	4618      	mov	r0, r3
 800cf50:	f000 fa30 	bl	800d3b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	681b      	ldr	r3, [r3, #0]
 800cf58:	699a      	ldr	r2, [r3, #24]
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	f042 0208 	orr.w	r2, r2, #8
 800cf62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	699a      	ldr	r2, [r3, #24]
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	f022 0204 	bic.w	r2, r2, #4
 800cf72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	6999      	ldr	r1, [r3, #24]
 800cf7a:	68bb      	ldr	r3, [r7, #8]
 800cf7c:	691a      	ldr	r2, [r3, #16]
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	430a      	orrs	r2, r1
 800cf84:	619a      	str	r2, [r3, #24]
      break;
 800cf86:	e062      	b.n	800d04e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	68b9      	ldr	r1, [r7, #8]
 800cf8e:	4618      	mov	r0, r3
 800cf90:	f000 fa80 	bl	800d494 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	699a      	ldr	r2, [r3, #24]
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800cfa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	699a      	ldr	r2, [r3, #24]
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800cfb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	6999      	ldr	r1, [r3, #24]
 800cfba:	68bb      	ldr	r3, [r7, #8]
 800cfbc:	691b      	ldr	r3, [r3, #16]
 800cfbe:	021a      	lsls	r2, r3, #8
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	430a      	orrs	r2, r1
 800cfc6:	619a      	str	r2, [r3, #24]
      break;
 800cfc8:	e041      	b.n	800d04e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	68b9      	ldr	r1, [r7, #8]
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	f000 fad5 	bl	800d580 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800cfd6:	68fb      	ldr	r3, [r7, #12]
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	69da      	ldr	r2, [r3, #28]
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	f042 0208 	orr.w	r2, r2, #8
 800cfe4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	69da      	ldr	r2, [r3, #28]
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	f022 0204 	bic.w	r2, r2, #4
 800cff4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	69d9      	ldr	r1, [r3, #28]
 800cffc:	68bb      	ldr	r3, [r7, #8]
 800cffe:	691a      	ldr	r2, [r3, #16]
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	430a      	orrs	r2, r1
 800d006:	61da      	str	r2, [r3, #28]
      break;
 800d008:	e021      	b.n	800d04e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	68b9      	ldr	r1, [r7, #8]
 800d010:	4618      	mov	r0, r3
 800d012:	f000 fb29 	bl	800d668 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	69da      	ldr	r2, [r3, #28]
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d024:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	69da      	ldr	r2, [r3, #28]
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d034:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	69d9      	ldr	r1, [r3, #28]
 800d03c:	68bb      	ldr	r3, [r7, #8]
 800d03e:	691b      	ldr	r3, [r3, #16]
 800d040:	021a      	lsls	r2, r3, #8
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	430a      	orrs	r2, r1
 800d048:	61da      	str	r2, [r3, #28]
      break;
 800d04a:	e000      	b.n	800d04e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800d04c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	2201      	movs	r2, #1
 800d052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	2200      	movs	r2, #0
 800d05a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d05e:	2300      	movs	r3, #0
}
 800d060:	4618      	mov	r0, r3
 800d062:	3710      	adds	r7, #16
 800d064:	46bd      	mov	sp, r7
 800d066:	bd80      	pop	{r7, pc}

0800d068 <HAL_TIM_GenerateEvent>:
  *         supporting a break input.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_TIM_GenerateEvent(TIM_HandleTypeDef *htim, uint32_t EventSource)
{
 800d068:	b480      	push	{r7}
 800d06a:	b083      	sub	sp, #12
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
 800d070:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_EVENT_SOURCE(EventSource));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d078:	2b01      	cmp	r3, #1
 800d07a:	d101      	bne.n	800d080 <HAL_TIM_GenerateEvent+0x18>
 800d07c:	2302      	movs	r3, #2
 800d07e:	e014      	b.n	800d0aa <HAL_TIM_GenerateEvent+0x42>
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2201      	movs	r2, #1
 800d084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	2202      	movs	r2, #2
 800d08c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the event sources */
  htim->Instance->EGR = EventSource;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	683a      	ldr	r2, [r7, #0]
 800d096:	615a      	str	r2, [r3, #20]

  /* Change the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2201      	movs	r2, #1
 800d09c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800d0a8:	2300      	movs	r3, #0
}
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	370c      	adds	r7, #12
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b4:	4770      	bx	lr

0800d0b6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d0b6:	b580      	push	{r7, lr}
 800d0b8:	b084      	sub	sp, #16
 800d0ba:	af00      	add	r7, sp, #0
 800d0bc:	6078      	str	r0, [r7, #4]
 800d0be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d0c6:	2b01      	cmp	r3, #1
 800d0c8:	d101      	bne.n	800d0ce <HAL_TIM_ConfigClockSource+0x18>
 800d0ca:	2302      	movs	r3, #2
 800d0cc:	e0a6      	b.n	800d21c <HAL_TIM_ConfigClockSource+0x166>
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	2201      	movs	r2, #1
 800d0d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	2202      	movs	r2, #2
 800d0da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	689b      	ldr	r3, [r3, #8]
 800d0e4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800d0ec:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d0f4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	68fa      	ldr	r2, [r7, #12]
 800d0fc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d0fe:	683b      	ldr	r3, [r7, #0]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	2b40      	cmp	r3, #64	; 0x40
 800d104:	d067      	beq.n	800d1d6 <HAL_TIM_ConfigClockSource+0x120>
 800d106:	2b40      	cmp	r3, #64	; 0x40
 800d108:	d80b      	bhi.n	800d122 <HAL_TIM_ConfigClockSource+0x6c>
 800d10a:	2b10      	cmp	r3, #16
 800d10c:	d073      	beq.n	800d1f6 <HAL_TIM_ConfigClockSource+0x140>
 800d10e:	2b10      	cmp	r3, #16
 800d110:	d802      	bhi.n	800d118 <HAL_TIM_ConfigClockSource+0x62>
 800d112:	2b00      	cmp	r3, #0
 800d114:	d06f      	beq.n	800d1f6 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800d116:	e078      	b.n	800d20a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800d118:	2b20      	cmp	r3, #32
 800d11a:	d06c      	beq.n	800d1f6 <HAL_TIM_ConfigClockSource+0x140>
 800d11c:	2b30      	cmp	r3, #48	; 0x30
 800d11e:	d06a      	beq.n	800d1f6 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800d120:	e073      	b.n	800d20a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800d122:	2b70      	cmp	r3, #112	; 0x70
 800d124:	d00d      	beq.n	800d142 <HAL_TIM_ConfigClockSource+0x8c>
 800d126:	2b70      	cmp	r3, #112	; 0x70
 800d128:	d804      	bhi.n	800d134 <HAL_TIM_ConfigClockSource+0x7e>
 800d12a:	2b50      	cmp	r3, #80	; 0x50
 800d12c:	d033      	beq.n	800d196 <HAL_TIM_ConfigClockSource+0xe0>
 800d12e:	2b60      	cmp	r3, #96	; 0x60
 800d130:	d041      	beq.n	800d1b6 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800d132:	e06a      	b.n	800d20a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800d134:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d138:	d066      	beq.n	800d208 <HAL_TIM_ConfigClockSource+0x152>
 800d13a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d13e:	d017      	beq.n	800d170 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800d140:	e063      	b.n	800d20a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	6818      	ldr	r0, [r3, #0]
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	6899      	ldr	r1, [r3, #8]
 800d14a:	683b      	ldr	r3, [r7, #0]
 800d14c:	685a      	ldr	r2, [r3, #4]
 800d14e:	683b      	ldr	r3, [r7, #0]
 800d150:	68db      	ldr	r3, [r3, #12]
 800d152:	f000 fb59 	bl	800d808 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	689b      	ldr	r3, [r3, #8]
 800d15c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d164:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	68fa      	ldr	r2, [r7, #12]
 800d16c:	609a      	str	r2, [r3, #8]
      break;
 800d16e:	e04c      	b.n	800d20a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	6818      	ldr	r0, [r3, #0]
 800d174:	683b      	ldr	r3, [r7, #0]
 800d176:	6899      	ldr	r1, [r3, #8]
 800d178:	683b      	ldr	r3, [r7, #0]
 800d17a:	685a      	ldr	r2, [r3, #4]
 800d17c:	683b      	ldr	r3, [r7, #0]
 800d17e:	68db      	ldr	r3, [r3, #12]
 800d180:	f000 fb42 	bl	800d808 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	689a      	ldr	r2, [r3, #8]
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d192:	609a      	str	r2, [r3, #8]
      break;
 800d194:	e039      	b.n	800d20a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	6818      	ldr	r0, [r3, #0]
 800d19a:	683b      	ldr	r3, [r7, #0]
 800d19c:	6859      	ldr	r1, [r3, #4]
 800d19e:	683b      	ldr	r3, [r7, #0]
 800d1a0:	68db      	ldr	r3, [r3, #12]
 800d1a2:	461a      	mov	r2, r3
 800d1a4:	f000 fab6 	bl	800d714 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	2150      	movs	r1, #80	; 0x50
 800d1ae:	4618      	mov	r0, r3
 800d1b0:	f000 fb0f 	bl	800d7d2 <TIM_ITRx_SetConfig>
      break;
 800d1b4:	e029      	b.n	800d20a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	6818      	ldr	r0, [r3, #0]
 800d1ba:	683b      	ldr	r3, [r7, #0]
 800d1bc:	6859      	ldr	r1, [r3, #4]
 800d1be:	683b      	ldr	r3, [r7, #0]
 800d1c0:	68db      	ldr	r3, [r3, #12]
 800d1c2:	461a      	mov	r2, r3
 800d1c4:	f000 fad5 	bl	800d772 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	2160      	movs	r1, #96	; 0x60
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	f000 faff 	bl	800d7d2 <TIM_ITRx_SetConfig>
      break;
 800d1d4:	e019      	b.n	800d20a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	6818      	ldr	r0, [r3, #0]
 800d1da:	683b      	ldr	r3, [r7, #0]
 800d1dc:	6859      	ldr	r1, [r3, #4]
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	68db      	ldr	r3, [r3, #12]
 800d1e2:	461a      	mov	r2, r3
 800d1e4:	f000 fa96 	bl	800d714 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	2140      	movs	r1, #64	; 0x40
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	f000 faef 	bl	800d7d2 <TIM_ITRx_SetConfig>
      break;
 800d1f4:	e009      	b.n	800d20a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681a      	ldr	r2, [r3, #0]
 800d1fa:	683b      	ldr	r3, [r7, #0]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	4619      	mov	r1, r3
 800d200:	4610      	mov	r0, r2
 800d202:	f000 fae6 	bl	800d7d2 <TIM_ITRx_SetConfig>
      break;
 800d206:	e000      	b.n	800d20a <HAL_TIM_ConfigClockSource+0x154>
      break;
 800d208:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	2201      	movs	r2, #1
 800d20e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	2200      	movs	r2, #0
 800d216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800d21a:	2300      	movs	r3, #0
}
 800d21c:	4618      	mov	r0, r3
 800d21e:	3710      	adds	r7, #16
 800d220:	46bd      	mov	sp, r7
 800d222:	bd80      	pop	{r7, pc}

0800d224 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d224:	b480      	push	{r7}
 800d226:	b083      	sub	sp, #12
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d22c:	bf00      	nop
 800d22e:	370c      	adds	r7, #12
 800d230:	46bd      	mov	sp, r7
 800d232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d236:	4770      	bx	lr

0800d238 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d238:	b480      	push	{r7}
 800d23a:	b083      	sub	sp, #12
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d240:	bf00      	nop
 800d242:	370c      	adds	r7, #12
 800d244:	46bd      	mov	sp, r7
 800d246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24a:	4770      	bx	lr

0800d24c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d24c:	b480      	push	{r7}
 800d24e:	b083      	sub	sp, #12
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d254:	bf00      	nop
 800d256:	370c      	adds	r7, #12
 800d258:	46bd      	mov	sp, r7
 800d25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25e:	4770      	bx	lr

0800d260 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d260:	b480      	push	{r7}
 800d262:	b083      	sub	sp, #12
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d268:	bf00      	nop
 800d26a:	370c      	adds	r7, #12
 800d26c:	46bd      	mov	sp, r7
 800d26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d272:	4770      	bx	lr

0800d274 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d274:	b480      	push	{r7}
 800d276:	b085      	sub	sp, #20
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
 800d27c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	4a40      	ldr	r2, [pc, #256]	; (800d388 <TIM_Base_SetConfig+0x114>)
 800d288:	4293      	cmp	r3, r2
 800d28a:	d013      	beq.n	800d2b4 <TIM_Base_SetConfig+0x40>
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d292:	d00f      	beq.n	800d2b4 <TIM_Base_SetConfig+0x40>
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	4a3d      	ldr	r2, [pc, #244]	; (800d38c <TIM_Base_SetConfig+0x118>)
 800d298:	4293      	cmp	r3, r2
 800d29a:	d00b      	beq.n	800d2b4 <TIM_Base_SetConfig+0x40>
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	4a3c      	ldr	r2, [pc, #240]	; (800d390 <TIM_Base_SetConfig+0x11c>)
 800d2a0:	4293      	cmp	r3, r2
 800d2a2:	d007      	beq.n	800d2b4 <TIM_Base_SetConfig+0x40>
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	4a3b      	ldr	r2, [pc, #236]	; (800d394 <TIM_Base_SetConfig+0x120>)
 800d2a8:	4293      	cmp	r3, r2
 800d2aa:	d003      	beq.n	800d2b4 <TIM_Base_SetConfig+0x40>
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	4a3a      	ldr	r2, [pc, #232]	; (800d398 <TIM_Base_SetConfig+0x124>)
 800d2b0:	4293      	cmp	r3, r2
 800d2b2:	d108      	bne.n	800d2c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d2ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d2bc:	683b      	ldr	r3, [r7, #0]
 800d2be:	685b      	ldr	r3, [r3, #4]
 800d2c0:	68fa      	ldr	r2, [r7, #12]
 800d2c2:	4313      	orrs	r3, r2
 800d2c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	4a2f      	ldr	r2, [pc, #188]	; (800d388 <TIM_Base_SetConfig+0x114>)
 800d2ca:	4293      	cmp	r3, r2
 800d2cc:	d02b      	beq.n	800d326 <TIM_Base_SetConfig+0xb2>
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d2d4:	d027      	beq.n	800d326 <TIM_Base_SetConfig+0xb2>
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	4a2c      	ldr	r2, [pc, #176]	; (800d38c <TIM_Base_SetConfig+0x118>)
 800d2da:	4293      	cmp	r3, r2
 800d2dc:	d023      	beq.n	800d326 <TIM_Base_SetConfig+0xb2>
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	4a2b      	ldr	r2, [pc, #172]	; (800d390 <TIM_Base_SetConfig+0x11c>)
 800d2e2:	4293      	cmp	r3, r2
 800d2e4:	d01f      	beq.n	800d326 <TIM_Base_SetConfig+0xb2>
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	4a2a      	ldr	r2, [pc, #168]	; (800d394 <TIM_Base_SetConfig+0x120>)
 800d2ea:	4293      	cmp	r3, r2
 800d2ec:	d01b      	beq.n	800d326 <TIM_Base_SetConfig+0xb2>
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	4a29      	ldr	r2, [pc, #164]	; (800d398 <TIM_Base_SetConfig+0x124>)
 800d2f2:	4293      	cmp	r3, r2
 800d2f4:	d017      	beq.n	800d326 <TIM_Base_SetConfig+0xb2>
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	4a28      	ldr	r2, [pc, #160]	; (800d39c <TIM_Base_SetConfig+0x128>)
 800d2fa:	4293      	cmp	r3, r2
 800d2fc:	d013      	beq.n	800d326 <TIM_Base_SetConfig+0xb2>
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	4a27      	ldr	r2, [pc, #156]	; (800d3a0 <TIM_Base_SetConfig+0x12c>)
 800d302:	4293      	cmp	r3, r2
 800d304:	d00f      	beq.n	800d326 <TIM_Base_SetConfig+0xb2>
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	4a26      	ldr	r2, [pc, #152]	; (800d3a4 <TIM_Base_SetConfig+0x130>)
 800d30a:	4293      	cmp	r3, r2
 800d30c:	d00b      	beq.n	800d326 <TIM_Base_SetConfig+0xb2>
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	4a25      	ldr	r2, [pc, #148]	; (800d3a8 <TIM_Base_SetConfig+0x134>)
 800d312:	4293      	cmp	r3, r2
 800d314:	d007      	beq.n	800d326 <TIM_Base_SetConfig+0xb2>
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	4a24      	ldr	r2, [pc, #144]	; (800d3ac <TIM_Base_SetConfig+0x138>)
 800d31a:	4293      	cmp	r3, r2
 800d31c:	d003      	beq.n	800d326 <TIM_Base_SetConfig+0xb2>
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	4a23      	ldr	r2, [pc, #140]	; (800d3b0 <TIM_Base_SetConfig+0x13c>)
 800d322:	4293      	cmp	r3, r2
 800d324:	d108      	bne.n	800d338 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d32c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d32e:	683b      	ldr	r3, [r7, #0]
 800d330:	68db      	ldr	r3, [r3, #12]
 800d332:	68fa      	ldr	r2, [r7, #12]
 800d334:	4313      	orrs	r3, r2
 800d336:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	695b      	ldr	r3, [r3, #20]
 800d342:	4313      	orrs	r3, r2
 800d344:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	68fa      	ldr	r2, [r7, #12]
 800d34a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d34c:	683b      	ldr	r3, [r7, #0]
 800d34e:	689a      	ldr	r2, [r3, #8]
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d354:	683b      	ldr	r3, [r7, #0]
 800d356:	681a      	ldr	r2, [r3, #0]
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	4a0a      	ldr	r2, [pc, #40]	; (800d388 <TIM_Base_SetConfig+0x114>)
 800d360:	4293      	cmp	r3, r2
 800d362:	d003      	beq.n	800d36c <TIM_Base_SetConfig+0xf8>
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	4a0c      	ldr	r2, [pc, #48]	; (800d398 <TIM_Base_SetConfig+0x124>)
 800d368:	4293      	cmp	r3, r2
 800d36a:	d103      	bne.n	800d374 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d36c:	683b      	ldr	r3, [r7, #0]
 800d36e:	691a      	ldr	r2, [r3, #16]
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2201      	movs	r2, #1
 800d378:	615a      	str	r2, [r3, #20]
}
 800d37a:	bf00      	nop
 800d37c:	3714      	adds	r7, #20
 800d37e:	46bd      	mov	sp, r7
 800d380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d384:	4770      	bx	lr
 800d386:	bf00      	nop
 800d388:	40010000 	.word	0x40010000
 800d38c:	40000400 	.word	0x40000400
 800d390:	40000800 	.word	0x40000800
 800d394:	40000c00 	.word	0x40000c00
 800d398:	40010400 	.word	0x40010400
 800d39c:	40014000 	.word	0x40014000
 800d3a0:	40014400 	.word	0x40014400
 800d3a4:	40014800 	.word	0x40014800
 800d3a8:	40001800 	.word	0x40001800
 800d3ac:	40001c00 	.word	0x40001c00
 800d3b0:	40002000 	.word	0x40002000

0800d3b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d3b4:	b480      	push	{r7}
 800d3b6:	b087      	sub	sp, #28
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]
 800d3bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	6a1b      	ldr	r3, [r3, #32]
 800d3c2:	f023 0201 	bic.w	r2, r3, #1
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	6a1b      	ldr	r3, [r3, #32]
 800d3ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	685b      	ldr	r3, [r3, #4]
 800d3d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	699b      	ldr	r3, [r3, #24]
 800d3da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d3e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	f023 0303 	bic.w	r3, r3, #3
 800d3ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d3ec:	683b      	ldr	r3, [r7, #0]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	68fa      	ldr	r2, [r7, #12]
 800d3f2:	4313      	orrs	r3, r2
 800d3f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d3f6:	697b      	ldr	r3, [r7, #20]
 800d3f8:	f023 0302 	bic.w	r3, r3, #2
 800d3fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d3fe:	683b      	ldr	r3, [r7, #0]
 800d400:	689b      	ldr	r3, [r3, #8]
 800d402:	697a      	ldr	r2, [r7, #20]
 800d404:	4313      	orrs	r3, r2
 800d406:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	4a20      	ldr	r2, [pc, #128]	; (800d48c <TIM_OC1_SetConfig+0xd8>)
 800d40c:	4293      	cmp	r3, r2
 800d40e:	d003      	beq.n	800d418 <TIM_OC1_SetConfig+0x64>
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	4a1f      	ldr	r2, [pc, #124]	; (800d490 <TIM_OC1_SetConfig+0xdc>)
 800d414:	4293      	cmp	r3, r2
 800d416:	d10c      	bne.n	800d432 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d418:	697b      	ldr	r3, [r7, #20]
 800d41a:	f023 0308 	bic.w	r3, r3, #8
 800d41e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	68db      	ldr	r3, [r3, #12]
 800d424:	697a      	ldr	r2, [r7, #20]
 800d426:	4313      	orrs	r3, r2
 800d428:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d42a:	697b      	ldr	r3, [r7, #20]
 800d42c:	f023 0304 	bic.w	r3, r3, #4
 800d430:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	4a15      	ldr	r2, [pc, #84]	; (800d48c <TIM_OC1_SetConfig+0xd8>)
 800d436:	4293      	cmp	r3, r2
 800d438:	d003      	beq.n	800d442 <TIM_OC1_SetConfig+0x8e>
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	4a14      	ldr	r2, [pc, #80]	; (800d490 <TIM_OC1_SetConfig+0xdc>)
 800d43e:	4293      	cmp	r3, r2
 800d440:	d111      	bne.n	800d466 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d442:	693b      	ldr	r3, [r7, #16]
 800d444:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d448:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d44a:	693b      	ldr	r3, [r7, #16]
 800d44c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d450:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d452:	683b      	ldr	r3, [r7, #0]
 800d454:	695b      	ldr	r3, [r3, #20]
 800d456:	693a      	ldr	r2, [r7, #16]
 800d458:	4313      	orrs	r3, r2
 800d45a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d45c:	683b      	ldr	r3, [r7, #0]
 800d45e:	699b      	ldr	r3, [r3, #24]
 800d460:	693a      	ldr	r2, [r7, #16]
 800d462:	4313      	orrs	r3, r2
 800d464:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	693a      	ldr	r2, [r7, #16]
 800d46a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	68fa      	ldr	r2, [r7, #12]
 800d470:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d472:	683b      	ldr	r3, [r7, #0]
 800d474:	685a      	ldr	r2, [r3, #4]
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	697a      	ldr	r2, [r7, #20]
 800d47e:	621a      	str	r2, [r3, #32]
}
 800d480:	bf00      	nop
 800d482:	371c      	adds	r7, #28
 800d484:	46bd      	mov	sp, r7
 800d486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48a:	4770      	bx	lr
 800d48c:	40010000 	.word	0x40010000
 800d490:	40010400 	.word	0x40010400

0800d494 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d494:	b480      	push	{r7}
 800d496:	b087      	sub	sp, #28
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
 800d49c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	6a1b      	ldr	r3, [r3, #32]
 800d4a2:	f023 0210 	bic.w	r2, r3, #16
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	6a1b      	ldr	r3, [r3, #32]
 800d4ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	685b      	ldr	r3, [r3, #4]
 800d4b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	699b      	ldr	r3, [r3, #24]
 800d4ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d4c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d4ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d4cc:	683b      	ldr	r3, [r7, #0]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	021b      	lsls	r3, r3, #8
 800d4d2:	68fa      	ldr	r2, [r7, #12]
 800d4d4:	4313      	orrs	r3, r2
 800d4d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d4d8:	697b      	ldr	r3, [r7, #20]
 800d4da:	f023 0320 	bic.w	r3, r3, #32
 800d4de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d4e0:	683b      	ldr	r3, [r7, #0]
 800d4e2:	689b      	ldr	r3, [r3, #8]
 800d4e4:	011b      	lsls	r3, r3, #4
 800d4e6:	697a      	ldr	r2, [r7, #20]
 800d4e8:	4313      	orrs	r3, r2
 800d4ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	4a22      	ldr	r2, [pc, #136]	; (800d578 <TIM_OC2_SetConfig+0xe4>)
 800d4f0:	4293      	cmp	r3, r2
 800d4f2:	d003      	beq.n	800d4fc <TIM_OC2_SetConfig+0x68>
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	4a21      	ldr	r2, [pc, #132]	; (800d57c <TIM_OC2_SetConfig+0xe8>)
 800d4f8:	4293      	cmp	r3, r2
 800d4fa:	d10d      	bne.n	800d518 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d4fc:	697b      	ldr	r3, [r7, #20]
 800d4fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d502:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d504:	683b      	ldr	r3, [r7, #0]
 800d506:	68db      	ldr	r3, [r3, #12]
 800d508:	011b      	lsls	r3, r3, #4
 800d50a:	697a      	ldr	r2, [r7, #20]
 800d50c:	4313      	orrs	r3, r2
 800d50e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d510:	697b      	ldr	r3, [r7, #20]
 800d512:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d516:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	4a17      	ldr	r2, [pc, #92]	; (800d578 <TIM_OC2_SetConfig+0xe4>)
 800d51c:	4293      	cmp	r3, r2
 800d51e:	d003      	beq.n	800d528 <TIM_OC2_SetConfig+0x94>
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	4a16      	ldr	r2, [pc, #88]	; (800d57c <TIM_OC2_SetConfig+0xe8>)
 800d524:	4293      	cmp	r3, r2
 800d526:	d113      	bne.n	800d550 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d528:	693b      	ldr	r3, [r7, #16]
 800d52a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d52e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d530:	693b      	ldr	r3, [r7, #16]
 800d532:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d536:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	695b      	ldr	r3, [r3, #20]
 800d53c:	009b      	lsls	r3, r3, #2
 800d53e:	693a      	ldr	r2, [r7, #16]
 800d540:	4313      	orrs	r3, r2
 800d542:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	699b      	ldr	r3, [r3, #24]
 800d548:	009b      	lsls	r3, r3, #2
 800d54a:	693a      	ldr	r2, [r7, #16]
 800d54c:	4313      	orrs	r3, r2
 800d54e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	693a      	ldr	r2, [r7, #16]
 800d554:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	68fa      	ldr	r2, [r7, #12]
 800d55a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d55c:	683b      	ldr	r3, [r7, #0]
 800d55e:	685a      	ldr	r2, [r3, #4]
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	697a      	ldr	r2, [r7, #20]
 800d568:	621a      	str	r2, [r3, #32]
}
 800d56a:	bf00      	nop
 800d56c:	371c      	adds	r7, #28
 800d56e:	46bd      	mov	sp, r7
 800d570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d574:	4770      	bx	lr
 800d576:	bf00      	nop
 800d578:	40010000 	.word	0x40010000
 800d57c:	40010400 	.word	0x40010400

0800d580 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d580:	b480      	push	{r7}
 800d582:	b087      	sub	sp, #28
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]
 800d588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	6a1b      	ldr	r3, [r3, #32]
 800d58e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	6a1b      	ldr	r3, [r3, #32]
 800d59a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	685b      	ldr	r3, [r3, #4]
 800d5a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	69db      	ldr	r3, [r3, #28]
 800d5a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d5ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	f023 0303 	bic.w	r3, r3, #3
 800d5b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d5b8:	683b      	ldr	r3, [r7, #0]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	68fa      	ldr	r2, [r7, #12]
 800d5be:	4313      	orrs	r3, r2
 800d5c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d5c2:	697b      	ldr	r3, [r7, #20]
 800d5c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d5c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d5ca:	683b      	ldr	r3, [r7, #0]
 800d5cc:	689b      	ldr	r3, [r3, #8]
 800d5ce:	021b      	lsls	r3, r3, #8
 800d5d0:	697a      	ldr	r2, [r7, #20]
 800d5d2:	4313      	orrs	r3, r2
 800d5d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	4a21      	ldr	r2, [pc, #132]	; (800d660 <TIM_OC3_SetConfig+0xe0>)
 800d5da:	4293      	cmp	r3, r2
 800d5dc:	d003      	beq.n	800d5e6 <TIM_OC3_SetConfig+0x66>
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	4a20      	ldr	r2, [pc, #128]	; (800d664 <TIM_OC3_SetConfig+0xe4>)
 800d5e2:	4293      	cmp	r3, r2
 800d5e4:	d10d      	bne.n	800d602 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d5e6:	697b      	ldr	r3, [r7, #20]
 800d5e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d5ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d5ee:	683b      	ldr	r3, [r7, #0]
 800d5f0:	68db      	ldr	r3, [r3, #12]
 800d5f2:	021b      	lsls	r3, r3, #8
 800d5f4:	697a      	ldr	r2, [r7, #20]
 800d5f6:	4313      	orrs	r3, r2
 800d5f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d5fa:	697b      	ldr	r3, [r7, #20]
 800d5fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d600:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	4a16      	ldr	r2, [pc, #88]	; (800d660 <TIM_OC3_SetConfig+0xe0>)
 800d606:	4293      	cmp	r3, r2
 800d608:	d003      	beq.n	800d612 <TIM_OC3_SetConfig+0x92>
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	4a15      	ldr	r2, [pc, #84]	; (800d664 <TIM_OC3_SetConfig+0xe4>)
 800d60e:	4293      	cmp	r3, r2
 800d610:	d113      	bne.n	800d63a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d612:	693b      	ldr	r3, [r7, #16]
 800d614:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d618:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d61a:	693b      	ldr	r3, [r7, #16]
 800d61c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d620:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d622:	683b      	ldr	r3, [r7, #0]
 800d624:	695b      	ldr	r3, [r3, #20]
 800d626:	011b      	lsls	r3, r3, #4
 800d628:	693a      	ldr	r2, [r7, #16]
 800d62a:	4313      	orrs	r3, r2
 800d62c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d62e:	683b      	ldr	r3, [r7, #0]
 800d630:	699b      	ldr	r3, [r3, #24]
 800d632:	011b      	lsls	r3, r3, #4
 800d634:	693a      	ldr	r2, [r7, #16]
 800d636:	4313      	orrs	r3, r2
 800d638:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	693a      	ldr	r2, [r7, #16]
 800d63e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	68fa      	ldr	r2, [r7, #12]
 800d644:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d646:	683b      	ldr	r3, [r7, #0]
 800d648:	685a      	ldr	r2, [r3, #4]
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	697a      	ldr	r2, [r7, #20]
 800d652:	621a      	str	r2, [r3, #32]
}
 800d654:	bf00      	nop
 800d656:	371c      	adds	r7, #28
 800d658:	46bd      	mov	sp, r7
 800d65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65e:	4770      	bx	lr
 800d660:	40010000 	.word	0x40010000
 800d664:	40010400 	.word	0x40010400

0800d668 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800d668:	b480      	push	{r7}
 800d66a:	b087      	sub	sp, #28
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
 800d670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	6a1b      	ldr	r3, [r3, #32]
 800d676:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	6a1b      	ldr	r3, [r3, #32]
 800d682:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	685b      	ldr	r3, [r3, #4]
 800d688:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	69db      	ldr	r3, [r3, #28]
 800d68e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d69e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d6a0:	683b      	ldr	r3, [r7, #0]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	021b      	lsls	r3, r3, #8
 800d6a6:	68fa      	ldr	r2, [r7, #12]
 800d6a8:	4313      	orrs	r3, r2
 800d6aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d6ac:	693b      	ldr	r3, [r7, #16]
 800d6ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d6b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d6b4:	683b      	ldr	r3, [r7, #0]
 800d6b6:	689b      	ldr	r3, [r3, #8]
 800d6b8:	031b      	lsls	r3, r3, #12
 800d6ba:	693a      	ldr	r2, [r7, #16]
 800d6bc:	4313      	orrs	r3, r2
 800d6be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	4a12      	ldr	r2, [pc, #72]	; (800d70c <TIM_OC4_SetConfig+0xa4>)
 800d6c4:	4293      	cmp	r3, r2
 800d6c6:	d003      	beq.n	800d6d0 <TIM_OC4_SetConfig+0x68>
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	4a11      	ldr	r2, [pc, #68]	; (800d710 <TIM_OC4_SetConfig+0xa8>)
 800d6cc:	4293      	cmp	r3, r2
 800d6ce:	d109      	bne.n	800d6e4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d6d0:	697b      	ldr	r3, [r7, #20]
 800d6d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d6d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d6d8:	683b      	ldr	r3, [r7, #0]
 800d6da:	695b      	ldr	r3, [r3, #20]
 800d6dc:	019b      	lsls	r3, r3, #6
 800d6de:	697a      	ldr	r2, [r7, #20]
 800d6e0:	4313      	orrs	r3, r2
 800d6e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	697a      	ldr	r2, [r7, #20]
 800d6e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	68fa      	ldr	r2, [r7, #12]
 800d6ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d6f0:	683b      	ldr	r3, [r7, #0]
 800d6f2:	685a      	ldr	r2, [r3, #4]
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	693a      	ldr	r2, [r7, #16]
 800d6fc:	621a      	str	r2, [r3, #32]
}
 800d6fe:	bf00      	nop
 800d700:	371c      	adds	r7, #28
 800d702:	46bd      	mov	sp, r7
 800d704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d708:	4770      	bx	lr
 800d70a:	bf00      	nop
 800d70c:	40010000 	.word	0x40010000
 800d710:	40010400 	.word	0x40010400

0800d714 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d714:	b480      	push	{r7}
 800d716:	b087      	sub	sp, #28
 800d718:	af00      	add	r7, sp, #0
 800d71a:	60f8      	str	r0, [r7, #12]
 800d71c:	60b9      	str	r1, [r7, #8]
 800d71e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	6a1b      	ldr	r3, [r3, #32]
 800d724:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	6a1b      	ldr	r3, [r3, #32]
 800d72a:	f023 0201 	bic.w	r2, r3, #1
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	699b      	ldr	r3, [r3, #24]
 800d736:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d738:	693b      	ldr	r3, [r7, #16]
 800d73a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d73e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	011b      	lsls	r3, r3, #4
 800d744:	693a      	ldr	r2, [r7, #16]
 800d746:	4313      	orrs	r3, r2
 800d748:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d74a:	697b      	ldr	r3, [r7, #20]
 800d74c:	f023 030a 	bic.w	r3, r3, #10
 800d750:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d752:	697a      	ldr	r2, [r7, #20]
 800d754:	68bb      	ldr	r3, [r7, #8]
 800d756:	4313      	orrs	r3, r2
 800d758:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	693a      	ldr	r2, [r7, #16]
 800d75e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	697a      	ldr	r2, [r7, #20]
 800d764:	621a      	str	r2, [r3, #32]
}
 800d766:	bf00      	nop
 800d768:	371c      	adds	r7, #28
 800d76a:	46bd      	mov	sp, r7
 800d76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d770:	4770      	bx	lr

0800d772 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d772:	b480      	push	{r7}
 800d774:	b087      	sub	sp, #28
 800d776:	af00      	add	r7, sp, #0
 800d778:	60f8      	str	r0, [r7, #12]
 800d77a:	60b9      	str	r1, [r7, #8]
 800d77c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	6a1b      	ldr	r3, [r3, #32]
 800d782:	f023 0210 	bic.w	r2, r3, #16
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	699b      	ldr	r3, [r3, #24]
 800d78e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	6a1b      	ldr	r3, [r3, #32]
 800d794:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d796:	697b      	ldr	r3, [r7, #20]
 800d798:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d79c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	031b      	lsls	r3, r3, #12
 800d7a2:	697a      	ldr	r2, [r7, #20]
 800d7a4:	4313      	orrs	r3, r2
 800d7a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d7a8:	693b      	ldr	r3, [r7, #16]
 800d7aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800d7ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d7b0:	68bb      	ldr	r3, [r7, #8]
 800d7b2:	011b      	lsls	r3, r3, #4
 800d7b4:	693a      	ldr	r2, [r7, #16]
 800d7b6:	4313      	orrs	r3, r2
 800d7b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	697a      	ldr	r2, [r7, #20]
 800d7be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	693a      	ldr	r2, [r7, #16]
 800d7c4:	621a      	str	r2, [r3, #32]
}
 800d7c6:	bf00      	nop
 800d7c8:	371c      	adds	r7, #28
 800d7ca:	46bd      	mov	sp, r7
 800d7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d0:	4770      	bx	lr

0800d7d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d7d2:	b480      	push	{r7}
 800d7d4:	b085      	sub	sp, #20
 800d7d6:	af00      	add	r7, sp, #0
 800d7d8:	6078      	str	r0, [r7, #4]
 800d7da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	689b      	ldr	r3, [r3, #8]
 800d7e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d7e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d7ea:	683a      	ldr	r2, [r7, #0]
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	4313      	orrs	r3, r2
 800d7f0:	f043 0307 	orr.w	r3, r3, #7
 800d7f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	68fa      	ldr	r2, [r7, #12]
 800d7fa:	609a      	str	r2, [r3, #8]
}
 800d7fc:	bf00      	nop
 800d7fe:	3714      	adds	r7, #20
 800d800:	46bd      	mov	sp, r7
 800d802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d806:	4770      	bx	lr

0800d808 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d808:	b480      	push	{r7}
 800d80a:	b087      	sub	sp, #28
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	60f8      	str	r0, [r7, #12]
 800d810:	60b9      	str	r1, [r7, #8]
 800d812:	607a      	str	r2, [r7, #4]
 800d814:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	689b      	ldr	r3, [r3, #8]
 800d81a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d81c:	697b      	ldr	r3, [r7, #20]
 800d81e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d822:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d824:	683b      	ldr	r3, [r7, #0]
 800d826:	021a      	lsls	r2, r3, #8
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	431a      	orrs	r2, r3
 800d82c:	68bb      	ldr	r3, [r7, #8]
 800d82e:	4313      	orrs	r3, r2
 800d830:	697a      	ldr	r2, [r7, #20]
 800d832:	4313      	orrs	r3, r2
 800d834:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	697a      	ldr	r2, [r7, #20]
 800d83a:	609a      	str	r2, [r3, #8]
}
 800d83c:	bf00      	nop
 800d83e:	371c      	adds	r7, #28
 800d840:	46bd      	mov	sp, r7
 800d842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d846:	4770      	bx	lr

0800d848 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d848:	b480      	push	{r7}
 800d84a:	b087      	sub	sp, #28
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	60f8      	str	r0, [r7, #12]
 800d850:	60b9      	str	r1, [r7, #8]
 800d852:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d854:	68bb      	ldr	r3, [r7, #8]
 800d856:	f003 031f 	and.w	r3, r3, #31
 800d85a:	2201      	movs	r2, #1
 800d85c:	fa02 f303 	lsl.w	r3, r2, r3
 800d860:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	6a1a      	ldr	r2, [r3, #32]
 800d866:	697b      	ldr	r3, [r7, #20]
 800d868:	43db      	mvns	r3, r3
 800d86a:	401a      	ands	r2, r3
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	6a1a      	ldr	r2, [r3, #32]
 800d874:	68bb      	ldr	r3, [r7, #8]
 800d876:	f003 031f 	and.w	r3, r3, #31
 800d87a:	6879      	ldr	r1, [r7, #4]
 800d87c:	fa01 f303 	lsl.w	r3, r1, r3
 800d880:	431a      	orrs	r2, r3
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	621a      	str	r2, [r3, #32]
}
 800d886:	bf00      	nop
 800d888:	371c      	adds	r7, #28
 800d88a:	46bd      	mov	sp, r7
 800d88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d890:	4770      	bx	lr

0800d892 <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d892:	b580      	push	{r7, lr}
 800d894:	b084      	sub	sp, #16
 800d896:	af00      	add	r7, sp, #0
 800d898:	6078      	str	r0, [r7, #4]
 800d89a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	2b04      	cmp	r3, #4
 800d8a0:	d00d      	beq.n	800d8be <HAL_TIMEx_PWMN_Start_IT+0x2c>
 800d8a2:	2b08      	cmp	r3, #8
 800d8a4:	d014      	beq.n	800d8d0 <HAL_TIMEx_PWMN_Start_IT+0x3e>
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d000      	beq.n	800d8ac <HAL_TIMEx_PWMN_Start_IT+0x1a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 800d8aa:	e01a      	b.n	800d8e2 <HAL_TIMEx_PWMN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	68da      	ldr	r2, [r3, #12]
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	f042 0202 	orr.w	r2, r2, #2
 800d8ba:	60da      	str	r2, [r3, #12]
      break;
 800d8bc:	e011      	b.n	800d8e2 <HAL_TIMEx_PWMN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	68da      	ldr	r2, [r3, #12]
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	f042 0204 	orr.w	r2, r2, #4
 800d8cc:	60da      	str	r2, [r3, #12]
      break;
 800d8ce:	e008      	b.n	800d8e2 <HAL_TIMEx_PWMN_Start_IT+0x50>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	68da      	ldr	r2, [r3, #12]
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	f042 0208 	orr.w	r2, r2, #8
 800d8de:	60da      	str	r2, [r3, #12]
      break;
 800d8e0:	bf00      	nop
  }

  /* Enable the TIM Break interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	68da      	ldr	r2, [r3, #12]
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d8f0:	60da      	str	r2, [r3, #12]

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	2204      	movs	r2, #4
 800d8f8:	6839      	ldr	r1, [r7, #0]
 800d8fa:	4618      	mov	r0, r3
 800d8fc:	f000 f93f 	bl	800db7e <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d90e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	689b      	ldr	r3, [r3, #8]
 800d916:	f003 0307 	and.w	r3, r3, #7
 800d91a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	2b06      	cmp	r3, #6
 800d920:	d007      	beq.n	800d932 <HAL_TIMEx_PWMN_Start_IT+0xa0>
  {
    __HAL_TIM_ENABLE(htim);
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	681a      	ldr	r2, [r3, #0]
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	f042 0201 	orr.w	r2, r2, #1
 800d930:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d932:	2300      	movs	r3, #0
}
 800d934:	4618      	mov	r0, r3
 800d936:	3710      	adds	r7, #16
 800d938:	46bd      	mov	sp, r7
 800d93a:	bd80      	pop	{r7, pc}

0800d93c <HAL_TIMEx_PWMN_Stop_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b084      	sub	sp, #16
 800d940:	af00      	add	r7, sp, #0
 800d942:	6078      	str	r0, [r7, #4]
 800d944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccer;

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800d946:	683b      	ldr	r3, [r7, #0]
 800d948:	2b04      	cmp	r3, #4
 800d94a:	d00d      	beq.n	800d968 <HAL_TIMEx_PWMN_Stop_IT+0x2c>
 800d94c:	2b08      	cmp	r3, #8
 800d94e:	d014      	beq.n	800d97a <HAL_TIMEx_PWMN_Stop_IT+0x3e>
 800d950:	2b00      	cmp	r3, #0
 800d952:	d000      	beq.n	800d956 <HAL_TIMEx_PWMN_Stop_IT+0x1a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
      break;
    }

    default:
      break;
 800d954:	e01a      	b.n	800d98c <HAL_TIMEx_PWMN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	68da      	ldr	r2, [r3, #12]
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	f022 0202 	bic.w	r2, r2, #2
 800d964:	60da      	str	r2, [r3, #12]
      break;
 800d966:	e011      	b.n	800d98c <HAL_TIMEx_PWMN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	68da      	ldr	r2, [r3, #12]
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	f022 0204 	bic.w	r2, r2, #4
 800d976:	60da      	str	r2, [r3, #12]
      break;
 800d978:	e008      	b.n	800d98c <HAL_TIMEx_PWMN_Stop_IT+0x50>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	68da      	ldr	r2, [r3, #12]
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	f022 0208 	bic.w	r2, r2, #8
 800d988:	60da      	str	r2, [r3, #12]
      break;
 800d98a:	bf00      	nop
  }

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	2200      	movs	r2, #0
 800d992:	6839      	ldr	r1, [r7, #0]
 800d994:	4618      	mov	r0, r3
 800d996:	f000 f8f2 	bl	800db7e <TIM_CCxNChannelCmd>

  /* Disable the TIM Break interrupt (only if no more channel is active) */
  tmpccer = htim->Instance->CCER;
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	6a1b      	ldr	r3, [r3, #32]
 800d9a0:	60fb      	str	r3, [r7, #12]
  if ((tmpccer & (TIM_CCER_CC1NE | TIM_CCER_CC2NE | TIM_CCER_CC3NE)) == (uint32_t)RESET)
 800d9a2:	68fa      	ldr	r2, [r7, #12]
 800d9a4:	f240 4344 	movw	r3, #1092	; 0x444
 800d9a8:	4013      	ands	r3, r2
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d107      	bne.n	800d9be <HAL_TIMEx_PWMN_Stop_IT+0x82>
  {
    __HAL_TIM_DISABLE_IT(htim, TIM_IT_BREAK);
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	681b      	ldr	r3, [r3, #0]
 800d9b2:	68da      	ldr	r2, [r3, #12]
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d9bc:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	6a1a      	ldr	r2, [r3, #32]
 800d9c4:	f241 1311 	movw	r3, #4369	; 0x1111
 800d9c8:	4013      	ands	r3, r2
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d10f      	bne.n	800d9ee <HAL_TIMEx_PWMN_Stop_IT+0xb2>
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	6a1a      	ldr	r2, [r3, #32]
 800d9d4:	f240 4344 	movw	r3, #1092	; 0x444
 800d9d8:	4013      	ands	r3, r2
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d107      	bne.n	800d9ee <HAL_TIMEx_PWMN_Stop_IT+0xb2>
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d9ec:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	6a1a      	ldr	r2, [r3, #32]
 800d9f4:	f241 1311 	movw	r3, #4369	; 0x1111
 800d9f8:	4013      	ands	r3, r2
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d10f      	bne.n	800da1e <HAL_TIMEx_PWMN_Stop_IT+0xe2>
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	6a1a      	ldr	r2, [r3, #32]
 800da04:	f240 4344 	movw	r3, #1092	; 0x444
 800da08:	4013      	ands	r3, r2
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d107      	bne.n	800da1e <HAL_TIMEx_PWMN_Stop_IT+0xe2>
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	681a      	ldr	r2, [r3, #0]
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	f022 0201 	bic.w	r2, r2, #1
 800da1c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800da1e:	2300      	movs	r3, #0
}
 800da20:	4618      	mov	r0, r3
 800da22:	3710      	adds	r7, #16
 800da24:	46bd      	mov	sp, r7
 800da26:	bd80      	pop	{r7, pc}

0800da28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800da28:	b480      	push	{r7}
 800da2a:	b085      	sub	sp, #20
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
 800da30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800da38:	2b01      	cmp	r3, #1
 800da3a:	d101      	bne.n	800da40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800da3c:	2302      	movs	r3, #2
 800da3e:	e032      	b.n	800daa6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	2201      	movs	r2, #1
 800da44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2202      	movs	r2, #2
 800da4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	685b      	ldr	r3, [r3, #4]
 800da56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	689b      	ldr	r3, [r3, #8]
 800da5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800da66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800da68:	683b      	ldr	r3, [r7, #0]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	68fa      	ldr	r2, [r7, #12]
 800da6e:	4313      	orrs	r3, r2
 800da70:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800da72:	68bb      	ldr	r3, [r7, #8]
 800da74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800da78:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	685b      	ldr	r3, [r3, #4]
 800da7e:	68ba      	ldr	r2, [r7, #8]
 800da80:	4313      	orrs	r3, r2
 800da82:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	68fa      	ldr	r2, [r7, #12]
 800da8a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	68ba      	ldr	r2, [r7, #8]
 800da92:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	2201      	movs	r2, #1
 800da98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	2200      	movs	r2, #0
 800daa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800daa4:	2300      	movs	r3, #0
}
 800daa6:	4618      	mov	r0, r3
 800daa8:	3714      	adds	r7, #20
 800daaa:	46bd      	mov	sp, r7
 800daac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab0:	4770      	bx	lr

0800dab2 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800dab2:	b480      	push	{r7}
 800dab4:	b085      	sub	sp, #20
 800dab6:	af00      	add	r7, sp, #0
 800dab8:	6078      	str	r0, [r7, #4]
 800daba:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800dabc:	2300      	movs	r3, #0
 800dabe:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dac6:	2b01      	cmp	r3, #1
 800dac8:	d101      	bne.n	800dace <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800daca:	2302      	movs	r3, #2
 800dacc:	e03d      	b.n	800db4a <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	2201      	movs	r2, #1
 800dad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800dadc:	683b      	ldr	r3, [r7, #0]
 800dade:	68db      	ldr	r3, [r3, #12]
 800dae0:	4313      	orrs	r3, r2
 800dae2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800daea:	683b      	ldr	r3, [r7, #0]
 800daec:	689b      	ldr	r3, [r3, #8]
 800daee:	4313      	orrs	r3, r2
 800daf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	685b      	ldr	r3, [r3, #4]
 800dafc:	4313      	orrs	r3, r2
 800dafe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	4313      	orrs	r3, r2
 800db0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800db14:	683b      	ldr	r3, [r7, #0]
 800db16:	691b      	ldr	r3, [r3, #16]
 800db18:	4313      	orrs	r3, r2
 800db1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800db22:	683b      	ldr	r3, [r7, #0]
 800db24:	695b      	ldr	r3, [r3, #20]
 800db26:	4313      	orrs	r3, r2
 800db28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800db30:	683b      	ldr	r3, [r7, #0]
 800db32:	69db      	ldr	r3, [r3, #28]
 800db34:	4313      	orrs	r3, r2
 800db36:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	68fa      	ldr	r2, [r7, #12]
 800db3e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	2200      	movs	r2, #0
 800db44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800db48:	2300      	movs	r3, #0
}
 800db4a:	4618      	mov	r0, r3
 800db4c:	3714      	adds	r7, #20
 800db4e:	46bd      	mov	sp, r7
 800db50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db54:	4770      	bx	lr

0800db56 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800db56:	b480      	push	{r7}
 800db58:	b083      	sub	sp, #12
 800db5a:	af00      	add	r7, sp, #0
 800db5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800db5e:	bf00      	nop
 800db60:	370c      	adds	r7, #12
 800db62:	46bd      	mov	sp, r7
 800db64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db68:	4770      	bx	lr

0800db6a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800db6a:	b480      	push	{r7}
 800db6c:	b083      	sub	sp, #12
 800db6e:	af00      	add	r7, sp, #0
 800db70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800db72:	bf00      	nop
 800db74:	370c      	adds	r7, #12
 800db76:	46bd      	mov	sp, r7
 800db78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db7c:	4770      	bx	lr

0800db7e <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800db7e:	b480      	push	{r7}
 800db80:	b087      	sub	sp, #28
 800db82:	af00      	add	r7, sp, #0
 800db84:	60f8      	str	r0, [r7, #12]
 800db86:	60b9      	str	r1, [r7, #8]
 800db88:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800db8a:	68bb      	ldr	r3, [r7, #8]
 800db8c:	f003 031f 	and.w	r3, r3, #31
 800db90:	2204      	movs	r2, #4
 800db92:	fa02 f303 	lsl.w	r3, r2, r3
 800db96:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	6a1a      	ldr	r2, [r3, #32]
 800db9c:	697b      	ldr	r3, [r7, #20]
 800db9e:	43db      	mvns	r3, r3
 800dba0:	401a      	ands	r2, r3
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	6a1a      	ldr	r2, [r3, #32]
 800dbaa:	68bb      	ldr	r3, [r7, #8]
 800dbac:	f003 031f 	and.w	r3, r3, #31
 800dbb0:	6879      	ldr	r1, [r7, #4]
 800dbb2:	fa01 f303 	lsl.w	r3, r1, r3
 800dbb6:	431a      	orrs	r2, r3
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	621a      	str	r2, [r3, #32]
}
 800dbbc:	bf00      	nop
 800dbbe:	371c      	adds	r7, #28
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc6:	4770      	bx	lr

0800dbc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b082      	sub	sp, #8
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d101      	bne.n	800dbda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dbd6:	2301      	movs	r3, #1
 800dbd8:	e03f      	b.n	800dc5a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800dbe0:	b2db      	uxtb	r3, r3
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d106      	bne.n	800dbf4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	2200      	movs	r2, #0
 800dbea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dbee:	6878      	ldr	r0, [r7, #4]
 800dbf0:	f004 fb4c 	bl	801228c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	2224      	movs	r2, #36	; 0x24
 800dbf8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	68da      	ldr	r2, [r3, #12]
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800dc0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800dc0c:	6878      	ldr	r0, [r7, #4]
 800dc0e:	f000 fb47 	bl	800e2a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	691a      	ldr	r2, [r3, #16]
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800dc20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	695a      	ldr	r2, [r3, #20]
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800dc30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	681b      	ldr	r3, [r3, #0]
 800dc36:	68da      	ldr	r2, [r3, #12]
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800dc40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	2200      	movs	r2, #0
 800dc46:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	2220      	movs	r2, #32
 800dc4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	2220      	movs	r2, #32
 800dc54:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800dc58:	2300      	movs	r3, #0
}
 800dc5a:	4618      	mov	r0, r3
 800dc5c:	3708      	adds	r7, #8
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	bd80      	pop	{r7, pc}

0800dc62 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dc62:	b580      	push	{r7, lr}
 800dc64:	b088      	sub	sp, #32
 800dc66:	af02      	add	r7, sp, #8
 800dc68:	60f8      	str	r0, [r7, #12]
 800dc6a:	60b9      	str	r1, [r7, #8]
 800dc6c:	603b      	str	r3, [r7, #0]
 800dc6e:	4613      	mov	r3, r2
 800dc70:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800dc72:	2300      	movs	r3, #0
 800dc74:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800dc7c:	b2db      	uxtb	r3, r3
 800dc7e:	2b20      	cmp	r3, #32
 800dc80:	f040 8083 	bne.w	800dd8a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800dc84:	68bb      	ldr	r3, [r7, #8]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d002      	beq.n	800dc90 <HAL_UART_Transmit+0x2e>
 800dc8a:	88fb      	ldrh	r3, [r7, #6]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d101      	bne.n	800dc94 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800dc90:	2301      	movs	r3, #1
 800dc92:	e07b      	b.n	800dd8c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800dc9a:	2b01      	cmp	r3, #1
 800dc9c:	d101      	bne.n	800dca2 <HAL_UART_Transmit+0x40>
 800dc9e:	2302      	movs	r3, #2
 800dca0:	e074      	b.n	800dd8c <HAL_UART_Transmit+0x12a>
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	2201      	movs	r2, #1
 800dca6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	2200      	movs	r2, #0
 800dcae:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	2221      	movs	r2, #33	; 0x21
 800dcb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800dcb8:	f7fb f8e4 	bl	8008e84 <HAL_GetTick>
 800dcbc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	88fa      	ldrh	r2, [r7, #6]
 800dcc2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	88fa      	ldrh	r2, [r7, #6]
 800dcc8:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800dcca:	e042      	b.n	800dd52 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800dcd0:	b29b      	uxth	r3, r3
 800dcd2:	3b01      	subs	r3, #1
 800dcd4:	b29a      	uxth	r2, r3
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	689b      	ldr	r3, [r3, #8]
 800dcde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dce2:	d122      	bne.n	800dd2a <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800dce4:	683b      	ldr	r3, [r7, #0]
 800dce6:	9300      	str	r3, [sp, #0]
 800dce8:	697b      	ldr	r3, [r7, #20]
 800dcea:	2200      	movs	r2, #0
 800dcec:	2180      	movs	r1, #128	; 0x80
 800dcee:	68f8      	ldr	r0, [r7, #12]
 800dcf0:	f000 f96a 	bl	800dfc8 <UART_WaitOnFlagUntilTimeout>
 800dcf4:	4603      	mov	r3, r0
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d001      	beq.n	800dcfe <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800dcfa:	2303      	movs	r3, #3
 800dcfc:	e046      	b.n	800dd8c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800dcfe:	68bb      	ldr	r3, [r7, #8]
 800dd00:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800dd02:	693b      	ldr	r3, [r7, #16]
 800dd04:	881b      	ldrh	r3, [r3, #0]
 800dd06:	461a      	mov	r2, r3
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dd10:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	691b      	ldr	r3, [r3, #16]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d103      	bne.n	800dd22 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800dd1a:	68bb      	ldr	r3, [r7, #8]
 800dd1c:	3302      	adds	r3, #2
 800dd1e:	60bb      	str	r3, [r7, #8]
 800dd20:	e017      	b.n	800dd52 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800dd22:	68bb      	ldr	r3, [r7, #8]
 800dd24:	3301      	adds	r3, #1
 800dd26:	60bb      	str	r3, [r7, #8]
 800dd28:	e013      	b.n	800dd52 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800dd2a:	683b      	ldr	r3, [r7, #0]
 800dd2c:	9300      	str	r3, [sp, #0]
 800dd2e:	697b      	ldr	r3, [r7, #20]
 800dd30:	2200      	movs	r2, #0
 800dd32:	2180      	movs	r1, #128	; 0x80
 800dd34:	68f8      	ldr	r0, [r7, #12]
 800dd36:	f000 f947 	bl	800dfc8 <UART_WaitOnFlagUntilTimeout>
 800dd3a:	4603      	mov	r3, r0
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d001      	beq.n	800dd44 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800dd40:	2303      	movs	r3, #3
 800dd42:	e023      	b.n	800dd8c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800dd44:	68bb      	ldr	r3, [r7, #8]
 800dd46:	1c5a      	adds	r2, r3, #1
 800dd48:	60ba      	str	r2, [r7, #8]
 800dd4a:	781a      	ldrb	r2, [r3, #0]
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800dd56:	b29b      	uxth	r3, r3
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d1b7      	bne.n	800dccc <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800dd5c:	683b      	ldr	r3, [r7, #0]
 800dd5e:	9300      	str	r3, [sp, #0]
 800dd60:	697b      	ldr	r3, [r7, #20]
 800dd62:	2200      	movs	r2, #0
 800dd64:	2140      	movs	r1, #64	; 0x40
 800dd66:	68f8      	ldr	r0, [r7, #12]
 800dd68:	f000 f92e 	bl	800dfc8 <UART_WaitOnFlagUntilTimeout>
 800dd6c:	4603      	mov	r3, r0
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d001      	beq.n	800dd76 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800dd72:	2303      	movs	r3, #3
 800dd74:	e00a      	b.n	800dd8c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	2220      	movs	r2, #32
 800dd7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	2200      	movs	r2, #0
 800dd82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800dd86:	2300      	movs	r3, #0
 800dd88:	e000      	b.n	800dd8c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800dd8a:	2302      	movs	r3, #2
  }
}
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	3718      	adds	r7, #24
 800dd90:	46bd      	mov	sp, r7
 800dd92:	bd80      	pop	{r7, pc}

0800dd94 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800dd94:	b580      	push	{r7, lr}
 800dd96:	b088      	sub	sp, #32
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	681b      	ldr	r3, [r3, #0]
 800dda8:	68db      	ldr	r3, [r3, #12]
 800ddaa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	695b      	ldr	r3, [r3, #20]
 800ddb2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800ddb8:	2300      	movs	r3, #0
 800ddba:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800ddbc:	69fb      	ldr	r3, [r7, #28]
 800ddbe:	f003 030f 	and.w	r3, r3, #15
 800ddc2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800ddc4:	693b      	ldr	r3, [r7, #16]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d10d      	bne.n	800dde6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ddca:	69fb      	ldr	r3, [r7, #28]
 800ddcc:	f003 0320 	and.w	r3, r3, #32
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d008      	beq.n	800dde6 <HAL_UART_IRQHandler+0x52>
 800ddd4:	69bb      	ldr	r3, [r7, #24]
 800ddd6:	f003 0320 	and.w	r3, r3, #32
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d003      	beq.n	800dde6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800ddde:	6878      	ldr	r0, [r7, #4]
 800dde0:	f000 f9dc 	bl	800e19c <UART_Receive_IT>
      return;
 800dde4:	e0cc      	b.n	800df80 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800dde6:	693b      	ldr	r3, [r7, #16]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	f000 80ab 	beq.w	800df44 <HAL_UART_IRQHandler+0x1b0>
 800ddee:	697b      	ldr	r3, [r7, #20]
 800ddf0:	f003 0301 	and.w	r3, r3, #1
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d105      	bne.n	800de04 <HAL_UART_IRQHandler+0x70>
 800ddf8:	69bb      	ldr	r3, [r7, #24]
 800ddfa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ddfe:	2b00      	cmp	r3, #0
 800de00:	f000 80a0 	beq.w	800df44 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800de04:	69fb      	ldr	r3, [r7, #28]
 800de06:	f003 0301 	and.w	r3, r3, #1
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d00a      	beq.n	800de24 <HAL_UART_IRQHandler+0x90>
 800de0e:	69bb      	ldr	r3, [r7, #24]
 800de10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de14:	2b00      	cmp	r3, #0
 800de16:	d005      	beq.n	800de24 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de1c:	f043 0201 	orr.w	r2, r3, #1
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800de24:	69fb      	ldr	r3, [r7, #28]
 800de26:	f003 0304 	and.w	r3, r3, #4
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d00a      	beq.n	800de44 <HAL_UART_IRQHandler+0xb0>
 800de2e:	697b      	ldr	r3, [r7, #20]
 800de30:	f003 0301 	and.w	r3, r3, #1
 800de34:	2b00      	cmp	r3, #0
 800de36:	d005      	beq.n	800de44 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de3c:	f043 0202 	orr.w	r2, r3, #2
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800de44:	69fb      	ldr	r3, [r7, #28]
 800de46:	f003 0302 	and.w	r3, r3, #2
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d00a      	beq.n	800de64 <HAL_UART_IRQHandler+0xd0>
 800de4e:	697b      	ldr	r3, [r7, #20]
 800de50:	f003 0301 	and.w	r3, r3, #1
 800de54:	2b00      	cmp	r3, #0
 800de56:	d005      	beq.n	800de64 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de5c:	f043 0204 	orr.w	r2, r3, #4
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800de64:	69fb      	ldr	r3, [r7, #28]
 800de66:	f003 0308 	and.w	r3, r3, #8
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d00a      	beq.n	800de84 <HAL_UART_IRQHandler+0xf0>
 800de6e:	697b      	ldr	r3, [r7, #20]
 800de70:	f003 0301 	and.w	r3, r3, #1
 800de74:	2b00      	cmp	r3, #0
 800de76:	d005      	beq.n	800de84 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de7c:	f043 0208 	orr.w	r2, r3, #8
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d078      	beq.n	800df7e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800de8c:	69fb      	ldr	r3, [r7, #28]
 800de8e:	f003 0320 	and.w	r3, r3, #32
 800de92:	2b00      	cmp	r3, #0
 800de94:	d007      	beq.n	800dea6 <HAL_UART_IRQHandler+0x112>
 800de96:	69bb      	ldr	r3, [r7, #24]
 800de98:	f003 0320 	and.w	r3, r3, #32
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d002      	beq.n	800dea6 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 800dea0:	6878      	ldr	r0, [r7, #4]
 800dea2:	f000 f97b 	bl	800e19c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	695b      	ldr	r3, [r3, #20]
 800deac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800deb0:	2b40      	cmp	r3, #64	; 0x40
 800deb2:	bf0c      	ite	eq
 800deb4:	2301      	moveq	r3, #1
 800deb6:	2300      	movne	r3, #0
 800deb8:	b2db      	uxtb	r3, r3
 800deba:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dec0:	f003 0308 	and.w	r3, r3, #8
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d102      	bne.n	800dece <HAL_UART_IRQHandler+0x13a>
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d031      	beq.n	800df32 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800dece:	6878      	ldr	r0, [r7, #4]
 800ded0:	f000 f8c4 	bl	800e05c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	695b      	ldr	r3, [r3, #20]
 800deda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dede:	2b40      	cmp	r3, #64	; 0x40
 800dee0:	d123      	bne.n	800df2a <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	695a      	ldr	r2, [r3, #20]
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	681b      	ldr	r3, [r3, #0]
 800deec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800def0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800def6:	2b00      	cmp	r3, #0
 800def8:	d013      	beq.n	800df22 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800defe:	4a22      	ldr	r2, [pc, #136]	; (800df88 <HAL_UART_IRQHandler+0x1f4>)
 800df00:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df06:	4618      	mov	r0, r3
 800df08:	f7fc fb72 	bl	800a5f0 <HAL_DMA_Abort_IT>
 800df0c:	4603      	mov	r3, r0
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d016      	beq.n	800df40 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df18:	687a      	ldr	r2, [r7, #4]
 800df1a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800df1c:	4610      	mov	r0, r2
 800df1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800df20:	e00e      	b.n	800df40 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800df22:	6878      	ldr	r0, [r7, #4]
 800df24:	f000 f846 	bl	800dfb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800df28:	e00a      	b.n	800df40 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800df2a:	6878      	ldr	r0, [r7, #4]
 800df2c:	f000 f842 	bl	800dfb4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800df30:	e006      	b.n	800df40 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800df32:	6878      	ldr	r0, [r7, #4]
 800df34:	f000 f83e 	bl	800dfb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	2200      	movs	r2, #0
 800df3c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800df3e:	e01e      	b.n	800df7e <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800df40:	bf00      	nop
    return;
 800df42:	e01c      	b.n	800df7e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800df44:	69fb      	ldr	r3, [r7, #28]
 800df46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d008      	beq.n	800df60 <HAL_UART_IRQHandler+0x1cc>
 800df4e:	69bb      	ldr	r3, [r7, #24]
 800df50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df54:	2b00      	cmp	r3, #0
 800df56:	d003      	beq.n	800df60 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 800df58:	6878      	ldr	r0, [r7, #4]
 800df5a:	f000 f8b1 	bl	800e0c0 <UART_Transmit_IT>
    return;
 800df5e:	e00f      	b.n	800df80 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800df60:	69fb      	ldr	r3, [r7, #28]
 800df62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df66:	2b00      	cmp	r3, #0
 800df68:	d00a      	beq.n	800df80 <HAL_UART_IRQHandler+0x1ec>
 800df6a:	69bb      	ldr	r3, [r7, #24]
 800df6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df70:	2b00      	cmp	r3, #0
 800df72:	d005      	beq.n	800df80 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800df74:	6878      	ldr	r0, [r7, #4]
 800df76:	f000 f8f9 	bl	800e16c <UART_EndTransmit_IT>
    return;
 800df7a:	bf00      	nop
 800df7c:	e000      	b.n	800df80 <HAL_UART_IRQHandler+0x1ec>
    return;
 800df7e:	bf00      	nop
  }
}
 800df80:	3720      	adds	r7, #32
 800df82:	46bd      	mov	sp, r7
 800df84:	bd80      	pop	{r7, pc}
 800df86:	bf00      	nop
 800df88:	0800e099 	.word	0x0800e099

0800df8c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800df8c:	b480      	push	{r7}
 800df8e:	b083      	sub	sp, #12
 800df90:	af00      	add	r7, sp, #0
 800df92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800df94:	bf00      	nop
 800df96:	370c      	adds	r7, #12
 800df98:	46bd      	mov	sp, r7
 800df9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9e:	4770      	bx	lr

0800dfa0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800dfa0:	b480      	push	{r7}
 800dfa2:	b083      	sub	sp, #12
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800dfa8:	bf00      	nop
 800dfaa:	370c      	adds	r7, #12
 800dfac:	46bd      	mov	sp, r7
 800dfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb2:	4770      	bx	lr

0800dfb4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800dfb4:	b480      	push	{r7}
 800dfb6:	b083      	sub	sp, #12
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800dfbc:	bf00      	nop
 800dfbe:	370c      	adds	r7, #12
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc6:	4770      	bx	lr

0800dfc8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b084      	sub	sp, #16
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	60f8      	str	r0, [r7, #12]
 800dfd0:	60b9      	str	r1, [r7, #8]
 800dfd2:	603b      	str	r3, [r7, #0]
 800dfd4:	4613      	mov	r3, r2
 800dfd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dfd8:	e02c      	b.n	800e034 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dfda:	69bb      	ldr	r3, [r7, #24]
 800dfdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfe0:	d028      	beq.n	800e034 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800dfe2:	69bb      	ldr	r3, [r7, #24]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	d007      	beq.n	800dff8 <UART_WaitOnFlagUntilTimeout+0x30>
 800dfe8:	f7fa ff4c 	bl	8008e84 <HAL_GetTick>
 800dfec:	4602      	mov	r2, r0
 800dfee:	683b      	ldr	r3, [r7, #0]
 800dff0:	1ad3      	subs	r3, r2, r3
 800dff2:	69ba      	ldr	r2, [r7, #24]
 800dff4:	429a      	cmp	r2, r3
 800dff6:	d21d      	bcs.n	800e034 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	68da      	ldr	r2, [r3, #12]
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800e006:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	695a      	ldr	r2, [r3, #20]
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	f022 0201 	bic.w	r2, r2, #1
 800e016:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	2220      	movs	r2, #32
 800e01c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	2220      	movs	r2, #32
 800e024:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	2200      	movs	r2, #0
 800e02c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800e030:	2303      	movs	r3, #3
 800e032:	e00f      	b.n	800e054 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	681a      	ldr	r2, [r3, #0]
 800e03a:	68bb      	ldr	r3, [r7, #8]
 800e03c:	4013      	ands	r3, r2
 800e03e:	68ba      	ldr	r2, [r7, #8]
 800e040:	429a      	cmp	r2, r3
 800e042:	bf0c      	ite	eq
 800e044:	2301      	moveq	r3, #1
 800e046:	2300      	movne	r3, #0
 800e048:	b2db      	uxtb	r3, r3
 800e04a:	461a      	mov	r2, r3
 800e04c:	79fb      	ldrb	r3, [r7, #7]
 800e04e:	429a      	cmp	r2, r3
 800e050:	d0c3      	beq.n	800dfda <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800e052:	2300      	movs	r3, #0
}
 800e054:	4618      	mov	r0, r3
 800e056:	3710      	adds	r7, #16
 800e058:	46bd      	mov	sp, r7
 800e05a:	bd80      	pop	{r7, pc}

0800e05c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e05c:	b480      	push	{r7}
 800e05e:	b083      	sub	sp, #12
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	68da      	ldr	r2, [r3, #12]
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800e072:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	695a      	ldr	r2, [r3, #20]
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	f022 0201 	bic.w	r2, r2, #1
 800e082:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	2220      	movs	r2, #32
 800e088:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800e08c:	bf00      	nop
 800e08e:	370c      	adds	r7, #12
 800e090:	46bd      	mov	sp, r7
 800e092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e096:	4770      	bx	lr

0800e098 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b084      	sub	sp, #16
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	2200      	movs	r2, #0
 800e0aa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	2200      	movs	r2, #0
 800e0b0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e0b2:	68f8      	ldr	r0, [r7, #12]
 800e0b4:	f7ff ff7e 	bl	800dfb4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e0b8:	bf00      	nop
 800e0ba:	3710      	adds	r7, #16
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	bd80      	pop	{r7, pc}

0800e0c0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800e0c0:	b480      	push	{r7}
 800e0c2:	b085      	sub	sp, #20
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e0ce:	b2db      	uxtb	r3, r3
 800e0d0:	2b21      	cmp	r3, #33	; 0x21
 800e0d2:	d144      	bne.n	800e15e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	689b      	ldr	r3, [r3, #8]
 800e0d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e0dc:	d11a      	bne.n	800e114 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	6a1b      	ldr	r3, [r3, #32]
 800e0e2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	881b      	ldrh	r3, [r3, #0]
 800e0e8:	461a      	mov	r2, r3
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e0f2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	691b      	ldr	r3, [r3, #16]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d105      	bne.n	800e108 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	6a1b      	ldr	r3, [r3, #32]
 800e100:	1c9a      	adds	r2, r3, #2
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	621a      	str	r2, [r3, #32]
 800e106:	e00e      	b.n	800e126 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	6a1b      	ldr	r3, [r3, #32]
 800e10c:	1c5a      	adds	r2, r3, #1
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	621a      	str	r2, [r3, #32]
 800e112:	e008      	b.n	800e126 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	6a1b      	ldr	r3, [r3, #32]
 800e118:	1c59      	adds	r1, r3, #1
 800e11a:	687a      	ldr	r2, [r7, #4]
 800e11c:	6211      	str	r1, [r2, #32]
 800e11e:	781a      	ldrb	r2, [r3, #0]
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800e12a:	b29b      	uxth	r3, r3
 800e12c:	3b01      	subs	r3, #1
 800e12e:	b29b      	uxth	r3, r3
 800e130:	687a      	ldr	r2, [r7, #4]
 800e132:	4619      	mov	r1, r3
 800e134:	84d1      	strh	r1, [r2, #38]	; 0x26
 800e136:	2b00      	cmp	r3, #0
 800e138:	d10f      	bne.n	800e15a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	68da      	ldr	r2, [r3, #12]
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e148:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	68da      	ldr	r2, [r3, #12]
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e158:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800e15a:	2300      	movs	r3, #0
 800e15c:	e000      	b.n	800e160 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800e15e:	2302      	movs	r3, #2
  }
}
 800e160:	4618      	mov	r0, r3
 800e162:	3714      	adds	r7, #20
 800e164:	46bd      	mov	sp, r7
 800e166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16a:	4770      	bx	lr

0800e16c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b082      	sub	sp, #8
 800e170:	af00      	add	r7, sp, #0
 800e172:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	68da      	ldr	r2, [r3, #12]
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e182:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	2220      	movs	r2, #32
 800e188:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e18c:	6878      	ldr	r0, [r7, #4]
 800e18e:	f7ff fefd 	bl	800df8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800e192:	2300      	movs	r3, #0
}
 800e194:	4618      	mov	r0, r3
 800e196:	3708      	adds	r7, #8
 800e198:	46bd      	mov	sp, r7
 800e19a:	bd80      	pop	{r7, pc}

0800e19c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	b084      	sub	sp, #16
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800e1aa:	b2db      	uxtb	r3, r3
 800e1ac:	2b22      	cmp	r3, #34	; 0x22
 800e1ae:	d171      	bne.n	800e294 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	689b      	ldr	r3, [r3, #8]
 800e1b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e1b8:	d123      	bne.n	800e202 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1be:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	691b      	ldr	r3, [r3, #16]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d10e      	bne.n	800e1e6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	685b      	ldr	r3, [r3, #4]
 800e1ce:	b29b      	uxth	r3, r3
 800e1d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e1d4:	b29a      	uxth	r2, r3
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1de:	1c9a      	adds	r2, r3, #2
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	629a      	str	r2, [r3, #40]	; 0x28
 800e1e4:	e029      	b.n	800e23a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	685b      	ldr	r3, [r3, #4]
 800e1ec:	b29b      	uxth	r3, r3
 800e1ee:	b2db      	uxtb	r3, r3
 800e1f0:	b29a      	uxth	r2, r3
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1fa:	1c5a      	adds	r2, r3, #1
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	629a      	str	r2, [r3, #40]	; 0x28
 800e200:	e01b      	b.n	800e23a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	691b      	ldr	r3, [r3, #16]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d10a      	bne.n	800e220 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	6858      	ldr	r0, [r3, #4]
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e214:	1c59      	adds	r1, r3, #1
 800e216:	687a      	ldr	r2, [r7, #4]
 800e218:	6291      	str	r1, [r2, #40]	; 0x28
 800e21a:	b2c2      	uxtb	r2, r0
 800e21c:	701a      	strb	r2, [r3, #0]
 800e21e:	e00c      	b.n	800e23a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	685b      	ldr	r3, [r3, #4]
 800e226:	b2da      	uxtb	r2, r3
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e22c:	1c58      	adds	r0, r3, #1
 800e22e:	6879      	ldr	r1, [r7, #4]
 800e230:	6288      	str	r0, [r1, #40]	; 0x28
 800e232:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800e236:	b2d2      	uxtb	r2, r2
 800e238:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800e23e:	b29b      	uxth	r3, r3
 800e240:	3b01      	subs	r3, #1
 800e242:	b29b      	uxth	r3, r3
 800e244:	687a      	ldr	r2, [r7, #4]
 800e246:	4619      	mov	r1, r3
 800e248:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d120      	bne.n	800e290 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	68da      	ldr	r2, [r3, #12]
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	f022 0220 	bic.w	r2, r2, #32
 800e25c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	68da      	ldr	r2, [r3, #12]
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800e26c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	695a      	ldr	r2, [r3, #20]
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	f022 0201 	bic.w	r2, r2, #1
 800e27c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	2220      	movs	r2, #32
 800e282:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800e286:	6878      	ldr	r0, [r7, #4]
 800e288:	f7ff fe8a 	bl	800dfa0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800e28c:	2300      	movs	r3, #0
 800e28e:	e002      	b.n	800e296 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800e290:	2300      	movs	r3, #0
 800e292:	e000      	b.n	800e296 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800e294:	2302      	movs	r3, #2
  }
}
 800e296:	4618      	mov	r0, r3
 800e298:	3710      	adds	r7, #16
 800e29a:	46bd      	mov	sp, r7
 800e29c:	bd80      	pop	{r7, pc}
	...

0800e2a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e2a0:	b5b0      	push	{r4, r5, r7, lr}
 800e2a2:	b084      	sub	sp, #16
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	691b      	ldr	r3, [r3, #16]
 800e2ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	68da      	ldr	r2, [r3, #12]
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	430a      	orrs	r2, r1
 800e2bc:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	689a      	ldr	r2, [r3, #8]
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	691b      	ldr	r3, [r3, #16]
 800e2c6:	431a      	orrs	r2, r3
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	695b      	ldr	r3, [r3, #20]
 800e2cc:	431a      	orrs	r2, r3
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	69db      	ldr	r3, [r3, #28]
 800e2d2:	4313      	orrs	r3, r2
 800e2d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	68db      	ldr	r3, [r3, #12]
 800e2dc:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800e2e0:	f023 030c 	bic.w	r3, r3, #12
 800e2e4:	687a      	ldr	r2, [r7, #4]
 800e2e6:	6812      	ldr	r2, [r2, #0]
 800e2e8:	68f9      	ldr	r1, [r7, #12]
 800e2ea:	430b      	orrs	r3, r1
 800e2ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	695b      	ldr	r3, [r3, #20]
 800e2f4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	699a      	ldr	r2, [r3, #24]
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	430a      	orrs	r2, r1
 800e302:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	69db      	ldr	r3, [r3, #28]
 800e308:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e30c:	f040 80e4 	bne.w	800e4d8 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	681b      	ldr	r3, [r3, #0]
 800e314:	4aab      	ldr	r2, [pc, #684]	; (800e5c4 <UART_SetConfig+0x324>)
 800e316:	4293      	cmp	r3, r2
 800e318:	d004      	beq.n	800e324 <UART_SetConfig+0x84>
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	4aaa      	ldr	r2, [pc, #680]	; (800e5c8 <UART_SetConfig+0x328>)
 800e320:	4293      	cmp	r3, r2
 800e322:	d16c      	bne.n	800e3fe <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800e324:	f7fd f998 	bl	800b658 <HAL_RCC_GetPCLK2Freq>
 800e328:	4602      	mov	r2, r0
 800e32a:	4613      	mov	r3, r2
 800e32c:	009b      	lsls	r3, r3, #2
 800e32e:	4413      	add	r3, r2
 800e330:	009a      	lsls	r2, r3, #2
 800e332:	441a      	add	r2, r3
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	685b      	ldr	r3, [r3, #4]
 800e338:	005b      	lsls	r3, r3, #1
 800e33a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e33e:	4aa3      	ldr	r2, [pc, #652]	; (800e5cc <UART_SetConfig+0x32c>)
 800e340:	fba2 2303 	umull	r2, r3, r2, r3
 800e344:	095b      	lsrs	r3, r3, #5
 800e346:	011c      	lsls	r4, r3, #4
 800e348:	f7fd f986 	bl	800b658 <HAL_RCC_GetPCLK2Freq>
 800e34c:	4602      	mov	r2, r0
 800e34e:	4613      	mov	r3, r2
 800e350:	009b      	lsls	r3, r3, #2
 800e352:	4413      	add	r3, r2
 800e354:	009a      	lsls	r2, r3, #2
 800e356:	441a      	add	r2, r3
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	685b      	ldr	r3, [r3, #4]
 800e35c:	005b      	lsls	r3, r3, #1
 800e35e:	fbb2 f5f3 	udiv	r5, r2, r3
 800e362:	f7fd f979 	bl	800b658 <HAL_RCC_GetPCLK2Freq>
 800e366:	4602      	mov	r2, r0
 800e368:	4613      	mov	r3, r2
 800e36a:	009b      	lsls	r3, r3, #2
 800e36c:	4413      	add	r3, r2
 800e36e:	009a      	lsls	r2, r3, #2
 800e370:	441a      	add	r2, r3
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	685b      	ldr	r3, [r3, #4]
 800e376:	005b      	lsls	r3, r3, #1
 800e378:	fbb2 f3f3 	udiv	r3, r2, r3
 800e37c:	4a93      	ldr	r2, [pc, #588]	; (800e5cc <UART_SetConfig+0x32c>)
 800e37e:	fba2 2303 	umull	r2, r3, r2, r3
 800e382:	095b      	lsrs	r3, r3, #5
 800e384:	2264      	movs	r2, #100	; 0x64
 800e386:	fb02 f303 	mul.w	r3, r2, r3
 800e38a:	1aeb      	subs	r3, r5, r3
 800e38c:	00db      	lsls	r3, r3, #3
 800e38e:	3332      	adds	r3, #50	; 0x32
 800e390:	4a8e      	ldr	r2, [pc, #568]	; (800e5cc <UART_SetConfig+0x32c>)
 800e392:	fba2 2303 	umull	r2, r3, r2, r3
 800e396:	095b      	lsrs	r3, r3, #5
 800e398:	005b      	lsls	r3, r3, #1
 800e39a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e39e:	441c      	add	r4, r3
 800e3a0:	f7fd f95a 	bl	800b658 <HAL_RCC_GetPCLK2Freq>
 800e3a4:	4602      	mov	r2, r0
 800e3a6:	4613      	mov	r3, r2
 800e3a8:	009b      	lsls	r3, r3, #2
 800e3aa:	4413      	add	r3, r2
 800e3ac:	009a      	lsls	r2, r3, #2
 800e3ae:	441a      	add	r2, r3
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	685b      	ldr	r3, [r3, #4]
 800e3b4:	005b      	lsls	r3, r3, #1
 800e3b6:	fbb2 f5f3 	udiv	r5, r2, r3
 800e3ba:	f7fd f94d 	bl	800b658 <HAL_RCC_GetPCLK2Freq>
 800e3be:	4602      	mov	r2, r0
 800e3c0:	4613      	mov	r3, r2
 800e3c2:	009b      	lsls	r3, r3, #2
 800e3c4:	4413      	add	r3, r2
 800e3c6:	009a      	lsls	r2, r3, #2
 800e3c8:	441a      	add	r2, r3
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	685b      	ldr	r3, [r3, #4]
 800e3ce:	005b      	lsls	r3, r3, #1
 800e3d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800e3d4:	4a7d      	ldr	r2, [pc, #500]	; (800e5cc <UART_SetConfig+0x32c>)
 800e3d6:	fba2 2303 	umull	r2, r3, r2, r3
 800e3da:	095b      	lsrs	r3, r3, #5
 800e3dc:	2264      	movs	r2, #100	; 0x64
 800e3de:	fb02 f303 	mul.w	r3, r2, r3
 800e3e2:	1aeb      	subs	r3, r5, r3
 800e3e4:	00db      	lsls	r3, r3, #3
 800e3e6:	3332      	adds	r3, #50	; 0x32
 800e3e8:	4a78      	ldr	r2, [pc, #480]	; (800e5cc <UART_SetConfig+0x32c>)
 800e3ea:	fba2 2303 	umull	r2, r3, r2, r3
 800e3ee:	095b      	lsrs	r3, r3, #5
 800e3f0:	f003 0207 	and.w	r2, r3, #7
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	4422      	add	r2, r4
 800e3fa:	609a      	str	r2, [r3, #8]
 800e3fc:	e154      	b.n	800e6a8 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800e3fe:	f7fd f917 	bl	800b630 <HAL_RCC_GetPCLK1Freq>
 800e402:	4602      	mov	r2, r0
 800e404:	4613      	mov	r3, r2
 800e406:	009b      	lsls	r3, r3, #2
 800e408:	4413      	add	r3, r2
 800e40a:	009a      	lsls	r2, r3, #2
 800e40c:	441a      	add	r2, r3
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	685b      	ldr	r3, [r3, #4]
 800e412:	005b      	lsls	r3, r3, #1
 800e414:	fbb2 f3f3 	udiv	r3, r2, r3
 800e418:	4a6c      	ldr	r2, [pc, #432]	; (800e5cc <UART_SetConfig+0x32c>)
 800e41a:	fba2 2303 	umull	r2, r3, r2, r3
 800e41e:	095b      	lsrs	r3, r3, #5
 800e420:	011c      	lsls	r4, r3, #4
 800e422:	f7fd f905 	bl	800b630 <HAL_RCC_GetPCLK1Freq>
 800e426:	4602      	mov	r2, r0
 800e428:	4613      	mov	r3, r2
 800e42a:	009b      	lsls	r3, r3, #2
 800e42c:	4413      	add	r3, r2
 800e42e:	009a      	lsls	r2, r3, #2
 800e430:	441a      	add	r2, r3
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	685b      	ldr	r3, [r3, #4]
 800e436:	005b      	lsls	r3, r3, #1
 800e438:	fbb2 f5f3 	udiv	r5, r2, r3
 800e43c:	f7fd f8f8 	bl	800b630 <HAL_RCC_GetPCLK1Freq>
 800e440:	4602      	mov	r2, r0
 800e442:	4613      	mov	r3, r2
 800e444:	009b      	lsls	r3, r3, #2
 800e446:	4413      	add	r3, r2
 800e448:	009a      	lsls	r2, r3, #2
 800e44a:	441a      	add	r2, r3
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	685b      	ldr	r3, [r3, #4]
 800e450:	005b      	lsls	r3, r3, #1
 800e452:	fbb2 f3f3 	udiv	r3, r2, r3
 800e456:	4a5d      	ldr	r2, [pc, #372]	; (800e5cc <UART_SetConfig+0x32c>)
 800e458:	fba2 2303 	umull	r2, r3, r2, r3
 800e45c:	095b      	lsrs	r3, r3, #5
 800e45e:	2264      	movs	r2, #100	; 0x64
 800e460:	fb02 f303 	mul.w	r3, r2, r3
 800e464:	1aeb      	subs	r3, r5, r3
 800e466:	00db      	lsls	r3, r3, #3
 800e468:	3332      	adds	r3, #50	; 0x32
 800e46a:	4a58      	ldr	r2, [pc, #352]	; (800e5cc <UART_SetConfig+0x32c>)
 800e46c:	fba2 2303 	umull	r2, r3, r2, r3
 800e470:	095b      	lsrs	r3, r3, #5
 800e472:	005b      	lsls	r3, r3, #1
 800e474:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e478:	441c      	add	r4, r3
 800e47a:	f7fd f8d9 	bl	800b630 <HAL_RCC_GetPCLK1Freq>
 800e47e:	4602      	mov	r2, r0
 800e480:	4613      	mov	r3, r2
 800e482:	009b      	lsls	r3, r3, #2
 800e484:	4413      	add	r3, r2
 800e486:	009a      	lsls	r2, r3, #2
 800e488:	441a      	add	r2, r3
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	685b      	ldr	r3, [r3, #4]
 800e48e:	005b      	lsls	r3, r3, #1
 800e490:	fbb2 f5f3 	udiv	r5, r2, r3
 800e494:	f7fd f8cc 	bl	800b630 <HAL_RCC_GetPCLK1Freq>
 800e498:	4602      	mov	r2, r0
 800e49a:	4613      	mov	r3, r2
 800e49c:	009b      	lsls	r3, r3, #2
 800e49e:	4413      	add	r3, r2
 800e4a0:	009a      	lsls	r2, r3, #2
 800e4a2:	441a      	add	r2, r3
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	685b      	ldr	r3, [r3, #4]
 800e4a8:	005b      	lsls	r3, r3, #1
 800e4aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800e4ae:	4a47      	ldr	r2, [pc, #284]	; (800e5cc <UART_SetConfig+0x32c>)
 800e4b0:	fba2 2303 	umull	r2, r3, r2, r3
 800e4b4:	095b      	lsrs	r3, r3, #5
 800e4b6:	2264      	movs	r2, #100	; 0x64
 800e4b8:	fb02 f303 	mul.w	r3, r2, r3
 800e4bc:	1aeb      	subs	r3, r5, r3
 800e4be:	00db      	lsls	r3, r3, #3
 800e4c0:	3332      	adds	r3, #50	; 0x32
 800e4c2:	4a42      	ldr	r2, [pc, #264]	; (800e5cc <UART_SetConfig+0x32c>)
 800e4c4:	fba2 2303 	umull	r2, r3, r2, r3
 800e4c8:	095b      	lsrs	r3, r3, #5
 800e4ca:	f003 0207 	and.w	r2, r3, #7
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	4422      	add	r2, r4
 800e4d4:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800e4d6:	e0e7      	b.n	800e6a8 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	4a39      	ldr	r2, [pc, #228]	; (800e5c4 <UART_SetConfig+0x324>)
 800e4de:	4293      	cmp	r3, r2
 800e4e0:	d004      	beq.n	800e4ec <UART_SetConfig+0x24c>
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	4a38      	ldr	r2, [pc, #224]	; (800e5c8 <UART_SetConfig+0x328>)
 800e4e8:	4293      	cmp	r3, r2
 800e4ea:	d171      	bne.n	800e5d0 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800e4ec:	f7fd f8b4 	bl	800b658 <HAL_RCC_GetPCLK2Freq>
 800e4f0:	4602      	mov	r2, r0
 800e4f2:	4613      	mov	r3, r2
 800e4f4:	009b      	lsls	r3, r3, #2
 800e4f6:	4413      	add	r3, r2
 800e4f8:	009a      	lsls	r2, r3, #2
 800e4fa:	441a      	add	r2, r3
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	685b      	ldr	r3, [r3, #4]
 800e500:	009b      	lsls	r3, r3, #2
 800e502:	fbb2 f3f3 	udiv	r3, r2, r3
 800e506:	4a31      	ldr	r2, [pc, #196]	; (800e5cc <UART_SetConfig+0x32c>)
 800e508:	fba2 2303 	umull	r2, r3, r2, r3
 800e50c:	095b      	lsrs	r3, r3, #5
 800e50e:	011c      	lsls	r4, r3, #4
 800e510:	f7fd f8a2 	bl	800b658 <HAL_RCC_GetPCLK2Freq>
 800e514:	4602      	mov	r2, r0
 800e516:	4613      	mov	r3, r2
 800e518:	009b      	lsls	r3, r3, #2
 800e51a:	4413      	add	r3, r2
 800e51c:	009a      	lsls	r2, r3, #2
 800e51e:	441a      	add	r2, r3
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	685b      	ldr	r3, [r3, #4]
 800e524:	009b      	lsls	r3, r3, #2
 800e526:	fbb2 f5f3 	udiv	r5, r2, r3
 800e52a:	f7fd f895 	bl	800b658 <HAL_RCC_GetPCLK2Freq>
 800e52e:	4602      	mov	r2, r0
 800e530:	4613      	mov	r3, r2
 800e532:	009b      	lsls	r3, r3, #2
 800e534:	4413      	add	r3, r2
 800e536:	009a      	lsls	r2, r3, #2
 800e538:	441a      	add	r2, r3
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	685b      	ldr	r3, [r3, #4]
 800e53e:	009b      	lsls	r3, r3, #2
 800e540:	fbb2 f3f3 	udiv	r3, r2, r3
 800e544:	4a21      	ldr	r2, [pc, #132]	; (800e5cc <UART_SetConfig+0x32c>)
 800e546:	fba2 2303 	umull	r2, r3, r2, r3
 800e54a:	095b      	lsrs	r3, r3, #5
 800e54c:	2264      	movs	r2, #100	; 0x64
 800e54e:	fb02 f303 	mul.w	r3, r2, r3
 800e552:	1aeb      	subs	r3, r5, r3
 800e554:	011b      	lsls	r3, r3, #4
 800e556:	3332      	adds	r3, #50	; 0x32
 800e558:	4a1c      	ldr	r2, [pc, #112]	; (800e5cc <UART_SetConfig+0x32c>)
 800e55a:	fba2 2303 	umull	r2, r3, r2, r3
 800e55e:	095b      	lsrs	r3, r3, #5
 800e560:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e564:	441c      	add	r4, r3
 800e566:	f7fd f877 	bl	800b658 <HAL_RCC_GetPCLK2Freq>
 800e56a:	4602      	mov	r2, r0
 800e56c:	4613      	mov	r3, r2
 800e56e:	009b      	lsls	r3, r3, #2
 800e570:	4413      	add	r3, r2
 800e572:	009a      	lsls	r2, r3, #2
 800e574:	441a      	add	r2, r3
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	685b      	ldr	r3, [r3, #4]
 800e57a:	009b      	lsls	r3, r3, #2
 800e57c:	fbb2 f5f3 	udiv	r5, r2, r3
 800e580:	f7fd f86a 	bl	800b658 <HAL_RCC_GetPCLK2Freq>
 800e584:	4602      	mov	r2, r0
 800e586:	4613      	mov	r3, r2
 800e588:	009b      	lsls	r3, r3, #2
 800e58a:	4413      	add	r3, r2
 800e58c:	009a      	lsls	r2, r3, #2
 800e58e:	441a      	add	r2, r3
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	685b      	ldr	r3, [r3, #4]
 800e594:	009b      	lsls	r3, r3, #2
 800e596:	fbb2 f3f3 	udiv	r3, r2, r3
 800e59a:	4a0c      	ldr	r2, [pc, #48]	; (800e5cc <UART_SetConfig+0x32c>)
 800e59c:	fba2 2303 	umull	r2, r3, r2, r3
 800e5a0:	095b      	lsrs	r3, r3, #5
 800e5a2:	2264      	movs	r2, #100	; 0x64
 800e5a4:	fb02 f303 	mul.w	r3, r2, r3
 800e5a8:	1aeb      	subs	r3, r5, r3
 800e5aa:	011b      	lsls	r3, r3, #4
 800e5ac:	3332      	adds	r3, #50	; 0x32
 800e5ae:	4a07      	ldr	r2, [pc, #28]	; (800e5cc <UART_SetConfig+0x32c>)
 800e5b0:	fba2 2303 	umull	r2, r3, r2, r3
 800e5b4:	095b      	lsrs	r3, r3, #5
 800e5b6:	f003 020f 	and.w	r2, r3, #15
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	4422      	add	r2, r4
 800e5c0:	609a      	str	r2, [r3, #8]
 800e5c2:	e071      	b.n	800e6a8 <UART_SetConfig+0x408>
 800e5c4:	40011000 	.word	0x40011000
 800e5c8:	40011400 	.word	0x40011400
 800e5cc:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800e5d0:	f7fd f82e 	bl	800b630 <HAL_RCC_GetPCLK1Freq>
 800e5d4:	4602      	mov	r2, r0
 800e5d6:	4613      	mov	r3, r2
 800e5d8:	009b      	lsls	r3, r3, #2
 800e5da:	4413      	add	r3, r2
 800e5dc:	009a      	lsls	r2, r3, #2
 800e5de:	441a      	add	r2, r3
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	685b      	ldr	r3, [r3, #4]
 800e5e4:	009b      	lsls	r3, r3, #2
 800e5e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e5ea:	4a31      	ldr	r2, [pc, #196]	; (800e6b0 <UART_SetConfig+0x410>)
 800e5ec:	fba2 2303 	umull	r2, r3, r2, r3
 800e5f0:	095b      	lsrs	r3, r3, #5
 800e5f2:	011c      	lsls	r4, r3, #4
 800e5f4:	f7fd f81c 	bl	800b630 <HAL_RCC_GetPCLK1Freq>
 800e5f8:	4602      	mov	r2, r0
 800e5fa:	4613      	mov	r3, r2
 800e5fc:	009b      	lsls	r3, r3, #2
 800e5fe:	4413      	add	r3, r2
 800e600:	009a      	lsls	r2, r3, #2
 800e602:	441a      	add	r2, r3
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	685b      	ldr	r3, [r3, #4]
 800e608:	009b      	lsls	r3, r3, #2
 800e60a:	fbb2 f5f3 	udiv	r5, r2, r3
 800e60e:	f7fd f80f 	bl	800b630 <HAL_RCC_GetPCLK1Freq>
 800e612:	4602      	mov	r2, r0
 800e614:	4613      	mov	r3, r2
 800e616:	009b      	lsls	r3, r3, #2
 800e618:	4413      	add	r3, r2
 800e61a:	009a      	lsls	r2, r3, #2
 800e61c:	441a      	add	r2, r3
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	685b      	ldr	r3, [r3, #4]
 800e622:	009b      	lsls	r3, r3, #2
 800e624:	fbb2 f3f3 	udiv	r3, r2, r3
 800e628:	4a21      	ldr	r2, [pc, #132]	; (800e6b0 <UART_SetConfig+0x410>)
 800e62a:	fba2 2303 	umull	r2, r3, r2, r3
 800e62e:	095b      	lsrs	r3, r3, #5
 800e630:	2264      	movs	r2, #100	; 0x64
 800e632:	fb02 f303 	mul.w	r3, r2, r3
 800e636:	1aeb      	subs	r3, r5, r3
 800e638:	011b      	lsls	r3, r3, #4
 800e63a:	3332      	adds	r3, #50	; 0x32
 800e63c:	4a1c      	ldr	r2, [pc, #112]	; (800e6b0 <UART_SetConfig+0x410>)
 800e63e:	fba2 2303 	umull	r2, r3, r2, r3
 800e642:	095b      	lsrs	r3, r3, #5
 800e644:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e648:	441c      	add	r4, r3
 800e64a:	f7fc fff1 	bl	800b630 <HAL_RCC_GetPCLK1Freq>
 800e64e:	4602      	mov	r2, r0
 800e650:	4613      	mov	r3, r2
 800e652:	009b      	lsls	r3, r3, #2
 800e654:	4413      	add	r3, r2
 800e656:	009a      	lsls	r2, r3, #2
 800e658:	441a      	add	r2, r3
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	685b      	ldr	r3, [r3, #4]
 800e65e:	009b      	lsls	r3, r3, #2
 800e660:	fbb2 f5f3 	udiv	r5, r2, r3
 800e664:	f7fc ffe4 	bl	800b630 <HAL_RCC_GetPCLK1Freq>
 800e668:	4602      	mov	r2, r0
 800e66a:	4613      	mov	r3, r2
 800e66c:	009b      	lsls	r3, r3, #2
 800e66e:	4413      	add	r3, r2
 800e670:	009a      	lsls	r2, r3, #2
 800e672:	441a      	add	r2, r3
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	685b      	ldr	r3, [r3, #4]
 800e678:	009b      	lsls	r3, r3, #2
 800e67a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e67e:	4a0c      	ldr	r2, [pc, #48]	; (800e6b0 <UART_SetConfig+0x410>)
 800e680:	fba2 2303 	umull	r2, r3, r2, r3
 800e684:	095b      	lsrs	r3, r3, #5
 800e686:	2264      	movs	r2, #100	; 0x64
 800e688:	fb02 f303 	mul.w	r3, r2, r3
 800e68c:	1aeb      	subs	r3, r5, r3
 800e68e:	011b      	lsls	r3, r3, #4
 800e690:	3332      	adds	r3, #50	; 0x32
 800e692:	4a07      	ldr	r2, [pc, #28]	; (800e6b0 <UART_SetConfig+0x410>)
 800e694:	fba2 2303 	umull	r2, r3, r2, r3
 800e698:	095b      	lsrs	r3, r3, #5
 800e69a:	f003 020f 	and.w	r2, r3, #15
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	4422      	add	r2, r4
 800e6a4:	609a      	str	r2, [r3, #8]
}
 800e6a6:	e7ff      	b.n	800e6a8 <UART_SetConfig+0x408>
 800e6a8:	bf00      	nop
 800e6aa:	3710      	adds	r7, #16
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	bdb0      	pop	{r4, r5, r7, pc}
 800e6b0:	51eb851f 	.word	0x51eb851f

0800e6b4 <ACR_Init>:
ACR_TypeDef mainACR;



void ACR_Init()
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	af00      	add	r7, sp, #0

	memset(&mainACR, 0x00, sizeof(mainACR));
 800e6b8:	2274      	movs	r2, #116	; 0x74
 800e6ba:	2100      	movs	r1, #0
 800e6bc:	4812      	ldr	r0, [pc, #72]	; (800e708 <ACR_Init+0x54>)
 800e6be:	f003 fe94 	bl	80123ea <memset>

	mainACR.Init.Kp = 0.1f;
 800e6c2:	4b11      	ldr	r3, [pc, #68]	; (800e708 <ACR_Init+0x54>)
 800e6c4:	4a11      	ldr	r2, [pc, #68]	; (800e70c <ACR_Init+0x58>)
 800e6c6:	601a      	str	r2, [r3, #0]
	mainACR.Init.Ki = 100.0f;
 800e6c8:	4b0f      	ldr	r3, [pc, #60]	; (800e708 <ACR_Init+0x54>)
 800e6ca:	4a11      	ldr	r2, [pc, #68]	; (800e710 <ACR_Init+0x5c>)
 800e6cc:	605a      	str	r2, [r3, #4]

	mainACR.Init.Id_limit = 15.0f;
 800e6ce:	4b0e      	ldr	r3, [pc, #56]	; (800e708 <ACR_Init+0x54>)
 800e6d0:	4a10      	ldr	r2, [pc, #64]	; (800e714 <ACR_Init+0x60>)
 800e6d2:	60da      	str	r2, [r3, #12]
	mainACR.Init.Iq_limit = 15.0f;
 800e6d4:	4b0c      	ldr	r3, [pc, #48]	; (800e708 <ACR_Init+0x54>)
 800e6d6:	4a0f      	ldr	r2, [pc, #60]	; (800e714 <ACR_Init+0x60>)
 800e6d8:	611a      	str	r2, [r3, #16]

	mainACR.Init.Id_error_integ_limit = 1.0f;
 800e6da:	4b0b      	ldr	r3, [pc, #44]	; (800e708 <ACR_Init+0x54>)
 800e6dc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800e6e0:	615a      	str	r2, [r3, #20]
	mainACR.Init.Iq_error_integ_limit = 1.0f;
 800e6e2:	4b09      	ldr	r3, [pc, #36]	; (800e708 <ACR_Init+0x54>)
 800e6e4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800e6e8:	619a      	str	r2, [r3, #24]

	mainACR.Init.cycleTime = 100E-6;
 800e6ea:	4b07      	ldr	r3, [pc, #28]	; (800e708 <ACR_Init+0x54>)
 800e6ec:	4a0a      	ldr	r2, [pc, #40]	; (800e718 <ACR_Init+0x64>)
 800e6ee:	609a      	str	r2, [r3, #8]

	mainACR.Init.hEncoder = &mainEncoder;
 800e6f0:	4b05      	ldr	r3, [pc, #20]	; (800e708 <ACR_Init+0x54>)
 800e6f2:	4a0a      	ldr	r2, [pc, #40]	; (800e71c <ACR_Init+0x68>)
 800e6f4:	61da      	str	r2, [r3, #28]

	mainACR.Init.hCS = &mainCS;
 800e6f6:	4b04      	ldr	r3, [pc, #16]	; (800e708 <ACR_Init+0x54>)
 800e6f8:	4a09      	ldr	r2, [pc, #36]	; (800e720 <ACR_Init+0x6c>)
 800e6fa:	621a      	str	r2, [r3, #32]
	mainACR.Init.htim = &htim8;
 800e6fc:	4b02      	ldr	r3, [pc, #8]	; (800e708 <ACR_Init+0x54>)
 800e6fe:	4a09      	ldr	r2, [pc, #36]	; (800e724 <ACR_Init+0x70>)
 800e700:	625a      	str	r2, [r3, #36]	; 0x24

}
 800e702:	bf00      	nop
 800e704:	bd80      	pop	{r7, pc}
 800e706:	bf00      	nop
 800e708:	200042f4 	.word	0x200042f4
 800e70c:	3dcccccd 	.word	0x3dcccccd
 800e710:	42c80000 	.word	0x42c80000
 800e714:	41700000 	.word	0x41700000
 800e718:	38d1b717 	.word	0x38d1b717
 800e71c:	20004728 	.word	0x20004728
 800e720:	20004400 	.word	0x20004400
 800e724:	20004824 	.word	0x20004824

0800e728 <ACR_Start>:



void ACR_Start(ACR_TypeDef *hACR)
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b082      	sub	sp, #8
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]

	hACR->enable = 1;
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	2201      	movs	r2, #1
 800e734:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	ACR_Reset(hACR);
 800e738:	6878      	ldr	r0, [r7, #4]
 800e73a:	f000 fa8d 	bl	800ec58 <ACR_Reset>

}
 800e73e:	bf00      	nop
 800e740:	3708      	adds	r7, #8
 800e742:	46bd      	mov	sp, r7
 800e744:	bd80      	pop	{r7, pc}
	...

0800e748 <ACR_Refresh>:
}



inline void ACR_Refresh(ACR_TypeDef *hACR)
{
 800e748:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e74c:	b082      	sub	sp, #8
 800e74e:	af00      	add	r7, sp, #0
 800e750:	6078      	str	r0, [r7, #4]
	static float _Id_ref;
	static float _Iq_ref;

	static ACR_InitTypeDef *hACR_Init;

	hACR_Init = &hACR->Init;
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	4ab4      	ldr	r2, [pc, #720]	; (800ea28 <ACR_Refresh+0x2e0>)
 800e756:	6013      	str	r3, [r2, #0]

	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_SET);
 800e758:	2201      	movs	r2, #1
 800e75a:	2140      	movs	r1, #64	; 0x40
 800e75c:	48b3      	ldr	r0, [pc, #716]	; (800ea2c <ACR_Refresh+0x2e4>)
 800e75e:	f7fc fe5f 	bl	800b420 <HAL_GPIO_WritePin>


	CurrentSensor_getIdq(&mainCS, &hACR->Id, &hACR->Iq, hACR_Init->hEncoder->cos_theta_re, hACR_Init->hEncoder->sin_theta_re);
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800e76e:	4bae      	ldr	r3, [pc, #696]	; (800ea28 <ACR_Refresh+0x2e0>)
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	69db      	ldr	r3, [r3, #28]
 800e774:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800e778:	4bab      	ldr	r3, [pc, #684]	; (800ea28 <ACR_Refresh+0x2e0>)
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	69db      	ldr	r3, [r3, #28]
 800e77e:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800e782:	eef0 0a47 	vmov.f32	s1, s14
 800e786:	eeb0 0a67 	vmov.f32	s0, s15
 800e78a:	48a9      	ldr	r0, [pc, #676]	; (800ea30 <ACR_Refresh+0x2e8>)
 800e78c:	f000 fef8 	bl	800f580 <CurrentSensor_getIdq>


	/*
	 * 強制転流
	 */
	if(hACR->forced_commute_enable)
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800e796:	2b00      	cmp	r3, #0
 800e798:	d03d      	beq.n	800e816 <ACR_Refresh+0xce>
	{

		hACR->forced_cos_theta_re = sin_table2[(int)((hACR->forced_theta_re * 0.3183f + 0.5f) * 5000.0f)];
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800e7a0:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 800ea34 <ACR_Refresh+0x2ec>
 800e7a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e7a8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800e7ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e7b0:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 800ea38 <ACR_Refresh+0x2f0>
 800e7b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e7b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e7bc:	ee17 3a90 	vmov	r3, s15
 800e7c0:	4a9e      	ldr	r2, [pc, #632]	; (800ea3c <ACR_Refresh+0x2f4>)
 800e7c2:	009b      	lsls	r3, r3, #2
 800e7c4:	4413      	add	r3, r2
 800e7c6:	681a      	ldr	r2, [r3, #0]
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	66da      	str	r2, [r3, #108]	; 0x6c
		hACR->forced_sin_theta_re = sin_table2[(int)(hACR->forced_theta_re * 1591.54943f)];
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	edd3 7a1a 	vldr	s15, [r3, #104]	; 0x68
 800e7d2:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 800ea40 <ACR_Refresh+0x2f8>
 800e7d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e7da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e7de:	ee17 3a90 	vmov	r3, s15
 800e7e2:	4a96      	ldr	r2, [pc, #600]	; (800ea3c <ACR_Refresh+0x2f4>)
 800e7e4:	009b      	lsls	r3, r3, #2
 800e7e6:	4413      	add	r3, r2
 800e7e8:	681a      	ldr	r2, [r3, #0]
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	671a      	str	r2, [r3, #112]	; 0x70

		CurrentSensor_getIdq(&mainCS, &hACR->Id, &hACR->Iq, hACR->forced_cos_theta_re, hACR->forced_sin_theta_re);
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	edd3 7a1b 	vldr	s15, [r3, #108]	; 0x6c
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 800e806:	eef0 0a47 	vmov.f32	s1, s14
 800e80a:	eeb0 0a67 	vmov.f32	s0, s15
 800e80e:	4888      	ldr	r0, [pc, #544]	; (800ea30 <ACR_Refresh+0x2e8>)
 800e810:	f000 feb6 	bl	800f580 <CurrentSensor_getIdq>
 800e814:	e016      	b.n	800e844 <ACR_Refresh+0xfc>

	}
	else
	{

		CurrentSensor_getIdq(&mainCS, &hACR->Id, &hACR->Iq, hACR_Init->hEncoder->cos_theta_re, hACR_Init->hEncoder->sin_theta_re);
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800e822:	4b81      	ldr	r3, [pc, #516]	; (800ea28 <ACR_Refresh+0x2e0>)
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	69db      	ldr	r3, [r3, #28]
 800e828:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800e82c:	4b7e      	ldr	r3, [pc, #504]	; (800ea28 <ACR_Refresh+0x2e0>)
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	69db      	ldr	r3, [r3, #28]
 800e832:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800e836:	eef0 0a47 	vmov.f32	s1, s14
 800e83a:	eeb0 0a67 	vmov.f32	s0, s15
 800e83e:	487c      	ldr	r0, [pc, #496]	; (800ea30 <ACR_Refresh+0x2e8>)
 800e840:	f000 fe9e 	bl	800f580 <CurrentSensor_getIdq>

	}



	if(hACR_Init->hEncoder->theta_re < M_PI)
 800e844:	4b78      	ldr	r3, [pc, #480]	; (800ea28 <ACR_Refresh+0x2e0>)
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	69db      	ldr	r3, [r3, #28]
 800e84a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e84c:	4618      	mov	r0, r3
 800e84e:	f7f9 fdb3 	bl	80083b8 <__aeabi_f2d>
 800e852:	a373      	add	r3, pc, #460	; (adr r3, 800ea20 <ACR_Refresh+0x2d8>)
 800e854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e858:	f7fa f878 	bl	800894c <__aeabi_dcmplt>
 800e85c:	4603      	mov	r3, r0
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d005      	beq.n	800e86e <ACR_Refresh+0x126>
		HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_RESET);
 800e862:	2200      	movs	r2, #0
 800e864:	2140      	movs	r1, #64	; 0x40
 800e866:	4877      	ldr	r0, [pc, #476]	; (800ea44 <ACR_Refresh+0x2fc>)
 800e868:	f7fc fdda 	bl	800b420 <HAL_GPIO_WritePin>
 800e86c:	e004      	b.n	800e878 <ACR_Refresh+0x130>
	else
		HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_SET);
 800e86e:	2201      	movs	r2, #1
 800e870:	2140      	movs	r1, #64	; 0x40
 800e872:	4874      	ldr	r0, [pc, #464]	; (800ea44 <ACR_Refresh+0x2fc>)
 800e874:	f7fc fdd4 	bl	800b420 <HAL_GPIO_WritePin>



	/********** ACR (Auto Current Regulator) **********/

	if(hACR->enable /*&& soundCount == -1*/)
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e87e:	2b00      	cmp	r3, #0
 800e880:	f000 81c4 	beq.w	800ec0c <ACR_Refresh+0x4c4>
	{

		_Id_ref = hACR->Id_ref;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e888:	4a6f      	ldr	r2, [pc, #444]	; (800ea48 <ACR_Refresh+0x300>)
 800e88a:	6013      	str	r3, [r2, #0]
		//_Iq_ref = hACR->Iq_ref + 0.75f * sin_table2[(int)((fmod(mainEncoder.theta * POLES + 4.14159f, 2.0f * M_PI) * 0.3183f + 0.5f) * 5000.0f)];
		_Iq_ref = hACR->Iq_ref;
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e890:	4a6e      	ldr	r2, [pc, #440]	; (800ea4c <ACR_Refresh+0x304>)
 800e892:	6013      	str	r3, [r2, #0]


		if(_Id_ref < -hACR_Init->Id_limit)			_Id_ref = -hACR_Init->Id_limit;
 800e894:	4b64      	ldr	r3, [pc, #400]	; (800ea28 <ACR_Refresh+0x2e0>)
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	edd3 7a03 	vldr	s15, [r3, #12]
 800e89c:	eeb1 7a67 	vneg.f32	s14, s15
 800e8a0:	4b69      	ldr	r3, [pc, #420]	; (800ea48 <ACR_Refresh+0x300>)
 800e8a2:	edd3 7a00 	vldr	s15, [r3]
 800e8a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e8aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8ae:	dd09      	ble.n	800e8c4 <ACR_Refresh+0x17c>
 800e8b0:	4b5d      	ldr	r3, [pc, #372]	; (800ea28 <ACR_Refresh+0x2e0>)
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	edd3 7a03 	vldr	s15, [r3, #12]
 800e8b8:	eef1 7a67 	vneg.f32	s15, s15
 800e8bc:	4b62      	ldr	r3, [pc, #392]	; (800ea48 <ACR_Refresh+0x300>)
 800e8be:	edc3 7a00 	vstr	s15, [r3]
 800e8c2:	e010      	b.n	800e8e6 <ACR_Refresh+0x19e>
		else if(_Id_ref > hACR_Init->Id_limit)		_Id_ref = hACR_Init->Id_limit;
 800e8c4:	4b58      	ldr	r3, [pc, #352]	; (800ea28 <ACR_Refresh+0x2e0>)
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	ed93 7a03 	vldr	s14, [r3, #12]
 800e8cc:	4b5e      	ldr	r3, [pc, #376]	; (800ea48 <ACR_Refresh+0x300>)
 800e8ce:	edd3 7a00 	vldr	s15, [r3]
 800e8d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e8d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8da:	d504      	bpl.n	800e8e6 <ACR_Refresh+0x19e>
 800e8dc:	4b52      	ldr	r3, [pc, #328]	; (800ea28 <ACR_Refresh+0x2e0>)
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	68db      	ldr	r3, [r3, #12]
 800e8e2:	4a59      	ldr	r2, [pc, #356]	; (800ea48 <ACR_Refresh+0x300>)
 800e8e4:	6013      	str	r3, [r2, #0]

		if(_Iq_ref < -hACR_Init->Iq_limit)			_Iq_ref = -hACR_Init->Iq_limit;
 800e8e6:	4b50      	ldr	r3, [pc, #320]	; (800ea28 <ACR_Refresh+0x2e0>)
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	edd3 7a04 	vldr	s15, [r3, #16]
 800e8ee:	eeb1 7a67 	vneg.f32	s14, s15
 800e8f2:	4b56      	ldr	r3, [pc, #344]	; (800ea4c <ACR_Refresh+0x304>)
 800e8f4:	edd3 7a00 	vldr	s15, [r3]
 800e8f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e8fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e900:	dd09      	ble.n	800e916 <ACR_Refresh+0x1ce>
 800e902:	4b49      	ldr	r3, [pc, #292]	; (800ea28 <ACR_Refresh+0x2e0>)
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	edd3 7a04 	vldr	s15, [r3, #16]
 800e90a:	eef1 7a67 	vneg.f32	s15, s15
 800e90e:	4b4f      	ldr	r3, [pc, #316]	; (800ea4c <ACR_Refresh+0x304>)
 800e910:	edc3 7a00 	vstr	s15, [r3]
 800e914:	e010      	b.n	800e938 <ACR_Refresh+0x1f0>
		else if(_Iq_ref > hACR_Init->Iq_limit)		_Iq_ref = hACR_Init->Iq_limit;
 800e916:	4b44      	ldr	r3, [pc, #272]	; (800ea28 <ACR_Refresh+0x2e0>)
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	ed93 7a04 	vldr	s14, [r3, #16]
 800e91e:	4b4b      	ldr	r3, [pc, #300]	; (800ea4c <ACR_Refresh+0x304>)
 800e920:	edd3 7a00 	vldr	s15, [r3]
 800e924:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e92c:	d504      	bpl.n	800e938 <ACR_Refresh+0x1f0>
 800e92e:	4b3e      	ldr	r3, [pc, #248]	; (800ea28 <ACR_Refresh+0x2e0>)
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	691b      	ldr	r3, [r3, #16]
 800e934:	4a45      	ldr	r2, [pc, #276]	; (800ea4c <ACR_Refresh+0x304>)
 800e936:	6013      	str	r3, [r2, #0]

		hACR->Id_limitError = hACR->Id_ref - _Id_ref;
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800e93e:	4b42      	ldr	r3, [pc, #264]	; (800ea48 <ACR_Refresh+0x300>)
 800e940:	edd3 7a00 	vldr	s15, [r3]
 800e944:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
		hACR->Iq_limitError = hACR->Iq_ref - _Iq_ref;
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800e954:	4b3d      	ldr	r3, [pc, #244]	; (800ea4c <ACR_Refresh+0x304>)
 800e956:	edd3 7a00 	vldr	s15, [r3]
 800e95a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30


		hACR->Id_error = _Id_ref - hACR->Id;
 800e964:	4b38      	ldr	r3, [pc, #224]	; (800ea48 <ACR_Refresh+0x300>)
 800e966:	ed93 7a00 	vldr	s14, [r3]
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800e970:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
		hACR->Iq_error = _Iq_ref - hACR->Iq;
 800e97a:	4b34      	ldr	r3, [pc, #208]	; (800ea4c <ACR_Refresh+0x304>)
 800e97c:	ed93 7a00 	vldr	s14, [r3]
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800e986:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48


		hACR->Id_error_integ += hACR_Init->cycleTime * 0.5f * (hACR->Id_error + hACR->p_Id_error);
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800e996:	4b24      	ldr	r3, [pc, #144]	; (800ea28 <ACR_Refresh+0x2e0>)
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	edd3 7a02 	vldr	s15, [r3, #8]
 800e99e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e9a2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	ed93 6a11 	vldr	s12, [r3, #68]	; 0x44
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 800e9b2:	ee76 7a27 	vadd.f32	s15, s12, s15
 800e9b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e9ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
		hACR->Iq_error_integ += hACR_Init->cycleTime * 0.5f * (hACR->Iq_error + hACR->p_Iq_error);
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 800e9ca:	4b17      	ldr	r3, [pc, #92]	; (800ea28 <ACR_Refresh+0x2e0>)
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	edd3 7a02 	vldr	s15, [r3, #8]
 800e9d2:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e9d6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	ed93 6a12 	vldr	s12, [r3, #72]	; 0x48
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800e9e6:	ee76 7a27 	vadd.f32	s15, s12, s15
 800e9ea:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e9ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58


		if(hACR->Id_error_integ > hACR_Init->Id_error_integ_limit)
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 800e9fe:	4b0a      	ldr	r3, [pc, #40]	; (800ea28 <ACR_Refresh+0x2e0>)
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	edd3 7a05 	vldr	s15, [r3, #20]
 800ea06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ea0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea0e:	dd1f      	ble.n	800ea50 <ACR_Refresh+0x308>
		{
			hACR->Id_error_integ = hACR_Init->Id_error_integ_limit;
 800ea10:	4b05      	ldr	r3, [pc, #20]	; (800ea28 <ACR_Refresh+0x2e0>)
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	695a      	ldr	r2, [r3, #20]
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	655a      	str	r2, [r3, #84]	; 0x54
 800ea1a:	e048      	b.n	800eaae <ACR_Refresh+0x366>
 800ea1c:	f3af 8000 	nop.w
 800ea20:	54442d18 	.word	0x54442d18
 800ea24:	400921fb 	.word	0x400921fb
 800ea28:	20000214 	.word	0x20000214
 800ea2c:	40020400 	.word	0x40020400
 800ea30:	20004400 	.word	0x20004400
 800ea34:	3ea2f838 	.word	0x3ea2f838
 800ea38:	459c4000 	.word	0x459c4000
 800ea3c:	08014f30 	.word	0x08014f30
 800ea40:	44c6f195 	.word	0x44c6f195
 800ea44:	40020000 	.word	0x40020000
 800ea48:	20000218 	.word	0x20000218
 800ea4c:	2000021c 	.word	0x2000021c
		}
		else if(hACR->Id_error_integ < -1.0 * hACR_Init->Id_error_integ_limit)
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ea54:	4618      	mov	r0, r3
 800ea56:	f7f9 fcaf 	bl	80083b8 <__aeabi_f2d>
 800ea5a:	4682      	mov	sl, r0
 800ea5c:	468b      	mov	fp, r1
 800ea5e:	4b78      	ldr	r3, [pc, #480]	; (800ec40 <ACR_Refresh+0x4f8>)
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	695b      	ldr	r3, [r3, #20]
 800ea64:	4618      	mov	r0, r3
 800ea66:	f7f9 fca7 	bl	80083b8 <__aeabi_f2d>
 800ea6a:	4602      	mov	r2, r0
 800ea6c:	460b      	mov	r3, r1
 800ea6e:	4690      	mov	r8, r2
 800ea70:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 800ea74:	4642      	mov	r2, r8
 800ea76:	464b      	mov	r3, r9
 800ea78:	4650      	mov	r0, sl
 800ea7a:	4659      	mov	r1, fp
 800ea7c:	f7f9 ff66 	bl	800894c <__aeabi_dcmplt>
 800ea80:	4603      	mov	r3, r0
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d013      	beq.n	800eaae <ACR_Refresh+0x366>
		{
			hACR->Id_error_integ = -1.0 * hACR_Init->Id_error_integ_limit;
 800ea86:	4b6e      	ldr	r3, [pc, #440]	; (800ec40 <ACR_Refresh+0x4f8>)
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	695b      	ldr	r3, [r3, #20]
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	f7f9 fc93 	bl	80083b8 <__aeabi_f2d>
 800ea92:	4602      	mov	r2, r0
 800ea94:	460b      	mov	r3, r1
 800ea96:	4610      	mov	r0, r2
 800ea98:	4619      	mov	r1, r3
 800ea9a:	f7f9 ffbd 	bl	8008a18 <__aeabi_d2f>
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	ee07 3a90 	vmov	s15, r3
 800eaa4:	eef1 7a67 	vneg.f32	s15, s15
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
		}

		if(hACR->Iq_error_integ > hACR_Init->Iq_error_integ_limit)
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 800eab4:	4b62      	ldr	r3, [pc, #392]	; (800ec40 <ACR_Refresh+0x4f8>)
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	edd3 7a06 	vldr	s15, [r3, #24]
 800eabc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800eac0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eac4:	dd05      	ble.n	800ead2 <ACR_Refresh+0x38a>
		{
			hACR->Iq_error_integ = hACR_Init->Iq_error_integ_limit;
 800eac6:	4b5e      	ldr	r3, [pc, #376]	; (800ec40 <ACR_Refresh+0x4f8>)
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	699a      	ldr	r2, [r3, #24]
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	659a      	str	r2, [r3, #88]	; 0x58
 800ead0:	e02e      	b.n	800eb30 <ACR_Refresh+0x3e8>
		}
		else if(hACR->Iq_error_integ < -1.0 * hACR_Init->Iq_error_integ_limit)
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ead6:	4618      	mov	r0, r3
 800ead8:	f7f9 fc6e 	bl	80083b8 <__aeabi_f2d>
 800eadc:	4680      	mov	r8, r0
 800eade:	4689      	mov	r9, r1
 800eae0:	4b57      	ldr	r3, [pc, #348]	; (800ec40 <ACR_Refresh+0x4f8>)
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	699b      	ldr	r3, [r3, #24]
 800eae6:	4618      	mov	r0, r3
 800eae8:	f7f9 fc66 	bl	80083b8 <__aeabi_f2d>
 800eaec:	4602      	mov	r2, r0
 800eaee:	460b      	mov	r3, r1
 800eaf0:	4614      	mov	r4, r2
 800eaf2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800eaf6:	4622      	mov	r2, r4
 800eaf8:	462b      	mov	r3, r5
 800eafa:	4640      	mov	r0, r8
 800eafc:	4649      	mov	r1, r9
 800eafe:	f7f9 ff25 	bl	800894c <__aeabi_dcmplt>
 800eb02:	4603      	mov	r3, r0
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d013      	beq.n	800eb30 <ACR_Refresh+0x3e8>
		{
			hACR->Iq_error_integ = -1.0 * hACR_Init->Iq_error_integ_limit;
 800eb08:	4b4d      	ldr	r3, [pc, #308]	; (800ec40 <ACR_Refresh+0x4f8>)
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	699b      	ldr	r3, [r3, #24]
 800eb0e:	4618      	mov	r0, r3
 800eb10:	f7f9 fc52 	bl	80083b8 <__aeabi_f2d>
 800eb14:	4603      	mov	r3, r0
 800eb16:	460c      	mov	r4, r1
 800eb18:	4618      	mov	r0, r3
 800eb1a:	4621      	mov	r1, r4
 800eb1c:	f7f9 ff7c 	bl	8008a18 <__aeabi_d2f>
 800eb20:	4603      	mov	r3, r0
 800eb22:	ee07 3a90 	vmov	s15, r3
 800eb26:	eef1 7a67 	vneg.f32	s15, s15
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
		}


		hACR->p_Id_error = hACR->Id_error;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	64da      	str	r2, [r3, #76]	; 0x4c
		hACR->p_Iq_error = hACR->Iq_error;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	651a      	str	r2, [r3, #80]	; 0x50

		// hACR->Vd_ref = - hACR_Init->Kp * hACR->Id + hACR_Init->Ki * hACR->Id_error_integ;
		// hACR->Vq_ref = - hACR_Init->Kp * hACR->Iq + hACR_Init->Ki * hACR->Iq_error_integ;

		hACR->Vd_ref = hACR_Init->Kp * hACR->Id_error + hACR_Init->Ki * hACR->Id_error_integ;
 800eb40:	4b3f      	ldr	r3, [pc, #252]	; (800ec40 <ACR_Refresh+0x4f8>)
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	ed93 7a00 	vldr	s14, [r3]
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800eb4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800eb52:	4b3b      	ldr	r3, [pc, #236]	; (800ec40 <ACR_Refresh+0x4f8>)
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	edd3 6a01 	vldr	s13, [r3, #4]
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 800eb60:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800eb64:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
		hACR->Vq_ref = hACR_Init->Kp * hACR->Iq_error + hACR_Init->Ki * hACR->Iq_error_integ;
 800eb6e:	4b34      	ldr	r3, [pc, #208]	; (800ec40 <ACR_Refresh+0x4f8>)
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	ed93 7a00 	vldr	s14, [r3]
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800eb7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800eb80:	4b2f      	ldr	r3, [pc, #188]	; (800ec40 <ACR_Refresh+0x4f8>)
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	edd3 6a01 	vldr	s13, [r3, #4]
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800eb8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800eb92:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60


		if(hACR->forced_commute_enable)
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d017      	beq.n	800ebd6 <ACR_Refresh+0x48e>
		{
			setSVM_dq(&htim8, hACR->Vd_ref, hACR->Vq_ref, hACR->forced_cos_theta_re, hACR->forced_sin_theta_re);
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	ed93 6a1c 	vldr	s12, [r3, #112]	; 0x70
 800ebbe:	eef0 1a46 	vmov.f32	s3, s12
 800ebc2:	eeb0 1a66 	vmov.f32	s2, s13
 800ebc6:	eef0 0a47 	vmov.f32	s1, s14
 800ebca:	eeb0 0a67 	vmov.f32	s0, s15
 800ebce:	481d      	ldr	r0, [pc, #116]	; (800ec44 <ACR_Refresh+0x4fc>)
 800ebd0:	f002 fb6e 	bl	80112b0 <setSVM_dq>
 800ebd4:	e01a      	b.n	800ec0c <ACR_Refresh+0x4c4>
		}
		else
		{
			setSVM_dq(&htim8, hACR->Vd_ref, hACR->Vq_ref, hACR_Init->hEncoder->cos_theta_re, hACR_Init->hEncoder->sin_theta_re);
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 800ebe2:	4b17      	ldr	r3, [pc, #92]	; (800ec40 <ACR_Refresh+0x4f8>)
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	69db      	ldr	r3, [r3, #28]
 800ebe8:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 800ebec:	4b14      	ldr	r3, [pc, #80]	; (800ec40 <ACR_Refresh+0x4f8>)
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	69db      	ldr	r3, [r3, #28]
 800ebf2:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 800ebf6:	eef0 1a46 	vmov.f32	s3, s12
 800ebfa:	eeb0 1a66 	vmov.f32	s2, s13
 800ebfe:	eef0 0a47 	vmov.f32	s1, s14
 800ec02:	eeb0 0a67 	vmov.f32	s0, s15
 800ec06:	480f      	ldr	r0, [pc, #60]	; (800ec44 <ACR_Refresh+0x4fc>)
 800ec08:	f002 fb52 	bl	80112b0 <setSVM_dq>
	*/




	if(HAL_GPIO_ReadPin(BR_FLT_GPIO_Port, BR_FLT_Pin) == GPIO_PIN_RESET)
 800ec0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ec10:	480d      	ldr	r0, [pc, #52]	; (800ec48 <ACR_Refresh+0x500>)
 800ec12:	f7fc fbed 	bl	800b3f0 <HAL_GPIO_ReadPin>
#endif




	msec += 0.1f;
 800ec16:	4b0d      	ldr	r3, [pc, #52]	; (800ec4c <ACR_Refresh+0x504>)
 800ec18:	edd3 7a00 	vldr	s15, [r3]
 800ec1c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800ec50 <ACR_Refresh+0x508>
 800ec20:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ec24:	4b09      	ldr	r3, [pc, #36]	; (800ec4c <ACR_Refresh+0x504>)
 800ec26:	edc3 7a00 	vstr	s15, [r3]


	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 800ec2a:	2200      	movs	r2, #0
 800ec2c:	2140      	movs	r1, #64	; 0x40
 800ec2e:	4809      	ldr	r0, [pc, #36]	; (800ec54 <ACR_Refresh+0x50c>)
 800ec30:	f7fc fbf6 	bl	800b420 <HAL_GPIO_WritePin>

	return;
 800ec34:	bf00      	nop
}
 800ec36:	3708      	adds	r7, #8
 800ec38:	46bd      	mov	sp, r7
 800ec3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ec3e:	bf00      	nop
 800ec40:	20000214 	.word	0x20000214
 800ec44:	20004824 	.word	0x20004824
 800ec48:	40020000 	.word	0x40020000
 800ec4c:	20000210 	.word	0x20000210
 800ec50:	3dcccccd 	.word	0x3dcccccd
 800ec54:	40020400 	.word	0x40020400

0800ec58 <ACR_Reset>:



inline void ACR_Reset(ACR_TypeDef *hACR)
{
 800ec58:	b480      	push	{r7}
 800ec5a:	b083      	sub	sp, #12
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	6078      	str	r0, [r7, #4]

	hACR->Id_error_integ = 0.0f;
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	f04f 0200 	mov.w	r2, #0
 800ec66:	655a      	str	r2, [r3, #84]	; 0x54
	hACR->Iq_error_integ = 0.0f;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	f04f 0200 	mov.w	r2, #0
 800ec6e:	659a      	str	r2, [r3, #88]	; 0x58

	hACR->Id = hACR->Id_ref = 0.0f;
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	f04f 0200 	mov.w	r2, #0
 800ec76:	635a      	str	r2, [r3, #52]	; 0x34
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	63da      	str	r2, [r3, #60]	; 0x3c
	hACR->Iq = hACR->Iq_ref = 0.0f;
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	f04f 0200 	mov.w	r2, #0
 800ec86:	639a      	str	r2, [r3, #56]	; 0x38
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	641a      	str	r2, [r3, #64]	; 0x40

	hACR->Vd_ref = 0.0f;
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	f04f 0200 	mov.w	r2, #0
 800ec96:	65da      	str	r2, [r3, #92]	; 0x5c
	hACR->Vq_ref = 0.0f;
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	f04f 0200 	mov.w	r2, #0
 800ec9e:	661a      	str	r2, [r3, #96]	; 0x60

}
 800eca0:	bf00      	nop
 800eca2:	370c      	adds	r7, #12
 800eca4:	46bd      	mov	sp, r7
 800eca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecaa:	4770      	bx	lr

0800ecac <APR_Init>:

APR_TypeDef mainAPR;


void APR_Init()
{
 800ecac:	b580      	push	{r7, lr}
 800ecae:	af00      	add	r7, sp, #0
	memset(&mainAPR, 0x00, sizeof(mainAPR));
 800ecb0:	2254      	movs	r2, #84	; 0x54
 800ecb2:	2100      	movs	r1, #0
 800ecb4:	4814      	ldr	r0, [pc, #80]	; (800ed08 <APR_Init+0x5c>)
 800ecb6:	f003 fb98 	bl	80123ea <memset>

	mainAPR.Init.Kp = 0.1f;
 800ecba:	4b13      	ldr	r3, [pc, #76]	; (800ed08 <APR_Init+0x5c>)
 800ecbc:	4a13      	ldr	r2, [pc, #76]	; (800ed0c <APR_Init+0x60>)
 800ecbe:	601a      	str	r2, [r3, #0]
	mainAPR.Init.Ki = 0.0f;
 800ecc0:	4b11      	ldr	r3, [pc, #68]	; (800ed08 <APR_Init+0x5c>)
 800ecc2:	f04f 0200 	mov.w	r2, #0
 800ecc6:	605a      	str	r2, [r3, #4]
	mainAPR.Init.Kd = 0.0f;
 800ecc8:	4b0f      	ldr	r3, [pc, #60]	; (800ed08 <APR_Init+0x5c>)
 800ecca:	f04f 0200 	mov.w	r2, #0
 800ecce:	609a      	str	r2, [r3, #8]

	mainAPR.Init.theta_error_integ_limit = 10000.0f;
 800ecd0:	4b0d      	ldr	r3, [pc, #52]	; (800ed08 <APR_Init+0x5c>)
 800ecd2:	4a0f      	ldr	r2, [pc, #60]	; (800ed10 <APR_Init+0x64>)
 800ecd4:	611a      	str	r2, [r3, #16]
	mainAPR.Init.cycleTime = 1E-3;
 800ecd6:	4b0c      	ldr	r3, [pc, #48]	; (800ed08 <APR_Init+0x5c>)
 800ecd8:	4a0e      	ldr	r2, [pc, #56]	; (800ed14 <APR_Init+0x68>)
 800ecda:	60da      	str	r2, [r3, #12]
	mainAPR.Init.prescaler = 10;
 800ecdc:	4b0a      	ldr	r3, [pc, #40]	; (800ed08 <APR_Init+0x5c>)
 800ecde:	220a      	movs	r2, #10
 800ece0:	625a      	str	r2, [r3, #36]	; 0x24

	mainAPR.Init.hEncoder = &mainEncoder;
 800ece2:	4b09      	ldr	r3, [pc, #36]	; (800ed08 <APR_Init+0x5c>)
 800ece4:	4a0c      	ldr	r2, [pc, #48]	; (800ed18 <APR_Init+0x6c>)
 800ece6:	615a      	str	r2, [r3, #20]
	mainAPR.Init.hASR = &mainASR;
 800ece8:	4b07      	ldr	r3, [pc, #28]	; (800ed08 <APR_Init+0x5c>)
 800ecea:	4a0c      	ldr	r2, [pc, #48]	; (800ed1c <APR_Init+0x70>)
 800ecec:	619a      	str	r2, [r3, #24]
	mainAPR.Init.hACR = &mainACR;
 800ecee:	4b06      	ldr	r3, [pc, #24]	; (800ed08 <APR_Init+0x5c>)
 800ecf0:	4a0b      	ldr	r2, [pc, #44]	; (800ed20 <APR_Init+0x74>)
 800ecf2:	61da      	str	r2, [r3, #28]
	mainAPR.Init.htim = &htim8;
 800ecf4:	4b04      	ldr	r3, [pc, #16]	; (800ed08 <APR_Init+0x5c>)
 800ecf6:	4a0b      	ldr	r2, [pc, #44]	; (800ed24 <APR_Init+0x78>)
 800ecf8:	621a      	str	r2, [r3, #32]

	mainAPR.MV_type = 0;
 800ecfa:	4b03      	ldr	r3, [pc, #12]	; (800ed08 <APR_Init+0x5c>)
 800ecfc:	2200      	movs	r2, #0
 800ecfe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29


}
 800ed02:	bf00      	nop
 800ed04:	bd80      	pop	{r7, pc}
 800ed06:	bf00      	nop
 800ed08:	20004368 	.word	0x20004368
 800ed0c:	3dcccccd 	.word	0x3dcccccd
 800ed10:	461c4000 	.word	0x461c4000
 800ed14:	3a83126f 	.word	0x3a83126f
 800ed18:	20004728 	.word	0x20004728
 800ed1c:	200043bc 	.word	0x200043bc
 800ed20:	200042f4 	.word	0x200042f4
 800ed24:	20004824 	.word	0x20004824

0800ed28 <APR_prescaler>:

}


inline void APR_prescaler(APR_TypeDef *hAPR)
{
 800ed28:	b480      	push	{r7}
 800ed2a:	b083      	sub	sp, #12
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]

	hAPR->prescalerCount += 1;
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ed34:	1c5a      	adds	r2, r3, #1
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	64da      	str	r2, [r3, #76]	; 0x4c

	if(hAPR->prescalerCount >= hAPR->Init.prescaler)
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed42:	429a      	cmp	r2, r3
 800ed44:	d306      	bcc.n	800ed54 <APR_prescaler+0x2c>
	{
		hAPR->launchFlg = 1;
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	2201      	movs	r2, #1
 800ed4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
		hAPR->prescalerCount = 0;
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	2200      	movs	r2, #0
 800ed52:	64da      	str	r2, [r3, #76]	; 0x4c
	}

}
 800ed54:	bf00      	nop
 800ed56:	370c      	adds	r7, #12
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed5e:	4770      	bx	lr

0800ed60 <APR_Refresh>:


inline void APR_Refresh(APR_TypeDef *hAPR)
{
 800ed60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800ed64:	b082      	sub	sp, #8
 800ed66:	af00      	add	r7, sp, #0
 800ed68:	6078      	str	r0, [r7, #4]

	static APR_InitTypeDef *hAPR_Init;

	// 有効時のみ実行
	if(hAPR->enable == 0)
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	f000 80c1 	beq.w	800eef8 <APR_Refresh+0x198>
	{
		return;
	}

	// プリスケーラリセット時のみ実行
	if(hAPR->launchFlg == 0)
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	f000 80bd 	beq.w	800eefc <APR_Refresh+0x19c>
	{
		return;
	}
	hAPR->launchFlg = 0;
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	2200      	movs	r2, #0
 800ed86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51


	hAPR_Init = &hAPR->Init;
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	4a5f      	ldr	r2, [pc, #380]	; (800ef0c <APR_Refresh+0x1ac>)
 800ed8e:	6013      	str	r3, [r2, #0]

	hAPR->theta = hAPR_Init->hEncoder->theta_multiturn;
 800ed90:	4b5e      	ldr	r3, [pc, #376]	; (800ef0c <APR_Refresh+0x1ac>)
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	695b      	ldr	r3, [r3, #20]
 800ed96:	6a1a      	ldr	r2, [r3, #32]
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	631a      	str	r2, [r3, #48]	; 0x30

	// 速度偏差
	hAPR->theta_error = hAPR->theta_ref - hAPR->theta;
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800eda8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

	// integral
	hAPR->theta_error_integ += hAPR_Init->cycleTime * 0.5 * (hAPR->theta_error + hAPR->p_theta_error);
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800edb6:	4618      	mov	r0, r3
 800edb8:	f7f9 fafe 	bl	80083b8 <__aeabi_f2d>
 800edbc:	4604      	mov	r4, r0
 800edbe:	460d      	mov	r5, r1
 800edc0:	4b52      	ldr	r3, [pc, #328]	; (800ef0c <APR_Refresh+0x1ac>)
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	68db      	ldr	r3, [r3, #12]
 800edc6:	4618      	mov	r0, r3
 800edc8:	f7f9 faf6 	bl	80083b8 <__aeabi_f2d>
 800edcc:	f04f 0200 	mov.w	r2, #0
 800edd0:	4b4f      	ldr	r3, [pc, #316]	; (800ef10 <APR_Refresh+0x1b0>)
 800edd2:	f7f9 fb49 	bl	8008468 <__aeabi_dmul>
 800edd6:	4602      	mov	r2, r0
 800edd8:	460b      	mov	r3, r1
 800edda:	4690      	mov	r8, r2
 800eddc:	4699      	mov	r9, r3
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800edea:	ee77 7a27 	vadd.f32	s15, s14, s15
 800edee:	ee17 0a90 	vmov	r0, s15
 800edf2:	f7f9 fae1 	bl	80083b8 <__aeabi_f2d>
 800edf6:	4602      	mov	r2, r0
 800edf8:	460b      	mov	r3, r1
 800edfa:	4640      	mov	r0, r8
 800edfc:	4649      	mov	r1, r9
 800edfe:	f7f9 fb33 	bl	8008468 <__aeabi_dmul>
 800ee02:	4602      	mov	r2, r0
 800ee04:	460b      	mov	r3, r1
 800ee06:	4620      	mov	r0, r4
 800ee08:	4629      	mov	r1, r5
 800ee0a:	f7f9 f977 	bl	80080fc <__adddf3>
 800ee0e:	4603      	mov	r3, r0
 800ee10:	460c      	mov	r4, r1
 800ee12:	4618      	mov	r0, r3
 800ee14:	4621      	mov	r1, r4
 800ee16:	f7f9 fdff 	bl	8008a18 <__aeabi_d2f>
 800ee1a:	4602      	mov	r2, r0
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	63da      	str	r2, [r3, #60]	; 0x3c

	hAPR->p_theta_error = hAPR->theta_error;
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	639a      	str	r2, [r3, #56]	; 0x38

	if(hAPR->MV_type == 0)
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d11f      	bne.n	800ee72 <APR_Refresh+0x112>
	{
		// P-D型
		hAPR_Init->hASR->omega_ref = hAPR->omega_ref = hAPR_Init->Kp * hAPR->theta_error - hAPR_Init->Kd * hAPR_Init->hEncoder->omega;
 800ee32:	4b36      	ldr	r3, [pc, #216]	; (800ef0c <APR_Refresh+0x1ac>)
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	ed93 7a00 	vldr	s14, [r3]
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800ee40:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ee44:	4b31      	ldr	r3, [pc, #196]	; (800ef0c <APR_Refresh+0x1ac>)
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	edd3 6a02 	vldr	s13, [r3, #8]
 800ee4c:	4b2f      	ldr	r3, [pc, #188]	; (800ef0c <APR_Refresh+0x1ac>)
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	695b      	ldr	r3, [r3, #20]
 800ee52:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800ee56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ee5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
 800ee64:	4b29      	ldr	r3, [pc, #164]	; (800ef0c <APR_Refresh+0x1ac>)
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	699b      	ldr	r3, [r3, #24]
 800ee6a:	687a      	ldr	r2, [r7, #4]
 800ee6c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800ee6e:	625a      	str	r2, [r3, #36]	; 0x24
		setSVM_dq(&htim8, 0.0f, hAPR->Vq_ref, hAPR_Init->hEncoder->cos_theta_re, hAPR_Init->hEncoder->sin_theta_re);

	}


	return;
 800ee70:	e046      	b.n	800ef00 <APR_Refresh+0x1a0>
	else if(hAPR->MV_type == 2)
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800ee78:	2b02      	cmp	r3, #2
 800ee7a:	d141      	bne.n	800ef00 <APR_Refresh+0x1a0>
				hAPR_Init->Kp * hAPR->theta_error
 800ee7c:	4b23      	ldr	r3, [pc, #140]	; (800ef0c <APR_Refresh+0x1ac>)
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	ed93 7a00 	vldr	s14, [r3]
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800ee8a:	ee27 7a27 	vmul.f32	s14, s14, s15
				+ hAPR_Init->Ki * hAPR->theta_error_integ
 800ee8e:	4b1f      	ldr	r3, [pc, #124]	; (800ef0c <APR_Refresh+0x1ac>)
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	edd3 6a01 	vldr	s13, [r3, #4]
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800ee9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800eea0:	ee37 7a27 	vadd.f32	s14, s14, s15
				- hAPR_Init->Kd * hAPR_Init->hEncoder->omega;
 800eea4:	4b19      	ldr	r3, [pc, #100]	; (800ef0c <APR_Refresh+0x1ac>)
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	edd3 6a02 	vldr	s13, [r3, #8]
 800eeac:	4b17      	ldr	r3, [pc, #92]	; (800ef0c <APR_Refresh+0x1ac>)
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	695b      	ldr	r3, [r3, #20]
 800eeb2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800eeb6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800eeba:	ee77 7a67 	vsub.f32	s15, s14, s15
		hAPR->Vq_ref =
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		setSVM_dq(&htim8, 0.0f, hAPR->Vq_ref, hAPR_Init->hEncoder->cos_theta_re, hAPR_Init->hEncoder->sin_theta_re);
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800eeca:	4b10      	ldr	r3, [pc, #64]	; (800ef0c <APR_Refresh+0x1ac>)
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	695b      	ldr	r3, [r3, #20]
 800eed0:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 800eed4:	4b0d      	ldr	r3, [pc, #52]	; (800ef0c <APR_Refresh+0x1ac>)
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	695b      	ldr	r3, [r3, #20]
 800eeda:	edd3 6a0f 	vldr	s13, [r3, #60]	; 0x3c
 800eede:	eef0 1a66 	vmov.f32	s3, s13
 800eee2:	eeb0 1a47 	vmov.f32	s2, s14
 800eee6:	eef0 0a67 	vmov.f32	s1, s15
 800eeea:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 800ef14 <APR_Refresh+0x1b4>
 800eeee:	480a      	ldr	r0, [pc, #40]	; (800ef18 <APR_Refresh+0x1b8>)
 800eef0:	f002 f9de 	bl	80112b0 <setSVM_dq>
	return;
 800eef4:	bf00      	nop
 800eef6:	e003      	b.n	800ef00 <APR_Refresh+0x1a0>
		return;
 800eef8:	bf00      	nop
 800eefa:	e002      	b.n	800ef02 <APR_Refresh+0x1a2>
		return;
 800eefc:	bf00      	nop
 800eefe:	e000      	b.n	800ef02 <APR_Refresh+0x1a2>
	return;
 800ef00:	bf00      	nop
}
 800ef02:	3708      	adds	r7, #8
 800ef04:	46bd      	mov	sp, r7
 800ef06:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800ef0a:	bf00      	nop
 800ef0c:	20000220 	.word	0x20000220
 800ef10:	3fe00000 	.word	0x3fe00000
 800ef14:	00000000 	.word	0x00000000
 800ef18:	20004824 	.word	0x20004824

0800ef1c <ASR_Init>:

ASR_TypeDef mainASR;


void ASR_Init()
{
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	af00      	add	r7, sp, #0
	memset(&mainASR, 0x00, sizeof(mainASR));
 800ef20:	2244      	movs	r2, #68	; 0x44
 800ef22:	2100      	movs	r1, #0
 800ef24:	4812      	ldr	r0, [pc, #72]	; (800ef70 <ASR_Init+0x54>)
 800ef26:	f003 fa60 	bl	80123ea <memset>

	mainASR.Init.Kp = 0.5f;
 800ef2a:	4b11      	ldr	r3, [pc, #68]	; (800ef70 <ASR_Init+0x54>)
 800ef2c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 800ef30:	601a      	str	r2, [r3, #0]
	mainASR.Init.Ki = 15.0f;
 800ef32:	4b0f      	ldr	r3, [pc, #60]	; (800ef70 <ASR_Init+0x54>)
 800ef34:	4a0f      	ldr	r2, [pc, #60]	; (800ef74 <ASR_Init+0x58>)
 800ef36:	605a      	str	r2, [r3, #4]
	mainASR.Init.omega_limit = 400.0f;
 800ef38:	4b0d      	ldr	r3, [pc, #52]	; (800ef70 <ASR_Init+0x54>)
 800ef3a:	4a0f      	ldr	r2, [pc, #60]	; (800ef78 <ASR_Init+0x5c>)
 800ef3c:	60da      	str	r2, [r3, #12]
	mainASR.Init.omega_error_integ_limit = 1000.0f;
 800ef3e:	4b0c      	ldr	r3, [pc, #48]	; (800ef70 <ASR_Init+0x54>)
 800ef40:	4a0e      	ldr	r2, [pc, #56]	; (800ef7c <ASR_Init+0x60>)
 800ef42:	611a      	str	r2, [r3, #16]
	mainASR.Init.cycleTime = 1E-3;
 800ef44:	4b0a      	ldr	r3, [pc, #40]	; (800ef70 <ASR_Init+0x54>)
 800ef46:	4a0e      	ldr	r2, [pc, #56]	; (800ef80 <ASR_Init+0x64>)
 800ef48:	609a      	str	r2, [r3, #8]
	mainASR.Init.prescaler = 10;
 800ef4a:	4b09      	ldr	r3, [pc, #36]	; (800ef70 <ASR_Init+0x54>)
 800ef4c:	220a      	movs	r2, #10
 800ef4e:	61da      	str	r2, [r3, #28]

	mainASR.Init.hEncoder = &mainEncoder;
 800ef50:	4b07      	ldr	r3, [pc, #28]	; (800ef70 <ASR_Init+0x54>)
 800ef52:	4a0c      	ldr	r2, [pc, #48]	; (800ef84 <ASR_Init+0x68>)
 800ef54:	615a      	str	r2, [r3, #20]
	mainASR.Init.hACR = &mainACR;
 800ef56:	4b06      	ldr	r3, [pc, #24]	; (800ef70 <ASR_Init+0x54>)
 800ef58:	4a0b      	ldr	r2, [pc, #44]	; (800ef88 <ASR_Init+0x6c>)
 800ef5a:	619a      	str	r2, [r3, #24]

	mainASR.firstLaunch = 1;
 800ef5c:	4b04      	ldr	r3, [pc, #16]	; (800ef70 <ASR_Init+0x54>)
 800ef5e:	2201      	movs	r2, #1
 800ef60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	mainASR.omega = 0.0f;
 800ef64:	4b02      	ldr	r3, [pc, #8]	; (800ef70 <ASR_Init+0x54>)
 800ef66:	f04f 0200 	mov.w	r2, #0
 800ef6a:	629a      	str	r2, [r3, #40]	; 0x28

}
 800ef6c:	bf00      	nop
 800ef6e:	bd80      	pop	{r7, pc}
 800ef70:	200043bc 	.word	0x200043bc
 800ef74:	41700000 	.word	0x41700000
 800ef78:	43c80000 	.word	0x43c80000
 800ef7c:	447a0000 	.word	0x447a0000
 800ef80:	3a83126f 	.word	0x3a83126f
 800ef84:	20004728 	.word	0x20004728
 800ef88:	200042f4 	.word	0x200042f4

0800ef8c <ASR_Start>:


void ASR_Start(ASR_TypeDef *hASR)
{
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	b082      	sub	sp, #8
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	6078      	str	r0, [r7, #4]

	hASR->enable = 1;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	2201      	movs	r2, #1
 800ef98:	f883 2020 	strb.w	r2, [r3, #32]
	ASR_Reset(hASR);
 800ef9c:	6878      	ldr	r0, [r7, #4]
 800ef9e:	f000 f935 	bl	800f20c <ASR_Reset>

}
 800efa2:	bf00      	nop
 800efa4:	3708      	adds	r7, #8
 800efa6:	46bd      	mov	sp, r7
 800efa8:	bd80      	pop	{r7, pc}

0800efaa <ASR_prescaler>:

}


inline void ASR_prescaler(ASR_TypeDef *hASR)
{
 800efaa:	b480      	push	{r7}
 800efac:	b083      	sub	sp, #12
 800efae:	af00      	add	r7, sp, #0
 800efb0:	6078      	str	r0, [r7, #4]

	hASR->prescalerCount += 1;
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800efb6:	1c5a      	adds	r2, r3, #1
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	63da      	str	r2, [r3, #60]	; 0x3c

	if(hASR->prescalerCount >= hASR->Init.prescaler)
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	69db      	ldr	r3, [r3, #28]
 800efc4:	429a      	cmp	r2, r3
 800efc6:	d306      	bcc.n	800efd6 <ASR_prescaler+0x2c>
	{
		hASR->launchFlg = 1;
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	2201      	movs	r2, #1
 800efcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		hASR->prescalerCount = 0;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	2200      	movs	r2, #0
 800efd4:	63da      	str	r2, [r3, #60]	; 0x3c
	}

}
 800efd6:	bf00      	nop
 800efd8:	370c      	adds	r7, #12
 800efda:	46bd      	mov	sp, r7
 800efdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe0:	4770      	bx	lr
 800efe2:	0000      	movs	r0, r0
 800efe4:	0000      	movs	r0, r0
	...

0800efe8 <ASR_Refresh>:


inline void ASR_Refresh(ASR_TypeDef *hASR)
{
 800efe8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800efec:	b082      	sub	sp, #8
 800efee:	af00      	add	r7, sp, #0
 800eff0:	6078      	str	r0, [r7, #4]
	static float integInput;

	static ASR_InitTypeDef *hASR_Init;

	// 有効時のみ実行
	if(hASR->enable == 0)
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	f000 80ef 	beq.w	800f1dc <ASR_Refresh+0x1f4>
	{
		return;
	}

	// プリスケーラリセット時のみ実行
	if(hASR->launchFlg == 0)
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f004:	2b00      	cmp	r3, #0
 800f006:	f000 80eb 	beq.w	800f1e0 <ASR_Refresh+0x1f8>
	{
		return;
	}
	hASR->launchFlg = 0;
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	2200      	movs	r2, #0
 800f00e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


	hASR_Init = &hASR->Init;
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	4a78      	ldr	r2, [pc, #480]	; (800f1f8 <ASR_Refresh+0x210>)
 800f016:	6013      	str	r3, [r2, #0]

	hASR->omega = hASR_Init->hEncoder->omega;
 800f018:	4b77      	ldr	r3, [pc, #476]	; (800f1f8 <ASR_Refresh+0x210>)
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	695b      	ldr	r3, [r3, #20]
 800f01e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	629a      	str	r2, [r3, #40]	; 0x28

	// 速度制限
	if(hASR->omega_ref < -hASR_Init->omega_limit)		_omega_ref = -hASR_Init->omega_limit;
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800f02a:	4b73      	ldr	r3, [pc, #460]	; (800f1f8 <ASR_Refresh+0x210>)
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	edd3 7a03 	vldr	s15, [r3, #12]
 800f032:	eef1 7a67 	vneg.f32	s15, s15
 800f036:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f03a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f03e:	d509      	bpl.n	800f054 <ASR_Refresh+0x6c>
 800f040:	4b6d      	ldr	r3, [pc, #436]	; (800f1f8 <ASR_Refresh+0x210>)
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	edd3 7a03 	vldr	s15, [r3, #12]
 800f048:	eef1 7a67 	vneg.f32	s15, s15
 800f04c:	4b6b      	ldr	r3, [pc, #428]	; (800f1fc <ASR_Refresh+0x214>)
 800f04e:	edc3 7a00 	vstr	s15, [r3]
 800f052:	e015      	b.n	800f080 <ASR_Refresh+0x98>
	else if(hASR->omega_ref > hASR_Init->omega_limit)	_omega_ref = hASR_Init->omega_limit;
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800f05a:	4b67      	ldr	r3, [pc, #412]	; (800f1f8 <ASR_Refresh+0x210>)
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	edd3 7a03 	vldr	s15, [r3, #12]
 800f062:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800f066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f06a:	dd05      	ble.n	800f078 <ASR_Refresh+0x90>
 800f06c:	4b62      	ldr	r3, [pc, #392]	; (800f1f8 <ASR_Refresh+0x210>)
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	68db      	ldr	r3, [r3, #12]
 800f072:	4a62      	ldr	r2, [pc, #392]	; (800f1fc <ASR_Refresh+0x214>)
 800f074:	6013      	str	r3, [r2, #0]
 800f076:	e003      	b.n	800f080 <ASR_Refresh+0x98>
	else												_omega_ref = hASR->omega_ref;
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f07c:	4a5f      	ldr	r2, [pc, #380]	; (800f1fc <ASR_Refresh+0x214>)
 800f07e:	6013      	str	r3, [r2, #0]

	// 速度偏差
	hASR->omega_error = _omega_ref - hASR->omega;
 800f080:	4b5e      	ldr	r3, [pc, #376]	; (800f1fc <ASR_Refresh+0x214>)
 800f082:	ed93 7a00 	vldr	s14, [r3]
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800f08c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

#if USE_ANTI_WINDUP
	// リミット偏差フィードバックによる

	integInput = hASR->omega_error - hASR_Init->hACR->Iq_limitError / (KT * hASR_Init->Kp);
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f09a:	4618      	mov	r0, r3
 800f09c:	f7f9 f98c 	bl	80083b8 <__aeabi_f2d>
 800f0a0:	4604      	mov	r4, r0
 800f0a2:	460d      	mov	r5, r1
 800f0a4:	4b54      	ldr	r3, [pc, #336]	; (800f1f8 <ASR_Refresh+0x210>)
 800f0a6:	681b      	ldr	r3, [r3, #0]
 800f0a8:	699b      	ldr	r3, [r3, #24]
 800f0aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	f7f9 f983 	bl	80083b8 <__aeabi_f2d>
 800f0b2:	4680      	mov	r8, r0
 800f0b4:	4689      	mov	r9, r1
 800f0b6:	4b50      	ldr	r3, [pc, #320]	; (800f1f8 <ASR_Refresh+0x210>)
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	4618      	mov	r0, r3
 800f0be:	f7f9 f97b 	bl	80083b8 <__aeabi_f2d>
 800f0c2:	a34b      	add	r3, pc, #300	; (adr r3, 800f1f0 <ASR_Refresh+0x208>)
 800f0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0c8:	f7f9 f9ce 	bl	8008468 <__aeabi_dmul>
 800f0cc:	4602      	mov	r2, r0
 800f0ce:	460b      	mov	r3, r1
 800f0d0:	4640      	mov	r0, r8
 800f0d2:	4649      	mov	r1, r9
 800f0d4:	f7f9 faf2 	bl	80086bc <__aeabi_ddiv>
 800f0d8:	4602      	mov	r2, r0
 800f0da:	460b      	mov	r3, r1
 800f0dc:	4620      	mov	r0, r4
 800f0de:	4629      	mov	r1, r5
 800f0e0:	f7f9 f80a 	bl	80080f8 <__aeabi_dsub>
 800f0e4:	4603      	mov	r3, r0
 800f0e6:	460c      	mov	r4, r1
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	4621      	mov	r1, r4
 800f0ec:	f7f9 fc94 	bl	8008a18 <__aeabi_d2f>
 800f0f0:	4602      	mov	r2, r0
 800f0f2:	4b43      	ldr	r3, [pc, #268]	; (800f200 <ASR_Refresh+0x218>)
 800f0f4:	601a      	str	r2, [r3, #0]

	hASR->omega_error_integ += hASR_Init->cycleTime * 0.5 * (integInput + hASR->p_omega_error);
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	f7f9 f95c 	bl	80083b8 <__aeabi_f2d>
 800f100:	4604      	mov	r4, r0
 800f102:	460d      	mov	r5, r1
 800f104:	4b3c      	ldr	r3, [pc, #240]	; (800f1f8 <ASR_Refresh+0x210>)
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	689b      	ldr	r3, [r3, #8]
 800f10a:	4618      	mov	r0, r3
 800f10c:	f7f9 f954 	bl	80083b8 <__aeabi_f2d>
 800f110:	f04f 0200 	mov.w	r2, #0
 800f114:	4b3b      	ldr	r3, [pc, #236]	; (800f204 <ASR_Refresh+0x21c>)
 800f116:	f7f9 f9a7 	bl	8008468 <__aeabi_dmul>
 800f11a:	4602      	mov	r2, r0
 800f11c:	460b      	mov	r3, r1
 800f11e:	4690      	mov	r8, r2
 800f120:	4699      	mov	r9, r3
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800f128:	4b35      	ldr	r3, [pc, #212]	; (800f200 <ASR_Refresh+0x218>)
 800f12a:	edd3 7a00 	vldr	s15, [r3]
 800f12e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f132:	ee17 0a90 	vmov	r0, s15
 800f136:	f7f9 f93f 	bl	80083b8 <__aeabi_f2d>
 800f13a:	4602      	mov	r2, r0
 800f13c:	460b      	mov	r3, r1
 800f13e:	4640      	mov	r0, r8
 800f140:	4649      	mov	r1, r9
 800f142:	f7f9 f991 	bl	8008468 <__aeabi_dmul>
 800f146:	4602      	mov	r2, r0
 800f148:	460b      	mov	r3, r1
 800f14a:	4620      	mov	r0, r4
 800f14c:	4629      	mov	r1, r5
 800f14e:	f7f8 ffd5 	bl	80080fc <__adddf3>
 800f152:	4603      	mov	r3, r0
 800f154:	460c      	mov	r4, r1
 800f156:	4618      	mov	r0, r3
 800f158:	4621      	mov	r1, r4
 800f15a:	f7f9 fc5d 	bl	8008a18 <__aeabi_d2f>
 800f15e:	4602      	mov	r2, r0
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	635a      	str	r2, [r3, #52]	; 0x34

	hASR->p_omega_error = integInput;
 800f164:	4b26      	ldr	r3, [pc, #152]	; (800f200 <ASR_Refresh+0x218>)
 800f166:	681a      	ldr	r2, [r3, #0]
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	631a      	str	r2, [r3, #48]	; 0x30
	hASR->omega_error_integ += hASR_Init->cycleTime * 0.5 * (hASR->omega_error + hASR->p_omega_error);
	hASR->p_omega_error = hASR->omega_error;
#endif


	torque_ref = hASR_Init->Kp * hASR->omega_error + hASR_Init->Ki * hASR->omega_error_integ;
 800f16c:	4b22      	ldr	r3, [pc, #136]	; (800f1f8 <ASR_Refresh+0x210>)
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	ed93 7a00 	vldr	s14, [r3]
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800f17a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f17e:	4b1e      	ldr	r3, [pc, #120]	; (800f1f8 <ASR_Refresh+0x210>)
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	edd3 6a01 	vldr	s13, [r3, #4]
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800f18c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f190:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f194:	4b1c      	ldr	r3, [pc, #112]	; (800f208 <ASR_Refresh+0x220>)
 800f196:	edc3 7a00 	vstr	s15, [r3]

	hASR_Init->hACR->Id_ref = 0.0f;
 800f19a:	4b17      	ldr	r3, [pc, #92]	; (800f1f8 <ASR_Refresh+0x210>)
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	699b      	ldr	r3, [r3, #24]
 800f1a0:	f04f 0200 	mov.w	r2, #0
 800f1a4:	635a      	str	r2, [r3, #52]	; 0x34
	hASR_Init->hACR->Iq_ref = hASR->Iq_ref = KT * torque_ref;
 800f1a6:	4b18      	ldr	r3, [pc, #96]	; (800f208 <ASR_Refresh+0x220>)
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	f7f9 f904 	bl	80083b8 <__aeabi_f2d>
 800f1b0:	a30f      	add	r3, pc, #60	; (adr r3, 800f1f0 <ASR_Refresh+0x208>)
 800f1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1b6:	f7f9 f957 	bl	8008468 <__aeabi_dmul>
 800f1ba:	4603      	mov	r3, r0
 800f1bc:	460c      	mov	r4, r1
 800f1be:	4618      	mov	r0, r3
 800f1c0:	4621      	mov	r1, r4
 800f1c2:	f7f9 fc29 	bl	8008a18 <__aeabi_d2f>
 800f1c6:	4602      	mov	r2, r0
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	639a      	str	r2, [r3, #56]	; 0x38
 800f1cc:	4b0a      	ldr	r3, [pc, #40]	; (800f1f8 <ASR_Refresh+0x210>)
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	699b      	ldr	r3, [r3, #24]
 800f1d2:	687a      	ldr	r2, [r7, #4]
 800f1d4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800f1d6:	639a      	str	r2, [r3, #56]	; 0x38


	return;
 800f1d8:	bf00      	nop
 800f1da:	e002      	b.n	800f1e2 <ASR_Refresh+0x1fa>
		return;
 800f1dc:	bf00      	nop
 800f1de:	e000      	b.n	800f1e2 <ASR_Refresh+0x1fa>
		return;
 800f1e0:	bf00      	nop
}
 800f1e2:	3708      	adds	r7, #8
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800f1ea:	bf00      	nop
 800f1ec:	f3af 8000 	nop.w
 800f1f0:	7b830193 	.word	0x7b830193
 800f1f4:	3fd6eb16 	.word	0x3fd6eb16
 800f1f8:	20000224 	.word	0x20000224
 800f1fc:	20000228 	.word	0x20000228
 800f200:	2000022c 	.word	0x2000022c
 800f204:	3fe00000 	.word	0x3fe00000
 800f208:	20000230 	.word	0x20000230

0800f20c <ASR_Reset>:



inline void ASR_Reset(ASR_TypeDef *hASR)
{
 800f20c:	b480      	push	{r7}
 800f20e:	b083      	sub	sp, #12
 800f210:	af00      	add	r7, sp, #0
 800f212:	6078      	str	r0, [r7, #4]

	hASR->firstLaunch = 1;
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	2201      	movs	r2, #1
 800f218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	hASR->omega_error_integ = 0.0f;
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	f04f 0200 	mov.w	r2, #0
 800f222:	635a      	str	r2, [r3, #52]	; 0x34

	hASR->omega = 0.0f;
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	f04f 0200 	mov.w	r2, #0
 800f22a:	629a      	str	r2, [r3, #40]	; 0x28

	hASR->omega_ref = 0.0f;
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	f04f 0200 	mov.w	r2, #0
 800f232:	625a      	str	r2, [r3, #36]	; 0x24


}
 800f234:	bf00      	nop
 800f236:	370c      	adds	r7, #12
 800f238:	46bd      	mov	sp, r7
 800f23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f23e:	4770      	bx	lr

0800f240 <CurrentSensor_Init>:

int32_t median5(int32_t *buf);


void CurrentSensor_Init()
{
 800f240:	b580      	push	{r7, lr}
 800f242:	af00      	add	r7, sp, #0

	memset(&mainCS, 0x00, sizeof(mainCS));
 800f244:	2290      	movs	r2, #144	; 0x90
 800f246:	2100      	movs	r1, #0
 800f248:	4812      	ldr	r0, [pc, #72]	; (800f294 <CurrentSensor_Init+0x54>)
 800f24a:	f003 f8ce 	bl	80123ea <memset>

	mainCS.Init.CS_Type = CS_Type_3shunt;
 800f24e:	4b11      	ldr	r3, [pc, #68]	; (800f294 <CurrentSensor_Init+0x54>)
 800f250:	2200      	movs	r2, #0
 800f252:	701a      	strb	r2, [r3, #0]
	mainCS.Init.Iu_Gain = -10.0f;//9.0f;	// 1 / ( R * OPAmpGain) [A / V]
 800f254:	4b0f      	ldr	r3, [pc, #60]	; (800f294 <CurrentSensor_Init+0x54>)
 800f256:	4a10      	ldr	r2, [pc, #64]	; (800f298 <CurrentSensor_Init+0x58>)
 800f258:	615a      	str	r2, [r3, #20]
	mainCS.Init.Iv_Gain = -10.0f;//5.3f;	// 1 / ( R * OPAmpGain) [A / V]
 800f25a:	4b0e      	ldr	r3, [pc, #56]	; (800f294 <CurrentSensor_Init+0x54>)
 800f25c:	4a0e      	ldr	r2, [pc, #56]	; (800f298 <CurrentSensor_Init+0x58>)
 800f25e:	619a      	str	r2, [r3, #24]
	mainCS.Init.Iw_Gain = -10.0f;//5.5f;	// 1 / ( R * OPAmpGain) [A / V]
 800f260:	4b0c      	ldr	r3, [pc, #48]	; (800f294 <CurrentSensor_Init+0x54>)
 800f262:	4a0d      	ldr	r2, [pc, #52]	; (800f298 <CurrentSensor_Init+0x58>)
 800f264:	61da      	str	r2, [r3, #28]
	mainCS.Init.V_Iu_offset = 1.65;
 800f266:	4b0b      	ldr	r3, [pc, #44]	; (800f294 <CurrentSensor_Init+0x54>)
 800f268:	4a0c      	ldr	r2, [pc, #48]	; (800f29c <CurrentSensor_Init+0x5c>)
 800f26a:	621a      	str	r2, [r3, #32]
	mainCS.Init.V_Iv_offset = 1.65;
 800f26c:	4b09      	ldr	r3, [pc, #36]	; (800f294 <CurrentSensor_Init+0x54>)
 800f26e:	4a0b      	ldr	r2, [pc, #44]	; (800f29c <CurrentSensor_Init+0x5c>)
 800f270:	625a      	str	r2, [r3, #36]	; 0x24
	mainCS.Init.V_Iw_offset = 1.65;
 800f272:	4b08      	ldr	r3, [pc, #32]	; (800f294 <CurrentSensor_Init+0x54>)
 800f274:	4a09      	ldr	r2, [pc, #36]	; (800f29c <CurrentSensor_Init+0x5c>)
 800f276:	629a      	str	r2, [r3, #40]	; 0x28
	mainCS.Init.hadc_Iu = &hadc1;
 800f278:	4b06      	ldr	r3, [pc, #24]	; (800f294 <CurrentSensor_Init+0x54>)
 800f27a:	4a09      	ldr	r2, [pc, #36]	; (800f2a0 <CurrentSensor_Init+0x60>)
 800f27c:	605a      	str	r2, [r3, #4]
	mainCS.Init.hadc_Iv = &hadc2;
 800f27e:	4b05      	ldr	r3, [pc, #20]	; (800f294 <CurrentSensor_Init+0x54>)
 800f280:	4a08      	ldr	r2, [pc, #32]	; (800f2a4 <CurrentSensor_Init+0x64>)
 800f282:	609a      	str	r2, [r3, #8]
	mainCS.Init.hadc_Iw = &hadc3;
 800f284:	4b03      	ldr	r3, [pc, #12]	; (800f294 <CurrentSensor_Init+0x54>)
 800f286:	4a08      	ldr	r2, [pc, #32]	; (800f2a8 <CurrentSensor_Init+0x68>)
 800f288:	60da      	str	r2, [r3, #12]

	mainCS.pos_MEDF_I = 0;
 800f28a:	4b02      	ldr	r3, [pc, #8]	; (800f294 <CurrentSensor_Init+0x54>)
 800f28c:	2200      	movs	r2, #0
 800f28e:	639a      	str	r2, [r3, #56]	; 0x38

}
 800f290:	bf00      	nop
 800f292:	bd80      	pop	{r7, pc}
 800f294:	20004400 	.word	0x20004400
 800f298:	c1200000 	.word	0xc1200000
 800f29c:	3fd33333 	.word	0x3fd33333
 800f2a0:	20004564 	.word	0x20004564
 800f2a4:	200044bc 	.word	0x200044bc
 800f2a8:	200045ac 	.word	0x200045ac

0800f2ac <CurrentSensor_Start>:


void CurrentSensor_Start(CurrentSensor_TypeDef *hCS)
{
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	b082      	sub	sp, #8
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	6078      	str	r0, [r7, #4]

	switch(hCS->Init.CS_Type)
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	781b      	ldrb	r3, [r3, #0]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d000      	beq.n	800f2be <CurrentSensor_Start+0x12>
		break;
	}



}
 800f2bc:	e018      	b.n	800f2f0 <CurrentSensor_Start+0x44>
		HAL_ADC_Start_DMA(hCS->Init.hadc_Iu, hCS->AD_Iu, 1);
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	6858      	ldr	r0, [r3, #4]
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	3330      	adds	r3, #48	; 0x30
 800f2c6:	2201      	movs	r2, #1
 800f2c8:	4619      	mov	r1, r3
 800f2ca:	f7f9 fe4d 	bl	8008f68 <HAL_ADC_Start_DMA>
		HAL_ADC_Start_DMA(hCS->Init.hadc_Iv, hCS->AD_Iv, 1);
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	6898      	ldr	r0, [r3, #8]
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	3332      	adds	r3, #50	; 0x32
 800f2d6:	2201      	movs	r2, #1
 800f2d8:	4619      	mov	r1, r3
 800f2da:	f7f9 fe45 	bl	8008f68 <HAL_ADC_Start_DMA>
		HAL_ADC_Start_DMA(hCS->Init.hadc_Iw, hCS->AD_Iw, 1);
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	68d8      	ldr	r0, [r3, #12]
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	3334      	adds	r3, #52	; 0x34
 800f2e6:	2201      	movs	r2, #1
 800f2e8:	4619      	mov	r1, r3
 800f2ea:	f7f9 fe3d 	bl	8008f68 <HAL_ADC_Start_DMA>
		break;
 800f2ee:	bf00      	nop
}
 800f2f0:	bf00      	nop
 800f2f2:	3708      	adds	r7, #8
 800f2f4:	46bd      	mov	sp, r7
 800f2f6:	bd80      	pop	{r7, pc}

0800f2f8 <CurrentSensor_Refresh>:
/*
 * UVWの電流値を更新するだけ
 * 座標変換とかはやらない
 */
inline void CurrentSensor_Refresh(CurrentSensor_TypeDef *hCS, uint8_t SVM_sector)
{
 800f2f8:	b580      	push	{r7, lr}
 800f2fa:	b082      	sub	sp, #8
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	6078      	str	r0, [r7, #4]
 800f300:	460b      	mov	r3, r1
 800f302:	70fb      	strb	r3, [r7, #3]
	static int32_t AD_Iv_MEDF = 0;
	static int32_t AD_Iw_MEDF = 0;

	static CurrentSensor_InitTypeDef *hCS_Init;

	hCS_Init = &hCS->Init;
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	4a98      	ldr	r2, [pc, #608]	; (800f568 <CurrentSensor_Refresh+0x270>)
 800f308:	6013      	str	r3, [r2, #0]

	switch(hCS->Init.CS_Type)
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	781b      	ldrb	r3, [r3, #0]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d000      	beq.n	800f314 <CurrentSensor_Refresh+0x1c>

		break; /* CS_Type_3shunt */


		default:
			break;
 800f312:	e124      	b.n	800f55e <CurrentSensor_Refresh+0x266>
		HAL_ADC_Start_DMA(hCS_Init->hadc_Iu, hCS->AD_Iu, 1);
 800f314:	4b94      	ldr	r3, [pc, #592]	; (800f568 <CurrentSensor_Refresh+0x270>)
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	6858      	ldr	r0, [r3, #4]
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	3330      	adds	r3, #48	; 0x30
 800f31e:	2201      	movs	r2, #1
 800f320:	4619      	mov	r1, r3
 800f322:	f7f9 fe21 	bl	8008f68 <HAL_ADC_Start_DMA>
		HAL_ADC_Start_DMA(hCS_Init->hadc_Iv, hCS->AD_Iv, 1);
 800f326:	4b90      	ldr	r3, [pc, #576]	; (800f568 <CurrentSensor_Refresh+0x270>)
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	6898      	ldr	r0, [r3, #8]
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	3332      	adds	r3, #50	; 0x32
 800f330:	2201      	movs	r2, #1
 800f332:	4619      	mov	r1, r3
 800f334:	f7f9 fe18 	bl	8008f68 <HAL_ADC_Start_DMA>
		HAL_ADC_Start_DMA(hCS_Init->hadc_Iw, hCS->AD_Iw, 1);
 800f338:	4b8b      	ldr	r3, [pc, #556]	; (800f568 <CurrentSensor_Refresh+0x270>)
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	68d8      	ldr	r0, [r3, #12]
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	3334      	adds	r3, #52	; 0x34
 800f342:	2201      	movs	r2, #1
 800f344:	4619      	mov	r1, r3
 800f346:	f7f9 fe0f 	bl	8008f68 <HAL_ADC_Start_DMA>
		hCS->AD_Iu_buf[hCS->pos_MEDF_I] = (int32_t)hCS->AD_Iu[0];
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f352:	4611      	mov	r1, r2
 800f354:	687a      	ldr	r2, [r7, #4]
 800f356:	330e      	adds	r3, #14
 800f358:	009b      	lsls	r3, r3, #2
 800f35a:	4413      	add	r3, r2
 800f35c:	6059      	str	r1, [r3, #4]
		hCS->AD_Iv_buf[hCS->pos_MEDF_I] = (int32_t)hCS->AD_Iv[0];
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	8e59      	ldrh	r1, [r3, #50]	; 0x32
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	3214      	adds	r2, #20
 800f36a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		hCS->AD_Iw_buf[hCS->pos_MEDF_I] = (int32_t)hCS->AD_Iw[0];
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f376:	4611      	mov	r1, r2
 800f378:	687a      	ldr	r2, [r7, #4]
 800f37a:	3318      	adds	r3, #24
 800f37c:	009b      	lsls	r3, r3, #2
 800f37e:	4413      	add	r3, r2
 800f380:	6059      	str	r1, [r3, #4]
		hCS->pos_MEDF_I += 1;
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f386:	1c5a      	adds	r2, r3, #1
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	639a      	str	r2, [r3, #56]	; 0x38
		if(hCS->pos_MEDF_I >= MEDIAN_ORDER)
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f390:	2b04      	cmp	r3, #4
 800f392:	dd02      	ble.n	800f39a <CurrentSensor_Refresh+0xa2>
			hCS->pos_MEDF_I = 0;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	2200      	movs	r2, #0
 800f398:	639a      	str	r2, [r3, #56]	; 0x38
		AD_Iu_MEDF = median5(hCS->AD_Iu_buf);
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	333c      	adds	r3, #60	; 0x3c
 800f39e:	4618      	mov	r0, r3
 800f3a0:	f000 f974 	bl	800f68c <median5>
 800f3a4:	4602      	mov	r2, r0
 800f3a6:	4b71      	ldr	r3, [pc, #452]	; (800f56c <CurrentSensor_Refresh+0x274>)
 800f3a8:	601a      	str	r2, [r3, #0]
		AD_Iv_MEDF = median5(hCS->AD_Iv_buf);
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	3350      	adds	r3, #80	; 0x50
 800f3ae:	4618      	mov	r0, r3
 800f3b0:	f000 f96c 	bl	800f68c <median5>
 800f3b4:	4602      	mov	r2, r0
 800f3b6:	4b6e      	ldr	r3, [pc, #440]	; (800f570 <CurrentSensor_Refresh+0x278>)
 800f3b8:	601a      	str	r2, [r3, #0]
		AD_Iw_MEDF = median5(hCS->AD_Iw_buf);
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	3364      	adds	r3, #100	; 0x64
 800f3be:	4618      	mov	r0, r3
 800f3c0:	f000 f964 	bl	800f68c <median5>
 800f3c4:	4602      	mov	r2, r0
 800f3c6:	4b6b      	ldr	r3, [pc, #428]	; (800f574 <CurrentSensor_Refresh+0x27c>)
 800f3c8:	601a      	str	r2, [r3, #0]
		hCS->V_Iu = (float)AD_Iu_MEDF / AD_Range * Vref_AD - hCS_Init->V_Iu_offset;
 800f3ca:	4b68      	ldr	r3, [pc, #416]	; (800f56c <CurrentSensor_Refresh+0x274>)
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	ee07 3a90 	vmov	s15, r3
 800f3d2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f3d6:	eddf 7a68 	vldr	s15, [pc, #416]	; 800f578 <CurrentSensor_Refresh+0x280>
 800f3da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f3de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f3e2:	ed9f 7a66 	vldr	s14, [pc, #408]	; 800f57c <CurrentSensor_Refresh+0x284>
 800f3e6:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f3ea:	4b5f      	ldr	r3, [pc, #380]	; (800f568 <CurrentSensor_Refresh+0x270>)
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	edd3 7a08 	vldr	s15, [r3, #32]
 800f3f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
		hCS->V_Iv = (float)AD_Iv_MEDF / AD_Range * Vref_AD - hCS_Init->V_Iv_offset;
 800f3fc:	4b5c      	ldr	r3, [pc, #368]	; (800f570 <CurrentSensor_Refresh+0x278>)
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	ee07 3a90 	vmov	s15, r3
 800f404:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f408:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800f578 <CurrentSensor_Refresh+0x280>
 800f40c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f410:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f414:	ed9f 7a59 	vldr	s14, [pc, #356]	; 800f57c <CurrentSensor_Refresh+0x284>
 800f418:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f41c:	4b52      	ldr	r3, [pc, #328]	; (800f568 <CurrentSensor_Refresh+0x270>)
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800f424:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
		hCS->V_Iw = (float)AD_Iw_MEDF / AD_Range * Vref_AD - hCS_Init->V_Iw_offset;
 800f42e:	4b51      	ldr	r3, [pc, #324]	; (800f574 <CurrentSensor_Refresh+0x27c>)
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	ee07 3a90 	vmov	s15, r3
 800f436:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800f43a:	eddf 7a4f 	vldr	s15, [pc, #316]	; 800f578 <CurrentSensor_Refresh+0x280>
 800f43e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f442:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f446:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800f57c <CurrentSensor_Refresh+0x284>
 800f44a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f44e:	4b46      	ldr	r3, [pc, #280]	; (800f568 <CurrentSensor_Refresh+0x270>)
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800f456:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
		switch(SVM_sector)
 800f460:	78fb      	ldrb	r3, [r7, #3]
 800f462:	2b05      	cmp	r3, #5
 800f464:	d87a      	bhi.n	800f55c <CurrentSensor_Refresh+0x264>
 800f466:	a201      	add	r2, pc, #4	; (adr r2, 800f46c <CurrentSensor_Refresh+0x174>)
 800f468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f46c:	0800f485 	.word	0x0800f485
 800f470:	0800f4cd 	.word	0x0800f4cd
 800f474:	0800f4cd 	.word	0x0800f4cd
 800f478:	0800f515 	.word	0x0800f515
 800f47c:	0800f515 	.word	0x0800f515
 800f480:	0800f485 	.word	0x0800f485
			hCS->Iv = hCS->V_Iv * hCS->Init.Iv_Gain;
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	edd3 7a06 	vldr	s15, [r3, #24]
 800f490:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
			hCS->Iw = hCS->V_Iw * hCS->Init.Iw_Gain;
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	edd3 7a07 	vldr	s15, [r3, #28]
 800f4a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
			hCS->Iu = - hCS->Iv - hCS->Iw;
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800f4b6:	eeb1 7a67 	vneg.f32	s14, s15
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800f4c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
			break;
 800f4ca:	e047      	b.n	800f55c <CurrentSensor_Refresh+0x264>
			hCS->Iw = hCS->V_Iw * hCS->Init.Iw_Gain;
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	ed93 7a20 	vldr	s14, [r3, #128]	; 0x80
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	edd3 7a07 	vldr	s15, [r3, #28]
 800f4d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
			hCS->Iu = hCS->V_Iu * hCS->Init.Iu_Gain;
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	edd3 7a05 	vldr	s15, [r3, #20]
 800f4ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
			hCS->Iv = - hCS->Iw - hCS->Iu;
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 800f4fe:	eeb1 7a67 	vneg.f32	s14, s15
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800f508:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
			break;
 800f512:	e023      	b.n	800f55c <CurrentSensor_Refresh+0x264>
			hCS->Iu = hCS->V_Iu * hCS->Init.Iu_Gain;
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	ed93 7a1e 	vldr	s14, [r3, #120]	; 0x78
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	edd3 7a05 	vldr	s15, [r3, #20]
 800f520:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
			hCS->Iv = hCS->V_Iv * hCS->Init.Iv_Gain;
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	edd3 7a06 	vldr	s15, [r3, #24]
 800f536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
			hCS->Iw = - hCS->Iu - hCS->Iv;
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800f546:	eeb1 7a67 	vneg.f32	s14, s15
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 800f550:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
			break;
 800f55a:	bf00      	nop
		break; /* CS_Type_3shunt */
 800f55c:	bf00      	nop
	}




}
 800f55e:	bf00      	nop
 800f560:	3708      	adds	r7, #8
 800f562:	46bd      	mov	sp, r7
 800f564:	bd80      	pop	{r7, pc}
 800f566:	bf00      	nop
 800f568:	20000234 	.word	0x20000234
 800f56c:	20000238 	.word	0x20000238
 800f570:	2000023c 	.word	0x2000023c
 800f574:	20000240 	.word	0x20000240
 800f578:	00001000 	.word	0x00001000
 800f57c:	40533333 	.word	0x40533333

0800f580 <CurrentSensor_getIdq>:

/*
 * 回転座標系における電流を算出
 */
inline void CurrentSensor_getIdq(CurrentSensor_TypeDef *hCS, float *Id, float *Iq, float cos_theta_re, float sin_theta_re)
{
 800f580:	b480      	push	{r7}
 800f582:	b087      	sub	sp, #28
 800f584:	af00      	add	r7, sp, #0
 800f586:	6178      	str	r0, [r7, #20]
 800f588:	6139      	str	r1, [r7, #16]
 800f58a:	60fa      	str	r2, [r7, #12]
 800f58c:	ed87 0a02 	vstr	s0, [r7, #8]
 800f590:	edc7 0a01 	vstr	s1, [r7, #4]

	*Id = 0.8165f * (
			+ hCS->Iu * cos_theta_re
 800f594:	697b      	ldr	r3, [r7, #20]
 800f596:	ed93 7a21 	vldr	s14, [r3, #132]	; 0x84
 800f59a:	edd7 7a02 	vldr	s15, [r7, #8]
 800f59e:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ hCS->Iv * (-0.5f * cos_theta_re + 0.855f * sin_theta_re)
 800f5a2:	697b      	ldr	r3, [r7, #20]
 800f5a4:	edd3 6a22 	vldr	s13, [r3, #136]	; 0x88
 800f5a8:	edd7 7a02 	vldr	s15, [r7, #8]
 800f5ac:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
 800f5b0:	ee27 6a86 	vmul.f32	s12, s15, s12
 800f5b4:	edd7 7a01 	vldr	s15, [r7, #4]
 800f5b8:	eddf 5a32 	vldr	s11, [pc, #200]	; 800f684 <CurrentSensor_getIdq+0x104>
 800f5bc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f5c0:	ee76 7a27 	vadd.f32	s15, s12, s15
 800f5c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f5c8:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ hCS->Iw * (-0.5f * cos_theta_re - 0.855f * sin_theta_re));
 800f5cc:	697b      	ldr	r3, [r7, #20]
 800f5ce:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
 800f5d2:	edd7 7a02 	vldr	s15, [r7, #8]
 800f5d6:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
 800f5da:	ee27 6a86 	vmul.f32	s12, s15, s12
 800f5de:	edd7 7a01 	vldr	s15, [r7, #4]
 800f5e2:	eddf 5a28 	vldr	s11, [pc, #160]	; 800f684 <CurrentSensor_getIdq+0x104>
 800f5e6:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f5ea:	ee76 7a67 	vsub.f32	s15, s12, s15
 800f5ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f5f2:	ee77 7a27 	vadd.f32	s15, s14, s15
	*Id = 0.8165f * (
 800f5f6:	ed9f 7a24 	vldr	s14, [pc, #144]	; 800f688 <CurrentSensor_getIdq+0x108>
 800f5fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f5fe:	693b      	ldr	r3, [r7, #16]
 800f600:	edc3 7a00 	vstr	s15, [r3]

	*Iq = 0.8165f * (
			- hCS->Iu * sin_theta_re
 800f604:	697b      	ldr	r3, [r7, #20]
 800f606:	edd3 7a21 	vldr	s15, [r3, #132]	; 0x84
 800f60a:	eeb1 7a67 	vneg.f32	s14, s15
 800f60e:	edd7 7a01 	vldr	s15, [r7, #4]
 800f612:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ hCS->Iv * (0.5f * sin_theta_re + 0.855f * cos_theta_re)
 800f616:	697b      	ldr	r3, [r7, #20]
 800f618:	edd3 6a22 	vldr	s13, [r3, #136]	; 0x88
 800f61c:	edd7 7a01 	vldr	s15, [r7, #4]
 800f620:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800f624:	ee27 6a86 	vmul.f32	s12, s15, s12
 800f628:	edd7 7a02 	vldr	s15, [r7, #8]
 800f62c:	eddf 5a15 	vldr	s11, [pc, #84]	; 800f684 <CurrentSensor_getIdq+0x104>
 800f630:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f634:	ee76 7a27 	vadd.f32	s15, s12, s15
 800f638:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f63c:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ hCS->Iw * (0.5f * sin_theta_re - 0.855f * cos_theta_re));
 800f640:	697b      	ldr	r3, [r7, #20]
 800f642:	edd3 6a23 	vldr	s13, [r3, #140]	; 0x8c
 800f646:	edd7 7a01 	vldr	s15, [r7, #4]
 800f64a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800f64e:	ee27 6a86 	vmul.f32	s12, s15, s12
 800f652:	edd7 7a02 	vldr	s15, [r7, #8]
 800f656:	eddf 5a0b 	vldr	s11, [pc, #44]	; 800f684 <CurrentSensor_getIdq+0x104>
 800f65a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800f65e:	ee76 7a67 	vsub.f32	s15, s12, s15
 800f662:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f666:	ee77 7a27 	vadd.f32	s15, s14, s15
	*Iq = 0.8165f * (
 800f66a:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800f688 <CurrentSensor_getIdq+0x108>
 800f66e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	edc3 7a00 	vstr	s15, [r3]

}
 800f678:	bf00      	nop
 800f67a:	371c      	adds	r7, #28
 800f67c:	46bd      	mov	sp, r7
 800f67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f682:	4770      	bx	lr
 800f684:	3f5ae148 	.word	0x3f5ae148
 800f688:	3f510625 	.word	0x3f510625

0800f68c <median5>:
	return 0;
}


inline int32_t median5(int32_t *buf)
{
 800f68c:	b480      	push	{r7}
 800f68e:	b083      	sub	sp, #12
 800f690:	af00      	add	r7, sp, #0
 800f692:	6078      	str	r0, [r7, #4]
	static uint32_t winCount[5] = {0};

	winCount[0] = 0;
 800f694:	4b76      	ldr	r3, [pc, #472]	; (800f870 <median5+0x1e4>)
 800f696:	2200      	movs	r2, #0
 800f698:	601a      	str	r2, [r3, #0]
	winCount[1] = 0;
 800f69a:	4b75      	ldr	r3, [pc, #468]	; (800f870 <median5+0x1e4>)
 800f69c:	2200      	movs	r2, #0
 800f69e:	605a      	str	r2, [r3, #4]
	winCount[2] = 0;
 800f6a0:	4b73      	ldr	r3, [pc, #460]	; (800f870 <median5+0x1e4>)
 800f6a2:	2200      	movs	r2, #0
 800f6a4:	609a      	str	r2, [r3, #8]
	winCount[3] = 0;
 800f6a6:	4b72      	ldr	r3, [pc, #456]	; (800f870 <median5+0x1e4>)
 800f6a8:	2200      	movs	r2, #0
 800f6aa:	60da      	str	r2, [r3, #12]
	winCount[4] = 0;
 800f6ac:	4b70      	ldr	r3, [pc, #448]	; (800f870 <median5+0x1e4>)
 800f6ae:	2200      	movs	r2, #0
 800f6b0:	611a      	str	r2, [r3, #16]

	if (buf[0] > buf[1]) winCount[0]++; else winCount[1]++;
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	681a      	ldr	r2, [r3, #0]
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	3304      	adds	r3, #4
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	429a      	cmp	r2, r3
 800f6be:	dd05      	ble.n	800f6cc <median5+0x40>
 800f6c0:	4b6b      	ldr	r3, [pc, #428]	; (800f870 <median5+0x1e4>)
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	3301      	adds	r3, #1
 800f6c6:	4a6a      	ldr	r2, [pc, #424]	; (800f870 <median5+0x1e4>)
 800f6c8:	6013      	str	r3, [r2, #0]
 800f6ca:	e004      	b.n	800f6d6 <median5+0x4a>
 800f6cc:	4b68      	ldr	r3, [pc, #416]	; (800f870 <median5+0x1e4>)
 800f6ce:	685b      	ldr	r3, [r3, #4]
 800f6d0:	3301      	adds	r3, #1
 800f6d2:	4a67      	ldr	r2, [pc, #412]	; (800f870 <median5+0x1e4>)
 800f6d4:	6053      	str	r3, [r2, #4]
	if (buf[0] > buf[2]) winCount[0]++; else winCount[2]++;
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	681a      	ldr	r2, [r3, #0]
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	3308      	adds	r3, #8
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	429a      	cmp	r2, r3
 800f6e2:	dd05      	ble.n	800f6f0 <median5+0x64>
 800f6e4:	4b62      	ldr	r3, [pc, #392]	; (800f870 <median5+0x1e4>)
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	3301      	adds	r3, #1
 800f6ea:	4a61      	ldr	r2, [pc, #388]	; (800f870 <median5+0x1e4>)
 800f6ec:	6013      	str	r3, [r2, #0]
 800f6ee:	e004      	b.n	800f6fa <median5+0x6e>
 800f6f0:	4b5f      	ldr	r3, [pc, #380]	; (800f870 <median5+0x1e4>)
 800f6f2:	689b      	ldr	r3, [r3, #8]
 800f6f4:	3301      	adds	r3, #1
 800f6f6:	4a5e      	ldr	r2, [pc, #376]	; (800f870 <median5+0x1e4>)
 800f6f8:	6093      	str	r3, [r2, #8]
	if (buf[0] > buf[3]) winCount[0]++; else winCount[3]++;
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	681a      	ldr	r2, [r3, #0]
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	330c      	adds	r3, #12
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	429a      	cmp	r2, r3
 800f706:	dd05      	ble.n	800f714 <median5+0x88>
 800f708:	4b59      	ldr	r3, [pc, #356]	; (800f870 <median5+0x1e4>)
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	3301      	adds	r3, #1
 800f70e:	4a58      	ldr	r2, [pc, #352]	; (800f870 <median5+0x1e4>)
 800f710:	6013      	str	r3, [r2, #0]
 800f712:	e004      	b.n	800f71e <median5+0x92>
 800f714:	4b56      	ldr	r3, [pc, #344]	; (800f870 <median5+0x1e4>)
 800f716:	68db      	ldr	r3, [r3, #12]
 800f718:	3301      	adds	r3, #1
 800f71a:	4a55      	ldr	r2, [pc, #340]	; (800f870 <median5+0x1e4>)
 800f71c:	60d3      	str	r3, [r2, #12]
	if (buf[0] > buf[4]) winCount[0]++; else winCount[4]++;
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	681a      	ldr	r2, [r3, #0]
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	3310      	adds	r3, #16
 800f726:	681b      	ldr	r3, [r3, #0]
 800f728:	429a      	cmp	r2, r3
 800f72a:	dd05      	ble.n	800f738 <median5+0xac>
 800f72c:	4b50      	ldr	r3, [pc, #320]	; (800f870 <median5+0x1e4>)
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	3301      	adds	r3, #1
 800f732:	4a4f      	ldr	r2, [pc, #316]	; (800f870 <median5+0x1e4>)
 800f734:	6013      	str	r3, [r2, #0]
 800f736:	e004      	b.n	800f742 <median5+0xb6>
 800f738:	4b4d      	ldr	r3, [pc, #308]	; (800f870 <median5+0x1e4>)
 800f73a:	691b      	ldr	r3, [r3, #16]
 800f73c:	3301      	adds	r3, #1
 800f73e:	4a4c      	ldr	r2, [pc, #304]	; (800f870 <median5+0x1e4>)
 800f740:	6113      	str	r3, [r2, #16]

	if (winCount[0] == 2) return buf[0];
 800f742:	4b4b      	ldr	r3, [pc, #300]	; (800f870 <median5+0x1e4>)
 800f744:	681b      	ldr	r3, [r3, #0]
 800f746:	2b02      	cmp	r3, #2
 800f748:	d102      	bne.n	800f750 <median5+0xc4>
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	e088      	b.n	800f862 <median5+0x1d6>

	if (buf[1] > buf[2]) winCount[1]++; else winCount[2]++;
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	3304      	adds	r3, #4
 800f754:	681a      	ldr	r2, [r3, #0]
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	3308      	adds	r3, #8
 800f75a:	681b      	ldr	r3, [r3, #0]
 800f75c:	429a      	cmp	r2, r3
 800f75e:	dd05      	ble.n	800f76c <median5+0xe0>
 800f760:	4b43      	ldr	r3, [pc, #268]	; (800f870 <median5+0x1e4>)
 800f762:	685b      	ldr	r3, [r3, #4]
 800f764:	3301      	adds	r3, #1
 800f766:	4a42      	ldr	r2, [pc, #264]	; (800f870 <median5+0x1e4>)
 800f768:	6053      	str	r3, [r2, #4]
 800f76a:	e004      	b.n	800f776 <median5+0xea>
 800f76c:	4b40      	ldr	r3, [pc, #256]	; (800f870 <median5+0x1e4>)
 800f76e:	689b      	ldr	r3, [r3, #8]
 800f770:	3301      	adds	r3, #1
 800f772:	4a3f      	ldr	r2, [pc, #252]	; (800f870 <median5+0x1e4>)
 800f774:	6093      	str	r3, [r2, #8]
	if (buf[1] > buf[3]) winCount[1]++; else winCount[3]++;
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	3304      	adds	r3, #4
 800f77a:	681a      	ldr	r2, [r3, #0]
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	330c      	adds	r3, #12
 800f780:	681b      	ldr	r3, [r3, #0]
 800f782:	429a      	cmp	r2, r3
 800f784:	dd05      	ble.n	800f792 <median5+0x106>
 800f786:	4b3a      	ldr	r3, [pc, #232]	; (800f870 <median5+0x1e4>)
 800f788:	685b      	ldr	r3, [r3, #4]
 800f78a:	3301      	adds	r3, #1
 800f78c:	4a38      	ldr	r2, [pc, #224]	; (800f870 <median5+0x1e4>)
 800f78e:	6053      	str	r3, [r2, #4]
 800f790:	e004      	b.n	800f79c <median5+0x110>
 800f792:	4b37      	ldr	r3, [pc, #220]	; (800f870 <median5+0x1e4>)
 800f794:	68db      	ldr	r3, [r3, #12]
 800f796:	3301      	adds	r3, #1
 800f798:	4a35      	ldr	r2, [pc, #212]	; (800f870 <median5+0x1e4>)
 800f79a:	60d3      	str	r3, [r2, #12]
	if (buf[1] > buf[4]) winCount[1]++; else winCount[4]++;
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	3304      	adds	r3, #4
 800f7a0:	681a      	ldr	r2, [r3, #0]
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	3310      	adds	r3, #16
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	429a      	cmp	r2, r3
 800f7aa:	dd05      	ble.n	800f7b8 <median5+0x12c>
 800f7ac:	4b30      	ldr	r3, [pc, #192]	; (800f870 <median5+0x1e4>)
 800f7ae:	685b      	ldr	r3, [r3, #4]
 800f7b0:	3301      	adds	r3, #1
 800f7b2:	4a2f      	ldr	r2, [pc, #188]	; (800f870 <median5+0x1e4>)
 800f7b4:	6053      	str	r3, [r2, #4]
 800f7b6:	e004      	b.n	800f7c2 <median5+0x136>
 800f7b8:	4b2d      	ldr	r3, [pc, #180]	; (800f870 <median5+0x1e4>)
 800f7ba:	691b      	ldr	r3, [r3, #16]
 800f7bc:	3301      	adds	r3, #1
 800f7be:	4a2c      	ldr	r2, [pc, #176]	; (800f870 <median5+0x1e4>)
 800f7c0:	6113      	str	r3, [r2, #16]

	if (winCount[1] == 2) return buf[1];
 800f7c2:	4b2b      	ldr	r3, [pc, #172]	; (800f870 <median5+0x1e4>)
 800f7c4:	685b      	ldr	r3, [r3, #4]
 800f7c6:	2b02      	cmp	r3, #2
 800f7c8:	d102      	bne.n	800f7d0 <median5+0x144>
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	685b      	ldr	r3, [r3, #4]
 800f7ce:	e048      	b.n	800f862 <median5+0x1d6>

	if (buf[2] > buf[3]) winCount[2]++; else winCount[3]++;
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	3308      	adds	r3, #8
 800f7d4:	681a      	ldr	r2, [r3, #0]
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	330c      	adds	r3, #12
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	429a      	cmp	r2, r3
 800f7de:	dd05      	ble.n	800f7ec <median5+0x160>
 800f7e0:	4b23      	ldr	r3, [pc, #140]	; (800f870 <median5+0x1e4>)
 800f7e2:	689b      	ldr	r3, [r3, #8]
 800f7e4:	3301      	adds	r3, #1
 800f7e6:	4a22      	ldr	r2, [pc, #136]	; (800f870 <median5+0x1e4>)
 800f7e8:	6093      	str	r3, [r2, #8]
 800f7ea:	e004      	b.n	800f7f6 <median5+0x16a>
 800f7ec:	4b20      	ldr	r3, [pc, #128]	; (800f870 <median5+0x1e4>)
 800f7ee:	68db      	ldr	r3, [r3, #12]
 800f7f0:	3301      	adds	r3, #1
 800f7f2:	4a1f      	ldr	r2, [pc, #124]	; (800f870 <median5+0x1e4>)
 800f7f4:	60d3      	str	r3, [r2, #12]
	if (buf[2] > buf[4]) winCount[2]++; else winCount[4]++;
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	3308      	adds	r3, #8
 800f7fa:	681a      	ldr	r2, [r3, #0]
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	3310      	adds	r3, #16
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	429a      	cmp	r2, r3
 800f804:	dd05      	ble.n	800f812 <median5+0x186>
 800f806:	4b1a      	ldr	r3, [pc, #104]	; (800f870 <median5+0x1e4>)
 800f808:	689b      	ldr	r3, [r3, #8]
 800f80a:	3301      	adds	r3, #1
 800f80c:	4a18      	ldr	r2, [pc, #96]	; (800f870 <median5+0x1e4>)
 800f80e:	6093      	str	r3, [r2, #8]
 800f810:	e004      	b.n	800f81c <median5+0x190>
 800f812:	4b17      	ldr	r3, [pc, #92]	; (800f870 <median5+0x1e4>)
 800f814:	691b      	ldr	r3, [r3, #16]
 800f816:	3301      	adds	r3, #1
 800f818:	4a15      	ldr	r2, [pc, #84]	; (800f870 <median5+0x1e4>)
 800f81a:	6113      	str	r3, [r2, #16]

	if (winCount[2] == 2) return buf[2];
 800f81c:	4b14      	ldr	r3, [pc, #80]	; (800f870 <median5+0x1e4>)
 800f81e:	689b      	ldr	r3, [r3, #8]
 800f820:	2b02      	cmp	r3, #2
 800f822:	d102      	bne.n	800f82a <median5+0x19e>
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	689b      	ldr	r3, [r3, #8]
 800f828:	e01b      	b.n	800f862 <median5+0x1d6>

	if (buf[3] > buf[4]) winCount[3]++; else winCount[4]++;
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	330c      	adds	r3, #12
 800f82e:	681a      	ldr	r2, [r3, #0]
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	3310      	adds	r3, #16
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	429a      	cmp	r2, r3
 800f838:	dd05      	ble.n	800f846 <median5+0x1ba>
 800f83a:	4b0d      	ldr	r3, [pc, #52]	; (800f870 <median5+0x1e4>)
 800f83c:	68db      	ldr	r3, [r3, #12]
 800f83e:	3301      	adds	r3, #1
 800f840:	4a0b      	ldr	r2, [pc, #44]	; (800f870 <median5+0x1e4>)
 800f842:	60d3      	str	r3, [r2, #12]
 800f844:	e004      	b.n	800f850 <median5+0x1c4>
 800f846:	4b0a      	ldr	r3, [pc, #40]	; (800f870 <median5+0x1e4>)
 800f848:	691b      	ldr	r3, [r3, #16]
 800f84a:	3301      	adds	r3, #1
 800f84c:	4a08      	ldr	r2, [pc, #32]	; (800f870 <median5+0x1e4>)
 800f84e:	6113      	str	r3, [r2, #16]

	if (winCount[3] == 2) return buf[3];
 800f850:	4b07      	ldr	r3, [pc, #28]	; (800f870 <median5+0x1e4>)
 800f852:	68db      	ldr	r3, [r3, #12]
 800f854:	2b02      	cmp	r3, #2
 800f856:	d102      	bne.n	800f85e <median5+0x1d2>
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	68db      	ldr	r3, [r3, #12]
 800f85c:	e001      	b.n	800f862 <median5+0x1d6>

	return buf[4];
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	691b      	ldr	r3, [r3, #16]

}
 800f862:	4618      	mov	r0, r3
 800f864:	370c      	adds	r7, #12
 800f866:	46bd      	mov	sp, r7
 800f868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f86c:	4770      	bx	lr
 800f86e:	bf00      	nop
 800f870:	20000244 	.word	0x20000244

0800f874 <DRV_Init>:
DRV_TypeDef drv8323;



void DRV_Init()
{
 800f874:	b480      	push	{r7}
 800f876:	af00      	add	r7, sp, #0

	drv8323.NSS_GPIOx = SPI3_NSS_GPIO_Port;
 800f878:	4b07      	ldr	r3, [pc, #28]	; (800f898 <DRV_Init+0x24>)
 800f87a:	4a08      	ldr	r2, [pc, #32]	; (800f89c <DRV_Init+0x28>)
 800f87c:	621a      	str	r2, [r3, #32]
	drv8323.NSS_GPIO_Pin = SPI3_NSS_Pin;
 800f87e:	4b06      	ldr	r3, [pc, #24]	; (800f898 <DRV_Init+0x24>)
 800f880:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800f884:	849a      	strh	r2, [r3, #36]	; 0x24
	drv8323.hspi = &hspi3;
 800f886:	4b04      	ldr	r3, [pc, #16]	; (800f898 <DRV_Init+0x24>)
 800f888:	4a05      	ldr	r2, [pc, #20]	; (800f8a0 <DRV_Init+0x2c>)
 800f88a:	61da      	str	r2, [r3, #28]



}
 800f88c:	bf00      	nop
 800f88e:	46bd      	mov	sp, r7
 800f890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f894:	4770      	bx	lr
 800f896:	bf00      	nop
 800f898:	20004490 	.word	0x20004490
 800f89c:	40020000 	.word	0x40020000
 800f8a0:	200047cc 	.word	0x200047cc

0800f8a4 <DRV_WriteData>:


void DRV_WriteData(DRV_TypeDef *hdrv, regAddr_t addr)
{
 800f8a4:	b580      	push	{r7, lr}
 800f8a6:	b084      	sub	sp, #16
 800f8a8:	af02      	add	r7, sp, #8
 800f8aa:	6078      	str	r0, [r7, #4]
 800f8ac:	460b      	mov	r3, r1
 800f8ae:	70fb      	strb	r3, [r7, #3]

	// MSB
	hdrv->txBuf[0] = (addr << 3) | (hdrv->Reg.words[addr] >> 8);
 800f8b0:	78fb      	ldrb	r3, [r7, #3]
 800f8b2:	00db      	lsls	r3, r3, #3
 800f8b4:	b2da      	uxtb	r2, r3
 800f8b6:	78f9      	ldrb	r1, [r7, #3]
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f8be:	0a1b      	lsrs	r3, r3, #8
 800f8c0:	b2db      	uxtb	r3, r3
 800f8c2:	4313      	orrs	r3, r2
 800f8c4:	b2da      	uxtb	r2, r3
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	// LSB
	hdrv->txBuf[1] = hdrv->Reg.words[addr] & 0xff;
 800f8cc:	78fa      	ldrb	r2, [r7, #3]
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8d4:	b2da      	uxtb	r2, r3
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	HAL_GPIO_WritePin(hdrv->NSS_GPIOx, hdrv->NSS_GPIO_Pin, GPIO_PIN_RESET);
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	6a18      	ldr	r0, [r3, #32]
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f8e4:	2200      	movs	r2, #0
 800f8e6:	4619      	mov	r1, r3
 800f8e8:	f7fb fd9a 	bl	800b420 <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(hdrv->hspi, hdrv->txBuf, hdrv->rxBuf, 2, 1);
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	69d8      	ldr	r0, [r3, #28]
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800f8fc:	2301      	movs	r3, #1
 800f8fe:	9300      	str	r3, [sp, #0]
 800f900:	2302      	movs	r3, #2
 800f902:	f7fc fb1b 	bl	800bf3c <HAL_SPI_TransmitReceive>

	HAL_GPIO_WritePin(hdrv->NSS_GPIOx, hdrv->NSS_GPIO_Pin, GPIO_PIN_SET);
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	6a18      	ldr	r0, [r3, #32]
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f90e:	2201      	movs	r2, #1
 800f910:	4619      	mov	r1, r3
 800f912:	f7fb fd85 	bl	800b420 <HAL_GPIO_WritePin>

}
 800f916:	bf00      	nop
 800f918:	3708      	adds	r7, #8
 800f91a:	46bd      	mov	sp, r7
 800f91c:	bd80      	pop	{r7, pc}

0800f91e <DRV_ReadData>:



void DRV_ReadData(DRV_TypeDef *hdrv, regAddr_t addr)
{
 800f91e:	b580      	push	{r7, lr}
 800f920:	b084      	sub	sp, #16
 800f922:	af02      	add	r7, sp, #8
 800f924:	6078      	str	r0, [r7, #4]
 800f926:	460b      	mov	r3, r1
 800f928:	70fb      	strb	r3, [r7, #3]

	// MSB
	hdrv->txBuf[0] = 0x80 | (addr << 3);
 800f92a:	78fb      	ldrb	r3, [r7, #3]
 800f92c:	00db      	lsls	r3, r3, #3
 800f92e:	b25b      	sxtb	r3, r3
 800f930:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f934:	b25b      	sxtb	r3, r3
 800f936:	b2da      	uxtb	r2, r3
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	// LSB
	hdrv->txBuf[1] = 0x00;
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	2200      	movs	r2, #0
 800f942:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	HAL_GPIO_WritePin(hdrv->NSS_GPIOx, hdrv->NSS_GPIO_Pin, GPIO_PIN_RESET);
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	6a18      	ldr	r0, [r3, #32]
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f94e:	2200      	movs	r2, #0
 800f950:	4619      	mov	r1, r3
 800f952:	f7fb fd65 	bl	800b420 <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive(hdrv->hspi, hdrv->txBuf, hdrv->rxBuf, 2, 1);
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	69d8      	ldr	r0, [r3, #28]
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	f103 0126 	add.w	r1, r3, #38	; 0x26
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800f966:	2301      	movs	r3, #1
 800f968:	9300      	str	r3, [sp, #0]
 800f96a:	2302      	movs	r3, #2
 800f96c:	f7fc fae6 	bl	800bf3c <HAL_SPI_TransmitReceive>

	HAL_GPIO_WritePin(hdrv->NSS_GPIOx, hdrv->NSS_GPIO_Pin, GPIO_PIN_SET);
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	6a18      	ldr	r0, [r3, #32]
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f978:	2201      	movs	r2, #1
 800f97a:	4619      	mov	r1, r3
 800f97c:	f7fb fd50 	bl	800b420 <HAL_GPIO_WritePin>

	hdrv->Reg.words[addr] = (hdrv->rxBuf[0] << 8) | hdrv->rxBuf[1];
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f986:	021b      	lsls	r3, r3, #8
 800f988:	687a      	ldr	r2, [r7, #4]
 800f98a:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 800f98e:	4313      	orrs	r3, r2
 800f990:	78fa      	ldrb	r2, [r7, #3]
 800f992:	4619      	mov	r1, r3
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

}
 800f99a:	bf00      	nop
 800f99c:	3708      	adds	r7, #8
 800f99e:	46bd      	mov	sp, r7
 800f9a0:	bd80      	pop	{r7, pc}
	...

0800f9a4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc2;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800f9a4:	b580      	push	{r7, lr}
 800f9a6:	b084      	sub	sp, #16
 800f9a8:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800f9aa:	463b      	mov	r3, r7
 800f9ac:	2200      	movs	r2, #0
 800f9ae:	601a      	str	r2, [r3, #0]
 800f9b0:	605a      	str	r2, [r3, #4]
 800f9b2:	609a      	str	r2, [r3, #8]
 800f9b4:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800f9b6:	4b22      	ldr	r3, [pc, #136]	; (800fa40 <MX_ADC1_Init+0x9c>)
 800f9b8:	4a22      	ldr	r2, [pc, #136]	; (800fa44 <MX_ADC1_Init+0xa0>)
 800f9ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800f9bc:	4b20      	ldr	r3, [pc, #128]	; (800fa40 <MX_ADC1_Init+0x9c>)
 800f9be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800f9c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800f9c4:	4b1e      	ldr	r3, [pc, #120]	; (800fa40 <MX_ADC1_Init+0x9c>)
 800f9c6:	2200      	movs	r2, #0
 800f9c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800f9ca:	4b1d      	ldr	r3, [pc, #116]	; (800fa40 <MX_ADC1_Init+0x9c>)
 800f9cc:	2200      	movs	r2, #0
 800f9ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800f9d0:	4b1b      	ldr	r3, [pc, #108]	; (800fa40 <MX_ADC1_Init+0x9c>)
 800f9d2:	2200      	movs	r2, #0
 800f9d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800f9d6:	4b1a      	ldr	r3, [pc, #104]	; (800fa40 <MX_ADC1_Init+0x9c>)
 800f9d8:	2200      	movs	r2, #0
 800f9da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 800f9de:	4b18      	ldr	r3, [pc, #96]	; (800fa40 <MX_ADC1_Init+0x9c>)
 800f9e0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800f9e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 800f9e6:	4b16      	ldr	r3, [pc, #88]	; (800fa40 <MX_ADC1_Init+0x9c>)
 800f9e8:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800f9ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800f9ee:	4b14      	ldr	r3, [pc, #80]	; (800fa40 <MX_ADC1_Init+0x9c>)
 800f9f0:	2200      	movs	r2, #0
 800f9f2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800f9f4:	4b12      	ldr	r3, [pc, #72]	; (800fa40 <MX_ADC1_Init+0x9c>)
 800f9f6:	2201      	movs	r2, #1
 800f9f8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800f9fa:	4b11      	ldr	r3, [pc, #68]	; (800fa40 <MX_ADC1_Init+0x9c>)
 800f9fc:	2201      	movs	r2, #1
 800f9fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800fa02:	4b0f      	ldr	r3, [pc, #60]	; (800fa40 <MX_ADC1_Init+0x9c>)
 800fa04:	2201      	movs	r2, #1
 800fa06:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800fa08:	480d      	ldr	r0, [pc, #52]	; (800fa40 <MX_ADC1_Init+0x9c>)
 800fa0a:	f7f9 fa69 	bl	8008ee0 <HAL_ADC_Init>
 800fa0e:	4603      	mov	r3, r0
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d001      	beq.n	800fa18 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800fa14:	f001 fbea 	bl	80111ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800fa18:	2300      	movs	r3, #0
 800fa1a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800fa1c:	2301      	movs	r3, #1
 800fa1e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800fa20:	2301      	movs	r3, #1
 800fa22:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800fa24:	463b      	mov	r3, r7
 800fa26:	4619      	mov	r1, r3
 800fa28:	4805      	ldr	r0, [pc, #20]	; (800fa40 <MX_ADC1_Init+0x9c>)
 800fa2a:	f7f9 fbad 	bl	8009188 <HAL_ADC_ConfigChannel>
 800fa2e:	4603      	mov	r3, r0
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d001      	beq.n	800fa38 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800fa34:	f001 fbda 	bl	80111ec <Error_Handler>
  }

}
 800fa38:	bf00      	nop
 800fa3a:	3710      	adds	r7, #16
 800fa3c:	46bd      	mov	sp, r7
 800fa3e:	bd80      	pop	{r7, pc}
 800fa40:	20004564 	.word	0x20004564
 800fa44:	40012000 	.word	0x40012000

0800fa48 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 800fa48:	b580      	push	{r7, lr}
 800fa4a:	b084      	sub	sp, #16
 800fa4c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800fa4e:	463b      	mov	r3, r7
 800fa50:	2200      	movs	r2, #0
 800fa52:	601a      	str	r2, [r3, #0]
 800fa54:	605a      	str	r2, [r3, #4]
 800fa56:	609a      	str	r2, [r3, #8]
 800fa58:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 800fa5a:	4b22      	ldr	r3, [pc, #136]	; (800fae4 <MX_ADC2_Init+0x9c>)
 800fa5c:	4a22      	ldr	r2, [pc, #136]	; (800fae8 <MX_ADC2_Init+0xa0>)
 800fa5e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800fa60:	4b20      	ldr	r3, [pc, #128]	; (800fae4 <MX_ADC2_Init+0x9c>)
 800fa62:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800fa66:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800fa68:	4b1e      	ldr	r3, [pc, #120]	; (800fae4 <MX_ADC2_Init+0x9c>)
 800fa6a:	2200      	movs	r2, #0
 800fa6c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800fa6e:	4b1d      	ldr	r3, [pc, #116]	; (800fae4 <MX_ADC2_Init+0x9c>)
 800fa70:	2200      	movs	r2, #0
 800fa72:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800fa74:	4b1b      	ldr	r3, [pc, #108]	; (800fae4 <MX_ADC2_Init+0x9c>)
 800fa76:	2200      	movs	r2, #0
 800fa78:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800fa7a:	4b1a      	ldr	r3, [pc, #104]	; (800fae4 <MX_ADC2_Init+0x9c>)
 800fa7c:	2200      	movs	r2, #0
 800fa7e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 800fa82:	4b18      	ldr	r3, [pc, #96]	; (800fae4 <MX_ADC2_Init+0x9c>)
 800fa84:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800fa88:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 800fa8a:	4b16      	ldr	r3, [pc, #88]	; (800fae4 <MX_ADC2_Init+0x9c>)
 800fa8c:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800fa90:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800fa92:	4b14      	ldr	r3, [pc, #80]	; (800fae4 <MX_ADC2_Init+0x9c>)
 800fa94:	2200      	movs	r2, #0
 800fa96:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800fa98:	4b12      	ldr	r3, [pc, #72]	; (800fae4 <MX_ADC2_Init+0x9c>)
 800fa9a:	2201      	movs	r2, #1
 800fa9c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800fa9e:	4b11      	ldr	r3, [pc, #68]	; (800fae4 <MX_ADC2_Init+0x9c>)
 800faa0:	2201      	movs	r2, #1
 800faa2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800faa6:	4b0f      	ldr	r3, [pc, #60]	; (800fae4 <MX_ADC2_Init+0x9c>)
 800faa8:	2201      	movs	r2, #1
 800faaa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800faac:	480d      	ldr	r0, [pc, #52]	; (800fae4 <MX_ADC2_Init+0x9c>)
 800faae:	f7f9 fa17 	bl	8008ee0 <HAL_ADC_Init>
 800fab2:	4603      	mov	r3, r0
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d001      	beq.n	800fabc <MX_ADC2_Init+0x74>
  {
    Error_Handler();
 800fab8:	f001 fb98 	bl	80111ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800fabc:	2304      	movs	r3, #4
 800fabe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800fac0:	2301      	movs	r3, #1
 800fac2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800fac4:	2301      	movs	r3, #1
 800fac6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800fac8:	463b      	mov	r3, r7
 800faca:	4619      	mov	r1, r3
 800facc:	4805      	ldr	r0, [pc, #20]	; (800fae4 <MX_ADC2_Init+0x9c>)
 800face:	f7f9 fb5b 	bl	8009188 <HAL_ADC_ConfigChannel>
 800fad2:	4603      	mov	r3, r0
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d001      	beq.n	800fadc <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 800fad8:	f001 fb88 	bl	80111ec <Error_Handler>
  }

}
 800fadc:	bf00      	nop
 800fade:	3710      	adds	r7, #16
 800fae0:	46bd      	mov	sp, r7
 800fae2:	bd80      	pop	{r7, pc}
 800fae4:	200044bc 	.word	0x200044bc
 800fae8:	40012100 	.word	0x40012100

0800faec <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800faec:	b580      	push	{r7, lr}
 800faee:	b084      	sub	sp, #16
 800faf0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800faf2:	463b      	mov	r3, r7
 800faf4:	2200      	movs	r2, #0
 800faf6:	601a      	str	r2, [r3, #0]
 800faf8:	605a      	str	r2, [r3, #4]
 800fafa:	609a      	str	r2, [r3, #8]
 800fafc:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 800fafe:	4b22      	ldr	r3, [pc, #136]	; (800fb88 <MX_ADC3_Init+0x9c>)
 800fb00:	4a22      	ldr	r2, [pc, #136]	; (800fb8c <MX_ADC3_Init+0xa0>)
 800fb02:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 800fb04:	4b20      	ldr	r3, [pc, #128]	; (800fb88 <MX_ADC3_Init+0x9c>)
 800fb06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800fb0a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800fb0c:	4b1e      	ldr	r3, [pc, #120]	; (800fb88 <MX_ADC3_Init+0x9c>)
 800fb0e:	2200      	movs	r2, #0
 800fb10:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 800fb12:	4b1d      	ldr	r3, [pc, #116]	; (800fb88 <MX_ADC3_Init+0x9c>)
 800fb14:	2200      	movs	r2, #0
 800fb16:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800fb18:	4b1b      	ldr	r3, [pc, #108]	; (800fb88 <MX_ADC3_Init+0x9c>)
 800fb1a:	2200      	movs	r2, #0
 800fb1c:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800fb1e:	4b1a      	ldr	r3, [pc, #104]	; (800fb88 <MX_ADC3_Init+0x9c>)
 800fb20:	2200      	movs	r2, #0
 800fb22:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_FALLING;
 800fb26:	4b18      	ldr	r3, [pc, #96]	; (800fb88 <MX_ADC3_Init+0x9c>)
 800fb28:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800fb2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 800fb2e:	4b16      	ldr	r3, [pc, #88]	; (800fb88 <MX_ADC3_Init+0x9c>)
 800fb30:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800fb34:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800fb36:	4b14      	ldr	r3, [pc, #80]	; (800fb88 <MX_ADC3_Init+0x9c>)
 800fb38:	2200      	movs	r2, #0
 800fb3a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800fb3c:	4b12      	ldr	r3, [pc, #72]	; (800fb88 <MX_ADC3_Init+0x9c>)
 800fb3e:	2201      	movs	r2, #1
 800fb40:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800fb42:	4b11      	ldr	r3, [pc, #68]	; (800fb88 <MX_ADC3_Init+0x9c>)
 800fb44:	2201      	movs	r2, #1
 800fb46:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800fb4a:	4b0f      	ldr	r3, [pc, #60]	; (800fb88 <MX_ADC3_Init+0x9c>)
 800fb4c:	2201      	movs	r2, #1
 800fb4e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800fb50:	480d      	ldr	r0, [pc, #52]	; (800fb88 <MX_ADC3_Init+0x9c>)
 800fb52:	f7f9 f9c5 	bl	8008ee0 <HAL_ADC_Init>
 800fb56:	4603      	mov	r3, r0
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d001      	beq.n	800fb60 <MX_ADC3_Init+0x74>
  {
    Error_Handler();
 800fb5c:	f001 fb46 	bl	80111ec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800fb60:	2301      	movs	r3, #1
 800fb62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800fb64:	2301      	movs	r3, #1
 800fb66:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800fb68:	2301      	movs	r3, #1
 800fb6a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800fb6c:	463b      	mov	r3, r7
 800fb6e:	4619      	mov	r1, r3
 800fb70:	4805      	ldr	r0, [pc, #20]	; (800fb88 <MX_ADC3_Init+0x9c>)
 800fb72:	f7f9 fb09 	bl	8009188 <HAL_ADC_ConfigChannel>
 800fb76:	4603      	mov	r3, r0
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d001      	beq.n	800fb80 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 800fb7c:	f001 fb36 	bl	80111ec <Error_Handler>
  }

}
 800fb80:	bf00      	nop
 800fb82:	3710      	adds	r7, #16
 800fb84:	46bd      	mov	sp, r7
 800fb86:	bd80      	pop	{r7, pc}
 800fb88:	200045ac 	.word	0x200045ac
 800fb8c:	40012200 	.word	0x40012200

0800fb90 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b08e      	sub	sp, #56	; 0x38
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fb98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fb9c:	2200      	movs	r2, #0
 800fb9e:	601a      	str	r2, [r3, #0]
 800fba0:	605a      	str	r2, [r3, #4]
 800fba2:	609a      	str	r2, [r3, #8]
 800fba4:	60da      	str	r2, [r3, #12]
 800fba6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	4a9b      	ldr	r2, [pc, #620]	; (800fe1c <HAL_ADC_MspInit+0x28c>)
 800fbae:	4293      	cmp	r3, r2
 800fbb0:	d172      	bne.n	800fc98 <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	623b      	str	r3, [r7, #32]
 800fbb6:	4b9a      	ldr	r3, [pc, #616]	; (800fe20 <HAL_ADC_MspInit+0x290>)
 800fbb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fbba:	4a99      	ldr	r2, [pc, #612]	; (800fe20 <HAL_ADC_MspInit+0x290>)
 800fbbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fbc0:	6453      	str	r3, [r2, #68]	; 0x44
 800fbc2:	4b97      	ldr	r3, [pc, #604]	; (800fe20 <HAL_ADC_MspInit+0x290>)
 800fbc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fbc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fbca:	623b      	str	r3, [r7, #32]
 800fbcc:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800fbce:	2300      	movs	r3, #0
 800fbd0:	61fb      	str	r3, [r7, #28]
 800fbd2:	4b93      	ldr	r3, [pc, #588]	; (800fe20 <HAL_ADC_MspInit+0x290>)
 800fbd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbd6:	4a92      	ldr	r2, [pc, #584]	; (800fe20 <HAL_ADC_MspInit+0x290>)
 800fbd8:	f043 0304 	orr.w	r3, r3, #4
 800fbdc:	6313      	str	r3, [r2, #48]	; 0x30
 800fbde:	4b90      	ldr	r3, [pc, #576]	; (800fe20 <HAL_ADC_MspInit+0x290>)
 800fbe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbe2:	f003 0304 	and.w	r3, r3, #4
 800fbe6:	61fb      	str	r3, [r7, #28]
 800fbe8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fbea:	2300      	movs	r3, #0
 800fbec:	61bb      	str	r3, [r7, #24]
 800fbee:	4b8c      	ldr	r3, [pc, #560]	; (800fe20 <HAL_ADC_MspInit+0x290>)
 800fbf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbf2:	4a8b      	ldr	r2, [pc, #556]	; (800fe20 <HAL_ADC_MspInit+0x290>)
 800fbf4:	f043 0301 	orr.w	r3, r3, #1
 800fbf8:	6313      	str	r3, [r2, #48]	; 0x30
 800fbfa:	4b89      	ldr	r3, [pc, #548]	; (800fe20 <HAL_ADC_MspInit+0x290>)
 800fbfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fbfe:	f003 0301 	and.w	r3, r3, #1
 800fc02:	61bb      	str	r3, [r7, #24]
 800fc04:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN10
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800fc06:	2301      	movs	r3, #1
 800fc08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800fc0a:	2303      	movs	r3, #3
 800fc0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fc0e:	2300      	movs	r3, #0
 800fc10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800fc12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fc16:	4619      	mov	r1, r3
 800fc18:	4882      	ldr	r0, [pc, #520]	; (800fe24 <HAL_ADC_MspInit+0x294>)
 800fc1a:	f7fb fa57 	bl	800b0cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800fc1e:	2301      	movs	r3, #1
 800fc20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800fc22:	2303      	movs	r3, #3
 800fc24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fc26:	2300      	movs	r3, #0
 800fc28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fc2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fc2e:	4619      	mov	r1, r3
 800fc30:	487d      	ldr	r0, [pc, #500]	; (800fe28 <HAL_ADC_MspInit+0x298>)
 800fc32:	f7fb fa4b 	bl	800b0cc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800fc36:	4b7d      	ldr	r3, [pc, #500]	; (800fe2c <HAL_ADC_MspInit+0x29c>)
 800fc38:	4a7d      	ldr	r2, [pc, #500]	; (800fe30 <HAL_ADC_MspInit+0x2a0>)
 800fc3a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800fc3c:	4b7b      	ldr	r3, [pc, #492]	; (800fe2c <HAL_ADC_MspInit+0x29c>)
 800fc3e:	2200      	movs	r2, #0
 800fc40:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800fc42:	4b7a      	ldr	r3, [pc, #488]	; (800fe2c <HAL_ADC_MspInit+0x29c>)
 800fc44:	2200      	movs	r2, #0
 800fc46:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800fc48:	4b78      	ldr	r3, [pc, #480]	; (800fe2c <HAL_ADC_MspInit+0x29c>)
 800fc4a:	2200      	movs	r2, #0
 800fc4c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800fc4e:	4b77      	ldr	r3, [pc, #476]	; (800fe2c <HAL_ADC_MspInit+0x29c>)
 800fc50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800fc54:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800fc56:	4b75      	ldr	r3, [pc, #468]	; (800fe2c <HAL_ADC_MspInit+0x29c>)
 800fc58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fc5c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800fc5e:	4b73      	ldr	r3, [pc, #460]	; (800fe2c <HAL_ADC_MspInit+0x29c>)
 800fc60:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800fc64:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800fc66:	4b71      	ldr	r3, [pc, #452]	; (800fe2c <HAL_ADC_MspInit+0x29c>)
 800fc68:	2200      	movs	r2, #0
 800fc6a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800fc6c:	4b6f      	ldr	r3, [pc, #444]	; (800fe2c <HAL_ADC_MspInit+0x29c>)
 800fc6e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800fc72:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800fc74:	4b6d      	ldr	r3, [pc, #436]	; (800fe2c <HAL_ADC_MspInit+0x29c>)
 800fc76:	2200      	movs	r2, #0
 800fc78:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800fc7a:	486c      	ldr	r0, [pc, #432]	; (800fe2c <HAL_ADC_MspInit+0x29c>)
 800fc7c:	f7fa fbaa 	bl	800a3d4 <HAL_DMA_Init>
 800fc80:	4603      	mov	r3, r0
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d001      	beq.n	800fc8a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800fc86:	f001 fab1 	bl	80111ec <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	4a67      	ldr	r2, [pc, #412]	; (800fe2c <HAL_ADC_MspInit+0x29c>)
 800fc8e:	639a      	str	r2, [r3, #56]	; 0x38
 800fc90:	4a66      	ldr	r2, [pc, #408]	; (800fe2c <HAL_ADC_MspInit+0x29c>)
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 800fc96:	e0bc      	b.n	800fe12 <HAL_ADC_MspInit+0x282>
  else if(adcHandle->Instance==ADC2)
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	4a65      	ldr	r2, [pc, #404]	; (800fe34 <HAL_ADC_MspInit+0x2a4>)
 800fc9e:	4293      	cmp	r3, r2
 800fca0:	d159      	bne.n	800fd56 <HAL_ADC_MspInit+0x1c6>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800fca2:	2300      	movs	r3, #0
 800fca4:	617b      	str	r3, [r7, #20]
 800fca6:	4b5e      	ldr	r3, [pc, #376]	; (800fe20 <HAL_ADC_MspInit+0x290>)
 800fca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fcaa:	4a5d      	ldr	r2, [pc, #372]	; (800fe20 <HAL_ADC_MspInit+0x290>)
 800fcac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800fcb0:	6453      	str	r3, [r2, #68]	; 0x44
 800fcb2:	4b5b      	ldr	r3, [pc, #364]	; (800fe20 <HAL_ADC_MspInit+0x290>)
 800fcb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fcb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800fcba:	617b      	str	r3, [r7, #20]
 800fcbc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	613b      	str	r3, [r7, #16]
 800fcc2:	4b57      	ldr	r3, [pc, #348]	; (800fe20 <HAL_ADC_MspInit+0x290>)
 800fcc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fcc6:	4a56      	ldr	r2, [pc, #344]	; (800fe20 <HAL_ADC_MspInit+0x290>)
 800fcc8:	f043 0301 	orr.w	r3, r3, #1
 800fccc:	6313      	str	r3, [r2, #48]	; 0x30
 800fcce:	4b54      	ldr	r3, [pc, #336]	; (800fe20 <HAL_ADC_MspInit+0x290>)
 800fcd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fcd2:	f003 0301 	and.w	r3, r3, #1
 800fcd6:	613b      	str	r3, [r7, #16]
 800fcd8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800fcda:	2310      	movs	r3, #16
 800fcdc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800fcde:	2303      	movs	r3, #3
 800fce0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fce2:	2300      	movs	r3, #0
 800fce4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fce6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fcea:	4619      	mov	r1, r3
 800fcec:	484e      	ldr	r0, [pc, #312]	; (800fe28 <HAL_ADC_MspInit+0x298>)
 800fcee:	f7fb f9ed 	bl	800b0cc <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800fcf2:	4b51      	ldr	r3, [pc, #324]	; (800fe38 <HAL_ADC_MspInit+0x2a8>)
 800fcf4:	4a51      	ldr	r2, [pc, #324]	; (800fe3c <HAL_ADC_MspInit+0x2ac>)
 800fcf6:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800fcf8:	4b4f      	ldr	r3, [pc, #316]	; (800fe38 <HAL_ADC_MspInit+0x2a8>)
 800fcfa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800fcfe:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800fd00:	4b4d      	ldr	r3, [pc, #308]	; (800fe38 <HAL_ADC_MspInit+0x2a8>)
 800fd02:	2200      	movs	r2, #0
 800fd04:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800fd06:	4b4c      	ldr	r3, [pc, #304]	; (800fe38 <HAL_ADC_MspInit+0x2a8>)
 800fd08:	2200      	movs	r2, #0
 800fd0a:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800fd0c:	4b4a      	ldr	r3, [pc, #296]	; (800fe38 <HAL_ADC_MspInit+0x2a8>)
 800fd0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800fd12:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800fd14:	4b48      	ldr	r3, [pc, #288]	; (800fe38 <HAL_ADC_MspInit+0x2a8>)
 800fd16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fd1a:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800fd1c:	4b46      	ldr	r3, [pc, #280]	; (800fe38 <HAL_ADC_MspInit+0x2a8>)
 800fd1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800fd22:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 800fd24:	4b44      	ldr	r3, [pc, #272]	; (800fe38 <HAL_ADC_MspInit+0x2a8>)
 800fd26:	2200      	movs	r2, #0
 800fd28:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 800fd2a:	4b43      	ldr	r3, [pc, #268]	; (800fe38 <HAL_ADC_MspInit+0x2a8>)
 800fd2c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800fd30:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800fd32:	4b41      	ldr	r3, [pc, #260]	; (800fe38 <HAL_ADC_MspInit+0x2a8>)
 800fd34:	2200      	movs	r2, #0
 800fd36:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800fd38:	483f      	ldr	r0, [pc, #252]	; (800fe38 <HAL_ADC_MspInit+0x2a8>)
 800fd3a:	f7fa fb4b 	bl	800a3d4 <HAL_DMA_Init>
 800fd3e:	4603      	mov	r3, r0
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d001      	beq.n	800fd48 <HAL_ADC_MspInit+0x1b8>
      Error_Handler();
 800fd44:	f001 fa52 	bl	80111ec <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	4a3b      	ldr	r2, [pc, #236]	; (800fe38 <HAL_ADC_MspInit+0x2a8>)
 800fd4c:	639a      	str	r2, [r3, #56]	; 0x38
 800fd4e:	4a3a      	ldr	r2, [pc, #232]	; (800fe38 <HAL_ADC_MspInit+0x2a8>)
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	6393      	str	r3, [r2, #56]	; 0x38
}
 800fd54:	e05d      	b.n	800fe12 <HAL_ADC_MspInit+0x282>
  else if(adcHandle->Instance==ADC3)
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	4a39      	ldr	r2, [pc, #228]	; (800fe40 <HAL_ADC_MspInit+0x2b0>)
 800fd5c:	4293      	cmp	r3, r2
 800fd5e:	d158      	bne.n	800fe12 <HAL_ADC_MspInit+0x282>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800fd60:	2300      	movs	r3, #0
 800fd62:	60fb      	str	r3, [r7, #12]
 800fd64:	4b2e      	ldr	r3, [pc, #184]	; (800fe20 <HAL_ADC_MspInit+0x290>)
 800fd66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd68:	4a2d      	ldr	r2, [pc, #180]	; (800fe20 <HAL_ADC_MspInit+0x290>)
 800fd6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800fd6e:	6453      	str	r3, [r2, #68]	; 0x44
 800fd70:	4b2b      	ldr	r3, [pc, #172]	; (800fe20 <HAL_ADC_MspInit+0x290>)
 800fd72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800fd78:	60fb      	str	r3, [r7, #12]
 800fd7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fd7c:	2300      	movs	r3, #0
 800fd7e:	60bb      	str	r3, [r7, #8]
 800fd80:	4b27      	ldr	r3, [pc, #156]	; (800fe20 <HAL_ADC_MspInit+0x290>)
 800fd82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd84:	4a26      	ldr	r2, [pc, #152]	; (800fe20 <HAL_ADC_MspInit+0x290>)
 800fd86:	f043 0301 	orr.w	r3, r3, #1
 800fd8a:	6313      	str	r3, [r2, #48]	; 0x30
 800fd8c:	4b24      	ldr	r3, [pc, #144]	; (800fe20 <HAL_ADC_MspInit+0x290>)
 800fd8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd90:	f003 0301 	and.w	r3, r3, #1
 800fd94:	60bb      	str	r3, [r7, #8]
 800fd96:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800fd98:	2302      	movs	r3, #2
 800fd9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800fd9c:	2303      	movs	r3, #3
 800fd9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fda0:	2300      	movs	r3, #0
 800fda2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fda4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fda8:	4619      	mov	r1, r3
 800fdaa:	481f      	ldr	r0, [pc, #124]	; (800fe28 <HAL_ADC_MspInit+0x298>)
 800fdac:	f7fb f98e 	bl	800b0cc <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 800fdb0:	4b24      	ldr	r3, [pc, #144]	; (800fe44 <HAL_ADC_MspInit+0x2b4>)
 800fdb2:	4a25      	ldr	r2, [pc, #148]	; (800fe48 <HAL_ADC_MspInit+0x2b8>)
 800fdb4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 800fdb6:	4b23      	ldr	r3, [pc, #140]	; (800fe44 <HAL_ADC_MspInit+0x2b4>)
 800fdb8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800fdbc:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800fdbe:	4b21      	ldr	r3, [pc, #132]	; (800fe44 <HAL_ADC_MspInit+0x2b4>)
 800fdc0:	2200      	movs	r2, #0
 800fdc2:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800fdc4:	4b1f      	ldr	r3, [pc, #124]	; (800fe44 <HAL_ADC_MspInit+0x2b4>)
 800fdc6:	2200      	movs	r2, #0
 800fdc8:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800fdca:	4b1e      	ldr	r3, [pc, #120]	; (800fe44 <HAL_ADC_MspInit+0x2b4>)
 800fdcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800fdd0:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800fdd2:	4b1c      	ldr	r3, [pc, #112]	; (800fe44 <HAL_ADC_MspInit+0x2b4>)
 800fdd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fdd8:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800fdda:	4b1a      	ldr	r3, [pc, #104]	; (800fe44 <HAL_ADC_MspInit+0x2b4>)
 800fddc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800fde0:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 800fde2:	4b18      	ldr	r3, [pc, #96]	; (800fe44 <HAL_ADC_MspInit+0x2b4>)
 800fde4:	2200      	movs	r2, #0
 800fde6:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 800fde8:	4b16      	ldr	r3, [pc, #88]	; (800fe44 <HAL_ADC_MspInit+0x2b4>)
 800fdea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800fdee:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800fdf0:	4b14      	ldr	r3, [pc, #80]	; (800fe44 <HAL_ADC_MspInit+0x2b4>)
 800fdf2:	2200      	movs	r2, #0
 800fdf4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800fdf6:	4813      	ldr	r0, [pc, #76]	; (800fe44 <HAL_ADC_MspInit+0x2b4>)
 800fdf8:	f7fa faec 	bl	800a3d4 <HAL_DMA_Init>
 800fdfc:	4603      	mov	r3, r0
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d001      	beq.n	800fe06 <HAL_ADC_MspInit+0x276>
      Error_Handler();
 800fe02:	f001 f9f3 	bl	80111ec <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	4a0e      	ldr	r2, [pc, #56]	; (800fe44 <HAL_ADC_MspInit+0x2b4>)
 800fe0a:	639a      	str	r2, [r3, #56]	; 0x38
 800fe0c:	4a0d      	ldr	r2, [pc, #52]	; (800fe44 <HAL_ADC_MspInit+0x2b4>)
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	6393      	str	r3, [r2, #56]	; 0x38
}
 800fe12:	bf00      	nop
 800fe14:	3738      	adds	r7, #56	; 0x38
 800fe16:	46bd      	mov	sp, r7
 800fe18:	bd80      	pop	{r7, pc}
 800fe1a:	bf00      	nop
 800fe1c:	40012000 	.word	0x40012000
 800fe20:	40023800 	.word	0x40023800
 800fe24:	40020800 	.word	0x40020800
 800fe28:	40020000 	.word	0x40020000
 800fe2c:	200045f4 	.word	0x200045f4
 800fe30:	40026410 	.word	0x40026410
 800fe34:	40012100 	.word	0x40012100
 800fe38:	20004654 	.word	0x20004654
 800fe3c:	40026440 	.word	0x40026440
 800fe40:	40012200 	.word	0x40012200
 800fe44:	20004504 	.word	0x20004504
 800fe48:	40026428 	.word	0x40026428

0800fe4c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800fe4c:	b580      	push	{r7, lr}
 800fe4e:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 800fe50:	4b18      	ldr	r3, [pc, #96]	; (800feb4 <MX_CAN1_Init+0x68>)
 800fe52:	4a19      	ldr	r2, [pc, #100]	; (800feb8 <MX_CAN1_Init+0x6c>)
 800fe54:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 4;
 800fe56:	4b17      	ldr	r3, [pc, #92]	; (800feb4 <MX_CAN1_Init+0x68>)
 800fe58:	2204      	movs	r2, #4
 800fe5a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800fe5c:	4b15      	ldr	r3, [pc, #84]	; (800feb4 <MX_CAN1_Init+0x68>)
 800fe5e:	2200      	movs	r2, #0
 800fe60:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 800fe62:	4b14      	ldr	r3, [pc, #80]	; (800feb4 <MX_CAN1_Init+0x68>)
 800fe64:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800fe68:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 800fe6a:	4b12      	ldr	r3, [pc, #72]	; (800feb4 <MX_CAN1_Init+0x68>)
 800fe6c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800fe70:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 800fe72:	4b10      	ldr	r3, [pc, #64]	; (800feb4 <MX_CAN1_Init+0x68>)
 800fe74:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800fe78:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800fe7a:	4b0e      	ldr	r3, [pc, #56]	; (800feb4 <MX_CAN1_Init+0x68>)
 800fe7c:	2200      	movs	r2, #0
 800fe7e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800fe80:	4b0c      	ldr	r3, [pc, #48]	; (800feb4 <MX_CAN1_Init+0x68>)
 800fe82:	2200      	movs	r2, #0
 800fe84:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800fe86:	4b0b      	ldr	r3, [pc, #44]	; (800feb4 <MX_CAN1_Init+0x68>)
 800fe88:	2200      	movs	r2, #0
 800fe8a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800fe8c:	4b09      	ldr	r3, [pc, #36]	; (800feb4 <MX_CAN1_Init+0x68>)
 800fe8e:	2200      	movs	r2, #0
 800fe90:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800fe92:	4b08      	ldr	r3, [pc, #32]	; (800feb4 <MX_CAN1_Init+0x68>)
 800fe94:	2200      	movs	r2, #0
 800fe96:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800fe98:	4b06      	ldr	r3, [pc, #24]	; (800feb4 <MX_CAN1_Init+0x68>)
 800fe9a:	2200      	movs	r2, #0
 800fe9c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800fe9e:	4805      	ldr	r0, [pc, #20]	; (800feb4 <MX_CAN1_Init+0x68>)
 800fea0:	f7f9 fc22 	bl	80096e8 <HAL_CAN_Init>
 800fea4:	4603      	mov	r3, r0
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d001      	beq.n	800feae <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800feaa:	f001 f99f 	bl	80111ec <Error_Handler>
  }

}
 800feae:	bf00      	nop
 800feb0:	bd80      	pop	{r7, pc}
 800feb2:	bf00      	nop
 800feb4:	20004700 	.word	0x20004700
 800feb8:	40006400 	.word	0x40006400

0800febc <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800febc:	b580      	push	{r7, lr}
 800febe:	b08a      	sub	sp, #40	; 0x28
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fec4:	f107 0314 	add.w	r3, r7, #20
 800fec8:	2200      	movs	r2, #0
 800feca:	601a      	str	r2, [r3, #0]
 800fecc:	605a      	str	r2, [r3, #4]
 800fece:	609a      	str	r2, [r3, #8]
 800fed0:	60da      	str	r2, [r3, #12]
 800fed2:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	4a21      	ldr	r2, [pc, #132]	; (800ff60 <HAL_CAN_MspInit+0xa4>)
 800feda:	4293      	cmp	r3, r2
 800fedc:	d13c      	bne.n	800ff58 <HAL_CAN_MspInit+0x9c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800fede:	2300      	movs	r3, #0
 800fee0:	613b      	str	r3, [r7, #16]
 800fee2:	4b20      	ldr	r3, [pc, #128]	; (800ff64 <HAL_CAN_MspInit+0xa8>)
 800fee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fee6:	4a1f      	ldr	r2, [pc, #124]	; (800ff64 <HAL_CAN_MspInit+0xa8>)
 800fee8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800feec:	6413      	str	r3, [r2, #64]	; 0x40
 800feee:	4b1d      	ldr	r3, [pc, #116]	; (800ff64 <HAL_CAN_MspInit+0xa8>)
 800fef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fef6:	613b      	str	r3, [r7, #16]
 800fef8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fefa:	2300      	movs	r3, #0
 800fefc:	60fb      	str	r3, [r7, #12]
 800fefe:	4b19      	ldr	r3, [pc, #100]	; (800ff64 <HAL_CAN_MspInit+0xa8>)
 800ff00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff02:	4a18      	ldr	r2, [pc, #96]	; (800ff64 <HAL_CAN_MspInit+0xa8>)
 800ff04:	f043 0301 	orr.w	r3, r3, #1
 800ff08:	6313      	str	r3, [r2, #48]	; 0x30
 800ff0a:	4b16      	ldr	r3, [pc, #88]	; (800ff64 <HAL_CAN_MspInit+0xa8>)
 800ff0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff0e:	f003 0301 	and.w	r3, r3, #1
 800ff12:	60fb      	str	r3, [r7, #12]
 800ff14:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ff16:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ff1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ff1c:	2302      	movs	r3, #2
 800ff1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ff20:	2300      	movs	r3, #0
 800ff22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ff24:	2303      	movs	r3, #3
 800ff26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800ff28:	2309      	movs	r3, #9
 800ff2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ff2c:	f107 0314 	add.w	r3, r7, #20
 800ff30:	4619      	mov	r1, r3
 800ff32:	480d      	ldr	r0, [pc, #52]	; (800ff68 <HAL_CAN_MspInit+0xac>)
 800ff34:	f7fb f8ca 	bl	800b0cc <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 800ff38:	2200      	movs	r2, #0
 800ff3a:	2100      	movs	r1, #0
 800ff3c:	2013      	movs	r0, #19
 800ff3e:	f7fa fa12 	bl	800a366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800ff42:	2013      	movs	r0, #19
 800ff44:	f7fa fa2b 	bl	800a39e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800ff48:	2200      	movs	r2, #0
 800ff4a:	2100      	movs	r1, #0
 800ff4c:	2014      	movs	r0, #20
 800ff4e:	f7fa fa0a 	bl	800a366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800ff52:	2014      	movs	r0, #20
 800ff54:	f7fa fa23 	bl	800a39e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800ff58:	bf00      	nop
 800ff5a:	3728      	adds	r7, #40	; 0x28
 800ff5c:	46bd      	mov	sp, r7
 800ff5e:	bd80      	pop	{r7, pc}
 800ff60:	40006400 	.word	0x40006400
 800ff64:	40023800 	.word	0x40023800
 800ff68:	40020000 	.word	0x40020000

0800ff6c <CAN_Init>:

/* USER CODE BEGIN 1 */


void CAN_Init()
{
 800ff6c:	b580      	push	{r7, lr}
 800ff6e:	af00      	add	r7, sp, #0

	motorChannel = getChannel();
 800ff70:	f000 f84a 	bl	8010008 <getChannel>
 800ff74:	4603      	mov	r3, r0
 800ff76:	461a      	mov	r2, r3
 800ff78:	4b20      	ldr	r3, [pc, #128]	; (800fffc <CAN_Init+0x90>)
 800ff7a:	701a      	strb	r2, [r3, #0]


	sFilterConfig.FilterBank = 0;
 800ff7c:	4b20      	ldr	r3, [pc, #128]	; (8010000 <CAN_Init+0x94>)
 800ff7e:	2200      	movs	r2, #0
 800ff80:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800ff82:	4b1f      	ldr	r3, [pc, #124]	; (8010000 <CAN_Init+0x94>)
 800ff84:	2200      	movs	r2, #0
 800ff86:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800ff88:	4b1d      	ldr	r3, [pc, #116]	; (8010000 <CAN_Init+0x94>)
 800ff8a:	2201      	movs	r2, #1
 800ff8c:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterIdHigh = 0x4000 | motorChannel << 10;
 800ff8e:	4b1b      	ldr	r3, [pc, #108]	; (800fffc <CAN_Init+0x90>)
 800ff90:	781b      	ldrb	r3, [r3, #0]
 800ff92:	029b      	lsls	r3, r3, #10
 800ff94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ff98:	461a      	mov	r2, r3
 800ff9a:	4b19      	ldr	r3, [pc, #100]	; (8010000 <CAN_Init+0x94>)
 800ff9c:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 800ff9e:	4b18      	ldr	r3, [pc, #96]	; (8010000 <CAN_Init+0x94>)
 800ffa0:	2200      	movs	r2, #0
 800ffa2:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0xfc00;
 800ffa4:	4b16      	ldr	r3, [pc, #88]	; (8010000 <CAN_Init+0x94>)
 800ffa6:	f44f 427c 	mov.w	r2, #64512	; 0xfc00
 800ffaa:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0006;
 800ffac:	4b14      	ldr	r3, [pc, #80]	; (8010000 <CAN_Init+0x94>)
 800ffae:	2206      	movs	r2, #6
 800ffb0:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800ffb2:	4b13      	ldr	r3, [pc, #76]	; (8010000 <CAN_Init+0x94>)
 800ffb4:	2200      	movs	r2, #0
 800ffb6:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterActivation = ENABLE;
 800ffb8:	4b11      	ldr	r3, [pc, #68]	; (8010000 <CAN_Init+0x94>)
 800ffba:	2201      	movs	r2, #1
 800ffbc:	621a      	str	r2, [r3, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 800ffbe:	4b10      	ldr	r3, [pc, #64]	; (8010000 <CAN_Init+0x94>)
 800ffc0:	220e      	movs	r2, #14
 800ffc2:	625a      	str	r2, [r3, #36]	; 0x24

	if(HAL_CAN_ConfigFilter(&hcan1,&sFilterConfig) != HAL_OK)
 800ffc4:	490e      	ldr	r1, [pc, #56]	; (8010000 <CAN_Init+0x94>)
 800ffc6:	480f      	ldr	r0, [pc, #60]	; (8010004 <CAN_Init+0x98>)
 800ffc8:	f7f9 fc8a 	bl	80098e0 <HAL_CAN_ConfigFilter>
 800ffcc:	4603      	mov	r3, r0
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d001      	beq.n	800ffd6 <CAN_Init+0x6a>
	{
	  Error_Handler();
 800ffd2:	f001 f90b 	bl	80111ec <Error_Handler>
	}

	if(HAL_CAN_Start(&hcan1) != HAL_OK)
 800ffd6:	480b      	ldr	r0, [pc, #44]	; (8010004 <CAN_Init+0x98>)
 800ffd8:	f7f9 fd62 	bl	8009aa0 <HAL_CAN_Start>
 800ffdc:	4603      	mov	r3, r0
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d001      	beq.n	800ffe6 <CAN_Init+0x7a>
	{
	  Error_Handler();
 800ffe2:	f001 f903 	bl	80111ec <Error_Handler>
	}

	if(HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 800ffe6:	2103      	movs	r1, #3
 800ffe8:	4806      	ldr	r0, [pc, #24]	; (8010004 <CAN_Init+0x98>)
 800ffea:	f7f9 feb0 	bl	8009d4e <HAL_CAN_ActivateNotification>
 800ffee:	4603      	mov	r3, r0
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d001      	beq.n	800fff8 <CAN_Init+0x8c>
	{
	  Error_Handler();
 800fff4:	f001 f8fa 	bl	80111ec <Error_Handler>
	}


}
 800fff8:	bf00      	nop
 800fffa:	bd80      	pop	{r7, pc}
 800fffc:	20000258 	.word	0x20000258
 8010000:	200046b4 	.word	0x200046b4
 8010004:	20004700 	.word	0x20004700

08010008 <getChannel>:


uint8_t getChannel()
{
 8010008:	b580      	push	{r7, lr}
 801000a:	b082      	sub	sp, #8
 801000c:	af00      	add	r7, sp, #0
	uint8_t ch = 0;
 801000e:	2300      	movs	r3, #0
 8010010:	71fb      	strb	r3, [r7, #7]

	ch |= !HAL_GPIO_ReadPin(CH_b0_GPIO_Port, CH_b0_Pin) << 0;
 8010012:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8010016:	481b      	ldr	r0, [pc, #108]	; (8010084 <getChannel+0x7c>)
 8010018:	f7fb f9ea 	bl	800b3f0 <HAL_GPIO_ReadPin>
 801001c:	4603      	mov	r3, r0
 801001e:	2b00      	cmp	r3, #0
 8010020:	bf0c      	ite	eq
 8010022:	2301      	moveq	r3, #1
 8010024:	2300      	movne	r3, #0
 8010026:	b2db      	uxtb	r3, r3
 8010028:	b25a      	sxtb	r2, r3
 801002a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801002e:	4313      	orrs	r3, r2
 8010030:	b25b      	sxtb	r3, r3
 8010032:	71fb      	strb	r3, [r7, #7]
	ch |= !HAL_GPIO_ReadPin(CH_b1_GPIO_Port, CH_b1_Pin) << 1;
 8010034:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8010038:	4812      	ldr	r0, [pc, #72]	; (8010084 <getChannel+0x7c>)
 801003a:	f7fb f9d9 	bl	800b3f0 <HAL_GPIO_ReadPin>
 801003e:	4603      	mov	r3, r0
 8010040:	2b00      	cmp	r3, #0
 8010042:	d101      	bne.n	8010048 <getChannel+0x40>
 8010044:	2302      	movs	r3, #2
 8010046:	e000      	b.n	801004a <getChannel+0x42>
 8010048:	2300      	movs	r3, #0
 801004a:	b25a      	sxtb	r2, r3
 801004c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010050:	4313      	orrs	r3, r2
 8010052:	b25b      	sxtb	r3, r3
 8010054:	71fb      	strb	r3, [r7, #7]
	ch |= !HAL_GPIO_ReadPin(CH_b2_GPIO_Port, CH_b2_Pin) << 2;
 8010056:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801005a:	480a      	ldr	r0, [pc, #40]	; (8010084 <getChannel+0x7c>)
 801005c:	f7fb f9c8 	bl	800b3f0 <HAL_GPIO_ReadPin>
 8010060:	4603      	mov	r3, r0
 8010062:	2b00      	cmp	r3, #0
 8010064:	d101      	bne.n	801006a <getChannel+0x62>
 8010066:	2304      	movs	r3, #4
 8010068:	e000      	b.n	801006c <getChannel+0x64>
 801006a:	2300      	movs	r3, #0
 801006c:	b25a      	sxtb	r2, r3
 801006e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010072:	4313      	orrs	r3, r2
 8010074:	b25b      	sxtb	r3, r3
 8010076:	71fb      	strb	r3, [r7, #7]

	return ch;
 8010078:	79fb      	ldrb	r3, [r7, #7]
}
 801007a:	4618      	mov	r0, r3
 801007c:	3708      	adds	r7, #8
 801007e:	46bd      	mov	sp, r7
 8010080:	bd80      	pop	{r7, pc}
 8010082:	bf00      	nop
 8010084:	40020400 	.word	0x40020400

08010088 <HAL_CAN_TxMailbox0CompleteCallback>:




void HAL_CAN_TxMailbox0CompleteCallback (CAN_HandleTypeDef * hcan)
{
 8010088:	b580      	push	{r7, lr}
 801008a:	b082      	sub	sp, #8
 801008c:	af00      	add	r7, sp, #0
 801008e:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
	{
	}
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 8010090:	2200      	movs	r2, #0
 8010092:	2140      	movs	r1, #64	; 0x40
 8010094:	4803      	ldr	r0, [pc, #12]	; (80100a4 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 8010096:	f7fb f9c3 	bl	800b420 <HAL_GPIO_WritePin>

}
 801009a:	bf00      	nop
 801009c:	3708      	adds	r7, #8
 801009e:	46bd      	mov	sp, r7
 80100a0:	bd80      	pop	{r7, pc}
 80100a2:	bf00      	nop
 80100a4:	40020400 	.word	0x40020400

080100a8 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback (CAN_HandleTypeDef * hcan)
{
 80100a8:	b580      	push	{r7, lr}
 80100aa:	b082      	sub	sp, #8
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
	{
	}
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 80100b0:	2200      	movs	r2, #0
 80100b2:	2140      	movs	r1, #64	; 0x40
 80100b4:	4803      	ldr	r0, [pc, #12]	; (80100c4 <HAL_CAN_TxMailbox1CompleteCallback+0x1c>)
 80100b6:	f7fb f9b3 	bl	800b420 <HAL_GPIO_WritePin>

}
 80100ba:	bf00      	nop
 80100bc:	3708      	adds	r7, #8
 80100be:	46bd      	mov	sp, r7
 80100c0:	bd80      	pop	{r7, pc}
 80100c2:	bf00      	nop
 80100c4:	40020400 	.word	0x40020400

080100c8 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback (CAN_HandleTypeDef * hcan)
{
 80100c8:	b580      	push	{r7, lr}
 80100ca:	b082      	sub	sp, #8
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN1)
	{
	}
	HAL_GPIO_WritePin(DB0_GPIO_Port, DB0_Pin, GPIO_PIN_RESET);
 80100d0:	2200      	movs	r2, #0
 80100d2:	2140      	movs	r1, #64	; 0x40
 80100d4:	4803      	ldr	r0, [pc, #12]	; (80100e4 <HAL_CAN_TxMailbox2CompleteCallback+0x1c>)
 80100d6:	f7fb f9a3 	bl	800b420 <HAL_GPIO_WritePin>

}
 80100da:	bf00      	nop
 80100dc:	3708      	adds	r7, #8
 80100de:	46bd      	mov	sp, r7
 80100e0:	bd80      	pop	{r7, pc}
 80100e2:	bf00      	nop
 80100e4:	40020400 	.word	0x40020400

080100e8 <HAL_CAN_RxFifo0MsgPendingCallback>:



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80100e8:	b580      	push	{r7, lr}
 80100ea:	b084      	sub	sp, #16
 80100ec:	af00      	add	r7, sp, #0
 80100ee:	6078      	str	r0, [r7, #4]
			uint8_t byte[4];
		};
	}controlRef;


	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &can1RxHeader, can1RxData);
 80100f0:	4b24      	ldr	r3, [pc, #144]	; (8010184 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 80100f2:	4a25      	ldr	r2, [pc, #148]	; (8010188 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 80100f4:	2100      	movs	r1, #0
 80100f6:	6878      	ldr	r0, [r7, #4]
 80100f8:	f7f9 fd16 	bl	8009b28 <HAL_CAN_GetRxMessage>

	can1RxFlg = 1;
 80100fc:	4b23      	ldr	r3, [pc, #140]	; (801018c <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 80100fe:	2201      	movs	r2, #1
 8010100:	701a      	strb	r2, [r3, #0]

	if(((can1RxHeader.StdId & 0x1c) >> 2) == 0x01 && can1RxHeader.DLC == 0x4)
 8010102:	4b21      	ldr	r3, [pc, #132]	; (8010188 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	089b      	lsrs	r3, r3, #2
 8010108:	f003 0307 	and.w	r3, r3, #7
 801010c:	2b01      	cmp	r3, #1
 801010e:	d114      	bne.n	801013a <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
 8010110:	4b1d      	ldr	r3, [pc, #116]	; (8010188 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 8010112:	691b      	ldr	r3, [r3, #16]
 8010114:	2b04      	cmp	r3, #4
 8010116:	d110      	bne.n	801013a <HAL_CAN_RxFifo0MsgPendingCallback+0x52>
	{
		controlRef.byte[0] = can1RxData[0];
 8010118:	4b1a      	ldr	r3, [pc, #104]	; (8010184 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 801011a:	781b      	ldrb	r3, [r3, #0]
 801011c:	733b      	strb	r3, [r7, #12]
		controlRef.byte[1] = can1RxData[1];
 801011e:	4b19      	ldr	r3, [pc, #100]	; (8010184 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8010120:	785b      	ldrb	r3, [r3, #1]
 8010122:	737b      	strb	r3, [r7, #13]
		controlRef.byte[2] = can1RxData[2];
 8010124:	4b17      	ldr	r3, [pc, #92]	; (8010184 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8010126:	789b      	ldrb	r3, [r3, #2]
 8010128:	73bb      	strb	r3, [r7, #14]
		controlRef.byte[3] = can1RxData[3];
 801012a:	4b16      	ldr	r3, [pc, #88]	; (8010184 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 801012c:	78db      	ldrb	r3, [r3, #3]
 801012e:	73fb      	strb	r3, [r7, #15]

		mainASR.omega_ref = controlRef.fval;
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	4a17      	ldr	r2, [pc, #92]	; (8010190 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8010134:	6253      	str	r3, [r2, #36]	; 0x24

		timeoutReset();
 8010136:	f000 ffbf 	bl	80110b8 <timeoutReset>

	}


	if(((can1RxHeader.StdId & 0x1c) >> 2) == 0x02 && can1RxHeader.DLC == 0x4)
 801013a:	4b13      	ldr	r3, [pc, #76]	; (8010188 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	089b      	lsrs	r3, r3, #2
 8010140:	f003 0307 	and.w	r3, r3, #7
 8010144:	2b02      	cmp	r3, #2
 8010146:	d114      	bne.n	8010172 <HAL_CAN_RxFifo0MsgPendingCallback+0x8a>
 8010148:	4b0f      	ldr	r3, [pc, #60]	; (8010188 <HAL_CAN_RxFifo0MsgPendingCallback+0xa0>)
 801014a:	691b      	ldr	r3, [r3, #16]
 801014c:	2b04      	cmp	r3, #4
 801014e:	d110      	bne.n	8010172 <HAL_CAN_RxFifo0MsgPendingCallback+0x8a>
	{
		controlRef.byte[0] = can1RxData[0];
 8010150:	4b0c      	ldr	r3, [pc, #48]	; (8010184 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8010152:	781b      	ldrb	r3, [r3, #0]
 8010154:	733b      	strb	r3, [r7, #12]
		controlRef.byte[1] = can1RxData[1];
 8010156:	4b0b      	ldr	r3, [pc, #44]	; (8010184 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8010158:	785b      	ldrb	r3, [r3, #1]
 801015a:	737b      	strb	r3, [r7, #13]
		controlRef.byte[2] = can1RxData[2];
 801015c:	4b09      	ldr	r3, [pc, #36]	; (8010184 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 801015e:	789b      	ldrb	r3, [r3, #2]
 8010160:	73bb      	strb	r3, [r7, #14]
		controlRef.byte[3] = can1RxData[3];
 8010162:	4b08      	ldr	r3, [pc, #32]	; (8010184 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>)
 8010164:	78db      	ldrb	r3, [r3, #3]
 8010166:	73fb      	strb	r3, [r7, #15]

		mainAPR.theta_ref = controlRef.fval;
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	4a0a      	ldr	r2, [pc, #40]	; (8010194 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 801016c:	62d3      	str	r3, [r2, #44]	; 0x2c

		timeoutReset();
 801016e:	f000 ffa3 	bl	80110b8 <timeoutReset>
	}


	HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_SET);
 8010172:	2201      	movs	r2, #1
 8010174:	2140      	movs	r1, #64	; 0x40
 8010176:	4808      	ldr	r0, [pc, #32]	; (8010198 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8010178:	f7fb f952 	bl	800b420 <HAL_GPIO_WritePin>

}
 801017c:	bf00      	nop
 801017e:	3710      	adds	r7, #16
 8010180:	46bd      	mov	sp, r7
 8010182:	bd80      	pop	{r7, pc}
 8010184:	200046f8 	.word	0x200046f8
 8010188:	200046dc 	.word	0x200046dc
 801018c:	20000259 	.word	0x20000259
 8010190:	200043bc 	.word	0x200043bc
 8010194:	20004368 	.word	0x20004368
 8010198:	40020000 	.word	0x40020000

0801019c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 801019c:	b580      	push	{r7, lr}
 801019e:	b082      	sub	sp, #8
 80101a0:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80101a2:	2300      	movs	r3, #0
 80101a4:	607b      	str	r3, [r7, #4]
 80101a6:	4b14      	ldr	r3, [pc, #80]	; (80101f8 <MX_DMA_Init+0x5c>)
 80101a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101aa:	4a13      	ldr	r2, [pc, #76]	; (80101f8 <MX_DMA_Init+0x5c>)
 80101ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80101b0:	6313      	str	r3, [r2, #48]	; 0x30
 80101b2:	4b11      	ldr	r3, [pc, #68]	; (80101f8 <MX_DMA_Init+0x5c>)
 80101b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80101ba:	607b      	str	r3, [r7, #4]
 80101bc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80101be:	2200      	movs	r2, #0
 80101c0:	2100      	movs	r1, #0
 80101c2:	2038      	movs	r0, #56	; 0x38
 80101c4:	f7fa f8cf 	bl	800a366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80101c8:	2038      	movs	r0, #56	; 0x38
 80101ca:	f7fa f8e8 	bl	800a39e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80101ce:	2200      	movs	r2, #0
 80101d0:	2100      	movs	r1, #0
 80101d2:	2039      	movs	r0, #57	; 0x39
 80101d4:	f7fa f8c7 	bl	800a366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80101d8:	2039      	movs	r0, #57	; 0x39
 80101da:	f7fa f8e0 	bl	800a39e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80101de:	2200      	movs	r2, #0
 80101e0:	2100      	movs	r1, #0
 80101e2:	203a      	movs	r0, #58	; 0x3a
 80101e4:	f7fa f8bf 	bl	800a366 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80101e8:	203a      	movs	r0, #58	; 0x3a
 80101ea:	f7fa f8d8 	bl	800a39e <HAL_NVIC_EnableIRQ>

}
 80101ee:	bf00      	nop
 80101f0:	3708      	adds	r7, #8
 80101f2:	46bd      	mov	sp, r7
 80101f4:	bd80      	pop	{r7, pc}
 80101f6:	bf00      	nop
 80101f8:	40023800 	.word	0x40023800

080101fc <Encoder_Init>:
Encoder_TypeDef mainEncoder;



void Encoder_Init()
{
 80101fc:	b480      	push	{r7}
 80101fe:	af00      	add	r7, sp, #0

	mainEncoder.Init.hspi = &hspi2;
 8010200:	4b1d      	ldr	r3, [pc, #116]	; (8010278 <Encoder_Init+0x7c>)
 8010202:	4a1e      	ldr	r2, [pc, #120]	; (801027c <Encoder_Init+0x80>)
 8010204:	60da      	str	r2, [r3, #12]
	mainEncoder.Init.SPI_NSS_Port = SPI2_NSS_GPIO_Port;
 8010206:	4b1c      	ldr	r3, [pc, #112]	; (8010278 <Encoder_Init+0x7c>)
 8010208:	4a1d      	ldr	r2, [pc, #116]	; (8010280 <Encoder_Init+0x84>)
 801020a:	611a      	str	r2, [r3, #16]
	mainEncoder.Init.SPI_NSS_Pin = SPI2_NSS_Pin;
 801020c:	4b1a      	ldr	r3, [pc, #104]	; (8010278 <Encoder_Init+0x7c>)
 801020e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010212:	829a      	strh	r2, [r3, #20]

	mainEncoder.Init.theta_offset = 0.0f;
 8010214:	4b18      	ldr	r3, [pc, #96]	; (8010278 <Encoder_Init+0x7c>)
 8010216:	f04f 0200 	mov.w	r2, #0
 801021a:	601a      	str	r2, [r3, #0]
	mainEncoder.Init.theta_re_offset = -3.0723f;
 801021c:	4b16      	ldr	r3, [pc, #88]	; (8010278 <Encoder_Init+0x7c>)
 801021e:	4a19      	ldr	r2, [pc, #100]	; (8010284 <Encoder_Init+0x88>)
 8010220:	605a      	str	r2, [r3, #4]
	mainEncoder.Init.cycleTime = 100E-6;
 8010222:	4b15      	ldr	r3, [pc, #84]	; (8010278 <Encoder_Init+0x7c>)
 8010224:	4a18      	ldr	r2, [pc, #96]	; (8010288 <Encoder_Init+0x8c>)
 8010226:	609a      	str	r2, [r3, #8]

	mainEncoder.theta = 0.0f;
 8010228:	4b13      	ldr	r3, [pc, #76]	; (8010278 <Encoder_Init+0x7c>)
 801022a:	f04f 0200 	mov.w	r2, #0
 801022e:	619a      	str	r2, [r3, #24]
	mainEncoder.theta_re = 0.0f;
 8010230:	4b11      	ldr	r3, [pc, #68]	; (8010278 <Encoder_Init+0x7c>)
 8010232:	f04f 0200 	mov.w	r2, #0
 8010236:	635a      	str	r2, [r3, #52]	; 0x34
	mainEncoder.forced_commute_enable = 0;
 8010238:	4b0f      	ldr	r3, [pc, #60]	; (8010278 <Encoder_Init+0x7c>)
 801023a:	2200      	movs	r2, #0
 801023c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	mainEncoder.cos_theta_re = 1.0f;
 8010240:	4b0d      	ldr	r3, [pc, #52]	; (8010278 <Encoder_Init+0x7c>)
 8010242:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8010246:	639a      	str	r2, [r3, #56]	; 0x38
	mainEncoder.sin_theta_re = 0.0f;
 8010248:	4b0b      	ldr	r3, [pc, #44]	; (8010278 <Encoder_Init+0x7c>)
 801024a:	f04f 0200 	mov.w	r2, #0
 801024e:	63da      	str	r2, [r3, #60]	; 0x3c


	mainEncoder.firstLaunch = 1;
 8010250:	4b09      	ldr	r3, [pc, #36]	; (8010278 <Encoder_Init+0x7c>)
 8010252:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8010256:	62da      	str	r2, [r3, #44]	; 0x2c

	// SPI Interrupt Setting
	__HAL_SPI_ENABLE_IT(mainEncoder.Init.hspi, SPI_IT_TXE | SPI_IT_RXNE);
 8010258:	4b07      	ldr	r3, [pc, #28]	; (8010278 <Encoder_Init+0x7c>)
 801025a:	68db      	ldr	r3, [r3, #12]
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	685a      	ldr	r2, [r3, #4]
 8010260:	4b05      	ldr	r3, [pc, #20]	; (8010278 <Encoder_Init+0x7c>)
 8010262:	68db      	ldr	r3, [r3, #12]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 801026a:	605a      	str	r2, [r3, #4]


}
 801026c:	bf00      	nop
 801026e:	46bd      	mov	sp, r7
 8010270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010274:	4770      	bx	lr
 8010276:	bf00      	nop
 8010278:	20004728 	.word	0x20004728
 801027c:	20004774 	.word	0x20004774
 8010280:	40020400 	.word	0x40020400
 8010284:	c044a090 	.word	0xc044a090
 8010288:	38d1b717 	.word	0x38d1b717
 801028c:	00000000 	.word	0x00000000

08010290 <setZeroEncoder>:


#if 1

void setZeroEncoder(uint8_t exe)
{
 8010290:	b590      	push	{r4, r7, lr}
 8010292:	b08b      	sub	sp, #44	; 0x2c
 8010294:	af00      	add	r7, sp, #0
 8010296:	4603      	mov	r3, r0
 8010298:	71fb      	strb	r3, [r7, #7]

	const int32_t forced_commute_steps = 2000;
 801029a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 801029e:	627b      	str	r3, [r7, #36]	; 0x24



	volatile uint32_t forced_commute_count = 0;
 80102a0:	2300      	movs	r3, #0
 80102a2:	61bb      	str	r3, [r7, #24]

	const float forced_I_gamma_ref = 5.0f;
 80102a4:	4b9a      	ldr	r3, [pc, #616]	; (8010510 <setZeroEncoder+0x280>)
 80102a6:	623b      	str	r3, [r7, #32]
	const float forced_I_delta_ref = 0.0f;
 80102a8:	f04f 0300 	mov.w	r3, #0
 80102ac:	61fb      	str	r3, [r7, #28]

	volatile float sensed_theta_re_error;

	volatile float sensed_theta_error;
	volatile float sensed_theta_error_sum = 0.0f;
 80102ae:	f04f 0300 	mov.w	r3, #0
 80102b2:	60fb      	str	r3, [r7, #12]
	volatile float sensed_theta_error_ave = 0.0f;
 80102b4:	f04f 0300 	mov.w	r3, #0
 80102b8:	60bb      	str	r3, [r7, #8]


	flash_data = (uint32_t*)Flash_load();
 80102ba:	f000 fbb9 	bl	8010a30 <Flash_load>
 80102be:	4602      	mov	r2, r0
 80102c0:	4b94      	ldr	r3, [pc, #592]	; (8010514 <setZeroEncoder+0x284>)
 80102c2:	601a      	str	r2, [r3, #0]

	if(exe == 0)
 80102c4:	79fb      	ldrb	r3, [r7, #7]
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d126      	bne.n	8010318 <setZeroEncoder+0x88>
	{

		memcpy(&mainEncoder.Init.theta_re_offset, flash_data, 4);
 80102ca:	4b92      	ldr	r3, [pc, #584]	; (8010514 <setZeroEncoder+0x284>)
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	461a      	mov	r2, r3
 80102d2:	4b91      	ldr	r3, [pc, #580]	; (8010518 <setZeroEncoder+0x288>)
 80102d4:	605a      	str	r2, [r3, #4]

#if DEBUG_PRINT_ENABLE
		printf("flash_data:%d\n", mainEncoder.Init.theta_re_offset * 100000);
 80102d6:	4b90      	ldr	r3, [pc, #576]	; (8010518 <setZeroEncoder+0x288>)
 80102d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80102dc:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 801051c <setZeroEncoder+0x28c>
 80102e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80102e4:	ee17 0a90 	vmov	r0, s15
 80102e8:	f7f8 f866 	bl	80083b8 <__aeabi_f2d>
 80102ec:	4603      	mov	r3, r0
 80102ee:	460c      	mov	r4, r1
 80102f0:	461a      	mov	r2, r3
 80102f2:	4623      	mov	r3, r4
 80102f4:	488a      	ldr	r0, [pc, #552]	; (8010520 <setZeroEncoder+0x290>)
 80102f6:	f002 fcdd 	bl	8012cb4 <iprintf>
		printf(" theta_re_offset = %d\n", (int)(mainEncoder.Init.theta_re_offset * 100000));
 80102fa:	4b87      	ldr	r3, [pc, #540]	; (8010518 <setZeroEncoder+0x288>)
 80102fc:	edd3 7a01 	vldr	s15, [r3, #4]
 8010300:	ed9f 7a86 	vldr	s14, [pc, #536]	; 801051c <setZeroEncoder+0x28c>
 8010304:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010308:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801030c:	ee17 1a90 	vmov	r1, s15
 8010310:	4884      	ldr	r0, [pc, #528]	; (8010524 <setZeroEncoder+0x294>)
 8010312:	f002 fccf 	bl	8012cb4 <iprintf>
#endif

		return;
 8010316:	e0ea      	b.n	80104ee <setZeroEncoder+0x25e>
	}


	mainACR.Id_ref = forced_I_gamma_ref;
 8010318:	4a83      	ldr	r2, [pc, #524]	; (8010528 <setZeroEncoder+0x298>)
 801031a:	6a3b      	ldr	r3, [r7, #32]
 801031c:	6353      	str	r3, [r2, #52]	; 0x34
	mainACR.Iq_ref = forced_I_delta_ref;
 801031e:	4a82      	ldr	r2, [pc, #520]	; (8010528 <setZeroEncoder+0x298>)
 8010320:	69fb      	ldr	r3, [r7, #28]
 8010322:	6393      	str	r3, [r2, #56]	; 0x38

	mainEncoder.Init.theta_re_offset = 0.0f;
 8010324:	4b7c      	ldr	r3, [pc, #496]	; (8010518 <setZeroEncoder+0x288>)
 8010326:	f04f 0200 	mov.w	r2, #0
 801032a:	605a      	str	r2, [r3, #4]

	mainACR.forced_theta_re = 0.0f;
 801032c:	4b7e      	ldr	r3, [pc, #504]	; (8010528 <setZeroEncoder+0x298>)
 801032e:	f04f 0200 	mov.w	r2, #0
 8010332:	669a      	str	r2, [r3, #104]	; 0x68

	mainACR.forced_commute_enable = 1;
 8010334:	4b7c      	ldr	r3, [pc, #496]	; (8010528 <setZeroEncoder+0x298>)
 8010336:	2201      	movs	r2, #1
 8010338:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64

	HAL_Delay(1000);
 801033c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010340:	f7f8 fdac 	bl	8008e9c <HAL_Delay>


	mainEncoder.Init.theta_re_offset = 0.0f - mainEncoder.theta_re;
 8010344:	4b74      	ldr	r3, [pc, #464]	; (8010518 <setZeroEncoder+0x288>)
 8010346:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 801034a:	ed9f 7a78 	vldr	s14, [pc, #480]	; 801052c <setZeroEncoder+0x29c>
 801034e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010352:	4b71      	ldr	r3, [pc, #452]	; (8010518 <setZeroEncoder+0x288>)
 8010354:	edc3 7a01 	vstr	s15, [r3, #4]

	mainACR.Id_ref = 0.0f;
 8010358:	4b73      	ldr	r3, [pc, #460]	; (8010528 <setZeroEncoder+0x298>)
 801035a:	f04f 0200 	mov.w	r2, #0
 801035e:	635a      	str	r2, [r3, #52]	; 0x34
	mainACR.Iq_ref = 0.0f;
 8010360:	4b71      	ldr	r3, [pc, #452]	; (8010528 <setZeroEncoder+0x298>)
 8010362:	f04f 0200 	mov.w	r2, #0
 8010366:	639a      	str	r2, [r3, #56]	; 0x38


	while(mainEncoder.Init.theta_re_offset < -M_PI)	mainEncoder.Init.theta_re_offset += 2.0f * M_PI;
 8010368:	e012      	b.n	8010390 <setZeroEncoder+0x100>
 801036a:	4b6b      	ldr	r3, [pc, #428]	; (8010518 <setZeroEncoder+0x288>)
 801036c:	685b      	ldr	r3, [r3, #4]
 801036e:	4618      	mov	r0, r3
 8010370:	f7f8 f822 	bl	80083b8 <__aeabi_f2d>
 8010374:	a360      	add	r3, pc, #384	; (adr r3, 80104f8 <setZeroEncoder+0x268>)
 8010376:	e9d3 2300 	ldrd	r2, r3, [r3]
 801037a:	f7f7 febf 	bl	80080fc <__adddf3>
 801037e:	4603      	mov	r3, r0
 8010380:	460c      	mov	r4, r1
 8010382:	4618      	mov	r0, r3
 8010384:	4621      	mov	r1, r4
 8010386:	f7f8 fb47 	bl	8008a18 <__aeabi_d2f>
 801038a:	4602      	mov	r2, r0
 801038c:	4b62      	ldr	r3, [pc, #392]	; (8010518 <setZeroEncoder+0x288>)
 801038e:	605a      	str	r2, [r3, #4]
 8010390:	4b61      	ldr	r3, [pc, #388]	; (8010518 <setZeroEncoder+0x288>)
 8010392:	685b      	ldr	r3, [r3, #4]
 8010394:	4618      	mov	r0, r3
 8010396:	f7f8 f80f 	bl	80083b8 <__aeabi_f2d>
 801039a:	a359      	add	r3, pc, #356	; (adr r3, 8010500 <setZeroEncoder+0x270>)
 801039c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103a0:	f7f8 fad4 	bl	800894c <__aeabi_dcmplt>
 80103a4:	4603      	mov	r3, r0
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d1df      	bne.n	801036a <setZeroEncoder+0xda>
	while(mainEncoder.Init.theta_re_offset > M_PI)	mainEncoder.Init.theta_re_offset -= 2.0f * M_PI;
 80103aa:	e012      	b.n	80103d2 <setZeroEncoder+0x142>
 80103ac:	4b5a      	ldr	r3, [pc, #360]	; (8010518 <setZeroEncoder+0x288>)
 80103ae:	685b      	ldr	r3, [r3, #4]
 80103b0:	4618      	mov	r0, r3
 80103b2:	f7f8 f801 	bl	80083b8 <__aeabi_f2d>
 80103b6:	a350      	add	r3, pc, #320	; (adr r3, 80104f8 <setZeroEncoder+0x268>)
 80103b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103bc:	f7f7 fe9c 	bl	80080f8 <__aeabi_dsub>
 80103c0:	4603      	mov	r3, r0
 80103c2:	460c      	mov	r4, r1
 80103c4:	4618      	mov	r0, r3
 80103c6:	4621      	mov	r1, r4
 80103c8:	f7f8 fb26 	bl	8008a18 <__aeabi_d2f>
 80103cc:	4602      	mov	r2, r0
 80103ce:	4b52      	ldr	r3, [pc, #328]	; (8010518 <setZeroEncoder+0x288>)
 80103d0:	605a      	str	r2, [r3, #4]
 80103d2:	4b51      	ldr	r3, [pc, #324]	; (8010518 <setZeroEncoder+0x288>)
 80103d4:	685b      	ldr	r3, [r3, #4]
 80103d6:	4618      	mov	r0, r3
 80103d8:	f7f7 ffee 	bl	80083b8 <__aeabi_f2d>
 80103dc:	a34a      	add	r3, pc, #296	; (adr r3, 8010508 <setZeroEncoder+0x278>)
 80103de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103e2:	f7f8 fad1 	bl	8008988 <__aeabi_dcmpgt>
 80103e6:	4603      	mov	r3, r0
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d1df      	bne.n	80103ac <setZeroEncoder+0x11c>

#if DEBUG_PRINT_ENABLE

	printf(" theta_re_offset = %d -- ", (int)(mainEncoder.Init.theta_re_offset * 100000));
 80103ec:	4b4a      	ldr	r3, [pc, #296]	; (8010518 <setZeroEncoder+0x288>)
 80103ee:	edd3 7a01 	vldr	s15, [r3, #4]
 80103f2:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 801051c <setZeroEncoder+0x28c>
 80103f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80103fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80103fe:	ee17 1a90 	vmov	r1, s15
 8010402:	484b      	ldr	r0, [pc, #300]	; (8010530 <setZeroEncoder+0x2a0>)
 8010404:	f002 fc56 	bl	8012cb4 <iprintf>
	HAL_Delay(1);
 8010408:	2001      	movs	r0, #1
 801040a:	f7f8 fd47 	bl	8008e9c <HAL_Delay>
	printf(" theta_re_offset = %d\n", (int)(mainEncoder.Init.theta_re_offset * 100000));
 801040e:	4b42      	ldr	r3, [pc, #264]	; (8010518 <setZeroEncoder+0x288>)
 8010410:	edd3 7a01 	vldr	s15, [r3, #4]
 8010414:	ed9f 7a41 	vldr	s14, [pc, #260]	; 801051c <setZeroEncoder+0x28c>
 8010418:	ee67 7a87 	vmul.f32	s15, s15, s14
 801041c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010420:	ee17 1a90 	vmov	r1, s15
 8010424:	483f      	ldr	r0, [pc, #252]	; (8010524 <setZeroEncoder+0x294>)
 8010426:	f002 fc45 	bl	8012cb4 <iprintf>
	HAL_Delay(1);
 801042a:	2001      	movs	r0, #1
 801042c:	f7f8 fd36 	bl	8008e9c <HAL_Delay>
	printf(" theta_re_offset(4) = %d -- ", (int)(mainEncoder.Init.theta_re_offset * 10000));
 8010430:	4b39      	ldr	r3, [pc, #228]	; (8010518 <setZeroEncoder+0x288>)
 8010432:	edd3 7a01 	vldr	s15, [r3, #4]
 8010436:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8010534 <setZeroEncoder+0x2a4>
 801043a:	ee67 7a87 	vmul.f32	s15, s15, s14
 801043e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010442:	ee17 1a90 	vmov	r1, s15
 8010446:	483c      	ldr	r0, [pc, #240]	; (8010538 <setZeroEncoder+0x2a8>)
 8010448:	f002 fc34 	bl	8012cb4 <iprintf>
	HAL_Delay(1);
 801044c:	2001      	movs	r0, #1
 801044e:	f7f8 fd25 	bl	8008e9c <HAL_Delay>
	printf(" theta_re_offset(4) = %d\n", (int)(mainEncoder.Init.theta_re_offset * 10000));
 8010452:	4b31      	ldr	r3, [pc, #196]	; (8010518 <setZeroEncoder+0x288>)
 8010454:	edd3 7a01 	vldr	s15, [r3, #4]
 8010458:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8010534 <setZeroEncoder+0x2a4>
 801045c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010460:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010464:	ee17 1a90 	vmov	r1, s15
 8010468:	4834      	ldr	r0, [pc, #208]	; (801053c <setZeroEncoder+0x2ac>)
 801046a:	f002 fc23 	bl	8012cb4 <iprintf>
	HAL_Delay(1);
 801046e:	2001      	movs	r0, #1
 8010470:	f7f8 fd14 	bl	8008e9c <HAL_Delay>

	printf("(theta_re_offset < 1.0f) = %d\n", (int)(mainEncoder.Init.theta_re_offset < 1.0f));
 8010474:	4b28      	ldr	r3, [pc, #160]	; (8010518 <setZeroEncoder+0x288>)
 8010476:	edd3 7a01 	vldr	s15, [r3, #4]
 801047a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801047e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8010482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010486:	bf4c      	ite	mi
 8010488:	2301      	movmi	r3, #1
 801048a:	2300      	movpl	r3, #0
 801048c:	b2db      	uxtb	r3, r3
 801048e:	4619      	mov	r1, r3
 8010490:	482b      	ldr	r0, [pc, #172]	; (8010540 <setZeroEncoder+0x2b0>)
 8010492:	f002 fc0f 	bl	8012cb4 <iprintf>

	printf("(theta_re_offset > -1.0f) = %d\n", (int)(mainEncoder.Init.theta_re_offset > -1.0f));
 8010496:	4b20      	ldr	r3, [pc, #128]	; (8010518 <setZeroEncoder+0x288>)
 8010498:	edd3 7a01 	vldr	s15, [r3, #4]
 801049c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80104a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80104a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104a8:	bfcc      	ite	gt
 80104aa:	2301      	movgt	r3, #1
 80104ac:	2300      	movle	r3, #0
 80104ae:	b2db      	uxtb	r3, r3
 80104b0:	4619      	mov	r1, r3
 80104b2:	4824      	ldr	r0, [pc, #144]	; (8010544 <setZeroEncoder+0x2b4>)
 80104b4:	f002 fbfe 	bl	8012cb4 <iprintf>

#endif

	memcpy(flash_data, &mainEncoder.Init.theta_re_offset, 4);
 80104b8:	4b16      	ldr	r3, [pc, #88]	; (8010514 <setZeroEncoder+0x284>)
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	4a16      	ldr	r2, [pc, #88]	; (8010518 <setZeroEncoder+0x288>)
 80104be:	6852      	ldr	r2, [r2, #4]
 80104c0:	601a      	str	r2, [r3, #0]

	if (!Flash_store())
 80104c2:	f000 fac7 	bl	8010a54 <Flash_store>
 80104c6:	4603      	mov	r3, r0
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d102      	bne.n	80104d2 <setZeroEncoder+0x242>
	{
#if DEBUG_PRINT_ENABLE
		printf("Failed to write flash\n");
 80104cc:	481e      	ldr	r0, [pc, #120]	; (8010548 <setZeroEncoder+0x2b8>)
 80104ce:	f002 fc65 	bl	8012d9c <puts>
#endif
	}


#if DEBUG_PRINT_ENABLE
	printf("flash_data:%lu\n", *flash_data);
 80104d2:	4b10      	ldr	r3, [pc, #64]	; (8010514 <setZeroEncoder+0x284>)
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	4619      	mov	r1, r3
 80104da:	481c      	ldr	r0, [pc, #112]	; (801054c <setZeroEncoder+0x2bc>)
 80104dc:	f002 fbea 	bl	8012cb4 <iprintf>
#endif


	mainACR.forced_commute_enable = 0;
 80104e0:	4b11      	ldr	r3, [pc, #68]	; (8010528 <setZeroEncoder+0x298>)
 80104e2:	2200      	movs	r2, #0
 80104e4:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64

	ACR_Reset(&mainACR);
 80104e8:	480f      	ldr	r0, [pc, #60]	; (8010528 <setZeroEncoder+0x298>)
 80104ea:	f7fe fbb5 	bl	800ec58 <ACR_Reset>


#endif


}
 80104ee:	372c      	adds	r7, #44	; 0x2c
 80104f0:	46bd      	mov	sp, r7
 80104f2:	bd90      	pop	{r4, r7, pc}
 80104f4:	f3af 8000 	nop.w
 80104f8:	54442d18 	.word	0x54442d18
 80104fc:	401921fb 	.word	0x401921fb
 8010500:	54442d18 	.word	0x54442d18
 8010504:	c00921fb 	.word	0xc00921fb
 8010508:	54442d18 	.word	0x54442d18
 801050c:	400921fb 	.word	0x400921fb
 8010510:	40a00000 	.word	0x40a00000
 8010514:	20004770 	.word	0x20004770
 8010518:	20004728 	.word	0x20004728
 801051c:	47c35000 	.word	0x47c35000
 8010520:	08014ce8 	.word	0x08014ce8
 8010524:	08014cf8 	.word	0x08014cf8
 8010528:	200042f4 	.word	0x200042f4
 801052c:	00000000 	.word	0x00000000
 8010530:	08014d10 	.word	0x08014d10
 8010534:	461c4000 	.word	0x461c4000
 8010538:	08014d2c 	.word	0x08014d2c
 801053c:	08014d4c 	.word	0x08014d4c
 8010540:	08014d68 	.word	0x08014d68
 8010544:	08014d88 	.word	0x08014d88
 8010548:	08014da8 	.word	0x08014da8
 801054c:	08014dc0 	.word	0x08014dc0

08010550 <Encoder_Request>:

#endif


inline void Encoder_Request(Encoder_TypeDef *hEncoder)
{
 8010550:	b580      	push	{r7, lr}
 8010552:	b082      	sub	sp, #8
 8010554:	af00      	add	r7, sp, #0
 8010556:	6078      	str	r0, [r7, #4]


	// Reading Encoder for next sampling
	hEncoder->spi2txBuf[0] = 0xff;
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	22ff      	movs	r2, #255	; 0xff
 801055c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	hEncoder->spi2txBuf[1] = 0xff;
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	22ff      	movs	r2, #255	; 0xff
 8010564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

	HAL_GPIO_WritePin(hEncoder->Init.SPI_NSS_Port, hEncoder->Init.SPI_NSS_Pin, GPIO_PIN_RESET);
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	6918      	ldr	r0, [r3, #16]
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	8a9b      	ldrh	r3, [r3, #20]
 8010570:	2200      	movs	r2, #0
 8010572:	4619      	mov	r1, r3
 8010574:	f7fa ff54 	bl	800b420 <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive_IT(hEncoder->Init.hspi, hEncoder->spi2txBuf, hEncoder->spi2rxBuf, 1);
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	68d8      	ldr	r0, [r3, #12]
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	f103 0141 	add.w	r1, r3, #65	; 0x41
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	f103 0243 	add.w	r2, r3, #67	; 0x43
 8010588:	2301      	movs	r3, #1
 801058a:	f7fb fe79 	bl	800c280 <HAL_SPI_TransmitReceive_IT>


}
 801058e:	bf00      	nop
 8010590:	3708      	adds	r7, #8
 8010592:	46bd      	mov	sp, r7
 8010594:	bd80      	pop	{r7, pc}
	...

08010598 <Encoder_Refresh>:


inline int Encoder_Refresh(Encoder_TypeDef *hEncoder)
{
 8010598:	b5b0      	push	{r4, r5, r7, lr}
 801059a:	b082      	sub	sp, #8
 801059c:	af00      	add	r7, sp, #0
 801059e:	6078      	str	r0, [r7, #4]
	static float _theta;
	static float _theta_re;
	static float d_theta;

	// Reading RX Data from SPI Encoder
	HAL_GPIO_WritePin(hEncoder->Init.SPI_NSS_Port, hEncoder->Init.SPI_NSS_Pin, GPIO_PIN_SET);
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	6918      	ldr	r0, [r3, #16]
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	8a9b      	ldrh	r3, [r3, #20]
 80105a8:	2201      	movs	r2, #1
 80105aa:	4619      	mov	r1, r3
 80105ac:	f7fa ff38 	bl	800b420 <HAL_GPIO_WritePin>

	angle_raw = (hEncoder->spi2rxBuf[1] & 0x3f) << 8 | hEncoder->spi2rxBuf[0];
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80105b6:	021b      	lsls	r3, r3, #8
 80105b8:	b21b      	sxth	r3, r3
 80105ba:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80105be:	b21a      	sxth	r2, r3
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80105c6:	b21b      	sxth	r3, r3
 80105c8:	4313      	orrs	r3, r2
 80105ca:	b21b      	sxth	r3, r3
 80105cc:	b29a      	uxth	r2, r3
 80105ce:	4b62      	ldr	r3, [pc, #392]	; (8010758 <Encoder_Refresh+0x1c0>)
 80105d0:	801a      	strh	r2, [r3, #0]

	_theta = (float)angle_raw / (float)ENCODER_RESOL * 2.0f * M_PI + hEncoder->Init.theta_offset;
 80105d2:	4b61      	ldr	r3, [pc, #388]	; (8010758 <Encoder_Refresh+0x1c0>)
 80105d4:	881b      	ldrh	r3, [r3, #0]
 80105d6:	ee07 3a90 	vmov	s15, r3
 80105da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80105de:	eddf 6a5f 	vldr	s13, [pc, #380]	; 801075c <Encoder_Refresh+0x1c4>
 80105e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80105e6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80105ea:	ee17 0a90 	vmov	r0, s15
 80105ee:	f7f7 fee3 	bl	80083b8 <__aeabi_f2d>
 80105f2:	a353      	add	r3, pc, #332	; (adr r3, 8010740 <Encoder_Refresh+0x1a8>)
 80105f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105f8:	f7f7 ff36 	bl	8008468 <__aeabi_dmul>
 80105fc:	4603      	mov	r3, r0
 80105fe:	460c      	mov	r4, r1
 8010600:	4625      	mov	r5, r4
 8010602:	461c      	mov	r4, r3
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	4618      	mov	r0, r3
 801060a:	f7f7 fed5 	bl	80083b8 <__aeabi_f2d>
 801060e:	4602      	mov	r2, r0
 8010610:	460b      	mov	r3, r1
 8010612:	4620      	mov	r0, r4
 8010614:	4629      	mov	r1, r5
 8010616:	f7f7 fd71 	bl	80080fc <__adddf3>
 801061a:	4603      	mov	r3, r0
 801061c:	460c      	mov	r4, r1
 801061e:	4618      	mov	r0, r3
 8010620:	4621      	mov	r1, r4
 8010622:	f7f8 f9f9 	bl	8008a18 <__aeabi_d2f>
 8010626:	4602      	mov	r2, r0
 8010628:	4b4d      	ldr	r3, [pc, #308]	; (8010760 <Encoder_Refresh+0x1c8>)
 801062a:	601a      	str	r2, [r3, #0]

	if(_theta < 0.0f)			hEncoder->theta = _theta + 2 * M_PI;
 801062c:	4b4c      	ldr	r3, [pc, #304]	; (8010760 <Encoder_Refresh+0x1c8>)
 801062e:	edd3 7a00 	vldr	s15, [r3]
 8010632:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010636:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801063a:	d513      	bpl.n	8010664 <Encoder_Refresh+0xcc>
 801063c:	4b48      	ldr	r3, [pc, #288]	; (8010760 <Encoder_Refresh+0x1c8>)
 801063e:	681b      	ldr	r3, [r3, #0]
 8010640:	4618      	mov	r0, r3
 8010642:	f7f7 feb9 	bl	80083b8 <__aeabi_f2d>
 8010646:	a340      	add	r3, pc, #256	; (adr r3, 8010748 <Encoder_Refresh+0x1b0>)
 8010648:	e9d3 2300 	ldrd	r2, r3, [r3]
 801064c:	f7f7 fd56 	bl	80080fc <__adddf3>
 8010650:	4603      	mov	r3, r0
 8010652:	460c      	mov	r4, r1
 8010654:	4618      	mov	r0, r3
 8010656:	4621      	mov	r1, r4
 8010658:	f7f8 f9de 	bl	8008a18 <__aeabi_d2f>
 801065c:	4602      	mov	r2, r0
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	619a      	str	r2, [r3, #24]
 8010662:	e024      	b.n	80106ae <Encoder_Refresh+0x116>
	else if(_theta >= 2 * M_PI)	hEncoder->theta = _theta - 2 * M_PI;
 8010664:	4b3e      	ldr	r3, [pc, #248]	; (8010760 <Encoder_Refresh+0x1c8>)
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	4618      	mov	r0, r3
 801066a:	f7f7 fea5 	bl	80083b8 <__aeabi_f2d>
 801066e:	a336      	add	r3, pc, #216	; (adr r3, 8010748 <Encoder_Refresh+0x1b0>)
 8010670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010674:	f7f8 f97e 	bl	8008974 <__aeabi_dcmpge>
 8010678:	4603      	mov	r3, r0
 801067a:	2b00      	cmp	r3, #0
 801067c:	d013      	beq.n	80106a6 <Encoder_Refresh+0x10e>
 801067e:	4b38      	ldr	r3, [pc, #224]	; (8010760 <Encoder_Refresh+0x1c8>)
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	4618      	mov	r0, r3
 8010684:	f7f7 fe98 	bl	80083b8 <__aeabi_f2d>
 8010688:	a32f      	add	r3, pc, #188	; (adr r3, 8010748 <Encoder_Refresh+0x1b0>)
 801068a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801068e:	f7f7 fd33 	bl	80080f8 <__aeabi_dsub>
 8010692:	4603      	mov	r3, r0
 8010694:	460c      	mov	r4, r1
 8010696:	4618      	mov	r0, r3
 8010698:	4621      	mov	r1, r4
 801069a:	f7f8 f9bd 	bl	8008a18 <__aeabi_d2f>
 801069e:	4602      	mov	r2, r0
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	619a      	str	r2, [r3, #24]
 80106a4:	e003      	b.n	80106ae <Encoder_Refresh+0x116>
	else						hEncoder->theta = _theta;
 80106a6:	4b2e      	ldr	r3, [pc, #184]	; (8010760 <Encoder_Refresh+0x1c8>)
 80106a8:	681a      	ldr	r2, [r3, #0]
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	619a      	str	r2, [r3, #24]


	// 差分角度計算，初めのステップは速度ゼロとする
	if(hEncoder->firstLaunch != 0)
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80106b4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80106b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106bc:	d008      	beq.n	80106d0 <Encoder_Refresh+0x138>
	{
		d_theta = 0.0f;
 80106be:	4b29      	ldr	r3, [pc, #164]	; (8010764 <Encoder_Refresh+0x1cc>)
 80106c0:	f04f 0200 	mov.w	r2, #0
 80106c4:	601a      	str	r2, [r3, #0]
		hEncoder->firstLaunch = 0;
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	f04f 0200 	mov.w	r2, #0
 80106cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80106ce:	e00a      	b.n	80106e6 <Encoder_Refresh+0x14e>
	}
	else
	{
		d_theta = hEncoder->theta - hEncoder->p_theta;
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	ed93 7a06 	vldr	s14, [r3, #24]
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80106dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80106e0:	4b20      	ldr	r3, [pc, #128]	; (8010764 <Encoder_Refresh+0x1cc>)
 80106e2:	edc3 7a00 	vstr	s15, [r3]
	}
	hEncoder->p_theta = hEncoder->theta;
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	699a      	ldr	r2, [r3, #24]
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	625a      	str	r2, [r3, #36]	; 0x24

	// Unwrapping Process
	if(d_theta < - M_PI)
 80106ee:	4b1d      	ldr	r3, [pc, #116]	; (8010764 <Encoder_Refresh+0x1cc>)
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	4618      	mov	r0, r3
 80106f4:	f7f7 fe60 	bl	80083b8 <__aeabi_f2d>
 80106f8:	a315      	add	r3, pc, #84	; (adr r3, 8010750 <Encoder_Refresh+0x1b8>)
 80106fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106fe:	f7f8 f925 	bl	800894c <__aeabi_dcmplt>
 8010702:	4603      	mov	r3, r0
 8010704:	2b00      	cmp	r3, #0
 8010706:	d02f      	beq.n	8010768 <Encoder_Refresh+0x1d0>
	{
		d_theta += 2 * M_PI;
 8010708:	4b16      	ldr	r3, [pc, #88]	; (8010764 <Encoder_Refresh+0x1cc>)
 801070a:	681b      	ldr	r3, [r3, #0]
 801070c:	4618      	mov	r0, r3
 801070e:	f7f7 fe53 	bl	80083b8 <__aeabi_f2d>
 8010712:	a30d      	add	r3, pc, #52	; (adr r3, 8010748 <Encoder_Refresh+0x1b0>)
 8010714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010718:	f7f7 fcf0 	bl	80080fc <__adddf3>
 801071c:	4603      	mov	r3, r0
 801071e:	460c      	mov	r4, r1
 8010720:	4618      	mov	r0, r3
 8010722:	4621      	mov	r1, r4
 8010724:	f7f8 f978 	bl	8008a18 <__aeabi_d2f>
 8010728:	4602      	mov	r2, r0
 801072a:	4b0e      	ldr	r3, [pc, #56]	; (8010764 <Encoder_Refresh+0x1cc>)
 801072c:	601a      	str	r2, [r3, #0]
		hEncoder->turnCount += 1;
 801072e:	687b      	ldr	r3, [r7, #4]
 8010730:	69db      	ldr	r3, [r3, #28]
 8010732:	1c5a      	adds	r2, r3, #1
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	61da      	str	r2, [r3, #28]
 8010738:	e03b      	b.n	80107b2 <Encoder_Refresh+0x21a>
 801073a:	bf00      	nop
 801073c:	f3af 8000 	nop.w
 8010740:	54442d18 	.word	0x54442d18
 8010744:	400921fb 	.word	0x400921fb
 8010748:	54442d18 	.word	0x54442d18
 801074c:	401921fb 	.word	0x401921fb
 8010750:	54442d18 	.word	0x54442d18
 8010754:	c00921fb 	.word	0xc00921fb
 8010758:	2000025a 	.word	0x2000025a
 801075c:	46800000 	.word	0x46800000
 8010760:	2000025c 	.word	0x2000025c
 8010764:	20000260 	.word	0x20000260
	}
	else if(d_theta > M_PI)
 8010768:	4b93      	ldr	r3, [pc, #588]	; (80109b8 <Encoder_Refresh+0x420>)
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	4618      	mov	r0, r3
 801076e:	f7f7 fe23 	bl	80083b8 <__aeabi_f2d>
 8010772:	a389      	add	r3, pc, #548	; (adr r3, 8010998 <Encoder_Refresh+0x400>)
 8010774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010778:	f7f8 f906 	bl	8008988 <__aeabi_dcmpgt>
 801077c:	4603      	mov	r3, r0
 801077e:	2b00      	cmp	r3, #0
 8010780:	d017      	beq.n	80107b2 <Encoder_Refresh+0x21a>
	{
		d_theta -= 2 * M_PI;
 8010782:	4b8d      	ldr	r3, [pc, #564]	; (80109b8 <Encoder_Refresh+0x420>)
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	4618      	mov	r0, r3
 8010788:	f7f7 fe16 	bl	80083b8 <__aeabi_f2d>
 801078c:	a384      	add	r3, pc, #528	; (adr r3, 80109a0 <Encoder_Refresh+0x408>)
 801078e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010792:	f7f7 fcb1 	bl	80080f8 <__aeabi_dsub>
 8010796:	4603      	mov	r3, r0
 8010798:	460c      	mov	r4, r1
 801079a:	4618      	mov	r0, r3
 801079c:	4621      	mov	r1, r4
 801079e:	f7f8 f93b 	bl	8008a18 <__aeabi_d2f>
 80107a2:	4602      	mov	r2, r0
 80107a4:	4b84      	ldr	r3, [pc, #528]	; (80109b8 <Encoder_Refresh+0x420>)
 80107a6:	601a      	str	r2, [r3, #0]
		hEncoder->turnCount += -1;
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	69db      	ldr	r3, [r3, #28]
 80107ac:	1e5a      	subs	r2, r3, #1
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	61da      	str	r2, [r3, #28]
	}

	// 速度計算，LPF付き
	hEncoder->omega = hEncoder->omega * SPEED_LPF_COEFF + d_theta / hEncoder->Init.cycleTime * (1.0f - SPEED_LPF_COEFF);
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107b6:	4618      	mov	r0, r3
 80107b8:	f7f7 fdfe 	bl	80083b8 <__aeabi_f2d>
 80107bc:	a37a      	add	r3, pc, #488	; (adr r3, 80109a8 <Encoder_Refresh+0x410>)
 80107be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107c2:	f7f7 fe51 	bl	8008468 <__aeabi_dmul>
 80107c6:	4603      	mov	r3, r0
 80107c8:	460c      	mov	r4, r1
 80107ca:	4625      	mov	r5, r4
 80107cc:	461c      	mov	r4, r3
 80107ce:	4b7a      	ldr	r3, [pc, #488]	; (80109b8 <Encoder_Refresh+0x420>)
 80107d0:	ed93 7a00 	vldr	s14, [r3]
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	edd3 7a02 	vldr	s15, [r3, #8]
 80107da:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80107de:	ee16 0a90 	vmov	r0, s13
 80107e2:	f7f7 fde9 	bl	80083b8 <__aeabi_f2d>
 80107e6:	a372      	add	r3, pc, #456	; (adr r3, 80109b0 <Encoder_Refresh+0x418>)
 80107e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107ec:	f7f7 fe3c 	bl	8008468 <__aeabi_dmul>
 80107f0:	4602      	mov	r2, r0
 80107f2:	460b      	mov	r3, r1
 80107f4:	4620      	mov	r0, r4
 80107f6:	4629      	mov	r1, r5
 80107f8:	f7f7 fc80 	bl	80080fc <__adddf3>
 80107fc:	4603      	mov	r3, r0
 80107fe:	460c      	mov	r4, r1
 8010800:	4618      	mov	r0, r3
 8010802:	4621      	mov	r1, r4
 8010804:	f7f8 f908 	bl	8008a18 <__aeabi_d2f>
 8010808:	4602      	mov	r2, r0
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	629a      	str	r2, [r3, #40]	; 0x28

	// マルチターン角度更新
	hEncoder->theta_multiturn = hEncoder->theta + 2.0f * M_PI * hEncoder->turnCount;
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	699b      	ldr	r3, [r3, #24]
 8010812:	4618      	mov	r0, r3
 8010814:	f7f7 fdd0 	bl	80083b8 <__aeabi_f2d>
 8010818:	4604      	mov	r4, r0
 801081a:	460d      	mov	r5, r1
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	69db      	ldr	r3, [r3, #28]
 8010820:	4618      	mov	r0, r3
 8010822:	f7f7 fdb7 	bl	8008394 <__aeabi_i2d>
 8010826:	a35e      	add	r3, pc, #376	; (adr r3, 80109a0 <Encoder_Refresh+0x408>)
 8010828:	e9d3 2300 	ldrd	r2, r3, [r3]
 801082c:	f7f7 fe1c 	bl	8008468 <__aeabi_dmul>
 8010830:	4602      	mov	r2, r0
 8010832:	460b      	mov	r3, r1
 8010834:	4620      	mov	r0, r4
 8010836:	4629      	mov	r1, r5
 8010838:	f7f7 fc60 	bl	80080fc <__adddf3>
 801083c:	4603      	mov	r3, r0
 801083e:	460c      	mov	r4, r1
 8010840:	4618      	mov	r0, r3
 8010842:	4621      	mov	r1, r4
 8010844:	f7f8 f8e8 	bl	8008a18 <__aeabi_d2f>
 8010848:	4602      	mov	r2, r0
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	621a      	str	r2, [r3, #32]

	// 電気角取得
	_theta_re = fmodf((float)angle_raw / (float)ENCODER_RESOL * 2.0f * M_PI * POLE_PAIRS, 2.0f * M_PI) + hEncoder->Init.theta_re_offset;
 801084e:	4b5b      	ldr	r3, [pc, #364]	; (80109bc <Encoder_Refresh+0x424>)
 8010850:	881b      	ldrh	r3, [r3, #0]
 8010852:	ee07 3a90 	vmov	s15, r3
 8010856:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801085a:	eddf 6a59 	vldr	s13, [pc, #356]	; 80109c0 <Encoder_Refresh+0x428>
 801085e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010862:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8010866:	ee17 0a90 	vmov	r0, s15
 801086a:	f7f7 fda5 	bl	80083b8 <__aeabi_f2d>
 801086e:	a34a      	add	r3, pc, #296	; (adr r3, 8010998 <Encoder_Refresh+0x400>)
 8010870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010874:	f7f7 fdf8 	bl	8008468 <__aeabi_dmul>
 8010878:	4603      	mov	r3, r0
 801087a:	460c      	mov	r4, r1
 801087c:	4618      	mov	r0, r3
 801087e:	4621      	mov	r1, r4
 8010880:	f04f 0200 	mov.w	r2, #0
 8010884:	4b4f      	ldr	r3, [pc, #316]	; (80109c4 <Encoder_Refresh+0x42c>)
 8010886:	f7f7 fdef 	bl	8008468 <__aeabi_dmul>
 801088a:	4603      	mov	r3, r0
 801088c:	460c      	mov	r4, r1
 801088e:	4618      	mov	r0, r3
 8010890:	4621      	mov	r1, r4
 8010892:	f7f8 f8c1 	bl	8008a18 <__aeabi_d2f>
 8010896:	4603      	mov	r3, r0
 8010898:	eddf 0a4b 	vldr	s1, [pc, #300]	; 80109c8 <Encoder_Refresh+0x430>
 801089c:	ee00 3a10 	vmov	s0, r3
 80108a0:	f004 f92e 	bl	8014b00 <fmodf>
 80108a4:	eeb0 7a40 	vmov.f32	s14, s0
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	edd3 7a01 	vldr	s15, [r3, #4]
 80108ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80108b2:	4b46      	ldr	r3, [pc, #280]	; (80109cc <Encoder_Refresh+0x434>)
 80108b4:	edc3 7a00 	vstr	s15, [r3]

	if(_theta_re < 0.0f)			hEncoder->theta_re = _theta_re + 2 * M_PI;
 80108b8:	4b44      	ldr	r3, [pc, #272]	; (80109cc <Encoder_Refresh+0x434>)
 80108ba:	edd3 7a00 	vldr	s15, [r3]
 80108be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80108c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108c6:	d513      	bpl.n	80108f0 <Encoder_Refresh+0x358>
 80108c8:	4b40      	ldr	r3, [pc, #256]	; (80109cc <Encoder_Refresh+0x434>)
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	4618      	mov	r0, r3
 80108ce:	f7f7 fd73 	bl	80083b8 <__aeabi_f2d>
 80108d2:	a333      	add	r3, pc, #204	; (adr r3, 80109a0 <Encoder_Refresh+0x408>)
 80108d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108d8:	f7f7 fc10 	bl	80080fc <__adddf3>
 80108dc:	4603      	mov	r3, r0
 80108de:	460c      	mov	r4, r1
 80108e0:	4618      	mov	r0, r3
 80108e2:	4621      	mov	r1, r4
 80108e4:	f7f8 f898 	bl	8008a18 <__aeabi_d2f>
 80108e8:	4602      	mov	r2, r0
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	635a      	str	r2, [r3, #52]	; 0x34
 80108ee:	e024      	b.n	801093a <Encoder_Refresh+0x3a2>
	else if(_theta_re >= 2 * M_PI)	hEncoder->theta_re = _theta_re - 2 * M_PI;
 80108f0:	4b36      	ldr	r3, [pc, #216]	; (80109cc <Encoder_Refresh+0x434>)
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	4618      	mov	r0, r3
 80108f6:	f7f7 fd5f 	bl	80083b8 <__aeabi_f2d>
 80108fa:	a329      	add	r3, pc, #164	; (adr r3, 80109a0 <Encoder_Refresh+0x408>)
 80108fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010900:	f7f8 f838 	bl	8008974 <__aeabi_dcmpge>
 8010904:	4603      	mov	r3, r0
 8010906:	2b00      	cmp	r3, #0
 8010908:	d013      	beq.n	8010932 <Encoder_Refresh+0x39a>
 801090a:	4b30      	ldr	r3, [pc, #192]	; (80109cc <Encoder_Refresh+0x434>)
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	4618      	mov	r0, r3
 8010910:	f7f7 fd52 	bl	80083b8 <__aeabi_f2d>
 8010914:	a322      	add	r3, pc, #136	; (adr r3, 80109a0 <Encoder_Refresh+0x408>)
 8010916:	e9d3 2300 	ldrd	r2, r3, [r3]
 801091a:	f7f7 fbed 	bl	80080f8 <__aeabi_dsub>
 801091e:	4603      	mov	r3, r0
 8010920:	460c      	mov	r4, r1
 8010922:	4618      	mov	r0, r3
 8010924:	4621      	mov	r1, r4
 8010926:	f7f8 f877 	bl	8008a18 <__aeabi_d2f>
 801092a:	4602      	mov	r2, r0
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	635a      	str	r2, [r3, #52]	; 0x34
 8010930:	e003      	b.n	801093a <Encoder_Refresh+0x3a2>
	else							hEncoder->theta_re = _theta_re;
 8010932:	4b26      	ldr	r3, [pc, #152]	; (80109cc <Encoder_Refresh+0x434>)
 8010934:	681a      	ldr	r2, [r3, #0]
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	635a      	str	r2, [r3, #52]	; 0x34

	hEncoder->cos_theta_re = sin_table2[(int)((hEncoder->theta_re * 0.3183f + 0.5f) * 5000.0f)];
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8010940:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80109d0 <Encoder_Refresh+0x438>
 8010944:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010948:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 801094c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010950:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80109d4 <Encoder_Refresh+0x43c>
 8010954:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010958:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801095c:	ee17 3a90 	vmov	r3, s15
 8010960:	4a1d      	ldr	r2, [pc, #116]	; (80109d8 <Encoder_Refresh+0x440>)
 8010962:	009b      	lsls	r3, r3, #2
 8010964:	4413      	add	r3, r2
 8010966:	681a      	ldr	r2, [r3, #0]
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	639a      	str	r2, [r3, #56]	; 0x38
	hEncoder->sin_theta_re = sin_table2[(int)(hEncoder->theta_re * 1591.54943f)];
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8010972:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80109dc <Encoder_Refresh+0x444>
 8010976:	ee67 7a87 	vmul.f32	s15, s15, s14
 801097a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801097e:	ee17 3a90 	vmov	r3, s15
 8010982:	4a15      	ldr	r2, [pc, #84]	; (80109d8 <Encoder_Refresh+0x440>)
 8010984:	009b      	lsls	r3, r3, #2
 8010986:	4413      	add	r3, r2
 8010988:	681a      	ldr	r2, [r3, #0]
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	63da      	str	r2, [r3, #60]	; 0x3c


	return 0;
 801098e:	2300      	movs	r3, #0

}
 8010990:	4618      	mov	r0, r3
 8010992:	3708      	adds	r7, #8
 8010994:	46bd      	mov	sp, r7
 8010996:	bdb0      	pop	{r4, r5, r7, pc}
 8010998:	54442d18 	.word	0x54442d18
 801099c:	400921fb 	.word	0x400921fb
 80109a0:	54442d18 	.word	0x54442d18
 80109a4:	401921fb 	.word	0x401921fb
 80109a8:	aa57066e 	.word	0xaa57066e
 80109ac:	3fe859a4 	.word	0x3fe859a4
 80109b0:	56a3e648 	.word	0x56a3e648
 80109b4:	3fce996d 	.word	0x3fce996d
 80109b8:	20000260 	.word	0x20000260
 80109bc:	2000025a 	.word	0x2000025a
 80109c0:	46800000 	.word	0x46800000
 80109c4:	40280000 	.word	0x40280000
 80109c8:	40c90fdb 	.word	0x40c90fdb
 80109cc:	20000264 	.word	0x20000264
 80109d0:	3ea2f838 	.word	0x3ea2f838
 80109d4:	459c4000 	.word	0x459c4000
 80109d8:	08014f30 	.word	0x08014f30
 80109dc:	44c6f195 	.word	0x44c6f195

080109e0 <Flash_clear>:
extern char _backup_flash_start;


// Flashのsectoe1を消去
HAL_StatusTypeDef Flash_clear()
{
 80109e0:	b580      	push	{r7, lr}
 80109e2:	b088      	sub	sp, #32
 80109e4:	af00      	add	r7, sp, #0
    HAL_FLASH_Unlock();
 80109e6:	f7fa f8e1 	bl	800abac <HAL_FLASH_Unlock>

    FLASH_EraseInitTypeDef EraseInitStruct;
    EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 80109ea:	2300      	movs	r3, #0
 80109ec:	60bb      	str	r3, [r7, #8]
    EraseInitStruct.Sector = BACKUP_FLASH_SECTOR_NUM;
 80109ee:	2301      	movs	r3, #1
 80109f0:	613b      	str	r3, [r7, #16]
    EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80109f2:	2302      	movs	r3, #2
 80109f4:	61bb      	str	r3, [r7, #24]
    EraseInitStruct.NbSectors = 1;
 80109f6:	2301      	movs	r3, #1
 80109f8:	617b      	str	r3, [r7, #20]

    // Eraseに失敗したsector番号がerror_sectorに入る
    // 正常にEraseができたときは0xFFFFFFFFが入る
    uint32_t error_sector;
    HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&EraseInitStruct, &error_sector);
 80109fa:	1d3a      	adds	r2, r7, #4
 80109fc:	f107 0308 	add.w	r3, r7, #8
 8010a00:	4611      	mov	r1, r2
 8010a02:	4618      	mov	r0, r3
 8010a04:	f7fa fa40 	bl	800ae88 <HAL_FLASHEx_Erase>
 8010a08:	4603      	mov	r3, r0
 8010a0a:	77fb      	strb	r3, [r7, #31]

    HAL_FLASH_Lock();
 8010a0c:	f7fa f8f0 	bl	800abf0 <HAL_FLASH_Lock>

    return result == HAL_OK && error_sector == 0xFFFFFFFF;
 8010a10:	7ffb      	ldrb	r3, [r7, #31]
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d105      	bne.n	8010a22 <Flash_clear+0x42>
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a1c:	d101      	bne.n	8010a22 <Flash_clear+0x42>
 8010a1e:	2301      	movs	r3, #1
 8010a20:	e000      	b.n	8010a24 <Flash_clear+0x44>
 8010a22:	2300      	movs	r3, #0
 8010a24:	b2db      	uxtb	r3, r3
}
 8010a26:	4618      	mov	r0, r3
 8010a28:	3720      	adds	r7, #32
 8010a2a:	46bd      	mov	sp, r7
 8010a2c:	bd80      	pop	{r7, pc}
	...

08010a30 <Flash_load>:

// Flashのsector1の内容を全てwork_ramに読み出す
// work_ramの先頭アドレスを返す
uint8_t* Flash_load()
{
 8010a30:	b580      	push	{r7, lr}
 8010a32:	af00      	add	r7, sp, #0
    memcpy(work_ram, &_backup_flash_start, BACKUP_FLASH_SECTOR_SIZE);
 8010a34:	4a05      	ldr	r2, [pc, #20]	; (8010a4c <Flash_load+0x1c>)
 8010a36:	4b06      	ldr	r3, [pc, #24]	; (8010a50 <Flash_load+0x20>)
 8010a38:	4610      	mov	r0, r2
 8010a3a:	4619      	mov	r1, r3
 8010a3c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010a40:	461a      	mov	r2, r3
 8010a42:	f001 fcc7 	bl	80123d4 <memcpy>
    return work_ram;
 8010a46:	4b01      	ldr	r3, [pc, #4]	; (8010a4c <Flash_load+0x1c>)
}
 8010a48:	4618      	mov	r0, r3
 8010a4a:	bd80      	pop	{r7, pc}
 8010a4c:	20000268 	.word	0x20000268
 8010a50:	08004000 	.word	0x08004000

08010a54 <Flash_store>:

// Flashのsector1を消去後、work_ramにあるデータを書き込む
HAL_StatusTypeDef Flash_store()
{
 8010a54:	b590      	push	{r4, r7, lr}
 8010a56:	b085      	sub	sp, #20
 8010a58:	af00      	add	r7, sp, #0
    // Flashをclear
    if (!Flash_clear()) return HAL_ERROR;
 8010a5a:	f7ff ffc1 	bl	80109e0 <Flash_clear>
 8010a5e:	4603      	mov	r3, r0
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d101      	bne.n	8010a68 <Flash_store+0x14>
 8010a64:	2301      	movs	r3, #1
 8010a66:	e02f      	b.n	8010ac8 <Flash_store+0x74>

    uint32_t *p_work_ram = (uint32_t*)work_ram;
 8010a68:	4b19      	ldr	r3, [pc, #100]	; (8010ad0 <Flash_store+0x7c>)
 8010a6a:	607b      	str	r3, [r7, #4]

    HAL_FLASH_Unlock();
 8010a6c:	f7fa f89e 	bl	800abac <HAL_FLASH_Unlock>

    // work_ramにあるデータを4バイトごとまとめて書き込む
    HAL_StatusTypeDef result;
    const size_t write_cnt = BACKUP_FLASH_SECTOR_SIZE / sizeof(uint32_t);
 8010a70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010a74:	603b      	str	r3, [r7, #0]

    for (size_t i=0; i<write_cnt; i++)
 8010a76:	2300      	movs	r3, #0
 8010a78:	60bb      	str	r3, [r7, #8]
 8010a7a:	e017      	b.n	8010aac <Flash_store+0x58>
    {
        result = HAL_FLASH_Program(
                    FLASH_TYPEPROGRAM_WORD,
                    (uint32_t)(&_backup_flash_start) + sizeof(uint32_t) * i,
 8010a7c:	68bb      	ldr	r3, [r7, #8]
 8010a7e:	009b      	lsls	r3, r3, #2
 8010a80:	4a14      	ldr	r2, [pc, #80]	; (8010ad4 <Flash_store+0x80>)
        result = HAL_FLASH_Program(
 8010a82:	1899      	adds	r1, r3, r2
                    p_work_ram[i]
 8010a84:	68bb      	ldr	r3, [r7, #8]
 8010a86:	009b      	lsls	r3, r3, #2
 8010a88:	687a      	ldr	r2, [r7, #4]
 8010a8a:	4413      	add	r3, r2
 8010a8c:	681b      	ldr	r3, [r3, #0]
        result = HAL_FLASH_Program(
 8010a8e:	f04f 0400 	mov.w	r4, #0
 8010a92:	461a      	mov	r2, r3
 8010a94:	4623      	mov	r3, r4
 8010a96:	2002      	movs	r0, #2
 8010a98:	f7fa f834 	bl	800ab04 <HAL_FLASH_Program>
 8010a9c:	4603      	mov	r3, r0
 8010a9e:	73fb      	strb	r3, [r7, #15]
                );
        if (result != HAL_OK) break;
 8010aa0:	7bfb      	ldrb	r3, [r7, #15]
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d107      	bne.n	8010ab6 <Flash_store+0x62>
    for (size_t i=0; i<write_cnt; i++)
 8010aa6:	68bb      	ldr	r3, [r7, #8]
 8010aa8:	3301      	adds	r3, #1
 8010aaa:	60bb      	str	r3, [r7, #8]
 8010aac:	68ba      	ldr	r2, [r7, #8]
 8010aae:	683b      	ldr	r3, [r7, #0]
 8010ab0:	429a      	cmp	r2, r3
 8010ab2:	d3e3      	bcc.n	8010a7c <Flash_store+0x28>
 8010ab4:	e000      	b.n	8010ab8 <Flash_store+0x64>
        if (result != HAL_OK) break;
 8010ab6:	bf00      	nop
    }

    HAL_FLASH_Lock();
 8010ab8:	f7fa f89a 	bl	800abf0 <HAL_FLASH_Lock>

    return result == HAL_OK;
 8010abc:	7bfb      	ldrb	r3, [r7, #15]
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	bf0c      	ite	eq
 8010ac2:	2301      	moveq	r3, #1
 8010ac4:	2300      	movne	r3, #0
 8010ac6:	b2db      	uxtb	r3, r3
}
 8010ac8:	4618      	mov	r0, r3
 8010aca:	3714      	adds	r7, #20
 8010acc:	46bd      	mov	sp, r7
 8010ace:	bd90      	pop	{r4, r7, pc}
 8010ad0:	20000268 	.word	0x20000268
 8010ad4:	08004000 	.word	0x08004000

08010ad8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8010ad8:	b580      	push	{r7, lr}
 8010ada:	b08a      	sub	sp, #40	; 0x28
 8010adc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010ade:	f107 0314 	add.w	r3, r7, #20
 8010ae2:	2200      	movs	r2, #0
 8010ae4:	601a      	str	r2, [r3, #0]
 8010ae6:	605a      	str	r2, [r3, #4]
 8010ae8:	609a      	str	r2, [r3, #8]
 8010aea:	60da      	str	r2, [r3, #12]
 8010aec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8010aee:	2300      	movs	r3, #0
 8010af0:	613b      	str	r3, [r7, #16]
 8010af2:	4b45      	ldr	r3, [pc, #276]	; (8010c08 <MX_GPIO_Init+0x130>)
 8010af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010af6:	4a44      	ldr	r2, [pc, #272]	; (8010c08 <MX_GPIO_Init+0x130>)
 8010af8:	f043 0304 	orr.w	r3, r3, #4
 8010afc:	6313      	str	r3, [r2, #48]	; 0x30
 8010afe:	4b42      	ldr	r3, [pc, #264]	; (8010c08 <MX_GPIO_Init+0x130>)
 8010b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b02:	f003 0304 	and.w	r3, r3, #4
 8010b06:	613b      	str	r3, [r7, #16]
 8010b08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8010b0a:	2300      	movs	r3, #0
 8010b0c:	60fb      	str	r3, [r7, #12]
 8010b0e:	4b3e      	ldr	r3, [pc, #248]	; (8010c08 <MX_GPIO_Init+0x130>)
 8010b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b12:	4a3d      	ldr	r2, [pc, #244]	; (8010c08 <MX_GPIO_Init+0x130>)
 8010b14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b18:	6313      	str	r3, [r2, #48]	; 0x30
 8010b1a:	4b3b      	ldr	r3, [pc, #236]	; (8010c08 <MX_GPIO_Init+0x130>)
 8010b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010b22:	60fb      	str	r3, [r7, #12]
 8010b24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8010b26:	2300      	movs	r3, #0
 8010b28:	60bb      	str	r3, [r7, #8]
 8010b2a:	4b37      	ldr	r3, [pc, #220]	; (8010c08 <MX_GPIO_Init+0x130>)
 8010b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b2e:	4a36      	ldr	r2, [pc, #216]	; (8010c08 <MX_GPIO_Init+0x130>)
 8010b30:	f043 0301 	orr.w	r3, r3, #1
 8010b34:	6313      	str	r3, [r2, #48]	; 0x30
 8010b36:	4b34      	ldr	r3, [pc, #208]	; (8010c08 <MX_GPIO_Init+0x130>)
 8010b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b3a:	f003 0301 	and.w	r3, r3, #1
 8010b3e:	60bb      	str	r3, [r7, #8]
 8010b40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8010b42:	2300      	movs	r3, #0
 8010b44:	607b      	str	r3, [r7, #4]
 8010b46:	4b30      	ldr	r3, [pc, #192]	; (8010c08 <MX_GPIO_Init+0x130>)
 8010b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b4a:	4a2f      	ldr	r2, [pc, #188]	; (8010c08 <MX_GPIO_Init+0x130>)
 8010b4c:	f043 0302 	orr.w	r3, r3, #2
 8010b50:	6313      	str	r3, [r2, #48]	; 0x30
 8010b52:	4b2d      	ldr	r3, [pc, #180]	; (8010c08 <MX_GPIO_Init+0x130>)
 8010b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010b56:	f003 0302 	and.w	r3, r3, #2
 8010b5a:	607b      	str	r3, [r7, #4]
 8010b5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DB1_Pin|OP_CAL_Pin|GATE_EN_Pin 
 8010b5e:	2200      	movs	r2, #0
 8010b60:	f248 6160 	movw	r1, #34400	; 0x8660
 8010b64:	4829      	ldr	r0, [pc, #164]	; (8010c0c <MX_GPIO_Init+0x134>)
 8010b66:	f7fa fc5b 	bl	800b420 <HAL_GPIO_WritePin>
                          |SPI3_NSS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_NSS_Pin|DB2_Pin|DB0_Pin, GPIO_PIN_RESET);
 8010b6a:	2200      	movs	r2, #0
 8010b6c:	f241 0150 	movw	r1, #4176	; 0x1050
 8010b70:	4827      	ldr	r0, [pc, #156]	; (8010c10 <MX_GPIO_Init+0x138>)
 8010b72:	f7fa fc55 	bl	800b420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8010b76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010b7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8010b7c:	4b25      	ldr	r3, [pc, #148]	; (8010c14 <MX_GPIO_Init+0x13c>)
 8010b7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010b80:	2300      	movs	r3, #0
 8010b82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8010b84:	f107 0314 	add.w	r3, r7, #20
 8010b88:	4619      	mov	r1, r3
 8010b8a:	4823      	ldr	r0, [pc, #140]	; (8010c18 <MX_GPIO_Init+0x140>)
 8010b8c:	f7fa fa9e 	bl	800b0cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|DB1_Pin|OP_CAL_Pin|GATE_EN_Pin 
 8010b90:	f248 6360 	movw	r3, #34400	; 0x8660
 8010b94:	617b      	str	r3, [r7, #20]
                          |SPI3_NSS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010b96:	2301      	movs	r3, #1
 8010b98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010b9a:	2300      	movs	r3, #0
 8010b9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010b9e:	2300      	movs	r3, #0
 8010ba0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010ba2:	f107 0314 	add.w	r3, r7, #20
 8010ba6:	4619      	mov	r1, r3
 8010ba8:	4818      	ldr	r0, [pc, #96]	; (8010c0c <MX_GPIO_Init+0x134>)
 8010baa:	f7fa fa8f 	bl	800b0cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SPI2_NSS_Pin|DB2_Pin|DB0_Pin;
 8010bae:	f241 0350 	movw	r3, #4176	; 0x1050
 8010bb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010bb4:	2301      	movs	r3, #1
 8010bb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010bb8:	2300      	movs	r3, #0
 8010bba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010bbc:	2300      	movs	r3, #0
 8010bbe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010bc0:	f107 0314 	add.w	r3, r7, #20
 8010bc4:	4619      	mov	r1, r3
 8010bc6:	4812      	ldr	r0, [pc, #72]	; (8010c10 <MX_GPIO_Init+0x138>)
 8010bc8:	f7fa fa80 	bl	800b0cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CH_b0_Pin|CH_b1_Pin|CH_b2_Pin;
 8010bcc:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8010bd0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010bd2:	2300      	movs	r3, #0
 8010bd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8010bd6:	2301      	movs	r3, #1
 8010bd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8010bda:	f107 0314 	add.w	r3, r7, #20
 8010bde:	4619      	mov	r1, r3
 8010be0:	480b      	ldr	r0, [pc, #44]	; (8010c10 <MX_GPIO_Init+0x138>)
 8010be2:	f7fa fa73 	bl	800b0cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BR_FLT_Pin;
 8010be6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010bea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010bec:	2300      	movs	r3, #0
 8010bee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010bf0:	2300      	movs	r3, #0
 8010bf2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BR_FLT_GPIO_Port, &GPIO_InitStruct);
 8010bf4:	f107 0314 	add.w	r3, r7, #20
 8010bf8:	4619      	mov	r1, r3
 8010bfa:	4804      	ldr	r0, [pc, #16]	; (8010c0c <MX_GPIO_Init+0x134>)
 8010bfc:	f7fa fa66 	bl	800b0cc <HAL_GPIO_Init>

}
 8010c00:	bf00      	nop
 8010c02:	3728      	adds	r7, #40	; 0x28
 8010c04:	46bd      	mov	sp, r7
 8010c06:	bd80      	pop	{r7, pc}
 8010c08:	40023800 	.word	0x40023800
 8010c0c:	40020000 	.word	0x40020000
 8010c10:	40020400 	.word	0x40020400
 8010c14:	10210000 	.word	0x10210000
 8010c18:	40020800 	.word	0x40020800

08010c1c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
void __io_putchar(uint8_t ch)
{
 8010c1c:	b580      	push	{r7, lr}
 8010c1e:	b082      	sub	sp, #8
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	4603      	mov	r3, r0
 8010c24:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart2, &ch, 1, 1);
 8010c26:	1df9      	adds	r1, r7, #7
 8010c28:	2301      	movs	r3, #1
 8010c2a:	2201      	movs	r2, #1
 8010c2c:	4803      	ldr	r0, [pc, #12]	; (8010c3c <__io_putchar+0x20>)
 8010c2e:	f7fd f818 	bl	800dc62 <HAL_UART_Transmit>
}
 8010c32:	bf00      	nop
 8010c34:	3708      	adds	r7, #8
 8010c36:	46bd      	mov	sp, r7
 8010c38:	bd80      	pop	{r7, pc}
 8010c3a:	bf00      	nop
 8010c3c:	20004864 	.word	0x20004864

08010c40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8010c40:	b580      	push	{r7, lr}
 8010c42:	b082      	sub	sp, #8
 8010c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */


	int count = 0;
 8010c46:	2300      	movs	r3, #0
 8010c48:	607b      	str	r3, [r7, #4]
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8010c4a:	f7f8 f8b5 	bl	8008db8 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8010c4e:	f000 f95f 	bl	8010f10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8010c52:	f7ff ff41 	bl	8010ad8 <MX_GPIO_Init>
  MX_DMA_Init();
 8010c56:	f7ff faa1 	bl	801019c <MX_DMA_Init>
  MX_ADC1_Init();
 8010c5a:	f7fe fea3 	bl	800f9a4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8010c5e:	f7fe fef3 	bl	800fa48 <MX_ADC2_Init>
  MX_ADC3_Init();
 8010c62:	f7fe ff43 	bl	800faec <MX_ADC3_Init>
  MX_CAN1_Init();
 8010c66:	f7ff f8f1 	bl	800fe4c <MX_CAN1_Init>
  MX_SPI2_Init();
 8010c6a:	f000 fed3 	bl	8011a14 <MX_SPI2_Init>
  MX_SPI3_Init();
 8010c6e:	f000 ff09 	bl	8011a84 <MX_SPI3_Init>
  MX_TIM8_Init();
 8010c72:	f001 f987 	bl	8011f84 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8010c76:	f001 fadf 	bl	8012238 <MX_USART2_UART_Init>


  //initialise_monitor_handles();


  DRV_Init();
 8010c7a:	f7fe fdfb 	bl	800f874 <DRV_Init>
  //UartPrintf(&huart2, "Hello world\n");


#if DEBUG_PRINT_ENABLE

  printf("Hello\n");
 8010c7e:	4893      	ldr	r0, [pc, #588]	; (8010ecc <main+0x28c>)
 8010c80:	f002 f88c 	bl	8012d9c <puts>

#endif


  // Gate Enable
  HAL_GPIO_WritePin(GATE_EN_GPIO_Port, GATE_EN_Pin, GPIO_PIN_SET);
 8010c84:	2201      	movs	r2, #1
 8010c86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8010c8a:	4891      	ldr	r0, [pc, #580]	; (8010ed0 <main+0x290>)
 8010c8c:	f7fa fbc8 	bl	800b420 <HAL_GPIO_WritePin>


  //printf("Hello SPI Gate Driver\n");


  DRV_ReadData(&drv8323, ADDR_OCP_Control);
 8010c90:	2105      	movs	r1, #5
 8010c92:	4890      	ldr	r0, [pc, #576]	; (8010ed4 <main+0x294>)
 8010c94:	f7fe fe43 	bl	800f91e <DRV_ReadData>

  drv8323.Reg.OCP_Control.DEAD_TIME = 0b01; // Dead Time : 100ns
 8010c98:	4a8e      	ldr	r2, [pc, #568]	; (8010ed4 <main+0x294>)
 8010c9a:	7d53      	ldrb	r3, [r2, #21]
 8010c9c:	2101      	movs	r1, #1
 8010c9e:	f361 0301 	bfi	r3, r1, #0, #2
 8010ca2:	7553      	strb	r3, [r2, #21]
  drv8323.Reg.OCP_Control.OCP_MODE = 0b00; // Overcurrentcausesa latchedfault
 8010ca4:	4a8b      	ldr	r2, [pc, #556]	; (8010ed4 <main+0x294>)
 8010ca6:	7d13      	ldrb	r3, [r2, #20]
 8010ca8:	f36f 1387 	bfc	r3, #6, #2
 8010cac:	7513      	strb	r3, [r2, #20]
  drv8323.Reg.OCP_Control.OCP_DEG = 0b11; // Deglitch Time of 8us
 8010cae:	4a89      	ldr	r2, [pc, #548]	; (8010ed4 <main+0x294>)
 8010cb0:	7d13      	ldrb	r3, [r2, #20]
 8010cb2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8010cb6:	7513      	strb	r3, [r2, #20]
  drv8323.Reg.OCP_Control.VDS_LVL = 0b1001; // VDS = 0.75V -> ID = 75A
 8010cb8:	4a86      	ldr	r2, [pc, #536]	; (8010ed4 <main+0x294>)
 8010cba:	7d13      	ldrb	r3, [r2, #20]
 8010cbc:	2109      	movs	r1, #9
 8010cbe:	f361 0303 	bfi	r3, r1, #0, #4
 8010cc2:	7513      	strb	r3, [r2, #20]

  DRV_WriteData(&drv8323, ADDR_OCP_Control);
 8010cc4:	2105      	movs	r1, #5
 8010cc6:	4883      	ldr	r0, [pc, #524]	; (8010ed4 <main+0x294>)
 8010cc8:	f7fe fdec 	bl	800f8a4 <DRV_WriteData>


  DRV_ReadData(&drv8323, ADDR_CSA_Control);
 8010ccc:	2106      	movs	r1, #6
 8010cce:	4881      	ldr	r0, [pc, #516]	; (8010ed4 <main+0x294>)
 8010cd0:	f7fe fe25 	bl	800f91e <DRV_ReadData>

  drv8323.Reg.CSA_Control.SEN_LVL = 0b11;	// Vsense = 0.5V -> 50A
 8010cd4:	4a7f      	ldr	r2, [pc, #508]	; (8010ed4 <main+0x294>)
 8010cd6:	7e13      	ldrb	r3, [r2, #24]
 8010cd8:	f043 0303 	orr.w	r3, r3, #3
 8010cdc:	7613      	strb	r3, [r2, #24]
  drv8323.Reg.CSA_Control.CSA_GAIN = 0b01;	// Amplifier Gain = 10V/V
 8010cde:	4a7d      	ldr	r2, [pc, #500]	; (8010ed4 <main+0x294>)
 8010ce0:	7e13      	ldrb	r3, [r2, #24]
 8010ce2:	2101      	movs	r1, #1
 8010ce4:	f361 1387 	bfi	r3, r1, #6, #2
 8010ce8:	7613      	strb	r3, [r2, #24]

  DRV_WriteData(&drv8323, ADDR_CSA_Control);
 8010cea:	2106      	movs	r1, #6
 8010cec:	4879      	ldr	r0, [pc, #484]	; (8010ed4 <main+0x294>)
 8010cee:	f7fe fdd9 	bl	800f8a4 <DRV_WriteData>


#if DEBUG_PRINT_ENABLE

  PRINT_HEX(drv8323.Reg.FaultStatus1.word);
 8010cf2:	4b78      	ldr	r3, [pc, #480]	; (8010ed4 <main+0x294>)
 8010cf4:	881b      	ldrh	r3, [r3, #0]
 8010cf6:	4619      	mov	r1, r3
 8010cf8:	4877      	ldr	r0, [pc, #476]	; (8010ed8 <main+0x298>)
 8010cfa:	f001 ffdb 	bl	8012cb4 <iprintf>
  PRINT_HEX(drv8323.Reg.FaultStatus2.word);
 8010cfe:	4b75      	ldr	r3, [pc, #468]	; (8010ed4 <main+0x294>)
 8010d00:	889b      	ldrh	r3, [r3, #4]
 8010d02:	4619      	mov	r1, r3
 8010d04:	4875      	ldr	r0, [pc, #468]	; (8010edc <main+0x29c>)
 8010d06:	f001 ffd5 	bl	8012cb4 <iprintf>
  PRINT_HEX(drv8323.Reg.DriverControl.word);
 8010d0a:	4b72      	ldr	r3, [pc, #456]	; (8010ed4 <main+0x294>)
 8010d0c:	891b      	ldrh	r3, [r3, #8]
 8010d0e:	4619      	mov	r1, r3
 8010d10:	4873      	ldr	r0, [pc, #460]	; (8010ee0 <main+0x2a0>)
 8010d12:	f001 ffcf 	bl	8012cb4 <iprintf>
  PRINT_HEX(drv8323.Reg.GateDrive_HS.word);
 8010d16:	4b6f      	ldr	r3, [pc, #444]	; (8010ed4 <main+0x294>)
 8010d18:	899b      	ldrh	r3, [r3, #12]
 8010d1a:	4619      	mov	r1, r3
 8010d1c:	4871      	ldr	r0, [pc, #452]	; (8010ee4 <main+0x2a4>)
 8010d1e:	f001 ffc9 	bl	8012cb4 <iprintf>
  PRINT_HEX(drv8323.Reg.GateDrive_LS.word);
 8010d22:	4b6c      	ldr	r3, [pc, #432]	; (8010ed4 <main+0x294>)
 8010d24:	8a1b      	ldrh	r3, [r3, #16]
 8010d26:	4619      	mov	r1, r3
 8010d28:	486f      	ldr	r0, [pc, #444]	; (8010ee8 <main+0x2a8>)
 8010d2a:	f001 ffc3 	bl	8012cb4 <iprintf>
  PRINT_HEX(drv8323.Reg.OCP_Control.word);
 8010d2e:	4b69      	ldr	r3, [pc, #420]	; (8010ed4 <main+0x294>)
 8010d30:	8a9b      	ldrh	r3, [r3, #20]
 8010d32:	4619      	mov	r1, r3
 8010d34:	486d      	ldr	r0, [pc, #436]	; (8010eec <main+0x2ac>)
 8010d36:	f001 ffbd 	bl	8012cb4 <iprintf>
  PRINT_HEX(drv8323.Reg.CSA_Control.word);
 8010d3a:	4b66      	ldr	r3, [pc, #408]	; (8010ed4 <main+0x294>)
 8010d3c:	8b1b      	ldrh	r3, [r3, #24]
 8010d3e:	4619      	mov	r1, r3
 8010d40:	486b      	ldr	r0, [pc, #428]	; (8010ef0 <main+0x2b0>)
 8010d42:	f001 ffb7 	bl	8012cb4 <iprintf>

#endif

  // Current Sensing Auto Offset Calibration
  HAL_GPIO_WritePin(OP_CAL_GPIO_Port, OP_CAL_Pin, GPIO_PIN_SET);
 8010d46:	2201      	movs	r2, #1
 8010d48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010d4c:	4860      	ldr	r0, [pc, #384]	; (8010ed0 <main+0x290>)
 8010d4e:	f7fa fb67 	bl	800b420 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8010d52:	200a      	movs	r0, #10
 8010d54:	f7f8 f8a2 	bl	8008e9c <HAL_Delay>
  HAL_GPIO_WritePin(OP_CAL_GPIO_Port, OP_CAL_Pin, GPIO_PIN_RESET);
 8010d58:	2200      	movs	r2, #0
 8010d5a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010d5e:	485c      	ldr	r0, [pc, #368]	; (8010ed0 <main+0x290>)
 8010d60:	f7fa fb5e 	bl	800b420 <HAL_GPIO_WritePin>


  /******** DEBUG ********/


  DRV_ReadData(&drv8323, ADDR_CSA_Control);
 8010d64:	2106      	movs	r1, #6
 8010d66:	485b      	ldr	r0, [pc, #364]	; (8010ed4 <main+0x294>)
 8010d68:	f7fe fdd9 	bl	800f91e <DRV_ReadData>


#if DEBUG_PRINT_ENABLE
  PRINT_HEX(drv8323.Reg.CSA_Control.word);
 8010d6c:	4b59      	ldr	r3, [pc, #356]	; (8010ed4 <main+0x294>)
 8010d6e:	8b1b      	ldrh	r3, [r3, #24]
 8010d70:	4619      	mov	r1, r3
 8010d72:	485f      	ldr	r0, [pc, #380]	; (8010ef0 <main+0x2b0>)
 8010d74:	f001 ff9e 	bl	8012cb4 <iprintf>
#endif

  HAL_GPIO_WritePin(DB1_GPIO_Port, DB1_Pin, GPIO_PIN_RESET);
 8010d78:	2200      	movs	r2, #0
 8010d7a:	2140      	movs	r1, #64	; 0x40
 8010d7c:	4854      	ldr	r0, [pc, #336]	; (8010ed0 <main+0x290>)
 8010d7e:	f7fa fb4f 	bl	800b420 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, GPIO_PIN_RESET);
 8010d82:	2200      	movs	r2, #0
 8010d84:	2110      	movs	r1, #16
 8010d86:	485b      	ldr	r0, [pc, #364]	; (8010ef4 <main+0x2b4>)
 8010d88:	f7fa fb4a 	bl	800b420 <HAL_GPIO_WritePin>


  p_ch = getChannel();
 8010d8c:	f7ff f93c 	bl	8010008 <getChannel>
 8010d90:	4603      	mov	r3, r0
 8010d92:	70fb      	strb	r3, [r7, #3]


  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 8010d94:	2201      	movs	r2, #1
 8010d96:	2120      	movs	r1, #32
 8010d98:	484d      	ldr	r0, [pc, #308]	; (8010ed0 <main+0x290>)
 8010d9a:	f7fa fb41 	bl	800b420 <HAL_GPIO_WritePin>
 8010d9e:	2064      	movs	r0, #100	; 0x64
 8010da0:	f7f8 f87c 	bl	8008e9c <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 8010da4:	2200      	movs	r2, #0
 8010da6:	2120      	movs	r1, #32
 8010da8:	4849      	ldr	r0, [pc, #292]	; (8010ed0 <main+0x290>)
 8010daa:	f7fa fb39 	bl	800b420 <HAL_GPIO_WritePin>
 8010dae:	2064      	movs	r0, #100	; 0x64
 8010db0:	f7f8 f874 	bl	8008e9c <HAL_Delay>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 8010db4:	2201      	movs	r2, #1
 8010db6:	2120      	movs	r1, #32
 8010db8:	4845      	ldr	r0, [pc, #276]	; (8010ed0 <main+0x290>)
 8010dba:	f7fa fb31 	bl	800b420 <HAL_GPIO_WritePin>
 8010dbe:	2064      	movs	r0, #100	; 0x64
 8010dc0:	f7f8 f86c 	bl	8008e9c <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 8010dc4:	2200      	movs	r2, #0
 8010dc6:	2120      	movs	r1, #32
 8010dc8:	4841      	ldr	r0, [pc, #260]	; (8010ed0 <main+0x290>)
 8010dca:	f7fa fb29 	bl	800b420 <HAL_GPIO_WritePin>
 8010dce:	2064      	movs	r0, #100	; 0x64
 8010dd0:	f7f8 f864 	bl	8008e9c <HAL_Delay>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 8010dd4:	2201      	movs	r2, #1
 8010dd6:	2120      	movs	r1, #32
 8010dd8:	483d      	ldr	r0, [pc, #244]	; (8010ed0 <main+0x290>)
 8010dda:	f7fa fb21 	bl	800b420 <HAL_GPIO_WritePin>
 8010dde:	2064      	movs	r0, #100	; 0x64
 8010de0:	f7f8 f85c 	bl	8008e9c <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 8010de4:	2200      	movs	r2, #0
 8010de6:	2120      	movs	r1, #32
 8010de8:	4839      	ldr	r0, [pc, #228]	; (8010ed0 <main+0x290>)
 8010dea:	f7fa fb19 	bl	800b420 <HAL_GPIO_WritePin>
 8010dee:	2064      	movs	r0, #100	; 0x64
 8010df0:	f7f8 f854 	bl	8008e9c <HAL_Delay>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 8010df4:	2201      	movs	r2, #1
 8010df6:	2120      	movs	r1, #32
 8010df8:	4835      	ldr	r0, [pc, #212]	; (8010ed0 <main+0x290>)
 8010dfa:	f7fa fb11 	bl	800b420 <HAL_GPIO_WritePin>
 8010dfe:	2064      	movs	r0, #100	; 0x64
 8010e00:	f7f8 f84c 	bl	8008e9c <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 8010e04:	2200      	movs	r2, #0
 8010e06:	2120      	movs	r1, #32
 8010e08:	4831      	ldr	r0, [pc, #196]	; (8010ed0 <main+0x290>)
 8010e0a:	f7fa fb09 	bl	800b420 <HAL_GPIO_WritePin>
 8010e0e:	2064      	movs	r0, #100	; 0x64
 8010e10:	f7f8 f844 	bl	8008e9c <HAL_Delay>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 8010e14:	2201      	movs	r2, #1
 8010e16:	2120      	movs	r1, #32
 8010e18:	482d      	ldr	r0, [pc, #180]	; (8010ed0 <main+0x290>)
 8010e1a:	f7fa fb01 	bl	800b420 <HAL_GPIO_WritePin>
 8010e1e:	2064      	movs	r0, #100	; 0x64
 8010e20:	f7f8 f83c 	bl	8008e9c <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 8010e24:	2200      	movs	r2, #0
 8010e26:	2120      	movs	r1, #32
 8010e28:	4829      	ldr	r0, [pc, #164]	; (8010ed0 <main+0x290>)
 8010e2a:	f7fa faf9 	bl	800b420 <HAL_GPIO_WritePin>
 8010e2e:	2064      	movs	r0, #100	; 0x64
 8010e30:	f7f8 f834 	bl	8008e9c <HAL_Delay>

  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);		HAL_Delay(100);
 8010e34:	2201      	movs	r2, #1
 8010e36:	2120      	movs	r1, #32
 8010e38:	4825      	ldr	r0, [pc, #148]	; (8010ed0 <main+0x290>)
 8010e3a:	f7fa faf1 	bl	800b420 <HAL_GPIO_WritePin>
 8010e3e:	2064      	movs	r0, #100	; 0x64
 8010e40:	f7f8 f82c 	bl	8008e9c <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);	HAL_Delay(100);
 8010e44:	2200      	movs	r2, #0
 8010e46:	2120      	movs	r1, #32
 8010e48:	4821      	ldr	r0, [pc, #132]	; (8010ed0 <main+0x290>)
 8010e4a:	f7fa fae9 	bl	800b420 <HAL_GPIO_WritePin>
 8010e4e:	2064      	movs	r0, #100	; 0x64
 8010e50:	f7f8 f824 	bl	8008e9c <HAL_Delay>


  ch = getChannel();
 8010e54:	f7ff f8d8 	bl	8010008 <getChannel>
 8010e58:	4603      	mov	r3, r0
 8010e5a:	70bb      	strb	r3, [r7, #2]

  LED_blink_times = ch;
 8010e5c:	78bb      	ldrb	r3, [r7, #2]
 8010e5e:	4a26      	ldr	r2, [pc, #152]	; (8010ef8 <main+0x2b8>)
 8010e60:	6013      	str	r3, [r2, #0]

  CAN_Init();
 8010e62:	f7ff f883 	bl	800ff6c <CAN_Init>


  Encoder_Init();
 8010e66:	f7ff f9c9 	bl	80101fc <Encoder_Init>


  HAL_Delay(100);
 8010e6a:	2064      	movs	r0, #100	; 0x64
 8010e6c:	f7f8 f816 	bl	8008e9c <HAL_Delay>

  CurrentSensor_Init();
 8010e70:	f7fe f9e6 	bl	800f240 <CurrentSensor_Init>

  CurrentSensor_Start(&mainCS);
 8010e74:	4821      	ldr	r0, [pc, #132]	; (8010efc <main+0x2bc>)
 8010e76:	f7fe fa19 	bl	800f2ac <CurrentSensor_Start>


  ACR_Init();
 8010e7a:	f7fd fc1b 	bl	800e6b4 <ACR_Init>

  ASR_Init();
 8010e7e:	f7fe f84d 	bl	800ef1c <ASR_Init>

  APR_Init();
 8010e82:	f7fd ff13 	bl	800ecac <APR_Init>

  PWM_Init();
 8010e86:	f000 f9b9 	bl	80111fc <PWM_Init>

  HAL_Delay(1);
 8010e8a:	2001      	movs	r0, #1
 8010e8c:	f7f8 f806 	bl	8008e9c <HAL_Delay>

  ACR_Start(&mainACR);
 8010e90:	481b      	ldr	r0, [pc, #108]	; (8010f00 <main+0x2c0>)
 8010e92:	f7fd fc49 	bl	800e728 <ACR_Start>

  timeoutEnable = 0;
 8010e96:	4b1b      	ldr	r3, [pc, #108]	; (8010f04 <main+0x2c4>)
 8010e98:	2200      	movs	r2, #0
 8010e9a:	701a      	strb	r2, [r3, #0]

  setZeroEncoder((p_ch != ch)? 1: 0);
 8010e9c:	78fa      	ldrb	r2, [r7, #3]
 8010e9e:	78bb      	ldrb	r3, [r7, #2]
 8010ea0:	429a      	cmp	r2, r3
 8010ea2:	bf14      	ite	ne
 8010ea4:	2301      	movne	r3, #1
 8010ea6:	2300      	moveq	r3, #0
 8010ea8:	b2db      	uxtb	r3, r3
 8010eaa:	4618      	mov	r0, r3
 8010eac:	f7ff f9f0 	bl	8010290 <setZeroEncoder>

  ASR_Start(&mainASR);
 8010eb0:	4815      	ldr	r0, [pc, #84]	; (8010f08 <main+0x2c8>)
 8010eb2:	f7fe f86b 	bl	800ef8c <ASR_Start>

  timeoutEnable = 1;
 8010eb6:	4b13      	ldr	r3, [pc, #76]	; (8010f04 <main+0x2c4>)
 8010eb8:	2201      	movs	r2, #1
 8010eba:	701a      	strb	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  APR_Refresh(&mainAPR);
 8010ebc:	4813      	ldr	r0, [pc, #76]	; (8010f0c <main+0x2cc>)
 8010ebe:	f7fd ff4f 	bl	800ed60 <APR_Refresh>

	  ASR_Refresh(&mainASR);
 8010ec2:	4811      	ldr	r0, [pc, #68]	; (8010f08 <main+0x2c8>)
 8010ec4:	f7fe f890 	bl	800efe8 <ASR_Refresh>
	  APR_Refresh(&mainAPR);
 8010ec8:	e7f8      	b.n	8010ebc <main+0x27c>
 8010eca:	bf00      	nop
 8010ecc:	08014dd0 	.word	0x08014dd0
 8010ed0:	40020000 	.word	0x40020000
 8010ed4:	20004490 	.word	0x20004490
 8010ed8:	08014dd8 	.word	0x08014dd8
 8010edc:	08014e00 	.word	0x08014e00
 8010ee0:	08014e28 	.word	0x08014e28
 8010ee4:	08014e50 	.word	0x08014e50
 8010ee8:	08014e78 	.word	0x08014e78
 8010eec:	08014ea0 	.word	0x08014ea0
 8010ef0:	08014ec8 	.word	0x08014ec8
 8010ef4:	40020400 	.word	0x40020400
 8010ef8:	2000427c 	.word	0x2000427c
 8010efc:	20004400 	.word	0x20004400
 8010f00:	200042f4 	.word	0x200042f4
 8010f04:	20000005 	.word	0x20000005
 8010f08:	200043bc 	.word	0x200043bc
 8010f0c:	20004368 	.word	0x20004368

08010f10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8010f10:	b580      	push	{r7, lr}
 8010f12:	b094      	sub	sp, #80	; 0x50
 8010f14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8010f16:	f107 031c 	add.w	r3, r7, #28
 8010f1a:	2234      	movs	r2, #52	; 0x34
 8010f1c:	2100      	movs	r1, #0
 8010f1e:	4618      	mov	r0, r3
 8010f20:	f001 fa63 	bl	80123ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8010f24:	f107 0308 	add.w	r3, r7, #8
 8010f28:	2200      	movs	r2, #0
 8010f2a:	601a      	str	r2, [r3, #0]
 8010f2c:	605a      	str	r2, [r3, #4]
 8010f2e:	609a      	str	r2, [r3, #8]
 8010f30:	60da      	str	r2, [r3, #12]
 8010f32:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8010f34:	2300      	movs	r3, #0
 8010f36:	607b      	str	r3, [r7, #4]
 8010f38:	4b29      	ldr	r3, [pc, #164]	; (8010fe0 <SystemClock_Config+0xd0>)
 8010f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f3c:	4a28      	ldr	r2, [pc, #160]	; (8010fe0 <SystemClock_Config+0xd0>)
 8010f3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010f42:	6413      	str	r3, [r2, #64]	; 0x40
 8010f44:	4b26      	ldr	r3, [pc, #152]	; (8010fe0 <SystemClock_Config+0xd0>)
 8010f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010f4c:	607b      	str	r3, [r7, #4]
 8010f4e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8010f50:	2300      	movs	r3, #0
 8010f52:	603b      	str	r3, [r7, #0]
 8010f54:	4b23      	ldr	r3, [pc, #140]	; (8010fe4 <SystemClock_Config+0xd4>)
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	4a22      	ldr	r2, [pc, #136]	; (8010fe4 <SystemClock_Config+0xd4>)
 8010f5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010f5e:	6013      	str	r3, [r2, #0]
 8010f60:	4b20      	ldr	r3, [pc, #128]	; (8010fe4 <SystemClock_Config+0xd4>)
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8010f68:	603b      	str	r3, [r7, #0]
 8010f6a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8010f6c:	2302      	movs	r3, #2
 8010f6e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8010f70:	2301      	movs	r3, #1
 8010f72:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8010f74:	2310      	movs	r3, #16
 8010f76:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8010f78:	2302      	movs	r3, #2
 8010f7a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8010f7c:	2300      	movs	r3, #0
 8010f7e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8010f80:	2310      	movs	r3, #16
 8010f82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 320;
 8010f84:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8010f88:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8010f8a:	2302      	movs	r3, #2
 8010f8c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8010f8e:	2302      	movs	r3, #2
 8010f90:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8010f92:	2302      	movs	r3, #2
 8010f94:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8010f96:	f107 031c 	add.w	r3, r7, #28
 8010f9a:	4618      	mov	r0, r3
 8010f9c:	f7fa fd10 	bl	800b9c0 <HAL_RCC_OscConfig>
 8010fa0:	4603      	mov	r3, r0
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d001      	beq.n	8010faa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8010fa6:	f000 f921 	bl	80111ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8010faa:	230f      	movs	r3, #15
 8010fac:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8010fae:	2302      	movs	r3, #2
 8010fb0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8010fb2:	2300      	movs	r3, #0
 8010fb4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8010fb6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8010fba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8010fbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010fc0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8010fc2:	f107 0308 	add.w	r3, r7, #8
 8010fc6:	2105      	movs	r1, #5
 8010fc8:	4618      	mov	r0, r3
 8010fca:	f7fa fa43 	bl	800b454 <HAL_RCC_ClockConfig>
 8010fce:	4603      	mov	r3, r0
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d001      	beq.n	8010fd8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8010fd4:	f000 f90a 	bl	80111ec <Error_Handler>
  }
}
 8010fd8:	bf00      	nop
 8010fda:	3750      	adds	r7, #80	; 0x50
 8010fdc:	46bd      	mov	sp, r7
 8010fde:	bd80      	pop	{r7, pc}
 8010fe0:	40023800 	.word	0x40023800
 8010fe4:	40007000 	.word	0x40007000

08010fe8 <HAL_TIM_PeriodElapsedCallback>:




void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim)
{
 8010fe8:	b580      	push	{r7, lr}
 8010fea:	b082      	sub	sp, #8
 8010fec:	af00      	add	r7, sp, #0
 8010fee:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, GPIO_PIN_SET);
 8010ff0:	2201      	movs	r2, #1
 8010ff2:	2110      	movs	r1, #16
 8010ff4:	4824      	ldr	r0, [pc, #144]	; (8011088 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8010ff6:	f7fa fa13 	bl	800b420 <HAL_GPIO_WritePin>

	if(htim->Instance == TIM8 && !__HAL_TIM_IS_TIM_COUNTING_DOWN(htim))
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	4a23      	ldr	r2, [pc, #140]	; (801108c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8011000:	4293      	cmp	r3, r2
 8011002:	d135      	bne.n	8011070 <HAL_TIM_PeriodElapsedCallback+0x88>
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	681b      	ldr	r3, [r3, #0]
 8011008:	681b      	ldr	r3, [r3, #0]
 801100a:	f003 0310 	and.w	r3, r3, #16
 801100e:	2b10      	cmp	r3, #16
 8011010:	d02e      	beq.n	8011070 <HAL_TIM_PeriodElapsedCallback+0x88>
	{

		Encoder_Refresh(&mainEncoder);
 8011012:	481f      	ldr	r0, [pc, #124]	; (8011090 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8011014:	f7ff fac0 	bl	8010598 <Encoder_Refresh>

		CurrentSensor_Refresh(&mainCS, sector_SVM);
 8011018:	4b1e      	ldr	r3, [pc, #120]	; (8011094 <HAL_TIM_PeriodElapsedCallback+0xac>)
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	b2db      	uxtb	r3, r3
 801101e:	4619      	mov	r1, r3
 8011020:	481d      	ldr	r0, [pc, #116]	; (8011098 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8011022:	f7fe f969 	bl	800f2f8 <CurrentSensor_Refresh>

		ACR_Refresh(&mainACR);
 8011026:	481d      	ldr	r0, [pc, #116]	; (801109c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8011028:	f7fd fb8e 	bl	800e748 <ACR_Refresh>

		ASR_prescaler(&mainASR);
 801102c:	481c      	ldr	r0, [pc, #112]	; (80110a0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 801102e:	f7fd ffbc 	bl	800efaa <ASR_prescaler>

		APR_prescaler(&mainAPR);
 8011032:	481c      	ldr	r0, [pc, #112]	; (80110a4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8011034:	f7fd fe78 	bl	800ed28 <APR_prescaler>

		Encoder_Request(&mainEncoder);
 8011038:	4815      	ldr	r0, [pc, #84]	; (8011090 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 801103a:	f7ff fa89 	bl	8010550 <Encoder_Request>


		if(timeoutEnable == 1)
 801103e:	4b1a      	ldr	r3, [pc, #104]	; (80110a8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8011040:	781b      	ldrb	r3, [r3, #0]
 8011042:	b2db      	uxtb	r3, r3
 8011044:	2b01      	cmp	r3, #1
 8011046:	d113      	bne.n	8011070 <HAL_TIM_PeriodElapsedCallback+0x88>
		{
			// timeout control
			if(timeoutCount < TIMEOUT_MS * TIMEOUT_BASE_FREQ / 1000)
 8011048:	4b18      	ldr	r3, [pc, #96]	; (80110ac <HAL_TIM_PeriodElapsedCallback+0xc4>)
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8011050:	d205      	bcs.n	801105e <HAL_TIM_PeriodElapsedCallback+0x76>
			{
				timeoutCount += 1;
 8011052:	4b16      	ldr	r3, [pc, #88]	; (80110ac <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	3301      	adds	r3, #1
 8011058:	4a14      	ldr	r2, [pc, #80]	; (80110ac <HAL_TIM_PeriodElapsedCallback+0xc4>)
 801105a:	6013      	str	r3, [r2, #0]
 801105c:	e008      	b.n	8011070 <HAL_TIM_PeriodElapsedCallback+0x88>
			}
			else
			{
				stopPWM(&htim8);
 801105e:	4814      	ldr	r0, [pc, #80]	; (80110b0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8011060:	f000 f906 	bl	8011270 <stopPWM>
				timeoutCount = 0;
 8011064:	4b11      	ldr	r3, [pc, #68]	; (80110ac <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8011066:	2200      	movs	r2, #0
 8011068:	601a      	str	r2, [r3, #0]
				timeoutState = 1;
 801106a:	4b12      	ldr	r3, [pc, #72]	; (80110b4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 801106c:	2201      	movs	r2, #1
 801106e:	701a      	strb	r2, [r3, #0]
#endif


	}

	HAL_GPIO_WritePin(DB2_GPIO_Port, DB2_Pin, GPIO_PIN_RESET);
 8011070:	2200      	movs	r2, #0
 8011072:	2110      	movs	r1, #16
 8011074:	4804      	ldr	r0, [pc, #16]	; (8011088 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8011076:	f7fa f9d3 	bl	800b420 <HAL_GPIO_WritePin>

	LED_blink();
 801107a:	f000 f83f 	bl	80110fc <LED_blink>

}
 801107e:	bf00      	nop
 8011080:	3708      	adds	r7, #8
 8011082:	46bd      	mov	sp, r7
 8011084:	bd80      	pop	{r7, pc}
 8011086:	bf00      	nop
 8011088:	40020400 	.word	0x40020400
 801108c:	40010400 	.word	0x40010400
 8011090:	20004728 	.word	0x20004728
 8011094:	2000428c 	.word	0x2000428c
 8011098:	20004400 	.word	0x20004400
 801109c:	200042f4 	.word	0x200042f4
 80110a0:	200043bc 	.word	0x200043bc
 80110a4:	20004368 	.word	0x20004368
 80110a8:	20000005 	.word	0x20000005
 80110ac:	20004268 	.word	0x20004268
 80110b0:	20004824 	.word	0x20004824
 80110b4:	2000426c 	.word	0x2000426c

080110b8 <timeoutReset>:



inline void timeoutReset()
{
 80110b8:	b580      	push	{r7, lr}
 80110ba:	af00      	add	r7, sp, #0
	timeoutCount = 0;
 80110bc:	4b0a      	ldr	r3, [pc, #40]	; (80110e8 <timeoutReset+0x30>)
 80110be:	2200      	movs	r2, #0
 80110c0:	601a      	str	r2, [r3, #0]
	if(timeoutState == 1)
 80110c2:	4b0a      	ldr	r3, [pc, #40]	; (80110ec <timeoutReset+0x34>)
 80110c4:	781b      	ldrb	r3, [r3, #0]
 80110c6:	b2db      	uxtb	r3, r3
 80110c8:	2b01      	cmp	r3, #1
 80110ca:	d10b      	bne.n	80110e4 <timeoutReset+0x2c>
	{
		timeoutState = 0;
 80110cc:	4b07      	ldr	r3, [pc, #28]	; (80110ec <timeoutReset+0x34>)
 80110ce:	2200      	movs	r2, #0
 80110d0:	701a      	strb	r2, [r3, #0]
		ASR_Reset(&mainASR);
 80110d2:	4807      	ldr	r0, [pc, #28]	; (80110f0 <timeoutReset+0x38>)
 80110d4:	f7fe f89a 	bl	800f20c <ASR_Reset>
		ACR_Reset(&mainACR);
 80110d8:	4806      	ldr	r0, [pc, #24]	; (80110f4 <timeoutReset+0x3c>)
 80110da:	f7fd fdbd 	bl	800ec58 <ACR_Reset>
		startPWM(&htim8);
 80110de:	4806      	ldr	r0, [pc, #24]	; (80110f8 <timeoutReset+0x40>)
 80110e0:	f000 f8a6 	bl	8011230 <startPWM>
	}
}
 80110e4:	bf00      	nop
 80110e6:	bd80      	pop	{r7, pc}
 80110e8:	20004268 	.word	0x20004268
 80110ec:	2000426c 	.word	0x2000426c
 80110f0:	200043bc 	.word	0x200043bc
 80110f4:	200042f4 	.word	0x200042f4
 80110f8:	20004824 	.word	0x20004824

080110fc <LED_blink>:
volatile uint32_t LED_blink_Toff_us = 100000;
volatile uint32_t LED_blink_T_wait_us = 1000000;
volatile uint32_t LED_blink_Ts_us = 100;
 */
inline void LED_blink()
{
 80110fc:	b580      	push	{r7, lr}
 80110fe:	af00      	add	r7, sp, #0

	switch(LED_blink_state)
 8011100:	4b31      	ldr	r3, [pc, #196]	; (80111c8 <LED_blink+0xcc>)
 8011102:	681b      	ldr	r3, [r3, #0]
 8011104:	2b01      	cmp	r3, #1
 8011106:	d01d      	beq.n	8011144 <LED_blink+0x48>
 8011108:	2b01      	cmp	r3, #1
 801110a:	d302      	bcc.n	8011112 <LED_blink+0x16>
 801110c:	2b02      	cmp	r3, #2
 801110e:	d030      	beq.n	8011172 <LED_blink+0x76>
		}
		break;

	default:

		break;
 8011110:	e050      	b.n	80111b4 <LED_blink+0xb8>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8011112:	2200      	movs	r2, #0
 8011114:	2120      	movs	r1, #32
 8011116:	482d      	ldr	r0, [pc, #180]	; (80111cc <LED_blink+0xd0>)
 8011118:	f7fa f982 	bl	800b420 <HAL_GPIO_WritePin>
		if(LED_blink_t_us >= LED_blink_T_wait_us)
 801111c:	4b2c      	ldr	r3, [pc, #176]	; (80111d0 <LED_blink+0xd4>)
 801111e:	681a      	ldr	r2, [r3, #0]
 8011120:	4b2c      	ldr	r3, [pc, #176]	; (80111d4 <LED_blink+0xd8>)
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	429a      	cmp	r2, r3
 8011126:	d340      	bcc.n	80111aa <LED_blink+0xae>
			if(LED_blink_times > 0)
 8011128:	4b2b      	ldr	r3, [pc, #172]	; (80111d8 <LED_blink+0xdc>)
 801112a:	681b      	ldr	r3, [r3, #0]
 801112c:	2b00      	cmp	r3, #0
 801112e:	d005      	beq.n	801113c <LED_blink+0x40>
				LED_blink_state = 1;
 8011130:	4b25      	ldr	r3, [pc, #148]	; (80111c8 <LED_blink+0xcc>)
 8011132:	2201      	movs	r2, #1
 8011134:	601a      	str	r2, [r3, #0]
				LED_blink_count = 0;
 8011136:	4b29      	ldr	r3, [pc, #164]	; (80111dc <LED_blink+0xe0>)
 8011138:	2200      	movs	r2, #0
 801113a:	601a      	str	r2, [r3, #0]
			LED_blink_t_us = 0;
 801113c:	4b24      	ldr	r3, [pc, #144]	; (80111d0 <LED_blink+0xd4>)
 801113e:	2200      	movs	r2, #0
 8011140:	601a      	str	r2, [r3, #0]
		break;
 8011142:	e032      	b.n	80111aa <LED_blink+0xae>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8011144:	2201      	movs	r2, #1
 8011146:	2120      	movs	r1, #32
 8011148:	4820      	ldr	r0, [pc, #128]	; (80111cc <LED_blink+0xd0>)
 801114a:	f7fa f969 	bl	800b420 <HAL_GPIO_WritePin>
		if(LED_blink_t_us >= LED_blink_Ton_us)
 801114e:	4b20      	ldr	r3, [pc, #128]	; (80111d0 <LED_blink+0xd4>)
 8011150:	681a      	ldr	r2, [r3, #0]
 8011152:	4b23      	ldr	r3, [pc, #140]	; (80111e0 <LED_blink+0xe4>)
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	429a      	cmp	r2, r3
 8011158:	d329      	bcc.n	80111ae <LED_blink+0xb2>
			LED_blink_count += 1;
 801115a:	4b20      	ldr	r3, [pc, #128]	; (80111dc <LED_blink+0xe0>)
 801115c:	681b      	ldr	r3, [r3, #0]
 801115e:	3301      	adds	r3, #1
 8011160:	4a1e      	ldr	r2, [pc, #120]	; (80111dc <LED_blink+0xe0>)
 8011162:	6013      	str	r3, [r2, #0]
			LED_blink_state = 2;
 8011164:	4b18      	ldr	r3, [pc, #96]	; (80111c8 <LED_blink+0xcc>)
 8011166:	2202      	movs	r2, #2
 8011168:	601a      	str	r2, [r3, #0]
			LED_blink_t_us = 0;
 801116a:	4b19      	ldr	r3, [pc, #100]	; (80111d0 <LED_blink+0xd4>)
 801116c:	2200      	movs	r2, #0
 801116e:	601a      	str	r2, [r3, #0]
		break;
 8011170:	e01d      	b.n	80111ae <LED_blink+0xb2>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8011172:	2200      	movs	r2, #0
 8011174:	2120      	movs	r1, #32
 8011176:	4815      	ldr	r0, [pc, #84]	; (80111cc <LED_blink+0xd0>)
 8011178:	f7fa f952 	bl	800b420 <HAL_GPIO_WritePin>
		if(LED_blink_t_us >= LED_blink_Toff_us)
 801117c:	4b14      	ldr	r3, [pc, #80]	; (80111d0 <LED_blink+0xd4>)
 801117e:	681a      	ldr	r2, [r3, #0]
 8011180:	4b18      	ldr	r3, [pc, #96]	; (80111e4 <LED_blink+0xe8>)
 8011182:	681b      	ldr	r3, [r3, #0]
 8011184:	429a      	cmp	r2, r3
 8011186:	d314      	bcc.n	80111b2 <LED_blink+0xb6>
			if(LED_blink_count < LED_blink_times)
 8011188:	4b14      	ldr	r3, [pc, #80]	; (80111dc <LED_blink+0xe0>)
 801118a:	681a      	ldr	r2, [r3, #0]
 801118c:	4b12      	ldr	r3, [pc, #72]	; (80111d8 <LED_blink+0xdc>)
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	429a      	cmp	r2, r3
 8011192:	d203      	bcs.n	801119c <LED_blink+0xa0>
				LED_blink_state = 1;
 8011194:	4b0c      	ldr	r3, [pc, #48]	; (80111c8 <LED_blink+0xcc>)
 8011196:	2201      	movs	r2, #1
 8011198:	601a      	str	r2, [r3, #0]
 801119a:	e002      	b.n	80111a2 <LED_blink+0xa6>
				LED_blink_state = 0;
 801119c:	4b0a      	ldr	r3, [pc, #40]	; (80111c8 <LED_blink+0xcc>)
 801119e:	2200      	movs	r2, #0
 80111a0:	601a      	str	r2, [r3, #0]
			LED_blink_t_us = 0;
 80111a2:	4b0b      	ldr	r3, [pc, #44]	; (80111d0 <LED_blink+0xd4>)
 80111a4:	2200      	movs	r2, #0
 80111a6:	601a      	str	r2, [r3, #0]
		break;
 80111a8:	e003      	b.n	80111b2 <LED_blink+0xb6>
		break;
 80111aa:	bf00      	nop
 80111ac:	e002      	b.n	80111b4 <LED_blink+0xb8>
		break;
 80111ae:	bf00      	nop
 80111b0:	e000      	b.n	80111b4 <LED_blink+0xb8>
		break;
 80111b2:	bf00      	nop
	}

	LED_blink_t_us += LED_blink_Ts_us;
 80111b4:	4b0c      	ldr	r3, [pc, #48]	; (80111e8 <LED_blink+0xec>)
 80111b6:	681a      	ldr	r2, [r3, #0]
 80111b8:	4b05      	ldr	r3, [pc, #20]	; (80111d0 <LED_blink+0xd4>)
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	4413      	add	r3, r2
 80111be:	4a04      	ldr	r2, [pc, #16]	; (80111d0 <LED_blink+0xd4>)
 80111c0:	6013      	str	r3, [r2, #0]

}
 80111c2:	bf00      	nop
 80111c4:	bd80      	pop	{r7, pc}
 80111c6:	bf00      	nop
 80111c8:	20004274 	.word	0x20004274
 80111cc:	40020000 	.word	0x40020000
 80111d0:	20004278 	.word	0x20004278
 80111d4:	20000010 	.word	0x20000010
 80111d8:	2000427c 	.word	0x2000427c
 80111dc:	20004270 	.word	0x20004270
 80111e0:	20000008 	.word	0x20000008
 80111e4:	2000000c 	.word	0x2000000c
 80111e8:	20000014 	.word	0x20000014

080111ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80111ec:	b480      	push	{r7}
 80111ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80111f0:	bf00      	nop
 80111f2:	46bd      	mov	sp, r7
 80111f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f8:	4770      	bx	lr
	...

080111fc <PWM_Init>:

volatile int sector_SVM = 0;


void PWM_Init()
{
 80111fc:	b580      	push	{r7, lr}
 80111fe:	af00      	add	r7, sp, #0

	__HAL_TIM_CLEAR_FLAG(&htim8, TIM_FLAG_UPDATE);
 8011200:	4b0a      	ldr	r3, [pc, #40]	; (801122c <PWM_Init+0x30>)
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	f06f 0201 	mvn.w	r2, #1
 8011208:	611a      	str	r2, [r3, #16]
	__HAL_TIM_ENABLE_IT(&htim8, TIM_IT_UPDATE);
 801120a:	4b08      	ldr	r3, [pc, #32]	; (801122c <PWM_Init+0x30>)
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	68da      	ldr	r2, [r3, #12]
 8011210:	4b06      	ldr	r3, [pc, #24]	; (801122c <PWM_Init+0x30>)
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	f042 0201 	orr.w	r2, r2, #1
 8011218:	60da      	str	r2, [r3, #12]


	HAL_TIM_GenerateEvent(&htim8, TIM_EVENTSOURCE_UPDATE);
 801121a:	2101      	movs	r1, #1
 801121c:	4803      	ldr	r0, [pc, #12]	; (801122c <PWM_Init+0x30>)
 801121e:	f7fb ff23 	bl	800d068 <HAL_TIM_GenerateEvent>
	//HAL_TIM_GenerateEvent(&htim8, TIM_EVENTSOURCE_TRIGGER);


	startPWM(&htim8);
 8011222:	4802      	ldr	r0, [pc, #8]	; (801122c <PWM_Init+0x30>)
 8011224:	f000 f804 	bl	8011230 <startPWM>

}
 8011228:	bf00      	nop
 801122a:	bd80      	pop	{r7, pc}
 801122c:	20004824 	.word	0x20004824

08011230 <startPWM>:


inline void startPWM(TIM_HandleTypeDef *htim)
{
 8011230:	b580      	push	{r7, lr}
 8011232:	b082      	sub	sp, #8
 8011234:	af00      	add	r7, sp, #0
 8011236:	6078      	str	r0, [r7, #4]


	// 3phase PWM Starting
	HAL_TIM_PWM_Start_IT(htim, TIM_CHANNEL_1);
 8011238:	2100      	movs	r1, #0
 801123a:	6878      	ldr	r0, [r7, #4]
 801123c:	f7fb fc28 	bl	800ca90 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(htim, TIM_CHANNEL_2);
 8011240:	2104      	movs	r1, #4
 8011242:	6878      	ldr	r0, [r7, #4]
 8011244:	f7fb fc24 	bl	800ca90 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(htim, TIM_CHANNEL_3);
 8011248:	2108      	movs	r1, #8
 801124a:	6878      	ldr	r0, [r7, #4]
 801124c:	f7fb fc20 	bl	800ca90 <HAL_TIM_PWM_Start_IT>

	HAL_TIMEx_PWMN_Start_IT(htim, TIM_CHANNEL_1);
 8011250:	2100      	movs	r1, #0
 8011252:	6878      	ldr	r0, [r7, #4]
 8011254:	f7fc fb1d 	bl	800d892 <HAL_TIMEx_PWMN_Start_IT>
	HAL_TIMEx_PWMN_Start_IT(htim, TIM_CHANNEL_2);
 8011258:	2104      	movs	r1, #4
 801125a:	6878      	ldr	r0, [r7, #4]
 801125c:	f7fc fb19 	bl	800d892 <HAL_TIMEx_PWMN_Start_IT>
	HAL_TIMEx_PWMN_Start_IT(htim, TIM_CHANNEL_3);
 8011260:	2108      	movs	r1, #8
 8011262:	6878      	ldr	r0, [r7, #4]
 8011264:	f7fc fb15 	bl	800d892 <HAL_TIMEx_PWMN_Start_IT>

}
 8011268:	bf00      	nop
 801126a:	3708      	adds	r7, #8
 801126c:	46bd      	mov	sp, r7
 801126e:	bd80      	pop	{r7, pc}

08011270 <stopPWM>:



inline void stopPWM(TIM_HandleTypeDef *htim)
{
 8011270:	b580      	push	{r7, lr}
 8011272:	b082      	sub	sp, #8
 8011274:	af00      	add	r7, sp, #0
 8011276:	6078      	str	r0, [r7, #4]

	// 3phase PWM Stopping
	HAL_TIM_PWM_Stop_IT(htim, TIM_CHANNEL_1);
 8011278:	2100      	movs	r1, #0
 801127a:	6878      	ldr	r0, [r7, #4]
 801127c:	f7fb fc8c 	bl	800cb98 <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_PWM_Stop_IT(htim, TIM_CHANNEL_2);
 8011280:	2104      	movs	r1, #4
 8011282:	6878      	ldr	r0, [r7, #4]
 8011284:	f7fb fc88 	bl	800cb98 <HAL_TIM_PWM_Stop_IT>
	HAL_TIM_PWM_Stop_IT(htim, TIM_CHANNEL_3);
 8011288:	2108      	movs	r1, #8
 801128a:	6878      	ldr	r0, [r7, #4]
 801128c:	f7fb fc84 	bl	800cb98 <HAL_TIM_PWM_Stop_IT>

	HAL_TIMEx_PWMN_Stop_IT(htim, TIM_CHANNEL_1);
 8011290:	2100      	movs	r1, #0
 8011292:	6878      	ldr	r0, [r7, #4]
 8011294:	f7fc fb52 	bl	800d93c <HAL_TIMEx_PWMN_Stop_IT>
	HAL_TIMEx_PWMN_Stop_IT(htim, TIM_CHANNEL_2);
 8011298:	2104      	movs	r1, #4
 801129a:	6878      	ldr	r0, [r7, #4]
 801129c:	f7fc fb4e 	bl	800d93c <HAL_TIMEx_PWMN_Stop_IT>
	HAL_TIMEx_PWMN_Stop_IT(htim, TIM_CHANNEL_3);
 80112a0:	2108      	movs	r1, #8
 80112a2:	6878      	ldr	r0, [r7, #4]
 80112a4:	f7fc fb4a 	bl	800d93c <HAL_TIMEx_PWMN_Stop_IT>

}
 80112a8:	bf00      	nop
 80112aa:	3708      	adds	r7, #8
 80112ac:	46bd      	mov	sp, r7
 80112ae:	bd80      	pop	{r7, pc}

080112b0 <setSVM_dq>:


inline void setSVM_dq(TIM_HandleTypeDef *htim, float Vd_ref, float Vq_ref, float cos_theta_re, float sin_theta_re)
{
 80112b0:	b5b0      	push	{r4, r5, r7, lr}
 80112b2:	b086      	sub	sp, #24
 80112b4:	af00      	add	r7, sp, #0
 80112b6:	6178      	str	r0, [r7, #20]
 80112b8:	ed87 0a04 	vstr	s0, [r7, #16]
 80112bc:	edc7 0a03 	vstr	s1, [r7, #12]
 80112c0:	ed87 1a02 	vstr	s2, [r7, #8]
 80112c4:	edc7 1a01 	vstr	s3, [r7, #4]
	static float x1, y1, x2, y2;
	static float x, y;
	static float vect1, vect2;


	x = Vd_ref * cos_theta_re - Vq_ref * sin_theta_re;
 80112c8:	ed97 7a04 	vldr	s14, [r7, #16]
 80112cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80112d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80112d4:	edd7 6a03 	vldr	s13, [r7, #12]
 80112d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80112dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80112e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80112e4:	4bad      	ldr	r3, [pc, #692]	; (801159c <setSVM_dq+0x2ec>)
 80112e6:	edc3 7a00 	vstr	s15, [r3]
	y = Vd_ref * sin_theta_re + Vq_ref * cos_theta_re;
 80112ea:	ed97 7a04 	vldr	s14, [r7, #16]
 80112ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80112f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80112f6:	edd7 6a03 	vldr	s13, [r7, #12]
 80112fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80112fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011302:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011306:	4ba6      	ldr	r3, [pc, #664]	; (80115a0 <setSVM_dq+0x2f0>)
 8011308:	edc3 7a00 	vstr	s15, [r3]

	cross0 = refVector[0][0] * y - refVector[0][1] * x;
 801130c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011310:	4ba3      	ldr	r3, [pc, #652]	; (80115a0 <setSVM_dq+0x2f0>)
 8011312:	edd3 7a00 	vldr	s15, [r3]
 8011316:	ee27 7a27 	vmul.f32	s14, s14, s15
 801131a:	eddf 6aa2 	vldr	s13, [pc, #648]	; 80115a4 <setSVM_dq+0x2f4>
 801131e:	4b9f      	ldr	r3, [pc, #636]	; (801159c <setSVM_dq+0x2ec>)
 8011320:	edd3 7a00 	vldr	s15, [r3]
 8011324:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8011328:	ee77 7a67 	vsub.f32	s15, s14, s15
 801132c:	4b9e      	ldr	r3, [pc, #632]	; (80115a8 <setSVM_dq+0x2f8>)
 801132e:	edc3 7a00 	vstr	s15, [r3]
	cross1 = refVector[1][0] * y - refVector[1][1] * x;
 8011332:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8011336:	4b9a      	ldr	r3, [pc, #616]	; (80115a0 <setSVM_dq+0x2f0>)
 8011338:	edd3 7a00 	vldr	s15, [r3]
 801133c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011340:	eddf 6a9a 	vldr	s13, [pc, #616]	; 80115ac <setSVM_dq+0x2fc>
 8011344:	4b95      	ldr	r3, [pc, #596]	; (801159c <setSVM_dq+0x2ec>)
 8011346:	edd3 7a00 	vldr	s15, [r3]
 801134a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801134e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8011352:	4b97      	ldr	r3, [pc, #604]	; (80115b0 <setSVM_dq+0x300>)
 8011354:	edc3 7a00 	vstr	s15, [r3]

	if(cross0 >= 0)
 8011358:	4b93      	ldr	r3, [pc, #588]	; (80115a8 <setSVM_dq+0x2f8>)
 801135a:	edd3 7a00 	vldr	s15, [r3]
 801135e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011366:	db1e      	blt.n	80113a6 <setSVM_dq+0xf6>
	{
		if(cross1 <= 0)				sector_SVM = 0;
 8011368:	4b91      	ldr	r3, [pc, #580]	; (80115b0 <setSVM_dq+0x300>)
 801136a:	edd3 7a00 	vldr	s15, [r3]
 801136e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011376:	d803      	bhi.n	8011380 <setSVM_dq+0xd0>
 8011378:	4b8e      	ldr	r3, [pc, #568]	; (80115b4 <setSVM_dq+0x304>)
 801137a:	2200      	movs	r2, #0
 801137c:	601a      	str	r2, [r3, #0]
 801137e:	e030      	b.n	80113e2 <setSVM_dq+0x132>
		else if(cross0 >= cross1)	sector_SVM = 1;
 8011380:	4b89      	ldr	r3, [pc, #548]	; (80115a8 <setSVM_dq+0x2f8>)
 8011382:	ed93 7a00 	vldr	s14, [r3]
 8011386:	4b8a      	ldr	r3, [pc, #552]	; (80115b0 <setSVM_dq+0x300>)
 8011388:	edd3 7a00 	vldr	s15, [r3]
 801138c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011394:	db03      	blt.n	801139e <setSVM_dq+0xee>
 8011396:	4b87      	ldr	r3, [pc, #540]	; (80115b4 <setSVM_dq+0x304>)
 8011398:	2201      	movs	r2, #1
 801139a:	601a      	str	r2, [r3, #0]
 801139c:	e021      	b.n	80113e2 <setSVM_dq+0x132>
		else						sector_SVM = 2;
 801139e:	4b85      	ldr	r3, [pc, #532]	; (80115b4 <setSVM_dq+0x304>)
 80113a0:	2202      	movs	r2, #2
 80113a2:	601a      	str	r2, [r3, #0]
 80113a4:	e01d      	b.n	80113e2 <setSVM_dq+0x132>
	}
	else
	{
		if(cross1 >= 0)				sector_SVM = 3;
 80113a6:	4b82      	ldr	r3, [pc, #520]	; (80115b0 <setSVM_dq+0x300>)
 80113a8:	edd3 7a00 	vldr	s15, [r3]
 80113ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80113b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113b4:	db03      	blt.n	80113be <setSVM_dq+0x10e>
 80113b6:	4b7f      	ldr	r3, [pc, #508]	; (80115b4 <setSVM_dq+0x304>)
 80113b8:	2203      	movs	r2, #3
 80113ba:	601a      	str	r2, [r3, #0]
 80113bc:	e011      	b.n	80113e2 <setSVM_dq+0x132>
		else if(cross0 <= cross1)	sector_SVM = 4;
 80113be:	4b7a      	ldr	r3, [pc, #488]	; (80115a8 <setSVM_dq+0x2f8>)
 80113c0:	ed93 7a00 	vldr	s14, [r3]
 80113c4:	4b7a      	ldr	r3, [pc, #488]	; (80115b0 <setSVM_dq+0x300>)
 80113c6:	edd3 7a00 	vldr	s15, [r3]
 80113ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80113ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113d2:	d803      	bhi.n	80113dc <setSVM_dq+0x12c>
 80113d4:	4b77      	ldr	r3, [pc, #476]	; (80115b4 <setSVM_dq+0x304>)
 80113d6:	2204      	movs	r2, #4
 80113d8:	601a      	str	r2, [r3, #0]
 80113da:	e002      	b.n	80113e2 <setSVM_dq+0x132>
		else						sector_SVM = 5;
 80113dc:	4b75      	ldr	r3, [pc, #468]	; (80115b4 <setSVM_dq+0x304>)
 80113de:	2205      	movs	r2, #5
 80113e0:	601a      	str	r2, [r3, #0]
	}

	x1 = refVector[sector_SVM][0];
 80113e2:	4b74      	ldr	r3, [pc, #464]	; (80115b4 <setSVM_dq+0x304>)
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	4a74      	ldr	r2, [pc, #464]	; (80115b8 <setSVM_dq+0x308>)
 80113e8:	00db      	lsls	r3, r3, #3
 80113ea:	4413      	add	r3, r2
 80113ec:	681b      	ldr	r3, [r3, #0]
 80113ee:	4a73      	ldr	r2, [pc, #460]	; (80115bc <setSVM_dq+0x30c>)
 80113f0:	6013      	str	r3, [r2, #0]
	y1 = refVector[sector_SVM][1];
 80113f2:	4b70      	ldr	r3, [pc, #448]	; (80115b4 <setSVM_dq+0x304>)
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	4a70      	ldr	r2, [pc, #448]	; (80115b8 <setSVM_dq+0x308>)
 80113f8:	00db      	lsls	r3, r3, #3
 80113fa:	4413      	add	r3, r2
 80113fc:	3304      	adds	r3, #4
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	4a6f      	ldr	r2, [pc, #444]	; (80115c0 <setSVM_dq+0x310>)
 8011402:	6013      	str	r3, [r2, #0]
	x2 = refVector[sector_SVM + 1][0];
 8011404:	4b6b      	ldr	r3, [pc, #428]	; (80115b4 <setSVM_dq+0x304>)
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	3301      	adds	r3, #1
 801140a:	4a6b      	ldr	r2, [pc, #428]	; (80115b8 <setSVM_dq+0x308>)
 801140c:	00db      	lsls	r3, r3, #3
 801140e:	4413      	add	r3, r2
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	4a6c      	ldr	r2, [pc, #432]	; (80115c4 <setSVM_dq+0x314>)
 8011414:	6013      	str	r3, [r2, #0]
	y2 = refVector[sector_SVM + 1][1];
 8011416:	4b67      	ldr	r3, [pc, #412]	; (80115b4 <setSVM_dq+0x304>)
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	3301      	adds	r3, #1
 801141c:	4a66      	ldr	r2, [pc, #408]	; (80115b8 <setSVM_dq+0x308>)
 801141e:	00db      	lsls	r3, r3, #3
 8011420:	4413      	add	r3, r2
 8011422:	3304      	adds	r3, #4
 8011424:	681b      	ldr	r3, [r3, #0]
 8011426:	4a68      	ldr	r2, [pc, #416]	; (80115c8 <setSVM_dq+0x318>)
 8011428:	6013      	str	r3, [r2, #0]

	vect1 = (y2 * x - x2 * y) / ((x1 * y2 - y1 * x2) * Vdc);
 801142a:	4b67      	ldr	r3, [pc, #412]	; (80115c8 <setSVM_dq+0x318>)
 801142c:	ed93 7a00 	vldr	s14, [r3]
 8011430:	4b5a      	ldr	r3, [pc, #360]	; (801159c <setSVM_dq+0x2ec>)
 8011432:	edd3 7a00 	vldr	s15, [r3]
 8011436:	ee27 7a27 	vmul.f32	s14, s14, s15
 801143a:	4b62      	ldr	r3, [pc, #392]	; (80115c4 <setSVM_dq+0x314>)
 801143c:	edd3 6a00 	vldr	s13, [r3]
 8011440:	4b57      	ldr	r3, [pc, #348]	; (80115a0 <setSVM_dq+0x2f0>)
 8011442:	edd3 7a00 	vldr	s15, [r3]
 8011446:	ee66 7aa7 	vmul.f32	s15, s13, s15
 801144a:	ee77 6a67 	vsub.f32	s13, s14, s15
 801144e:	4b5b      	ldr	r3, [pc, #364]	; (80115bc <setSVM_dq+0x30c>)
 8011450:	ed93 7a00 	vldr	s14, [r3]
 8011454:	4b5c      	ldr	r3, [pc, #368]	; (80115c8 <setSVM_dq+0x318>)
 8011456:	edd3 7a00 	vldr	s15, [r3]
 801145a:	ee27 7a27 	vmul.f32	s14, s14, s15
 801145e:	4b58      	ldr	r3, [pc, #352]	; (80115c0 <setSVM_dq+0x310>)
 8011460:	ed93 6a00 	vldr	s12, [r3]
 8011464:	4b57      	ldr	r3, [pc, #348]	; (80115c4 <setSVM_dq+0x314>)
 8011466:	edd3 7a00 	vldr	s15, [r3]
 801146a:	ee66 7a27 	vmul.f32	s15, s12, s15
 801146e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011472:	4b56      	ldr	r3, [pc, #344]	; (80115cc <setSVM_dq+0x31c>)
 8011474:	edd3 7a00 	vldr	s15, [r3]
 8011478:	ee27 7a27 	vmul.f32	s14, s14, s15
 801147c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011480:	4b53      	ldr	r3, [pc, #332]	; (80115d0 <setSVM_dq+0x320>)
 8011482:	edc3 7a00 	vstr	s15, [r3]
	vect2 = (-y1 * x + x1 * y) / ((x1 * y2 - y1 * x2) * Vdc);
 8011486:	4b4e      	ldr	r3, [pc, #312]	; (80115c0 <setSVM_dq+0x310>)
 8011488:	edd3 7a00 	vldr	s15, [r3]
 801148c:	eeb1 7a67 	vneg.f32	s14, s15
 8011490:	4b42      	ldr	r3, [pc, #264]	; (801159c <setSVM_dq+0x2ec>)
 8011492:	edd3 7a00 	vldr	s15, [r3]
 8011496:	ee27 7a27 	vmul.f32	s14, s14, s15
 801149a:	4b48      	ldr	r3, [pc, #288]	; (80115bc <setSVM_dq+0x30c>)
 801149c:	edd3 6a00 	vldr	s13, [r3]
 80114a0:	4b3f      	ldr	r3, [pc, #252]	; (80115a0 <setSVM_dq+0x2f0>)
 80114a2:	edd3 7a00 	vldr	s15, [r3]
 80114a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80114aa:	ee77 6a27 	vadd.f32	s13, s14, s15
 80114ae:	4b43      	ldr	r3, [pc, #268]	; (80115bc <setSVM_dq+0x30c>)
 80114b0:	ed93 7a00 	vldr	s14, [r3]
 80114b4:	4b44      	ldr	r3, [pc, #272]	; (80115c8 <setSVM_dq+0x318>)
 80114b6:	edd3 7a00 	vldr	s15, [r3]
 80114ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80114be:	4b40      	ldr	r3, [pc, #256]	; (80115c0 <setSVM_dq+0x310>)
 80114c0:	ed93 6a00 	vldr	s12, [r3]
 80114c4:	4b3f      	ldr	r3, [pc, #252]	; (80115c4 <setSVM_dq+0x314>)
 80114c6:	edd3 7a00 	vldr	s15, [r3]
 80114ca:	ee66 7a27 	vmul.f32	s15, s12, s15
 80114ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80114d2:	4b3e      	ldr	r3, [pc, #248]	; (80115cc <setSVM_dq+0x31c>)
 80114d4:	edd3 7a00 	vldr	s15, [r3]
 80114d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80114dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80114e0:	4b3c      	ldr	r3, [pc, #240]	; (80115d4 <setSVM_dq+0x324>)
 80114e2:	edc3 7a00 	vstr	s15, [r3]

	switch(sector_SVM)
 80114e6:	4b33      	ldr	r3, [pc, #204]	; (80115b4 <setSVM_dq+0x304>)
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	2b05      	cmp	r3, #5
 80114ec:	f200 81d8 	bhi.w	80118a0 <setSVM_dq+0x5f0>
 80114f0:	a201      	add	r2, pc, #4	; (adr r2, 80114f8 <setSVM_dq+0x248>)
 80114f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80114f6:	bf00      	nop
 80114f8:	08011511 	.word	0x08011511
 80114fc:	080115e5 	.word	0x080115e5
 8011500:	08011671 	.word	0x08011671
 8011504:	080116fd 	.word	0x080116fd
 8011508:	08011789 	.word	0x08011789
 801150c:	08011815 	.word	0x08011815
	{
	case 0: duty[2] = (1.0 - vect1 - vect2) * 0.5f; 	duty[1] = duty[2] + vect2; 	duty[0] = duty[1] + vect1;  break;
 8011510:	4b2f      	ldr	r3, [pc, #188]	; (80115d0 <setSVM_dq+0x320>)
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	4618      	mov	r0, r3
 8011516:	f7f6 ff4f 	bl	80083b8 <__aeabi_f2d>
 801151a:	4603      	mov	r3, r0
 801151c:	460c      	mov	r4, r1
 801151e:	461a      	mov	r2, r3
 8011520:	4623      	mov	r3, r4
 8011522:	f04f 0000 	mov.w	r0, #0
 8011526:	492c      	ldr	r1, [pc, #176]	; (80115d8 <setSVM_dq+0x328>)
 8011528:	f7f6 fde6 	bl	80080f8 <__aeabi_dsub>
 801152c:	4603      	mov	r3, r0
 801152e:	460c      	mov	r4, r1
 8011530:	4625      	mov	r5, r4
 8011532:	461c      	mov	r4, r3
 8011534:	4b27      	ldr	r3, [pc, #156]	; (80115d4 <setSVM_dq+0x324>)
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	4618      	mov	r0, r3
 801153a:	f7f6 ff3d 	bl	80083b8 <__aeabi_f2d>
 801153e:	4602      	mov	r2, r0
 8011540:	460b      	mov	r3, r1
 8011542:	4620      	mov	r0, r4
 8011544:	4629      	mov	r1, r5
 8011546:	f7f6 fdd7 	bl	80080f8 <__aeabi_dsub>
 801154a:	4603      	mov	r3, r0
 801154c:	460c      	mov	r4, r1
 801154e:	4618      	mov	r0, r3
 8011550:	4621      	mov	r1, r4
 8011552:	f04f 0200 	mov.w	r2, #0
 8011556:	4b21      	ldr	r3, [pc, #132]	; (80115dc <setSVM_dq+0x32c>)
 8011558:	f7f6 ff86 	bl	8008468 <__aeabi_dmul>
 801155c:	4603      	mov	r3, r0
 801155e:	460c      	mov	r4, r1
 8011560:	4618      	mov	r0, r3
 8011562:	4621      	mov	r1, r4
 8011564:	f7f7 fa58 	bl	8008a18 <__aeabi_d2f>
 8011568:	4602      	mov	r2, r0
 801156a:	4b1d      	ldr	r3, [pc, #116]	; (80115e0 <setSVM_dq+0x330>)
 801156c:	609a      	str	r2, [r3, #8]
 801156e:	4b1c      	ldr	r3, [pc, #112]	; (80115e0 <setSVM_dq+0x330>)
 8011570:	ed93 7a02 	vldr	s14, [r3, #8]
 8011574:	4b17      	ldr	r3, [pc, #92]	; (80115d4 <setSVM_dq+0x324>)
 8011576:	edd3 7a00 	vldr	s15, [r3]
 801157a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801157e:	4b18      	ldr	r3, [pc, #96]	; (80115e0 <setSVM_dq+0x330>)
 8011580:	edc3 7a01 	vstr	s15, [r3, #4]
 8011584:	4b16      	ldr	r3, [pc, #88]	; (80115e0 <setSVM_dq+0x330>)
 8011586:	ed93 7a01 	vldr	s14, [r3, #4]
 801158a:	4b11      	ldr	r3, [pc, #68]	; (80115d0 <setSVM_dq+0x320>)
 801158c:	edd3 7a00 	vldr	s15, [r3]
 8011590:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011594:	4b12      	ldr	r3, [pc, #72]	; (80115e0 <setSVM_dq+0x330>)
 8011596:	edc3 7a00 	vstr	s15, [r3]
 801159a:	e181      	b.n	80118a0 <setSVM_dq+0x5f0>
 801159c:	20004290 	.word	0x20004290
 80115a0:	20004294 	.word	0x20004294
 80115a4:	00000000 	.word	0x00000000
 80115a8:	20004298 	.word	0x20004298
 80115ac:	3f5db22d 	.word	0x3f5db22d
 80115b0:	2000429c 	.word	0x2000429c
 80115b4:	2000428c 	.word	0x2000428c
 80115b8:	08014ef8 	.word	0x08014ef8
 80115bc:	200042a0 	.word	0x200042a0
 80115c0:	200042a4 	.word	0x200042a4
 80115c4:	200042a8 	.word	0x200042a8
 80115c8:	200042ac 	.word	0x200042ac
 80115cc:	20000018 	.word	0x20000018
 80115d0:	200042b0 	.word	0x200042b0
 80115d4:	200042b4 	.word	0x200042b4
 80115d8:	3ff00000 	.word	0x3ff00000
 80115dc:	3fe00000 	.word	0x3fe00000
 80115e0:	200042b8 	.word	0x200042b8
	case 1: duty[2] = (1.0 - vect1 - vect2) * 0.5f; 	duty[0] = duty[2] + vect1; 	duty[1] = duty[0] + vect2; 	break;
 80115e4:	4bc3      	ldr	r3, [pc, #780]	; (80118f4 <setSVM_dq+0x644>)
 80115e6:	681b      	ldr	r3, [r3, #0]
 80115e8:	4618      	mov	r0, r3
 80115ea:	f7f6 fee5 	bl	80083b8 <__aeabi_f2d>
 80115ee:	4603      	mov	r3, r0
 80115f0:	460c      	mov	r4, r1
 80115f2:	461a      	mov	r2, r3
 80115f4:	4623      	mov	r3, r4
 80115f6:	f04f 0000 	mov.w	r0, #0
 80115fa:	49bf      	ldr	r1, [pc, #764]	; (80118f8 <setSVM_dq+0x648>)
 80115fc:	f7f6 fd7c 	bl	80080f8 <__aeabi_dsub>
 8011600:	4603      	mov	r3, r0
 8011602:	460c      	mov	r4, r1
 8011604:	4625      	mov	r5, r4
 8011606:	461c      	mov	r4, r3
 8011608:	4bbc      	ldr	r3, [pc, #752]	; (80118fc <setSVM_dq+0x64c>)
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	4618      	mov	r0, r3
 801160e:	f7f6 fed3 	bl	80083b8 <__aeabi_f2d>
 8011612:	4602      	mov	r2, r0
 8011614:	460b      	mov	r3, r1
 8011616:	4620      	mov	r0, r4
 8011618:	4629      	mov	r1, r5
 801161a:	f7f6 fd6d 	bl	80080f8 <__aeabi_dsub>
 801161e:	4603      	mov	r3, r0
 8011620:	460c      	mov	r4, r1
 8011622:	4618      	mov	r0, r3
 8011624:	4621      	mov	r1, r4
 8011626:	f04f 0200 	mov.w	r2, #0
 801162a:	4bb5      	ldr	r3, [pc, #724]	; (8011900 <setSVM_dq+0x650>)
 801162c:	f7f6 ff1c 	bl	8008468 <__aeabi_dmul>
 8011630:	4603      	mov	r3, r0
 8011632:	460c      	mov	r4, r1
 8011634:	4618      	mov	r0, r3
 8011636:	4621      	mov	r1, r4
 8011638:	f7f7 f9ee 	bl	8008a18 <__aeabi_d2f>
 801163c:	4602      	mov	r2, r0
 801163e:	4bb1      	ldr	r3, [pc, #708]	; (8011904 <setSVM_dq+0x654>)
 8011640:	609a      	str	r2, [r3, #8]
 8011642:	4bb0      	ldr	r3, [pc, #704]	; (8011904 <setSVM_dq+0x654>)
 8011644:	ed93 7a02 	vldr	s14, [r3, #8]
 8011648:	4baa      	ldr	r3, [pc, #680]	; (80118f4 <setSVM_dq+0x644>)
 801164a:	edd3 7a00 	vldr	s15, [r3]
 801164e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011652:	4bac      	ldr	r3, [pc, #688]	; (8011904 <setSVM_dq+0x654>)
 8011654:	edc3 7a00 	vstr	s15, [r3]
 8011658:	4baa      	ldr	r3, [pc, #680]	; (8011904 <setSVM_dq+0x654>)
 801165a:	ed93 7a00 	vldr	s14, [r3]
 801165e:	4ba7      	ldr	r3, [pc, #668]	; (80118fc <setSVM_dq+0x64c>)
 8011660:	edd3 7a00 	vldr	s15, [r3]
 8011664:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011668:	4ba6      	ldr	r3, [pc, #664]	; (8011904 <setSVM_dq+0x654>)
 801166a:	edc3 7a01 	vstr	s15, [r3, #4]
 801166e:	e117      	b.n	80118a0 <setSVM_dq+0x5f0>
	case 2: duty[0] = (1.0 - vect1 - vect2) * 0.5f; 	duty[2] = duty[0] + vect2; 	duty[1] = duty[2] + vect1; 	break;
 8011670:	4ba0      	ldr	r3, [pc, #640]	; (80118f4 <setSVM_dq+0x644>)
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	4618      	mov	r0, r3
 8011676:	f7f6 fe9f 	bl	80083b8 <__aeabi_f2d>
 801167a:	4603      	mov	r3, r0
 801167c:	460c      	mov	r4, r1
 801167e:	461a      	mov	r2, r3
 8011680:	4623      	mov	r3, r4
 8011682:	f04f 0000 	mov.w	r0, #0
 8011686:	499c      	ldr	r1, [pc, #624]	; (80118f8 <setSVM_dq+0x648>)
 8011688:	f7f6 fd36 	bl	80080f8 <__aeabi_dsub>
 801168c:	4603      	mov	r3, r0
 801168e:	460c      	mov	r4, r1
 8011690:	4625      	mov	r5, r4
 8011692:	461c      	mov	r4, r3
 8011694:	4b99      	ldr	r3, [pc, #612]	; (80118fc <setSVM_dq+0x64c>)
 8011696:	681b      	ldr	r3, [r3, #0]
 8011698:	4618      	mov	r0, r3
 801169a:	f7f6 fe8d 	bl	80083b8 <__aeabi_f2d>
 801169e:	4602      	mov	r2, r0
 80116a0:	460b      	mov	r3, r1
 80116a2:	4620      	mov	r0, r4
 80116a4:	4629      	mov	r1, r5
 80116a6:	f7f6 fd27 	bl	80080f8 <__aeabi_dsub>
 80116aa:	4603      	mov	r3, r0
 80116ac:	460c      	mov	r4, r1
 80116ae:	4618      	mov	r0, r3
 80116b0:	4621      	mov	r1, r4
 80116b2:	f04f 0200 	mov.w	r2, #0
 80116b6:	4b92      	ldr	r3, [pc, #584]	; (8011900 <setSVM_dq+0x650>)
 80116b8:	f7f6 fed6 	bl	8008468 <__aeabi_dmul>
 80116bc:	4603      	mov	r3, r0
 80116be:	460c      	mov	r4, r1
 80116c0:	4618      	mov	r0, r3
 80116c2:	4621      	mov	r1, r4
 80116c4:	f7f7 f9a8 	bl	8008a18 <__aeabi_d2f>
 80116c8:	4602      	mov	r2, r0
 80116ca:	4b8e      	ldr	r3, [pc, #568]	; (8011904 <setSVM_dq+0x654>)
 80116cc:	601a      	str	r2, [r3, #0]
 80116ce:	4b8d      	ldr	r3, [pc, #564]	; (8011904 <setSVM_dq+0x654>)
 80116d0:	ed93 7a00 	vldr	s14, [r3]
 80116d4:	4b89      	ldr	r3, [pc, #548]	; (80118fc <setSVM_dq+0x64c>)
 80116d6:	edd3 7a00 	vldr	s15, [r3]
 80116da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80116de:	4b89      	ldr	r3, [pc, #548]	; (8011904 <setSVM_dq+0x654>)
 80116e0:	edc3 7a02 	vstr	s15, [r3, #8]
 80116e4:	4b87      	ldr	r3, [pc, #540]	; (8011904 <setSVM_dq+0x654>)
 80116e6:	ed93 7a02 	vldr	s14, [r3, #8]
 80116ea:	4b82      	ldr	r3, [pc, #520]	; (80118f4 <setSVM_dq+0x644>)
 80116ec:	edd3 7a00 	vldr	s15, [r3]
 80116f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80116f4:	4b83      	ldr	r3, [pc, #524]	; (8011904 <setSVM_dq+0x654>)
 80116f6:	edc3 7a01 	vstr	s15, [r3, #4]
 80116fa:	e0d1      	b.n	80118a0 <setSVM_dq+0x5f0>
	case 3: duty[0] = (1.0 - vect1 - vect2) * 0.5f; 	duty[1] = duty[0] + vect1; 	duty[2] = duty[1] + vect2; 	break;
 80116fc:	4b7d      	ldr	r3, [pc, #500]	; (80118f4 <setSVM_dq+0x644>)
 80116fe:	681b      	ldr	r3, [r3, #0]
 8011700:	4618      	mov	r0, r3
 8011702:	f7f6 fe59 	bl	80083b8 <__aeabi_f2d>
 8011706:	4603      	mov	r3, r0
 8011708:	460c      	mov	r4, r1
 801170a:	461a      	mov	r2, r3
 801170c:	4623      	mov	r3, r4
 801170e:	f04f 0000 	mov.w	r0, #0
 8011712:	4979      	ldr	r1, [pc, #484]	; (80118f8 <setSVM_dq+0x648>)
 8011714:	f7f6 fcf0 	bl	80080f8 <__aeabi_dsub>
 8011718:	4603      	mov	r3, r0
 801171a:	460c      	mov	r4, r1
 801171c:	4625      	mov	r5, r4
 801171e:	461c      	mov	r4, r3
 8011720:	4b76      	ldr	r3, [pc, #472]	; (80118fc <setSVM_dq+0x64c>)
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	4618      	mov	r0, r3
 8011726:	f7f6 fe47 	bl	80083b8 <__aeabi_f2d>
 801172a:	4602      	mov	r2, r0
 801172c:	460b      	mov	r3, r1
 801172e:	4620      	mov	r0, r4
 8011730:	4629      	mov	r1, r5
 8011732:	f7f6 fce1 	bl	80080f8 <__aeabi_dsub>
 8011736:	4603      	mov	r3, r0
 8011738:	460c      	mov	r4, r1
 801173a:	4618      	mov	r0, r3
 801173c:	4621      	mov	r1, r4
 801173e:	f04f 0200 	mov.w	r2, #0
 8011742:	4b6f      	ldr	r3, [pc, #444]	; (8011900 <setSVM_dq+0x650>)
 8011744:	f7f6 fe90 	bl	8008468 <__aeabi_dmul>
 8011748:	4603      	mov	r3, r0
 801174a:	460c      	mov	r4, r1
 801174c:	4618      	mov	r0, r3
 801174e:	4621      	mov	r1, r4
 8011750:	f7f7 f962 	bl	8008a18 <__aeabi_d2f>
 8011754:	4602      	mov	r2, r0
 8011756:	4b6b      	ldr	r3, [pc, #428]	; (8011904 <setSVM_dq+0x654>)
 8011758:	601a      	str	r2, [r3, #0]
 801175a:	4b6a      	ldr	r3, [pc, #424]	; (8011904 <setSVM_dq+0x654>)
 801175c:	ed93 7a00 	vldr	s14, [r3]
 8011760:	4b64      	ldr	r3, [pc, #400]	; (80118f4 <setSVM_dq+0x644>)
 8011762:	edd3 7a00 	vldr	s15, [r3]
 8011766:	ee77 7a27 	vadd.f32	s15, s14, s15
 801176a:	4b66      	ldr	r3, [pc, #408]	; (8011904 <setSVM_dq+0x654>)
 801176c:	edc3 7a01 	vstr	s15, [r3, #4]
 8011770:	4b64      	ldr	r3, [pc, #400]	; (8011904 <setSVM_dq+0x654>)
 8011772:	ed93 7a01 	vldr	s14, [r3, #4]
 8011776:	4b61      	ldr	r3, [pc, #388]	; (80118fc <setSVM_dq+0x64c>)
 8011778:	edd3 7a00 	vldr	s15, [r3]
 801177c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011780:	4b60      	ldr	r3, [pc, #384]	; (8011904 <setSVM_dq+0x654>)
 8011782:	edc3 7a02 	vstr	s15, [r3, #8]
 8011786:	e08b      	b.n	80118a0 <setSVM_dq+0x5f0>
	case 4: duty[1] = (1.0 - vect1 - vect2) * 0.5f; 	duty[0] = duty[1] + vect2; 	duty[2] = duty[0] + vect1; 	break;
 8011788:	4b5a      	ldr	r3, [pc, #360]	; (80118f4 <setSVM_dq+0x644>)
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	4618      	mov	r0, r3
 801178e:	f7f6 fe13 	bl	80083b8 <__aeabi_f2d>
 8011792:	4603      	mov	r3, r0
 8011794:	460c      	mov	r4, r1
 8011796:	461a      	mov	r2, r3
 8011798:	4623      	mov	r3, r4
 801179a:	f04f 0000 	mov.w	r0, #0
 801179e:	4956      	ldr	r1, [pc, #344]	; (80118f8 <setSVM_dq+0x648>)
 80117a0:	f7f6 fcaa 	bl	80080f8 <__aeabi_dsub>
 80117a4:	4603      	mov	r3, r0
 80117a6:	460c      	mov	r4, r1
 80117a8:	4625      	mov	r5, r4
 80117aa:	461c      	mov	r4, r3
 80117ac:	4b53      	ldr	r3, [pc, #332]	; (80118fc <setSVM_dq+0x64c>)
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	4618      	mov	r0, r3
 80117b2:	f7f6 fe01 	bl	80083b8 <__aeabi_f2d>
 80117b6:	4602      	mov	r2, r0
 80117b8:	460b      	mov	r3, r1
 80117ba:	4620      	mov	r0, r4
 80117bc:	4629      	mov	r1, r5
 80117be:	f7f6 fc9b 	bl	80080f8 <__aeabi_dsub>
 80117c2:	4603      	mov	r3, r0
 80117c4:	460c      	mov	r4, r1
 80117c6:	4618      	mov	r0, r3
 80117c8:	4621      	mov	r1, r4
 80117ca:	f04f 0200 	mov.w	r2, #0
 80117ce:	4b4c      	ldr	r3, [pc, #304]	; (8011900 <setSVM_dq+0x650>)
 80117d0:	f7f6 fe4a 	bl	8008468 <__aeabi_dmul>
 80117d4:	4603      	mov	r3, r0
 80117d6:	460c      	mov	r4, r1
 80117d8:	4618      	mov	r0, r3
 80117da:	4621      	mov	r1, r4
 80117dc:	f7f7 f91c 	bl	8008a18 <__aeabi_d2f>
 80117e0:	4602      	mov	r2, r0
 80117e2:	4b48      	ldr	r3, [pc, #288]	; (8011904 <setSVM_dq+0x654>)
 80117e4:	605a      	str	r2, [r3, #4]
 80117e6:	4b47      	ldr	r3, [pc, #284]	; (8011904 <setSVM_dq+0x654>)
 80117e8:	ed93 7a01 	vldr	s14, [r3, #4]
 80117ec:	4b43      	ldr	r3, [pc, #268]	; (80118fc <setSVM_dq+0x64c>)
 80117ee:	edd3 7a00 	vldr	s15, [r3]
 80117f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80117f6:	4b43      	ldr	r3, [pc, #268]	; (8011904 <setSVM_dq+0x654>)
 80117f8:	edc3 7a00 	vstr	s15, [r3]
 80117fc:	4b41      	ldr	r3, [pc, #260]	; (8011904 <setSVM_dq+0x654>)
 80117fe:	ed93 7a00 	vldr	s14, [r3]
 8011802:	4b3c      	ldr	r3, [pc, #240]	; (80118f4 <setSVM_dq+0x644>)
 8011804:	edd3 7a00 	vldr	s15, [r3]
 8011808:	ee77 7a27 	vadd.f32	s15, s14, s15
 801180c:	4b3d      	ldr	r3, [pc, #244]	; (8011904 <setSVM_dq+0x654>)
 801180e:	edc3 7a02 	vstr	s15, [r3, #8]
 8011812:	e045      	b.n	80118a0 <setSVM_dq+0x5f0>
	case 5: duty[1] = (1.0 - vect1 - vect2) * 0.5f; 	duty[2] = duty[1] + vect1; 	duty[0] = duty[2] + vect2; 	break;
 8011814:	4b37      	ldr	r3, [pc, #220]	; (80118f4 <setSVM_dq+0x644>)
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	4618      	mov	r0, r3
 801181a:	f7f6 fdcd 	bl	80083b8 <__aeabi_f2d>
 801181e:	4603      	mov	r3, r0
 8011820:	460c      	mov	r4, r1
 8011822:	461a      	mov	r2, r3
 8011824:	4623      	mov	r3, r4
 8011826:	f04f 0000 	mov.w	r0, #0
 801182a:	4933      	ldr	r1, [pc, #204]	; (80118f8 <setSVM_dq+0x648>)
 801182c:	f7f6 fc64 	bl	80080f8 <__aeabi_dsub>
 8011830:	4603      	mov	r3, r0
 8011832:	460c      	mov	r4, r1
 8011834:	4625      	mov	r5, r4
 8011836:	461c      	mov	r4, r3
 8011838:	4b30      	ldr	r3, [pc, #192]	; (80118fc <setSVM_dq+0x64c>)
 801183a:	681b      	ldr	r3, [r3, #0]
 801183c:	4618      	mov	r0, r3
 801183e:	f7f6 fdbb 	bl	80083b8 <__aeabi_f2d>
 8011842:	4602      	mov	r2, r0
 8011844:	460b      	mov	r3, r1
 8011846:	4620      	mov	r0, r4
 8011848:	4629      	mov	r1, r5
 801184a:	f7f6 fc55 	bl	80080f8 <__aeabi_dsub>
 801184e:	4603      	mov	r3, r0
 8011850:	460c      	mov	r4, r1
 8011852:	4618      	mov	r0, r3
 8011854:	4621      	mov	r1, r4
 8011856:	f04f 0200 	mov.w	r2, #0
 801185a:	4b29      	ldr	r3, [pc, #164]	; (8011900 <setSVM_dq+0x650>)
 801185c:	f7f6 fe04 	bl	8008468 <__aeabi_dmul>
 8011860:	4603      	mov	r3, r0
 8011862:	460c      	mov	r4, r1
 8011864:	4618      	mov	r0, r3
 8011866:	4621      	mov	r1, r4
 8011868:	f7f7 f8d6 	bl	8008a18 <__aeabi_d2f>
 801186c:	4602      	mov	r2, r0
 801186e:	4b25      	ldr	r3, [pc, #148]	; (8011904 <setSVM_dq+0x654>)
 8011870:	605a      	str	r2, [r3, #4]
 8011872:	4b24      	ldr	r3, [pc, #144]	; (8011904 <setSVM_dq+0x654>)
 8011874:	ed93 7a01 	vldr	s14, [r3, #4]
 8011878:	4b1e      	ldr	r3, [pc, #120]	; (80118f4 <setSVM_dq+0x644>)
 801187a:	edd3 7a00 	vldr	s15, [r3]
 801187e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011882:	4b20      	ldr	r3, [pc, #128]	; (8011904 <setSVM_dq+0x654>)
 8011884:	edc3 7a02 	vstr	s15, [r3, #8]
 8011888:	4b1e      	ldr	r3, [pc, #120]	; (8011904 <setSVM_dq+0x654>)
 801188a:	ed93 7a02 	vldr	s14, [r3, #8]
 801188e:	4b1b      	ldr	r3, [pc, #108]	; (80118fc <setSVM_dq+0x64c>)
 8011890:	edd3 7a00 	vldr	s15, [r3]
 8011894:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011898:	4b1a      	ldr	r3, [pc, #104]	; (8011904 <setSVM_dq+0x654>)
 801189a:	edc3 7a00 	vstr	s15, [r3]
 801189e:	bf00      	nop
	}


	if(duty[0] < -1.0f) duty[0] = -1.0f; else if (duty[0] > 1.0f) duty[0] = 1.0f;
 80118a0:	4b18      	ldr	r3, [pc, #96]	; (8011904 <setSVM_dq+0x654>)
 80118a2:	edd3 7a00 	vldr	s15, [r3]
 80118a6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80118aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80118ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118b2:	d503      	bpl.n	80118bc <setSVM_dq+0x60c>
 80118b4:	4b13      	ldr	r3, [pc, #76]	; (8011904 <setSVM_dq+0x654>)
 80118b6:	4a14      	ldr	r2, [pc, #80]	; (8011908 <setSVM_dq+0x658>)
 80118b8:	601a      	str	r2, [r3, #0]
 80118ba:	e00d      	b.n	80118d8 <setSVM_dq+0x628>
 80118bc:	4b11      	ldr	r3, [pc, #68]	; (8011904 <setSVM_dq+0x654>)
 80118be:	edd3 7a00 	vldr	s15, [r3]
 80118c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80118c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80118ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118ce:	dd03      	ble.n	80118d8 <setSVM_dq+0x628>
 80118d0:	4b0c      	ldr	r3, [pc, #48]	; (8011904 <setSVM_dq+0x654>)
 80118d2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80118d6:	601a      	str	r2, [r3, #0]
	if(duty[1] < -1.0f) duty[1] = -1.0f; else if (duty[1] > 1.0f) duty[1] = 1.0f;
 80118d8:	4b0a      	ldr	r3, [pc, #40]	; (8011904 <setSVM_dq+0x654>)
 80118da:	edd3 7a01 	vldr	s15, [r3, #4]
 80118de:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80118e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80118e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118ea:	d50f      	bpl.n	801190c <setSVM_dq+0x65c>
 80118ec:	4b05      	ldr	r3, [pc, #20]	; (8011904 <setSVM_dq+0x654>)
 80118ee:	4a06      	ldr	r2, [pc, #24]	; (8011908 <setSVM_dq+0x658>)
 80118f0:	605a      	str	r2, [r3, #4]
 80118f2:	e019      	b.n	8011928 <setSVM_dq+0x678>
 80118f4:	200042b0 	.word	0x200042b0
 80118f8:	3ff00000 	.word	0x3ff00000
 80118fc:	200042b4 	.word	0x200042b4
 8011900:	3fe00000 	.word	0x3fe00000
 8011904:	200042b8 	.word	0x200042b8
 8011908:	bf800000 	.word	0xbf800000
 801190c:	4b3c      	ldr	r3, [pc, #240]	; (8011a00 <setSVM_dq+0x750>)
 801190e:	edd3 7a01 	vldr	s15, [r3, #4]
 8011912:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011916:	eef4 7ac7 	vcmpe.f32	s15, s14
 801191a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801191e:	dd03      	ble.n	8011928 <setSVM_dq+0x678>
 8011920:	4b37      	ldr	r3, [pc, #220]	; (8011a00 <setSVM_dq+0x750>)
 8011922:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8011926:	605a      	str	r2, [r3, #4]
	if(duty[2] < -1.0f) duty[2] = -1.0f; else if (duty[2] > 1.0f) duty[2] = 1.0f;
 8011928:	4b35      	ldr	r3, [pc, #212]	; (8011a00 <setSVM_dq+0x750>)
 801192a:	edd3 7a02 	vldr	s15, [r3, #8]
 801192e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8011932:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801193a:	d503      	bpl.n	8011944 <setSVM_dq+0x694>
 801193c:	4b30      	ldr	r3, [pc, #192]	; (8011a00 <setSVM_dq+0x750>)
 801193e:	4a31      	ldr	r2, [pc, #196]	; (8011a04 <setSVM_dq+0x754>)
 8011940:	609a      	str	r2, [r3, #8]
 8011942:	e00d      	b.n	8011960 <setSVM_dq+0x6b0>
 8011944:	4b2e      	ldr	r3, [pc, #184]	; (8011a00 <setSVM_dq+0x750>)
 8011946:	edd3 7a02 	vldr	s15, [r3, #8]
 801194a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801194e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8011952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011956:	dd03      	ble.n	8011960 <setSVM_dq+0x6b0>
 8011958:	4b29      	ldr	r3, [pc, #164]	; (8011a00 <setSVM_dq+0x750>)
 801195a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801195e:	609a      	str	r2, [r3, #8]

	__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_1, htim->Init.Period * (1.0f - (amp_u = duty[0])));
 8011960:	697b      	ldr	r3, [r7, #20]
 8011962:	68db      	ldr	r3, [r3, #12]
 8011964:	ee07 3a90 	vmov	s15, r3
 8011968:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801196c:	4b24      	ldr	r3, [pc, #144]	; (8011a00 <setSVM_dq+0x750>)
 801196e:	edd3 7a00 	vldr	s15, [r3]
 8011972:	4b25      	ldr	r3, [pc, #148]	; (8011a08 <setSVM_dq+0x758>)
 8011974:	edc3 7a00 	vstr	s15, [r3]
 8011978:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801197c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8011980:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011984:	697b      	ldr	r3, [r7, #20]
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801198c:	ee17 2a90 	vmov	r2, s15
 8011990:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_2, htim->Init.Period * (1.0f - (amp_v = duty[1])));
 8011992:	697b      	ldr	r3, [r7, #20]
 8011994:	68db      	ldr	r3, [r3, #12]
 8011996:	ee07 3a90 	vmov	s15, r3
 801199a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801199e:	4b18      	ldr	r3, [pc, #96]	; (8011a00 <setSVM_dq+0x750>)
 80119a0:	edd3 7a01 	vldr	s15, [r3, #4]
 80119a4:	4b19      	ldr	r3, [pc, #100]	; (8011a0c <setSVM_dq+0x75c>)
 80119a6:	edc3 7a00 	vstr	s15, [r3]
 80119aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80119ae:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80119b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80119b6:	697b      	ldr	r3, [r7, #20]
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80119be:	ee17 2a90 	vmov	r2, s15
 80119c2:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(htim, TIM_CHANNEL_3, htim->Init.Period * (1.0f - (amp_w = duty[2])));
 80119c4:	697b      	ldr	r3, [r7, #20]
 80119c6:	68db      	ldr	r3, [r3, #12]
 80119c8:	ee07 3a90 	vmov	s15, r3
 80119cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80119d0:	4b0b      	ldr	r3, [pc, #44]	; (8011a00 <setSVM_dq+0x750>)
 80119d2:	edd3 7a02 	vldr	s15, [r3, #8]
 80119d6:	4b0e      	ldr	r3, [pc, #56]	; (8011a10 <setSVM_dq+0x760>)
 80119d8:	edc3 7a00 	vstr	s15, [r3]
 80119dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80119e0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80119e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80119e8:	697b      	ldr	r3, [r7, #20]
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80119f0:	ee17 2a90 	vmov	r2, s15
 80119f4:	63da      	str	r2, [r3, #60]	; 0x3c


	return;
 80119f6:	bf00      	nop
}
 80119f8:	3718      	adds	r7, #24
 80119fa:	46bd      	mov	sp, r7
 80119fc:	bdb0      	pop	{r4, r5, r7, pc}
 80119fe:	bf00      	nop
 8011a00:	200042b8 	.word	0x200042b8
 8011a04:	bf800000 	.word	0xbf800000
 8011a08:	20004280 	.word	0x20004280
 8011a0c:	20004284 	.word	0x20004284
 8011a10:	20004288 	.word	0x20004288

08011a14 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
SPI_HandleTypeDef hspi3;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8011a14:	b580      	push	{r7, lr}
 8011a16:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8011a18:	4b18      	ldr	r3, [pc, #96]	; (8011a7c <MX_SPI2_Init+0x68>)
 8011a1a:	4a19      	ldr	r2, [pc, #100]	; (8011a80 <MX_SPI2_Init+0x6c>)
 8011a1c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8011a1e:	4b17      	ldr	r3, [pc, #92]	; (8011a7c <MX_SPI2_Init+0x68>)
 8011a20:	f44f 7282 	mov.w	r2, #260	; 0x104
 8011a24:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8011a26:	4b15      	ldr	r3, [pc, #84]	; (8011a7c <MX_SPI2_Init+0x68>)
 8011a28:	2200      	movs	r2, #0
 8011a2a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8011a2c:	4b13      	ldr	r3, [pc, #76]	; (8011a7c <MX_SPI2_Init+0x68>)
 8011a2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011a32:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8011a34:	4b11      	ldr	r3, [pc, #68]	; (8011a7c <MX_SPI2_Init+0x68>)
 8011a36:	2200      	movs	r2, #0
 8011a38:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8011a3a:	4b10      	ldr	r3, [pc, #64]	; (8011a7c <MX_SPI2_Init+0x68>)
 8011a3c:	2201      	movs	r2, #1
 8011a3e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8011a40:	4b0e      	ldr	r3, [pc, #56]	; (8011a7c <MX_SPI2_Init+0x68>)
 8011a42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011a46:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8011a48:	4b0c      	ldr	r3, [pc, #48]	; (8011a7c <MX_SPI2_Init+0x68>)
 8011a4a:	2218      	movs	r2, #24
 8011a4c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8011a4e:	4b0b      	ldr	r3, [pc, #44]	; (8011a7c <MX_SPI2_Init+0x68>)
 8011a50:	2200      	movs	r2, #0
 8011a52:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8011a54:	4b09      	ldr	r3, [pc, #36]	; (8011a7c <MX_SPI2_Init+0x68>)
 8011a56:	2200      	movs	r2, #0
 8011a58:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011a5a:	4b08      	ldr	r3, [pc, #32]	; (8011a7c <MX_SPI2_Init+0x68>)
 8011a5c:	2200      	movs	r2, #0
 8011a5e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8011a60:	4b06      	ldr	r3, [pc, #24]	; (8011a7c <MX_SPI2_Init+0x68>)
 8011a62:	220a      	movs	r2, #10
 8011a64:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8011a66:	4805      	ldr	r0, [pc, #20]	; (8011a7c <MX_SPI2_Init+0x68>)
 8011a68:	f7fa fa04 	bl	800be74 <HAL_SPI_Init>
 8011a6c:	4603      	mov	r3, r0
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d001      	beq.n	8011a76 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8011a72:	f7ff fbbb 	bl	80111ec <Error_Handler>
  }

}
 8011a76:	bf00      	nop
 8011a78:	bd80      	pop	{r7, pc}
 8011a7a:	bf00      	nop
 8011a7c:	20004774 	.word	0x20004774
 8011a80:	40003800 	.word	0x40003800

08011a84 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8011a84:	b580      	push	{r7, lr}
 8011a86:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8011a88:	4b17      	ldr	r3, [pc, #92]	; (8011ae8 <MX_SPI3_Init+0x64>)
 8011a8a:	4a18      	ldr	r2, [pc, #96]	; (8011aec <MX_SPI3_Init+0x68>)
 8011a8c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8011a8e:	4b16      	ldr	r3, [pc, #88]	; (8011ae8 <MX_SPI3_Init+0x64>)
 8011a90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8011a94:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8011a96:	4b14      	ldr	r3, [pc, #80]	; (8011ae8 <MX_SPI3_Init+0x64>)
 8011a98:	2200      	movs	r2, #0
 8011a9a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8011a9c:	4b12      	ldr	r3, [pc, #72]	; (8011ae8 <MX_SPI3_Init+0x64>)
 8011a9e:	2200      	movs	r2, #0
 8011aa0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8011aa2:	4b11      	ldr	r3, [pc, #68]	; (8011ae8 <MX_SPI3_Init+0x64>)
 8011aa4:	2200      	movs	r2, #0
 8011aa6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8011aa8:	4b0f      	ldr	r3, [pc, #60]	; (8011ae8 <MX_SPI3_Init+0x64>)
 8011aaa:	2201      	movs	r2, #1
 8011aac:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8011aae:	4b0e      	ldr	r3, [pc, #56]	; (8011ae8 <MX_SPI3_Init+0x64>)
 8011ab0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011ab4:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8011ab6:	4b0c      	ldr	r3, [pc, #48]	; (8011ae8 <MX_SPI3_Init+0x64>)
 8011ab8:	2220      	movs	r2, #32
 8011aba:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8011abc:	4b0a      	ldr	r3, [pc, #40]	; (8011ae8 <MX_SPI3_Init+0x64>)
 8011abe:	2200      	movs	r2, #0
 8011ac0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8011ac2:	4b09      	ldr	r3, [pc, #36]	; (8011ae8 <MX_SPI3_Init+0x64>)
 8011ac4:	2200      	movs	r2, #0
 8011ac6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011ac8:	4b07      	ldr	r3, [pc, #28]	; (8011ae8 <MX_SPI3_Init+0x64>)
 8011aca:	2200      	movs	r2, #0
 8011acc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8011ace:	4b06      	ldr	r3, [pc, #24]	; (8011ae8 <MX_SPI3_Init+0x64>)
 8011ad0:	220a      	movs	r2, #10
 8011ad2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8011ad4:	4804      	ldr	r0, [pc, #16]	; (8011ae8 <MX_SPI3_Init+0x64>)
 8011ad6:	f7fa f9cd 	bl	800be74 <HAL_SPI_Init>
 8011ada:	4603      	mov	r3, r0
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	d001      	beq.n	8011ae4 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8011ae0:	f7ff fb84 	bl	80111ec <Error_Handler>
  }

}
 8011ae4:	bf00      	nop
 8011ae6:	bd80      	pop	{r7, pc}
 8011ae8:	200047cc 	.word	0x200047cc
 8011aec:	40003c00 	.word	0x40003c00

08011af0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8011af0:	b580      	push	{r7, lr}
 8011af2:	b08e      	sub	sp, #56	; 0x38
 8011af4:	af00      	add	r7, sp, #0
 8011af6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011af8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011afc:	2200      	movs	r2, #0
 8011afe:	601a      	str	r2, [r3, #0]
 8011b00:	605a      	str	r2, [r3, #4]
 8011b02:	609a      	str	r2, [r3, #8]
 8011b04:	60da      	str	r2, [r3, #12]
 8011b06:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	4a5d      	ldr	r2, [pc, #372]	; (8011c84 <HAL_SPI_MspInit+0x194>)
 8011b0e:	4293      	cmp	r3, r2
 8011b10:	d163      	bne.n	8011bda <HAL_SPI_MspInit+0xea>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8011b12:	2300      	movs	r3, #0
 8011b14:	623b      	str	r3, [r7, #32]
 8011b16:	4b5c      	ldr	r3, [pc, #368]	; (8011c88 <HAL_SPI_MspInit+0x198>)
 8011b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b1a:	4a5b      	ldr	r2, [pc, #364]	; (8011c88 <HAL_SPI_MspInit+0x198>)
 8011b1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011b20:	6413      	str	r3, [r2, #64]	; 0x40
 8011b22:	4b59      	ldr	r3, [pc, #356]	; (8011c88 <HAL_SPI_MspInit+0x198>)
 8011b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011b2a:	623b      	str	r3, [r7, #32]
 8011b2c:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011b2e:	2300      	movs	r3, #0
 8011b30:	61fb      	str	r3, [r7, #28]
 8011b32:	4b55      	ldr	r3, [pc, #340]	; (8011c88 <HAL_SPI_MspInit+0x198>)
 8011b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b36:	4a54      	ldr	r2, [pc, #336]	; (8011c88 <HAL_SPI_MspInit+0x198>)
 8011b38:	f043 0304 	orr.w	r3, r3, #4
 8011b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8011b3e:	4b52      	ldr	r3, [pc, #328]	; (8011c88 <HAL_SPI_MspInit+0x198>)
 8011b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b42:	f003 0304 	and.w	r3, r3, #4
 8011b46:	61fb      	str	r3, [r7, #28]
 8011b48:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011b4a:	2300      	movs	r3, #0
 8011b4c:	61bb      	str	r3, [r7, #24]
 8011b4e:	4b4e      	ldr	r3, [pc, #312]	; (8011c88 <HAL_SPI_MspInit+0x198>)
 8011b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b52:	4a4d      	ldr	r2, [pc, #308]	; (8011c88 <HAL_SPI_MspInit+0x198>)
 8011b54:	f043 0302 	orr.w	r3, r3, #2
 8011b58:	6313      	str	r3, [r2, #48]	; 0x30
 8011b5a:	4b4b      	ldr	r3, [pc, #300]	; (8011c88 <HAL_SPI_MspInit+0x198>)
 8011b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b5e:	f003 0302 	and.w	r3, r3, #2
 8011b62:	61bb      	str	r3, [r7, #24]
 8011b64:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration    
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8011b66:	2302      	movs	r3, #2
 8011b68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011b6a:	2302      	movs	r3, #2
 8011b6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011b6e:	2300      	movs	r3, #0
 8011b70:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011b72:	2303      	movs	r3, #3
 8011b74:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8011b76:	2307      	movs	r3, #7
 8011b78:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011b7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011b7e:	4619      	mov	r1, r3
 8011b80:	4842      	ldr	r0, [pc, #264]	; (8011c8c <HAL_SPI_MspInit+0x19c>)
 8011b82:	f7f9 faa3 	bl	800b0cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8011b86:	2304      	movs	r3, #4
 8011b88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011b8a:	2302      	movs	r3, #2
 8011b8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011b8e:	2300      	movs	r3, #0
 8011b90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011b92:	2303      	movs	r3, #3
 8011b94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8011b96:	2305      	movs	r3, #5
 8011b98:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011b9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011b9e:	4619      	mov	r1, r3
 8011ba0:	483a      	ldr	r0, [pc, #232]	; (8011c8c <HAL_SPI_MspInit+0x19c>)
 8011ba2:	f7f9 fa93 	bl	800b0cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8011ba6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011baa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011bac:	2302      	movs	r3, #2
 8011bae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011bb0:	2300      	movs	r3, #0
 8011bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011bb4:	2303      	movs	r3, #3
 8011bb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8011bb8:	2305      	movs	r3, #5
 8011bba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011bbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011bc0:	4619      	mov	r1, r3
 8011bc2:	4833      	ldr	r0, [pc, #204]	; (8011c90 <HAL_SPI_MspInit+0x1a0>)
 8011bc4:	f7f9 fa82 	bl	800b0cc <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8011bc8:	2200      	movs	r2, #0
 8011bca:	2100      	movs	r1, #0
 8011bcc:	2024      	movs	r0, #36	; 0x24
 8011bce:	f7f8 fbca 	bl	800a366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8011bd2:	2024      	movs	r0, #36	; 0x24
 8011bd4:	f7f8 fbe3 	bl	800a39e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8011bd8:	e04f      	b.n	8011c7a <HAL_SPI_MspInit+0x18a>
  else if(spiHandle->Instance==SPI3)
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	4a2d      	ldr	r2, [pc, #180]	; (8011c94 <HAL_SPI_MspInit+0x1a4>)
 8011be0:	4293      	cmp	r3, r2
 8011be2:	d14a      	bne.n	8011c7a <HAL_SPI_MspInit+0x18a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8011be4:	2300      	movs	r3, #0
 8011be6:	617b      	str	r3, [r7, #20]
 8011be8:	4b27      	ldr	r3, [pc, #156]	; (8011c88 <HAL_SPI_MspInit+0x198>)
 8011bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011bec:	4a26      	ldr	r2, [pc, #152]	; (8011c88 <HAL_SPI_MspInit+0x198>)
 8011bee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011bf2:	6413      	str	r3, [r2, #64]	; 0x40
 8011bf4:	4b24      	ldr	r3, [pc, #144]	; (8011c88 <HAL_SPI_MspInit+0x198>)
 8011bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011bf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011bfc:	617b      	str	r3, [r7, #20]
 8011bfe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011c00:	2300      	movs	r3, #0
 8011c02:	613b      	str	r3, [r7, #16]
 8011c04:	4b20      	ldr	r3, [pc, #128]	; (8011c88 <HAL_SPI_MspInit+0x198>)
 8011c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c08:	4a1f      	ldr	r2, [pc, #124]	; (8011c88 <HAL_SPI_MspInit+0x198>)
 8011c0a:	f043 0302 	orr.w	r3, r3, #2
 8011c0e:	6313      	str	r3, [r2, #48]	; 0x30
 8011c10:	4b1d      	ldr	r3, [pc, #116]	; (8011c88 <HAL_SPI_MspInit+0x198>)
 8011c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c14:	f003 0302 	and.w	r3, r3, #2
 8011c18:	613b      	str	r3, [r7, #16]
 8011c1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011c1c:	2300      	movs	r3, #0
 8011c1e:	60fb      	str	r3, [r7, #12]
 8011c20:	4b19      	ldr	r3, [pc, #100]	; (8011c88 <HAL_SPI_MspInit+0x198>)
 8011c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c24:	4a18      	ldr	r2, [pc, #96]	; (8011c88 <HAL_SPI_MspInit+0x198>)
 8011c26:	f043 0304 	orr.w	r3, r3, #4
 8011c2a:	6313      	str	r3, [r2, #48]	; 0x30
 8011c2c:	4b16      	ldr	r3, [pc, #88]	; (8011c88 <HAL_SPI_MspInit+0x198>)
 8011c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c30:	f003 0304 	and.w	r3, r3, #4
 8011c34:	60fb      	str	r3, [r7, #12]
 8011c36:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8011c38:	2304      	movs	r3, #4
 8011c3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011c3c:	2302      	movs	r3, #2
 8011c3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011c40:	2300      	movs	r3, #0
 8011c42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011c44:	2303      	movs	r3, #3
 8011c46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8011c48:	2307      	movs	r3, #7
 8011c4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011c4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011c50:	4619      	mov	r1, r3
 8011c52:	480f      	ldr	r0, [pc, #60]	; (8011c90 <HAL_SPI_MspInit+0x1a0>)
 8011c54:	f7f9 fa3a 	bl	800b0cc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8011c58:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8011c5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011c5e:	2302      	movs	r3, #2
 8011c60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011c62:	2300      	movs	r3, #0
 8011c64:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011c66:	2303      	movs	r3, #3
 8011c68:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8011c6a:	2306      	movs	r3, #6
 8011c6c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011c6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011c72:	4619      	mov	r1, r3
 8011c74:	4805      	ldr	r0, [pc, #20]	; (8011c8c <HAL_SPI_MspInit+0x19c>)
 8011c76:	f7f9 fa29 	bl	800b0cc <HAL_GPIO_Init>
}
 8011c7a:	bf00      	nop
 8011c7c:	3738      	adds	r7, #56	; 0x38
 8011c7e:	46bd      	mov	sp, r7
 8011c80:	bd80      	pop	{r7, pc}
 8011c82:	bf00      	nop
 8011c84:	40003800 	.word	0x40003800
 8011c88:	40023800 	.word	0x40023800
 8011c8c:	40020800 	.word	0x40020800
 8011c90:	40020400 	.word	0x40020400
 8011c94:	40003c00 	.word	0x40003c00

08011c98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8011c98:	b580      	push	{r7, lr}
 8011c9a:	b082      	sub	sp, #8
 8011c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8011c9e:	2300      	movs	r3, #0
 8011ca0:	607b      	str	r3, [r7, #4]
 8011ca2:	4b10      	ldr	r3, [pc, #64]	; (8011ce4 <HAL_MspInit+0x4c>)
 8011ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011ca6:	4a0f      	ldr	r2, [pc, #60]	; (8011ce4 <HAL_MspInit+0x4c>)
 8011ca8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011cac:	6453      	str	r3, [r2, #68]	; 0x44
 8011cae:	4b0d      	ldr	r3, [pc, #52]	; (8011ce4 <HAL_MspInit+0x4c>)
 8011cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011cb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011cb6:	607b      	str	r3, [r7, #4]
 8011cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8011cba:	2300      	movs	r3, #0
 8011cbc:	603b      	str	r3, [r7, #0]
 8011cbe:	4b09      	ldr	r3, [pc, #36]	; (8011ce4 <HAL_MspInit+0x4c>)
 8011cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011cc2:	4a08      	ldr	r2, [pc, #32]	; (8011ce4 <HAL_MspInit+0x4c>)
 8011cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8011cc8:	6413      	str	r3, [r2, #64]	; 0x40
 8011cca:	4b06      	ldr	r3, [pc, #24]	; (8011ce4 <HAL_MspInit+0x4c>)
 8011ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8011cd2:	603b      	str	r3, [r7, #0]
 8011cd4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8011cd6:	2007      	movs	r0, #7
 8011cd8:	f7f8 fb3a 	bl	800a350 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8011cdc:	bf00      	nop
 8011cde:	3708      	adds	r7, #8
 8011ce0:	46bd      	mov	sp, r7
 8011ce2:	bd80      	pop	{r7, pc}
 8011ce4:	40023800 	.word	0x40023800

08011ce8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8011ce8:	b480      	push	{r7}
 8011cea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8011cec:	bf00      	nop
 8011cee:	46bd      	mov	sp, r7
 8011cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf4:	4770      	bx	lr

08011cf6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8011cf6:	b480      	push	{r7}
 8011cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8011cfa:	e7fe      	b.n	8011cfa <HardFault_Handler+0x4>

08011cfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8011cfc:	b480      	push	{r7}
 8011cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8011d00:	e7fe      	b.n	8011d00 <MemManage_Handler+0x4>

08011d02 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8011d02:	b480      	push	{r7}
 8011d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8011d06:	e7fe      	b.n	8011d06 <BusFault_Handler+0x4>

08011d08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8011d08:	b480      	push	{r7}
 8011d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8011d0c:	e7fe      	b.n	8011d0c <UsageFault_Handler+0x4>

08011d0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8011d0e:	b480      	push	{r7}
 8011d10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8011d12:	bf00      	nop
 8011d14:	46bd      	mov	sp, r7
 8011d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d1a:	4770      	bx	lr

08011d1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8011d1c:	b480      	push	{r7}
 8011d1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8011d20:	bf00      	nop
 8011d22:	46bd      	mov	sp, r7
 8011d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d28:	4770      	bx	lr

08011d2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8011d2a:	b480      	push	{r7}
 8011d2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8011d2e:	bf00      	nop
 8011d30:	46bd      	mov	sp, r7
 8011d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d36:	4770      	bx	lr

08011d38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8011d38:	b580      	push	{r7, lr}
 8011d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8011d3c:	f7f7 f88e 	bl	8008e5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8011d40:	bf00      	nop
 8011d42:	bd80      	pop	{r7, pc}

08011d44 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8011d44:	b580      	push	{r7, lr}
 8011d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8011d48:	4802      	ldr	r0, [pc, #8]	; (8011d54 <CAN1_TX_IRQHandler+0x10>)
 8011d4a:	f7f8 f826 	bl	8009d9a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8011d4e:	bf00      	nop
 8011d50:	bd80      	pop	{r7, pc}
 8011d52:	bf00      	nop
 8011d54:	20004700 	.word	0x20004700

08011d58 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8011d58:	b580      	push	{r7, lr}
 8011d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8011d5c:	4802      	ldr	r0, [pc, #8]	; (8011d68 <CAN1_RX0_IRQHandler+0x10>)
 8011d5e:	f7f8 f81c 	bl	8009d9a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8011d62:	bf00      	nop
 8011d64:	bd80      	pop	{r7, pc}
 8011d66:	bf00      	nop
 8011d68:	20004700 	.word	0x20004700

08011d6c <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8011d6c:	b580      	push	{r7, lr}
 8011d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8011d70:	4802      	ldr	r0, [pc, #8]	; (8011d7c <SPI2_IRQHandler+0x10>)
 8011d72:	f7fa fb19 	bl	800c3a8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8011d76:	bf00      	nop
 8011d78:	bd80      	pop	{r7, pc}
 8011d7a:	bf00      	nop
 8011d7c:	20004774 	.word	0x20004774

08011d80 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8011d80:	b580      	push	{r7, lr}
 8011d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8011d84:	4802      	ldr	r0, [pc, #8]	; (8011d90 <USART2_IRQHandler+0x10>)
 8011d86:	f7fc f805 	bl	800dd94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8011d8a:	bf00      	nop
 8011d8c:	bd80      	pop	{r7, pc}
 8011d8e:	bf00      	nop
 8011d90:	20004864 	.word	0x20004864

08011d94 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8011d94:	b580      	push	{r7, lr}
 8011d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8011d98:	4802      	ldr	r0, [pc, #8]	; (8011da4 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8011d9a:	f7fa ff97 	bl	800cccc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8011d9e:	bf00      	nop
 8011da0:	bd80      	pop	{r7, pc}
 8011da2:	bf00      	nop
 8011da4:	20004824 	.word	0x20004824

08011da8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8011da8:	b580      	push	{r7, lr}
 8011daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8011dac:	4802      	ldr	r0, [pc, #8]	; (8011db8 <DMA2_Stream0_IRQHandler+0x10>)
 8011dae:	f7f8 fc41 	bl	800a634 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8011db2:	bf00      	nop
 8011db4:	bd80      	pop	{r7, pc}
 8011db6:	bf00      	nop
 8011db8:	200045f4 	.word	0x200045f4

08011dbc <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8011dbc:	b580      	push	{r7, lr}
 8011dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8011dc0:	4802      	ldr	r0, [pc, #8]	; (8011dcc <DMA2_Stream1_IRQHandler+0x10>)
 8011dc2:	f7f8 fc37 	bl	800a634 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8011dc6:	bf00      	nop
 8011dc8:	bd80      	pop	{r7, pc}
 8011dca:	bf00      	nop
 8011dcc:	20004504 	.word	0x20004504

08011dd0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8011dd0:	b580      	push	{r7, lr}
 8011dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8011dd4:	4802      	ldr	r0, [pc, #8]	; (8011de0 <DMA2_Stream2_IRQHandler+0x10>)
 8011dd6:	f7f8 fc2d 	bl	800a634 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8011dda:	bf00      	nop
 8011ddc:	bd80      	pop	{r7, pc}
 8011dde:	bf00      	nop
 8011de0:	20004654 	.word	0x20004654

08011de4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8011de4:	b580      	push	{r7, lr}
 8011de6:	b086      	sub	sp, #24
 8011de8:	af00      	add	r7, sp, #0
 8011dea:	60f8      	str	r0, [r7, #12]
 8011dec:	60b9      	str	r1, [r7, #8]
 8011dee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011df0:	2300      	movs	r3, #0
 8011df2:	617b      	str	r3, [r7, #20]
 8011df4:	e00a      	b.n	8011e0c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8011df6:	f3af 8000 	nop.w
 8011dfa:	4601      	mov	r1, r0
 8011dfc:	68bb      	ldr	r3, [r7, #8]
 8011dfe:	1c5a      	adds	r2, r3, #1
 8011e00:	60ba      	str	r2, [r7, #8]
 8011e02:	b2ca      	uxtb	r2, r1
 8011e04:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011e06:	697b      	ldr	r3, [r7, #20]
 8011e08:	3301      	adds	r3, #1
 8011e0a:	617b      	str	r3, [r7, #20]
 8011e0c:	697a      	ldr	r2, [r7, #20]
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	429a      	cmp	r2, r3
 8011e12:	dbf0      	blt.n	8011df6 <_read+0x12>
	}

return len;
 8011e14:	687b      	ldr	r3, [r7, #4]
}
 8011e16:	4618      	mov	r0, r3
 8011e18:	3718      	adds	r7, #24
 8011e1a:	46bd      	mov	sp, r7
 8011e1c:	bd80      	pop	{r7, pc}

08011e1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8011e1e:	b580      	push	{r7, lr}
 8011e20:	b086      	sub	sp, #24
 8011e22:	af00      	add	r7, sp, #0
 8011e24:	60f8      	str	r0, [r7, #12]
 8011e26:	60b9      	str	r1, [r7, #8]
 8011e28:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011e2a:	2300      	movs	r3, #0
 8011e2c:	617b      	str	r3, [r7, #20]
 8011e2e:	e009      	b.n	8011e44 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8011e30:	68bb      	ldr	r3, [r7, #8]
 8011e32:	1c5a      	adds	r2, r3, #1
 8011e34:	60ba      	str	r2, [r7, #8]
 8011e36:	781b      	ldrb	r3, [r3, #0]
 8011e38:	4618      	mov	r0, r3
 8011e3a:	f7fe feef 	bl	8010c1c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8011e3e:	697b      	ldr	r3, [r7, #20]
 8011e40:	3301      	adds	r3, #1
 8011e42:	617b      	str	r3, [r7, #20]
 8011e44:	697a      	ldr	r2, [r7, #20]
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	429a      	cmp	r2, r3
 8011e4a:	dbf1      	blt.n	8011e30 <_write+0x12>
	}
	return len;
 8011e4c:	687b      	ldr	r3, [r7, #4]
}
 8011e4e:	4618      	mov	r0, r3
 8011e50:	3718      	adds	r7, #24
 8011e52:	46bd      	mov	sp, r7
 8011e54:	bd80      	pop	{r7, pc}

08011e56 <_close>:

int _close(int file)
{
 8011e56:	b480      	push	{r7}
 8011e58:	b083      	sub	sp, #12
 8011e5a:	af00      	add	r7, sp, #0
 8011e5c:	6078      	str	r0, [r7, #4]
	return -1;
 8011e5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011e62:	4618      	mov	r0, r3
 8011e64:	370c      	adds	r7, #12
 8011e66:	46bd      	mov	sp, r7
 8011e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e6c:	4770      	bx	lr

08011e6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8011e6e:	b480      	push	{r7}
 8011e70:	b083      	sub	sp, #12
 8011e72:	af00      	add	r7, sp, #0
 8011e74:	6078      	str	r0, [r7, #4]
 8011e76:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8011e78:	683b      	ldr	r3, [r7, #0]
 8011e7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8011e7e:	605a      	str	r2, [r3, #4]
	return 0;
 8011e80:	2300      	movs	r3, #0
}
 8011e82:	4618      	mov	r0, r3
 8011e84:	370c      	adds	r7, #12
 8011e86:	46bd      	mov	sp, r7
 8011e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e8c:	4770      	bx	lr

08011e8e <_isatty>:

int _isatty(int file)
{
 8011e8e:	b480      	push	{r7}
 8011e90:	b083      	sub	sp, #12
 8011e92:	af00      	add	r7, sp, #0
 8011e94:	6078      	str	r0, [r7, #4]
	return 1;
 8011e96:	2301      	movs	r3, #1
}
 8011e98:	4618      	mov	r0, r3
 8011e9a:	370c      	adds	r7, #12
 8011e9c:	46bd      	mov	sp, r7
 8011e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ea2:	4770      	bx	lr

08011ea4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8011ea4:	b480      	push	{r7}
 8011ea6:	b085      	sub	sp, #20
 8011ea8:	af00      	add	r7, sp, #0
 8011eaa:	60f8      	str	r0, [r7, #12]
 8011eac:	60b9      	str	r1, [r7, #8]
 8011eae:	607a      	str	r2, [r7, #4]
	return 0;
 8011eb0:	2300      	movs	r3, #0
}
 8011eb2:	4618      	mov	r0, r3
 8011eb4:	3714      	adds	r7, #20
 8011eb6:	46bd      	mov	sp, r7
 8011eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ebc:	4770      	bx	lr
	...

08011ec0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8011ec0:	b580      	push	{r7, lr}
 8011ec2:	b084      	sub	sp, #16
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8011ec8:	4b11      	ldr	r3, [pc, #68]	; (8011f10 <_sbrk+0x50>)
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d102      	bne.n	8011ed6 <_sbrk+0x16>
		heap_end = &end;
 8011ed0:	4b0f      	ldr	r3, [pc, #60]	; (8011f10 <_sbrk+0x50>)
 8011ed2:	4a10      	ldr	r2, [pc, #64]	; (8011f14 <_sbrk+0x54>)
 8011ed4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8011ed6:	4b0e      	ldr	r3, [pc, #56]	; (8011f10 <_sbrk+0x50>)
 8011ed8:	681b      	ldr	r3, [r3, #0]
 8011eda:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8011edc:	4b0c      	ldr	r3, [pc, #48]	; (8011f10 <_sbrk+0x50>)
 8011ede:	681a      	ldr	r2, [r3, #0]
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	4413      	add	r3, r2
 8011ee4:	466a      	mov	r2, sp
 8011ee6:	4293      	cmp	r3, r2
 8011ee8:	d907      	bls.n	8011efa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8011eea:	f000 fa49 	bl	8012380 <__errno>
 8011eee:	4602      	mov	r2, r0
 8011ef0:	230c      	movs	r3, #12
 8011ef2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8011ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8011ef8:	e006      	b.n	8011f08 <_sbrk+0x48>
	}

	heap_end += incr;
 8011efa:	4b05      	ldr	r3, [pc, #20]	; (8011f10 <_sbrk+0x50>)
 8011efc:	681a      	ldr	r2, [r3, #0]
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	4413      	add	r3, r2
 8011f02:	4a03      	ldr	r2, [pc, #12]	; (8011f10 <_sbrk+0x50>)
 8011f04:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8011f06:	68fb      	ldr	r3, [r7, #12]
}
 8011f08:	4618      	mov	r0, r3
 8011f0a:	3710      	adds	r7, #16
 8011f0c:	46bd      	mov	sp, r7
 8011f0e:	bd80      	pop	{r7, pc}
 8011f10:	200042c4 	.word	0x200042c4
 8011f14:	200048a8 	.word	0x200048a8

08011f18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8011f18:	b480      	push	{r7}
 8011f1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8011f1c:	4b16      	ldr	r3, [pc, #88]	; (8011f78 <SystemInit+0x60>)
 8011f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011f22:	4a15      	ldr	r2, [pc, #84]	; (8011f78 <SystemInit+0x60>)
 8011f24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011f28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8011f2c:	4b13      	ldr	r3, [pc, #76]	; (8011f7c <SystemInit+0x64>)
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	4a12      	ldr	r2, [pc, #72]	; (8011f7c <SystemInit+0x64>)
 8011f32:	f043 0301 	orr.w	r3, r3, #1
 8011f36:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8011f38:	4b10      	ldr	r3, [pc, #64]	; (8011f7c <SystemInit+0x64>)
 8011f3a:	2200      	movs	r2, #0
 8011f3c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8011f3e:	4b0f      	ldr	r3, [pc, #60]	; (8011f7c <SystemInit+0x64>)
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	4a0e      	ldr	r2, [pc, #56]	; (8011f7c <SystemInit+0x64>)
 8011f44:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8011f48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011f4c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8011f4e:	4b0b      	ldr	r3, [pc, #44]	; (8011f7c <SystemInit+0x64>)
 8011f50:	4a0b      	ldr	r2, [pc, #44]	; (8011f80 <SystemInit+0x68>)
 8011f52:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8011f54:	4b09      	ldr	r3, [pc, #36]	; (8011f7c <SystemInit+0x64>)
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	4a08      	ldr	r2, [pc, #32]	; (8011f7c <SystemInit+0x64>)
 8011f5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8011f5e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8011f60:	4b06      	ldr	r3, [pc, #24]	; (8011f7c <SystemInit+0x64>)
 8011f62:	2200      	movs	r2, #0
 8011f64:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8011f66:	4b04      	ldr	r3, [pc, #16]	; (8011f78 <SystemInit+0x60>)
 8011f68:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8011f6c:	609a      	str	r2, [r3, #8]
#endif
}
 8011f6e:	bf00      	nop
 8011f70:	46bd      	mov	sp, r7
 8011f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f76:	4770      	bx	lr
 8011f78:	e000ed00 	.word	0xe000ed00
 8011f7c:	40023800 	.word	0x40023800
 8011f80:	24003010 	.word	0x24003010

08011f84 <MX_TIM8_Init>:

TIM_HandleTypeDef htim8;

/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8011f84:	b580      	push	{r7, lr}
 8011f86:	b096      	sub	sp, #88	; 0x58
 8011f88:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8011f8a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8011f8e:	2200      	movs	r2, #0
 8011f90:	601a      	str	r2, [r3, #0]
 8011f92:	605a      	str	r2, [r3, #4]
 8011f94:	609a      	str	r2, [r3, #8]
 8011f96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8011f98:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8011f9c:	2200      	movs	r2, #0
 8011f9e:	601a      	str	r2, [r3, #0]
 8011fa0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8011fa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011fa6:	2200      	movs	r2, #0
 8011fa8:	601a      	str	r2, [r3, #0]
 8011faa:	605a      	str	r2, [r3, #4]
 8011fac:	609a      	str	r2, [r3, #8]
 8011fae:	60da      	str	r2, [r3, #12]
 8011fb0:	611a      	str	r2, [r3, #16]
 8011fb2:	615a      	str	r2, [r3, #20]
 8011fb4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8011fb6:	1d3b      	adds	r3, r7, #4
 8011fb8:	2220      	movs	r2, #32
 8011fba:	2100      	movs	r1, #0
 8011fbc:	4618      	mov	r0, r3
 8011fbe:	f000 fa14 	bl	80123ea <memset>

  htim8.Instance = TIM8;
 8011fc2:	4b4a      	ldr	r3, [pc, #296]	; (80120ec <MX_TIM8_Init+0x168>)
 8011fc4:	4a4a      	ldr	r2, [pc, #296]	; (80120f0 <MX_TIM8_Init+0x16c>)
 8011fc6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8011fc8:	4b48      	ldr	r3, [pc, #288]	; (80120ec <MX_TIM8_Init+0x168>)
 8011fca:	2200      	movs	r2, #0
 8011fcc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8011fce:	4b47      	ldr	r3, [pc, #284]	; (80120ec <MX_TIM8_Init+0x168>)
 8011fd0:	2220      	movs	r2, #32
 8011fd2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 8000;
 8011fd4:	4b45      	ldr	r3, [pc, #276]	; (80120ec <MX_TIM8_Init+0x168>)
 8011fd6:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8011fda:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8011fdc:	4b43      	ldr	r3, [pc, #268]	; (80120ec <MX_TIM8_Init+0x168>)
 8011fde:	2200      	movs	r2, #0
 8011fe0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8011fe2:	4b42      	ldr	r3, [pc, #264]	; (80120ec <MX_TIM8_Init+0x168>)
 8011fe4:	2200      	movs	r2, #0
 8011fe6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8011fe8:	4b40      	ldr	r3, [pc, #256]	; (80120ec <MX_TIM8_Init+0x168>)
 8011fea:	2200      	movs	r2, #0
 8011fec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8011fee:	483f      	ldr	r0, [pc, #252]	; (80120ec <MX_TIM8_Init+0x168>)
 8011ff0:	f7fa fcee 	bl	800c9d0 <HAL_TIM_Base_Init>
 8011ff4:	4603      	mov	r3, r0
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d001      	beq.n	8011ffe <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8011ffa:	f7ff f8f7 	bl	80111ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8011ffe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012002:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8012004:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8012008:	4619      	mov	r1, r3
 801200a:	4838      	ldr	r0, [pc, #224]	; (80120ec <MX_TIM8_Init+0x168>)
 801200c:	f7fb f853 	bl	800d0b6 <HAL_TIM_ConfigClockSource>
 8012010:	4603      	mov	r3, r0
 8012012:	2b00      	cmp	r3, #0
 8012014:	d001      	beq.n	801201a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8012016:	f7ff f8e9 	bl	80111ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 801201a:	4834      	ldr	r0, [pc, #208]	; (80120ec <MX_TIM8_Init+0x168>)
 801201c:	f7fa fd03 	bl	800ca26 <HAL_TIM_PWM_Init>
 8012020:	4603      	mov	r3, r0
 8012022:	2b00      	cmp	r3, #0
 8012024:	d001      	beq.n	801202a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8012026:	f7ff f8e1 	bl	80111ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 801202a:	2320      	movs	r3, #32
 801202c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 801202e:	2300      	movs	r3, #0
 8012030:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8012032:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8012036:	4619      	mov	r1, r3
 8012038:	482c      	ldr	r0, [pc, #176]	; (80120ec <MX_TIM8_Init+0x168>)
 801203a:	f7fb fcf5 	bl	800da28 <HAL_TIMEx_MasterConfigSynchronization>
 801203e:	4603      	mov	r3, r0
 8012040:	2b00      	cmp	r3, #0
 8012042:	d001      	beq.n	8012048 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8012044:	f7ff f8d2 	bl	80111ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8012048:	2360      	movs	r3, #96	; 0x60
 801204a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 4000;
 801204c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8012050:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8012052:	2300      	movs	r3, #0
 8012054:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8012056:	2300      	movs	r3, #0
 8012058:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801205a:	2300      	movs	r3, #0
 801205c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 801205e:	2300      	movs	r3, #0
 8012060:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8012062:	2300      	movs	r3, #0
 8012064:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8012066:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801206a:	2200      	movs	r2, #0
 801206c:	4619      	mov	r1, r3
 801206e:	481f      	ldr	r0, [pc, #124]	; (80120ec <MX_TIM8_Init+0x168>)
 8012070:	f7fa ff34 	bl	800cedc <HAL_TIM_PWM_ConfigChannel>
 8012074:	4603      	mov	r3, r0
 8012076:	2b00      	cmp	r3, #0
 8012078:	d001      	beq.n	801207e <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 801207a:	f7ff f8b7 	bl	80111ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 801207e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012082:	2204      	movs	r2, #4
 8012084:	4619      	mov	r1, r3
 8012086:	4819      	ldr	r0, [pc, #100]	; (80120ec <MX_TIM8_Init+0x168>)
 8012088:	f7fa ff28 	bl	800cedc <HAL_TIM_PWM_ConfigChannel>
 801208c:	4603      	mov	r3, r0
 801208e:	2b00      	cmp	r3, #0
 8012090:	d001      	beq.n	8012096 <MX_TIM8_Init+0x112>
  {
    Error_Handler();
 8012092:	f7ff f8ab 	bl	80111ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8012096:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801209a:	2208      	movs	r2, #8
 801209c:	4619      	mov	r1, r3
 801209e:	4813      	ldr	r0, [pc, #76]	; (80120ec <MX_TIM8_Init+0x168>)
 80120a0:	f7fa ff1c 	bl	800cedc <HAL_TIM_PWM_ConfigChannel>
 80120a4:	4603      	mov	r3, r0
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d001      	beq.n	80120ae <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 80120aa:	f7ff f89f 	bl	80111ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80120ae:	2300      	movs	r3, #0
 80120b0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80120b2:	2300      	movs	r3, #0
 80120b4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80120b6:	2300      	movs	r3, #0
 80120b8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80120ba:	2300      	movs	r3, #0
 80120bc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80120be:	2300      	movs	r3, #0
 80120c0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_LOW;
 80120c2:	2300      	movs	r3, #0
 80120c4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80120c6:	2300      	movs	r3, #0
 80120c8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80120ca:	1d3b      	adds	r3, r7, #4
 80120cc:	4619      	mov	r1, r3
 80120ce:	4807      	ldr	r0, [pc, #28]	; (80120ec <MX_TIM8_Init+0x168>)
 80120d0:	f7fb fcef 	bl	800dab2 <HAL_TIMEx_ConfigBreakDeadTime>
 80120d4:	4603      	mov	r3, r0
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d001      	beq.n	80120de <MX_TIM8_Init+0x15a>
  {
    Error_Handler();
 80120da:	f7ff f887 	bl	80111ec <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim8);
 80120de:	4803      	ldr	r0, [pc, #12]	; (80120ec <MX_TIM8_Init+0x168>)
 80120e0:	f000 f830 	bl	8012144 <HAL_TIM_MspPostInit>

}
 80120e4:	bf00      	nop
 80120e6:	3758      	adds	r7, #88	; 0x58
 80120e8:	46bd      	mov	sp, r7
 80120ea:	bd80      	pop	{r7, pc}
 80120ec:	20004824 	.word	0x20004824
 80120f0:	40010400 	.word	0x40010400

080120f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80120f4:	b580      	push	{r7, lr}
 80120f6:	b084      	sub	sp, #16
 80120f8:	af00      	add	r7, sp, #0
 80120fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM8)
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	4a0e      	ldr	r2, [pc, #56]	; (801213c <HAL_TIM_Base_MspInit+0x48>)
 8012102:	4293      	cmp	r3, r2
 8012104:	d115      	bne.n	8012132 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* TIM8 clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8012106:	2300      	movs	r3, #0
 8012108:	60fb      	str	r3, [r7, #12]
 801210a:	4b0d      	ldr	r3, [pc, #52]	; (8012140 <HAL_TIM_Base_MspInit+0x4c>)
 801210c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801210e:	4a0c      	ldr	r2, [pc, #48]	; (8012140 <HAL_TIM_Base_MspInit+0x4c>)
 8012110:	f043 0302 	orr.w	r3, r3, #2
 8012114:	6453      	str	r3, [r2, #68]	; 0x44
 8012116:	4b0a      	ldr	r3, [pc, #40]	; (8012140 <HAL_TIM_Base_MspInit+0x4c>)
 8012118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801211a:	f003 0302 	and.w	r3, r3, #2
 801211e:	60fb      	str	r3, [r7, #12]
 8012120:	68fb      	ldr	r3, [r7, #12]

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8012122:	2200      	movs	r2, #0
 8012124:	2100      	movs	r1, #0
 8012126:	202c      	movs	r0, #44	; 0x2c
 8012128:	f7f8 f91d 	bl	800a366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 801212c:	202c      	movs	r0, #44	; 0x2c
 801212e:	f7f8 f936 	bl	800a39e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8012132:	bf00      	nop
 8012134:	3710      	adds	r7, #16
 8012136:	46bd      	mov	sp, r7
 8012138:	bd80      	pop	{r7, pc}
 801213a:	bf00      	nop
 801213c:	40010400 	.word	0x40010400
 8012140:	40023800 	.word	0x40023800

08012144 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8012144:	b580      	push	{r7, lr}
 8012146:	b08a      	sub	sp, #40	; 0x28
 8012148:	af00      	add	r7, sp, #0
 801214a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801214c:	f107 0314 	add.w	r3, r7, #20
 8012150:	2200      	movs	r2, #0
 8012152:	601a      	str	r2, [r3, #0]
 8012154:	605a      	str	r2, [r3, #4]
 8012156:	609a      	str	r2, [r3, #8]
 8012158:	60da      	str	r2, [r3, #12]
 801215a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM8)
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	4a30      	ldr	r2, [pc, #192]	; (8012224 <HAL_TIM_MspPostInit+0xe0>)
 8012162:	4293      	cmp	r3, r2
 8012164:	d15a      	bne.n	801221c <HAL_TIM_MspPostInit+0xd8>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012166:	2300      	movs	r3, #0
 8012168:	613b      	str	r3, [r7, #16]
 801216a:	4b2f      	ldr	r3, [pc, #188]	; (8012228 <HAL_TIM_MspPostInit+0xe4>)
 801216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801216e:	4a2e      	ldr	r2, [pc, #184]	; (8012228 <HAL_TIM_MspPostInit+0xe4>)
 8012170:	f043 0301 	orr.w	r3, r3, #1
 8012174:	6313      	str	r3, [r2, #48]	; 0x30
 8012176:	4b2c      	ldr	r3, [pc, #176]	; (8012228 <HAL_TIM_MspPostInit+0xe4>)
 8012178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801217a:	f003 0301 	and.w	r3, r3, #1
 801217e:	613b      	str	r3, [r7, #16]
 8012180:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8012182:	2300      	movs	r3, #0
 8012184:	60fb      	str	r3, [r7, #12]
 8012186:	4b28      	ldr	r3, [pc, #160]	; (8012228 <HAL_TIM_MspPostInit+0xe4>)
 8012188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801218a:	4a27      	ldr	r2, [pc, #156]	; (8012228 <HAL_TIM_MspPostInit+0xe4>)
 801218c:	f043 0302 	orr.w	r3, r3, #2
 8012190:	6313      	str	r3, [r2, #48]	; 0x30
 8012192:	4b25      	ldr	r3, [pc, #148]	; (8012228 <HAL_TIM_MspPostInit+0xe4>)
 8012194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012196:	f003 0302 	and.w	r3, r3, #2
 801219a:	60fb      	str	r3, [r7, #12]
 801219c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801219e:	2300      	movs	r3, #0
 80121a0:	60bb      	str	r3, [r7, #8]
 80121a2:	4b21      	ldr	r3, [pc, #132]	; (8012228 <HAL_TIM_MspPostInit+0xe4>)
 80121a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80121a6:	4a20      	ldr	r2, [pc, #128]	; (8012228 <HAL_TIM_MspPostInit+0xe4>)
 80121a8:	f043 0304 	orr.w	r3, r3, #4
 80121ac:	6313      	str	r3, [r2, #48]	; 0x30
 80121ae:	4b1e      	ldr	r3, [pc, #120]	; (8012228 <HAL_TIM_MspPostInit+0xe4>)
 80121b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80121b2:	f003 0304 	and.w	r3, r3, #4
 80121b6:	60bb      	str	r3, [r7, #8]
 80121b8:	68bb      	ldr	r3, [r7, #8]
    PB1     ------> TIM8_CH3N
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80121ba:	2380      	movs	r3, #128	; 0x80
 80121bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80121be:	2302      	movs	r3, #2
 80121c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80121c2:	2300      	movs	r3, #0
 80121c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80121c6:	2300      	movs	r3, #0
 80121c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80121ca:	2303      	movs	r3, #3
 80121cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80121ce:	f107 0314 	add.w	r3, r7, #20
 80121d2:	4619      	mov	r1, r3
 80121d4:	4815      	ldr	r0, [pc, #84]	; (801222c <HAL_TIM_MspPostInit+0xe8>)
 80121d6:	f7f8 ff79 	bl	800b0cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80121da:	2303      	movs	r3, #3
 80121dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80121de:	2302      	movs	r3, #2
 80121e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80121e2:	2300      	movs	r3, #0
 80121e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80121e6:	2300      	movs	r3, #0
 80121e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80121ea:	2303      	movs	r3, #3
 80121ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80121ee:	f107 0314 	add.w	r3, r7, #20
 80121f2:	4619      	mov	r1, r3
 80121f4:	480e      	ldr	r0, [pc, #56]	; (8012230 <HAL_TIM_MspPostInit+0xec>)
 80121f6:	f7f8 ff69 	bl	800b0cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 80121fa:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80121fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012200:	2302      	movs	r3, #2
 8012202:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012204:	2300      	movs	r3, #0
 8012206:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012208:	2300      	movs	r3, #0
 801220a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 801220c:	2303      	movs	r3, #3
 801220e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012210:	f107 0314 	add.w	r3, r7, #20
 8012214:	4619      	mov	r1, r3
 8012216:	4807      	ldr	r0, [pc, #28]	; (8012234 <HAL_TIM_MspPostInit+0xf0>)
 8012218:	f7f8 ff58 	bl	800b0cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 801221c:	bf00      	nop
 801221e:	3728      	adds	r7, #40	; 0x28
 8012220:	46bd      	mov	sp, r7
 8012222:	bd80      	pop	{r7, pc}
 8012224:	40010400 	.word	0x40010400
 8012228:	40023800 	.word	0x40023800
 801222c:	40020000 	.word	0x40020000
 8012230:	40020400 	.word	0x40020400
 8012234:	40020800 	.word	0x40020800

08012238 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8012238:	b580      	push	{r7, lr}
 801223a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 801223c:	4b11      	ldr	r3, [pc, #68]	; (8012284 <MX_USART2_UART_Init+0x4c>)
 801223e:	4a12      	ldr	r2, [pc, #72]	; (8012288 <MX_USART2_UART_Init+0x50>)
 8012240:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8012242:	4b10      	ldr	r3, [pc, #64]	; (8012284 <MX_USART2_UART_Init+0x4c>)
 8012244:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8012248:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 801224a:	4b0e      	ldr	r3, [pc, #56]	; (8012284 <MX_USART2_UART_Init+0x4c>)
 801224c:	2200      	movs	r2, #0
 801224e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8012250:	4b0c      	ldr	r3, [pc, #48]	; (8012284 <MX_USART2_UART_Init+0x4c>)
 8012252:	2200      	movs	r2, #0
 8012254:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8012256:	4b0b      	ldr	r3, [pc, #44]	; (8012284 <MX_USART2_UART_Init+0x4c>)
 8012258:	2200      	movs	r2, #0
 801225a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 801225c:	4b09      	ldr	r3, [pc, #36]	; (8012284 <MX_USART2_UART_Init+0x4c>)
 801225e:	220c      	movs	r2, #12
 8012260:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8012262:	4b08      	ldr	r3, [pc, #32]	; (8012284 <MX_USART2_UART_Init+0x4c>)
 8012264:	2200      	movs	r2, #0
 8012266:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8012268:	4b06      	ldr	r3, [pc, #24]	; (8012284 <MX_USART2_UART_Init+0x4c>)
 801226a:	2200      	movs	r2, #0
 801226c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 801226e:	4805      	ldr	r0, [pc, #20]	; (8012284 <MX_USART2_UART_Init+0x4c>)
 8012270:	f7fb fcaa 	bl	800dbc8 <HAL_UART_Init>
 8012274:	4603      	mov	r3, r0
 8012276:	2b00      	cmp	r3, #0
 8012278:	d001      	beq.n	801227e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 801227a:	f7fe ffb7 	bl	80111ec <Error_Handler>
  }

}
 801227e:	bf00      	nop
 8012280:	bd80      	pop	{r7, pc}
 8012282:	bf00      	nop
 8012284:	20004864 	.word	0x20004864
 8012288:	40004400 	.word	0x40004400

0801228c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 801228c:	b580      	push	{r7, lr}
 801228e:	b08a      	sub	sp, #40	; 0x28
 8012290:	af00      	add	r7, sp, #0
 8012292:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012294:	f107 0314 	add.w	r3, r7, #20
 8012298:	2200      	movs	r2, #0
 801229a:	601a      	str	r2, [r3, #0]
 801229c:	605a      	str	r2, [r3, #4]
 801229e:	609a      	str	r2, [r3, #8]
 80122a0:	60da      	str	r2, [r3, #12]
 80122a2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	4a1d      	ldr	r2, [pc, #116]	; (8012320 <HAL_UART_MspInit+0x94>)
 80122aa:	4293      	cmp	r3, r2
 80122ac:	d133      	bne.n	8012316 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80122ae:	2300      	movs	r3, #0
 80122b0:	613b      	str	r3, [r7, #16]
 80122b2:	4b1c      	ldr	r3, [pc, #112]	; (8012324 <HAL_UART_MspInit+0x98>)
 80122b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122b6:	4a1b      	ldr	r2, [pc, #108]	; (8012324 <HAL_UART_MspInit+0x98>)
 80122b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80122bc:	6413      	str	r3, [r2, #64]	; 0x40
 80122be:	4b19      	ldr	r3, [pc, #100]	; (8012324 <HAL_UART_MspInit+0x98>)
 80122c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80122c6:	613b      	str	r3, [r7, #16]
 80122c8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80122ca:	2300      	movs	r3, #0
 80122cc:	60fb      	str	r3, [r7, #12]
 80122ce:	4b15      	ldr	r3, [pc, #84]	; (8012324 <HAL_UART_MspInit+0x98>)
 80122d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80122d2:	4a14      	ldr	r2, [pc, #80]	; (8012324 <HAL_UART_MspInit+0x98>)
 80122d4:	f043 0301 	orr.w	r3, r3, #1
 80122d8:	6313      	str	r3, [r2, #48]	; 0x30
 80122da:	4b12      	ldr	r3, [pc, #72]	; (8012324 <HAL_UART_MspInit+0x98>)
 80122dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80122de:	f003 0301 	and.w	r3, r3, #1
 80122e2:	60fb      	str	r3, [r7, #12]
 80122e4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80122e6:	230c      	movs	r3, #12
 80122e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80122ea:	2302      	movs	r3, #2
 80122ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80122ee:	2301      	movs	r3, #1
 80122f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80122f2:	2303      	movs	r3, #3
 80122f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80122f6:	2307      	movs	r3, #7
 80122f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80122fa:	f107 0314 	add.w	r3, r7, #20
 80122fe:	4619      	mov	r1, r3
 8012300:	4809      	ldr	r0, [pc, #36]	; (8012328 <HAL_UART_MspInit+0x9c>)
 8012302:	f7f8 fee3 	bl	800b0cc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8012306:	2200      	movs	r2, #0
 8012308:	2100      	movs	r1, #0
 801230a:	2026      	movs	r0, #38	; 0x26
 801230c:	f7f8 f82b 	bl	800a366 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8012310:	2026      	movs	r0, #38	; 0x26
 8012312:	f7f8 f844 	bl	800a39e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8012316:	bf00      	nop
 8012318:	3728      	adds	r7, #40	; 0x28
 801231a:	46bd      	mov	sp, r7
 801231c:	bd80      	pop	{r7, pc}
 801231e:	bf00      	nop
 8012320:	40004400 	.word	0x40004400
 8012324:	40023800 	.word	0x40023800
 8012328:	40020000 	.word	0x40020000

0801232c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 801232c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8012364 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8012330:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8012332:	e003      	b.n	801233c <LoopCopyDataInit>

08012334 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8012334:	4b0c      	ldr	r3, [pc, #48]	; (8012368 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8012336:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8012338:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 801233a:	3104      	adds	r1, #4

0801233c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 801233c:	480b      	ldr	r0, [pc, #44]	; (801236c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 801233e:	4b0c      	ldr	r3, [pc, #48]	; (8012370 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8012340:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8012342:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8012344:	d3f6      	bcc.n	8012334 <CopyDataInit>
  ldr  r2, =_sbss
 8012346:	4a0b      	ldr	r2, [pc, #44]	; (8012374 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8012348:	e002      	b.n	8012350 <LoopFillZerobss>

0801234a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 801234a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 801234c:	f842 3b04 	str.w	r3, [r2], #4

08012350 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8012350:	4b09      	ldr	r3, [pc, #36]	; (8012378 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8012352:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8012354:	d3f9      	bcc.n	801234a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8012356:	f7ff fddf 	bl	8011f18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801235a:	f000 f817 	bl	801238c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 801235e:	f7fe fc6f 	bl	8010c40 <main>
  bx  lr    
 8012362:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8012364:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8012368:	08028aa8 	.word	0x08028aa8
  ldr  r0, =_sdata
 801236c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8012370:	200001f4 	.word	0x200001f4
  ldr  r2, =_sbss
 8012374:	200001f4 	.word	0x200001f4
  ldr  r3, = _ebss
 8012378:	200048a8 	.word	0x200048a8

0801237c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 801237c:	e7fe      	b.n	801237c <ADC_IRQHandler>
	...

08012380 <__errno>:
 8012380:	4b01      	ldr	r3, [pc, #4]	; (8012388 <__errno+0x8>)
 8012382:	6818      	ldr	r0, [r3, #0]
 8012384:	4770      	bx	lr
 8012386:	bf00      	nop
 8012388:	20000020 	.word	0x20000020

0801238c <__libc_init_array>:
 801238c:	b570      	push	{r4, r5, r6, lr}
 801238e:	4e0d      	ldr	r6, [pc, #52]	; (80123c4 <__libc_init_array+0x38>)
 8012390:	4c0d      	ldr	r4, [pc, #52]	; (80123c8 <__libc_init_array+0x3c>)
 8012392:	1ba4      	subs	r4, r4, r6
 8012394:	10a4      	asrs	r4, r4, #2
 8012396:	2500      	movs	r5, #0
 8012398:	42a5      	cmp	r5, r4
 801239a:	d109      	bne.n	80123b0 <__libc_init_array+0x24>
 801239c:	4e0b      	ldr	r6, [pc, #44]	; (80123cc <__libc_init_array+0x40>)
 801239e:	4c0c      	ldr	r4, [pc, #48]	; (80123d0 <__libc_init_array+0x44>)
 80123a0:	f002 fc94 	bl	8014ccc <_init>
 80123a4:	1ba4      	subs	r4, r4, r6
 80123a6:	10a4      	asrs	r4, r4, #2
 80123a8:	2500      	movs	r5, #0
 80123aa:	42a5      	cmp	r5, r4
 80123ac:	d105      	bne.n	80123ba <__libc_init_array+0x2e>
 80123ae:	bd70      	pop	{r4, r5, r6, pc}
 80123b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80123b4:	4798      	blx	r3
 80123b6:	3501      	adds	r5, #1
 80123b8:	e7ee      	b.n	8012398 <__libc_init_array+0xc>
 80123ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80123be:	4798      	blx	r3
 80123c0:	3501      	adds	r5, #1
 80123c2:	e7f2      	b.n	80123aa <__libc_init_array+0x1e>
 80123c4:	08028aa0 	.word	0x08028aa0
 80123c8:	08028aa0 	.word	0x08028aa0
 80123cc:	08028aa0 	.word	0x08028aa0
 80123d0:	08028aa4 	.word	0x08028aa4

080123d4 <memcpy>:
 80123d4:	b510      	push	{r4, lr}
 80123d6:	1e43      	subs	r3, r0, #1
 80123d8:	440a      	add	r2, r1
 80123da:	4291      	cmp	r1, r2
 80123dc:	d100      	bne.n	80123e0 <memcpy+0xc>
 80123de:	bd10      	pop	{r4, pc}
 80123e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80123e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80123e8:	e7f7      	b.n	80123da <memcpy+0x6>

080123ea <memset>:
 80123ea:	4402      	add	r2, r0
 80123ec:	4603      	mov	r3, r0
 80123ee:	4293      	cmp	r3, r2
 80123f0:	d100      	bne.n	80123f4 <memset+0xa>
 80123f2:	4770      	bx	lr
 80123f4:	f803 1b01 	strb.w	r1, [r3], #1
 80123f8:	e7f9      	b.n	80123ee <memset+0x4>

080123fa <__cvt>:
 80123fa:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80123fe:	ec55 4b10 	vmov	r4, r5, d0
 8012402:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8012404:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012408:	2d00      	cmp	r5, #0
 801240a:	460e      	mov	r6, r1
 801240c:	4691      	mov	r9, r2
 801240e:	4619      	mov	r1, r3
 8012410:	bfb8      	it	lt
 8012412:	4622      	movlt	r2, r4
 8012414:	462b      	mov	r3, r5
 8012416:	f027 0720 	bic.w	r7, r7, #32
 801241a:	bfbb      	ittet	lt
 801241c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8012420:	461d      	movlt	r5, r3
 8012422:	2300      	movge	r3, #0
 8012424:	232d      	movlt	r3, #45	; 0x2d
 8012426:	bfb8      	it	lt
 8012428:	4614      	movlt	r4, r2
 801242a:	2f46      	cmp	r7, #70	; 0x46
 801242c:	700b      	strb	r3, [r1, #0]
 801242e:	d004      	beq.n	801243a <__cvt+0x40>
 8012430:	2f45      	cmp	r7, #69	; 0x45
 8012432:	d100      	bne.n	8012436 <__cvt+0x3c>
 8012434:	3601      	adds	r6, #1
 8012436:	2102      	movs	r1, #2
 8012438:	e000      	b.n	801243c <__cvt+0x42>
 801243a:	2103      	movs	r1, #3
 801243c:	ab03      	add	r3, sp, #12
 801243e:	9301      	str	r3, [sp, #4]
 8012440:	ab02      	add	r3, sp, #8
 8012442:	9300      	str	r3, [sp, #0]
 8012444:	4632      	mov	r2, r6
 8012446:	4653      	mov	r3, sl
 8012448:	ec45 4b10 	vmov	d0, r4, r5
 801244c:	f000 fdfc 	bl	8013048 <_dtoa_r>
 8012450:	2f47      	cmp	r7, #71	; 0x47
 8012452:	4680      	mov	r8, r0
 8012454:	d102      	bne.n	801245c <__cvt+0x62>
 8012456:	f019 0f01 	tst.w	r9, #1
 801245a:	d026      	beq.n	80124aa <__cvt+0xb0>
 801245c:	2f46      	cmp	r7, #70	; 0x46
 801245e:	eb08 0906 	add.w	r9, r8, r6
 8012462:	d111      	bne.n	8012488 <__cvt+0x8e>
 8012464:	f898 3000 	ldrb.w	r3, [r8]
 8012468:	2b30      	cmp	r3, #48	; 0x30
 801246a:	d10a      	bne.n	8012482 <__cvt+0x88>
 801246c:	2200      	movs	r2, #0
 801246e:	2300      	movs	r3, #0
 8012470:	4620      	mov	r0, r4
 8012472:	4629      	mov	r1, r5
 8012474:	f7f6 fa60 	bl	8008938 <__aeabi_dcmpeq>
 8012478:	b918      	cbnz	r0, 8012482 <__cvt+0x88>
 801247a:	f1c6 0601 	rsb	r6, r6, #1
 801247e:	f8ca 6000 	str.w	r6, [sl]
 8012482:	f8da 3000 	ldr.w	r3, [sl]
 8012486:	4499      	add	r9, r3
 8012488:	2200      	movs	r2, #0
 801248a:	2300      	movs	r3, #0
 801248c:	4620      	mov	r0, r4
 801248e:	4629      	mov	r1, r5
 8012490:	f7f6 fa52 	bl	8008938 <__aeabi_dcmpeq>
 8012494:	b938      	cbnz	r0, 80124a6 <__cvt+0xac>
 8012496:	2230      	movs	r2, #48	; 0x30
 8012498:	9b03      	ldr	r3, [sp, #12]
 801249a:	454b      	cmp	r3, r9
 801249c:	d205      	bcs.n	80124aa <__cvt+0xb0>
 801249e:	1c59      	adds	r1, r3, #1
 80124a0:	9103      	str	r1, [sp, #12]
 80124a2:	701a      	strb	r2, [r3, #0]
 80124a4:	e7f8      	b.n	8012498 <__cvt+0x9e>
 80124a6:	f8cd 900c 	str.w	r9, [sp, #12]
 80124aa:	9b03      	ldr	r3, [sp, #12]
 80124ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80124ae:	eba3 0308 	sub.w	r3, r3, r8
 80124b2:	4640      	mov	r0, r8
 80124b4:	6013      	str	r3, [r2, #0]
 80124b6:	b004      	add	sp, #16
 80124b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080124bc <__exponent>:
 80124bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80124be:	2900      	cmp	r1, #0
 80124c0:	4604      	mov	r4, r0
 80124c2:	bfba      	itte	lt
 80124c4:	4249      	neglt	r1, r1
 80124c6:	232d      	movlt	r3, #45	; 0x2d
 80124c8:	232b      	movge	r3, #43	; 0x2b
 80124ca:	2909      	cmp	r1, #9
 80124cc:	f804 2b02 	strb.w	r2, [r4], #2
 80124d0:	7043      	strb	r3, [r0, #1]
 80124d2:	dd20      	ble.n	8012516 <__exponent+0x5a>
 80124d4:	f10d 0307 	add.w	r3, sp, #7
 80124d8:	461f      	mov	r7, r3
 80124da:	260a      	movs	r6, #10
 80124dc:	fb91 f5f6 	sdiv	r5, r1, r6
 80124e0:	fb06 1115 	mls	r1, r6, r5, r1
 80124e4:	3130      	adds	r1, #48	; 0x30
 80124e6:	2d09      	cmp	r5, #9
 80124e8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80124ec:	f103 32ff 	add.w	r2, r3, #4294967295
 80124f0:	4629      	mov	r1, r5
 80124f2:	dc09      	bgt.n	8012508 <__exponent+0x4c>
 80124f4:	3130      	adds	r1, #48	; 0x30
 80124f6:	3b02      	subs	r3, #2
 80124f8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80124fc:	42bb      	cmp	r3, r7
 80124fe:	4622      	mov	r2, r4
 8012500:	d304      	bcc.n	801250c <__exponent+0x50>
 8012502:	1a10      	subs	r0, r2, r0
 8012504:	b003      	add	sp, #12
 8012506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012508:	4613      	mov	r3, r2
 801250a:	e7e7      	b.n	80124dc <__exponent+0x20>
 801250c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012510:	f804 2b01 	strb.w	r2, [r4], #1
 8012514:	e7f2      	b.n	80124fc <__exponent+0x40>
 8012516:	2330      	movs	r3, #48	; 0x30
 8012518:	4419      	add	r1, r3
 801251a:	7083      	strb	r3, [r0, #2]
 801251c:	1d02      	adds	r2, r0, #4
 801251e:	70c1      	strb	r1, [r0, #3]
 8012520:	e7ef      	b.n	8012502 <__exponent+0x46>
	...

08012524 <_printf_float>:
 8012524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012528:	b08d      	sub	sp, #52	; 0x34
 801252a:	460c      	mov	r4, r1
 801252c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8012530:	4616      	mov	r6, r2
 8012532:	461f      	mov	r7, r3
 8012534:	4605      	mov	r5, r0
 8012536:	f001 fcb9 	bl	8013eac <_localeconv_r>
 801253a:	6803      	ldr	r3, [r0, #0]
 801253c:	9304      	str	r3, [sp, #16]
 801253e:	4618      	mov	r0, r3
 8012540:	f7f5 fd7e 	bl	8008040 <strlen>
 8012544:	2300      	movs	r3, #0
 8012546:	930a      	str	r3, [sp, #40]	; 0x28
 8012548:	f8d8 3000 	ldr.w	r3, [r8]
 801254c:	9005      	str	r0, [sp, #20]
 801254e:	3307      	adds	r3, #7
 8012550:	f023 0307 	bic.w	r3, r3, #7
 8012554:	f103 0208 	add.w	r2, r3, #8
 8012558:	f894 a018 	ldrb.w	sl, [r4, #24]
 801255c:	f8d4 b000 	ldr.w	fp, [r4]
 8012560:	f8c8 2000 	str.w	r2, [r8]
 8012564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012568:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801256c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8012570:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012574:	9307      	str	r3, [sp, #28]
 8012576:	f8cd 8018 	str.w	r8, [sp, #24]
 801257a:	f04f 32ff 	mov.w	r2, #4294967295
 801257e:	4ba7      	ldr	r3, [pc, #668]	; (801281c <_printf_float+0x2f8>)
 8012580:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012584:	f7f6 fa0a 	bl	800899c <__aeabi_dcmpun>
 8012588:	bb70      	cbnz	r0, 80125e8 <_printf_float+0xc4>
 801258a:	f04f 32ff 	mov.w	r2, #4294967295
 801258e:	4ba3      	ldr	r3, [pc, #652]	; (801281c <_printf_float+0x2f8>)
 8012590:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012594:	f7f6 f9e4 	bl	8008960 <__aeabi_dcmple>
 8012598:	bb30      	cbnz	r0, 80125e8 <_printf_float+0xc4>
 801259a:	2200      	movs	r2, #0
 801259c:	2300      	movs	r3, #0
 801259e:	4640      	mov	r0, r8
 80125a0:	4649      	mov	r1, r9
 80125a2:	f7f6 f9d3 	bl	800894c <__aeabi_dcmplt>
 80125a6:	b110      	cbz	r0, 80125ae <_printf_float+0x8a>
 80125a8:	232d      	movs	r3, #45	; 0x2d
 80125aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80125ae:	4a9c      	ldr	r2, [pc, #624]	; (8012820 <_printf_float+0x2fc>)
 80125b0:	4b9c      	ldr	r3, [pc, #624]	; (8012824 <_printf_float+0x300>)
 80125b2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80125b6:	bf8c      	ite	hi
 80125b8:	4690      	movhi	r8, r2
 80125ba:	4698      	movls	r8, r3
 80125bc:	2303      	movs	r3, #3
 80125be:	f02b 0204 	bic.w	r2, fp, #4
 80125c2:	6123      	str	r3, [r4, #16]
 80125c4:	6022      	str	r2, [r4, #0]
 80125c6:	f04f 0900 	mov.w	r9, #0
 80125ca:	9700      	str	r7, [sp, #0]
 80125cc:	4633      	mov	r3, r6
 80125ce:	aa0b      	add	r2, sp, #44	; 0x2c
 80125d0:	4621      	mov	r1, r4
 80125d2:	4628      	mov	r0, r5
 80125d4:	f000 f9e6 	bl	80129a4 <_printf_common>
 80125d8:	3001      	adds	r0, #1
 80125da:	f040 808d 	bne.w	80126f8 <_printf_float+0x1d4>
 80125de:	f04f 30ff 	mov.w	r0, #4294967295
 80125e2:	b00d      	add	sp, #52	; 0x34
 80125e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125e8:	4642      	mov	r2, r8
 80125ea:	464b      	mov	r3, r9
 80125ec:	4640      	mov	r0, r8
 80125ee:	4649      	mov	r1, r9
 80125f0:	f7f6 f9d4 	bl	800899c <__aeabi_dcmpun>
 80125f4:	b110      	cbz	r0, 80125fc <_printf_float+0xd8>
 80125f6:	4a8c      	ldr	r2, [pc, #560]	; (8012828 <_printf_float+0x304>)
 80125f8:	4b8c      	ldr	r3, [pc, #560]	; (801282c <_printf_float+0x308>)
 80125fa:	e7da      	b.n	80125b2 <_printf_float+0x8e>
 80125fc:	6861      	ldr	r1, [r4, #4]
 80125fe:	1c4b      	adds	r3, r1, #1
 8012600:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8012604:	a80a      	add	r0, sp, #40	; 0x28
 8012606:	d13e      	bne.n	8012686 <_printf_float+0x162>
 8012608:	2306      	movs	r3, #6
 801260a:	6063      	str	r3, [r4, #4]
 801260c:	2300      	movs	r3, #0
 801260e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8012612:	ab09      	add	r3, sp, #36	; 0x24
 8012614:	9300      	str	r3, [sp, #0]
 8012616:	ec49 8b10 	vmov	d0, r8, r9
 801261a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801261e:	6022      	str	r2, [r4, #0]
 8012620:	f8cd a004 	str.w	sl, [sp, #4]
 8012624:	6861      	ldr	r1, [r4, #4]
 8012626:	4628      	mov	r0, r5
 8012628:	f7ff fee7 	bl	80123fa <__cvt>
 801262c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8012630:	2b47      	cmp	r3, #71	; 0x47
 8012632:	4680      	mov	r8, r0
 8012634:	d109      	bne.n	801264a <_printf_float+0x126>
 8012636:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012638:	1cd8      	adds	r0, r3, #3
 801263a:	db02      	blt.n	8012642 <_printf_float+0x11e>
 801263c:	6862      	ldr	r2, [r4, #4]
 801263e:	4293      	cmp	r3, r2
 8012640:	dd47      	ble.n	80126d2 <_printf_float+0x1ae>
 8012642:	f1aa 0a02 	sub.w	sl, sl, #2
 8012646:	fa5f fa8a 	uxtb.w	sl, sl
 801264a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801264e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012650:	d824      	bhi.n	801269c <_printf_float+0x178>
 8012652:	3901      	subs	r1, #1
 8012654:	4652      	mov	r2, sl
 8012656:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801265a:	9109      	str	r1, [sp, #36]	; 0x24
 801265c:	f7ff ff2e 	bl	80124bc <__exponent>
 8012660:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012662:	1813      	adds	r3, r2, r0
 8012664:	2a01      	cmp	r2, #1
 8012666:	4681      	mov	r9, r0
 8012668:	6123      	str	r3, [r4, #16]
 801266a:	dc02      	bgt.n	8012672 <_printf_float+0x14e>
 801266c:	6822      	ldr	r2, [r4, #0]
 801266e:	07d1      	lsls	r1, r2, #31
 8012670:	d501      	bpl.n	8012676 <_printf_float+0x152>
 8012672:	3301      	adds	r3, #1
 8012674:	6123      	str	r3, [r4, #16]
 8012676:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801267a:	2b00      	cmp	r3, #0
 801267c:	d0a5      	beq.n	80125ca <_printf_float+0xa6>
 801267e:	232d      	movs	r3, #45	; 0x2d
 8012680:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012684:	e7a1      	b.n	80125ca <_printf_float+0xa6>
 8012686:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 801268a:	f000 8177 	beq.w	801297c <_printf_float+0x458>
 801268e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8012692:	d1bb      	bne.n	801260c <_printf_float+0xe8>
 8012694:	2900      	cmp	r1, #0
 8012696:	d1b9      	bne.n	801260c <_printf_float+0xe8>
 8012698:	2301      	movs	r3, #1
 801269a:	e7b6      	b.n	801260a <_printf_float+0xe6>
 801269c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80126a0:	d119      	bne.n	80126d6 <_printf_float+0x1b2>
 80126a2:	2900      	cmp	r1, #0
 80126a4:	6863      	ldr	r3, [r4, #4]
 80126a6:	dd0c      	ble.n	80126c2 <_printf_float+0x19e>
 80126a8:	6121      	str	r1, [r4, #16]
 80126aa:	b913      	cbnz	r3, 80126b2 <_printf_float+0x18e>
 80126ac:	6822      	ldr	r2, [r4, #0]
 80126ae:	07d2      	lsls	r2, r2, #31
 80126b0:	d502      	bpl.n	80126b8 <_printf_float+0x194>
 80126b2:	3301      	adds	r3, #1
 80126b4:	440b      	add	r3, r1
 80126b6:	6123      	str	r3, [r4, #16]
 80126b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80126ba:	65a3      	str	r3, [r4, #88]	; 0x58
 80126bc:	f04f 0900 	mov.w	r9, #0
 80126c0:	e7d9      	b.n	8012676 <_printf_float+0x152>
 80126c2:	b913      	cbnz	r3, 80126ca <_printf_float+0x1a6>
 80126c4:	6822      	ldr	r2, [r4, #0]
 80126c6:	07d0      	lsls	r0, r2, #31
 80126c8:	d501      	bpl.n	80126ce <_printf_float+0x1aa>
 80126ca:	3302      	adds	r3, #2
 80126cc:	e7f3      	b.n	80126b6 <_printf_float+0x192>
 80126ce:	2301      	movs	r3, #1
 80126d0:	e7f1      	b.n	80126b6 <_printf_float+0x192>
 80126d2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80126d6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80126da:	4293      	cmp	r3, r2
 80126dc:	db05      	blt.n	80126ea <_printf_float+0x1c6>
 80126de:	6822      	ldr	r2, [r4, #0]
 80126e0:	6123      	str	r3, [r4, #16]
 80126e2:	07d1      	lsls	r1, r2, #31
 80126e4:	d5e8      	bpl.n	80126b8 <_printf_float+0x194>
 80126e6:	3301      	adds	r3, #1
 80126e8:	e7e5      	b.n	80126b6 <_printf_float+0x192>
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	bfd4      	ite	le
 80126ee:	f1c3 0302 	rsble	r3, r3, #2
 80126f2:	2301      	movgt	r3, #1
 80126f4:	4413      	add	r3, r2
 80126f6:	e7de      	b.n	80126b6 <_printf_float+0x192>
 80126f8:	6823      	ldr	r3, [r4, #0]
 80126fa:	055a      	lsls	r2, r3, #21
 80126fc:	d407      	bmi.n	801270e <_printf_float+0x1ea>
 80126fe:	6923      	ldr	r3, [r4, #16]
 8012700:	4642      	mov	r2, r8
 8012702:	4631      	mov	r1, r6
 8012704:	4628      	mov	r0, r5
 8012706:	47b8      	blx	r7
 8012708:	3001      	adds	r0, #1
 801270a:	d12b      	bne.n	8012764 <_printf_float+0x240>
 801270c:	e767      	b.n	80125de <_printf_float+0xba>
 801270e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8012712:	f240 80dc 	bls.w	80128ce <_printf_float+0x3aa>
 8012716:	2200      	movs	r2, #0
 8012718:	2300      	movs	r3, #0
 801271a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801271e:	f7f6 f90b 	bl	8008938 <__aeabi_dcmpeq>
 8012722:	2800      	cmp	r0, #0
 8012724:	d033      	beq.n	801278e <_printf_float+0x26a>
 8012726:	2301      	movs	r3, #1
 8012728:	4a41      	ldr	r2, [pc, #260]	; (8012830 <_printf_float+0x30c>)
 801272a:	4631      	mov	r1, r6
 801272c:	4628      	mov	r0, r5
 801272e:	47b8      	blx	r7
 8012730:	3001      	adds	r0, #1
 8012732:	f43f af54 	beq.w	80125de <_printf_float+0xba>
 8012736:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801273a:	429a      	cmp	r2, r3
 801273c:	db02      	blt.n	8012744 <_printf_float+0x220>
 801273e:	6823      	ldr	r3, [r4, #0]
 8012740:	07d8      	lsls	r0, r3, #31
 8012742:	d50f      	bpl.n	8012764 <_printf_float+0x240>
 8012744:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012748:	4631      	mov	r1, r6
 801274a:	4628      	mov	r0, r5
 801274c:	47b8      	blx	r7
 801274e:	3001      	adds	r0, #1
 8012750:	f43f af45 	beq.w	80125de <_printf_float+0xba>
 8012754:	f04f 0800 	mov.w	r8, #0
 8012758:	f104 091a 	add.w	r9, r4, #26
 801275c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801275e:	3b01      	subs	r3, #1
 8012760:	4543      	cmp	r3, r8
 8012762:	dc09      	bgt.n	8012778 <_printf_float+0x254>
 8012764:	6823      	ldr	r3, [r4, #0]
 8012766:	079b      	lsls	r3, r3, #30
 8012768:	f100 8103 	bmi.w	8012972 <_printf_float+0x44e>
 801276c:	68e0      	ldr	r0, [r4, #12]
 801276e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012770:	4298      	cmp	r0, r3
 8012772:	bfb8      	it	lt
 8012774:	4618      	movlt	r0, r3
 8012776:	e734      	b.n	80125e2 <_printf_float+0xbe>
 8012778:	2301      	movs	r3, #1
 801277a:	464a      	mov	r2, r9
 801277c:	4631      	mov	r1, r6
 801277e:	4628      	mov	r0, r5
 8012780:	47b8      	blx	r7
 8012782:	3001      	adds	r0, #1
 8012784:	f43f af2b 	beq.w	80125de <_printf_float+0xba>
 8012788:	f108 0801 	add.w	r8, r8, #1
 801278c:	e7e6      	b.n	801275c <_printf_float+0x238>
 801278e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012790:	2b00      	cmp	r3, #0
 8012792:	dc2b      	bgt.n	80127ec <_printf_float+0x2c8>
 8012794:	2301      	movs	r3, #1
 8012796:	4a26      	ldr	r2, [pc, #152]	; (8012830 <_printf_float+0x30c>)
 8012798:	4631      	mov	r1, r6
 801279a:	4628      	mov	r0, r5
 801279c:	47b8      	blx	r7
 801279e:	3001      	adds	r0, #1
 80127a0:	f43f af1d 	beq.w	80125de <_printf_float+0xba>
 80127a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80127a6:	b923      	cbnz	r3, 80127b2 <_printf_float+0x28e>
 80127a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80127aa:	b913      	cbnz	r3, 80127b2 <_printf_float+0x28e>
 80127ac:	6823      	ldr	r3, [r4, #0]
 80127ae:	07d9      	lsls	r1, r3, #31
 80127b0:	d5d8      	bpl.n	8012764 <_printf_float+0x240>
 80127b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80127b6:	4631      	mov	r1, r6
 80127b8:	4628      	mov	r0, r5
 80127ba:	47b8      	blx	r7
 80127bc:	3001      	adds	r0, #1
 80127be:	f43f af0e 	beq.w	80125de <_printf_float+0xba>
 80127c2:	f04f 0900 	mov.w	r9, #0
 80127c6:	f104 0a1a 	add.w	sl, r4, #26
 80127ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80127cc:	425b      	negs	r3, r3
 80127ce:	454b      	cmp	r3, r9
 80127d0:	dc01      	bgt.n	80127d6 <_printf_float+0x2b2>
 80127d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80127d4:	e794      	b.n	8012700 <_printf_float+0x1dc>
 80127d6:	2301      	movs	r3, #1
 80127d8:	4652      	mov	r2, sl
 80127da:	4631      	mov	r1, r6
 80127dc:	4628      	mov	r0, r5
 80127de:	47b8      	blx	r7
 80127e0:	3001      	adds	r0, #1
 80127e2:	f43f aefc 	beq.w	80125de <_printf_float+0xba>
 80127e6:	f109 0901 	add.w	r9, r9, #1
 80127ea:	e7ee      	b.n	80127ca <_printf_float+0x2a6>
 80127ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80127ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80127f0:	429a      	cmp	r2, r3
 80127f2:	bfa8      	it	ge
 80127f4:	461a      	movge	r2, r3
 80127f6:	2a00      	cmp	r2, #0
 80127f8:	4691      	mov	r9, r2
 80127fa:	dd07      	ble.n	801280c <_printf_float+0x2e8>
 80127fc:	4613      	mov	r3, r2
 80127fe:	4631      	mov	r1, r6
 8012800:	4642      	mov	r2, r8
 8012802:	4628      	mov	r0, r5
 8012804:	47b8      	blx	r7
 8012806:	3001      	adds	r0, #1
 8012808:	f43f aee9 	beq.w	80125de <_printf_float+0xba>
 801280c:	f104 031a 	add.w	r3, r4, #26
 8012810:	f04f 0b00 	mov.w	fp, #0
 8012814:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012818:	9306      	str	r3, [sp, #24]
 801281a:	e015      	b.n	8012848 <_printf_float+0x324>
 801281c:	7fefffff 	.word	0x7fefffff
 8012820:	080287d0 	.word	0x080287d0
 8012824:	080287cc 	.word	0x080287cc
 8012828:	080287d8 	.word	0x080287d8
 801282c:	080287d4 	.word	0x080287d4
 8012830:	080287dc 	.word	0x080287dc
 8012834:	2301      	movs	r3, #1
 8012836:	9a06      	ldr	r2, [sp, #24]
 8012838:	4631      	mov	r1, r6
 801283a:	4628      	mov	r0, r5
 801283c:	47b8      	blx	r7
 801283e:	3001      	adds	r0, #1
 8012840:	f43f aecd 	beq.w	80125de <_printf_float+0xba>
 8012844:	f10b 0b01 	add.w	fp, fp, #1
 8012848:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 801284c:	ebaa 0309 	sub.w	r3, sl, r9
 8012850:	455b      	cmp	r3, fp
 8012852:	dcef      	bgt.n	8012834 <_printf_float+0x310>
 8012854:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012858:	429a      	cmp	r2, r3
 801285a:	44d0      	add	r8, sl
 801285c:	db15      	blt.n	801288a <_printf_float+0x366>
 801285e:	6823      	ldr	r3, [r4, #0]
 8012860:	07da      	lsls	r2, r3, #31
 8012862:	d412      	bmi.n	801288a <_printf_float+0x366>
 8012864:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012866:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012868:	eba3 020a 	sub.w	r2, r3, sl
 801286c:	eba3 0a01 	sub.w	sl, r3, r1
 8012870:	4592      	cmp	sl, r2
 8012872:	bfa8      	it	ge
 8012874:	4692      	movge	sl, r2
 8012876:	f1ba 0f00 	cmp.w	sl, #0
 801287a:	dc0e      	bgt.n	801289a <_printf_float+0x376>
 801287c:	f04f 0800 	mov.w	r8, #0
 8012880:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012884:	f104 091a 	add.w	r9, r4, #26
 8012888:	e019      	b.n	80128be <_printf_float+0x39a>
 801288a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801288e:	4631      	mov	r1, r6
 8012890:	4628      	mov	r0, r5
 8012892:	47b8      	blx	r7
 8012894:	3001      	adds	r0, #1
 8012896:	d1e5      	bne.n	8012864 <_printf_float+0x340>
 8012898:	e6a1      	b.n	80125de <_printf_float+0xba>
 801289a:	4653      	mov	r3, sl
 801289c:	4642      	mov	r2, r8
 801289e:	4631      	mov	r1, r6
 80128a0:	4628      	mov	r0, r5
 80128a2:	47b8      	blx	r7
 80128a4:	3001      	adds	r0, #1
 80128a6:	d1e9      	bne.n	801287c <_printf_float+0x358>
 80128a8:	e699      	b.n	80125de <_printf_float+0xba>
 80128aa:	2301      	movs	r3, #1
 80128ac:	464a      	mov	r2, r9
 80128ae:	4631      	mov	r1, r6
 80128b0:	4628      	mov	r0, r5
 80128b2:	47b8      	blx	r7
 80128b4:	3001      	adds	r0, #1
 80128b6:	f43f ae92 	beq.w	80125de <_printf_float+0xba>
 80128ba:	f108 0801 	add.w	r8, r8, #1
 80128be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80128c2:	1a9b      	subs	r3, r3, r2
 80128c4:	eba3 030a 	sub.w	r3, r3, sl
 80128c8:	4543      	cmp	r3, r8
 80128ca:	dcee      	bgt.n	80128aa <_printf_float+0x386>
 80128cc:	e74a      	b.n	8012764 <_printf_float+0x240>
 80128ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80128d0:	2a01      	cmp	r2, #1
 80128d2:	dc01      	bgt.n	80128d8 <_printf_float+0x3b4>
 80128d4:	07db      	lsls	r3, r3, #31
 80128d6:	d53a      	bpl.n	801294e <_printf_float+0x42a>
 80128d8:	2301      	movs	r3, #1
 80128da:	4642      	mov	r2, r8
 80128dc:	4631      	mov	r1, r6
 80128de:	4628      	mov	r0, r5
 80128e0:	47b8      	blx	r7
 80128e2:	3001      	adds	r0, #1
 80128e4:	f43f ae7b 	beq.w	80125de <_printf_float+0xba>
 80128e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80128ec:	4631      	mov	r1, r6
 80128ee:	4628      	mov	r0, r5
 80128f0:	47b8      	blx	r7
 80128f2:	3001      	adds	r0, #1
 80128f4:	f108 0801 	add.w	r8, r8, #1
 80128f8:	f43f ae71 	beq.w	80125de <_printf_float+0xba>
 80128fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80128fe:	2200      	movs	r2, #0
 8012900:	f103 3aff 	add.w	sl, r3, #4294967295
 8012904:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012908:	2300      	movs	r3, #0
 801290a:	f7f6 f815 	bl	8008938 <__aeabi_dcmpeq>
 801290e:	b9c8      	cbnz	r0, 8012944 <_printf_float+0x420>
 8012910:	4653      	mov	r3, sl
 8012912:	4642      	mov	r2, r8
 8012914:	4631      	mov	r1, r6
 8012916:	4628      	mov	r0, r5
 8012918:	47b8      	blx	r7
 801291a:	3001      	adds	r0, #1
 801291c:	d10e      	bne.n	801293c <_printf_float+0x418>
 801291e:	e65e      	b.n	80125de <_printf_float+0xba>
 8012920:	2301      	movs	r3, #1
 8012922:	4652      	mov	r2, sl
 8012924:	4631      	mov	r1, r6
 8012926:	4628      	mov	r0, r5
 8012928:	47b8      	blx	r7
 801292a:	3001      	adds	r0, #1
 801292c:	f43f ae57 	beq.w	80125de <_printf_float+0xba>
 8012930:	f108 0801 	add.w	r8, r8, #1
 8012934:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012936:	3b01      	subs	r3, #1
 8012938:	4543      	cmp	r3, r8
 801293a:	dcf1      	bgt.n	8012920 <_printf_float+0x3fc>
 801293c:	464b      	mov	r3, r9
 801293e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012942:	e6de      	b.n	8012702 <_printf_float+0x1de>
 8012944:	f04f 0800 	mov.w	r8, #0
 8012948:	f104 0a1a 	add.w	sl, r4, #26
 801294c:	e7f2      	b.n	8012934 <_printf_float+0x410>
 801294e:	2301      	movs	r3, #1
 8012950:	e7df      	b.n	8012912 <_printf_float+0x3ee>
 8012952:	2301      	movs	r3, #1
 8012954:	464a      	mov	r2, r9
 8012956:	4631      	mov	r1, r6
 8012958:	4628      	mov	r0, r5
 801295a:	47b8      	blx	r7
 801295c:	3001      	adds	r0, #1
 801295e:	f43f ae3e 	beq.w	80125de <_printf_float+0xba>
 8012962:	f108 0801 	add.w	r8, r8, #1
 8012966:	68e3      	ldr	r3, [r4, #12]
 8012968:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801296a:	1a9b      	subs	r3, r3, r2
 801296c:	4543      	cmp	r3, r8
 801296e:	dcf0      	bgt.n	8012952 <_printf_float+0x42e>
 8012970:	e6fc      	b.n	801276c <_printf_float+0x248>
 8012972:	f04f 0800 	mov.w	r8, #0
 8012976:	f104 0919 	add.w	r9, r4, #25
 801297a:	e7f4      	b.n	8012966 <_printf_float+0x442>
 801297c:	2900      	cmp	r1, #0
 801297e:	f43f ae8b 	beq.w	8012698 <_printf_float+0x174>
 8012982:	2300      	movs	r3, #0
 8012984:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8012988:	ab09      	add	r3, sp, #36	; 0x24
 801298a:	9300      	str	r3, [sp, #0]
 801298c:	ec49 8b10 	vmov	d0, r8, r9
 8012990:	6022      	str	r2, [r4, #0]
 8012992:	f8cd a004 	str.w	sl, [sp, #4]
 8012996:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801299a:	4628      	mov	r0, r5
 801299c:	f7ff fd2d 	bl	80123fa <__cvt>
 80129a0:	4680      	mov	r8, r0
 80129a2:	e648      	b.n	8012636 <_printf_float+0x112>

080129a4 <_printf_common>:
 80129a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80129a8:	4691      	mov	r9, r2
 80129aa:	461f      	mov	r7, r3
 80129ac:	688a      	ldr	r2, [r1, #8]
 80129ae:	690b      	ldr	r3, [r1, #16]
 80129b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80129b4:	4293      	cmp	r3, r2
 80129b6:	bfb8      	it	lt
 80129b8:	4613      	movlt	r3, r2
 80129ba:	f8c9 3000 	str.w	r3, [r9]
 80129be:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80129c2:	4606      	mov	r6, r0
 80129c4:	460c      	mov	r4, r1
 80129c6:	b112      	cbz	r2, 80129ce <_printf_common+0x2a>
 80129c8:	3301      	adds	r3, #1
 80129ca:	f8c9 3000 	str.w	r3, [r9]
 80129ce:	6823      	ldr	r3, [r4, #0]
 80129d0:	0699      	lsls	r1, r3, #26
 80129d2:	bf42      	ittt	mi
 80129d4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80129d8:	3302      	addmi	r3, #2
 80129da:	f8c9 3000 	strmi.w	r3, [r9]
 80129de:	6825      	ldr	r5, [r4, #0]
 80129e0:	f015 0506 	ands.w	r5, r5, #6
 80129e4:	d107      	bne.n	80129f6 <_printf_common+0x52>
 80129e6:	f104 0a19 	add.w	sl, r4, #25
 80129ea:	68e3      	ldr	r3, [r4, #12]
 80129ec:	f8d9 2000 	ldr.w	r2, [r9]
 80129f0:	1a9b      	subs	r3, r3, r2
 80129f2:	42ab      	cmp	r3, r5
 80129f4:	dc28      	bgt.n	8012a48 <_printf_common+0xa4>
 80129f6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80129fa:	6822      	ldr	r2, [r4, #0]
 80129fc:	3300      	adds	r3, #0
 80129fe:	bf18      	it	ne
 8012a00:	2301      	movne	r3, #1
 8012a02:	0692      	lsls	r2, r2, #26
 8012a04:	d42d      	bmi.n	8012a62 <_printf_common+0xbe>
 8012a06:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012a0a:	4639      	mov	r1, r7
 8012a0c:	4630      	mov	r0, r6
 8012a0e:	47c0      	blx	r8
 8012a10:	3001      	adds	r0, #1
 8012a12:	d020      	beq.n	8012a56 <_printf_common+0xb2>
 8012a14:	6823      	ldr	r3, [r4, #0]
 8012a16:	68e5      	ldr	r5, [r4, #12]
 8012a18:	f8d9 2000 	ldr.w	r2, [r9]
 8012a1c:	f003 0306 	and.w	r3, r3, #6
 8012a20:	2b04      	cmp	r3, #4
 8012a22:	bf08      	it	eq
 8012a24:	1aad      	subeq	r5, r5, r2
 8012a26:	68a3      	ldr	r3, [r4, #8]
 8012a28:	6922      	ldr	r2, [r4, #16]
 8012a2a:	bf0c      	ite	eq
 8012a2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012a30:	2500      	movne	r5, #0
 8012a32:	4293      	cmp	r3, r2
 8012a34:	bfc4      	itt	gt
 8012a36:	1a9b      	subgt	r3, r3, r2
 8012a38:	18ed      	addgt	r5, r5, r3
 8012a3a:	f04f 0900 	mov.w	r9, #0
 8012a3e:	341a      	adds	r4, #26
 8012a40:	454d      	cmp	r5, r9
 8012a42:	d11a      	bne.n	8012a7a <_printf_common+0xd6>
 8012a44:	2000      	movs	r0, #0
 8012a46:	e008      	b.n	8012a5a <_printf_common+0xb6>
 8012a48:	2301      	movs	r3, #1
 8012a4a:	4652      	mov	r2, sl
 8012a4c:	4639      	mov	r1, r7
 8012a4e:	4630      	mov	r0, r6
 8012a50:	47c0      	blx	r8
 8012a52:	3001      	adds	r0, #1
 8012a54:	d103      	bne.n	8012a5e <_printf_common+0xba>
 8012a56:	f04f 30ff 	mov.w	r0, #4294967295
 8012a5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012a5e:	3501      	adds	r5, #1
 8012a60:	e7c3      	b.n	80129ea <_printf_common+0x46>
 8012a62:	18e1      	adds	r1, r4, r3
 8012a64:	1c5a      	adds	r2, r3, #1
 8012a66:	2030      	movs	r0, #48	; 0x30
 8012a68:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012a6c:	4422      	add	r2, r4
 8012a6e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012a72:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012a76:	3302      	adds	r3, #2
 8012a78:	e7c5      	b.n	8012a06 <_printf_common+0x62>
 8012a7a:	2301      	movs	r3, #1
 8012a7c:	4622      	mov	r2, r4
 8012a7e:	4639      	mov	r1, r7
 8012a80:	4630      	mov	r0, r6
 8012a82:	47c0      	blx	r8
 8012a84:	3001      	adds	r0, #1
 8012a86:	d0e6      	beq.n	8012a56 <_printf_common+0xb2>
 8012a88:	f109 0901 	add.w	r9, r9, #1
 8012a8c:	e7d8      	b.n	8012a40 <_printf_common+0x9c>
	...

08012a90 <_printf_i>:
 8012a90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012a94:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8012a98:	460c      	mov	r4, r1
 8012a9a:	7e09      	ldrb	r1, [r1, #24]
 8012a9c:	b085      	sub	sp, #20
 8012a9e:	296e      	cmp	r1, #110	; 0x6e
 8012aa0:	4617      	mov	r7, r2
 8012aa2:	4606      	mov	r6, r0
 8012aa4:	4698      	mov	r8, r3
 8012aa6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012aa8:	f000 80b3 	beq.w	8012c12 <_printf_i+0x182>
 8012aac:	d822      	bhi.n	8012af4 <_printf_i+0x64>
 8012aae:	2963      	cmp	r1, #99	; 0x63
 8012ab0:	d036      	beq.n	8012b20 <_printf_i+0x90>
 8012ab2:	d80a      	bhi.n	8012aca <_printf_i+0x3a>
 8012ab4:	2900      	cmp	r1, #0
 8012ab6:	f000 80b9 	beq.w	8012c2c <_printf_i+0x19c>
 8012aba:	2958      	cmp	r1, #88	; 0x58
 8012abc:	f000 8083 	beq.w	8012bc6 <_printf_i+0x136>
 8012ac0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012ac4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8012ac8:	e032      	b.n	8012b30 <_printf_i+0xa0>
 8012aca:	2964      	cmp	r1, #100	; 0x64
 8012acc:	d001      	beq.n	8012ad2 <_printf_i+0x42>
 8012ace:	2969      	cmp	r1, #105	; 0x69
 8012ad0:	d1f6      	bne.n	8012ac0 <_printf_i+0x30>
 8012ad2:	6820      	ldr	r0, [r4, #0]
 8012ad4:	6813      	ldr	r3, [r2, #0]
 8012ad6:	0605      	lsls	r5, r0, #24
 8012ad8:	f103 0104 	add.w	r1, r3, #4
 8012adc:	d52a      	bpl.n	8012b34 <_printf_i+0xa4>
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	6011      	str	r1, [r2, #0]
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	da03      	bge.n	8012aee <_printf_i+0x5e>
 8012ae6:	222d      	movs	r2, #45	; 0x2d
 8012ae8:	425b      	negs	r3, r3
 8012aea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8012aee:	486f      	ldr	r0, [pc, #444]	; (8012cac <_printf_i+0x21c>)
 8012af0:	220a      	movs	r2, #10
 8012af2:	e039      	b.n	8012b68 <_printf_i+0xd8>
 8012af4:	2973      	cmp	r1, #115	; 0x73
 8012af6:	f000 809d 	beq.w	8012c34 <_printf_i+0x1a4>
 8012afa:	d808      	bhi.n	8012b0e <_printf_i+0x7e>
 8012afc:	296f      	cmp	r1, #111	; 0x6f
 8012afe:	d020      	beq.n	8012b42 <_printf_i+0xb2>
 8012b00:	2970      	cmp	r1, #112	; 0x70
 8012b02:	d1dd      	bne.n	8012ac0 <_printf_i+0x30>
 8012b04:	6823      	ldr	r3, [r4, #0]
 8012b06:	f043 0320 	orr.w	r3, r3, #32
 8012b0a:	6023      	str	r3, [r4, #0]
 8012b0c:	e003      	b.n	8012b16 <_printf_i+0x86>
 8012b0e:	2975      	cmp	r1, #117	; 0x75
 8012b10:	d017      	beq.n	8012b42 <_printf_i+0xb2>
 8012b12:	2978      	cmp	r1, #120	; 0x78
 8012b14:	d1d4      	bne.n	8012ac0 <_printf_i+0x30>
 8012b16:	2378      	movs	r3, #120	; 0x78
 8012b18:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012b1c:	4864      	ldr	r0, [pc, #400]	; (8012cb0 <_printf_i+0x220>)
 8012b1e:	e055      	b.n	8012bcc <_printf_i+0x13c>
 8012b20:	6813      	ldr	r3, [r2, #0]
 8012b22:	1d19      	adds	r1, r3, #4
 8012b24:	681b      	ldr	r3, [r3, #0]
 8012b26:	6011      	str	r1, [r2, #0]
 8012b28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012b2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012b30:	2301      	movs	r3, #1
 8012b32:	e08c      	b.n	8012c4e <_printf_i+0x1be>
 8012b34:	681b      	ldr	r3, [r3, #0]
 8012b36:	6011      	str	r1, [r2, #0]
 8012b38:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012b3c:	bf18      	it	ne
 8012b3e:	b21b      	sxthne	r3, r3
 8012b40:	e7cf      	b.n	8012ae2 <_printf_i+0x52>
 8012b42:	6813      	ldr	r3, [r2, #0]
 8012b44:	6825      	ldr	r5, [r4, #0]
 8012b46:	1d18      	adds	r0, r3, #4
 8012b48:	6010      	str	r0, [r2, #0]
 8012b4a:	0628      	lsls	r0, r5, #24
 8012b4c:	d501      	bpl.n	8012b52 <_printf_i+0xc2>
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	e002      	b.n	8012b58 <_printf_i+0xc8>
 8012b52:	0668      	lsls	r0, r5, #25
 8012b54:	d5fb      	bpl.n	8012b4e <_printf_i+0xbe>
 8012b56:	881b      	ldrh	r3, [r3, #0]
 8012b58:	4854      	ldr	r0, [pc, #336]	; (8012cac <_printf_i+0x21c>)
 8012b5a:	296f      	cmp	r1, #111	; 0x6f
 8012b5c:	bf14      	ite	ne
 8012b5e:	220a      	movne	r2, #10
 8012b60:	2208      	moveq	r2, #8
 8012b62:	2100      	movs	r1, #0
 8012b64:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012b68:	6865      	ldr	r5, [r4, #4]
 8012b6a:	60a5      	str	r5, [r4, #8]
 8012b6c:	2d00      	cmp	r5, #0
 8012b6e:	f2c0 8095 	blt.w	8012c9c <_printf_i+0x20c>
 8012b72:	6821      	ldr	r1, [r4, #0]
 8012b74:	f021 0104 	bic.w	r1, r1, #4
 8012b78:	6021      	str	r1, [r4, #0]
 8012b7a:	2b00      	cmp	r3, #0
 8012b7c:	d13d      	bne.n	8012bfa <_printf_i+0x16a>
 8012b7e:	2d00      	cmp	r5, #0
 8012b80:	f040 808e 	bne.w	8012ca0 <_printf_i+0x210>
 8012b84:	4665      	mov	r5, ip
 8012b86:	2a08      	cmp	r2, #8
 8012b88:	d10b      	bne.n	8012ba2 <_printf_i+0x112>
 8012b8a:	6823      	ldr	r3, [r4, #0]
 8012b8c:	07db      	lsls	r3, r3, #31
 8012b8e:	d508      	bpl.n	8012ba2 <_printf_i+0x112>
 8012b90:	6923      	ldr	r3, [r4, #16]
 8012b92:	6862      	ldr	r2, [r4, #4]
 8012b94:	429a      	cmp	r2, r3
 8012b96:	bfde      	ittt	le
 8012b98:	2330      	movle	r3, #48	; 0x30
 8012b9a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012b9e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012ba2:	ebac 0305 	sub.w	r3, ip, r5
 8012ba6:	6123      	str	r3, [r4, #16]
 8012ba8:	f8cd 8000 	str.w	r8, [sp]
 8012bac:	463b      	mov	r3, r7
 8012bae:	aa03      	add	r2, sp, #12
 8012bb0:	4621      	mov	r1, r4
 8012bb2:	4630      	mov	r0, r6
 8012bb4:	f7ff fef6 	bl	80129a4 <_printf_common>
 8012bb8:	3001      	adds	r0, #1
 8012bba:	d14d      	bne.n	8012c58 <_printf_i+0x1c8>
 8012bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8012bc0:	b005      	add	sp, #20
 8012bc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012bc6:	4839      	ldr	r0, [pc, #228]	; (8012cac <_printf_i+0x21c>)
 8012bc8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8012bcc:	6813      	ldr	r3, [r2, #0]
 8012bce:	6821      	ldr	r1, [r4, #0]
 8012bd0:	1d1d      	adds	r5, r3, #4
 8012bd2:	681b      	ldr	r3, [r3, #0]
 8012bd4:	6015      	str	r5, [r2, #0]
 8012bd6:	060a      	lsls	r2, r1, #24
 8012bd8:	d50b      	bpl.n	8012bf2 <_printf_i+0x162>
 8012bda:	07ca      	lsls	r2, r1, #31
 8012bdc:	bf44      	itt	mi
 8012bde:	f041 0120 	orrmi.w	r1, r1, #32
 8012be2:	6021      	strmi	r1, [r4, #0]
 8012be4:	b91b      	cbnz	r3, 8012bee <_printf_i+0x15e>
 8012be6:	6822      	ldr	r2, [r4, #0]
 8012be8:	f022 0220 	bic.w	r2, r2, #32
 8012bec:	6022      	str	r2, [r4, #0]
 8012bee:	2210      	movs	r2, #16
 8012bf0:	e7b7      	b.n	8012b62 <_printf_i+0xd2>
 8012bf2:	064d      	lsls	r5, r1, #25
 8012bf4:	bf48      	it	mi
 8012bf6:	b29b      	uxthmi	r3, r3
 8012bf8:	e7ef      	b.n	8012bda <_printf_i+0x14a>
 8012bfa:	4665      	mov	r5, ip
 8012bfc:	fbb3 f1f2 	udiv	r1, r3, r2
 8012c00:	fb02 3311 	mls	r3, r2, r1, r3
 8012c04:	5cc3      	ldrb	r3, [r0, r3]
 8012c06:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8012c0a:	460b      	mov	r3, r1
 8012c0c:	2900      	cmp	r1, #0
 8012c0e:	d1f5      	bne.n	8012bfc <_printf_i+0x16c>
 8012c10:	e7b9      	b.n	8012b86 <_printf_i+0xf6>
 8012c12:	6813      	ldr	r3, [r2, #0]
 8012c14:	6825      	ldr	r5, [r4, #0]
 8012c16:	6961      	ldr	r1, [r4, #20]
 8012c18:	1d18      	adds	r0, r3, #4
 8012c1a:	6010      	str	r0, [r2, #0]
 8012c1c:	0628      	lsls	r0, r5, #24
 8012c1e:	681b      	ldr	r3, [r3, #0]
 8012c20:	d501      	bpl.n	8012c26 <_printf_i+0x196>
 8012c22:	6019      	str	r1, [r3, #0]
 8012c24:	e002      	b.n	8012c2c <_printf_i+0x19c>
 8012c26:	066a      	lsls	r2, r5, #25
 8012c28:	d5fb      	bpl.n	8012c22 <_printf_i+0x192>
 8012c2a:	8019      	strh	r1, [r3, #0]
 8012c2c:	2300      	movs	r3, #0
 8012c2e:	6123      	str	r3, [r4, #16]
 8012c30:	4665      	mov	r5, ip
 8012c32:	e7b9      	b.n	8012ba8 <_printf_i+0x118>
 8012c34:	6813      	ldr	r3, [r2, #0]
 8012c36:	1d19      	adds	r1, r3, #4
 8012c38:	6011      	str	r1, [r2, #0]
 8012c3a:	681d      	ldr	r5, [r3, #0]
 8012c3c:	6862      	ldr	r2, [r4, #4]
 8012c3e:	2100      	movs	r1, #0
 8012c40:	4628      	mov	r0, r5
 8012c42:	f7f5 fa05 	bl	8008050 <memchr>
 8012c46:	b108      	cbz	r0, 8012c4c <_printf_i+0x1bc>
 8012c48:	1b40      	subs	r0, r0, r5
 8012c4a:	6060      	str	r0, [r4, #4]
 8012c4c:	6863      	ldr	r3, [r4, #4]
 8012c4e:	6123      	str	r3, [r4, #16]
 8012c50:	2300      	movs	r3, #0
 8012c52:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012c56:	e7a7      	b.n	8012ba8 <_printf_i+0x118>
 8012c58:	6923      	ldr	r3, [r4, #16]
 8012c5a:	462a      	mov	r2, r5
 8012c5c:	4639      	mov	r1, r7
 8012c5e:	4630      	mov	r0, r6
 8012c60:	47c0      	blx	r8
 8012c62:	3001      	adds	r0, #1
 8012c64:	d0aa      	beq.n	8012bbc <_printf_i+0x12c>
 8012c66:	6823      	ldr	r3, [r4, #0]
 8012c68:	079b      	lsls	r3, r3, #30
 8012c6a:	d413      	bmi.n	8012c94 <_printf_i+0x204>
 8012c6c:	68e0      	ldr	r0, [r4, #12]
 8012c6e:	9b03      	ldr	r3, [sp, #12]
 8012c70:	4298      	cmp	r0, r3
 8012c72:	bfb8      	it	lt
 8012c74:	4618      	movlt	r0, r3
 8012c76:	e7a3      	b.n	8012bc0 <_printf_i+0x130>
 8012c78:	2301      	movs	r3, #1
 8012c7a:	464a      	mov	r2, r9
 8012c7c:	4639      	mov	r1, r7
 8012c7e:	4630      	mov	r0, r6
 8012c80:	47c0      	blx	r8
 8012c82:	3001      	adds	r0, #1
 8012c84:	d09a      	beq.n	8012bbc <_printf_i+0x12c>
 8012c86:	3501      	adds	r5, #1
 8012c88:	68e3      	ldr	r3, [r4, #12]
 8012c8a:	9a03      	ldr	r2, [sp, #12]
 8012c8c:	1a9b      	subs	r3, r3, r2
 8012c8e:	42ab      	cmp	r3, r5
 8012c90:	dcf2      	bgt.n	8012c78 <_printf_i+0x1e8>
 8012c92:	e7eb      	b.n	8012c6c <_printf_i+0x1dc>
 8012c94:	2500      	movs	r5, #0
 8012c96:	f104 0919 	add.w	r9, r4, #25
 8012c9a:	e7f5      	b.n	8012c88 <_printf_i+0x1f8>
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d1ac      	bne.n	8012bfa <_printf_i+0x16a>
 8012ca0:	7803      	ldrb	r3, [r0, #0]
 8012ca2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012ca6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012caa:	e76c      	b.n	8012b86 <_printf_i+0xf6>
 8012cac:	080287de 	.word	0x080287de
 8012cb0:	080287ef 	.word	0x080287ef

08012cb4 <iprintf>:
 8012cb4:	b40f      	push	{r0, r1, r2, r3}
 8012cb6:	4b0a      	ldr	r3, [pc, #40]	; (8012ce0 <iprintf+0x2c>)
 8012cb8:	b513      	push	{r0, r1, r4, lr}
 8012cba:	681c      	ldr	r4, [r3, #0]
 8012cbc:	b124      	cbz	r4, 8012cc8 <iprintf+0x14>
 8012cbe:	69a3      	ldr	r3, [r4, #24]
 8012cc0:	b913      	cbnz	r3, 8012cc8 <iprintf+0x14>
 8012cc2:	4620      	mov	r0, r4
 8012cc4:	f001 f868 	bl	8013d98 <__sinit>
 8012cc8:	ab05      	add	r3, sp, #20
 8012cca:	9a04      	ldr	r2, [sp, #16]
 8012ccc:	68a1      	ldr	r1, [r4, #8]
 8012cce:	9301      	str	r3, [sp, #4]
 8012cd0:	4620      	mov	r0, r4
 8012cd2:	f001 fd21 	bl	8014718 <_vfiprintf_r>
 8012cd6:	b002      	add	sp, #8
 8012cd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012cdc:	b004      	add	sp, #16
 8012cde:	4770      	bx	lr
 8012ce0:	20000020 	.word	0x20000020

08012ce4 <_puts_r>:
 8012ce4:	b570      	push	{r4, r5, r6, lr}
 8012ce6:	460e      	mov	r6, r1
 8012ce8:	4605      	mov	r5, r0
 8012cea:	b118      	cbz	r0, 8012cf4 <_puts_r+0x10>
 8012cec:	6983      	ldr	r3, [r0, #24]
 8012cee:	b90b      	cbnz	r3, 8012cf4 <_puts_r+0x10>
 8012cf0:	f001 f852 	bl	8013d98 <__sinit>
 8012cf4:	69ab      	ldr	r3, [r5, #24]
 8012cf6:	68ac      	ldr	r4, [r5, #8]
 8012cf8:	b913      	cbnz	r3, 8012d00 <_puts_r+0x1c>
 8012cfa:	4628      	mov	r0, r5
 8012cfc:	f001 f84c 	bl	8013d98 <__sinit>
 8012d00:	4b23      	ldr	r3, [pc, #140]	; (8012d90 <_puts_r+0xac>)
 8012d02:	429c      	cmp	r4, r3
 8012d04:	d117      	bne.n	8012d36 <_puts_r+0x52>
 8012d06:	686c      	ldr	r4, [r5, #4]
 8012d08:	89a3      	ldrh	r3, [r4, #12]
 8012d0a:	071b      	lsls	r3, r3, #28
 8012d0c:	d51d      	bpl.n	8012d4a <_puts_r+0x66>
 8012d0e:	6923      	ldr	r3, [r4, #16]
 8012d10:	b1db      	cbz	r3, 8012d4a <_puts_r+0x66>
 8012d12:	3e01      	subs	r6, #1
 8012d14:	68a3      	ldr	r3, [r4, #8]
 8012d16:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012d1a:	3b01      	subs	r3, #1
 8012d1c:	60a3      	str	r3, [r4, #8]
 8012d1e:	b9e9      	cbnz	r1, 8012d5c <_puts_r+0x78>
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	da2e      	bge.n	8012d82 <_puts_r+0x9e>
 8012d24:	4622      	mov	r2, r4
 8012d26:	210a      	movs	r1, #10
 8012d28:	4628      	mov	r0, r5
 8012d2a:	f000 f83f 	bl	8012dac <__swbuf_r>
 8012d2e:	3001      	adds	r0, #1
 8012d30:	d011      	beq.n	8012d56 <_puts_r+0x72>
 8012d32:	200a      	movs	r0, #10
 8012d34:	e011      	b.n	8012d5a <_puts_r+0x76>
 8012d36:	4b17      	ldr	r3, [pc, #92]	; (8012d94 <_puts_r+0xb0>)
 8012d38:	429c      	cmp	r4, r3
 8012d3a:	d101      	bne.n	8012d40 <_puts_r+0x5c>
 8012d3c:	68ac      	ldr	r4, [r5, #8]
 8012d3e:	e7e3      	b.n	8012d08 <_puts_r+0x24>
 8012d40:	4b15      	ldr	r3, [pc, #84]	; (8012d98 <_puts_r+0xb4>)
 8012d42:	429c      	cmp	r4, r3
 8012d44:	bf08      	it	eq
 8012d46:	68ec      	ldreq	r4, [r5, #12]
 8012d48:	e7de      	b.n	8012d08 <_puts_r+0x24>
 8012d4a:	4621      	mov	r1, r4
 8012d4c:	4628      	mov	r0, r5
 8012d4e:	f000 f87f 	bl	8012e50 <__swsetup_r>
 8012d52:	2800      	cmp	r0, #0
 8012d54:	d0dd      	beq.n	8012d12 <_puts_r+0x2e>
 8012d56:	f04f 30ff 	mov.w	r0, #4294967295
 8012d5a:	bd70      	pop	{r4, r5, r6, pc}
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	da04      	bge.n	8012d6a <_puts_r+0x86>
 8012d60:	69a2      	ldr	r2, [r4, #24]
 8012d62:	429a      	cmp	r2, r3
 8012d64:	dc06      	bgt.n	8012d74 <_puts_r+0x90>
 8012d66:	290a      	cmp	r1, #10
 8012d68:	d004      	beq.n	8012d74 <_puts_r+0x90>
 8012d6a:	6823      	ldr	r3, [r4, #0]
 8012d6c:	1c5a      	adds	r2, r3, #1
 8012d6e:	6022      	str	r2, [r4, #0]
 8012d70:	7019      	strb	r1, [r3, #0]
 8012d72:	e7cf      	b.n	8012d14 <_puts_r+0x30>
 8012d74:	4622      	mov	r2, r4
 8012d76:	4628      	mov	r0, r5
 8012d78:	f000 f818 	bl	8012dac <__swbuf_r>
 8012d7c:	3001      	adds	r0, #1
 8012d7e:	d1c9      	bne.n	8012d14 <_puts_r+0x30>
 8012d80:	e7e9      	b.n	8012d56 <_puts_r+0x72>
 8012d82:	6823      	ldr	r3, [r4, #0]
 8012d84:	200a      	movs	r0, #10
 8012d86:	1c5a      	adds	r2, r3, #1
 8012d88:	6022      	str	r2, [r4, #0]
 8012d8a:	7018      	strb	r0, [r3, #0]
 8012d8c:	e7e5      	b.n	8012d5a <_puts_r+0x76>
 8012d8e:	bf00      	nop
 8012d90:	08028830 	.word	0x08028830
 8012d94:	08028850 	.word	0x08028850
 8012d98:	08028810 	.word	0x08028810

08012d9c <puts>:
 8012d9c:	4b02      	ldr	r3, [pc, #8]	; (8012da8 <puts+0xc>)
 8012d9e:	4601      	mov	r1, r0
 8012da0:	6818      	ldr	r0, [r3, #0]
 8012da2:	f7ff bf9f 	b.w	8012ce4 <_puts_r>
 8012da6:	bf00      	nop
 8012da8:	20000020 	.word	0x20000020

08012dac <__swbuf_r>:
 8012dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012dae:	460e      	mov	r6, r1
 8012db0:	4614      	mov	r4, r2
 8012db2:	4605      	mov	r5, r0
 8012db4:	b118      	cbz	r0, 8012dbe <__swbuf_r+0x12>
 8012db6:	6983      	ldr	r3, [r0, #24]
 8012db8:	b90b      	cbnz	r3, 8012dbe <__swbuf_r+0x12>
 8012dba:	f000 ffed 	bl	8013d98 <__sinit>
 8012dbe:	4b21      	ldr	r3, [pc, #132]	; (8012e44 <__swbuf_r+0x98>)
 8012dc0:	429c      	cmp	r4, r3
 8012dc2:	d12a      	bne.n	8012e1a <__swbuf_r+0x6e>
 8012dc4:	686c      	ldr	r4, [r5, #4]
 8012dc6:	69a3      	ldr	r3, [r4, #24]
 8012dc8:	60a3      	str	r3, [r4, #8]
 8012dca:	89a3      	ldrh	r3, [r4, #12]
 8012dcc:	071a      	lsls	r2, r3, #28
 8012dce:	d52e      	bpl.n	8012e2e <__swbuf_r+0x82>
 8012dd0:	6923      	ldr	r3, [r4, #16]
 8012dd2:	b363      	cbz	r3, 8012e2e <__swbuf_r+0x82>
 8012dd4:	6923      	ldr	r3, [r4, #16]
 8012dd6:	6820      	ldr	r0, [r4, #0]
 8012dd8:	1ac0      	subs	r0, r0, r3
 8012dda:	6963      	ldr	r3, [r4, #20]
 8012ddc:	b2f6      	uxtb	r6, r6
 8012dde:	4283      	cmp	r3, r0
 8012de0:	4637      	mov	r7, r6
 8012de2:	dc04      	bgt.n	8012dee <__swbuf_r+0x42>
 8012de4:	4621      	mov	r1, r4
 8012de6:	4628      	mov	r0, r5
 8012de8:	f000 ff6c 	bl	8013cc4 <_fflush_r>
 8012dec:	bb28      	cbnz	r0, 8012e3a <__swbuf_r+0x8e>
 8012dee:	68a3      	ldr	r3, [r4, #8]
 8012df0:	3b01      	subs	r3, #1
 8012df2:	60a3      	str	r3, [r4, #8]
 8012df4:	6823      	ldr	r3, [r4, #0]
 8012df6:	1c5a      	adds	r2, r3, #1
 8012df8:	6022      	str	r2, [r4, #0]
 8012dfa:	701e      	strb	r6, [r3, #0]
 8012dfc:	6963      	ldr	r3, [r4, #20]
 8012dfe:	3001      	adds	r0, #1
 8012e00:	4283      	cmp	r3, r0
 8012e02:	d004      	beq.n	8012e0e <__swbuf_r+0x62>
 8012e04:	89a3      	ldrh	r3, [r4, #12]
 8012e06:	07db      	lsls	r3, r3, #31
 8012e08:	d519      	bpl.n	8012e3e <__swbuf_r+0x92>
 8012e0a:	2e0a      	cmp	r6, #10
 8012e0c:	d117      	bne.n	8012e3e <__swbuf_r+0x92>
 8012e0e:	4621      	mov	r1, r4
 8012e10:	4628      	mov	r0, r5
 8012e12:	f000 ff57 	bl	8013cc4 <_fflush_r>
 8012e16:	b190      	cbz	r0, 8012e3e <__swbuf_r+0x92>
 8012e18:	e00f      	b.n	8012e3a <__swbuf_r+0x8e>
 8012e1a:	4b0b      	ldr	r3, [pc, #44]	; (8012e48 <__swbuf_r+0x9c>)
 8012e1c:	429c      	cmp	r4, r3
 8012e1e:	d101      	bne.n	8012e24 <__swbuf_r+0x78>
 8012e20:	68ac      	ldr	r4, [r5, #8]
 8012e22:	e7d0      	b.n	8012dc6 <__swbuf_r+0x1a>
 8012e24:	4b09      	ldr	r3, [pc, #36]	; (8012e4c <__swbuf_r+0xa0>)
 8012e26:	429c      	cmp	r4, r3
 8012e28:	bf08      	it	eq
 8012e2a:	68ec      	ldreq	r4, [r5, #12]
 8012e2c:	e7cb      	b.n	8012dc6 <__swbuf_r+0x1a>
 8012e2e:	4621      	mov	r1, r4
 8012e30:	4628      	mov	r0, r5
 8012e32:	f000 f80d 	bl	8012e50 <__swsetup_r>
 8012e36:	2800      	cmp	r0, #0
 8012e38:	d0cc      	beq.n	8012dd4 <__swbuf_r+0x28>
 8012e3a:	f04f 37ff 	mov.w	r7, #4294967295
 8012e3e:	4638      	mov	r0, r7
 8012e40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e42:	bf00      	nop
 8012e44:	08028830 	.word	0x08028830
 8012e48:	08028850 	.word	0x08028850
 8012e4c:	08028810 	.word	0x08028810

08012e50 <__swsetup_r>:
 8012e50:	4b32      	ldr	r3, [pc, #200]	; (8012f1c <__swsetup_r+0xcc>)
 8012e52:	b570      	push	{r4, r5, r6, lr}
 8012e54:	681d      	ldr	r5, [r3, #0]
 8012e56:	4606      	mov	r6, r0
 8012e58:	460c      	mov	r4, r1
 8012e5a:	b125      	cbz	r5, 8012e66 <__swsetup_r+0x16>
 8012e5c:	69ab      	ldr	r3, [r5, #24]
 8012e5e:	b913      	cbnz	r3, 8012e66 <__swsetup_r+0x16>
 8012e60:	4628      	mov	r0, r5
 8012e62:	f000 ff99 	bl	8013d98 <__sinit>
 8012e66:	4b2e      	ldr	r3, [pc, #184]	; (8012f20 <__swsetup_r+0xd0>)
 8012e68:	429c      	cmp	r4, r3
 8012e6a:	d10f      	bne.n	8012e8c <__swsetup_r+0x3c>
 8012e6c:	686c      	ldr	r4, [r5, #4]
 8012e6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012e72:	b29a      	uxth	r2, r3
 8012e74:	0715      	lsls	r5, r2, #28
 8012e76:	d42c      	bmi.n	8012ed2 <__swsetup_r+0x82>
 8012e78:	06d0      	lsls	r0, r2, #27
 8012e7a:	d411      	bmi.n	8012ea0 <__swsetup_r+0x50>
 8012e7c:	2209      	movs	r2, #9
 8012e7e:	6032      	str	r2, [r6, #0]
 8012e80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012e84:	81a3      	strh	r3, [r4, #12]
 8012e86:	f04f 30ff 	mov.w	r0, #4294967295
 8012e8a:	e03e      	b.n	8012f0a <__swsetup_r+0xba>
 8012e8c:	4b25      	ldr	r3, [pc, #148]	; (8012f24 <__swsetup_r+0xd4>)
 8012e8e:	429c      	cmp	r4, r3
 8012e90:	d101      	bne.n	8012e96 <__swsetup_r+0x46>
 8012e92:	68ac      	ldr	r4, [r5, #8]
 8012e94:	e7eb      	b.n	8012e6e <__swsetup_r+0x1e>
 8012e96:	4b24      	ldr	r3, [pc, #144]	; (8012f28 <__swsetup_r+0xd8>)
 8012e98:	429c      	cmp	r4, r3
 8012e9a:	bf08      	it	eq
 8012e9c:	68ec      	ldreq	r4, [r5, #12]
 8012e9e:	e7e6      	b.n	8012e6e <__swsetup_r+0x1e>
 8012ea0:	0751      	lsls	r1, r2, #29
 8012ea2:	d512      	bpl.n	8012eca <__swsetup_r+0x7a>
 8012ea4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012ea6:	b141      	cbz	r1, 8012eba <__swsetup_r+0x6a>
 8012ea8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012eac:	4299      	cmp	r1, r3
 8012eae:	d002      	beq.n	8012eb6 <__swsetup_r+0x66>
 8012eb0:	4630      	mov	r0, r6
 8012eb2:	f001 fb5f 	bl	8014574 <_free_r>
 8012eb6:	2300      	movs	r3, #0
 8012eb8:	6363      	str	r3, [r4, #52]	; 0x34
 8012eba:	89a3      	ldrh	r3, [r4, #12]
 8012ebc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012ec0:	81a3      	strh	r3, [r4, #12]
 8012ec2:	2300      	movs	r3, #0
 8012ec4:	6063      	str	r3, [r4, #4]
 8012ec6:	6923      	ldr	r3, [r4, #16]
 8012ec8:	6023      	str	r3, [r4, #0]
 8012eca:	89a3      	ldrh	r3, [r4, #12]
 8012ecc:	f043 0308 	orr.w	r3, r3, #8
 8012ed0:	81a3      	strh	r3, [r4, #12]
 8012ed2:	6923      	ldr	r3, [r4, #16]
 8012ed4:	b94b      	cbnz	r3, 8012eea <__swsetup_r+0x9a>
 8012ed6:	89a3      	ldrh	r3, [r4, #12]
 8012ed8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012edc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012ee0:	d003      	beq.n	8012eea <__swsetup_r+0x9a>
 8012ee2:	4621      	mov	r1, r4
 8012ee4:	4630      	mov	r0, r6
 8012ee6:	f001 f813 	bl	8013f10 <__smakebuf_r>
 8012eea:	89a2      	ldrh	r2, [r4, #12]
 8012eec:	f012 0301 	ands.w	r3, r2, #1
 8012ef0:	d00c      	beq.n	8012f0c <__swsetup_r+0xbc>
 8012ef2:	2300      	movs	r3, #0
 8012ef4:	60a3      	str	r3, [r4, #8]
 8012ef6:	6963      	ldr	r3, [r4, #20]
 8012ef8:	425b      	negs	r3, r3
 8012efa:	61a3      	str	r3, [r4, #24]
 8012efc:	6923      	ldr	r3, [r4, #16]
 8012efe:	b953      	cbnz	r3, 8012f16 <__swsetup_r+0xc6>
 8012f00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012f04:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8012f08:	d1ba      	bne.n	8012e80 <__swsetup_r+0x30>
 8012f0a:	bd70      	pop	{r4, r5, r6, pc}
 8012f0c:	0792      	lsls	r2, r2, #30
 8012f0e:	bf58      	it	pl
 8012f10:	6963      	ldrpl	r3, [r4, #20]
 8012f12:	60a3      	str	r3, [r4, #8]
 8012f14:	e7f2      	b.n	8012efc <__swsetup_r+0xac>
 8012f16:	2000      	movs	r0, #0
 8012f18:	e7f7      	b.n	8012f0a <__swsetup_r+0xba>
 8012f1a:	bf00      	nop
 8012f1c:	20000020 	.word	0x20000020
 8012f20:	08028830 	.word	0x08028830
 8012f24:	08028850 	.word	0x08028850
 8012f28:	08028810 	.word	0x08028810

08012f2c <quorem>:
 8012f2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f30:	6903      	ldr	r3, [r0, #16]
 8012f32:	690c      	ldr	r4, [r1, #16]
 8012f34:	42a3      	cmp	r3, r4
 8012f36:	4680      	mov	r8, r0
 8012f38:	f2c0 8082 	blt.w	8013040 <quorem+0x114>
 8012f3c:	3c01      	subs	r4, #1
 8012f3e:	f101 0714 	add.w	r7, r1, #20
 8012f42:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8012f46:	f100 0614 	add.w	r6, r0, #20
 8012f4a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8012f4e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8012f52:	eb06 030c 	add.w	r3, r6, ip
 8012f56:	3501      	adds	r5, #1
 8012f58:	eb07 090c 	add.w	r9, r7, ip
 8012f5c:	9301      	str	r3, [sp, #4]
 8012f5e:	fbb0 f5f5 	udiv	r5, r0, r5
 8012f62:	b395      	cbz	r5, 8012fca <quorem+0x9e>
 8012f64:	f04f 0a00 	mov.w	sl, #0
 8012f68:	4638      	mov	r0, r7
 8012f6a:	46b6      	mov	lr, r6
 8012f6c:	46d3      	mov	fp, sl
 8012f6e:	f850 2b04 	ldr.w	r2, [r0], #4
 8012f72:	b293      	uxth	r3, r2
 8012f74:	fb05 a303 	mla	r3, r5, r3, sl
 8012f78:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012f7c:	b29b      	uxth	r3, r3
 8012f7e:	ebab 0303 	sub.w	r3, fp, r3
 8012f82:	0c12      	lsrs	r2, r2, #16
 8012f84:	f8de b000 	ldr.w	fp, [lr]
 8012f88:	fb05 a202 	mla	r2, r5, r2, sl
 8012f8c:	fa13 f38b 	uxtah	r3, r3, fp
 8012f90:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8012f94:	fa1f fb82 	uxth.w	fp, r2
 8012f98:	f8de 2000 	ldr.w	r2, [lr]
 8012f9c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8012fa0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012fa4:	b29b      	uxth	r3, r3
 8012fa6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012faa:	4581      	cmp	r9, r0
 8012fac:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8012fb0:	f84e 3b04 	str.w	r3, [lr], #4
 8012fb4:	d2db      	bcs.n	8012f6e <quorem+0x42>
 8012fb6:	f856 300c 	ldr.w	r3, [r6, ip]
 8012fba:	b933      	cbnz	r3, 8012fca <quorem+0x9e>
 8012fbc:	9b01      	ldr	r3, [sp, #4]
 8012fbe:	3b04      	subs	r3, #4
 8012fc0:	429e      	cmp	r6, r3
 8012fc2:	461a      	mov	r2, r3
 8012fc4:	d330      	bcc.n	8013028 <quorem+0xfc>
 8012fc6:	f8c8 4010 	str.w	r4, [r8, #16]
 8012fca:	4640      	mov	r0, r8
 8012fcc:	f001 f9fe 	bl	80143cc <__mcmp>
 8012fd0:	2800      	cmp	r0, #0
 8012fd2:	db25      	blt.n	8013020 <quorem+0xf4>
 8012fd4:	3501      	adds	r5, #1
 8012fd6:	4630      	mov	r0, r6
 8012fd8:	f04f 0c00 	mov.w	ip, #0
 8012fdc:	f857 2b04 	ldr.w	r2, [r7], #4
 8012fe0:	f8d0 e000 	ldr.w	lr, [r0]
 8012fe4:	b293      	uxth	r3, r2
 8012fe6:	ebac 0303 	sub.w	r3, ip, r3
 8012fea:	0c12      	lsrs	r2, r2, #16
 8012fec:	fa13 f38e 	uxtah	r3, r3, lr
 8012ff0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012ff4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012ff8:	b29b      	uxth	r3, r3
 8012ffa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012ffe:	45b9      	cmp	r9, r7
 8013000:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013004:	f840 3b04 	str.w	r3, [r0], #4
 8013008:	d2e8      	bcs.n	8012fdc <quorem+0xb0>
 801300a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 801300e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8013012:	b92a      	cbnz	r2, 8013020 <quorem+0xf4>
 8013014:	3b04      	subs	r3, #4
 8013016:	429e      	cmp	r6, r3
 8013018:	461a      	mov	r2, r3
 801301a:	d30b      	bcc.n	8013034 <quorem+0x108>
 801301c:	f8c8 4010 	str.w	r4, [r8, #16]
 8013020:	4628      	mov	r0, r5
 8013022:	b003      	add	sp, #12
 8013024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013028:	6812      	ldr	r2, [r2, #0]
 801302a:	3b04      	subs	r3, #4
 801302c:	2a00      	cmp	r2, #0
 801302e:	d1ca      	bne.n	8012fc6 <quorem+0x9a>
 8013030:	3c01      	subs	r4, #1
 8013032:	e7c5      	b.n	8012fc0 <quorem+0x94>
 8013034:	6812      	ldr	r2, [r2, #0]
 8013036:	3b04      	subs	r3, #4
 8013038:	2a00      	cmp	r2, #0
 801303a:	d1ef      	bne.n	801301c <quorem+0xf0>
 801303c:	3c01      	subs	r4, #1
 801303e:	e7ea      	b.n	8013016 <quorem+0xea>
 8013040:	2000      	movs	r0, #0
 8013042:	e7ee      	b.n	8013022 <quorem+0xf6>
 8013044:	0000      	movs	r0, r0
	...

08013048 <_dtoa_r>:
 8013048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801304c:	ec57 6b10 	vmov	r6, r7, d0
 8013050:	b097      	sub	sp, #92	; 0x5c
 8013052:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013054:	9106      	str	r1, [sp, #24]
 8013056:	4604      	mov	r4, r0
 8013058:	920b      	str	r2, [sp, #44]	; 0x2c
 801305a:	9312      	str	r3, [sp, #72]	; 0x48
 801305c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8013060:	e9cd 6700 	strd	r6, r7, [sp]
 8013064:	b93d      	cbnz	r5, 8013076 <_dtoa_r+0x2e>
 8013066:	2010      	movs	r0, #16
 8013068:	f000 ff92 	bl	8013f90 <malloc>
 801306c:	6260      	str	r0, [r4, #36]	; 0x24
 801306e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013072:	6005      	str	r5, [r0, #0]
 8013074:	60c5      	str	r5, [r0, #12]
 8013076:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013078:	6819      	ldr	r1, [r3, #0]
 801307a:	b151      	cbz	r1, 8013092 <_dtoa_r+0x4a>
 801307c:	685a      	ldr	r2, [r3, #4]
 801307e:	604a      	str	r2, [r1, #4]
 8013080:	2301      	movs	r3, #1
 8013082:	4093      	lsls	r3, r2
 8013084:	608b      	str	r3, [r1, #8]
 8013086:	4620      	mov	r0, r4
 8013088:	f000 ffbe 	bl	8014008 <_Bfree>
 801308c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801308e:	2200      	movs	r2, #0
 8013090:	601a      	str	r2, [r3, #0]
 8013092:	1e3b      	subs	r3, r7, #0
 8013094:	bfbb      	ittet	lt
 8013096:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801309a:	9301      	strlt	r3, [sp, #4]
 801309c:	2300      	movge	r3, #0
 801309e:	2201      	movlt	r2, #1
 80130a0:	bfac      	ite	ge
 80130a2:	f8c8 3000 	strge.w	r3, [r8]
 80130a6:	f8c8 2000 	strlt.w	r2, [r8]
 80130aa:	4baf      	ldr	r3, [pc, #700]	; (8013368 <_dtoa_r+0x320>)
 80130ac:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80130b0:	ea33 0308 	bics.w	r3, r3, r8
 80130b4:	d114      	bne.n	80130e0 <_dtoa_r+0x98>
 80130b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80130b8:	f242 730f 	movw	r3, #9999	; 0x270f
 80130bc:	6013      	str	r3, [r2, #0]
 80130be:	9b00      	ldr	r3, [sp, #0]
 80130c0:	b923      	cbnz	r3, 80130cc <_dtoa_r+0x84>
 80130c2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80130c6:	2800      	cmp	r0, #0
 80130c8:	f000 8542 	beq.w	8013b50 <_dtoa_r+0xb08>
 80130cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80130ce:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801337c <_dtoa_r+0x334>
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	f000 8544 	beq.w	8013b60 <_dtoa_r+0xb18>
 80130d8:	f10b 0303 	add.w	r3, fp, #3
 80130dc:	f000 bd3e 	b.w	8013b5c <_dtoa_r+0xb14>
 80130e0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80130e4:	2200      	movs	r2, #0
 80130e6:	2300      	movs	r3, #0
 80130e8:	4630      	mov	r0, r6
 80130ea:	4639      	mov	r1, r7
 80130ec:	f7f5 fc24 	bl	8008938 <__aeabi_dcmpeq>
 80130f0:	4681      	mov	r9, r0
 80130f2:	b168      	cbz	r0, 8013110 <_dtoa_r+0xc8>
 80130f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80130f6:	2301      	movs	r3, #1
 80130f8:	6013      	str	r3, [r2, #0]
 80130fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	f000 8524 	beq.w	8013b4a <_dtoa_r+0xb02>
 8013102:	4b9a      	ldr	r3, [pc, #616]	; (801336c <_dtoa_r+0x324>)
 8013104:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013106:	f103 3bff 	add.w	fp, r3, #4294967295
 801310a:	6013      	str	r3, [r2, #0]
 801310c:	f000 bd28 	b.w	8013b60 <_dtoa_r+0xb18>
 8013110:	aa14      	add	r2, sp, #80	; 0x50
 8013112:	a915      	add	r1, sp, #84	; 0x54
 8013114:	ec47 6b10 	vmov	d0, r6, r7
 8013118:	4620      	mov	r0, r4
 801311a:	f001 f9ce 	bl	80144ba <__d2b>
 801311e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8013122:	9004      	str	r0, [sp, #16]
 8013124:	2d00      	cmp	r5, #0
 8013126:	d07c      	beq.n	8013222 <_dtoa_r+0x1da>
 8013128:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801312c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8013130:	46b2      	mov	sl, r6
 8013132:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8013136:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801313a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 801313e:	2200      	movs	r2, #0
 8013140:	4b8b      	ldr	r3, [pc, #556]	; (8013370 <_dtoa_r+0x328>)
 8013142:	4650      	mov	r0, sl
 8013144:	4659      	mov	r1, fp
 8013146:	f7f4 ffd7 	bl	80080f8 <__aeabi_dsub>
 801314a:	a381      	add	r3, pc, #516	; (adr r3, 8013350 <_dtoa_r+0x308>)
 801314c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013150:	f7f5 f98a 	bl	8008468 <__aeabi_dmul>
 8013154:	a380      	add	r3, pc, #512	; (adr r3, 8013358 <_dtoa_r+0x310>)
 8013156:	e9d3 2300 	ldrd	r2, r3, [r3]
 801315a:	f7f4 ffcf 	bl	80080fc <__adddf3>
 801315e:	4606      	mov	r6, r0
 8013160:	4628      	mov	r0, r5
 8013162:	460f      	mov	r7, r1
 8013164:	f7f5 f916 	bl	8008394 <__aeabi_i2d>
 8013168:	a37d      	add	r3, pc, #500	; (adr r3, 8013360 <_dtoa_r+0x318>)
 801316a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801316e:	f7f5 f97b 	bl	8008468 <__aeabi_dmul>
 8013172:	4602      	mov	r2, r0
 8013174:	460b      	mov	r3, r1
 8013176:	4630      	mov	r0, r6
 8013178:	4639      	mov	r1, r7
 801317a:	f7f4 ffbf 	bl	80080fc <__adddf3>
 801317e:	4606      	mov	r6, r0
 8013180:	460f      	mov	r7, r1
 8013182:	f7f5 fc21 	bl	80089c8 <__aeabi_d2iz>
 8013186:	2200      	movs	r2, #0
 8013188:	4682      	mov	sl, r0
 801318a:	2300      	movs	r3, #0
 801318c:	4630      	mov	r0, r6
 801318e:	4639      	mov	r1, r7
 8013190:	f7f5 fbdc 	bl	800894c <__aeabi_dcmplt>
 8013194:	b148      	cbz	r0, 80131aa <_dtoa_r+0x162>
 8013196:	4650      	mov	r0, sl
 8013198:	f7f5 f8fc 	bl	8008394 <__aeabi_i2d>
 801319c:	4632      	mov	r2, r6
 801319e:	463b      	mov	r3, r7
 80131a0:	f7f5 fbca 	bl	8008938 <__aeabi_dcmpeq>
 80131a4:	b908      	cbnz	r0, 80131aa <_dtoa_r+0x162>
 80131a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80131aa:	f1ba 0f16 	cmp.w	sl, #22
 80131ae:	d859      	bhi.n	8013264 <_dtoa_r+0x21c>
 80131b0:	4970      	ldr	r1, [pc, #448]	; (8013374 <_dtoa_r+0x32c>)
 80131b2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80131b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80131ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80131be:	f7f5 fbe3 	bl	8008988 <__aeabi_dcmpgt>
 80131c2:	2800      	cmp	r0, #0
 80131c4:	d050      	beq.n	8013268 <_dtoa_r+0x220>
 80131c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80131ca:	2300      	movs	r3, #0
 80131cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80131ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80131d0:	1b5d      	subs	r5, r3, r5
 80131d2:	f1b5 0801 	subs.w	r8, r5, #1
 80131d6:	bf49      	itett	mi
 80131d8:	f1c5 0301 	rsbmi	r3, r5, #1
 80131dc:	2300      	movpl	r3, #0
 80131de:	9305      	strmi	r3, [sp, #20]
 80131e0:	f04f 0800 	movmi.w	r8, #0
 80131e4:	bf58      	it	pl
 80131e6:	9305      	strpl	r3, [sp, #20]
 80131e8:	f1ba 0f00 	cmp.w	sl, #0
 80131ec:	db3e      	blt.n	801326c <_dtoa_r+0x224>
 80131ee:	2300      	movs	r3, #0
 80131f0:	44d0      	add	r8, sl
 80131f2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80131f6:	9307      	str	r3, [sp, #28]
 80131f8:	9b06      	ldr	r3, [sp, #24]
 80131fa:	2b09      	cmp	r3, #9
 80131fc:	f200 8090 	bhi.w	8013320 <_dtoa_r+0x2d8>
 8013200:	2b05      	cmp	r3, #5
 8013202:	bfc4      	itt	gt
 8013204:	3b04      	subgt	r3, #4
 8013206:	9306      	strgt	r3, [sp, #24]
 8013208:	9b06      	ldr	r3, [sp, #24]
 801320a:	f1a3 0302 	sub.w	r3, r3, #2
 801320e:	bfcc      	ite	gt
 8013210:	2500      	movgt	r5, #0
 8013212:	2501      	movle	r5, #1
 8013214:	2b03      	cmp	r3, #3
 8013216:	f200 808f 	bhi.w	8013338 <_dtoa_r+0x2f0>
 801321a:	e8df f003 	tbb	[pc, r3]
 801321e:	7f7d      	.short	0x7f7d
 8013220:	7131      	.short	0x7131
 8013222:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8013226:	441d      	add	r5, r3
 8013228:	f205 4032 	addw	r0, r5, #1074	; 0x432
 801322c:	2820      	cmp	r0, #32
 801322e:	dd13      	ble.n	8013258 <_dtoa_r+0x210>
 8013230:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8013234:	9b00      	ldr	r3, [sp, #0]
 8013236:	fa08 f800 	lsl.w	r8, r8, r0
 801323a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 801323e:	fa23 f000 	lsr.w	r0, r3, r0
 8013242:	ea48 0000 	orr.w	r0, r8, r0
 8013246:	f7f5 f895 	bl	8008374 <__aeabi_ui2d>
 801324a:	2301      	movs	r3, #1
 801324c:	4682      	mov	sl, r0
 801324e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8013252:	3d01      	subs	r5, #1
 8013254:	9313      	str	r3, [sp, #76]	; 0x4c
 8013256:	e772      	b.n	801313e <_dtoa_r+0xf6>
 8013258:	9b00      	ldr	r3, [sp, #0]
 801325a:	f1c0 0020 	rsb	r0, r0, #32
 801325e:	fa03 f000 	lsl.w	r0, r3, r0
 8013262:	e7f0      	b.n	8013246 <_dtoa_r+0x1fe>
 8013264:	2301      	movs	r3, #1
 8013266:	e7b1      	b.n	80131cc <_dtoa_r+0x184>
 8013268:	900f      	str	r0, [sp, #60]	; 0x3c
 801326a:	e7b0      	b.n	80131ce <_dtoa_r+0x186>
 801326c:	9b05      	ldr	r3, [sp, #20]
 801326e:	eba3 030a 	sub.w	r3, r3, sl
 8013272:	9305      	str	r3, [sp, #20]
 8013274:	f1ca 0300 	rsb	r3, sl, #0
 8013278:	9307      	str	r3, [sp, #28]
 801327a:	2300      	movs	r3, #0
 801327c:	930e      	str	r3, [sp, #56]	; 0x38
 801327e:	e7bb      	b.n	80131f8 <_dtoa_r+0x1b0>
 8013280:	2301      	movs	r3, #1
 8013282:	930a      	str	r3, [sp, #40]	; 0x28
 8013284:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013286:	2b00      	cmp	r3, #0
 8013288:	dd59      	ble.n	801333e <_dtoa_r+0x2f6>
 801328a:	9302      	str	r3, [sp, #8]
 801328c:	4699      	mov	r9, r3
 801328e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013290:	2200      	movs	r2, #0
 8013292:	6072      	str	r2, [r6, #4]
 8013294:	2204      	movs	r2, #4
 8013296:	f102 0014 	add.w	r0, r2, #20
 801329a:	4298      	cmp	r0, r3
 801329c:	6871      	ldr	r1, [r6, #4]
 801329e:	d953      	bls.n	8013348 <_dtoa_r+0x300>
 80132a0:	4620      	mov	r0, r4
 80132a2:	f000 fe7d 	bl	8013fa0 <_Balloc>
 80132a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80132a8:	6030      	str	r0, [r6, #0]
 80132aa:	f1b9 0f0e 	cmp.w	r9, #14
 80132ae:	f8d3 b000 	ldr.w	fp, [r3]
 80132b2:	f200 80e6 	bhi.w	8013482 <_dtoa_r+0x43a>
 80132b6:	2d00      	cmp	r5, #0
 80132b8:	f000 80e3 	beq.w	8013482 <_dtoa_r+0x43a>
 80132bc:	ed9d 7b00 	vldr	d7, [sp]
 80132c0:	f1ba 0f00 	cmp.w	sl, #0
 80132c4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80132c8:	dd74      	ble.n	80133b4 <_dtoa_r+0x36c>
 80132ca:	4a2a      	ldr	r2, [pc, #168]	; (8013374 <_dtoa_r+0x32c>)
 80132cc:	f00a 030f 	and.w	r3, sl, #15
 80132d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80132d4:	ed93 7b00 	vldr	d7, [r3]
 80132d8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80132dc:	06f0      	lsls	r0, r6, #27
 80132de:	ed8d 7b08 	vstr	d7, [sp, #32]
 80132e2:	d565      	bpl.n	80133b0 <_dtoa_r+0x368>
 80132e4:	4b24      	ldr	r3, [pc, #144]	; (8013378 <_dtoa_r+0x330>)
 80132e6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80132ea:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80132ee:	f7f5 f9e5 	bl	80086bc <__aeabi_ddiv>
 80132f2:	e9cd 0100 	strd	r0, r1, [sp]
 80132f6:	f006 060f 	and.w	r6, r6, #15
 80132fa:	2503      	movs	r5, #3
 80132fc:	4f1e      	ldr	r7, [pc, #120]	; (8013378 <_dtoa_r+0x330>)
 80132fe:	e04c      	b.n	801339a <_dtoa_r+0x352>
 8013300:	2301      	movs	r3, #1
 8013302:	930a      	str	r3, [sp, #40]	; 0x28
 8013304:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013306:	4453      	add	r3, sl
 8013308:	f103 0901 	add.w	r9, r3, #1
 801330c:	9302      	str	r3, [sp, #8]
 801330e:	464b      	mov	r3, r9
 8013310:	2b01      	cmp	r3, #1
 8013312:	bfb8      	it	lt
 8013314:	2301      	movlt	r3, #1
 8013316:	e7ba      	b.n	801328e <_dtoa_r+0x246>
 8013318:	2300      	movs	r3, #0
 801331a:	e7b2      	b.n	8013282 <_dtoa_r+0x23a>
 801331c:	2300      	movs	r3, #0
 801331e:	e7f0      	b.n	8013302 <_dtoa_r+0x2ba>
 8013320:	2501      	movs	r5, #1
 8013322:	2300      	movs	r3, #0
 8013324:	9306      	str	r3, [sp, #24]
 8013326:	950a      	str	r5, [sp, #40]	; 0x28
 8013328:	f04f 33ff 	mov.w	r3, #4294967295
 801332c:	9302      	str	r3, [sp, #8]
 801332e:	4699      	mov	r9, r3
 8013330:	2200      	movs	r2, #0
 8013332:	2312      	movs	r3, #18
 8013334:	920b      	str	r2, [sp, #44]	; 0x2c
 8013336:	e7aa      	b.n	801328e <_dtoa_r+0x246>
 8013338:	2301      	movs	r3, #1
 801333a:	930a      	str	r3, [sp, #40]	; 0x28
 801333c:	e7f4      	b.n	8013328 <_dtoa_r+0x2e0>
 801333e:	2301      	movs	r3, #1
 8013340:	9302      	str	r3, [sp, #8]
 8013342:	4699      	mov	r9, r3
 8013344:	461a      	mov	r2, r3
 8013346:	e7f5      	b.n	8013334 <_dtoa_r+0x2ec>
 8013348:	3101      	adds	r1, #1
 801334a:	6071      	str	r1, [r6, #4]
 801334c:	0052      	lsls	r2, r2, #1
 801334e:	e7a2      	b.n	8013296 <_dtoa_r+0x24e>
 8013350:	636f4361 	.word	0x636f4361
 8013354:	3fd287a7 	.word	0x3fd287a7
 8013358:	8b60c8b3 	.word	0x8b60c8b3
 801335c:	3fc68a28 	.word	0x3fc68a28
 8013360:	509f79fb 	.word	0x509f79fb
 8013364:	3fd34413 	.word	0x3fd34413
 8013368:	7ff00000 	.word	0x7ff00000
 801336c:	080287dd 	.word	0x080287dd
 8013370:	3ff80000 	.word	0x3ff80000
 8013374:	08028898 	.word	0x08028898
 8013378:	08028870 	.word	0x08028870
 801337c:	08028809 	.word	0x08028809
 8013380:	07f1      	lsls	r1, r6, #31
 8013382:	d508      	bpl.n	8013396 <_dtoa_r+0x34e>
 8013384:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013388:	e9d7 2300 	ldrd	r2, r3, [r7]
 801338c:	f7f5 f86c 	bl	8008468 <__aeabi_dmul>
 8013390:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013394:	3501      	adds	r5, #1
 8013396:	1076      	asrs	r6, r6, #1
 8013398:	3708      	adds	r7, #8
 801339a:	2e00      	cmp	r6, #0
 801339c:	d1f0      	bne.n	8013380 <_dtoa_r+0x338>
 801339e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80133a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80133a6:	f7f5 f989 	bl	80086bc <__aeabi_ddiv>
 80133aa:	e9cd 0100 	strd	r0, r1, [sp]
 80133ae:	e01a      	b.n	80133e6 <_dtoa_r+0x39e>
 80133b0:	2502      	movs	r5, #2
 80133b2:	e7a3      	b.n	80132fc <_dtoa_r+0x2b4>
 80133b4:	f000 80a0 	beq.w	80134f8 <_dtoa_r+0x4b0>
 80133b8:	f1ca 0600 	rsb	r6, sl, #0
 80133bc:	4b9f      	ldr	r3, [pc, #636]	; (801363c <_dtoa_r+0x5f4>)
 80133be:	4fa0      	ldr	r7, [pc, #640]	; (8013640 <_dtoa_r+0x5f8>)
 80133c0:	f006 020f 	and.w	r2, r6, #15
 80133c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80133c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80133cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80133d0:	f7f5 f84a 	bl	8008468 <__aeabi_dmul>
 80133d4:	e9cd 0100 	strd	r0, r1, [sp]
 80133d8:	1136      	asrs	r6, r6, #4
 80133da:	2300      	movs	r3, #0
 80133dc:	2502      	movs	r5, #2
 80133de:	2e00      	cmp	r6, #0
 80133e0:	d17f      	bne.n	80134e2 <_dtoa_r+0x49a>
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d1e1      	bne.n	80133aa <_dtoa_r+0x362>
 80133e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	f000 8087 	beq.w	80134fc <_dtoa_r+0x4b4>
 80133ee:	e9dd 6700 	ldrd	r6, r7, [sp]
 80133f2:	2200      	movs	r2, #0
 80133f4:	4b93      	ldr	r3, [pc, #588]	; (8013644 <_dtoa_r+0x5fc>)
 80133f6:	4630      	mov	r0, r6
 80133f8:	4639      	mov	r1, r7
 80133fa:	f7f5 faa7 	bl	800894c <__aeabi_dcmplt>
 80133fe:	2800      	cmp	r0, #0
 8013400:	d07c      	beq.n	80134fc <_dtoa_r+0x4b4>
 8013402:	f1b9 0f00 	cmp.w	r9, #0
 8013406:	d079      	beq.n	80134fc <_dtoa_r+0x4b4>
 8013408:	9b02      	ldr	r3, [sp, #8]
 801340a:	2b00      	cmp	r3, #0
 801340c:	dd35      	ble.n	801347a <_dtoa_r+0x432>
 801340e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8013412:	9308      	str	r3, [sp, #32]
 8013414:	4639      	mov	r1, r7
 8013416:	2200      	movs	r2, #0
 8013418:	4b8b      	ldr	r3, [pc, #556]	; (8013648 <_dtoa_r+0x600>)
 801341a:	4630      	mov	r0, r6
 801341c:	f7f5 f824 	bl	8008468 <__aeabi_dmul>
 8013420:	e9cd 0100 	strd	r0, r1, [sp]
 8013424:	9f02      	ldr	r7, [sp, #8]
 8013426:	3501      	adds	r5, #1
 8013428:	4628      	mov	r0, r5
 801342a:	f7f4 ffb3 	bl	8008394 <__aeabi_i2d>
 801342e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013432:	f7f5 f819 	bl	8008468 <__aeabi_dmul>
 8013436:	2200      	movs	r2, #0
 8013438:	4b84      	ldr	r3, [pc, #528]	; (801364c <_dtoa_r+0x604>)
 801343a:	f7f4 fe5f 	bl	80080fc <__adddf3>
 801343e:	4605      	mov	r5, r0
 8013440:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8013444:	2f00      	cmp	r7, #0
 8013446:	d15d      	bne.n	8013504 <_dtoa_r+0x4bc>
 8013448:	2200      	movs	r2, #0
 801344a:	4b81      	ldr	r3, [pc, #516]	; (8013650 <_dtoa_r+0x608>)
 801344c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013450:	f7f4 fe52 	bl	80080f8 <__aeabi_dsub>
 8013454:	462a      	mov	r2, r5
 8013456:	4633      	mov	r3, r6
 8013458:	e9cd 0100 	strd	r0, r1, [sp]
 801345c:	f7f5 fa94 	bl	8008988 <__aeabi_dcmpgt>
 8013460:	2800      	cmp	r0, #0
 8013462:	f040 8288 	bne.w	8013976 <_dtoa_r+0x92e>
 8013466:	462a      	mov	r2, r5
 8013468:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801346c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013470:	f7f5 fa6c 	bl	800894c <__aeabi_dcmplt>
 8013474:	2800      	cmp	r0, #0
 8013476:	f040 827c 	bne.w	8013972 <_dtoa_r+0x92a>
 801347a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801347e:	e9cd 2300 	strd	r2, r3, [sp]
 8013482:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013484:	2b00      	cmp	r3, #0
 8013486:	f2c0 8150 	blt.w	801372a <_dtoa_r+0x6e2>
 801348a:	f1ba 0f0e 	cmp.w	sl, #14
 801348e:	f300 814c 	bgt.w	801372a <_dtoa_r+0x6e2>
 8013492:	4b6a      	ldr	r3, [pc, #424]	; (801363c <_dtoa_r+0x5f4>)
 8013494:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013498:	ed93 7b00 	vldr	d7, [r3]
 801349c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801349e:	2b00      	cmp	r3, #0
 80134a0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80134a4:	f280 80d8 	bge.w	8013658 <_dtoa_r+0x610>
 80134a8:	f1b9 0f00 	cmp.w	r9, #0
 80134ac:	f300 80d4 	bgt.w	8013658 <_dtoa_r+0x610>
 80134b0:	f040 825e 	bne.w	8013970 <_dtoa_r+0x928>
 80134b4:	2200      	movs	r2, #0
 80134b6:	4b66      	ldr	r3, [pc, #408]	; (8013650 <_dtoa_r+0x608>)
 80134b8:	ec51 0b17 	vmov	r0, r1, d7
 80134bc:	f7f4 ffd4 	bl	8008468 <__aeabi_dmul>
 80134c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80134c4:	f7f5 fa56 	bl	8008974 <__aeabi_dcmpge>
 80134c8:	464f      	mov	r7, r9
 80134ca:	464e      	mov	r6, r9
 80134cc:	2800      	cmp	r0, #0
 80134ce:	f040 8234 	bne.w	801393a <_dtoa_r+0x8f2>
 80134d2:	2331      	movs	r3, #49	; 0x31
 80134d4:	f10b 0501 	add.w	r5, fp, #1
 80134d8:	f88b 3000 	strb.w	r3, [fp]
 80134dc:	f10a 0a01 	add.w	sl, sl, #1
 80134e0:	e22f      	b.n	8013942 <_dtoa_r+0x8fa>
 80134e2:	07f2      	lsls	r2, r6, #31
 80134e4:	d505      	bpl.n	80134f2 <_dtoa_r+0x4aa>
 80134e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80134ea:	f7f4 ffbd 	bl	8008468 <__aeabi_dmul>
 80134ee:	3501      	adds	r5, #1
 80134f0:	2301      	movs	r3, #1
 80134f2:	1076      	asrs	r6, r6, #1
 80134f4:	3708      	adds	r7, #8
 80134f6:	e772      	b.n	80133de <_dtoa_r+0x396>
 80134f8:	2502      	movs	r5, #2
 80134fa:	e774      	b.n	80133e6 <_dtoa_r+0x39e>
 80134fc:	f8cd a020 	str.w	sl, [sp, #32]
 8013500:	464f      	mov	r7, r9
 8013502:	e791      	b.n	8013428 <_dtoa_r+0x3e0>
 8013504:	4b4d      	ldr	r3, [pc, #308]	; (801363c <_dtoa_r+0x5f4>)
 8013506:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801350a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801350e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013510:	2b00      	cmp	r3, #0
 8013512:	d047      	beq.n	80135a4 <_dtoa_r+0x55c>
 8013514:	4602      	mov	r2, r0
 8013516:	460b      	mov	r3, r1
 8013518:	2000      	movs	r0, #0
 801351a:	494e      	ldr	r1, [pc, #312]	; (8013654 <_dtoa_r+0x60c>)
 801351c:	f7f5 f8ce 	bl	80086bc <__aeabi_ddiv>
 8013520:	462a      	mov	r2, r5
 8013522:	4633      	mov	r3, r6
 8013524:	f7f4 fde8 	bl	80080f8 <__aeabi_dsub>
 8013528:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801352c:	465d      	mov	r5, fp
 801352e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013532:	f7f5 fa49 	bl	80089c8 <__aeabi_d2iz>
 8013536:	4606      	mov	r6, r0
 8013538:	f7f4 ff2c 	bl	8008394 <__aeabi_i2d>
 801353c:	4602      	mov	r2, r0
 801353e:	460b      	mov	r3, r1
 8013540:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013544:	f7f4 fdd8 	bl	80080f8 <__aeabi_dsub>
 8013548:	3630      	adds	r6, #48	; 0x30
 801354a:	f805 6b01 	strb.w	r6, [r5], #1
 801354e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8013552:	e9cd 0100 	strd	r0, r1, [sp]
 8013556:	f7f5 f9f9 	bl	800894c <__aeabi_dcmplt>
 801355a:	2800      	cmp	r0, #0
 801355c:	d163      	bne.n	8013626 <_dtoa_r+0x5de>
 801355e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013562:	2000      	movs	r0, #0
 8013564:	4937      	ldr	r1, [pc, #220]	; (8013644 <_dtoa_r+0x5fc>)
 8013566:	f7f4 fdc7 	bl	80080f8 <__aeabi_dsub>
 801356a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801356e:	f7f5 f9ed 	bl	800894c <__aeabi_dcmplt>
 8013572:	2800      	cmp	r0, #0
 8013574:	f040 80b7 	bne.w	80136e6 <_dtoa_r+0x69e>
 8013578:	eba5 030b 	sub.w	r3, r5, fp
 801357c:	429f      	cmp	r7, r3
 801357e:	f77f af7c 	ble.w	801347a <_dtoa_r+0x432>
 8013582:	2200      	movs	r2, #0
 8013584:	4b30      	ldr	r3, [pc, #192]	; (8013648 <_dtoa_r+0x600>)
 8013586:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801358a:	f7f4 ff6d 	bl	8008468 <__aeabi_dmul>
 801358e:	2200      	movs	r2, #0
 8013590:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8013594:	4b2c      	ldr	r3, [pc, #176]	; (8013648 <_dtoa_r+0x600>)
 8013596:	e9dd 0100 	ldrd	r0, r1, [sp]
 801359a:	f7f4 ff65 	bl	8008468 <__aeabi_dmul>
 801359e:	e9cd 0100 	strd	r0, r1, [sp]
 80135a2:	e7c4      	b.n	801352e <_dtoa_r+0x4e6>
 80135a4:	462a      	mov	r2, r5
 80135a6:	4633      	mov	r3, r6
 80135a8:	f7f4 ff5e 	bl	8008468 <__aeabi_dmul>
 80135ac:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80135b0:	eb0b 0507 	add.w	r5, fp, r7
 80135b4:	465e      	mov	r6, fp
 80135b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80135ba:	f7f5 fa05 	bl	80089c8 <__aeabi_d2iz>
 80135be:	4607      	mov	r7, r0
 80135c0:	f7f4 fee8 	bl	8008394 <__aeabi_i2d>
 80135c4:	3730      	adds	r7, #48	; 0x30
 80135c6:	4602      	mov	r2, r0
 80135c8:	460b      	mov	r3, r1
 80135ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80135ce:	f7f4 fd93 	bl	80080f8 <__aeabi_dsub>
 80135d2:	f806 7b01 	strb.w	r7, [r6], #1
 80135d6:	42ae      	cmp	r6, r5
 80135d8:	e9cd 0100 	strd	r0, r1, [sp]
 80135dc:	f04f 0200 	mov.w	r2, #0
 80135e0:	d126      	bne.n	8013630 <_dtoa_r+0x5e8>
 80135e2:	4b1c      	ldr	r3, [pc, #112]	; (8013654 <_dtoa_r+0x60c>)
 80135e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80135e8:	f7f4 fd88 	bl	80080fc <__adddf3>
 80135ec:	4602      	mov	r2, r0
 80135ee:	460b      	mov	r3, r1
 80135f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80135f4:	f7f5 f9c8 	bl	8008988 <__aeabi_dcmpgt>
 80135f8:	2800      	cmp	r0, #0
 80135fa:	d174      	bne.n	80136e6 <_dtoa_r+0x69e>
 80135fc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8013600:	2000      	movs	r0, #0
 8013602:	4914      	ldr	r1, [pc, #80]	; (8013654 <_dtoa_r+0x60c>)
 8013604:	f7f4 fd78 	bl	80080f8 <__aeabi_dsub>
 8013608:	4602      	mov	r2, r0
 801360a:	460b      	mov	r3, r1
 801360c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013610:	f7f5 f99c 	bl	800894c <__aeabi_dcmplt>
 8013614:	2800      	cmp	r0, #0
 8013616:	f43f af30 	beq.w	801347a <_dtoa_r+0x432>
 801361a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801361e:	2b30      	cmp	r3, #48	; 0x30
 8013620:	f105 32ff 	add.w	r2, r5, #4294967295
 8013624:	d002      	beq.n	801362c <_dtoa_r+0x5e4>
 8013626:	f8dd a020 	ldr.w	sl, [sp, #32]
 801362a:	e04a      	b.n	80136c2 <_dtoa_r+0x67a>
 801362c:	4615      	mov	r5, r2
 801362e:	e7f4      	b.n	801361a <_dtoa_r+0x5d2>
 8013630:	4b05      	ldr	r3, [pc, #20]	; (8013648 <_dtoa_r+0x600>)
 8013632:	f7f4 ff19 	bl	8008468 <__aeabi_dmul>
 8013636:	e9cd 0100 	strd	r0, r1, [sp]
 801363a:	e7bc      	b.n	80135b6 <_dtoa_r+0x56e>
 801363c:	08028898 	.word	0x08028898
 8013640:	08028870 	.word	0x08028870
 8013644:	3ff00000 	.word	0x3ff00000
 8013648:	40240000 	.word	0x40240000
 801364c:	401c0000 	.word	0x401c0000
 8013650:	40140000 	.word	0x40140000
 8013654:	3fe00000 	.word	0x3fe00000
 8013658:	e9dd 6700 	ldrd	r6, r7, [sp]
 801365c:	465d      	mov	r5, fp
 801365e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013662:	4630      	mov	r0, r6
 8013664:	4639      	mov	r1, r7
 8013666:	f7f5 f829 	bl	80086bc <__aeabi_ddiv>
 801366a:	f7f5 f9ad 	bl	80089c8 <__aeabi_d2iz>
 801366e:	4680      	mov	r8, r0
 8013670:	f7f4 fe90 	bl	8008394 <__aeabi_i2d>
 8013674:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013678:	f7f4 fef6 	bl	8008468 <__aeabi_dmul>
 801367c:	4602      	mov	r2, r0
 801367e:	460b      	mov	r3, r1
 8013680:	4630      	mov	r0, r6
 8013682:	4639      	mov	r1, r7
 8013684:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8013688:	f7f4 fd36 	bl	80080f8 <__aeabi_dsub>
 801368c:	f805 6b01 	strb.w	r6, [r5], #1
 8013690:	eba5 060b 	sub.w	r6, r5, fp
 8013694:	45b1      	cmp	r9, r6
 8013696:	4602      	mov	r2, r0
 8013698:	460b      	mov	r3, r1
 801369a:	d139      	bne.n	8013710 <_dtoa_r+0x6c8>
 801369c:	f7f4 fd2e 	bl	80080fc <__adddf3>
 80136a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80136a4:	4606      	mov	r6, r0
 80136a6:	460f      	mov	r7, r1
 80136a8:	f7f5 f96e 	bl	8008988 <__aeabi_dcmpgt>
 80136ac:	b9c8      	cbnz	r0, 80136e2 <_dtoa_r+0x69a>
 80136ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80136b2:	4630      	mov	r0, r6
 80136b4:	4639      	mov	r1, r7
 80136b6:	f7f5 f93f 	bl	8008938 <__aeabi_dcmpeq>
 80136ba:	b110      	cbz	r0, 80136c2 <_dtoa_r+0x67a>
 80136bc:	f018 0f01 	tst.w	r8, #1
 80136c0:	d10f      	bne.n	80136e2 <_dtoa_r+0x69a>
 80136c2:	9904      	ldr	r1, [sp, #16]
 80136c4:	4620      	mov	r0, r4
 80136c6:	f000 fc9f 	bl	8014008 <_Bfree>
 80136ca:	2300      	movs	r3, #0
 80136cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80136ce:	702b      	strb	r3, [r5, #0]
 80136d0:	f10a 0301 	add.w	r3, sl, #1
 80136d4:	6013      	str	r3, [r2, #0]
 80136d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80136d8:	2b00      	cmp	r3, #0
 80136da:	f000 8241 	beq.w	8013b60 <_dtoa_r+0xb18>
 80136de:	601d      	str	r5, [r3, #0]
 80136e0:	e23e      	b.n	8013b60 <_dtoa_r+0xb18>
 80136e2:	f8cd a020 	str.w	sl, [sp, #32]
 80136e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80136ea:	2a39      	cmp	r2, #57	; 0x39
 80136ec:	f105 33ff 	add.w	r3, r5, #4294967295
 80136f0:	d108      	bne.n	8013704 <_dtoa_r+0x6bc>
 80136f2:	459b      	cmp	fp, r3
 80136f4:	d10a      	bne.n	801370c <_dtoa_r+0x6c4>
 80136f6:	9b08      	ldr	r3, [sp, #32]
 80136f8:	3301      	adds	r3, #1
 80136fa:	9308      	str	r3, [sp, #32]
 80136fc:	2330      	movs	r3, #48	; 0x30
 80136fe:	f88b 3000 	strb.w	r3, [fp]
 8013702:	465b      	mov	r3, fp
 8013704:	781a      	ldrb	r2, [r3, #0]
 8013706:	3201      	adds	r2, #1
 8013708:	701a      	strb	r2, [r3, #0]
 801370a:	e78c      	b.n	8013626 <_dtoa_r+0x5de>
 801370c:	461d      	mov	r5, r3
 801370e:	e7ea      	b.n	80136e6 <_dtoa_r+0x69e>
 8013710:	2200      	movs	r2, #0
 8013712:	4b9b      	ldr	r3, [pc, #620]	; (8013980 <_dtoa_r+0x938>)
 8013714:	f7f4 fea8 	bl	8008468 <__aeabi_dmul>
 8013718:	2200      	movs	r2, #0
 801371a:	2300      	movs	r3, #0
 801371c:	4606      	mov	r6, r0
 801371e:	460f      	mov	r7, r1
 8013720:	f7f5 f90a 	bl	8008938 <__aeabi_dcmpeq>
 8013724:	2800      	cmp	r0, #0
 8013726:	d09a      	beq.n	801365e <_dtoa_r+0x616>
 8013728:	e7cb      	b.n	80136c2 <_dtoa_r+0x67a>
 801372a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801372c:	2a00      	cmp	r2, #0
 801372e:	f000 808b 	beq.w	8013848 <_dtoa_r+0x800>
 8013732:	9a06      	ldr	r2, [sp, #24]
 8013734:	2a01      	cmp	r2, #1
 8013736:	dc6e      	bgt.n	8013816 <_dtoa_r+0x7ce>
 8013738:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801373a:	2a00      	cmp	r2, #0
 801373c:	d067      	beq.n	801380e <_dtoa_r+0x7c6>
 801373e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013742:	9f07      	ldr	r7, [sp, #28]
 8013744:	9d05      	ldr	r5, [sp, #20]
 8013746:	9a05      	ldr	r2, [sp, #20]
 8013748:	2101      	movs	r1, #1
 801374a:	441a      	add	r2, r3
 801374c:	4620      	mov	r0, r4
 801374e:	9205      	str	r2, [sp, #20]
 8013750:	4498      	add	r8, r3
 8013752:	f000 fcf9 	bl	8014148 <__i2b>
 8013756:	4606      	mov	r6, r0
 8013758:	2d00      	cmp	r5, #0
 801375a:	dd0c      	ble.n	8013776 <_dtoa_r+0x72e>
 801375c:	f1b8 0f00 	cmp.w	r8, #0
 8013760:	dd09      	ble.n	8013776 <_dtoa_r+0x72e>
 8013762:	4545      	cmp	r5, r8
 8013764:	9a05      	ldr	r2, [sp, #20]
 8013766:	462b      	mov	r3, r5
 8013768:	bfa8      	it	ge
 801376a:	4643      	movge	r3, r8
 801376c:	1ad2      	subs	r2, r2, r3
 801376e:	9205      	str	r2, [sp, #20]
 8013770:	1aed      	subs	r5, r5, r3
 8013772:	eba8 0803 	sub.w	r8, r8, r3
 8013776:	9b07      	ldr	r3, [sp, #28]
 8013778:	b1eb      	cbz	r3, 80137b6 <_dtoa_r+0x76e>
 801377a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801377c:	2b00      	cmp	r3, #0
 801377e:	d067      	beq.n	8013850 <_dtoa_r+0x808>
 8013780:	b18f      	cbz	r7, 80137a6 <_dtoa_r+0x75e>
 8013782:	4631      	mov	r1, r6
 8013784:	463a      	mov	r2, r7
 8013786:	4620      	mov	r0, r4
 8013788:	f000 fd7e 	bl	8014288 <__pow5mult>
 801378c:	9a04      	ldr	r2, [sp, #16]
 801378e:	4601      	mov	r1, r0
 8013790:	4606      	mov	r6, r0
 8013792:	4620      	mov	r0, r4
 8013794:	f000 fce1 	bl	801415a <__multiply>
 8013798:	9904      	ldr	r1, [sp, #16]
 801379a:	9008      	str	r0, [sp, #32]
 801379c:	4620      	mov	r0, r4
 801379e:	f000 fc33 	bl	8014008 <_Bfree>
 80137a2:	9b08      	ldr	r3, [sp, #32]
 80137a4:	9304      	str	r3, [sp, #16]
 80137a6:	9b07      	ldr	r3, [sp, #28]
 80137a8:	1bda      	subs	r2, r3, r7
 80137aa:	d004      	beq.n	80137b6 <_dtoa_r+0x76e>
 80137ac:	9904      	ldr	r1, [sp, #16]
 80137ae:	4620      	mov	r0, r4
 80137b0:	f000 fd6a 	bl	8014288 <__pow5mult>
 80137b4:	9004      	str	r0, [sp, #16]
 80137b6:	2101      	movs	r1, #1
 80137b8:	4620      	mov	r0, r4
 80137ba:	f000 fcc5 	bl	8014148 <__i2b>
 80137be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80137c0:	4607      	mov	r7, r0
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	f000 81d0 	beq.w	8013b68 <_dtoa_r+0xb20>
 80137c8:	461a      	mov	r2, r3
 80137ca:	4601      	mov	r1, r0
 80137cc:	4620      	mov	r0, r4
 80137ce:	f000 fd5b 	bl	8014288 <__pow5mult>
 80137d2:	9b06      	ldr	r3, [sp, #24]
 80137d4:	2b01      	cmp	r3, #1
 80137d6:	4607      	mov	r7, r0
 80137d8:	dc40      	bgt.n	801385c <_dtoa_r+0x814>
 80137da:	9b00      	ldr	r3, [sp, #0]
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d139      	bne.n	8013854 <_dtoa_r+0x80c>
 80137e0:	9b01      	ldr	r3, [sp, #4]
 80137e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d136      	bne.n	8013858 <_dtoa_r+0x810>
 80137ea:	9b01      	ldr	r3, [sp, #4]
 80137ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80137f0:	0d1b      	lsrs	r3, r3, #20
 80137f2:	051b      	lsls	r3, r3, #20
 80137f4:	b12b      	cbz	r3, 8013802 <_dtoa_r+0x7ba>
 80137f6:	9b05      	ldr	r3, [sp, #20]
 80137f8:	3301      	adds	r3, #1
 80137fa:	9305      	str	r3, [sp, #20]
 80137fc:	f108 0801 	add.w	r8, r8, #1
 8013800:	2301      	movs	r3, #1
 8013802:	9307      	str	r3, [sp, #28]
 8013804:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013806:	2b00      	cmp	r3, #0
 8013808:	d12a      	bne.n	8013860 <_dtoa_r+0x818>
 801380a:	2001      	movs	r0, #1
 801380c:	e030      	b.n	8013870 <_dtoa_r+0x828>
 801380e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013810:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8013814:	e795      	b.n	8013742 <_dtoa_r+0x6fa>
 8013816:	9b07      	ldr	r3, [sp, #28]
 8013818:	f109 37ff 	add.w	r7, r9, #4294967295
 801381c:	42bb      	cmp	r3, r7
 801381e:	bfbf      	itttt	lt
 8013820:	9b07      	ldrlt	r3, [sp, #28]
 8013822:	9707      	strlt	r7, [sp, #28]
 8013824:	1afa      	sublt	r2, r7, r3
 8013826:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8013828:	bfbb      	ittet	lt
 801382a:	189b      	addlt	r3, r3, r2
 801382c:	930e      	strlt	r3, [sp, #56]	; 0x38
 801382e:	1bdf      	subge	r7, r3, r7
 8013830:	2700      	movlt	r7, #0
 8013832:	f1b9 0f00 	cmp.w	r9, #0
 8013836:	bfb5      	itete	lt
 8013838:	9b05      	ldrlt	r3, [sp, #20]
 801383a:	9d05      	ldrge	r5, [sp, #20]
 801383c:	eba3 0509 	sublt.w	r5, r3, r9
 8013840:	464b      	movge	r3, r9
 8013842:	bfb8      	it	lt
 8013844:	2300      	movlt	r3, #0
 8013846:	e77e      	b.n	8013746 <_dtoa_r+0x6fe>
 8013848:	9f07      	ldr	r7, [sp, #28]
 801384a:	9d05      	ldr	r5, [sp, #20]
 801384c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 801384e:	e783      	b.n	8013758 <_dtoa_r+0x710>
 8013850:	9a07      	ldr	r2, [sp, #28]
 8013852:	e7ab      	b.n	80137ac <_dtoa_r+0x764>
 8013854:	2300      	movs	r3, #0
 8013856:	e7d4      	b.n	8013802 <_dtoa_r+0x7ba>
 8013858:	9b00      	ldr	r3, [sp, #0]
 801385a:	e7d2      	b.n	8013802 <_dtoa_r+0x7ba>
 801385c:	2300      	movs	r3, #0
 801385e:	9307      	str	r3, [sp, #28]
 8013860:	693b      	ldr	r3, [r7, #16]
 8013862:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8013866:	6918      	ldr	r0, [r3, #16]
 8013868:	f000 fc20 	bl	80140ac <__hi0bits>
 801386c:	f1c0 0020 	rsb	r0, r0, #32
 8013870:	4440      	add	r0, r8
 8013872:	f010 001f 	ands.w	r0, r0, #31
 8013876:	d047      	beq.n	8013908 <_dtoa_r+0x8c0>
 8013878:	f1c0 0320 	rsb	r3, r0, #32
 801387c:	2b04      	cmp	r3, #4
 801387e:	dd3b      	ble.n	80138f8 <_dtoa_r+0x8b0>
 8013880:	9b05      	ldr	r3, [sp, #20]
 8013882:	f1c0 001c 	rsb	r0, r0, #28
 8013886:	4403      	add	r3, r0
 8013888:	9305      	str	r3, [sp, #20]
 801388a:	4405      	add	r5, r0
 801388c:	4480      	add	r8, r0
 801388e:	9b05      	ldr	r3, [sp, #20]
 8013890:	2b00      	cmp	r3, #0
 8013892:	dd05      	ble.n	80138a0 <_dtoa_r+0x858>
 8013894:	461a      	mov	r2, r3
 8013896:	9904      	ldr	r1, [sp, #16]
 8013898:	4620      	mov	r0, r4
 801389a:	f000 fd43 	bl	8014324 <__lshift>
 801389e:	9004      	str	r0, [sp, #16]
 80138a0:	f1b8 0f00 	cmp.w	r8, #0
 80138a4:	dd05      	ble.n	80138b2 <_dtoa_r+0x86a>
 80138a6:	4639      	mov	r1, r7
 80138a8:	4642      	mov	r2, r8
 80138aa:	4620      	mov	r0, r4
 80138ac:	f000 fd3a 	bl	8014324 <__lshift>
 80138b0:	4607      	mov	r7, r0
 80138b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80138b4:	b353      	cbz	r3, 801390c <_dtoa_r+0x8c4>
 80138b6:	4639      	mov	r1, r7
 80138b8:	9804      	ldr	r0, [sp, #16]
 80138ba:	f000 fd87 	bl	80143cc <__mcmp>
 80138be:	2800      	cmp	r0, #0
 80138c0:	da24      	bge.n	801390c <_dtoa_r+0x8c4>
 80138c2:	2300      	movs	r3, #0
 80138c4:	220a      	movs	r2, #10
 80138c6:	9904      	ldr	r1, [sp, #16]
 80138c8:	4620      	mov	r0, r4
 80138ca:	f000 fbb4 	bl	8014036 <__multadd>
 80138ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80138d0:	9004      	str	r0, [sp, #16]
 80138d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	f000 814d 	beq.w	8013b76 <_dtoa_r+0xb2e>
 80138dc:	2300      	movs	r3, #0
 80138de:	4631      	mov	r1, r6
 80138e0:	220a      	movs	r2, #10
 80138e2:	4620      	mov	r0, r4
 80138e4:	f000 fba7 	bl	8014036 <__multadd>
 80138e8:	9b02      	ldr	r3, [sp, #8]
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	4606      	mov	r6, r0
 80138ee:	dc4f      	bgt.n	8013990 <_dtoa_r+0x948>
 80138f0:	9b06      	ldr	r3, [sp, #24]
 80138f2:	2b02      	cmp	r3, #2
 80138f4:	dd4c      	ble.n	8013990 <_dtoa_r+0x948>
 80138f6:	e011      	b.n	801391c <_dtoa_r+0x8d4>
 80138f8:	d0c9      	beq.n	801388e <_dtoa_r+0x846>
 80138fa:	9a05      	ldr	r2, [sp, #20]
 80138fc:	331c      	adds	r3, #28
 80138fe:	441a      	add	r2, r3
 8013900:	9205      	str	r2, [sp, #20]
 8013902:	441d      	add	r5, r3
 8013904:	4498      	add	r8, r3
 8013906:	e7c2      	b.n	801388e <_dtoa_r+0x846>
 8013908:	4603      	mov	r3, r0
 801390a:	e7f6      	b.n	80138fa <_dtoa_r+0x8b2>
 801390c:	f1b9 0f00 	cmp.w	r9, #0
 8013910:	dc38      	bgt.n	8013984 <_dtoa_r+0x93c>
 8013912:	9b06      	ldr	r3, [sp, #24]
 8013914:	2b02      	cmp	r3, #2
 8013916:	dd35      	ble.n	8013984 <_dtoa_r+0x93c>
 8013918:	f8cd 9008 	str.w	r9, [sp, #8]
 801391c:	9b02      	ldr	r3, [sp, #8]
 801391e:	b963      	cbnz	r3, 801393a <_dtoa_r+0x8f2>
 8013920:	4639      	mov	r1, r7
 8013922:	2205      	movs	r2, #5
 8013924:	4620      	mov	r0, r4
 8013926:	f000 fb86 	bl	8014036 <__multadd>
 801392a:	4601      	mov	r1, r0
 801392c:	4607      	mov	r7, r0
 801392e:	9804      	ldr	r0, [sp, #16]
 8013930:	f000 fd4c 	bl	80143cc <__mcmp>
 8013934:	2800      	cmp	r0, #0
 8013936:	f73f adcc 	bgt.w	80134d2 <_dtoa_r+0x48a>
 801393a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801393c:	465d      	mov	r5, fp
 801393e:	ea6f 0a03 	mvn.w	sl, r3
 8013942:	f04f 0900 	mov.w	r9, #0
 8013946:	4639      	mov	r1, r7
 8013948:	4620      	mov	r0, r4
 801394a:	f000 fb5d 	bl	8014008 <_Bfree>
 801394e:	2e00      	cmp	r6, #0
 8013950:	f43f aeb7 	beq.w	80136c2 <_dtoa_r+0x67a>
 8013954:	f1b9 0f00 	cmp.w	r9, #0
 8013958:	d005      	beq.n	8013966 <_dtoa_r+0x91e>
 801395a:	45b1      	cmp	r9, r6
 801395c:	d003      	beq.n	8013966 <_dtoa_r+0x91e>
 801395e:	4649      	mov	r1, r9
 8013960:	4620      	mov	r0, r4
 8013962:	f000 fb51 	bl	8014008 <_Bfree>
 8013966:	4631      	mov	r1, r6
 8013968:	4620      	mov	r0, r4
 801396a:	f000 fb4d 	bl	8014008 <_Bfree>
 801396e:	e6a8      	b.n	80136c2 <_dtoa_r+0x67a>
 8013970:	2700      	movs	r7, #0
 8013972:	463e      	mov	r6, r7
 8013974:	e7e1      	b.n	801393a <_dtoa_r+0x8f2>
 8013976:	f8dd a020 	ldr.w	sl, [sp, #32]
 801397a:	463e      	mov	r6, r7
 801397c:	e5a9      	b.n	80134d2 <_dtoa_r+0x48a>
 801397e:	bf00      	nop
 8013980:	40240000 	.word	0x40240000
 8013984:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013986:	f8cd 9008 	str.w	r9, [sp, #8]
 801398a:	2b00      	cmp	r3, #0
 801398c:	f000 80fa 	beq.w	8013b84 <_dtoa_r+0xb3c>
 8013990:	2d00      	cmp	r5, #0
 8013992:	dd05      	ble.n	80139a0 <_dtoa_r+0x958>
 8013994:	4631      	mov	r1, r6
 8013996:	462a      	mov	r2, r5
 8013998:	4620      	mov	r0, r4
 801399a:	f000 fcc3 	bl	8014324 <__lshift>
 801399e:	4606      	mov	r6, r0
 80139a0:	9b07      	ldr	r3, [sp, #28]
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d04c      	beq.n	8013a40 <_dtoa_r+0x9f8>
 80139a6:	6871      	ldr	r1, [r6, #4]
 80139a8:	4620      	mov	r0, r4
 80139aa:	f000 faf9 	bl	8013fa0 <_Balloc>
 80139ae:	6932      	ldr	r2, [r6, #16]
 80139b0:	3202      	adds	r2, #2
 80139b2:	4605      	mov	r5, r0
 80139b4:	0092      	lsls	r2, r2, #2
 80139b6:	f106 010c 	add.w	r1, r6, #12
 80139ba:	300c      	adds	r0, #12
 80139bc:	f7fe fd0a 	bl	80123d4 <memcpy>
 80139c0:	2201      	movs	r2, #1
 80139c2:	4629      	mov	r1, r5
 80139c4:	4620      	mov	r0, r4
 80139c6:	f000 fcad 	bl	8014324 <__lshift>
 80139ca:	9b00      	ldr	r3, [sp, #0]
 80139cc:	f8cd b014 	str.w	fp, [sp, #20]
 80139d0:	f003 0301 	and.w	r3, r3, #1
 80139d4:	46b1      	mov	r9, r6
 80139d6:	9307      	str	r3, [sp, #28]
 80139d8:	4606      	mov	r6, r0
 80139da:	4639      	mov	r1, r7
 80139dc:	9804      	ldr	r0, [sp, #16]
 80139de:	f7ff faa5 	bl	8012f2c <quorem>
 80139e2:	4649      	mov	r1, r9
 80139e4:	4605      	mov	r5, r0
 80139e6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80139ea:	9804      	ldr	r0, [sp, #16]
 80139ec:	f000 fcee 	bl	80143cc <__mcmp>
 80139f0:	4632      	mov	r2, r6
 80139f2:	9000      	str	r0, [sp, #0]
 80139f4:	4639      	mov	r1, r7
 80139f6:	4620      	mov	r0, r4
 80139f8:	f000 fd02 	bl	8014400 <__mdiff>
 80139fc:	68c3      	ldr	r3, [r0, #12]
 80139fe:	4602      	mov	r2, r0
 8013a00:	bb03      	cbnz	r3, 8013a44 <_dtoa_r+0x9fc>
 8013a02:	4601      	mov	r1, r0
 8013a04:	9008      	str	r0, [sp, #32]
 8013a06:	9804      	ldr	r0, [sp, #16]
 8013a08:	f000 fce0 	bl	80143cc <__mcmp>
 8013a0c:	9a08      	ldr	r2, [sp, #32]
 8013a0e:	4603      	mov	r3, r0
 8013a10:	4611      	mov	r1, r2
 8013a12:	4620      	mov	r0, r4
 8013a14:	9308      	str	r3, [sp, #32]
 8013a16:	f000 faf7 	bl	8014008 <_Bfree>
 8013a1a:	9b08      	ldr	r3, [sp, #32]
 8013a1c:	b9a3      	cbnz	r3, 8013a48 <_dtoa_r+0xa00>
 8013a1e:	9a06      	ldr	r2, [sp, #24]
 8013a20:	b992      	cbnz	r2, 8013a48 <_dtoa_r+0xa00>
 8013a22:	9a07      	ldr	r2, [sp, #28]
 8013a24:	b982      	cbnz	r2, 8013a48 <_dtoa_r+0xa00>
 8013a26:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8013a2a:	d029      	beq.n	8013a80 <_dtoa_r+0xa38>
 8013a2c:	9b00      	ldr	r3, [sp, #0]
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	dd01      	ble.n	8013a36 <_dtoa_r+0x9ee>
 8013a32:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8013a36:	9b05      	ldr	r3, [sp, #20]
 8013a38:	1c5d      	adds	r5, r3, #1
 8013a3a:	f883 8000 	strb.w	r8, [r3]
 8013a3e:	e782      	b.n	8013946 <_dtoa_r+0x8fe>
 8013a40:	4630      	mov	r0, r6
 8013a42:	e7c2      	b.n	80139ca <_dtoa_r+0x982>
 8013a44:	2301      	movs	r3, #1
 8013a46:	e7e3      	b.n	8013a10 <_dtoa_r+0x9c8>
 8013a48:	9a00      	ldr	r2, [sp, #0]
 8013a4a:	2a00      	cmp	r2, #0
 8013a4c:	db04      	blt.n	8013a58 <_dtoa_r+0xa10>
 8013a4e:	d125      	bne.n	8013a9c <_dtoa_r+0xa54>
 8013a50:	9a06      	ldr	r2, [sp, #24]
 8013a52:	bb1a      	cbnz	r2, 8013a9c <_dtoa_r+0xa54>
 8013a54:	9a07      	ldr	r2, [sp, #28]
 8013a56:	bb0a      	cbnz	r2, 8013a9c <_dtoa_r+0xa54>
 8013a58:	2b00      	cmp	r3, #0
 8013a5a:	ddec      	ble.n	8013a36 <_dtoa_r+0x9ee>
 8013a5c:	2201      	movs	r2, #1
 8013a5e:	9904      	ldr	r1, [sp, #16]
 8013a60:	4620      	mov	r0, r4
 8013a62:	f000 fc5f 	bl	8014324 <__lshift>
 8013a66:	4639      	mov	r1, r7
 8013a68:	9004      	str	r0, [sp, #16]
 8013a6a:	f000 fcaf 	bl	80143cc <__mcmp>
 8013a6e:	2800      	cmp	r0, #0
 8013a70:	dc03      	bgt.n	8013a7a <_dtoa_r+0xa32>
 8013a72:	d1e0      	bne.n	8013a36 <_dtoa_r+0x9ee>
 8013a74:	f018 0f01 	tst.w	r8, #1
 8013a78:	d0dd      	beq.n	8013a36 <_dtoa_r+0x9ee>
 8013a7a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8013a7e:	d1d8      	bne.n	8013a32 <_dtoa_r+0x9ea>
 8013a80:	9b05      	ldr	r3, [sp, #20]
 8013a82:	9a05      	ldr	r2, [sp, #20]
 8013a84:	1c5d      	adds	r5, r3, #1
 8013a86:	2339      	movs	r3, #57	; 0x39
 8013a88:	7013      	strb	r3, [r2, #0]
 8013a8a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013a8e:	2b39      	cmp	r3, #57	; 0x39
 8013a90:	f105 32ff 	add.w	r2, r5, #4294967295
 8013a94:	d04f      	beq.n	8013b36 <_dtoa_r+0xaee>
 8013a96:	3301      	adds	r3, #1
 8013a98:	7013      	strb	r3, [r2, #0]
 8013a9a:	e754      	b.n	8013946 <_dtoa_r+0x8fe>
 8013a9c:	9a05      	ldr	r2, [sp, #20]
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	f102 0501 	add.w	r5, r2, #1
 8013aa4:	dd06      	ble.n	8013ab4 <_dtoa_r+0xa6c>
 8013aa6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8013aaa:	d0e9      	beq.n	8013a80 <_dtoa_r+0xa38>
 8013aac:	f108 0801 	add.w	r8, r8, #1
 8013ab0:	9b05      	ldr	r3, [sp, #20]
 8013ab2:	e7c2      	b.n	8013a3a <_dtoa_r+0x9f2>
 8013ab4:	9a02      	ldr	r2, [sp, #8]
 8013ab6:	f805 8c01 	strb.w	r8, [r5, #-1]
 8013aba:	eba5 030b 	sub.w	r3, r5, fp
 8013abe:	4293      	cmp	r3, r2
 8013ac0:	d021      	beq.n	8013b06 <_dtoa_r+0xabe>
 8013ac2:	2300      	movs	r3, #0
 8013ac4:	220a      	movs	r2, #10
 8013ac6:	9904      	ldr	r1, [sp, #16]
 8013ac8:	4620      	mov	r0, r4
 8013aca:	f000 fab4 	bl	8014036 <__multadd>
 8013ace:	45b1      	cmp	r9, r6
 8013ad0:	9004      	str	r0, [sp, #16]
 8013ad2:	f04f 0300 	mov.w	r3, #0
 8013ad6:	f04f 020a 	mov.w	r2, #10
 8013ada:	4649      	mov	r1, r9
 8013adc:	4620      	mov	r0, r4
 8013ade:	d105      	bne.n	8013aec <_dtoa_r+0xaa4>
 8013ae0:	f000 faa9 	bl	8014036 <__multadd>
 8013ae4:	4681      	mov	r9, r0
 8013ae6:	4606      	mov	r6, r0
 8013ae8:	9505      	str	r5, [sp, #20]
 8013aea:	e776      	b.n	80139da <_dtoa_r+0x992>
 8013aec:	f000 faa3 	bl	8014036 <__multadd>
 8013af0:	4631      	mov	r1, r6
 8013af2:	4681      	mov	r9, r0
 8013af4:	2300      	movs	r3, #0
 8013af6:	220a      	movs	r2, #10
 8013af8:	4620      	mov	r0, r4
 8013afa:	f000 fa9c 	bl	8014036 <__multadd>
 8013afe:	4606      	mov	r6, r0
 8013b00:	e7f2      	b.n	8013ae8 <_dtoa_r+0xaa0>
 8013b02:	f04f 0900 	mov.w	r9, #0
 8013b06:	2201      	movs	r2, #1
 8013b08:	9904      	ldr	r1, [sp, #16]
 8013b0a:	4620      	mov	r0, r4
 8013b0c:	f000 fc0a 	bl	8014324 <__lshift>
 8013b10:	4639      	mov	r1, r7
 8013b12:	9004      	str	r0, [sp, #16]
 8013b14:	f000 fc5a 	bl	80143cc <__mcmp>
 8013b18:	2800      	cmp	r0, #0
 8013b1a:	dcb6      	bgt.n	8013a8a <_dtoa_r+0xa42>
 8013b1c:	d102      	bne.n	8013b24 <_dtoa_r+0xadc>
 8013b1e:	f018 0f01 	tst.w	r8, #1
 8013b22:	d1b2      	bne.n	8013a8a <_dtoa_r+0xa42>
 8013b24:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013b28:	2b30      	cmp	r3, #48	; 0x30
 8013b2a:	f105 32ff 	add.w	r2, r5, #4294967295
 8013b2e:	f47f af0a 	bne.w	8013946 <_dtoa_r+0x8fe>
 8013b32:	4615      	mov	r5, r2
 8013b34:	e7f6      	b.n	8013b24 <_dtoa_r+0xadc>
 8013b36:	4593      	cmp	fp, r2
 8013b38:	d105      	bne.n	8013b46 <_dtoa_r+0xafe>
 8013b3a:	2331      	movs	r3, #49	; 0x31
 8013b3c:	f10a 0a01 	add.w	sl, sl, #1
 8013b40:	f88b 3000 	strb.w	r3, [fp]
 8013b44:	e6ff      	b.n	8013946 <_dtoa_r+0x8fe>
 8013b46:	4615      	mov	r5, r2
 8013b48:	e79f      	b.n	8013a8a <_dtoa_r+0xa42>
 8013b4a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8013bb0 <_dtoa_r+0xb68>
 8013b4e:	e007      	b.n	8013b60 <_dtoa_r+0xb18>
 8013b50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013b52:	f8df b060 	ldr.w	fp, [pc, #96]	; 8013bb4 <_dtoa_r+0xb6c>
 8013b56:	b11b      	cbz	r3, 8013b60 <_dtoa_r+0xb18>
 8013b58:	f10b 0308 	add.w	r3, fp, #8
 8013b5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013b5e:	6013      	str	r3, [r2, #0]
 8013b60:	4658      	mov	r0, fp
 8013b62:	b017      	add	sp, #92	; 0x5c
 8013b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b68:	9b06      	ldr	r3, [sp, #24]
 8013b6a:	2b01      	cmp	r3, #1
 8013b6c:	f77f ae35 	ble.w	80137da <_dtoa_r+0x792>
 8013b70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013b72:	9307      	str	r3, [sp, #28]
 8013b74:	e649      	b.n	801380a <_dtoa_r+0x7c2>
 8013b76:	9b02      	ldr	r3, [sp, #8]
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	dc03      	bgt.n	8013b84 <_dtoa_r+0xb3c>
 8013b7c:	9b06      	ldr	r3, [sp, #24]
 8013b7e:	2b02      	cmp	r3, #2
 8013b80:	f73f aecc 	bgt.w	801391c <_dtoa_r+0x8d4>
 8013b84:	465d      	mov	r5, fp
 8013b86:	4639      	mov	r1, r7
 8013b88:	9804      	ldr	r0, [sp, #16]
 8013b8a:	f7ff f9cf 	bl	8012f2c <quorem>
 8013b8e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8013b92:	f805 8b01 	strb.w	r8, [r5], #1
 8013b96:	9a02      	ldr	r2, [sp, #8]
 8013b98:	eba5 030b 	sub.w	r3, r5, fp
 8013b9c:	429a      	cmp	r2, r3
 8013b9e:	ddb0      	ble.n	8013b02 <_dtoa_r+0xaba>
 8013ba0:	2300      	movs	r3, #0
 8013ba2:	220a      	movs	r2, #10
 8013ba4:	9904      	ldr	r1, [sp, #16]
 8013ba6:	4620      	mov	r0, r4
 8013ba8:	f000 fa45 	bl	8014036 <__multadd>
 8013bac:	9004      	str	r0, [sp, #16]
 8013bae:	e7ea      	b.n	8013b86 <_dtoa_r+0xb3e>
 8013bb0:	080287dc 	.word	0x080287dc
 8013bb4:	08028800 	.word	0x08028800

08013bb8 <__sflush_r>:
 8013bb8:	898a      	ldrh	r2, [r1, #12]
 8013bba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bbe:	4605      	mov	r5, r0
 8013bc0:	0710      	lsls	r0, r2, #28
 8013bc2:	460c      	mov	r4, r1
 8013bc4:	d458      	bmi.n	8013c78 <__sflush_r+0xc0>
 8013bc6:	684b      	ldr	r3, [r1, #4]
 8013bc8:	2b00      	cmp	r3, #0
 8013bca:	dc05      	bgt.n	8013bd8 <__sflush_r+0x20>
 8013bcc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	dc02      	bgt.n	8013bd8 <__sflush_r+0x20>
 8013bd2:	2000      	movs	r0, #0
 8013bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013bda:	2e00      	cmp	r6, #0
 8013bdc:	d0f9      	beq.n	8013bd2 <__sflush_r+0x1a>
 8013bde:	2300      	movs	r3, #0
 8013be0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013be4:	682f      	ldr	r7, [r5, #0]
 8013be6:	6a21      	ldr	r1, [r4, #32]
 8013be8:	602b      	str	r3, [r5, #0]
 8013bea:	d032      	beq.n	8013c52 <__sflush_r+0x9a>
 8013bec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013bee:	89a3      	ldrh	r3, [r4, #12]
 8013bf0:	075a      	lsls	r2, r3, #29
 8013bf2:	d505      	bpl.n	8013c00 <__sflush_r+0x48>
 8013bf4:	6863      	ldr	r3, [r4, #4]
 8013bf6:	1ac0      	subs	r0, r0, r3
 8013bf8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013bfa:	b10b      	cbz	r3, 8013c00 <__sflush_r+0x48>
 8013bfc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013bfe:	1ac0      	subs	r0, r0, r3
 8013c00:	2300      	movs	r3, #0
 8013c02:	4602      	mov	r2, r0
 8013c04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013c06:	6a21      	ldr	r1, [r4, #32]
 8013c08:	4628      	mov	r0, r5
 8013c0a:	47b0      	blx	r6
 8013c0c:	1c43      	adds	r3, r0, #1
 8013c0e:	89a3      	ldrh	r3, [r4, #12]
 8013c10:	d106      	bne.n	8013c20 <__sflush_r+0x68>
 8013c12:	6829      	ldr	r1, [r5, #0]
 8013c14:	291d      	cmp	r1, #29
 8013c16:	d848      	bhi.n	8013caa <__sflush_r+0xf2>
 8013c18:	4a29      	ldr	r2, [pc, #164]	; (8013cc0 <__sflush_r+0x108>)
 8013c1a:	40ca      	lsrs	r2, r1
 8013c1c:	07d6      	lsls	r6, r2, #31
 8013c1e:	d544      	bpl.n	8013caa <__sflush_r+0xf2>
 8013c20:	2200      	movs	r2, #0
 8013c22:	6062      	str	r2, [r4, #4]
 8013c24:	04d9      	lsls	r1, r3, #19
 8013c26:	6922      	ldr	r2, [r4, #16]
 8013c28:	6022      	str	r2, [r4, #0]
 8013c2a:	d504      	bpl.n	8013c36 <__sflush_r+0x7e>
 8013c2c:	1c42      	adds	r2, r0, #1
 8013c2e:	d101      	bne.n	8013c34 <__sflush_r+0x7c>
 8013c30:	682b      	ldr	r3, [r5, #0]
 8013c32:	b903      	cbnz	r3, 8013c36 <__sflush_r+0x7e>
 8013c34:	6560      	str	r0, [r4, #84]	; 0x54
 8013c36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013c38:	602f      	str	r7, [r5, #0]
 8013c3a:	2900      	cmp	r1, #0
 8013c3c:	d0c9      	beq.n	8013bd2 <__sflush_r+0x1a>
 8013c3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013c42:	4299      	cmp	r1, r3
 8013c44:	d002      	beq.n	8013c4c <__sflush_r+0x94>
 8013c46:	4628      	mov	r0, r5
 8013c48:	f000 fc94 	bl	8014574 <_free_r>
 8013c4c:	2000      	movs	r0, #0
 8013c4e:	6360      	str	r0, [r4, #52]	; 0x34
 8013c50:	e7c0      	b.n	8013bd4 <__sflush_r+0x1c>
 8013c52:	2301      	movs	r3, #1
 8013c54:	4628      	mov	r0, r5
 8013c56:	47b0      	blx	r6
 8013c58:	1c41      	adds	r1, r0, #1
 8013c5a:	d1c8      	bne.n	8013bee <__sflush_r+0x36>
 8013c5c:	682b      	ldr	r3, [r5, #0]
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d0c5      	beq.n	8013bee <__sflush_r+0x36>
 8013c62:	2b1d      	cmp	r3, #29
 8013c64:	d001      	beq.n	8013c6a <__sflush_r+0xb2>
 8013c66:	2b16      	cmp	r3, #22
 8013c68:	d101      	bne.n	8013c6e <__sflush_r+0xb6>
 8013c6a:	602f      	str	r7, [r5, #0]
 8013c6c:	e7b1      	b.n	8013bd2 <__sflush_r+0x1a>
 8013c6e:	89a3      	ldrh	r3, [r4, #12]
 8013c70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013c74:	81a3      	strh	r3, [r4, #12]
 8013c76:	e7ad      	b.n	8013bd4 <__sflush_r+0x1c>
 8013c78:	690f      	ldr	r7, [r1, #16]
 8013c7a:	2f00      	cmp	r7, #0
 8013c7c:	d0a9      	beq.n	8013bd2 <__sflush_r+0x1a>
 8013c7e:	0793      	lsls	r3, r2, #30
 8013c80:	680e      	ldr	r6, [r1, #0]
 8013c82:	bf08      	it	eq
 8013c84:	694b      	ldreq	r3, [r1, #20]
 8013c86:	600f      	str	r7, [r1, #0]
 8013c88:	bf18      	it	ne
 8013c8a:	2300      	movne	r3, #0
 8013c8c:	eba6 0807 	sub.w	r8, r6, r7
 8013c90:	608b      	str	r3, [r1, #8]
 8013c92:	f1b8 0f00 	cmp.w	r8, #0
 8013c96:	dd9c      	ble.n	8013bd2 <__sflush_r+0x1a>
 8013c98:	4643      	mov	r3, r8
 8013c9a:	463a      	mov	r2, r7
 8013c9c:	6a21      	ldr	r1, [r4, #32]
 8013c9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013ca0:	4628      	mov	r0, r5
 8013ca2:	47b0      	blx	r6
 8013ca4:	2800      	cmp	r0, #0
 8013ca6:	dc06      	bgt.n	8013cb6 <__sflush_r+0xfe>
 8013ca8:	89a3      	ldrh	r3, [r4, #12]
 8013caa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013cae:	81a3      	strh	r3, [r4, #12]
 8013cb0:	f04f 30ff 	mov.w	r0, #4294967295
 8013cb4:	e78e      	b.n	8013bd4 <__sflush_r+0x1c>
 8013cb6:	4407      	add	r7, r0
 8013cb8:	eba8 0800 	sub.w	r8, r8, r0
 8013cbc:	e7e9      	b.n	8013c92 <__sflush_r+0xda>
 8013cbe:	bf00      	nop
 8013cc0:	20400001 	.word	0x20400001

08013cc4 <_fflush_r>:
 8013cc4:	b538      	push	{r3, r4, r5, lr}
 8013cc6:	690b      	ldr	r3, [r1, #16]
 8013cc8:	4605      	mov	r5, r0
 8013cca:	460c      	mov	r4, r1
 8013ccc:	b1db      	cbz	r3, 8013d06 <_fflush_r+0x42>
 8013cce:	b118      	cbz	r0, 8013cd8 <_fflush_r+0x14>
 8013cd0:	6983      	ldr	r3, [r0, #24]
 8013cd2:	b90b      	cbnz	r3, 8013cd8 <_fflush_r+0x14>
 8013cd4:	f000 f860 	bl	8013d98 <__sinit>
 8013cd8:	4b0c      	ldr	r3, [pc, #48]	; (8013d0c <_fflush_r+0x48>)
 8013cda:	429c      	cmp	r4, r3
 8013cdc:	d109      	bne.n	8013cf2 <_fflush_r+0x2e>
 8013cde:	686c      	ldr	r4, [r5, #4]
 8013ce0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013ce4:	b17b      	cbz	r3, 8013d06 <_fflush_r+0x42>
 8013ce6:	4621      	mov	r1, r4
 8013ce8:	4628      	mov	r0, r5
 8013cea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013cee:	f7ff bf63 	b.w	8013bb8 <__sflush_r>
 8013cf2:	4b07      	ldr	r3, [pc, #28]	; (8013d10 <_fflush_r+0x4c>)
 8013cf4:	429c      	cmp	r4, r3
 8013cf6:	d101      	bne.n	8013cfc <_fflush_r+0x38>
 8013cf8:	68ac      	ldr	r4, [r5, #8]
 8013cfa:	e7f1      	b.n	8013ce0 <_fflush_r+0x1c>
 8013cfc:	4b05      	ldr	r3, [pc, #20]	; (8013d14 <_fflush_r+0x50>)
 8013cfe:	429c      	cmp	r4, r3
 8013d00:	bf08      	it	eq
 8013d02:	68ec      	ldreq	r4, [r5, #12]
 8013d04:	e7ec      	b.n	8013ce0 <_fflush_r+0x1c>
 8013d06:	2000      	movs	r0, #0
 8013d08:	bd38      	pop	{r3, r4, r5, pc}
 8013d0a:	bf00      	nop
 8013d0c:	08028830 	.word	0x08028830
 8013d10:	08028850 	.word	0x08028850
 8013d14:	08028810 	.word	0x08028810

08013d18 <std>:
 8013d18:	2300      	movs	r3, #0
 8013d1a:	b510      	push	{r4, lr}
 8013d1c:	4604      	mov	r4, r0
 8013d1e:	e9c0 3300 	strd	r3, r3, [r0]
 8013d22:	6083      	str	r3, [r0, #8]
 8013d24:	8181      	strh	r1, [r0, #12]
 8013d26:	6643      	str	r3, [r0, #100]	; 0x64
 8013d28:	81c2      	strh	r2, [r0, #14]
 8013d2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013d2e:	6183      	str	r3, [r0, #24]
 8013d30:	4619      	mov	r1, r3
 8013d32:	2208      	movs	r2, #8
 8013d34:	305c      	adds	r0, #92	; 0x5c
 8013d36:	f7fe fb58 	bl	80123ea <memset>
 8013d3a:	4b05      	ldr	r3, [pc, #20]	; (8013d50 <std+0x38>)
 8013d3c:	6263      	str	r3, [r4, #36]	; 0x24
 8013d3e:	4b05      	ldr	r3, [pc, #20]	; (8013d54 <std+0x3c>)
 8013d40:	62a3      	str	r3, [r4, #40]	; 0x28
 8013d42:	4b05      	ldr	r3, [pc, #20]	; (8013d58 <std+0x40>)
 8013d44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013d46:	4b05      	ldr	r3, [pc, #20]	; (8013d5c <std+0x44>)
 8013d48:	6224      	str	r4, [r4, #32]
 8013d4a:	6323      	str	r3, [r4, #48]	; 0x30
 8013d4c:	bd10      	pop	{r4, pc}
 8013d4e:	bf00      	nop
 8013d50:	08014965 	.word	0x08014965
 8013d54:	08014987 	.word	0x08014987
 8013d58:	080149bf 	.word	0x080149bf
 8013d5c:	080149e3 	.word	0x080149e3

08013d60 <_cleanup_r>:
 8013d60:	4901      	ldr	r1, [pc, #4]	; (8013d68 <_cleanup_r+0x8>)
 8013d62:	f000 b885 	b.w	8013e70 <_fwalk_reent>
 8013d66:	bf00      	nop
 8013d68:	08013cc5 	.word	0x08013cc5

08013d6c <__sfmoreglue>:
 8013d6c:	b570      	push	{r4, r5, r6, lr}
 8013d6e:	1e4a      	subs	r2, r1, #1
 8013d70:	2568      	movs	r5, #104	; 0x68
 8013d72:	4355      	muls	r5, r2
 8013d74:	460e      	mov	r6, r1
 8013d76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013d7a:	f000 fc49 	bl	8014610 <_malloc_r>
 8013d7e:	4604      	mov	r4, r0
 8013d80:	b140      	cbz	r0, 8013d94 <__sfmoreglue+0x28>
 8013d82:	2100      	movs	r1, #0
 8013d84:	e9c0 1600 	strd	r1, r6, [r0]
 8013d88:	300c      	adds	r0, #12
 8013d8a:	60a0      	str	r0, [r4, #8]
 8013d8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013d90:	f7fe fb2b 	bl	80123ea <memset>
 8013d94:	4620      	mov	r0, r4
 8013d96:	bd70      	pop	{r4, r5, r6, pc}

08013d98 <__sinit>:
 8013d98:	6983      	ldr	r3, [r0, #24]
 8013d9a:	b510      	push	{r4, lr}
 8013d9c:	4604      	mov	r4, r0
 8013d9e:	bb33      	cbnz	r3, 8013dee <__sinit+0x56>
 8013da0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8013da4:	6503      	str	r3, [r0, #80]	; 0x50
 8013da6:	4b12      	ldr	r3, [pc, #72]	; (8013df0 <__sinit+0x58>)
 8013da8:	4a12      	ldr	r2, [pc, #72]	; (8013df4 <__sinit+0x5c>)
 8013daa:	681b      	ldr	r3, [r3, #0]
 8013dac:	6282      	str	r2, [r0, #40]	; 0x28
 8013dae:	4298      	cmp	r0, r3
 8013db0:	bf04      	itt	eq
 8013db2:	2301      	moveq	r3, #1
 8013db4:	6183      	streq	r3, [r0, #24]
 8013db6:	f000 f81f 	bl	8013df8 <__sfp>
 8013dba:	6060      	str	r0, [r4, #4]
 8013dbc:	4620      	mov	r0, r4
 8013dbe:	f000 f81b 	bl	8013df8 <__sfp>
 8013dc2:	60a0      	str	r0, [r4, #8]
 8013dc4:	4620      	mov	r0, r4
 8013dc6:	f000 f817 	bl	8013df8 <__sfp>
 8013dca:	2200      	movs	r2, #0
 8013dcc:	60e0      	str	r0, [r4, #12]
 8013dce:	2104      	movs	r1, #4
 8013dd0:	6860      	ldr	r0, [r4, #4]
 8013dd2:	f7ff ffa1 	bl	8013d18 <std>
 8013dd6:	2201      	movs	r2, #1
 8013dd8:	2109      	movs	r1, #9
 8013dda:	68a0      	ldr	r0, [r4, #8]
 8013ddc:	f7ff ff9c 	bl	8013d18 <std>
 8013de0:	2202      	movs	r2, #2
 8013de2:	2112      	movs	r1, #18
 8013de4:	68e0      	ldr	r0, [r4, #12]
 8013de6:	f7ff ff97 	bl	8013d18 <std>
 8013dea:	2301      	movs	r3, #1
 8013dec:	61a3      	str	r3, [r4, #24]
 8013dee:	bd10      	pop	{r4, pc}
 8013df0:	080287c8 	.word	0x080287c8
 8013df4:	08013d61 	.word	0x08013d61

08013df8 <__sfp>:
 8013df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013dfa:	4b1b      	ldr	r3, [pc, #108]	; (8013e68 <__sfp+0x70>)
 8013dfc:	681e      	ldr	r6, [r3, #0]
 8013dfe:	69b3      	ldr	r3, [r6, #24]
 8013e00:	4607      	mov	r7, r0
 8013e02:	b913      	cbnz	r3, 8013e0a <__sfp+0x12>
 8013e04:	4630      	mov	r0, r6
 8013e06:	f7ff ffc7 	bl	8013d98 <__sinit>
 8013e0a:	3648      	adds	r6, #72	; 0x48
 8013e0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013e10:	3b01      	subs	r3, #1
 8013e12:	d503      	bpl.n	8013e1c <__sfp+0x24>
 8013e14:	6833      	ldr	r3, [r6, #0]
 8013e16:	b133      	cbz	r3, 8013e26 <__sfp+0x2e>
 8013e18:	6836      	ldr	r6, [r6, #0]
 8013e1a:	e7f7      	b.n	8013e0c <__sfp+0x14>
 8013e1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013e20:	b16d      	cbz	r5, 8013e3e <__sfp+0x46>
 8013e22:	3468      	adds	r4, #104	; 0x68
 8013e24:	e7f4      	b.n	8013e10 <__sfp+0x18>
 8013e26:	2104      	movs	r1, #4
 8013e28:	4638      	mov	r0, r7
 8013e2a:	f7ff ff9f 	bl	8013d6c <__sfmoreglue>
 8013e2e:	6030      	str	r0, [r6, #0]
 8013e30:	2800      	cmp	r0, #0
 8013e32:	d1f1      	bne.n	8013e18 <__sfp+0x20>
 8013e34:	230c      	movs	r3, #12
 8013e36:	603b      	str	r3, [r7, #0]
 8013e38:	4604      	mov	r4, r0
 8013e3a:	4620      	mov	r0, r4
 8013e3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e3e:	4b0b      	ldr	r3, [pc, #44]	; (8013e6c <__sfp+0x74>)
 8013e40:	6665      	str	r5, [r4, #100]	; 0x64
 8013e42:	e9c4 5500 	strd	r5, r5, [r4]
 8013e46:	60a5      	str	r5, [r4, #8]
 8013e48:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8013e4c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8013e50:	2208      	movs	r2, #8
 8013e52:	4629      	mov	r1, r5
 8013e54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013e58:	f7fe fac7 	bl	80123ea <memset>
 8013e5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013e60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013e64:	e7e9      	b.n	8013e3a <__sfp+0x42>
 8013e66:	bf00      	nop
 8013e68:	080287c8 	.word	0x080287c8
 8013e6c:	ffff0001 	.word	0xffff0001

08013e70 <_fwalk_reent>:
 8013e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013e74:	4680      	mov	r8, r0
 8013e76:	4689      	mov	r9, r1
 8013e78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013e7c:	2600      	movs	r6, #0
 8013e7e:	b914      	cbnz	r4, 8013e86 <_fwalk_reent+0x16>
 8013e80:	4630      	mov	r0, r6
 8013e82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013e86:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8013e8a:	3f01      	subs	r7, #1
 8013e8c:	d501      	bpl.n	8013e92 <_fwalk_reent+0x22>
 8013e8e:	6824      	ldr	r4, [r4, #0]
 8013e90:	e7f5      	b.n	8013e7e <_fwalk_reent+0xe>
 8013e92:	89ab      	ldrh	r3, [r5, #12]
 8013e94:	2b01      	cmp	r3, #1
 8013e96:	d907      	bls.n	8013ea8 <_fwalk_reent+0x38>
 8013e98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013e9c:	3301      	adds	r3, #1
 8013e9e:	d003      	beq.n	8013ea8 <_fwalk_reent+0x38>
 8013ea0:	4629      	mov	r1, r5
 8013ea2:	4640      	mov	r0, r8
 8013ea4:	47c8      	blx	r9
 8013ea6:	4306      	orrs	r6, r0
 8013ea8:	3568      	adds	r5, #104	; 0x68
 8013eaa:	e7ee      	b.n	8013e8a <_fwalk_reent+0x1a>

08013eac <_localeconv_r>:
 8013eac:	4b04      	ldr	r3, [pc, #16]	; (8013ec0 <_localeconv_r+0x14>)
 8013eae:	681b      	ldr	r3, [r3, #0]
 8013eb0:	6a18      	ldr	r0, [r3, #32]
 8013eb2:	4b04      	ldr	r3, [pc, #16]	; (8013ec4 <_localeconv_r+0x18>)
 8013eb4:	2800      	cmp	r0, #0
 8013eb6:	bf08      	it	eq
 8013eb8:	4618      	moveq	r0, r3
 8013eba:	30f0      	adds	r0, #240	; 0xf0
 8013ebc:	4770      	bx	lr
 8013ebe:	bf00      	nop
 8013ec0:	20000020 	.word	0x20000020
 8013ec4:	20000084 	.word	0x20000084

08013ec8 <__swhatbuf_r>:
 8013ec8:	b570      	push	{r4, r5, r6, lr}
 8013eca:	460e      	mov	r6, r1
 8013ecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ed0:	2900      	cmp	r1, #0
 8013ed2:	b096      	sub	sp, #88	; 0x58
 8013ed4:	4614      	mov	r4, r2
 8013ed6:	461d      	mov	r5, r3
 8013ed8:	da07      	bge.n	8013eea <__swhatbuf_r+0x22>
 8013eda:	2300      	movs	r3, #0
 8013edc:	602b      	str	r3, [r5, #0]
 8013ede:	89b3      	ldrh	r3, [r6, #12]
 8013ee0:	061a      	lsls	r2, r3, #24
 8013ee2:	d410      	bmi.n	8013f06 <__swhatbuf_r+0x3e>
 8013ee4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013ee8:	e00e      	b.n	8013f08 <__swhatbuf_r+0x40>
 8013eea:	466a      	mov	r2, sp
 8013eec:	f000 fda0 	bl	8014a30 <_fstat_r>
 8013ef0:	2800      	cmp	r0, #0
 8013ef2:	dbf2      	blt.n	8013eda <__swhatbuf_r+0x12>
 8013ef4:	9a01      	ldr	r2, [sp, #4]
 8013ef6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8013efa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8013efe:	425a      	negs	r2, r3
 8013f00:	415a      	adcs	r2, r3
 8013f02:	602a      	str	r2, [r5, #0]
 8013f04:	e7ee      	b.n	8013ee4 <__swhatbuf_r+0x1c>
 8013f06:	2340      	movs	r3, #64	; 0x40
 8013f08:	2000      	movs	r0, #0
 8013f0a:	6023      	str	r3, [r4, #0]
 8013f0c:	b016      	add	sp, #88	; 0x58
 8013f0e:	bd70      	pop	{r4, r5, r6, pc}

08013f10 <__smakebuf_r>:
 8013f10:	898b      	ldrh	r3, [r1, #12]
 8013f12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013f14:	079d      	lsls	r5, r3, #30
 8013f16:	4606      	mov	r6, r0
 8013f18:	460c      	mov	r4, r1
 8013f1a:	d507      	bpl.n	8013f2c <__smakebuf_r+0x1c>
 8013f1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8013f20:	6023      	str	r3, [r4, #0]
 8013f22:	6123      	str	r3, [r4, #16]
 8013f24:	2301      	movs	r3, #1
 8013f26:	6163      	str	r3, [r4, #20]
 8013f28:	b002      	add	sp, #8
 8013f2a:	bd70      	pop	{r4, r5, r6, pc}
 8013f2c:	ab01      	add	r3, sp, #4
 8013f2e:	466a      	mov	r2, sp
 8013f30:	f7ff ffca 	bl	8013ec8 <__swhatbuf_r>
 8013f34:	9900      	ldr	r1, [sp, #0]
 8013f36:	4605      	mov	r5, r0
 8013f38:	4630      	mov	r0, r6
 8013f3a:	f000 fb69 	bl	8014610 <_malloc_r>
 8013f3e:	b948      	cbnz	r0, 8013f54 <__smakebuf_r+0x44>
 8013f40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013f44:	059a      	lsls	r2, r3, #22
 8013f46:	d4ef      	bmi.n	8013f28 <__smakebuf_r+0x18>
 8013f48:	f023 0303 	bic.w	r3, r3, #3
 8013f4c:	f043 0302 	orr.w	r3, r3, #2
 8013f50:	81a3      	strh	r3, [r4, #12]
 8013f52:	e7e3      	b.n	8013f1c <__smakebuf_r+0xc>
 8013f54:	4b0d      	ldr	r3, [pc, #52]	; (8013f8c <__smakebuf_r+0x7c>)
 8013f56:	62b3      	str	r3, [r6, #40]	; 0x28
 8013f58:	89a3      	ldrh	r3, [r4, #12]
 8013f5a:	6020      	str	r0, [r4, #0]
 8013f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013f60:	81a3      	strh	r3, [r4, #12]
 8013f62:	9b00      	ldr	r3, [sp, #0]
 8013f64:	6163      	str	r3, [r4, #20]
 8013f66:	9b01      	ldr	r3, [sp, #4]
 8013f68:	6120      	str	r0, [r4, #16]
 8013f6a:	b15b      	cbz	r3, 8013f84 <__smakebuf_r+0x74>
 8013f6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013f70:	4630      	mov	r0, r6
 8013f72:	f000 fd6f 	bl	8014a54 <_isatty_r>
 8013f76:	b128      	cbz	r0, 8013f84 <__smakebuf_r+0x74>
 8013f78:	89a3      	ldrh	r3, [r4, #12]
 8013f7a:	f023 0303 	bic.w	r3, r3, #3
 8013f7e:	f043 0301 	orr.w	r3, r3, #1
 8013f82:	81a3      	strh	r3, [r4, #12]
 8013f84:	89a3      	ldrh	r3, [r4, #12]
 8013f86:	431d      	orrs	r5, r3
 8013f88:	81a5      	strh	r5, [r4, #12]
 8013f8a:	e7cd      	b.n	8013f28 <__smakebuf_r+0x18>
 8013f8c:	08013d61 	.word	0x08013d61

08013f90 <malloc>:
 8013f90:	4b02      	ldr	r3, [pc, #8]	; (8013f9c <malloc+0xc>)
 8013f92:	4601      	mov	r1, r0
 8013f94:	6818      	ldr	r0, [r3, #0]
 8013f96:	f000 bb3b 	b.w	8014610 <_malloc_r>
 8013f9a:	bf00      	nop
 8013f9c:	20000020 	.word	0x20000020

08013fa0 <_Balloc>:
 8013fa0:	b570      	push	{r4, r5, r6, lr}
 8013fa2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013fa4:	4604      	mov	r4, r0
 8013fa6:	460e      	mov	r6, r1
 8013fa8:	b93d      	cbnz	r5, 8013fba <_Balloc+0x1a>
 8013faa:	2010      	movs	r0, #16
 8013fac:	f7ff fff0 	bl	8013f90 <malloc>
 8013fb0:	6260      	str	r0, [r4, #36]	; 0x24
 8013fb2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013fb6:	6005      	str	r5, [r0, #0]
 8013fb8:	60c5      	str	r5, [r0, #12]
 8013fba:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8013fbc:	68eb      	ldr	r3, [r5, #12]
 8013fbe:	b183      	cbz	r3, 8013fe2 <_Balloc+0x42>
 8013fc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013fc2:	68db      	ldr	r3, [r3, #12]
 8013fc4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8013fc8:	b9b8      	cbnz	r0, 8013ffa <_Balloc+0x5a>
 8013fca:	2101      	movs	r1, #1
 8013fcc:	fa01 f506 	lsl.w	r5, r1, r6
 8013fd0:	1d6a      	adds	r2, r5, #5
 8013fd2:	0092      	lsls	r2, r2, #2
 8013fd4:	4620      	mov	r0, r4
 8013fd6:	f000 fabf 	bl	8014558 <_calloc_r>
 8013fda:	b160      	cbz	r0, 8013ff6 <_Balloc+0x56>
 8013fdc:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8013fe0:	e00e      	b.n	8014000 <_Balloc+0x60>
 8013fe2:	2221      	movs	r2, #33	; 0x21
 8013fe4:	2104      	movs	r1, #4
 8013fe6:	4620      	mov	r0, r4
 8013fe8:	f000 fab6 	bl	8014558 <_calloc_r>
 8013fec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013fee:	60e8      	str	r0, [r5, #12]
 8013ff0:	68db      	ldr	r3, [r3, #12]
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d1e4      	bne.n	8013fc0 <_Balloc+0x20>
 8013ff6:	2000      	movs	r0, #0
 8013ff8:	bd70      	pop	{r4, r5, r6, pc}
 8013ffa:	6802      	ldr	r2, [r0, #0]
 8013ffc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8014000:	2300      	movs	r3, #0
 8014002:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014006:	e7f7      	b.n	8013ff8 <_Balloc+0x58>

08014008 <_Bfree>:
 8014008:	b570      	push	{r4, r5, r6, lr}
 801400a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801400c:	4606      	mov	r6, r0
 801400e:	460d      	mov	r5, r1
 8014010:	b93c      	cbnz	r4, 8014022 <_Bfree+0x1a>
 8014012:	2010      	movs	r0, #16
 8014014:	f7ff ffbc 	bl	8013f90 <malloc>
 8014018:	6270      	str	r0, [r6, #36]	; 0x24
 801401a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801401e:	6004      	str	r4, [r0, #0]
 8014020:	60c4      	str	r4, [r0, #12]
 8014022:	b13d      	cbz	r5, 8014034 <_Bfree+0x2c>
 8014024:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8014026:	686a      	ldr	r2, [r5, #4]
 8014028:	68db      	ldr	r3, [r3, #12]
 801402a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801402e:	6029      	str	r1, [r5, #0]
 8014030:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8014034:	bd70      	pop	{r4, r5, r6, pc}

08014036 <__multadd>:
 8014036:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801403a:	690d      	ldr	r5, [r1, #16]
 801403c:	461f      	mov	r7, r3
 801403e:	4606      	mov	r6, r0
 8014040:	460c      	mov	r4, r1
 8014042:	f101 0c14 	add.w	ip, r1, #20
 8014046:	2300      	movs	r3, #0
 8014048:	f8dc 0000 	ldr.w	r0, [ip]
 801404c:	b281      	uxth	r1, r0
 801404e:	fb02 7101 	mla	r1, r2, r1, r7
 8014052:	0c0f      	lsrs	r7, r1, #16
 8014054:	0c00      	lsrs	r0, r0, #16
 8014056:	fb02 7000 	mla	r0, r2, r0, r7
 801405a:	b289      	uxth	r1, r1
 801405c:	3301      	adds	r3, #1
 801405e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8014062:	429d      	cmp	r5, r3
 8014064:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8014068:	f84c 1b04 	str.w	r1, [ip], #4
 801406c:	dcec      	bgt.n	8014048 <__multadd+0x12>
 801406e:	b1d7      	cbz	r7, 80140a6 <__multadd+0x70>
 8014070:	68a3      	ldr	r3, [r4, #8]
 8014072:	42ab      	cmp	r3, r5
 8014074:	dc12      	bgt.n	801409c <__multadd+0x66>
 8014076:	6861      	ldr	r1, [r4, #4]
 8014078:	4630      	mov	r0, r6
 801407a:	3101      	adds	r1, #1
 801407c:	f7ff ff90 	bl	8013fa0 <_Balloc>
 8014080:	6922      	ldr	r2, [r4, #16]
 8014082:	3202      	adds	r2, #2
 8014084:	f104 010c 	add.w	r1, r4, #12
 8014088:	4680      	mov	r8, r0
 801408a:	0092      	lsls	r2, r2, #2
 801408c:	300c      	adds	r0, #12
 801408e:	f7fe f9a1 	bl	80123d4 <memcpy>
 8014092:	4621      	mov	r1, r4
 8014094:	4630      	mov	r0, r6
 8014096:	f7ff ffb7 	bl	8014008 <_Bfree>
 801409a:	4644      	mov	r4, r8
 801409c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80140a0:	3501      	adds	r5, #1
 80140a2:	615f      	str	r7, [r3, #20]
 80140a4:	6125      	str	r5, [r4, #16]
 80140a6:	4620      	mov	r0, r4
 80140a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080140ac <__hi0bits>:
 80140ac:	0c02      	lsrs	r2, r0, #16
 80140ae:	0412      	lsls	r2, r2, #16
 80140b0:	4603      	mov	r3, r0
 80140b2:	b9b2      	cbnz	r2, 80140e2 <__hi0bits+0x36>
 80140b4:	0403      	lsls	r3, r0, #16
 80140b6:	2010      	movs	r0, #16
 80140b8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80140bc:	bf04      	itt	eq
 80140be:	021b      	lsleq	r3, r3, #8
 80140c0:	3008      	addeq	r0, #8
 80140c2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80140c6:	bf04      	itt	eq
 80140c8:	011b      	lsleq	r3, r3, #4
 80140ca:	3004      	addeq	r0, #4
 80140cc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80140d0:	bf04      	itt	eq
 80140d2:	009b      	lsleq	r3, r3, #2
 80140d4:	3002      	addeq	r0, #2
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	db06      	blt.n	80140e8 <__hi0bits+0x3c>
 80140da:	005b      	lsls	r3, r3, #1
 80140dc:	d503      	bpl.n	80140e6 <__hi0bits+0x3a>
 80140de:	3001      	adds	r0, #1
 80140e0:	4770      	bx	lr
 80140e2:	2000      	movs	r0, #0
 80140e4:	e7e8      	b.n	80140b8 <__hi0bits+0xc>
 80140e6:	2020      	movs	r0, #32
 80140e8:	4770      	bx	lr

080140ea <__lo0bits>:
 80140ea:	6803      	ldr	r3, [r0, #0]
 80140ec:	f013 0207 	ands.w	r2, r3, #7
 80140f0:	4601      	mov	r1, r0
 80140f2:	d00b      	beq.n	801410c <__lo0bits+0x22>
 80140f4:	07da      	lsls	r2, r3, #31
 80140f6:	d423      	bmi.n	8014140 <__lo0bits+0x56>
 80140f8:	0798      	lsls	r0, r3, #30
 80140fa:	bf49      	itett	mi
 80140fc:	085b      	lsrmi	r3, r3, #1
 80140fe:	089b      	lsrpl	r3, r3, #2
 8014100:	2001      	movmi	r0, #1
 8014102:	600b      	strmi	r3, [r1, #0]
 8014104:	bf5c      	itt	pl
 8014106:	600b      	strpl	r3, [r1, #0]
 8014108:	2002      	movpl	r0, #2
 801410a:	4770      	bx	lr
 801410c:	b298      	uxth	r0, r3
 801410e:	b9a8      	cbnz	r0, 801413c <__lo0bits+0x52>
 8014110:	0c1b      	lsrs	r3, r3, #16
 8014112:	2010      	movs	r0, #16
 8014114:	f013 0fff 	tst.w	r3, #255	; 0xff
 8014118:	bf04      	itt	eq
 801411a:	0a1b      	lsreq	r3, r3, #8
 801411c:	3008      	addeq	r0, #8
 801411e:	071a      	lsls	r2, r3, #28
 8014120:	bf04      	itt	eq
 8014122:	091b      	lsreq	r3, r3, #4
 8014124:	3004      	addeq	r0, #4
 8014126:	079a      	lsls	r2, r3, #30
 8014128:	bf04      	itt	eq
 801412a:	089b      	lsreq	r3, r3, #2
 801412c:	3002      	addeq	r0, #2
 801412e:	07da      	lsls	r2, r3, #31
 8014130:	d402      	bmi.n	8014138 <__lo0bits+0x4e>
 8014132:	085b      	lsrs	r3, r3, #1
 8014134:	d006      	beq.n	8014144 <__lo0bits+0x5a>
 8014136:	3001      	adds	r0, #1
 8014138:	600b      	str	r3, [r1, #0]
 801413a:	4770      	bx	lr
 801413c:	4610      	mov	r0, r2
 801413e:	e7e9      	b.n	8014114 <__lo0bits+0x2a>
 8014140:	2000      	movs	r0, #0
 8014142:	4770      	bx	lr
 8014144:	2020      	movs	r0, #32
 8014146:	4770      	bx	lr

08014148 <__i2b>:
 8014148:	b510      	push	{r4, lr}
 801414a:	460c      	mov	r4, r1
 801414c:	2101      	movs	r1, #1
 801414e:	f7ff ff27 	bl	8013fa0 <_Balloc>
 8014152:	2201      	movs	r2, #1
 8014154:	6144      	str	r4, [r0, #20]
 8014156:	6102      	str	r2, [r0, #16]
 8014158:	bd10      	pop	{r4, pc}

0801415a <__multiply>:
 801415a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801415e:	4614      	mov	r4, r2
 8014160:	690a      	ldr	r2, [r1, #16]
 8014162:	6923      	ldr	r3, [r4, #16]
 8014164:	429a      	cmp	r2, r3
 8014166:	bfb8      	it	lt
 8014168:	460b      	movlt	r3, r1
 801416a:	4688      	mov	r8, r1
 801416c:	bfbc      	itt	lt
 801416e:	46a0      	movlt	r8, r4
 8014170:	461c      	movlt	r4, r3
 8014172:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8014176:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801417a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801417e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8014182:	eb07 0609 	add.w	r6, r7, r9
 8014186:	42b3      	cmp	r3, r6
 8014188:	bfb8      	it	lt
 801418a:	3101      	addlt	r1, #1
 801418c:	f7ff ff08 	bl	8013fa0 <_Balloc>
 8014190:	f100 0514 	add.w	r5, r0, #20
 8014194:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8014198:	462b      	mov	r3, r5
 801419a:	2200      	movs	r2, #0
 801419c:	4573      	cmp	r3, lr
 801419e:	d316      	bcc.n	80141ce <__multiply+0x74>
 80141a0:	f104 0214 	add.w	r2, r4, #20
 80141a4:	f108 0114 	add.w	r1, r8, #20
 80141a8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80141ac:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80141b0:	9300      	str	r3, [sp, #0]
 80141b2:	9b00      	ldr	r3, [sp, #0]
 80141b4:	9201      	str	r2, [sp, #4]
 80141b6:	4293      	cmp	r3, r2
 80141b8:	d80c      	bhi.n	80141d4 <__multiply+0x7a>
 80141ba:	2e00      	cmp	r6, #0
 80141bc:	dd03      	ble.n	80141c6 <__multiply+0x6c>
 80141be:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d05d      	beq.n	8014282 <__multiply+0x128>
 80141c6:	6106      	str	r6, [r0, #16]
 80141c8:	b003      	add	sp, #12
 80141ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141ce:	f843 2b04 	str.w	r2, [r3], #4
 80141d2:	e7e3      	b.n	801419c <__multiply+0x42>
 80141d4:	f8b2 b000 	ldrh.w	fp, [r2]
 80141d8:	f1bb 0f00 	cmp.w	fp, #0
 80141dc:	d023      	beq.n	8014226 <__multiply+0xcc>
 80141de:	4689      	mov	r9, r1
 80141e0:	46ac      	mov	ip, r5
 80141e2:	f04f 0800 	mov.w	r8, #0
 80141e6:	f859 4b04 	ldr.w	r4, [r9], #4
 80141ea:	f8dc a000 	ldr.w	sl, [ip]
 80141ee:	b2a3      	uxth	r3, r4
 80141f0:	fa1f fa8a 	uxth.w	sl, sl
 80141f4:	fb0b a303 	mla	r3, fp, r3, sl
 80141f8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80141fc:	f8dc 4000 	ldr.w	r4, [ip]
 8014200:	4443      	add	r3, r8
 8014202:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8014206:	fb0b 840a 	mla	r4, fp, sl, r8
 801420a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801420e:	46e2      	mov	sl, ip
 8014210:	b29b      	uxth	r3, r3
 8014212:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8014216:	454f      	cmp	r7, r9
 8014218:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801421c:	f84a 3b04 	str.w	r3, [sl], #4
 8014220:	d82b      	bhi.n	801427a <__multiply+0x120>
 8014222:	f8cc 8004 	str.w	r8, [ip, #4]
 8014226:	9b01      	ldr	r3, [sp, #4]
 8014228:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801422c:	3204      	adds	r2, #4
 801422e:	f1ba 0f00 	cmp.w	sl, #0
 8014232:	d020      	beq.n	8014276 <__multiply+0x11c>
 8014234:	682b      	ldr	r3, [r5, #0]
 8014236:	4689      	mov	r9, r1
 8014238:	46a8      	mov	r8, r5
 801423a:	f04f 0b00 	mov.w	fp, #0
 801423e:	f8b9 c000 	ldrh.w	ip, [r9]
 8014242:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8014246:	fb0a 440c 	mla	r4, sl, ip, r4
 801424a:	445c      	add	r4, fp
 801424c:	46c4      	mov	ip, r8
 801424e:	b29b      	uxth	r3, r3
 8014250:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8014254:	f84c 3b04 	str.w	r3, [ip], #4
 8014258:	f859 3b04 	ldr.w	r3, [r9], #4
 801425c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8014260:	0c1b      	lsrs	r3, r3, #16
 8014262:	fb0a b303 	mla	r3, sl, r3, fp
 8014266:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801426a:	454f      	cmp	r7, r9
 801426c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8014270:	d805      	bhi.n	801427e <__multiply+0x124>
 8014272:	f8c8 3004 	str.w	r3, [r8, #4]
 8014276:	3504      	adds	r5, #4
 8014278:	e79b      	b.n	80141b2 <__multiply+0x58>
 801427a:	46d4      	mov	ip, sl
 801427c:	e7b3      	b.n	80141e6 <__multiply+0x8c>
 801427e:	46e0      	mov	r8, ip
 8014280:	e7dd      	b.n	801423e <__multiply+0xe4>
 8014282:	3e01      	subs	r6, #1
 8014284:	e799      	b.n	80141ba <__multiply+0x60>
	...

08014288 <__pow5mult>:
 8014288:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801428c:	4615      	mov	r5, r2
 801428e:	f012 0203 	ands.w	r2, r2, #3
 8014292:	4606      	mov	r6, r0
 8014294:	460f      	mov	r7, r1
 8014296:	d007      	beq.n	80142a8 <__pow5mult+0x20>
 8014298:	3a01      	subs	r2, #1
 801429a:	4c21      	ldr	r4, [pc, #132]	; (8014320 <__pow5mult+0x98>)
 801429c:	2300      	movs	r3, #0
 801429e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80142a2:	f7ff fec8 	bl	8014036 <__multadd>
 80142a6:	4607      	mov	r7, r0
 80142a8:	10ad      	asrs	r5, r5, #2
 80142aa:	d035      	beq.n	8014318 <__pow5mult+0x90>
 80142ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80142ae:	b93c      	cbnz	r4, 80142c0 <__pow5mult+0x38>
 80142b0:	2010      	movs	r0, #16
 80142b2:	f7ff fe6d 	bl	8013f90 <malloc>
 80142b6:	6270      	str	r0, [r6, #36]	; 0x24
 80142b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80142bc:	6004      	str	r4, [r0, #0]
 80142be:	60c4      	str	r4, [r0, #12]
 80142c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80142c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80142c8:	b94c      	cbnz	r4, 80142de <__pow5mult+0x56>
 80142ca:	f240 2171 	movw	r1, #625	; 0x271
 80142ce:	4630      	mov	r0, r6
 80142d0:	f7ff ff3a 	bl	8014148 <__i2b>
 80142d4:	2300      	movs	r3, #0
 80142d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80142da:	4604      	mov	r4, r0
 80142dc:	6003      	str	r3, [r0, #0]
 80142de:	f04f 0800 	mov.w	r8, #0
 80142e2:	07eb      	lsls	r3, r5, #31
 80142e4:	d50a      	bpl.n	80142fc <__pow5mult+0x74>
 80142e6:	4639      	mov	r1, r7
 80142e8:	4622      	mov	r2, r4
 80142ea:	4630      	mov	r0, r6
 80142ec:	f7ff ff35 	bl	801415a <__multiply>
 80142f0:	4639      	mov	r1, r7
 80142f2:	4681      	mov	r9, r0
 80142f4:	4630      	mov	r0, r6
 80142f6:	f7ff fe87 	bl	8014008 <_Bfree>
 80142fa:	464f      	mov	r7, r9
 80142fc:	106d      	asrs	r5, r5, #1
 80142fe:	d00b      	beq.n	8014318 <__pow5mult+0x90>
 8014300:	6820      	ldr	r0, [r4, #0]
 8014302:	b938      	cbnz	r0, 8014314 <__pow5mult+0x8c>
 8014304:	4622      	mov	r2, r4
 8014306:	4621      	mov	r1, r4
 8014308:	4630      	mov	r0, r6
 801430a:	f7ff ff26 	bl	801415a <__multiply>
 801430e:	6020      	str	r0, [r4, #0]
 8014310:	f8c0 8000 	str.w	r8, [r0]
 8014314:	4604      	mov	r4, r0
 8014316:	e7e4      	b.n	80142e2 <__pow5mult+0x5a>
 8014318:	4638      	mov	r0, r7
 801431a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801431e:	bf00      	nop
 8014320:	08028960 	.word	0x08028960

08014324 <__lshift>:
 8014324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014328:	460c      	mov	r4, r1
 801432a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801432e:	6923      	ldr	r3, [r4, #16]
 8014330:	6849      	ldr	r1, [r1, #4]
 8014332:	eb0a 0903 	add.w	r9, sl, r3
 8014336:	68a3      	ldr	r3, [r4, #8]
 8014338:	4607      	mov	r7, r0
 801433a:	4616      	mov	r6, r2
 801433c:	f109 0501 	add.w	r5, r9, #1
 8014340:	42ab      	cmp	r3, r5
 8014342:	db32      	blt.n	80143aa <__lshift+0x86>
 8014344:	4638      	mov	r0, r7
 8014346:	f7ff fe2b 	bl	8013fa0 <_Balloc>
 801434a:	2300      	movs	r3, #0
 801434c:	4680      	mov	r8, r0
 801434e:	f100 0114 	add.w	r1, r0, #20
 8014352:	461a      	mov	r2, r3
 8014354:	4553      	cmp	r3, sl
 8014356:	db2b      	blt.n	80143b0 <__lshift+0x8c>
 8014358:	6920      	ldr	r0, [r4, #16]
 801435a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801435e:	f104 0314 	add.w	r3, r4, #20
 8014362:	f016 021f 	ands.w	r2, r6, #31
 8014366:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801436a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801436e:	d025      	beq.n	80143bc <__lshift+0x98>
 8014370:	f1c2 0e20 	rsb	lr, r2, #32
 8014374:	2000      	movs	r0, #0
 8014376:	681e      	ldr	r6, [r3, #0]
 8014378:	468a      	mov	sl, r1
 801437a:	4096      	lsls	r6, r2
 801437c:	4330      	orrs	r0, r6
 801437e:	f84a 0b04 	str.w	r0, [sl], #4
 8014382:	f853 0b04 	ldr.w	r0, [r3], #4
 8014386:	459c      	cmp	ip, r3
 8014388:	fa20 f00e 	lsr.w	r0, r0, lr
 801438c:	d814      	bhi.n	80143b8 <__lshift+0x94>
 801438e:	6048      	str	r0, [r1, #4]
 8014390:	b108      	cbz	r0, 8014396 <__lshift+0x72>
 8014392:	f109 0502 	add.w	r5, r9, #2
 8014396:	3d01      	subs	r5, #1
 8014398:	4638      	mov	r0, r7
 801439a:	f8c8 5010 	str.w	r5, [r8, #16]
 801439e:	4621      	mov	r1, r4
 80143a0:	f7ff fe32 	bl	8014008 <_Bfree>
 80143a4:	4640      	mov	r0, r8
 80143a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80143aa:	3101      	adds	r1, #1
 80143ac:	005b      	lsls	r3, r3, #1
 80143ae:	e7c7      	b.n	8014340 <__lshift+0x1c>
 80143b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80143b4:	3301      	adds	r3, #1
 80143b6:	e7cd      	b.n	8014354 <__lshift+0x30>
 80143b8:	4651      	mov	r1, sl
 80143ba:	e7dc      	b.n	8014376 <__lshift+0x52>
 80143bc:	3904      	subs	r1, #4
 80143be:	f853 2b04 	ldr.w	r2, [r3], #4
 80143c2:	f841 2f04 	str.w	r2, [r1, #4]!
 80143c6:	459c      	cmp	ip, r3
 80143c8:	d8f9      	bhi.n	80143be <__lshift+0x9a>
 80143ca:	e7e4      	b.n	8014396 <__lshift+0x72>

080143cc <__mcmp>:
 80143cc:	6903      	ldr	r3, [r0, #16]
 80143ce:	690a      	ldr	r2, [r1, #16]
 80143d0:	1a9b      	subs	r3, r3, r2
 80143d2:	b530      	push	{r4, r5, lr}
 80143d4:	d10c      	bne.n	80143f0 <__mcmp+0x24>
 80143d6:	0092      	lsls	r2, r2, #2
 80143d8:	3014      	adds	r0, #20
 80143da:	3114      	adds	r1, #20
 80143dc:	1884      	adds	r4, r0, r2
 80143de:	4411      	add	r1, r2
 80143e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80143e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80143e8:	4295      	cmp	r5, r2
 80143ea:	d003      	beq.n	80143f4 <__mcmp+0x28>
 80143ec:	d305      	bcc.n	80143fa <__mcmp+0x2e>
 80143ee:	2301      	movs	r3, #1
 80143f0:	4618      	mov	r0, r3
 80143f2:	bd30      	pop	{r4, r5, pc}
 80143f4:	42a0      	cmp	r0, r4
 80143f6:	d3f3      	bcc.n	80143e0 <__mcmp+0x14>
 80143f8:	e7fa      	b.n	80143f0 <__mcmp+0x24>
 80143fa:	f04f 33ff 	mov.w	r3, #4294967295
 80143fe:	e7f7      	b.n	80143f0 <__mcmp+0x24>

08014400 <__mdiff>:
 8014400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014404:	460d      	mov	r5, r1
 8014406:	4607      	mov	r7, r0
 8014408:	4611      	mov	r1, r2
 801440a:	4628      	mov	r0, r5
 801440c:	4614      	mov	r4, r2
 801440e:	f7ff ffdd 	bl	80143cc <__mcmp>
 8014412:	1e06      	subs	r6, r0, #0
 8014414:	d108      	bne.n	8014428 <__mdiff+0x28>
 8014416:	4631      	mov	r1, r6
 8014418:	4638      	mov	r0, r7
 801441a:	f7ff fdc1 	bl	8013fa0 <_Balloc>
 801441e:	2301      	movs	r3, #1
 8014420:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8014424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014428:	bfa4      	itt	ge
 801442a:	4623      	movge	r3, r4
 801442c:	462c      	movge	r4, r5
 801442e:	4638      	mov	r0, r7
 8014430:	6861      	ldr	r1, [r4, #4]
 8014432:	bfa6      	itte	ge
 8014434:	461d      	movge	r5, r3
 8014436:	2600      	movge	r6, #0
 8014438:	2601      	movlt	r6, #1
 801443a:	f7ff fdb1 	bl	8013fa0 <_Balloc>
 801443e:	692b      	ldr	r3, [r5, #16]
 8014440:	60c6      	str	r6, [r0, #12]
 8014442:	6926      	ldr	r6, [r4, #16]
 8014444:	f105 0914 	add.w	r9, r5, #20
 8014448:	f104 0214 	add.w	r2, r4, #20
 801444c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8014450:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8014454:	f100 0514 	add.w	r5, r0, #20
 8014458:	f04f 0e00 	mov.w	lr, #0
 801445c:	f852 ab04 	ldr.w	sl, [r2], #4
 8014460:	f859 4b04 	ldr.w	r4, [r9], #4
 8014464:	fa1e f18a 	uxtah	r1, lr, sl
 8014468:	b2a3      	uxth	r3, r4
 801446a:	1ac9      	subs	r1, r1, r3
 801446c:	0c23      	lsrs	r3, r4, #16
 801446e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8014472:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8014476:	b289      	uxth	r1, r1
 8014478:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801447c:	45c8      	cmp	r8, r9
 801447e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8014482:	4694      	mov	ip, r2
 8014484:	f845 3b04 	str.w	r3, [r5], #4
 8014488:	d8e8      	bhi.n	801445c <__mdiff+0x5c>
 801448a:	45bc      	cmp	ip, r7
 801448c:	d304      	bcc.n	8014498 <__mdiff+0x98>
 801448e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8014492:	b183      	cbz	r3, 80144b6 <__mdiff+0xb6>
 8014494:	6106      	str	r6, [r0, #16]
 8014496:	e7c5      	b.n	8014424 <__mdiff+0x24>
 8014498:	f85c 1b04 	ldr.w	r1, [ip], #4
 801449c:	fa1e f381 	uxtah	r3, lr, r1
 80144a0:	141a      	asrs	r2, r3, #16
 80144a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80144a6:	b29b      	uxth	r3, r3
 80144a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80144ac:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80144b0:	f845 3b04 	str.w	r3, [r5], #4
 80144b4:	e7e9      	b.n	801448a <__mdiff+0x8a>
 80144b6:	3e01      	subs	r6, #1
 80144b8:	e7e9      	b.n	801448e <__mdiff+0x8e>

080144ba <__d2b>:
 80144ba:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80144be:	460e      	mov	r6, r1
 80144c0:	2101      	movs	r1, #1
 80144c2:	ec59 8b10 	vmov	r8, r9, d0
 80144c6:	4615      	mov	r5, r2
 80144c8:	f7ff fd6a 	bl	8013fa0 <_Balloc>
 80144cc:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80144d0:	4607      	mov	r7, r0
 80144d2:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80144d6:	bb34      	cbnz	r4, 8014526 <__d2b+0x6c>
 80144d8:	9301      	str	r3, [sp, #4]
 80144da:	f1b8 0300 	subs.w	r3, r8, #0
 80144de:	d027      	beq.n	8014530 <__d2b+0x76>
 80144e0:	a802      	add	r0, sp, #8
 80144e2:	f840 3d08 	str.w	r3, [r0, #-8]!
 80144e6:	f7ff fe00 	bl	80140ea <__lo0bits>
 80144ea:	9900      	ldr	r1, [sp, #0]
 80144ec:	b1f0      	cbz	r0, 801452c <__d2b+0x72>
 80144ee:	9a01      	ldr	r2, [sp, #4]
 80144f0:	f1c0 0320 	rsb	r3, r0, #32
 80144f4:	fa02 f303 	lsl.w	r3, r2, r3
 80144f8:	430b      	orrs	r3, r1
 80144fa:	40c2      	lsrs	r2, r0
 80144fc:	617b      	str	r3, [r7, #20]
 80144fe:	9201      	str	r2, [sp, #4]
 8014500:	9b01      	ldr	r3, [sp, #4]
 8014502:	61bb      	str	r3, [r7, #24]
 8014504:	2b00      	cmp	r3, #0
 8014506:	bf14      	ite	ne
 8014508:	2102      	movne	r1, #2
 801450a:	2101      	moveq	r1, #1
 801450c:	6139      	str	r1, [r7, #16]
 801450e:	b1c4      	cbz	r4, 8014542 <__d2b+0x88>
 8014510:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8014514:	4404      	add	r4, r0
 8014516:	6034      	str	r4, [r6, #0]
 8014518:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801451c:	6028      	str	r0, [r5, #0]
 801451e:	4638      	mov	r0, r7
 8014520:	b003      	add	sp, #12
 8014522:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014526:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801452a:	e7d5      	b.n	80144d8 <__d2b+0x1e>
 801452c:	6179      	str	r1, [r7, #20]
 801452e:	e7e7      	b.n	8014500 <__d2b+0x46>
 8014530:	a801      	add	r0, sp, #4
 8014532:	f7ff fdda 	bl	80140ea <__lo0bits>
 8014536:	9b01      	ldr	r3, [sp, #4]
 8014538:	617b      	str	r3, [r7, #20]
 801453a:	2101      	movs	r1, #1
 801453c:	6139      	str	r1, [r7, #16]
 801453e:	3020      	adds	r0, #32
 8014540:	e7e5      	b.n	801450e <__d2b+0x54>
 8014542:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8014546:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801454a:	6030      	str	r0, [r6, #0]
 801454c:	6918      	ldr	r0, [r3, #16]
 801454e:	f7ff fdad 	bl	80140ac <__hi0bits>
 8014552:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8014556:	e7e1      	b.n	801451c <__d2b+0x62>

08014558 <_calloc_r>:
 8014558:	b538      	push	{r3, r4, r5, lr}
 801455a:	fb02 f401 	mul.w	r4, r2, r1
 801455e:	4621      	mov	r1, r4
 8014560:	f000 f856 	bl	8014610 <_malloc_r>
 8014564:	4605      	mov	r5, r0
 8014566:	b118      	cbz	r0, 8014570 <_calloc_r+0x18>
 8014568:	4622      	mov	r2, r4
 801456a:	2100      	movs	r1, #0
 801456c:	f7fd ff3d 	bl	80123ea <memset>
 8014570:	4628      	mov	r0, r5
 8014572:	bd38      	pop	{r3, r4, r5, pc}

08014574 <_free_r>:
 8014574:	b538      	push	{r3, r4, r5, lr}
 8014576:	4605      	mov	r5, r0
 8014578:	2900      	cmp	r1, #0
 801457a:	d045      	beq.n	8014608 <_free_r+0x94>
 801457c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014580:	1f0c      	subs	r4, r1, #4
 8014582:	2b00      	cmp	r3, #0
 8014584:	bfb8      	it	lt
 8014586:	18e4      	addlt	r4, r4, r3
 8014588:	f000 fa98 	bl	8014abc <__malloc_lock>
 801458c:	4a1f      	ldr	r2, [pc, #124]	; (801460c <_free_r+0x98>)
 801458e:	6813      	ldr	r3, [r2, #0]
 8014590:	4610      	mov	r0, r2
 8014592:	b933      	cbnz	r3, 80145a2 <_free_r+0x2e>
 8014594:	6063      	str	r3, [r4, #4]
 8014596:	6014      	str	r4, [r2, #0]
 8014598:	4628      	mov	r0, r5
 801459a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801459e:	f000 ba8e 	b.w	8014abe <__malloc_unlock>
 80145a2:	42a3      	cmp	r3, r4
 80145a4:	d90c      	bls.n	80145c0 <_free_r+0x4c>
 80145a6:	6821      	ldr	r1, [r4, #0]
 80145a8:	1862      	adds	r2, r4, r1
 80145aa:	4293      	cmp	r3, r2
 80145ac:	bf04      	itt	eq
 80145ae:	681a      	ldreq	r2, [r3, #0]
 80145b0:	685b      	ldreq	r3, [r3, #4]
 80145b2:	6063      	str	r3, [r4, #4]
 80145b4:	bf04      	itt	eq
 80145b6:	1852      	addeq	r2, r2, r1
 80145b8:	6022      	streq	r2, [r4, #0]
 80145ba:	6004      	str	r4, [r0, #0]
 80145bc:	e7ec      	b.n	8014598 <_free_r+0x24>
 80145be:	4613      	mov	r3, r2
 80145c0:	685a      	ldr	r2, [r3, #4]
 80145c2:	b10a      	cbz	r2, 80145c8 <_free_r+0x54>
 80145c4:	42a2      	cmp	r2, r4
 80145c6:	d9fa      	bls.n	80145be <_free_r+0x4a>
 80145c8:	6819      	ldr	r1, [r3, #0]
 80145ca:	1858      	adds	r0, r3, r1
 80145cc:	42a0      	cmp	r0, r4
 80145ce:	d10b      	bne.n	80145e8 <_free_r+0x74>
 80145d0:	6820      	ldr	r0, [r4, #0]
 80145d2:	4401      	add	r1, r0
 80145d4:	1858      	adds	r0, r3, r1
 80145d6:	4282      	cmp	r2, r0
 80145d8:	6019      	str	r1, [r3, #0]
 80145da:	d1dd      	bne.n	8014598 <_free_r+0x24>
 80145dc:	6810      	ldr	r0, [r2, #0]
 80145de:	6852      	ldr	r2, [r2, #4]
 80145e0:	605a      	str	r2, [r3, #4]
 80145e2:	4401      	add	r1, r0
 80145e4:	6019      	str	r1, [r3, #0]
 80145e6:	e7d7      	b.n	8014598 <_free_r+0x24>
 80145e8:	d902      	bls.n	80145f0 <_free_r+0x7c>
 80145ea:	230c      	movs	r3, #12
 80145ec:	602b      	str	r3, [r5, #0]
 80145ee:	e7d3      	b.n	8014598 <_free_r+0x24>
 80145f0:	6820      	ldr	r0, [r4, #0]
 80145f2:	1821      	adds	r1, r4, r0
 80145f4:	428a      	cmp	r2, r1
 80145f6:	bf04      	itt	eq
 80145f8:	6811      	ldreq	r1, [r2, #0]
 80145fa:	6852      	ldreq	r2, [r2, #4]
 80145fc:	6062      	str	r2, [r4, #4]
 80145fe:	bf04      	itt	eq
 8014600:	1809      	addeq	r1, r1, r0
 8014602:	6021      	streq	r1, [r4, #0]
 8014604:	605c      	str	r4, [r3, #4]
 8014606:	e7c7      	b.n	8014598 <_free_r+0x24>
 8014608:	bd38      	pop	{r3, r4, r5, pc}
 801460a:	bf00      	nop
 801460c:	200042c8 	.word	0x200042c8

08014610 <_malloc_r>:
 8014610:	b570      	push	{r4, r5, r6, lr}
 8014612:	1ccd      	adds	r5, r1, #3
 8014614:	f025 0503 	bic.w	r5, r5, #3
 8014618:	3508      	adds	r5, #8
 801461a:	2d0c      	cmp	r5, #12
 801461c:	bf38      	it	cc
 801461e:	250c      	movcc	r5, #12
 8014620:	2d00      	cmp	r5, #0
 8014622:	4606      	mov	r6, r0
 8014624:	db01      	blt.n	801462a <_malloc_r+0x1a>
 8014626:	42a9      	cmp	r1, r5
 8014628:	d903      	bls.n	8014632 <_malloc_r+0x22>
 801462a:	230c      	movs	r3, #12
 801462c:	6033      	str	r3, [r6, #0]
 801462e:	2000      	movs	r0, #0
 8014630:	bd70      	pop	{r4, r5, r6, pc}
 8014632:	f000 fa43 	bl	8014abc <__malloc_lock>
 8014636:	4a21      	ldr	r2, [pc, #132]	; (80146bc <_malloc_r+0xac>)
 8014638:	6814      	ldr	r4, [r2, #0]
 801463a:	4621      	mov	r1, r4
 801463c:	b991      	cbnz	r1, 8014664 <_malloc_r+0x54>
 801463e:	4c20      	ldr	r4, [pc, #128]	; (80146c0 <_malloc_r+0xb0>)
 8014640:	6823      	ldr	r3, [r4, #0]
 8014642:	b91b      	cbnz	r3, 801464c <_malloc_r+0x3c>
 8014644:	4630      	mov	r0, r6
 8014646:	f000 f97d 	bl	8014944 <_sbrk_r>
 801464a:	6020      	str	r0, [r4, #0]
 801464c:	4629      	mov	r1, r5
 801464e:	4630      	mov	r0, r6
 8014650:	f000 f978 	bl	8014944 <_sbrk_r>
 8014654:	1c43      	adds	r3, r0, #1
 8014656:	d124      	bne.n	80146a2 <_malloc_r+0x92>
 8014658:	230c      	movs	r3, #12
 801465a:	6033      	str	r3, [r6, #0]
 801465c:	4630      	mov	r0, r6
 801465e:	f000 fa2e 	bl	8014abe <__malloc_unlock>
 8014662:	e7e4      	b.n	801462e <_malloc_r+0x1e>
 8014664:	680b      	ldr	r3, [r1, #0]
 8014666:	1b5b      	subs	r3, r3, r5
 8014668:	d418      	bmi.n	801469c <_malloc_r+0x8c>
 801466a:	2b0b      	cmp	r3, #11
 801466c:	d90f      	bls.n	801468e <_malloc_r+0x7e>
 801466e:	600b      	str	r3, [r1, #0]
 8014670:	50cd      	str	r5, [r1, r3]
 8014672:	18cc      	adds	r4, r1, r3
 8014674:	4630      	mov	r0, r6
 8014676:	f000 fa22 	bl	8014abe <__malloc_unlock>
 801467a:	f104 000b 	add.w	r0, r4, #11
 801467e:	1d23      	adds	r3, r4, #4
 8014680:	f020 0007 	bic.w	r0, r0, #7
 8014684:	1ac3      	subs	r3, r0, r3
 8014686:	d0d3      	beq.n	8014630 <_malloc_r+0x20>
 8014688:	425a      	negs	r2, r3
 801468a:	50e2      	str	r2, [r4, r3]
 801468c:	e7d0      	b.n	8014630 <_malloc_r+0x20>
 801468e:	428c      	cmp	r4, r1
 8014690:	684b      	ldr	r3, [r1, #4]
 8014692:	bf16      	itet	ne
 8014694:	6063      	strne	r3, [r4, #4]
 8014696:	6013      	streq	r3, [r2, #0]
 8014698:	460c      	movne	r4, r1
 801469a:	e7eb      	b.n	8014674 <_malloc_r+0x64>
 801469c:	460c      	mov	r4, r1
 801469e:	6849      	ldr	r1, [r1, #4]
 80146a0:	e7cc      	b.n	801463c <_malloc_r+0x2c>
 80146a2:	1cc4      	adds	r4, r0, #3
 80146a4:	f024 0403 	bic.w	r4, r4, #3
 80146a8:	42a0      	cmp	r0, r4
 80146aa:	d005      	beq.n	80146b8 <_malloc_r+0xa8>
 80146ac:	1a21      	subs	r1, r4, r0
 80146ae:	4630      	mov	r0, r6
 80146b0:	f000 f948 	bl	8014944 <_sbrk_r>
 80146b4:	3001      	adds	r0, #1
 80146b6:	d0cf      	beq.n	8014658 <_malloc_r+0x48>
 80146b8:	6025      	str	r5, [r4, #0]
 80146ba:	e7db      	b.n	8014674 <_malloc_r+0x64>
 80146bc:	200042c8 	.word	0x200042c8
 80146c0:	200042cc 	.word	0x200042cc

080146c4 <__sfputc_r>:
 80146c4:	6893      	ldr	r3, [r2, #8]
 80146c6:	3b01      	subs	r3, #1
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	b410      	push	{r4}
 80146cc:	6093      	str	r3, [r2, #8]
 80146ce:	da08      	bge.n	80146e2 <__sfputc_r+0x1e>
 80146d0:	6994      	ldr	r4, [r2, #24]
 80146d2:	42a3      	cmp	r3, r4
 80146d4:	db01      	blt.n	80146da <__sfputc_r+0x16>
 80146d6:	290a      	cmp	r1, #10
 80146d8:	d103      	bne.n	80146e2 <__sfputc_r+0x1e>
 80146da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80146de:	f7fe bb65 	b.w	8012dac <__swbuf_r>
 80146e2:	6813      	ldr	r3, [r2, #0]
 80146e4:	1c58      	adds	r0, r3, #1
 80146e6:	6010      	str	r0, [r2, #0]
 80146e8:	7019      	strb	r1, [r3, #0]
 80146ea:	4608      	mov	r0, r1
 80146ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80146f0:	4770      	bx	lr

080146f2 <__sfputs_r>:
 80146f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146f4:	4606      	mov	r6, r0
 80146f6:	460f      	mov	r7, r1
 80146f8:	4614      	mov	r4, r2
 80146fa:	18d5      	adds	r5, r2, r3
 80146fc:	42ac      	cmp	r4, r5
 80146fe:	d101      	bne.n	8014704 <__sfputs_r+0x12>
 8014700:	2000      	movs	r0, #0
 8014702:	e007      	b.n	8014714 <__sfputs_r+0x22>
 8014704:	463a      	mov	r2, r7
 8014706:	f814 1b01 	ldrb.w	r1, [r4], #1
 801470a:	4630      	mov	r0, r6
 801470c:	f7ff ffda 	bl	80146c4 <__sfputc_r>
 8014710:	1c43      	adds	r3, r0, #1
 8014712:	d1f3      	bne.n	80146fc <__sfputs_r+0xa>
 8014714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014718 <_vfiprintf_r>:
 8014718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801471c:	460c      	mov	r4, r1
 801471e:	b09d      	sub	sp, #116	; 0x74
 8014720:	4617      	mov	r7, r2
 8014722:	461d      	mov	r5, r3
 8014724:	4606      	mov	r6, r0
 8014726:	b118      	cbz	r0, 8014730 <_vfiprintf_r+0x18>
 8014728:	6983      	ldr	r3, [r0, #24]
 801472a:	b90b      	cbnz	r3, 8014730 <_vfiprintf_r+0x18>
 801472c:	f7ff fb34 	bl	8013d98 <__sinit>
 8014730:	4b7c      	ldr	r3, [pc, #496]	; (8014924 <_vfiprintf_r+0x20c>)
 8014732:	429c      	cmp	r4, r3
 8014734:	d158      	bne.n	80147e8 <_vfiprintf_r+0xd0>
 8014736:	6874      	ldr	r4, [r6, #4]
 8014738:	89a3      	ldrh	r3, [r4, #12]
 801473a:	0718      	lsls	r0, r3, #28
 801473c:	d55e      	bpl.n	80147fc <_vfiprintf_r+0xe4>
 801473e:	6923      	ldr	r3, [r4, #16]
 8014740:	2b00      	cmp	r3, #0
 8014742:	d05b      	beq.n	80147fc <_vfiprintf_r+0xe4>
 8014744:	2300      	movs	r3, #0
 8014746:	9309      	str	r3, [sp, #36]	; 0x24
 8014748:	2320      	movs	r3, #32
 801474a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801474e:	2330      	movs	r3, #48	; 0x30
 8014750:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014754:	9503      	str	r5, [sp, #12]
 8014756:	f04f 0b01 	mov.w	fp, #1
 801475a:	46b8      	mov	r8, r7
 801475c:	4645      	mov	r5, r8
 801475e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014762:	b10b      	cbz	r3, 8014768 <_vfiprintf_r+0x50>
 8014764:	2b25      	cmp	r3, #37	; 0x25
 8014766:	d154      	bne.n	8014812 <_vfiprintf_r+0xfa>
 8014768:	ebb8 0a07 	subs.w	sl, r8, r7
 801476c:	d00b      	beq.n	8014786 <_vfiprintf_r+0x6e>
 801476e:	4653      	mov	r3, sl
 8014770:	463a      	mov	r2, r7
 8014772:	4621      	mov	r1, r4
 8014774:	4630      	mov	r0, r6
 8014776:	f7ff ffbc 	bl	80146f2 <__sfputs_r>
 801477a:	3001      	adds	r0, #1
 801477c:	f000 80c2 	beq.w	8014904 <_vfiprintf_r+0x1ec>
 8014780:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014782:	4453      	add	r3, sl
 8014784:	9309      	str	r3, [sp, #36]	; 0x24
 8014786:	f898 3000 	ldrb.w	r3, [r8]
 801478a:	2b00      	cmp	r3, #0
 801478c:	f000 80ba 	beq.w	8014904 <_vfiprintf_r+0x1ec>
 8014790:	2300      	movs	r3, #0
 8014792:	f04f 32ff 	mov.w	r2, #4294967295
 8014796:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801479a:	9304      	str	r3, [sp, #16]
 801479c:	9307      	str	r3, [sp, #28]
 801479e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80147a2:	931a      	str	r3, [sp, #104]	; 0x68
 80147a4:	46a8      	mov	r8, r5
 80147a6:	2205      	movs	r2, #5
 80147a8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80147ac:	485e      	ldr	r0, [pc, #376]	; (8014928 <_vfiprintf_r+0x210>)
 80147ae:	f7f3 fc4f 	bl	8008050 <memchr>
 80147b2:	9b04      	ldr	r3, [sp, #16]
 80147b4:	bb78      	cbnz	r0, 8014816 <_vfiprintf_r+0xfe>
 80147b6:	06d9      	lsls	r1, r3, #27
 80147b8:	bf44      	itt	mi
 80147ba:	2220      	movmi	r2, #32
 80147bc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80147c0:	071a      	lsls	r2, r3, #28
 80147c2:	bf44      	itt	mi
 80147c4:	222b      	movmi	r2, #43	; 0x2b
 80147c6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80147ca:	782a      	ldrb	r2, [r5, #0]
 80147cc:	2a2a      	cmp	r2, #42	; 0x2a
 80147ce:	d02a      	beq.n	8014826 <_vfiprintf_r+0x10e>
 80147d0:	9a07      	ldr	r2, [sp, #28]
 80147d2:	46a8      	mov	r8, r5
 80147d4:	2000      	movs	r0, #0
 80147d6:	250a      	movs	r5, #10
 80147d8:	4641      	mov	r1, r8
 80147da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80147de:	3b30      	subs	r3, #48	; 0x30
 80147e0:	2b09      	cmp	r3, #9
 80147e2:	d969      	bls.n	80148b8 <_vfiprintf_r+0x1a0>
 80147e4:	b360      	cbz	r0, 8014840 <_vfiprintf_r+0x128>
 80147e6:	e024      	b.n	8014832 <_vfiprintf_r+0x11a>
 80147e8:	4b50      	ldr	r3, [pc, #320]	; (801492c <_vfiprintf_r+0x214>)
 80147ea:	429c      	cmp	r4, r3
 80147ec:	d101      	bne.n	80147f2 <_vfiprintf_r+0xda>
 80147ee:	68b4      	ldr	r4, [r6, #8]
 80147f0:	e7a2      	b.n	8014738 <_vfiprintf_r+0x20>
 80147f2:	4b4f      	ldr	r3, [pc, #316]	; (8014930 <_vfiprintf_r+0x218>)
 80147f4:	429c      	cmp	r4, r3
 80147f6:	bf08      	it	eq
 80147f8:	68f4      	ldreq	r4, [r6, #12]
 80147fa:	e79d      	b.n	8014738 <_vfiprintf_r+0x20>
 80147fc:	4621      	mov	r1, r4
 80147fe:	4630      	mov	r0, r6
 8014800:	f7fe fb26 	bl	8012e50 <__swsetup_r>
 8014804:	2800      	cmp	r0, #0
 8014806:	d09d      	beq.n	8014744 <_vfiprintf_r+0x2c>
 8014808:	f04f 30ff 	mov.w	r0, #4294967295
 801480c:	b01d      	add	sp, #116	; 0x74
 801480e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014812:	46a8      	mov	r8, r5
 8014814:	e7a2      	b.n	801475c <_vfiprintf_r+0x44>
 8014816:	4a44      	ldr	r2, [pc, #272]	; (8014928 <_vfiprintf_r+0x210>)
 8014818:	1a80      	subs	r0, r0, r2
 801481a:	fa0b f000 	lsl.w	r0, fp, r0
 801481e:	4318      	orrs	r0, r3
 8014820:	9004      	str	r0, [sp, #16]
 8014822:	4645      	mov	r5, r8
 8014824:	e7be      	b.n	80147a4 <_vfiprintf_r+0x8c>
 8014826:	9a03      	ldr	r2, [sp, #12]
 8014828:	1d11      	adds	r1, r2, #4
 801482a:	6812      	ldr	r2, [r2, #0]
 801482c:	9103      	str	r1, [sp, #12]
 801482e:	2a00      	cmp	r2, #0
 8014830:	db01      	blt.n	8014836 <_vfiprintf_r+0x11e>
 8014832:	9207      	str	r2, [sp, #28]
 8014834:	e004      	b.n	8014840 <_vfiprintf_r+0x128>
 8014836:	4252      	negs	r2, r2
 8014838:	f043 0302 	orr.w	r3, r3, #2
 801483c:	9207      	str	r2, [sp, #28]
 801483e:	9304      	str	r3, [sp, #16]
 8014840:	f898 3000 	ldrb.w	r3, [r8]
 8014844:	2b2e      	cmp	r3, #46	; 0x2e
 8014846:	d10e      	bne.n	8014866 <_vfiprintf_r+0x14e>
 8014848:	f898 3001 	ldrb.w	r3, [r8, #1]
 801484c:	2b2a      	cmp	r3, #42	; 0x2a
 801484e:	d138      	bne.n	80148c2 <_vfiprintf_r+0x1aa>
 8014850:	9b03      	ldr	r3, [sp, #12]
 8014852:	1d1a      	adds	r2, r3, #4
 8014854:	681b      	ldr	r3, [r3, #0]
 8014856:	9203      	str	r2, [sp, #12]
 8014858:	2b00      	cmp	r3, #0
 801485a:	bfb8      	it	lt
 801485c:	f04f 33ff 	movlt.w	r3, #4294967295
 8014860:	f108 0802 	add.w	r8, r8, #2
 8014864:	9305      	str	r3, [sp, #20]
 8014866:	4d33      	ldr	r5, [pc, #204]	; (8014934 <_vfiprintf_r+0x21c>)
 8014868:	f898 1000 	ldrb.w	r1, [r8]
 801486c:	2203      	movs	r2, #3
 801486e:	4628      	mov	r0, r5
 8014870:	f7f3 fbee 	bl	8008050 <memchr>
 8014874:	b140      	cbz	r0, 8014888 <_vfiprintf_r+0x170>
 8014876:	2340      	movs	r3, #64	; 0x40
 8014878:	1b40      	subs	r0, r0, r5
 801487a:	fa03 f000 	lsl.w	r0, r3, r0
 801487e:	9b04      	ldr	r3, [sp, #16]
 8014880:	4303      	orrs	r3, r0
 8014882:	f108 0801 	add.w	r8, r8, #1
 8014886:	9304      	str	r3, [sp, #16]
 8014888:	f898 1000 	ldrb.w	r1, [r8]
 801488c:	482a      	ldr	r0, [pc, #168]	; (8014938 <_vfiprintf_r+0x220>)
 801488e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014892:	2206      	movs	r2, #6
 8014894:	f108 0701 	add.w	r7, r8, #1
 8014898:	f7f3 fbda 	bl	8008050 <memchr>
 801489c:	2800      	cmp	r0, #0
 801489e:	d037      	beq.n	8014910 <_vfiprintf_r+0x1f8>
 80148a0:	4b26      	ldr	r3, [pc, #152]	; (801493c <_vfiprintf_r+0x224>)
 80148a2:	bb1b      	cbnz	r3, 80148ec <_vfiprintf_r+0x1d4>
 80148a4:	9b03      	ldr	r3, [sp, #12]
 80148a6:	3307      	adds	r3, #7
 80148a8:	f023 0307 	bic.w	r3, r3, #7
 80148ac:	3308      	adds	r3, #8
 80148ae:	9303      	str	r3, [sp, #12]
 80148b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80148b2:	444b      	add	r3, r9
 80148b4:	9309      	str	r3, [sp, #36]	; 0x24
 80148b6:	e750      	b.n	801475a <_vfiprintf_r+0x42>
 80148b8:	fb05 3202 	mla	r2, r5, r2, r3
 80148bc:	2001      	movs	r0, #1
 80148be:	4688      	mov	r8, r1
 80148c0:	e78a      	b.n	80147d8 <_vfiprintf_r+0xc0>
 80148c2:	2300      	movs	r3, #0
 80148c4:	f108 0801 	add.w	r8, r8, #1
 80148c8:	9305      	str	r3, [sp, #20]
 80148ca:	4619      	mov	r1, r3
 80148cc:	250a      	movs	r5, #10
 80148ce:	4640      	mov	r0, r8
 80148d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80148d4:	3a30      	subs	r2, #48	; 0x30
 80148d6:	2a09      	cmp	r2, #9
 80148d8:	d903      	bls.n	80148e2 <_vfiprintf_r+0x1ca>
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d0c3      	beq.n	8014866 <_vfiprintf_r+0x14e>
 80148de:	9105      	str	r1, [sp, #20]
 80148e0:	e7c1      	b.n	8014866 <_vfiprintf_r+0x14e>
 80148e2:	fb05 2101 	mla	r1, r5, r1, r2
 80148e6:	2301      	movs	r3, #1
 80148e8:	4680      	mov	r8, r0
 80148ea:	e7f0      	b.n	80148ce <_vfiprintf_r+0x1b6>
 80148ec:	ab03      	add	r3, sp, #12
 80148ee:	9300      	str	r3, [sp, #0]
 80148f0:	4622      	mov	r2, r4
 80148f2:	4b13      	ldr	r3, [pc, #76]	; (8014940 <_vfiprintf_r+0x228>)
 80148f4:	a904      	add	r1, sp, #16
 80148f6:	4630      	mov	r0, r6
 80148f8:	f7fd fe14 	bl	8012524 <_printf_float>
 80148fc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8014900:	4681      	mov	r9, r0
 8014902:	d1d5      	bne.n	80148b0 <_vfiprintf_r+0x198>
 8014904:	89a3      	ldrh	r3, [r4, #12]
 8014906:	065b      	lsls	r3, r3, #25
 8014908:	f53f af7e 	bmi.w	8014808 <_vfiprintf_r+0xf0>
 801490c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801490e:	e77d      	b.n	801480c <_vfiprintf_r+0xf4>
 8014910:	ab03      	add	r3, sp, #12
 8014912:	9300      	str	r3, [sp, #0]
 8014914:	4622      	mov	r2, r4
 8014916:	4b0a      	ldr	r3, [pc, #40]	; (8014940 <_vfiprintf_r+0x228>)
 8014918:	a904      	add	r1, sp, #16
 801491a:	4630      	mov	r0, r6
 801491c:	f7fe f8b8 	bl	8012a90 <_printf_i>
 8014920:	e7ec      	b.n	80148fc <_vfiprintf_r+0x1e4>
 8014922:	bf00      	nop
 8014924:	08028830 	.word	0x08028830
 8014928:	0802896c 	.word	0x0802896c
 801492c:	08028850 	.word	0x08028850
 8014930:	08028810 	.word	0x08028810
 8014934:	08028972 	.word	0x08028972
 8014938:	08028976 	.word	0x08028976
 801493c:	08012525 	.word	0x08012525
 8014940:	080146f3 	.word	0x080146f3

08014944 <_sbrk_r>:
 8014944:	b538      	push	{r3, r4, r5, lr}
 8014946:	4c06      	ldr	r4, [pc, #24]	; (8014960 <_sbrk_r+0x1c>)
 8014948:	2300      	movs	r3, #0
 801494a:	4605      	mov	r5, r0
 801494c:	4608      	mov	r0, r1
 801494e:	6023      	str	r3, [r4, #0]
 8014950:	f7fd fab6 	bl	8011ec0 <_sbrk>
 8014954:	1c43      	adds	r3, r0, #1
 8014956:	d102      	bne.n	801495e <_sbrk_r+0x1a>
 8014958:	6823      	ldr	r3, [r4, #0]
 801495a:	b103      	cbz	r3, 801495e <_sbrk_r+0x1a>
 801495c:	602b      	str	r3, [r5, #0]
 801495e:	bd38      	pop	{r3, r4, r5, pc}
 8014960:	200048a4 	.word	0x200048a4

08014964 <__sread>:
 8014964:	b510      	push	{r4, lr}
 8014966:	460c      	mov	r4, r1
 8014968:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801496c:	f000 f8a8 	bl	8014ac0 <_read_r>
 8014970:	2800      	cmp	r0, #0
 8014972:	bfab      	itete	ge
 8014974:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014976:	89a3      	ldrhlt	r3, [r4, #12]
 8014978:	181b      	addge	r3, r3, r0
 801497a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801497e:	bfac      	ite	ge
 8014980:	6563      	strge	r3, [r4, #84]	; 0x54
 8014982:	81a3      	strhlt	r3, [r4, #12]
 8014984:	bd10      	pop	{r4, pc}

08014986 <__swrite>:
 8014986:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801498a:	461f      	mov	r7, r3
 801498c:	898b      	ldrh	r3, [r1, #12]
 801498e:	05db      	lsls	r3, r3, #23
 8014990:	4605      	mov	r5, r0
 8014992:	460c      	mov	r4, r1
 8014994:	4616      	mov	r6, r2
 8014996:	d505      	bpl.n	80149a4 <__swrite+0x1e>
 8014998:	2302      	movs	r3, #2
 801499a:	2200      	movs	r2, #0
 801499c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80149a0:	f000 f868 	bl	8014a74 <_lseek_r>
 80149a4:	89a3      	ldrh	r3, [r4, #12]
 80149a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80149aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80149ae:	81a3      	strh	r3, [r4, #12]
 80149b0:	4632      	mov	r2, r6
 80149b2:	463b      	mov	r3, r7
 80149b4:	4628      	mov	r0, r5
 80149b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80149ba:	f000 b817 	b.w	80149ec <_write_r>

080149be <__sseek>:
 80149be:	b510      	push	{r4, lr}
 80149c0:	460c      	mov	r4, r1
 80149c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80149c6:	f000 f855 	bl	8014a74 <_lseek_r>
 80149ca:	1c43      	adds	r3, r0, #1
 80149cc:	89a3      	ldrh	r3, [r4, #12]
 80149ce:	bf15      	itete	ne
 80149d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80149d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80149d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80149da:	81a3      	strheq	r3, [r4, #12]
 80149dc:	bf18      	it	ne
 80149de:	81a3      	strhne	r3, [r4, #12]
 80149e0:	bd10      	pop	{r4, pc}

080149e2 <__sclose>:
 80149e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80149e6:	f000 b813 	b.w	8014a10 <_close_r>
	...

080149ec <_write_r>:
 80149ec:	b538      	push	{r3, r4, r5, lr}
 80149ee:	4c07      	ldr	r4, [pc, #28]	; (8014a0c <_write_r+0x20>)
 80149f0:	4605      	mov	r5, r0
 80149f2:	4608      	mov	r0, r1
 80149f4:	4611      	mov	r1, r2
 80149f6:	2200      	movs	r2, #0
 80149f8:	6022      	str	r2, [r4, #0]
 80149fa:	461a      	mov	r2, r3
 80149fc:	f7fd fa0f 	bl	8011e1e <_write>
 8014a00:	1c43      	adds	r3, r0, #1
 8014a02:	d102      	bne.n	8014a0a <_write_r+0x1e>
 8014a04:	6823      	ldr	r3, [r4, #0]
 8014a06:	b103      	cbz	r3, 8014a0a <_write_r+0x1e>
 8014a08:	602b      	str	r3, [r5, #0]
 8014a0a:	bd38      	pop	{r3, r4, r5, pc}
 8014a0c:	200048a4 	.word	0x200048a4

08014a10 <_close_r>:
 8014a10:	b538      	push	{r3, r4, r5, lr}
 8014a12:	4c06      	ldr	r4, [pc, #24]	; (8014a2c <_close_r+0x1c>)
 8014a14:	2300      	movs	r3, #0
 8014a16:	4605      	mov	r5, r0
 8014a18:	4608      	mov	r0, r1
 8014a1a:	6023      	str	r3, [r4, #0]
 8014a1c:	f7fd fa1b 	bl	8011e56 <_close>
 8014a20:	1c43      	adds	r3, r0, #1
 8014a22:	d102      	bne.n	8014a2a <_close_r+0x1a>
 8014a24:	6823      	ldr	r3, [r4, #0]
 8014a26:	b103      	cbz	r3, 8014a2a <_close_r+0x1a>
 8014a28:	602b      	str	r3, [r5, #0]
 8014a2a:	bd38      	pop	{r3, r4, r5, pc}
 8014a2c:	200048a4 	.word	0x200048a4

08014a30 <_fstat_r>:
 8014a30:	b538      	push	{r3, r4, r5, lr}
 8014a32:	4c07      	ldr	r4, [pc, #28]	; (8014a50 <_fstat_r+0x20>)
 8014a34:	2300      	movs	r3, #0
 8014a36:	4605      	mov	r5, r0
 8014a38:	4608      	mov	r0, r1
 8014a3a:	4611      	mov	r1, r2
 8014a3c:	6023      	str	r3, [r4, #0]
 8014a3e:	f7fd fa16 	bl	8011e6e <_fstat>
 8014a42:	1c43      	adds	r3, r0, #1
 8014a44:	d102      	bne.n	8014a4c <_fstat_r+0x1c>
 8014a46:	6823      	ldr	r3, [r4, #0]
 8014a48:	b103      	cbz	r3, 8014a4c <_fstat_r+0x1c>
 8014a4a:	602b      	str	r3, [r5, #0]
 8014a4c:	bd38      	pop	{r3, r4, r5, pc}
 8014a4e:	bf00      	nop
 8014a50:	200048a4 	.word	0x200048a4

08014a54 <_isatty_r>:
 8014a54:	b538      	push	{r3, r4, r5, lr}
 8014a56:	4c06      	ldr	r4, [pc, #24]	; (8014a70 <_isatty_r+0x1c>)
 8014a58:	2300      	movs	r3, #0
 8014a5a:	4605      	mov	r5, r0
 8014a5c:	4608      	mov	r0, r1
 8014a5e:	6023      	str	r3, [r4, #0]
 8014a60:	f7fd fa15 	bl	8011e8e <_isatty>
 8014a64:	1c43      	adds	r3, r0, #1
 8014a66:	d102      	bne.n	8014a6e <_isatty_r+0x1a>
 8014a68:	6823      	ldr	r3, [r4, #0]
 8014a6a:	b103      	cbz	r3, 8014a6e <_isatty_r+0x1a>
 8014a6c:	602b      	str	r3, [r5, #0]
 8014a6e:	bd38      	pop	{r3, r4, r5, pc}
 8014a70:	200048a4 	.word	0x200048a4

08014a74 <_lseek_r>:
 8014a74:	b538      	push	{r3, r4, r5, lr}
 8014a76:	4c07      	ldr	r4, [pc, #28]	; (8014a94 <_lseek_r+0x20>)
 8014a78:	4605      	mov	r5, r0
 8014a7a:	4608      	mov	r0, r1
 8014a7c:	4611      	mov	r1, r2
 8014a7e:	2200      	movs	r2, #0
 8014a80:	6022      	str	r2, [r4, #0]
 8014a82:	461a      	mov	r2, r3
 8014a84:	f7fd fa0e 	bl	8011ea4 <_lseek>
 8014a88:	1c43      	adds	r3, r0, #1
 8014a8a:	d102      	bne.n	8014a92 <_lseek_r+0x1e>
 8014a8c:	6823      	ldr	r3, [r4, #0]
 8014a8e:	b103      	cbz	r3, 8014a92 <_lseek_r+0x1e>
 8014a90:	602b      	str	r3, [r5, #0]
 8014a92:	bd38      	pop	{r3, r4, r5, pc}
 8014a94:	200048a4 	.word	0x200048a4

08014a98 <__ascii_mbtowc>:
 8014a98:	b082      	sub	sp, #8
 8014a9a:	b901      	cbnz	r1, 8014a9e <__ascii_mbtowc+0x6>
 8014a9c:	a901      	add	r1, sp, #4
 8014a9e:	b142      	cbz	r2, 8014ab2 <__ascii_mbtowc+0x1a>
 8014aa0:	b14b      	cbz	r3, 8014ab6 <__ascii_mbtowc+0x1e>
 8014aa2:	7813      	ldrb	r3, [r2, #0]
 8014aa4:	600b      	str	r3, [r1, #0]
 8014aa6:	7812      	ldrb	r2, [r2, #0]
 8014aa8:	1c10      	adds	r0, r2, #0
 8014aaa:	bf18      	it	ne
 8014aac:	2001      	movne	r0, #1
 8014aae:	b002      	add	sp, #8
 8014ab0:	4770      	bx	lr
 8014ab2:	4610      	mov	r0, r2
 8014ab4:	e7fb      	b.n	8014aae <__ascii_mbtowc+0x16>
 8014ab6:	f06f 0001 	mvn.w	r0, #1
 8014aba:	e7f8      	b.n	8014aae <__ascii_mbtowc+0x16>

08014abc <__malloc_lock>:
 8014abc:	4770      	bx	lr

08014abe <__malloc_unlock>:
 8014abe:	4770      	bx	lr

08014ac0 <_read_r>:
 8014ac0:	b538      	push	{r3, r4, r5, lr}
 8014ac2:	4c07      	ldr	r4, [pc, #28]	; (8014ae0 <_read_r+0x20>)
 8014ac4:	4605      	mov	r5, r0
 8014ac6:	4608      	mov	r0, r1
 8014ac8:	4611      	mov	r1, r2
 8014aca:	2200      	movs	r2, #0
 8014acc:	6022      	str	r2, [r4, #0]
 8014ace:	461a      	mov	r2, r3
 8014ad0:	f7fd f988 	bl	8011de4 <_read>
 8014ad4:	1c43      	adds	r3, r0, #1
 8014ad6:	d102      	bne.n	8014ade <_read_r+0x1e>
 8014ad8:	6823      	ldr	r3, [r4, #0]
 8014ada:	b103      	cbz	r3, 8014ade <_read_r+0x1e>
 8014adc:	602b      	str	r3, [r5, #0]
 8014ade:	bd38      	pop	{r3, r4, r5, pc}
 8014ae0:	200048a4 	.word	0x200048a4

08014ae4 <__ascii_wctomb>:
 8014ae4:	b149      	cbz	r1, 8014afa <__ascii_wctomb+0x16>
 8014ae6:	2aff      	cmp	r2, #255	; 0xff
 8014ae8:	bf85      	ittet	hi
 8014aea:	238a      	movhi	r3, #138	; 0x8a
 8014aec:	6003      	strhi	r3, [r0, #0]
 8014aee:	700a      	strbls	r2, [r1, #0]
 8014af0:	f04f 30ff 	movhi.w	r0, #4294967295
 8014af4:	bf98      	it	ls
 8014af6:	2001      	movls	r0, #1
 8014af8:	4770      	bx	lr
 8014afa:	4608      	mov	r0, r1
 8014afc:	4770      	bx	lr
	...

08014b00 <fmodf>:
 8014b00:	b5d0      	push	{r4, r6, r7, lr}
 8014b02:	ed2d 8b02 	vpush	{d8}
 8014b06:	b08a      	sub	sp, #40	; 0x28
 8014b08:	eef0 8a40 	vmov.f32	s17, s0
 8014b0c:	eeb0 8a60 	vmov.f32	s16, s1
 8014b10:	f000 f852 	bl	8014bb8 <__ieee754_fmodf>
 8014b14:	4b26      	ldr	r3, [pc, #152]	; (8014bb0 <fmodf+0xb0>)
 8014b16:	f993 4000 	ldrsb.w	r4, [r3]
 8014b1a:	1c63      	adds	r3, r4, #1
 8014b1c:	d035      	beq.n	8014b8a <fmodf+0x8a>
 8014b1e:	eeb4 8a48 	vcmp.f32	s16, s16
 8014b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b26:	d630      	bvs.n	8014b8a <fmodf+0x8a>
 8014b28:	eef4 8a68 	vcmp.f32	s17, s17
 8014b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b30:	d62b      	bvs.n	8014b8a <fmodf+0x8a>
 8014b32:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8014b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b3a:	d126      	bne.n	8014b8a <fmodf+0x8a>
 8014b3c:	2301      	movs	r3, #1
 8014b3e:	9300      	str	r3, [sp, #0]
 8014b40:	4b1c      	ldr	r3, [pc, #112]	; (8014bb4 <fmodf+0xb4>)
 8014b42:	9301      	str	r3, [sp, #4]
 8014b44:	ee18 0a90 	vmov	r0, s17
 8014b48:	2300      	movs	r3, #0
 8014b4a:	9308      	str	r3, [sp, #32]
 8014b4c:	f7f3 fc34 	bl	80083b8 <__aeabi_f2d>
 8014b50:	4606      	mov	r6, r0
 8014b52:	460f      	mov	r7, r1
 8014b54:	ee18 0a10 	vmov	r0, s16
 8014b58:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8014b5c:	f7f3 fc2c 	bl	80083b8 <__aeabi_f2d>
 8014b60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014b64:	b9ac      	cbnz	r4, 8014b92 <fmodf+0x92>
 8014b66:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8014b6a:	4668      	mov	r0, sp
 8014b6c:	f000 f8ac 	bl	8014cc8 <matherr>
 8014b70:	b1c8      	cbz	r0, 8014ba6 <fmodf+0xa6>
 8014b72:	9b08      	ldr	r3, [sp, #32]
 8014b74:	b11b      	cbz	r3, 8014b7e <fmodf+0x7e>
 8014b76:	f7fd fc03 	bl	8012380 <__errno>
 8014b7a:	9b08      	ldr	r3, [sp, #32]
 8014b7c:	6003      	str	r3, [r0, #0]
 8014b7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014b82:	f7f3 ff49 	bl	8008a18 <__aeabi_d2f>
 8014b86:	ee00 0a10 	vmov	s0, r0
 8014b8a:	b00a      	add	sp, #40	; 0x28
 8014b8c:	ecbd 8b02 	vpop	{d8}
 8014b90:	bdd0      	pop	{r4, r6, r7, pc}
 8014b92:	2200      	movs	r2, #0
 8014b94:	2300      	movs	r3, #0
 8014b96:	4610      	mov	r0, r2
 8014b98:	4619      	mov	r1, r3
 8014b9a:	f7f3 fd8f 	bl	80086bc <__aeabi_ddiv>
 8014b9e:	2c02      	cmp	r4, #2
 8014ba0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014ba4:	d1e1      	bne.n	8014b6a <fmodf+0x6a>
 8014ba6:	f7fd fbeb 	bl	8012380 <__errno>
 8014baa:	2321      	movs	r3, #33	; 0x21
 8014bac:	6003      	str	r3, [r0, #0]
 8014bae:	e7e0      	b.n	8014b72 <fmodf+0x72>
 8014bb0:	200001f0 	.word	0x200001f0
 8014bb4:	08028a88 	.word	0x08028a88

08014bb8 <__ieee754_fmodf>:
 8014bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014bba:	ee10 6a90 	vmov	r6, s1
 8014bbe:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 8014bc2:	ee10 3a10 	vmov	r3, s0
 8014bc6:	d009      	beq.n	8014bdc <__ieee754_fmodf+0x24>
 8014bc8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8014bcc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8014bd0:	ee10 7a10 	vmov	r7, s0
 8014bd4:	da02      	bge.n	8014bdc <__ieee754_fmodf+0x24>
 8014bd6:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8014bda:	dd0a      	ble.n	8014bf2 <__ieee754_fmodf+0x3a>
 8014bdc:	ee07 3a90 	vmov	s15, r3
 8014be0:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8014be4:	eec0 7aa0 	vdiv.f32	s15, s1, s1
 8014be8:	ee17 3a90 	vmov	r3, s15
 8014bec:	ee00 3a10 	vmov	s0, r3
 8014bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014bf2:	42a9      	cmp	r1, r5
 8014bf4:	dbfa      	blt.n	8014bec <__ieee754_fmodf+0x34>
 8014bf6:	f003 4400 	and.w	r4, r3, #2147483648	; 0x80000000
 8014bfa:	d105      	bne.n	8014c08 <__ieee754_fmodf+0x50>
 8014bfc:	4a30      	ldr	r2, [pc, #192]	; (8014cc0 <__ieee754_fmodf+0x108>)
 8014bfe:	0fe3      	lsrs	r3, r4, #31
 8014c00:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014c04:	681b      	ldr	r3, [r3, #0]
 8014c06:	e7f1      	b.n	8014bec <__ieee754_fmodf+0x34>
 8014c08:	4b2e      	ldr	r3, [pc, #184]	; (8014cc4 <__ieee754_fmodf+0x10c>)
 8014c0a:	4299      	cmp	r1, r3
 8014c0c:	dc3e      	bgt.n	8014c8c <__ieee754_fmodf+0xd4>
 8014c0e:	020a      	lsls	r2, r1, #8
 8014c10:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8014c14:	2a00      	cmp	r2, #0
 8014c16:	dc36      	bgt.n	8014c86 <__ieee754_fmodf+0xce>
 8014c18:	429d      	cmp	r5, r3
 8014c1a:	dc3a      	bgt.n	8014c92 <__ieee754_fmodf+0xda>
 8014c1c:	022b      	lsls	r3, r5, #8
 8014c1e:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 8014c22:	005b      	lsls	r3, r3, #1
 8014c24:	f102 32ff 	add.w	r2, r2, #4294967295
 8014c28:	d5fb      	bpl.n	8014c22 <__ieee754_fmodf+0x6a>
 8014c2a:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 8014c2e:	bfbb      	ittet	lt
 8014c30:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 8014c34:	1a1b      	sublt	r3, r3, r0
 8014c36:	f3c7 0116 	ubfxge	r1, r7, #0, #23
 8014c3a:	4099      	lsllt	r1, r3
 8014c3c:	bfa8      	it	ge
 8014c3e:	f441 0100 	orrge.w	r1, r1, #8388608	; 0x800000
 8014c42:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 8014c46:	bfb5      	itete	lt
 8014c48:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 8014c4c:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 8014c50:	1a9b      	sublt	r3, r3, r2
 8014c52:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 8014c56:	bfb8      	it	lt
 8014c58:	409d      	lsllt	r5, r3
 8014c5a:	1a80      	subs	r0, r0, r2
 8014c5c:	1b4b      	subs	r3, r1, r5
 8014c5e:	b9d8      	cbnz	r0, 8014c98 <__ieee754_fmodf+0xe0>
 8014c60:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 8014c64:	bf28      	it	cs
 8014c66:	460b      	movcs	r3, r1
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d0c7      	beq.n	8014bfc <__ieee754_fmodf+0x44>
 8014c6c:	4915      	ldr	r1, [pc, #84]	; (8014cc4 <__ieee754_fmodf+0x10c>)
 8014c6e:	428b      	cmp	r3, r1
 8014c70:	dd1a      	ble.n	8014ca8 <__ieee754_fmodf+0xf0>
 8014c72:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 8014c76:	db1a      	blt.n	8014cae <__ieee754_fmodf+0xf6>
 8014c78:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8014c7c:	4323      	orrs	r3, r4
 8014c7e:	327f      	adds	r2, #127	; 0x7f
 8014c80:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8014c84:	e7b2      	b.n	8014bec <__ieee754_fmodf+0x34>
 8014c86:	3801      	subs	r0, #1
 8014c88:	0052      	lsls	r2, r2, #1
 8014c8a:	e7c3      	b.n	8014c14 <__ieee754_fmodf+0x5c>
 8014c8c:	15c8      	asrs	r0, r1, #23
 8014c8e:	387f      	subs	r0, #127	; 0x7f
 8014c90:	e7c2      	b.n	8014c18 <__ieee754_fmodf+0x60>
 8014c92:	15ea      	asrs	r2, r5, #23
 8014c94:	3a7f      	subs	r2, #127	; 0x7f
 8014c96:	e7c8      	b.n	8014c2a <__ieee754_fmodf+0x72>
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	da02      	bge.n	8014ca2 <__ieee754_fmodf+0xea>
 8014c9c:	0049      	lsls	r1, r1, #1
 8014c9e:	3801      	subs	r0, #1
 8014ca0:	e7dc      	b.n	8014c5c <__ieee754_fmodf+0xa4>
 8014ca2:	d0ab      	beq.n	8014bfc <__ieee754_fmodf+0x44>
 8014ca4:	0059      	lsls	r1, r3, #1
 8014ca6:	e7fa      	b.n	8014c9e <__ieee754_fmodf+0xe6>
 8014ca8:	005b      	lsls	r3, r3, #1
 8014caa:	3a01      	subs	r2, #1
 8014cac:	e7df      	b.n	8014c6e <__ieee754_fmodf+0xb6>
 8014cae:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8014cb2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8014cb6:	3282      	adds	r2, #130	; 0x82
 8014cb8:	4113      	asrs	r3, r2
 8014cba:	4323      	orrs	r3, r4
 8014cbc:	e796      	b.n	8014bec <__ieee754_fmodf+0x34>
 8014cbe:	bf00      	nop
 8014cc0:	08028a90 	.word	0x08028a90
 8014cc4:	007fffff 	.word	0x007fffff

08014cc8 <matherr>:
 8014cc8:	2000      	movs	r0, #0
 8014cca:	4770      	bx	lr

08014ccc <_init>:
 8014ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014cce:	bf00      	nop
 8014cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014cd2:	bc08      	pop	{r3}
 8014cd4:	469e      	mov	lr, r3
 8014cd6:	4770      	bx	lr

08014cd8 <_fini>:
 8014cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014cda:	bf00      	nop
 8014cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014cde:	bc08      	pop	{r3}
 8014ce0:	469e      	mov	lr, r3
 8014ce2:	4770      	bx	lr
